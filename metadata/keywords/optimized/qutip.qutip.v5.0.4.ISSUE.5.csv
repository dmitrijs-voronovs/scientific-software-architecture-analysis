quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"So beside that if i have also normal collapse operators, i just need to define and put them at the fourth argument of mesolve. I thank you very much dear Jakelishman. Be safe.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1435#issuecomment-774028841:170,safe,safe,170,https://qutip.org,https://github.com/qutip/qutip/issues/1435#issuecomment-774028841,1,['safe'],['safe']
Safety,So did the simulations complete the second time? Or did it abort in the same location?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697#issuecomment-303783251:59,abort,abort,59,https://qutip.org,https://github.com/qutip/qutip/issues/697#issuecomment-303783251,1,['abort'],['abort']
Safety,"So, while I agree that having a flexible storage format is a good way to go, the truth of the matter is that no one has time to implement such a big change. SciPy supports both 32 and 64-bit ints, and checks to see which ones are needed at runtime. e.g. a tensor product of two sparse matrices with int32, may need int64 in the result since their shape is larger. We could also do a similar thing, but it is a lot of work. The reason why we no longer use standard SciPy sparse objects is: 1) They tend to have a sizeable overhead when being created and/or manipulated do to redundant safety checks. 2) Many of the sparse operations are not well optimized. Because SciPy supports many different sparse formats, they had to generalize many of their core operations, making them slower. For example, the sparse kronecker product first converts to COO format, does the tensoring, and then converts back to the original format. Our method is much faster. Supporting more than just the current CSR format is also problematic. As already mentioned, there would be type checks, conditionals, and format conversions everywhere. e.g. what happens when DIA * CSR. As usual, available time is the limiting factor here. Support for both int32 and int64 is not that hard, but would take some time. Just int64 would make smaller matrices larger, but would allow for much greater system dimensions. In this later case, it would be a simple switch `int` -> `int64` and `size_t` -> `uint64` in the Cython code, and the fastsparse module (plus probably other places.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-384005667:574,redund,redundant,574,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-384005667,2,"['redund', 'safe']","['redundant', 'safety']"
Safety,Solver safety,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/538:7,safe,safety,7,https://qutip.org,https://github.com/qutip/qutip/pull/538,1,['safe'],['safety']
Safety,"Solvers: absolutely the solvers should always be packaged with the main `qutip`. I had sort of envisaged that we'd put them in a `solve` package, which would be exported into the main namespace just like `core` is. This way is more just for greater separation, so that the full core isn't entangled with the solvers themselves - I think separating them like this will help us ensure that we specify the data layer API much more cleanly if the solvers aren't referenced within it. (i.e. there's no reference to any solver within `core`, but the API is built sufficiently cleanly that they can still access all the internals). OpenMP check: I think there's two neater ways:; 1. perhaps `settings` should just be in `core` too? I avoided putting the check in `core/__init__.py` because I'm really trying to avoid bi-directional dependencies between the packages, but moving `settings.py` into `core` would solve that.; 2. alternatively, we could just write `settings.py` as part of `setup.py` - determine whether we built against OpenMP/MKL at compile-time, and then just write it in? We can still choose whether or not to use it in various runtime situations. As for the current test - yeah, the comparative complexity is kind of indicative that this isn't the right way to do it. It's a relatively straightforward use of `importlib`, but still it's more difficult. (By the way: are you and @ajgpitch getting notified when I post in [the discussion board](https://github.com/orgs/qutip/teams/data-layer-devs)?)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282#issuecomment-638730654:727,avoid,avoided,727,https://qutip.org,https://github.com/qutip/qutip/pull/1282#issuecomment-638730654,2,['avoid'],"['avoid', 'avoided']"
Safety,"Sorry I didn't get round to commenting on this PR sooner. Since it's now come up in #1579 around the subject of sorting out licensing in general in QuTiP, let me also note some stuff about that here. #1579 proposes to remove all individual-file licence text, because it is in general redundant, and makes it harder for us to centrally manage our licence. There is some concern (mostly mine), that it will be a little difficult for us to manage additional code which does not sign over copyright to the QuTiP admin team; if we accept it, we will have to keep the notice in perpetuity. This will pose a bit of a Theseus' ship problem for us if we ever want to re-organise the file that contains this code; after how many modifications is the code no longer NASA's, but QuTiP's? As long as it's not _ours_, we can't separate it out into different files, or mix it with other code (say additional implementations). I'm definitely not a lawyer, but I'm worried that will cause us code organisation problems in the future, and while the licence would give us permission to improve the code, it's the reorganisation I'm worried about. Secondly, about the code itself: this sort of local operation is something I absolutely would like to include, but I'm not certain that the form it's in right now is the best, general way to do it. I think this is part of much larger discussion about how to handle tensor networks - for example, at the moment, `targets` is fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:284,redund,redundant,284,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['redund'],['redundant']
Safety,"Sorry, I'm not sure of the meaning of the failed Travis CI check. I actually came back to comment, that just adding the missing sign may be safer than recursive calls of the function to itself. In the present case I don't see an actual danger of getting stuck in a loop, even with future changes to one of the involved functions, but it now feels safer to just add the missing sign. Maybe someone more experience can comment or just merge the request...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/565#issuecomment-263870324:140,safe,safer,140,https://qutip.org,https://github.com/qutip/qutip/pull/565#issuecomment-263870324,2,['safe'],['safer']
Safety,"Sounds good to me. Yeah, even if `packaging` _were_ in `setuptools`, it'd still be an explicit dependency of ours, so you're right to put it in, thanks. Yeah, that coveralls thing just looked like a network timeout on their side. Not the fault of this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1715#issuecomment-973127486:207,timeout,timeout,207,https://qutip.org,https://github.com/qutip/qutip/pull/1715#issuecomment-973127486,1,['timeout'],['timeout']
Safety,"Switching `auto_tidyup` to being a relative tolerance not an absolute tolerance I think is a really good idea. It raises the cost of it a bit by making it a two-pass operation (and for sure let's use the max norm, not the trace norm!), but I think it's a sensible compromise. We could even have two options - `tidyup_atol` and `tidyup_rtol` to have both, and have `tidyup_atol` default to `0`. Also, fine point about `QobjEvo` - I'd forgotten that it internally called `tidyup`. I'm certainly in favour of swapping the default to `False` for the next major release. I know people may still want the option, so not a good idea to remove it completely, but I think having the default be `False` is safer numerically.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680027055:696,safe,safer,696,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680027055,1,['safe'],['safer']
Safety,"Thank for the remark. ; @NS2LPS Replacing the first row of the Liouvillian is a standard way to ensure the algorithm produces a steady state with trace one. Since this condition is, in theory, redundant, adding the weighted first-row or substituting the first line should be equivalent. Often the algorithm is unstable, so one weights the trace 1 condition. Maybe how much of the first row is kept can make the algorithm even more stable?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-661868732:193,redund,redundant,193,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-661868732,1,['redund'],['redundant']
Safety,"Thank you for all your work @gsuarezr . Just for a bit more context. Qutip currently contains in the HEOM module ""BosonicBath / FermionicBath"" classes that describe a bath with a multi-exponential decomposition of the correlation function. This new environment module is supposed to be a more general framework to characterize thermal environments. Environments with multi-exponential decompositions are included as `ExponentialBosonicEnvironment`; this class is supposed to mostly replace the old HEOM `BosonicBath`. We now use the term ""environment"" instead of ""bath"" mostly to avoid having the same name for the new classes as in the HEOM module. There is a little difference between the old and the new class, namely that the system coupling operator is a part of BosonicBath (i.e., an attribute of BosonicBath and required in the constructor), but we have decided for the new module that system operators should not be part of the environment. This means that to create a HEOM solver, one will need to specify environments and coupling operators, somewhat similar to the `brmesolve` solver where one specifies both power spectrum and `a_op`. (Currently, one just specifies a list of ""baths"" in the HEOM solver). This will require some small changes to the HEOM solver interface that we still have to implement before merging this PR. Note that we are also making sure that existing code continues to work without changes. Another thing missing from this PR are fermionic environments. I would have liked to have them, but it was becoming too much work and a too large PR, so fermionic environments will have to be added a bit later. Some more advantage of our changes are:; * The new environment classes could be used directly as inputs for solvers other than the HEOM solver, for example for `mesolve` or `brmesolve`. These solvers could compute their jump operators and rates from the environment power spectrum and system operators. (That is however also left for a future PR, since it would r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525:580,avoid,avoid,580,https://qutip.org,https://github.com/qutip/qutip/pull/2534#issuecomment-2359719525,1,['avoid'],['avoid']
Safety,"Thank you for reporting.; There seems to be an issue with our detection of mkl for a while.; Since it's an optional dependancy, the related tests have been quietly skipped for a while... You could probably manually import it until we make a patch:; ```; from ctypes import cdll; import sys; import os. qutip.settings._mkl_lib = cdll.LoadLibrary( os.path.dirname(sys.executable) + r'\Library\bin\mkl_rt.dll' ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2496#issuecomment-2243309367:62,detect,detection,62,https://qutip.org,https://github.com/qutip/qutip/issues/2496#issuecomment-2243309367,1,['detect'],['detection']
Safety,"Thank you for your review. > The default seems to be a relative weight of `1`. Meaning that it should work fine in solver which does not use it (stochastic). But should they just keep using `Result` until we have a use for those weight?. I let them use `Result` again for now. I needed to add some lines [here](https://github.com/pmenczel/qutip/blob/weighted-trajectories/qutip/solver/result.py#L710) so that the new `MultiTrajResult` can deal with it. (Which might be a good idea anyway.). > It there a balancing tools for weight values? If there are 2 runs, can both have a relative weight of 10 or 0.1 without affecting the end results? If there are 2 starting kets that we want to merge with a weight of 10:1, does the actual values matter or only the ratio?. I have added a `merge` function that lets the user merge trajectory results with custom relative weights. I think trajectories with absolute or relative weights are handled consistently. Calling `result1 + result2` uses default values for the relative weights, chosen such that every trajectory contributes equally.; (That doesn't currently work for the stochastic solvers, but to my understanding, adding results didn't work for them previously either. It raises a `NotImplementedError` now.). > I feel it would be safer to compute the relative weight as `W(T) / sum_T(W(T))` instead of using the number of trajectories. Hmm unfortunately I think that this won't work. For the ""improved sampling"" case, the sum of the relative weights is not one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2369#issuecomment-2029539933:1280,safe,safer,1280,https://qutip.org,https://github.com/qutip/qutip/pull/2369#issuecomment-2029539933,1,['safe'],['safer']
Safety,"Thank you. Turning off auto tidy of course fixes my issue.; I use QuTiP for quantum photonics, where our down-conversion probabilities are of order 1e-7, and sometimes we do two cascaded. This tiny photon component is nonetheless measurable in the lab, and QuTiP is really helpful to predict rates and noise. I guess the problem is unitless in the sense that these small elements are directly the photon probability amplitudes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/521#issuecomment-242072924:284,predict,predict,284,https://qutip.org,https://github.com/qutip/qutip/issues/521#issuecomment-242072924,1,['predict'],['predict']
Safety,Thanks @Ericgig for feedback.; I see (having read more carefully) in; https://github.com/qutip/qutip-notebooks/blob/master/examples/smesolve-inefficient-detection.ipynb; there is an example showing the equivalence of using `smesolve` and `general_stochastic` with a clear performance enhancement in the former. So I think I can easily switch my example to use `smesolve`. Thanks.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581:153,detect,detection,153,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547215581,1,['detect'],['detection']
Safety,"Thanks Chris,; This seems like a useful addition. I have taken a quick look at the code, and it seems like it is fairly independent, and so could be merged with little risk. The interface seems good, so I can't see any issues immediately. . Are you planning to do a notebook example?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-127953580:168,risk,risk,168,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-127953580,1,['risk'],['risk']
Safety,"Thanks for reporting this - it's an important bug that's snuck in. Right now, there's a few errors in your code that you can fix to get on your way again, but we need to fix the error on our side. You're using `sigmap()` which is the Pauli excitation operator and is only defined for a Hilbert space with dimension 2. You actually are working with a Hilbert space of dimension `nmax * nmax` (a tensor-product space), so your `e_ops` argument to `sesolve` is wrong - it's difficult to know exactly what you meant here. `destroy(2)` is equivalent to `sigmap()`, so it's possible you intended to have `e_ops` be `[qutip.tensor(a1, a2)]`?. ---. Maintainers: The error is actually a segfault, because QuTiP 4.5 (probably 4.4 too) does not do sufficient error checking on`e_ops` arguments - probably they're missing in the conversion to `CQobjEvo`. When the expectation is called, it has already sidestepped `Qobj`'s dimensions check and there is no matrix size check, so it simply segfaults on OOB access. The fix for the 4.x branch is to have a very loud Python-space error due to mismatched `Qobj` dimensions on entry to the solvers, or insert a size check within `CQobjEvo`. High priority: there's no reason we should be segfaulting here. Partially fixed in the 5.x branch; all matrix multiplications that take place in C-space have a size check and throw a Python exception, however the solvers still sidestep the `Qobj` dimension check so a tensor-product-space mismatch will not be detected.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492:1483,detect,detected,1483,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492,1,['detect'],['detected']
Safety,"Thanks for reporting this. This appears to have _always_ been an inconsistency between the documentation and the code. These lines were added in one commit in #166, with no reference to any changes. I note at the moment that calling `max` on an array of complex (like this) finds the number with the maximal _real_ part, and then takes the absolute value of that. I suspect that the `max` call got added in after everything else was written - if you remove that call, you would retrieve the documented behaviour, though I don't know enough about the numerical strategies to know which method is safer; I don't know whether we should change the documentationi or the behaviour. @nwlambert might be better placed to answer that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1512#issuecomment-829102786:595,safe,safer,595,https://qutip.org,https://github.com/qutip/qutip/issues/1512#issuecomment-829102786,1,['safe'],['safer']
Safety,"Thanks for the clue, it was helpfull.; The source of problem is localization of `lscpu` util, which used by `_linux_hardware_info()` function.; The function expects `'Socket(s)'`, `'Core(s) per socket'`, etc in `lscpu` output, but in my system it actually `'Потоков на ядро'`, `'Сокетов'`, etc.; I think, maybe better less system dependent ways to calculate cpu count, for example, we could use `multiprocessing` module and it's `cpu_count` function. Or `len(os.sched_getaffinity(0))`for computers with dynamic cpu management (see [this](https://stackoverflow.com/questions/31346974/portable-way-of-detecting-number-of-usable-cpus-in-python) for details).; Or show exception/error, if we try to use lscpu and `LANG` is not english (or we couldn't found mentioned above `'Socket(s)'`).; Ideas?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045:599,detect,detecting-number-of-usable-cpus-in-python,599,https://qutip.org,https://github.com/qutip/qutip/issues/1004#issuecomment-497325045,1,['detect'],['detecting-number-of-usable-cpus-in-python']
Safety,"Thanks! I don't think we should include ipynb files into the main repo though as they are usually pretty large binary files. . If we want to have this figure, it would be nice to include the source code stored somewhere in a file under `qutip\doc` and generate the figure automatically when building the doc. Just like other matplotlib figures. In addition, it would be good to avoid using `pandas` and `mpmath` in the code if possible. Python has its own JSON reader and for mpmath, I'm not sure if such a high float precision is necessary.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1828#issuecomment-1065880645:378,avoid,avoid,378,https://qutip.org,https://github.com/qutip/qutip/pull/1828#issuecomment-1065880645,1,['avoid'],['avoid']
Safety,"Thanks!. @Ericgig ; > If you need to use an array coefficient and this is your restriction on tlist, use qutip.Cubic_spline (or build the QobjEvo before the solver, but I don't remember if it is safe in v4). This is exactly my case. I see, I can just give mesolve a Cubic_spline object, very nice. I didn't know that give `tlist` to mesolve is same as asking these intermediate results. I was using it just as a match for array coefficient. Actually, I've been using array coefficient for a while and I don't even know such functionality exists. And I remember someone else mentioned this to me before, so I shouldn't be the only one. I see in the doc there is a section mentioning it. Probably we could stress it a bit more. @jakelishman ; > We probably shouldn't mutate the given Options object, but the call as written here doesn't make a huge amount of sense - why would you want to run the integrator but not have any output stored at all? You'd just be spinning your processor. Sorry, my post was a bit unclear. I only need the final result. So I set `store_final_state=True`, but that doesn't change the behaviour of `store_state` at all. Indeed, I'm doing so just because I didn't know the solution Eric pointed out before. For me a warning before changing `Options` would be nice. And probably pointing out the solution Eric mentioned?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775319207:195,safe,safe,195,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775319207,1,['safe'],['safe']
Safety,"The `Qcircuit.tex` PR was unfortunately many many years ago, long before I made my first commit to QuTiP (according to `git log` it was by Anubhav Vardhan in 2014), so the damage is already done. It was on my mind because there was a PR about updating the version of the code in it (#1187). Nonetheless, we definitely should remove it. @BoxiLi Boxi: `Qcircuit.tex` is a concern for `qutip-qip` more than the main library from 5.0 onwards - it's currently in `qip/circuit_latex.py`, which we'll have removed, but you've gained. It might be most appropriate to handle this the same way Qiskit does - generate code which does `\usepackage{qcircuit}`, and leave it up to the user to have a properly-provisioned LaTeX environment. I note that `qcircuit` is included in MikTeX and TexLive since at least 2018 (but not sure when exactly it was added). > Yeah putting years I think is the correct thing. Didn't know that at the time. Ah, that's good to know, thanks. I'm trying to learn more about licensing - I'm trying to get it sorted now into the right form, but it's a really complicated field. I think if we change `LICENCE.txt` to. ```text; Copyright (c) 2011--2021 Paul Nation and Robert Johansson.; Copyright (c) 2021--2021 QuTiP Admin Team.; All rights reserved. <BSD 3-clause licence>; ```. and update the final `2021` as appropriate, we'll be in the best standing. That's also why we might want to remove the general licence text from each file - it's already redundant, but it'll be much harder to update if we have it scattered everywhere (automation would run the risk of us messing up and changing any external code's licence as well, I think, which would be wrong). > Look forward to talking to you in July!. Me too!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845:1464,redund,redundant,1464,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864059845,2,"['redund', 'risk']","['redundant', 'risk']"
Safety,"The `dims` in the line you commented out appear to be incorrect. They are the dims for the Liouvillian (i.e. operator over the density matrix) and not of the density matrix itself. Specify `dims=[[2, 2, 2], [2, 2, 2]]` instead. Slightly longer answer; If you don't specify the dims when creating a Qobj from an ndarray, QuTiP assumes the dims are the shape of the array. Your Hamiltonian is constructed by tensoring together operators on single qubits, so it's dims are more structured and QuTiP detects the mismatch.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1989#issuecomment-1232217541:496,detect,detects,496,https://qutip.org,https://github.com/qutip/qutip/issues/1989#issuecomment-1232217541,1,['detect'],['detects']
Safety,"The `general_stochastic` function does process the `e_ops`. ; I see your point about it being it being a general solver of SDEs and so it makes sense that the variable is a vector. Certainly no value in changing the processing to work on Qobj.; I just think it would make usage easier if `state0` and `e_ops` (and I guess `m_ops`) could be provided as dm and opers rather than vectorised and superoperators. These could be recognised as such and converted before processing. We could then convert the `result.states` accordingly. . Anyway, I am only just beginning to understand this stuff, so I will leave it up to your judgement as to whether this is worth the effort. If the aim to try always to avoid `general_stochastic`, then I suppose it is not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547219289:699,avoid,avoid,699,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547219289,1,['avoid'],['avoid']
Safety,"The `metrics.dnorm` function uses the cvxpy library to calculate the diamond norm. Twice now it has caused many test failures out of the blue #484 and #872.; It would seem like the developers do not prioritise maintaining a conda package. As this is our recommended platform, then it is a risk having this cvxpy dependence. Perhaps there is a method using scipy that we could employ?. @cgranade perhaps could provide some context?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874:289,risk,risk,289,https://qutip.org,https://github.com/qutip/qutip/issues/874,1,['risk'],['risk']
Safety,"The current QuTiP admin team (@quantshah, @BoxiLi, @ajgpitch, @Ericgig, @nwlambert, and @nathanshammah) has been working on a governance model and document in the past few months. We'd like to propose this to the broader QuTiP community of contributors and users. The main takeaway is that QuTiP has grown enormously in use in the past few years, thanks to the work of its creators, @jrjohansson and @nonhermitian, and a devoted group of core developers (among whose: @arnelg, @cgranade and many others), as well as now, over 80 [contributors](https://github.com/qutip/qutip/graphs/contributors) to the main `qutip/qutip` repository, as well as all the help on [`qutip-notebooks`](https://github.com/qutip/qutip-notebooks), [`qutip-doc`](https://github.com/qutip/qutip-doc), and [`qutip.github.io`](https://github.com/qutip/qutip.github.io) as well as the other packages that are now being spin out in the QuTiP Github organization to avoid feature creeps. Not to mention all the help provided in Qutip's google group, a forum for bugs, physics questions and research ideas. Over the years, the QuTiP project has enabled a large ecosystem of supported libraries, such as `Krotov` (cc @goerz and others), `pyEPR` (cc @zlatko-minev), `scqubits` (cc @jkochNU), and many others. . With this governance model, we'd like to keep doing what we're doing, with the support, since 2018, of @NumFOCUS, which supports scientific open source projects, and, from now on, the additional support of @unitaryfund, a non-profit that supports open-source projects in quantum technologies. . Below we reproduce a governance document that we will add to a new repository at [github.com/qutip/governance](https://github.com/qutip/governance). We are looking forward to help the growth of the user community, engage it with code contributions and bug reports, and make this awesome scientific open-source project even more sustainable. We will update all related information at [github.com/qutip/governance](https://github.c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:935,avoid,avoid,935,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['avoid'],['avoid']
Safety,"The first step of calculating the trace norm is to do `A @ A.dag()`, which we did internally in Qobj.norm. This creates a temporary `Qobj`, and those created from `Qobj.__mul__` are subject to tidyup by default, so this temporary structure may incorrectly get tidied to the zero matrix. For example, the code; ```python; qutip.qdiags(1e-7 * np.random.rand(10), 0).norm(); ```; would previously give 0, as clearly all elements of `A @ A.dag()` would be less than 1e-14, and subject to tidyup. We avoid the call that may be tidied up by jumping straight to CSR-CSR matrix multiplication, and set `isherm=True` without going via Qobj, since the operation is Hermitian for any matrix. Fix gh-952",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1479:495,avoid,avoid,495,https://qutip.org,https://github.com/qutip/qutip/pull/1479,1,['avoid'],['avoid']
Safety,"The include a new class to represent time dependent Qobj system.; It's take the list of Qobj and coefficient in the format normally accepted by solvers like mesolve and mcsolve and make an object of it.; The td_Qobj is callable and return the Qobj at the desired time, it support math (+,-,*) and unitary transformations: conj, dag, transpose.; The object has a cython compiled version with cython call to spmv and expect in order to be efficient in solvers.; I made it as a tool used by solver (stochatic/mcsolve), therefore may lack some features for users. Also the naming of some methods only make sense in a solver (rhs).; Lastly, this branch include it's own cubic spline code since the version available when I started working on it only accepted uniformly sampled data. This part may have become redundant. This branch only contain the new object, not the solvers using it.; This pull request replace half the ""cythonizing mcsolve"" pull request.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/814:804,redund,redundant,804,https://qutip.org,https://github.com/qutip/qutip/pull/814,1,['redund'],['redundant']
Safety,"The plugin was already enabled by default, so this does not turn it on. However, it also defaults to Python 2, which means it produces a lot of syntax errors, and the run (silently) failed every time. This may cause our CodeClimate score to drop, not because we actually got worse, but because we suddenly start seeing a load of duplication that was previously hidden. I'm hoping that getting these parser errors fixed will mean that the ""Progress report"" tab on CodeClimate will start getting populated. **Changelog**: (developer changes) fixed Python version for duplication detection in CodeClimate",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1577:577,detect,detection,577,https://qutip.org,https://github.com/qutip/qutip/pull/1577,1,['detect'],['detection']
Safety,"The problem is recognising what a true 0 is from a small value. In your example on the new data layer, there will already be exactly 0 items explicitly stored (and `data.add_csr` is going to get faster and smarter in another PR, too) without `tidyup`, but much more concerningly `1e-15 * qutip.rand_herm(5)` will end up in a zero matrix, which is clearly absolutely wrong. The argument from Liouvillian doesn't work here - even before the new data layer, `liouvillian` never called the `tidyup` code because it accessed the `Qobj.data` field directly, rather than used `Qobj`. Since it then goes into `CQobjEvo` in most of the solvers, which also don't touch the `tidyup` code, it doesn't get called. I don't think there's any safe way to know if small values should actually be zero, or if they're just small values. It makes sense that we want to maintain as much sparsity as possible when values are truly zero, but I think having the QuTiP default be to attempt to tidy up after every addition, multiplication and matrix multiplication is quite unsafe, and for people who aren't doing very very sparse calculations, it's actually a slow down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384:727,safe,safe,727,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384,2,"['safe', 'unsafe']","['safe', 'unsafe']"
Safety,"The question about the mandatory default for states is a good one. So currently we call the `QobjEvo` with `t=0` to get its dims. This is slightly hacky, but very convenient, and usually `t=0` is a valid time. Feedback breaks this assumption though because now `t=0` is insufficient information. We also need the current state, but we can't create a dummy state because we don't know what its dims should be yet. So there is a cycle we have to break somehow. Currently we break this by having the user supply an initial state, but perhaps we could do other things. The worst case is when the Qobj part of an EvoElement is supplied by a function. Then we can't get the dims without calling it. When the Qobj part is just a Qobj, getting the dims is fairly straight forward. So one option would be to ask the user to supply the dims if there are no EvoElements that provide a Qobj to look at, or to guarantee that their function is callable with just `t=0`. I'm not sure this is entirely nicer, but it does avoid having to supply a dummy initial state. Thoughts?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1846240598:1005,avoid,avoid,1005,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1846240598,1,['avoid'],['avoid']
Safety,"The solver safety check did not work for a list of Python funcs as the td input. This fixes that, and allows for e_ops to be a Python callback function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/687:11,safe,safety,11,https://qutip.org,https://github.com/qutip/qutip/pull/687,1,['safe'],['safety']
Safety,"The tests fail because if one defines `f(t, args, k)` and defines `g = partial(f, k=0.5)` then the signature of g is `<Signature (t, args, *, k=5)>`. There will likely be other cases like this (e.g. many decorators will change the signature). I vote that we give up on all the complicated detection of the old syntax and simply ask users to change `f(t, args)` to `f(t, **args)` when they upgrade to QuTiP 5.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881:289,detect,detection,289,https://qutip.org,https://github.com/qutip/qutip/pull/1609#issuecomment-892540881,1,['detect'],['detection']
Safety,The timeouts are because of a GitHub actions outage. It appears to have been resolved earlier today -- https://www.githubstatus.com/incidents/29xnrws671f0.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787#issuecomment-1023376091:4,timeout,timeouts,4,https://qutip.org,https://github.com/qutip/qutip/pull/1787#issuecomment-1023376091,1,['timeout'],['timeouts']
Safety,"There is a chance that this is the same bug as #1495, which has a fix posited in #1498 - it matches all the versioning criteria, though on that issue we hadn't detected a problem with this particular test at these dimensions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-820355903:160,detect,detected,160,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-820355903,1,['detect'],['detected']
Safety,"There is one pitfall I know but I'm not sure if that is the reason here:. Is your Hamiltonian mostly 0 in the time duration? QuTiP solves dynamically change the step size, if there are a lot of zeros, it may skip the non-zero part accidentally (see https://github.com/qutip/qutip/issues/1265). You will detect it by adding a small constant `H` (magntitude~10^-6) on top of your Hamiltonian (if this H does not affect your true dynamic significantly). If that's not your case, we may need more information to actually identify the problem.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-808904001:303,detect,detect,303,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-808904001,1,['detect'],['detect']
Safety,"There's maybe some tricks here to do with multiprocessing and pickle/unpickle, but since the objects are deterministic and completely immutable, I can't see anything inherently wrong with a singleton approach here. These objects are purely data; they must not have _behaviour_ attached to them (methods) only immutable state (properties), so they're inherently thread-safe.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764066603:368,safe,safe,368,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764066603,1,['safe'],['safe']
Safety,"These are the files that Boxi (@BoxiLi) was checking in #1181, but the commits are tidied up and rebased onto `master`. The merge conflict in `test_gates.py` that's present in #1181 is fixed (with all the tests safely maintained). This is based on #1249, and that one needs to be merged first. **Changelog**; Major test refactor into a pytest style.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251:211,safe,safely,211,https://qutip.org,https://github.com/qutip/qutip/pull/1251,1,['safe'],['safely']
Safety,"This is causing test failures in all CI builds against scipy 1.5 currently. The other failing tests on scipy 1.5 are due to changes to the handling of `csr` matmul operations, which is fixed in patch #1298. As far as I can see, there is no way to recover the exact same behaviour as existed in scipy < 1.5 (there's optimisations of the `lwork` input to the LAPACK routine), and consequently we are not getting the exact same set of eigenvectors for problem dimensions > 32. This does not mean that `brtools` is suddenly doing something wrong. It just means that the test assumed we would have the exact same output as `scipy`, and we don't any more. . This is an annoying problem to fix, I think. Two possible methods:. 1. attempt to ""trick"" scipy into doing the same pre-1.5 behaviour. Possibly this would involve monkey-patching out the ability of `eigh` to optimise the `lwork` parameters (i.e. stubbing out `scipy.linalg.lapack._compute_lwork` to always return `lwork=18*nrows`, `lrwork=24*nrows` and `liwork=10*nrows` to match `qutip.cy.brtools.ZHEEVR`).; 2. do some linear algebra work to determine that the eigenvectors we have returned are equivalent to the ones scipy has returned. 2 is a better solution, but harder to implement, especially in the presence of degenerate or near-degenerate eigenvalues (of which there are likely a lot around 0). 1 is very unsatisfying, but might be enough. In general, this problem will hopefully be solved a bit more thoroughly when `brmesolve` is updated to use the new data layer types, and we standardise the calculation of eigenvalues and -vectors across QuTiP. Hopefully someone has a better idea than me? @Ericgig, @nonhermitian.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299:247,recover,recover,247,https://qutip.org,https://github.com/qutip/qutip/issues/1299,1,['recover'],['recover']
Safety,"This is expected. I don't see any reason to compute the state at a time if you don't want the state or and expectation value... If you only want the last state use tlist=[0, t_last]. Also `tlist` does not have to be a linear space, if you want to save only the few last values you can do: `tlist=[0,990,1000]`, etc. If you need to use an array coefficient and this is your restriction on `tlist`, use `qutip.Cubic_spline` (or build the `QobjEvo` before the solver, but I don't remember if it is safe in v4).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1437#issuecomment-775216732:495,safe,safe,495,https://qutip.org,https://github.com/qutip/qutip/issues/1437#issuecomment-775216732,1,['safe'],['safe']
Safety,"This is just a test. ; Since many failed Travis builds had a malloc error, also according to [this StackOverflow thread](https://stackoverflow.com/questions/19840671/malloc-error-incorrect-checksum-for-freed-object-object-was-probably-mod/19841133) it seemed that XCode was the source of the problem. . I added as osx environment in the travis configuration file xcode 10.2 (should be on osx 10.14 Mojave, not sure though). Build still fails, now at ; ```; Qobj subtraction ... python(2491,0x1192585c0) malloc: Incorrect checksum for freed object 0x7ffe6ff1ad50: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(2491,0x1192585c0) malloc: *** set a breakpoint in malloc_error_break to debug; /Users/travis/.travis/functions: line 104: 2491 Abort trap: 6 nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; The command ""nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip"" exited with 134.; ```; which seems a pretty basic test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/985#issuecomment-485054530:770,Abort,Abort,770,https://qutip.org,https://github.com/qutip/qutip/pull/985#issuecomment-485054530,1,['Abort'],['Abort']
Safety,"This is the same as https://github.com/qutip/qutip/issues/1247. QuTiP uses sparse matrices, so a matrix element smaller than a certain threshold (by default 1e-7) will be discarded. This can be changed in the settings. Consider changing your unit to avoid very small values, for instance, by writing the formula with h=1` and in nanosecond time unit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1466#issuecomment-804264437:250,avoid,avoid,250,https://qutip.org,https://github.com/qutip/qutip/issues/1466#issuecomment-804264437,1,['avoid'],['avoid']
Safety,This is very interesting! I was looking for some time already a way to incorporate assembler here. Now it is possible to use FMA (fused multiply add) which should greatly improve speed of almost anything or there is a very neat implementation of complex number product with FMA which is exact (avoids loss of precision) with almost no performance penalty.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/551#issuecomment-253969071:294,avoid,avoids,294,https://qutip.org,https://github.com/qutip/qutip/pull/551#issuecomment-253969071,1,['avoid'],['avoids']
Safety,"This latest commit 77c21f8 fixes several bugs in the testing of `qutip.qip.operations.gates` - see the commit message for more details. (Force-pushed a new version of it to increase the commit hash references by one character, so GitHub would pick them up and link them.). We should also add tests that the explicit forms of the gates are correct (comparing to hard-coded arrays) in their base forms. These tests should never really fail, but they should be there as a fail-safe sanity check against somebody changing things in that module in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-593333553:474,safe,safe,474,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-593333553,2,"['safe', 'sanity check']","['safe', 'sanity check']"
Safety,"This may seem like a pedantic change, but is does (very slightly) improve performance in hsolve, and also avoids addressing an array index as a non-integer. Seems to make sense for the state numbers to be integers anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/446:106,avoid,avoids,106,https://qutip.org,https://github.com/qutip/qutip/pull/446,1,['avoid'],['avoids']
Safety,"This merges #1588 from master into dev.major. - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585. - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1589:171,sanity check,sanity checks,171,https://qutip.org,https://github.com/qutip/qutip/pull/1589,1,['sanity check'],['sanity checks']
Safety,"This pull implements a safety check where the Qobj data class is validated as fast_csr_matrix type everytime the Q.data attribute is set. This guarantees that the Qobj's have the correct data type. This was not always true previously. In addition, many items are fixed so that the above rule passes. Finally, we no longer need the tests that check for Qobj csr_matrix type. This is now strictly enforced.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/609:23,safe,safety,23,https://qutip.org,https://github.com/qutip/qutip/pull/609,1,['safe'],['safety']
Safety,"This relaxes the amount of sorting required in the `add_csr` operation. In the current version in `dev.major`, both the left and right matrices are sorted in all cases. This PR makes `add_csr` an `Accumulator` operation, which straight away reduces the number of sorts required to one. Second, I add a track inside `scatter` to know whether the scatters were in sorted order; if so, there's no need to sort within `gather`, which removes the other sort from `add_csr`. Effectively, this means that `add_csr` is O(n) when both input matrices are sorted (the most common) and O(n lg(n)) when either isn't, and we don't actually have to perform a separate test to decide between them. In practice, this is around a 2x speedup for most common sparse matrices, and goes up from there. I have also made `Accumulator` a C struct, and all the operations on it header-file only. This allows them to be operated on without holding the GIL (though threaded access to the same one would be unsafe anyway), and it also allows them to be inlined - if they are defined in the `pyx` file, then they will be compiled into a separate object and so must be called. We had talked about making `CSR` have a ""guarantee"" that it is always sorted, but I haven't implemented that here. Because of the changes to `scatter`, that would no longer give an algorithmic speedup in this case for matrices that are sorted (although we could avoid the use of `Accumulator` which would be more efficient). All of the operations I have written return a sorted matrix, so generally matrices will tend to become sorted over time anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1362:978,unsafe,unsafe,978,https://qutip.org,https://github.com/qutip/qutip/pull/1362,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,"This run will still timeout, as it was started before the fix.; Hopefully it will work on a rerun.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787#issuecomment-1023399263:20,timeout,timeout,20,https://qutip.org,https://github.com/qutip/qutip/pull/1787#issuecomment-1023399263,1,['timeout'],['timeout']
Safety,"This should at least partially address #377, as it seems that `from __future__ import absolute_import` isn't causing the built-in `logging` to appear in preference to `qutip.logging` on Windows 8. Given the hassles of calling both `logging`, the idea behind this PR is to just rename and avoid conflicts that way.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/379:288,avoid,avoid,288,https://qutip.org,https://github.com/qutip/qutip/pull/379,1,['avoid'],['avoid']
Safety,"This shouldn't segfault (we should detect it and turn it into a Python error, so that's definitely a bug), but do note that you'd need a supercomputer to actually use a system of that size - storing a single operator or state of this system would require 8GB of RAM even if it were the 0 operator.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1406#issuecomment-747009088:35,detect,detect,35,https://qutip.org,https://github.com/qutip/qutip/issues/1406#issuecomment-747009088,1,['detect'],['detect']
Safety,"This test would fail approximately 1 in 10 times. I have parametrised the test case so pytest sees the different dimension runs as separate elements, which gives us better information on what's going on. I have only seen the test fail on CI on Mac, as best as I remember, and after a bit of experimentation, I was able to reproduce the issue on my Mac at approximately the same frequency as we saw it on Travis, if I was using OpenBLAS. I couldn't reproduce the failures with MKL, so I'm fairly sure this is to do with our use of `eig` instead of `eigh` on Mac/OpenBLAS to avoid segfaults (see #1197, #1288). This makes some sense - the tolerances of `eig` are effectively slightly more permissive than `eigh` when dealing with real numbers, because there's more scope for an eigenvalue to be different by having a small imaginary component (contributes in quadrature) as opposed to only having the linear difference. I'm pretty confident that there's no logic error that caused the tolerances to slip a little, it's just a reality of dealing with an imperfect eigensystem solver, so I've relaxed the test tolerances by just a little. Fix #1431",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1474:573,avoid,avoid,573,https://qutip.org,https://github.com/qutip/qutip/pull/1474,1,['avoid'],['avoid']
Safety,"This took longer than anticipated because of a bunch of knock-on nasty Cython problems, and I struggled to get OpenMP running locally on macOS ([but I've got it now](https://www.binhbar.com/posts/2020/06/compiling-openmp-libraries-on-macos/)). Tag: @Ericgig, @ajgpitch. ---. Separate out what will become the ""core"" of qutip into its own subpackage. This package is intended to have most of its public symbols re-imported into the global package namespace. There should be no substantive changes to any actual worker code in this large commit, just what is necessary to carve out a major entangled part of the core library. Some files currently in core may be moved out in a future version (e.g. graph, metrics, semidefinite), but right now they are too entangled with `Qobj` or other true-core parts, and to remove them now would require too much substantive change to the code, which would be difficult to review in this commit. Major changes required as part of this:; - module-level imports (e.g. `from qutip.qobj import Qobj`) are replaced with simple ones from the namespace (e.g. `from qutip import Qobj`). While inside the `core` package, imports are kept as module-specific, largely to support the mess of circular imports present in qutip at the more.; - .pxi files are no longer recommended as the way to share code between Cython files, so these have been converted into proper Cython modules and added to the distribution.; - collection of Cython extension components in `setup.py` is consolidated to support them no longer all existing in the same place. As the data layer is fleshed out, likely there will be even more Cython locations present.; - the test for OpenMP in `__init__.py` had to be made more indirect via importlib to avoid causing a full import of `qutip.core`, which would in turn cause Qobj and other parts to be imported. These components required `__init__.py` to have discovered whether OpenMP existed already before they were imported, causing false negatives.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282:1746,avoid,avoid,1746,https://qutip.org,https://github.com/qutip/qutip/pull/1282,1,['avoid'],['avoid']
Safety,"This updates the licence holders to be the ""QuTiP Admin Team"" (this is similar to how Numpy handle their licensing). This also updates the text of the licence file to a GitHub-readable version of the 3-clause BSD licence, so it should present better information to users as well. At present, erroneous whitespace in the licence file means that GitHub's detection can't tell what exactly the licence is. In addition, having the text of the licence in each file is redundant, and just made it more annoying to edit the files. It also made it much harder to update the information in the licence in order to put the whole admin team as copyright holders, so I have removed it. Again, this is in keeping with how other large-scale projects manage their licensing. We always distribute `LICENSE.txt` with all copies of the QuTiP source (either by clone of the repository, or by sdist). **Changelog**: update licence holders with regards to new governance model, and remove extraneous licensing information from source files.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579:353,detect,detection,353,https://qutip.org,https://github.com/qutip/qutip/pull/1579,2,"['detect', 'redund']","['detection', 'redundant']"
Safety,"To elaborate a little on the syntax: There's two prefixes (which can also be combined), `.` and `~`. (There's also `!`, but I don't know when you'd ever use that one.). The `~` cuts down the name in the *output* to the last component. That is, if you write a reference using the fully qualified name `` :class:`~qiskit.QuantumCircuit` `` it will show up in the rendered HTML as ""QuantumCircuit"" (without the tilde, it would be the full ""qiskit.QuantumCricuit"". The`.` is for cutting down the name in the *input*, e.g. you could write `` :func:`.mesolve` `` instead of `` :func:`qutip.mesolve.mesolve` `` anywhere, and Sphinx will search its internal index for any fully qualified name that ends in `.mesolve` and use that. This is great for keeping docstrings readable, but I'd avoid using it to refer to *external* functions (from intersphinx). See the Sphinx documentation on [Cross-referencing syntax](https://www.sphinx-doc.org/en/1.8/usage/restructuredtext/domains.html#cross-referencing-syntax) and the explanations at the end of [Cross-referencing Python objects](https://www.sphinx-doc.org/en/1.8/usage/restructuredtext/domains.html#cross-referencing-python-objects) for details.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1528#issuecomment-619413454:778,avoid,avoid,778,https://qutip.org,https://github.com/qutip/qutip/issues/1528#issuecomment-619413454,1,['avoid'],['avoid']
Safety,"To me this is a question of what guarantees our primary type makes, so it's quite a big decision to be taken. I'm not sure I agree that implementing `__array_wrap__` is a good idea - `Qobj` does not support ufunc semantics, and implementing that implies that we're a similar class to `ndarray`, which I don't think we are. I don't think `np.sin(qobj)` should return `ndarray` _or_ `Qobj`; I think it should be a TypeError. To me, we should be rather conservative about adding features like that when there's little tangible benefit - when there's a slightly more explicit alternative syntax, it's better to fail-safe than add potential ""gotchas"". The fact that elementwise operations are not part of the algebra of `Qobj` should be enough of a reason to cause you to have to explicitly ask for it, otherwise it tacitly _becomes_ part of the algebra. For your point three, if that's the case, I'd argue you're doing something wrong: are you constructing the `Qobj` before you've finalised your data? Shouldn't it be; ```python; incomplete_data = np.array([[theta, 0, 0], ...]); return Qobj(np.sin(incomplete_data)); ```; not; ```python; return np.sin(Qobj(incomplete_data)); ```. As a compromise, we could ensure that all our data-layer types (`CSR`, `Dense`, whatever else) will support ufuncs with ndarray syntax; then you could do `Qobj(np.sin(qobj.data))` to be explicitly elementwise if you really wanted, rather than absolutely requiring you to produce a full dense matrix. I'm still not sure I see the use case there, though. I'm in favour of removing `np.array([qobj1, qobj2, ...], dtype=object)` usage inside QuTiP no matter which way we come down on this, though. As far as I recall from seeing it, there no reason to use `ndarray` over a regular Python list in any of our internal use, and it's rarely (if ever) actually returned out of a QuTiP function. Given it might cause subtle differences between different numpy versions, probably best to avoid it. If GSoC applications are imminent, ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-774058408:612,safe,safe,612,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-774058408,1,['safe'],['safe']
Safety,"Uninstalling cython or using a virtualenv without it will make the risky code make an import error and not crash. cython is needed for installation, but mostly optional at runtime. It can be used to speedup some computations but usually the compilation time is not worth it. Or, you can run tests per section:; ```; import nose; import glob; for testfile in glob.glob("".../qutip/qutip/tests/*.py):; test = testfile[N:-3].repace(""\"",""."") # remove the whole path and the .py: ( ""qutip.tests.test_qobj"" ); nose.run(defaultTest=test, argv=['nosetests', '-v']); ```; test_mccolve, test_stochastic_se and test_stochastic_me will fail/crash, but I expect most of the rest to pass.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1084#issuecomment-531884694:67,risk,risky,67,https://qutip.org,https://github.com/qutip/qutip/issues/1084#issuecomment-531884694,1,['risk'],['risky']
Safety,"Unstable `qutip.testing.run()` prompts abort traps locally (Mac, Python 3.7)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:39,abort,abort,39,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['abort'],['abort']
Safety,"Using integer-like floats in `math.factorial` is deprecated as of Python 3.9. Glancing over the rest of the code, I'm fairly sure `math.factorial` is only called on floats formed by (e.g.) `N / 2 + 0.5`, which is guaranteed be an integer for all odd `N` integers, but to be safe I inserted the same test that `math.factorial` will do as well. By the way: depending on how accurate you actually want/need to be with your degeneracy calculations, a common way to deal with these binomial quantities is to work in the logarithmic space --; ```python; def factln(x):; return scipy.special.gammaln(x + 1). def energy_degeneracy(N, m):; return int(np.exp(Decimal(factln(N) - factln(N/2 + m) - factln(N/2 - m)))); ```; This is pretty much guaranteed to be faster, but a little less precise; double-precision floats have ~15 decimal digits of precision compared to the `Decimal` default of 28. You have to be careful that the `np.exp` call doesn't overflow (unless you can use the number in logarithmic space as well), but you can just use a single `Decimal` instance like I did if it really matters to you to have huuuuge numbers output. I suspect it doesn't, since you multiply it by a float right after, which will overflow to `inf`. Timings:; ```python; from math import factorial; from decimal import Decimal; import numpy as np; from scipy.special import gammaln. def degeneracy_all_decimal(N, m):; return int(Decimal(factorial(N)) / (Decimal(factorial(int(N/2+m))) * Decimal(factorial(int(N/2-m))))). def degeneracy_log_then_decimal(N, m):; return int(np.exp(Decimal(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1)))). def degeneracy_log(N, m):; return int(np.exp(gammaln(N+1) - gammaln(N/2+m+1) - gammaln(N/2-m+1))); ```; ```python; In [3]: %timeit degeneracy_all_decimal(1000, 0); ...: %timeit degeneracy_log_then_decimal(1000, 0); ...: %timeit degeneracy_log(1000, 0); 831 µs ± 1.91 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each); 31.9 µs ± 190 ns per loop (mean ± std. dev. of 7 runs,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1550:274,safe,safe,274,https://qutip.org,https://github.com/qutip/qutip/pull/1550,1,['safe'],['safe']
Safety,"Using singleton will certainly speed thing up. ; 1. With `subspace` to represent `enr` or other special case, it should be able to represent everything. But super operators have multiple representation (`choi`, `kraus`, `super`, etc.). So I would suggest adding a `super` subclass with that information instead of using `map`.; 2. Basis safety, if required, will make Qutip usage heavier. ; 4. Let's keep it as an inside representation only: having `Space(2)` for a ket but `Map(Space, Field)` for bra will only cause confusion and super-operator of tensor system will get very long.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764826119:337,safe,safety,337,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764826119,1,['safe'],['safety']
Safety,Variable used before declaration in `smesolve` for heterodyne detection.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2078:62,detect,detection,62,https://qutip.org,https://github.com/qutip/qutip/issues/2078,1,['detect'],['detection']
Safety,"We can in theory drop that requirement for users - it was there in the immediate aftermath of the Numpy 1.20 release, which broke C-ABI compatibility with previous versions, and we had a couple of problems with people building against Numpy 1.20 but trying to run against a prior version. Our CI and release versions will still all need to be built against Numpy 1.16 (or our minimum supported runtime Numpy) as the lowest common denominator until we drop support for all Numpy releases before 1.20, but we enforce that in our build pipelines anyway. Just to be clear (though I think you knew this):. > Can qutip be updated to run with current versions of Numpy?. QuTiP already runs correctly against Numpy 1.20 and Numpy 1.21, and its runtime requirements on Numpy are uncapped. It's just building from source that'll fail, and that was originally a sort of ""fail-safe"" mechanism. Also `pip install -e .` should automatically do build isolation for you, including installing all the build requirements into a temporary virtual environment, so it should have just worked here. Calling `setup.py develop` directly is kind of out-dated now, though it can still be useful if you're planning on doing Cython development; `pip`'s isolation actually usually means that the Cython compiler can't detect changes any more, so it always needs to rebuild everything. `setup.py develop`, because of its much lower-level status, leaves the source and extension-library files well enough untouched that it can do incremental compilation. If you're not doing Cython development (only Python), `pip install -e .` is much better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497:865,safe,safe,865,https://qutip.org,https://github.com/qutip/qutip/issues/1720#issuecomment-974830497,2,"['detect', 'safe']","['detect', 'safe']"
Safety,"We could take this PR as an example of how to work with a very messy git history. I see some forced pushes which should probably have been rebases to avoid conflicts. But at this point I would suggest to Boxi that you open a fresh PR branching from the current master on your local qutip repo. So do:. ```; git checkout master; git pull upstream master; git push origin master; ```. This syncs your master to QuTiP. Then, start a new branch and make the same changes that you did here on that new branch. . Make the changes, add commit etc.; ```; git checkout -b user_gate2; ...; git add .; git commit -m ""message""; ```. and then make a new PR and close this (without merging). Then delete this branch (locally and remote). ```; git branch -D user_gate; git push origin -delete user_gate; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1025#issuecomment-505060556:150,avoid,avoid,150,https://qutip.org,https://github.com/qutip/qutip/pull/1025#issuecomment-505060556,1,['avoid'],['avoid']
Safety,We should avoid any file output related to Result objects. This could be costly in loops that produce a lot of results.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/752#issuecomment-330591946:10,avoid,avoid,10,https://qutip.org,https://github.com/qutip/qutip/pull/752#issuecomment-330591946,1,['avoid'],['avoid']
Safety,"Well, your opinion is definitely important, especially regarding core :) Performance is a top requirement there. Technically I think there is no need for square root at all because we can just compare the squared value to the squared tolerance. But I get your point that constant factor may dominate the performance of a small system. It's best to avoid Cython in ""good first issues"", so this one won't be on my list anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-794400401:348,avoid,avoid,348,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-794400401,1,['avoid'],['avoid']
Safety,What I did in stochastic.py is a totally redundant mess. This is the reason I didn't do the pull request. I feel that an elegant way to add the Milstein with multiple Wiener increments (as well as any other more advanced methods) is to switch to a RHS function which is provided with all A_ops and which returns rho_{n+1}. Since it involves changing of API I want to discuss it with you first.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22015755:41,redund,redundant,41,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22015755,1,['redund'],['redundant']
Safety,"When I ran against @dick-t's example, it still violated the bound F ≤ 1, but by significantly less than before, as can be confirmed by the [success of `test_fidelity_bounded_purepure`](https://github.com/qutip/qutip/pull/362/files#diff-3e3c19be6d013d22c4823607e07cd240R106), introduced by #362. That PR doesn't fully adapt to the pure vs pure case that @dick-t lists, but it does avoid `sqrtm` in that case. I can fully specialize to that case, if you like, by using the inner product of the two pure states.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/361#issuecomment-134930346:380,avoid,avoid,380,https://qutip.org,https://github.com/qutip/qutip/issues/361#issuecomment-134930346,1,['avoid'],['avoid']
Safety,When using the `average_states` solver option `general_stochastic` seemed to error when summing the timeslot states. This PR provides a fix for this. Also included is some hopefully more succinct messages from the safety checks in `general_stochastic`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115:214,safe,safety,214,https://qutip.org,https://github.com/qutip/qutip/pull/1115,1,['safe'],['safety']
Safety,Why is heterodyne considered as a special case? To me the heterodyne detection scheme looks like a case of the homodyne detection. What do I miss?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/54:69,detect,detection,69,https://qutip.org,https://github.com/qutip/qutip/issues/54,2,['detect'],['detection']
Safety,"With cython0.29 that came out this weeks there where warning at ""cythonization"" about language_level. Complied with it by adding `#cython: language_level=3` at the start of every .pyx and .pxd. Also rename the cy/*testing* files to cy/*checks* since nose detected them as tests to run which caused automated tests to fail.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/927:255,detect,detected,255,https://qutip.org,https://github.com/qutip/qutip/pull/927,1,['detect'],['detected']
Safety,"With the latest changes, `Qobj.type` now points at the new `dims_utils.type_from_dims`, which consolidates the type-detection logic in one place and makes it more robust to ragged `dims`. On Python 2 all tests of `qobj`, `tensor` and `dims_utils` now pass locally, I'll try with Python 3 soon.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/389#issuecomment-152941888:116,detect,detection,116,https://qutip.org,https://github.com/qutip/qutip/pull/389#issuecomment-152941888,1,['detect'],['detection']
Safety,"Without the black changes, the patch would have applied cleanly, I think. With them, it's better to wait til the end, and then rebase the PR on top of master (in git, not github), then merge the PR into master as normal. The rebase is a destructive operation (rewrites history of the PR), so we have to take more care when working with more than one person, but it's better afterwards. I've heard this called a few things - Atlassian calls it a ""foxtrot merge"", for example. Here's a blog post they made about them, and some of the problems: https://blog.developer.atlassian.com/stop-foxtrots-now/. *Edit*: I usually wouldn't care about this, and we'd just squash the PR into a single commit to avoid all these problems, but in this particular case, the PR is kind of like two logical things at once. First it does @dweigand's original PR (but completed), and then it does what could have been another improvement change to all the code. We want to preserve the history in source control of the original PR (so you can see the changes I made to speed it up), so it needs to go in as two separate commits, doing a regular merge. If you're working on your own stuff, normally you'd be able to just squash and be done with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-878194970:695,avoid,avoid,695,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-878194970,1,['avoid'],['avoid']
Safety,"Yeah, definitely there's no point running tests that aren't really testing the package properly. I would hope that if we're much more aggressive about converting time-dependent lists into QobjEvo objects inside `mesolve`, `mcsolve` and `sesolve` (or the class-based versions of them), we could significantly reduce the amount of testing that needs to be done with them. Most of the tests of time-dependent formats would then occur in the QobjEvo tests. We could still test all the configurations of the solvers without too heavy a time penalty. If we only use a small number of different time-dependent operators, we can compile them all only once, and have `pytest` manage the resources through shared fixtures. That would really cut down the run times, especially for the current ""slow"" tests. Another avenue for cutting down run time is if we could merge say the MKL and OpenMP tests into one Travis job - the setup time for one job is about 2.5 minutes, and that's before any tests have run at all. I would hazard a guess that having MKL but not OpenMP is a pretty rare case (maybe more common on high-performance clusters where people submit single-cpu jobs?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182:1011,hazard,hazard,1011,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604348182,1,['hazard'],['hazard']
Safety,"Yeah, on the practical side I was using those states to construct collapse operators, and then using these in steadystate() for a large range of parameters. Bit surprised to see what took 20 minutes in 4.7 took >5 hours in in v5 :0 I guess this is a combo of Liouvillian construction taking much longer as it then converts the Hamiltonian to Dense as well, and steady-state solving taking a bit longer too. Of course I can manually make those operators sparse (and then v5 just takes 7 mins!), but more generally, I think the logic of default_dtype is nice; essentially allows you to run QuTiP in that 'mode'. Also useful for cases like making jax objects, etc. ; I have another case where I actually want all operators to be dense, as I use .expm() a lot. . I think most functions in operators.py and states.py follow this logic, e.g., `basis()` in states.py: `dtype = dtype or settings.core[""default_dtype""] or _data.Dense`. I think it seems to make sense to apply it universally, irrespective of whether a particular object is naturally of one type or another, to avoid the cost of conversion when doing lots of repetitive things, avoid accidentally getting or making a particular type when you expect something different from default_dtype, etc. edit: Just to add, your suggestion of having two different default_dtypes could be nice too. I can imagine situations were you want to define both separately.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2328#issuecomment-1951469496:1067,avoid,avoid,1067,https://qutip.org,https://github.com/qutip/qutip/issues/2328#issuecomment-1951469496,2,['avoid'],['avoid']
Safety,"Yeah, that's good. There are plenty of cases (like in the tests) where we want to change something like `ntraj` on-the-fly within the same script. Even just in regular REPL work, I mess around with tolerances and things like that, and it's much much easier to be able to do that case-by-case, rather than having to set global state, which often ends up with boilerplate when you're trying to be safe - you can't do quick checks as one-liners, and you have to use `try/finally` if you only want to temporarily set it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1297#issuecomment-651144540:395,safe,safe,395,https://qutip.org,https://github.com/qutip/qutip/pull/1297#issuecomment-651144540,1,['safe'],['safe']
Safety,"Yeah, using `np.int`, `np.long` or `np.longlong` when it _matters_ what size they are is a recipe for disaster. C99 guarantees that `stdint.h` will be available, so you can always safely use `np.int8`, `np.int16`, `np.int32` and `np.int64` if you know the size you need. If you just need ""at least"" whatever, then in C `int` is >= 16-bit, `long` is >= 32-bit and `long long ` is >= 64-bit.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1313#issuecomment-655142649:180,safe,safely,180,https://qutip.org,https://github.com/qutip/qutip/pull/1313#issuecomment-655142649,1,['safe'],['safely']
Safety,"Yeah. Just do a 'git pull upstream master' on this branch. The Travis; config file was updated and it's not the same as this branch. You don't; have to do a painful rebase. The tests need to run online. On Mon, Jun 18, 2018, 9:03 PM Louis Tessler <notifications@github.com>; wrote:. > @sahmed95 <https://github.com/sahmed95> shouldn't the merge automatically; > take care of that without bothering to rebase?; >; > I'd like to avoid wasting time on a rebase if there's no tangible benefit; >; > —; > You are receiving this because you were mentioned.; >; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/883#issuecomment-398031660>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBArCWgSxWGFO-QoURjxQPLZ63Eeiks5t95crgaJpZM4UrUyK>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883#issuecomment-398048087:427,avoid,avoid,427,https://qutip.org,https://github.com/qutip/qutip/pull/883#issuecomment-398048087,1,['avoid'],['avoid']
Safety,"Yes, I agree, it would be much better to avoid separate sources. It is just the spmv.c that does the parallel spmv work is it?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647#issuecomment-279789981:41,avoid,avoid,41,https://qutip.org,https://github.com/qutip/qutip/issues/647#issuecomment-279789981,1,['avoid'],['avoid']
Safety,"Yes, I also get a few abort trap 6 crashes. I wonder why on Travis CI they seem to always run fine lately. By the way, we have migrated to `pytest`. Hopefully this will help.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-576516559:22,abort,abort,22,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-576516559,1,['abort'],['abort']
Safety,"Yes, the QT stuff is bit troublesome.. and it is not a core functionality in qutip. The about() and demos() does not do much harm, so deprecate them in next release we can drop them alltogether in the following release. The progressbar is a bigger problem, because (if I got this right) it is partly due to the event-loop tricks we need to do to get the qt progressbar to work we have problems with catching keyboardinterrupt properly in for example mcsolve, and this makes it difficult to abort a calculation cleanly. This is big problem in IPython notebooks, where one cannot hit Ctrl-C and Ctrl-Z until process is stopped.. Factoring the qt progressbar out of mcsolve should therefore be a priority, and the simplest way to do this would obviously be to drop the qt progressbar function completely... I'll add a note about this in the roadmap wiki and closing this issue now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/19#issuecomment-18917941:490,abort,abort,490,https://qutip.org,https://github.com/qutip/qutip/issues/19#issuecomment-18917941,1,['abort'],['abort']
Safety,"Yes, the operator is acting like it should. When working with ; oscillators, you need to truncate at some point, and so issues similar ; to the one you raise are part of the territory. However, if one wants ; to be self-consistent, then you start with truncated operators, and then ; build all other operators / states and whatnot from there. -P. > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 18:08; >; > OK, if it's intended then there's nothing to change in the code. But I ; > think it would be helpful to document this in a clearer way: there's a ; > big risk of misinterpreting the operator.; >; > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub ; > <https://github.com/qutip/qutip/issues/661#issuecomment-286282270>, or ; > mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ABMPqSiIdpvqRZIZO2kklDrotB4b-6b0ks5rldpigaJpZM4MbmLX>.; >; > ziofil <mailto:notifications@github.com>; > March 13, 2017 at 11:48; >; > When I tried to use the |qutip.squeeze| function for my simulations I ; > noticed that something was off. Upon further investigation I found out ; > that the output is not a truncated version of the single-mode ; > squeezing unitary, but rather the matrix exponential of the truncated ; > generator. These are /very/ different things!; >; > Am I right in assuming that the most useful matrix would be the ; > truncated unitary? If that's the case, the current method to compute ; > it is wrong. To compute the right matrix one can use the disentangling ; > formula for SU(1,1) (formula (31) here ; > <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.e",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286284923:577,risk,risk,577,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286284923,1,['risk'],['risk']
Safety,"Yes, this can happen.. But I dont think this is a bug or error, although it can be confusing. There is always a risk of namespace collisions when importing different packages into the global namespace. For example, many conflicts of this kind occur between the math and numpy packages.. The only way to get around it safely is to import packages in different namespaces.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/25#issuecomment-18951570:112,risk,risk,112,https://qutip.org,https://github.com/qutip/qutip/issues/25#issuecomment-18951570,2,"['risk', 'safe']","['risk', 'safely']"
Safety,"Yes, you should avoid printing such a large object. I imagine the memoryerror occurs when it is generating the full() representation for printing. ```; q = qutip.tensor(qutip.destroy(20), qutip.destroy(20), qutip.destroy(20)); ```. would avoid the object being printed in the notebook.; I have no experience of working with such a large object though, so I can't say that you would be able to anything useful with it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/432#issuecomment-184466115:16,avoid,avoid,16,https://qutip.org,https://github.com/qutip/qutip/issues/432#issuecomment-184466115,2,['avoid'],['avoid']
Safety,"You can run. ```; cython spmatfuncs.pyx; ```. to generate the C file. Yes I agree, there isn't a huge point in using spmv over. We get some speed improvement because we type checks and stuff like that, and can avoid the overhead of an extra function call. It is mostly useful when the RHS function itself is implemented in cython, but also in that case it doesn't make a huge difference.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/52#issuecomment-25343399:210,avoid,avoid,210,https://qutip.org,https://github.com/qutip/qutip/pull/52#issuecomment-25343399,1,['avoid'],['avoid']
Safety,"You may find it easier to create tensor-producted identity operators by using the shorthand `qeye([2, 2, 2])`, which will automatically sort out the tensor product for you. You may also want to look at `qutip.qip.operations.expand_operator`, which will handle applying your operator to qubits. You _can_ bypass the dimension checking by retrieving the underlying matrix at `C.data` or `C.full()` (these may change in QuTiP 5, but for now you're fine), doing your calculations, then reconstructing the `Qobj` at the end. If all you're really using from QuTiP is the tensor product structure though, then you may achieve what you want with `numpy.kron` and avoid all of the overhead. The only part of your example that I'd consider is convoluted is the duplication in the `rand_unitary_haar` and `rand_ket` requiring you to specify both `N` and `dims` - we probably could merge those, like how we do with `qeye`, `basis` and others.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1253#issuecomment-624739240:655,avoid,avoid,655,https://qutip.org,https://github.com/qutip/qutip/issues/1253#issuecomment-624739240,1,['avoid'],['avoid']
Safety,Your welcome and thanks for looking into this. I understand that there are functionality considerations to be made. Perhaps a simple assertion check would strike the right balance -- giving the functionality you want while avoiding the danger of faulty assumptions.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/18#issuecomment-17175299:223,avoid,avoiding,223,https://qutip.org,https://github.com/qutip/qutip/issues/18#issuecomment-17175299,1,['avoid'],['avoiding']
Safety,[![Coverage Status](https://coveralls.io/builds/44887329/badge)](https://coveralls.io/builds/44887329). Coverage remained the same at 65.525% when pulling **d3a5c6e3ebb43afa0c2eb7b2456c886cb9651bd1 on Ericgig:safe.integrator** into **298316b4f034f467788943015b3277bf88f3fc9b on qutip:dev.major**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1734#issuecomment-989070040:209,safe,safe,209,https://qutip.org,https://github.com/qutip/qutip/pull/1734#issuecomment-989070040,1,['safe'],['safe']
Safety,[![Coverage Status](https://coveralls.io/builds/46207692/badge)](https://coveralls.io/builds/46207692). Coverage decreased (-0.04%) to 68.373% when pulling **70743870eae1ee47e1f3229d846b99a51c0a708e on Ericgig:pytest.timeout** into **97f668227f35ab0a97dcb1ca5fbc14c060e7ac6a on qutip:master**.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787#issuecomment-1028481056:217,timeout,timeout,217,https://qutip.org,https://github.com/qutip/qutip/pull/1787#issuecomment-1028481056,1,['timeout'],['timeout']
Safety,`2 * Options.rtol` could be good enough for most the tests.; ; But expecting `Options.rtol` to be a good estimation of the numerical error in all case is risky. There is no promise by the solver that the result is within rtol of the analytical solution and it ignore error propagation in the post-treatment steps.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625407196:154,risk,risky,154,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625407196,1,['risk'],['risky']
Safety,"`Qobj` has some fast-path constructors that are basically the solvers saying ""this data is valid, just trust me"", causing it to skip sanity checks. There are a few slow points that can be skipped: copying unnecessary data, parsing/verifying the `dims` data, and determining the properties (`isherm`, `iscp`, etc). All of those add on very non-negligible construction time, but at most points in QuTiP we _know_ the values when passing them. Old-style code uses these magic ""fast-path"" constructors, but the new 5.0 branch gets rid of all of them - you can achieve much more, and more explicitly, by using the kwargs, and function-specific logic stays at the call location, rather than being bolted into `Qobj`. We still want to maintain passing `isherm` to `Qobj` when we know it for speed reasons, especially when we know the most common use of the `Qobj` created by `mesolve` is for finding expectation values. However, you can set the value based on the hermicity of the input density matrix; if you're passed a true density matrix, you'll always get a Hermitian matrix out, whereas you'll generally be in an unknown state if you're not. The test can be; ```python; def mesolve(H, rho0, tlist, ...):; hermicity = rho0.isherm or None; ...; for t in tlist:; output.states.append(Qobj(fdata, dims=dims, isherm=hermicity)); ```; which forces `isherm=True` if that's _known_, but leaves it unset if not. This is approximately how we handle things in 5.0, which is in part why we have huge reductions in `Qobj` construction time in the new version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1460#issuecomment-796689049:133,sanity check,sanity checks,133,https://qutip.org,https://github.com/qutip/qutip/issues/1460#issuecomment-796689049,1,['sanity check'],['sanity checks']
Safety,"`scipy` 1.5 has changed some of its private attributes for matrix multiplication (to a _much_ better name!), and so matrix-matrix multiplication is completely broken for us at the moment: see scipy/scipy@53fac7a. There's also been some changes to how Hermitian eigenvalues and vectors are calculated (which actually is good news for us in general), which may has a bit of a knock-on for some of the `zheevr` tests, which is going to be a bit of a nuisance to fix. To avoid polluting this PR with (any more) off-topic discussion, I've opened #1299. The new data layer types will fix the matrix multiplication issue permanently, because we'll not be duplicating/reusing large tracts of `scipy` private code - we have our own Cython versions that operate faster on more optimised types. In the meantime, #1298 is a patch to catch the renames.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-649446743:467,avoid,avoid,467,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-649446743,1,['avoid'],['avoid']
Safety,"a that coding in qutip should be as similar to writing in dirac notation as possible (within reason). As an example, here is how you can do a partial trace:. ```; In [14]: rho = rand_dm(4,dims=[[2,2],[2,2]]). In [15]: out = Qobj(). In [16]: for i in range(2):; out += tensor(qeye(2),basis(2,i).dag())*rho*tensor(qeye(2),basis(2,i)); ....:. In [17]: out; Out[17]:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 0.39666875+0.j 0.13801792+0.01223399j]; [ 0.13801792-0.01223399j 0.60333125+0.j ]]. In [18]: rho.ptrace(0); Out[18]:; Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isherm = True; Qobj data =; [[ 0.39666875+0.j 0.13801792+0.01223399j]; [ 0.13801792-0.01223399j 0.60333125+0.j ]]; ```. Of course you can do far more general things than that.. you can pretty much do anything you can write in dirac notation. Similar behavior on the level of super-operators and operator-vectors, as suggested by @jrjohansson, earlier in this thread, would be similarly very powerful. For example, in the language of tensor networks, it would allow you to do arbitrary wire-bending operations using the maximally entangled state, as in the [paper](http://arxiv.org/abs/1111.6950) by Chris Wood et al., that @cgranade mentioned in relation to #238. As of now there is no convenient (i.e., ""index free"") way to do this (correct me if I am wrong), except explicitly performing the corresponding partial transpose directly on the underlying matrix data. 2) In the absence of this functionality it is a bad idea to assume something else. Assuming conjugation is unexpected behavior, and besides it is something the user can easily do him/herself by using `to_super()`. It is way better to ""force"" the user to be explicit about things by throwing an `Exception`, than assuming something that might be unexpected. It enforces good coding style, giving more readable code, and avoids code that will break if the functionality is changed in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-58035991:2484,avoid,avoids,2484,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-58035991,1,['avoid'],['avoids']
Safety,"ables to pass to the function. For backward compatibility; ```; def f(t, state, args):; return ...; ```; is also accepted if the option `rhs_with_state` is set to `True`. . But there have been demand to accept more signatures: `f(t)` and `f(t, **args)`. PR #1123, when ready, should allow both signature using options. . The best signature I believe is `f(t, **args)` since it allows to use more natural function call using kwargs (`f(t, w=0, a=1)`). However, it is the slowest in the #1123 implementation (up to 10x): some items are added to `args` for internal use and they need to be filtered at each call. It could be brought to 2.5x with some work, but no better. `f(t)` is about 2x slower than `f(t, args)`. But it's less agile: if the Hamiltonian use `f(t, w1=0)`, we cannot add a c_ops using `f(t, w2=0)`, both function must accept `w1` and `w2`. `args` could just hide unused items. Which ever we choose as the main one will be 2~3x faster than the other. We can have automatic detection of the signature if we want to be fancy. Which signature do you think is better?. Second, these function can depend on the state with the option `rhs_with_state`. Thus the coefficients are `f(t, state, args)` with `state` a 1D numpy array.; When making QobjEvo, I added special `args`' keys that indicate that the value should be updated with the state: setting `args = {""val=Qobj"":psi0, ""val"":psi0}` would tell `args[""val""]` to be updated with the state at each use in the solver. The state can be obtained as Qobj, np.array or the args could be updated to be the expectation value of another Qobj.; There are some bug for it in master presently but it will work with PR #1127. Using these special keys for this work well but they need to be removed for the new signature candidate (`f(t, **args)`). Also you cannot remove / fix to a constant them once declared. Since they are not used/working yet, now is the time to change to something better. I could see 2 other options:; - reserved keys: `args = {",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1136:1270,detect,detection,1270,https://qutip.org,https://github.com/qutip/qutip/issues/1136,1,['detect'],['detection']
Safety,"ack); 100 except StopIteration as exc:; 101 # Suppress StopIteration *unless* it's the same exception that. ~/miniconda3/lib/python3.6/site-packages/matplotlib/animation.py in saving(self, fig, outfile, dpi, *args, **kwargs); 239 yield self; 240 finally:; --> 241 self.finish(); 242 ; 243 . ~/miniconda3/lib/python3.6/site-packages/matplotlib/animation.py in finish(self); 365 def finish(self):; 366 '''Finish any processing for writing the movie.'''; --> 367 self.cleanup(); 368 ; 369 def grab_frame(self, **savefig_kwargs):. ~/miniconda3/lib/python3.6/site-packages/matplotlib/animation.py in cleanup(self); 403 def cleanup(self):; 404 '''Clean-up and collect the process used to write the movie file.'''; --> 405 out, err = self._proc.communicate(); 406 self._frame_sink().close(); 407 _log.debug('MovieWriter -- Command stdout:\n%s', out). ~/miniconda3/lib/python3.6/subprocess.py in communicate(self, input, timeout); 841 ; 842 try:; --> 843 stdout, stderr = self._communicate(input, endtime, timeout); 844 finally:; 845 self._communication_started = True. ~/miniconda3/lib/python3.6/subprocess.py in _communicate(self, input, endtime, orig_timeout); 1503 selector.register(self.stdin, selectors.EVENT_WRITE); 1504 if self.stdout:; -> 1505 selector.register(self.stdout, selectors.EVENT_READ); 1506 if self.stderr:; 1507 selector.register(self.stderr, selectors.EVENT_READ). ~/miniconda3/lib/python3.6/selectors.py in register(self, fileobj, events, data); 349 ; 350 def register(self, fileobj, events, data=None):; --> 351 key = super().register(fileobj, events, data); 352 poll_events = 0; 353 if events & EVENT_READ:. ~/miniconda3/lib/python3.6/selectors.py in register(self, fileobj, events, data); 235 raise ValueError(""Invalid events: {!r}"".format(events)); 236 ; --> 237 key = SelectorKey(fileobj, self._fileobj_lookup(fileobj), events, data); 238 ; 239 if key.fd in self._fd_to_key:. ~/miniconda3/lib/python3.6/selectors.py in _fileobj_lookup(self, fileobj); 222 """"""; 223 try:; --> 224 r",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799#issuecomment-497315077:2143,timeout,timeout,2143,https://qutip.org,https://github.com/qutip/qutip/issues/799#issuecomment-497315077,1,['timeout'],['timeout']
Safety,add isunitary attribute for checking if qobj is a unitary operator:; unitary checking func and property funcs added; initialisation of isunitary; clear flag on operations that risk unitarity; qobj unitarity testing added; preset isunitary for qeye,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817:176,risk,risk,176,https://qutip.org,https://github.com/qutip/qutip/pull/817,1,['risk'],['risk']
Safety,add timeout,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787:4,timeout,timeout,4,https://qutip.org,https://github.com/qutip/qutip/pull/1787,1,['timeout'],['timeout']
Safety,"antiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:2737,avoid,avoided,2737,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['avoid'],['avoided']
Safety,"arately, you've already done most of its setup, so the time penalties should be much less than the current system (i.e. you avoid several Kronecker products and safety checks on the time-dependence terms because you've done them once at the start). In theory, that should already work from at least 4.5 onwards, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:3061,safe,safe,3061,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['safe'],['safe']
Safety,"args):; t = np.clip(t, tlist_control_points[0], tlist_control_points[-1]); coeff = spline_corrected(t).item(); return coeff * h_drive. tlist_state_eval = np.linspace(-0.1, 1.1, int(1e4)). res_qobjevo = qt.sesolve(qobjevo, initial_state, tlist=tlist_state_eval, options=options); res_calling_qobjevo = qt.sesolve(calling_qobjevo, initial_state, tlist=tlist_state_eval, options=options); res_callable_corrected = qt.sesolve(callable_corrected, initial_state, tlist=tlist_state_eval, options=options). # complex argument of <1|s(t)>, for each state |s(t)> in the trajectory for each of the three Hamiltonians; angle_qobjevo = np.angle(np.array([np.array(s).flatten()[1] for s in res_qobjevo.states])); angle_calling_qobjevo = np.angle(np.array([np.array(s).flatten()[1] for s in res_calling_qobjevo.states])); angle_callable_corrected = np.angle(np.array([np.array(s).flatten()[1] for s in res_callable_corrected.states])). # the interpolated control value at time t can be recovered as the time derivative of the complex argument of <1|s(t)>; interpolated_controlvalue_qobjevo = np.gradient(angle_qobjevo, tlist_state_eval); interpolated_controlvalue_calling_qobjevo = np.gradient(angle_calling_qobjevo, tlist_state_eval); interpolated_controlvalue_callable_corrected = np.gradient(angle_callable_corrected, tlist_state_eval). fig, axs = plt.subplots(2); axs[0].plot(tlist_state_eval, interpolated_controlvalue_qobjevo, label='passing qobjevo', marker='.'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo, label='passing qobjevo as callable'); axs[0].plot(tlist_state_eval, interpolated_controlvalue_callable_corrected, label='callable H, corrected'); axs[0].grid(); axs[0].legend(); axs[0].set_ylabel('interpolated values of control parameter'). axs[1].plot(tlist_state_eval, interpolated_controlvalue_calling_qobjevo - interpolated_controlvalue_qobjevo,; label='passing qobjevo as callable - qobjevo'); axs[1].plot(tlist_state_eval, interpolated_controlvalue_callable_correct",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2063:2201,recover,recovered,2201,https://qutip.org,https://github.com/qutip/qutip/issues/2063,1,['recover'],['recovered']
Safety,"as the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:2374,timeout,timeout,2374,https://qutip.org,https://github.com/qutip/qutip/issues/1711,1,['timeout'],['timeout']
Safety,"b169eb3285818ba1390ddf2771d897e6e""><code>aeb51cb</code></a> Merge branch 'main' into lcms</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/5beb0b66648db8b542bb5260eed79b25e33d643b""><code>5beb0b6</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cac6ffa7b399ea79b6239984d1307056a0b19af2""><code>cac6ffa</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7927"">#7927</a> from python-pillow/imagemath</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f5eeeacf7539eaa0d93a677d7666bc7c142c8d1c""><code>f5eeeac</code></a> Name as 'options' in lambda_eval and unsafe_eval, but '_dict' in deprecated eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/facf3af93dabcbdd8cdbda8c3b50eefafa3bb04c""><code>facf3af</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2a93aba5cfcf6e241ab4f9392c13e3b74032c061""><code>2a93aba</code></a> Use strncpy to avoid buffer overflow</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a670597bc30e9d489656fc9d807170b8f3d7ca57""><code>a670597</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.2.0...10.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</sum",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:14884,avoid,avoid,14884,https://qutip.org,https://github.com/qutip/qutip/pull/2381,1,['avoid'],['avoid']
Safety,"base class]( https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.spmatrix.html#scipy.sparse.spmatrix)? Then the `Qobj` constructor would probably need an additional parameter `format` for the class that should be used to convert the `inpt` argument to the `data` attribute. The onus would then be on Scipy to provide a full matrix that is a subtype of `scipy.spmatrix` (just to keep the interface contract), and also to have `int64` versions of all their existing sparse classes. From a community standpoint, it would seem like one would get much more bang for the buck to have this problem solved inside SciPy, instead of doing a lot of low-level stuff in QuTiP -- at least if they're amenable to pull requests, but worst case you can still define necessary new `scipy.spmatrix` subclasses externally. Take all of my musings with a little grain of salt... I never really looked too deep into QuTiP's low-level internals, specifically where QuTiP is using Cython. Naively, I would sort of think that Cython would remain at the level of sparse linear algebra operations (and thus mostly in scipy) and that QuTiP could be mainly pure Python. Obviously, once you start implementing higher level things like time propagation or even optimal control in Cython, everything becomes a bit of a mess, because then you really do have to manually implement everything for every possible storage format (again, something I'm familiar with from Fortran, and it's *a lot* of work). Generally, though, I've personally come to the conclusion that the lowest-level thing to really optimize for quantum dynamics simulations (in any language) is the application of a (time-dependent) operator to a Hilbert space state, respectively the commutator with a density matrix (in QuTiP, the operators would be the nested ``[H0, (u(t), H1), ...]`` lists). Everything higher level is probably fine at Python speed, as long as the algorithms are sound and you avoid allocating temporary storage as much as possible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383937610:2969,avoid,avoid,2969,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383937610,1,['avoid'],['avoid']
Safety,"both Linux (WSL) and Windows. **Current behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:1456,Timeout,Timeout,1456,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['Timeout'],['Timeout']
Safety,"braries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _feels_ easier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a particular advantage for Python classes compiled as C-extensions (like from C or Cython), which typically don't allow assigning methods dynamically.; - A library could even register multiple versions of the conversion function with us, and let QuTiP handle API versioning centrally, rather than requiring downstream libraries to roll their own checks.; - We're basically already set up to do this in `dev.major` already. We'd have to modify our procedures a little bit (we're mostly concerned with constructing the underlying matrices at the moment), but it's a smaller change in behaviour. Disadvantages that I can think of:; - It's got linear scaling with the number of conversions registered, so it's in theory possible to register ""too many"" and cause a slow down. In reality, this will be a very small effect (`Qobj` construction time will be dominated by copying data into new ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:6299,detect,detect,6299,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['detect'],['detect']
Safety,"ced from <a href=""https://github.com/python-pillow/Pillow/blob/master/CHANGES.rst"">pillow's changelog</a>.</em></p>; <blockquote>; <h2>8.3.2 (2021-09-02)</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; <li>; <p>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</p>; </li>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1 (2021-07-06)</h2>; <ul>; <li>; <p>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a>; [radarhere]</p>; </li>; <li>; <p>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a>; [radarhere]</p>; </li>; <li>; <p>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a>; [t-vi, radarhere]</p>; </li>; </ul>; <h2>8.3.0 (2021-07-01)</h2>; <ul>; <li>; <p>Use snprintf instead of sprintf. CVE-2021-34552 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5567"">#5567</a>; [radarhere]</p>; </li>; <li>; <p>Lim",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:5230,avoid,avoid,5230,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['avoid'],['avoid']
Safety,"ck); 97 value = type(); 98 try:; ---> 99 self.gen.throw(type, value, traceback); 100 except StopIteration as exc:; 101 # Suppress StopIteration *unless* it's the same exception that. ~/miniconda3/lib/python3.6/site-packages/matplotlib/animation.py in saving(self, fig, outfile, dpi, *args, **kwargs); 239 yield self; 240 finally:; --> 241 self.finish(); 242 ; 243 . ~/miniconda3/lib/python3.6/site-packages/matplotlib/animation.py in finish(self); 365 def finish(self):; 366 '''Finish any processing for writing the movie.'''; --> 367 self.cleanup(); 368 ; 369 def grab_frame(self, **savefig_kwargs):. ~/miniconda3/lib/python3.6/site-packages/matplotlib/animation.py in cleanup(self); 403 def cleanup(self):; 404 '''Clean-up and collect the process used to write the movie file.'''; --> 405 out, err = self._proc.communicate(); 406 self._frame_sink().close(); 407 _log.debug('MovieWriter -- Command stdout:\n%s', out). ~/miniconda3/lib/python3.6/subprocess.py in communicate(self, input, timeout); 841 ; 842 try:; --> 843 stdout, stderr = self._communicate(input, endtime, timeout); 844 finally:; 845 self._communication_started = True. ~/miniconda3/lib/python3.6/subprocess.py in _communicate(self, input, endtime, orig_timeout); 1503 selector.register(self.stdin, selectors.EVENT_WRITE); 1504 if self.stdout:; -> 1505 selector.register(self.stdout, selectors.EVENT_READ); 1506 if self.stderr:; 1507 selector.register(self.stderr, selectors.EVENT_READ). ~/miniconda3/lib/python3.6/selectors.py in register(self, fileobj, events, data); 349 ; 350 def register(self, fileobj, events, data=None):; --> 351 key = super().register(fileobj, events, data); 352 poll_events = 0; 353 if events & EVENT_READ:. ~/miniconda3/lib/python3.6/selectors.py in register(self, fileobj, events, data); 235 raise ValueError(""Invalid events: {!r}"".format(events)); 236 ; --> 237 key = SelectorKey(fileobj, self._fileobj_lookup(fileobj), events, data); 238 ; 239 if key.fd in self._fd_to_key:. ~/miniconda3/lib/python3.6/se",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/799#issuecomment-497315077:2058,timeout,timeout,2058,https://qutip.org,https://github.com/qutip/qutip/issues/799#issuecomment-497315077,1,['timeout'],['timeout']
Safety,"d_col)),; shape=(nds**2, nds**2),; dtype=np.complex128); ```; and recompile. If you want to make a PR of something similar against QuTiP, I'll accept it. I would actually file this against `scipy.sparse` - I think our usage is completely in line with the contract of `scipy.sparse.csr_matrix` and they've got a bug in their dtype handling. You currently can't construct a CSR matrix using the COO triplet format for complex data, unless the dtype is made explicit _somewhere_, but the constructor is meant to correctly infer a suitable dtype if one is not passed. Basic Scipy reproducer to illustrate the problem:; ```python; >>> import scipy.sparse; >>> scipy.__version__; '1.6.1'; >>> scipy.sparse.csr_matrix(([1+1j], ([0], [0])), shape=(2, 2)); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/scipy/sparse/compressed.py"", line 54, in __init__; other = self.__class__(coo_matrix(arg1, shape=shape,; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/scipy/sparse/coo.py"", line 161, in __init__; self.data = np.array(obj, copy=copy, dtype=data_dtype); TypeError: can't convert complex to float; ```. This can be fixed either by passing `dtype=np.complex128` to the constructor, or passing the data inside a NumPy array, since that'll also fix the dtype. I imagine with their implicit conversions, SciPy may also need to test the special cases where all list elements are things like `1+0j`, which have type `complex` but can be safely represented by reals - the Python call `float(1 + 0j)` is forbidden even though the imaginary part is 0. I actually originally thought this was the problem in this issue, since all the Lindbladian data tested is real numbers with complex type. I suppose it's up to SciPy to decide how they want to handle that case - either always maintaining `complex` or putting in a special-case cast (`np.real(x)`) for known-safe complex -> float conversions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451#issuecomment-784265398:1878,safe,safely,1878,https://qutip.org,https://github.com/qutip/qutip/issues/1451#issuecomment-784265398,2,['safe'],"['safe', 'safely']"
Safety,"dnorm tests have historically been very flaky, and for as long as we're using random tests (which we possibly shouldn't be), we always run the risk of temperamental failures. In particular, the semidefinite solvers used in dnorm fail every now and again on random states; we historically haven't treated this as a bug, since it's pretty similar to an integration failing to converge because the system was too stiff. It means that the user has to adjust some settings and try again. To prevent this sort of error from failing our test suite, however, we can mark the tests as being allowed to rerun twice on a failure. We had a relatively small sample to judge the test failure rate by, but my very very approximate guess is that we'd have a failure about 1 in 10 runs on Travis. We counter this with two strategies:. 1. parametrise the tests in pytest style, so each random repetition is a separate instance, and known to pytest (some of this was done in earlier commits); 2. allow 2 reruns of every dnorm test. The two of these together should remove all random failures; since all random loops have been moved into pytest-handled repeats, there are far fewer calls to dnorm handled within each test. This means less chance that an individual test run will fail, but a slightly higher chance the entire suite will. Now with the test re-running a single failure point is tried again up to twice more, to determine if it was just a one-off, or if the test is truly broken. The reruns are handled by a pytest plugin pytest-rerunfailures. It's quite nontrivial behaviour to hook this in to the pytest mechanism, so better to use an external dependency to do it than to vendor in a custom version. The dnorm problems have resurfaced a little after lying dormant for a long time, because #1463 reactivated them. Before that, they'd not actually been running because none of the test runners had cvxpy installed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490:143,risk,risk,143,https://qutip.org,https://github.com/qutip/qutip/pull/1490,1,['risk'],['risk']
Safety,"e preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; define_macros = [('HAVE_CBLAS', None)]; blas_opt_info:; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; include_dirs = ['/usr/local/include', '/usr/include']; language = c; lapack",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1514,detect,detect,1514,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['detect'],['detect']
Safety,"e1 = qt.ket([0]); > state1 = qt.Qobj(state1.data*9.999e-13); > print 'Desired:', state3; > print 'Undesired:', state2; > print 'Desired, via workaround:', state1; > Multiplying states by small numbers; > Normal behaviour: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; > Qobj data =; > [[ 1.00000000e-12]; > [ 0.00000000e+00]]; > Undesired: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; > Qobj data =; > [[ 0.]; > [ 0.]]; > Desired, via workaround: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; > Qobj data =; > [[ 9.99900000e-13]; > [ 0.00000000e+00]]; > But the real issue is this 1e-12 bound also occurs for expect() with tensored operators and states even if the individual operators's values are all >1e-12:; > ; > print ""Expectation values with small operators""; > detector = qt.Qobj([[1e-12, 0], [0, 0]]); > print 'Expectation value for one detector, 1e-12:', qt.expect(detector, qt.ket([0])); > detector = qt.Qobj([[1e-6, 0], [0, 0]]); > print 'Expectation value for two detectors, 1e-6:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); > detector = qt.Qobj([[1e-14, 0], [0, 0]]); > print 'Expectation value for one detector, 1e-14:', qt.expect(detector, qt.ket([0])); > detector = qt.Qobj([[1e-7, 0], [0, 0]]); > print 'Expectation value for two detectors, 1e-7:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); > Expectation values with small operators; > Expectation value for one detector, 1e-12: 1e-12; > Expectation value for two detectors, 1e-6: 1e-12; > Expectation value for one detector, 1e-14: 1e-14; > Expectation value for two detectors, 1e-7: 0.0; > It is important for me to get the real nonzero value in the last case, but I cannot see a way to do it with the current behaviour.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/521#issuecomment-242049107:1684,detect,detectors,1684,https://qutip.org,https://github.com/qutip/qutip/issues/521#issuecomment-242049107,14,['detect'],"['detector', 'detectors']"
Safety,"ecomment-859717563 on the requirements: beyond yielding the propagated states, we'll also have to modify the controls, i.e. the time-dependencies for QuTiP's nested-list format. Within the `krotov` package, these would always be numpy arrays. As an explanation, see [the figure for Krotov's update scheme](https://qucontrol.github.io/krotov/v1.2.1/_images/krotovscheme.svg) from [the documentation](https://qucontrol.github.io/krotov/v1.2.1/07_krotovs_method.html#time-discretization). The single-step-`mesolve` would be for the ""(2) forward-propagation with updated control"" in the bottom of the diagram: After each propagation time step, we calculate a new control value based on the current propagated state and other information (the ∂H/∂ϵ and stored backward-propagated states χ). The new control value is then used for the next time step. I'd also add that `mesolve` ideally should be ""thread-safe"" in the sense that we may have multiple `mesolve` run in parallel (index k in the diagram, where all the different k contribute to the update of the control values at the next time step), within whatever parallelization framework Python makes available. I vaguely remember looking at some Runge-Kutta implementations within scipy where this was a problem. I noted this in the docstring of krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L162), which was an attempt to adapt some of `mesolve`'s inner workings to Krotov's needs. It turned out the overhead was still too large for this work very well, cf. the large runtime of the [corresponding example](https://qucontrol.github.io/krotov/v1.2.1/notebooks/06_example_3states.html). To get very technical, Krotov's requirements are laid out in the documentation of the [`Propagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagators.py#L125) abstract base class, [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/master/src/krotov/propagat",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215:2704,safe,safe,2704,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859754215,1,['safe'],['safe']
Safety,"em. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be extended to enforce this; the `dims` parameter would be renamed `basis`, and some unique identifier would be attached to each `Space` object. This would allow us to safely define basis-transformation ""operators""; they would have the dimensions object `Map(State(2, 'paulix'), State(2, 'pauliz'))`, or something to that effect. In #1320, I mentioned the possibility of a new `'scalar'` type object. Here, this is effectively the `Field` subtype. There is a choice to be made whether `Compound(Field, Field)` should be `Field` (implicit contraction of 1D spaces), or whether we should keep track of ""missing"" spaces. The missing spaces are useful in principle in QIP settings for defining local operations on subsets of the whole system, but right now we do not have the mathematics backend to implement this completely. For now, I propose we keep track of all the missing spaces; it allows this extension in the future, with no cost right now. ### Implementation details. All objects will be completely immutable, and all their construction arguments will be as well (e.g. `State` will take only `int`, which is immutable). This means that singleton instances can be found by looking them up in a global store, similar to Python's `bui",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:6123,safe,safely,6123,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['safe'],['safely']
Safety,"ems like the 'tol' has no effect on the 'predictor-corrector' solver. Here's my code. I was trying to use stochastic master equation to generate the outcome photon sequence from a CPT set up, but I got a diverged outcome sometimes. ```; from qutip import *; import matplotlib.pyplot as plt; import numpy as np; import matplotlib as mpl. params = {; 	'axes.labelsize': 12,; 	'legend.fontsize': 10,; 	'xtick.labelsize': 10,; 	'ytick.labelsize': 10,; 	'figure.figsize': [3*1.4/1.2, 2.8/1.2],#2.3; 	'lines.linewidth' : 1,; 	'axes.linewidth':0.9,; 	'figure.subplot.left':0,; 	'figure.subplot.right':1,; 	'figure.subplot.bottom':0,; 	'figure.subplot.top':1,; 	'grid.linestyle':'--',; 	'axes.grid':False,; 	""font.family"":""serif"",; 	""xtick.direction"":""in"",; 	""ytick.direction"":""in"",. 	}; mpl.rcParams.update(params). T = 100; N = 100000; Gamma = 2*np.pi*13; Omega = 2*np.pi*2. times = np.linspace(0,T,N); ge = fock(3, 0) * fock(3, 1).dag(); se = fock(3, 2) * fock(3, 1).dag(); ss = fock(3, 2) * fock(3, 2).dag(); ee = fock(3, 1) * fock(3, 1).dag(); dark = (fock(3, 2) - fock(3, 0)).unit(); dd = dark*dark.dag(). bias = 2*np.pi*0.1. psi0 = dark. H = Omega * (ge + ge.dag() + se + se.dag()) + bias*ss. result_sme = photocurrent_mesolve(H, psi0, times, c_ops = [],sc_ops = [np.sqrt(Gamma/2)*ge + np.sqrt(Gamma/2)*se]\; 	, e_ops = [dd, ee], store_measurement=True, options=Options(store_states=True), nsubsteps=100, \; 	solver='predictor-corrector'). hermitian = [(result_sme.states[0][i]).isherm for i in range(N)]. plt.plot(times, result_sme.expect[0], color = 'orange', label='dark'); plt.plot(times, result_sme.expect[1], color = 'black', label='e'); plt.plot(times, hermitian, color = 'blue'); plt.xlim(0,100); plt.xlabel('Time'); plt.ylabel('Population'); plt.savefig('sme.pdf',bbox_inches='tight',pad_inches=0); plt.close(). ```; And the result,; [sme.pdf](https://github.com/qutip/qutip/files/5207120/sme.pdf); (The decline of the blue curve means the density matrix is no longer Hermitian thus diverge.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1357:1539,predict,predictor-corrector,1539,https://qutip.org,https://github.com/qutip/qutip/issues/1357,1,['predict'],['predictor-corrector']
Safety,"en `Qobj` was used in arithmetic with numpy arrays from the left and right, and allowed simple code to become `Qobj.dims`-unsafe _implicitly_. To get the full array view now, you must be explicit and call `Qobj.full()` - it is not enough to do `np.array(qobj)`, and this behaviour is consistent with `scipy.sparse` matrices.; - `eseries` and `essolve` are removed; - OpenMP is temporarily removed (but should be added back in before the release); - most functions marked deprecated as of version 4.5.2 are removed (e.g. in `qutip.correlation`); - `vec2mat` and `mat2vec` are renamed away from the terse MATLAB-compatible syntax to the more QuTiP-consistent `vector_to_operator` and `operator_to_vector`. Non-breaking changes:; - the internal file layout of the code is more organised, with physical ""packages"" `qutip.core` and `qutip.solve` containing the core code and the solvers respectively, but these packages export all their names to the full `qutip` namespace, so there are no user-facing changes; - `Qobj` is a bit more strict about enforcing `Qobj.type`-safety with input types to arithmetic operations, particularly with 1D subspaces; - `Qobj` understands the `@` operator to mean matrix multiplication (it still understands `Qobj * Qobj` to be matrix multiplication as well); - `Qobj` instantiation is massively faster (lower-bounded by ~5µs compared to the previous ~70µs) in internal use and when doing arithmetic. QuTiP internal functions are now much more aggressive at passing in the `type` and `copy=False` arguments, cutting out most type inference and unnecessary copying of data which were the largest time sinks. Discussions about the implementation of multiple-dispatch methods are on-going in the repository [jakelishman/qutip-dispatch](https://github.com/jakelishman/qutip-dispatch). See in particular some discussion in jakelishman/qutip-dispatch#1. Other discussions are also at the [`data-layer-devs` discussion board](https://github.com/orgs/qutip/teams/data-layer-devs).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:3511,safe,safety,3511,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['safe'],['safety']
Safety,"equests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an extra leading <code>/</code> (path separator) could lead; urllib3 to unnecessarily reparse the request URI. (<a href=""https://redirect.github.com/psf/requests/issues/6644"">#6644</a>)</li>; </ul",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:5130,detect,detection,5130,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['detect'],['detection']
Safety,"ers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2243,detect,detected,2243,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['detect'],['detected']
Safety,"etails>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins; would cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>; </ul>; <h1>1.26.15 (2023-03-10)</h1>; <ul>; <li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing; (<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>; <li>Fix IDNA handling of '\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/c9016bf464751a02b7e46f8b86504f47d4238784""><code>c9016bf</code></a> Release 1.26.17</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/01220354d389cd05474713f8c982d05c9b17aafb""><code>0122035</code></a> Backport GHSA-v845-jxx5-vc9f (<a href=""https://redirect.github.com/urllib3/urllib3/issues/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:2317,timeout,timeout,2317,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['timeout'],['timeout']
Safety,"fine for states and operators, but it won't work for superoperators. I'm not sure that this is solvable in an ergonomic way with QuTiP's current dimensions specifiers, but it's something we're definitely going to look into after the initial release of 5.0. Also, there are already several disparate functions in QuTiP that provide sort-of similar functionality, and I think we need to have a proper go at tidying them all up into one cohesive interface. This includes `subsystem_apply` (most similar to this), but also `ptrace` and `partial_tranpose`, which can be seen as special cases of this exact same type of tensor contraction (not to mention `tensor_contract`!). The other thing from a code perspective is that this doesn't use the data-layer in the intended manner. A lot of this may be because our documentation of the data-layer isn't readily available yet (we weren't expecting interest this early!). It does individual detection on two different types, rather than creating a `Dispatcher` to handle the multiple dispatch over potentially different data types of the two inputs. I would imagine that a better form of organisation for this sort of routine, which will be able to handle arbitrary tensor-network operations, will end up being made up of two components:; 1. a `Dispatcher` version of something akin to `einsum`, with a couple of limitations; 2. a high-level wrapper function to handle the specific case of local multiplication, which examines the dimensions and target specifiers to produce the input to the `einsum`-like function, then calls the `Dispatcher` with this information. I think this form would likely be preferable for several reasons:; 1. it will allow arbitrary mixing of different data types (`CSR` complete space and `Dense` operator, or both `CSR`, or whatever), with the allowed conversions respecting the global dispatcher rules, not having this function use a different, special configuration; 2. it will mean that the function can also be implemented by ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566:2383,detect,detection,2383,https://qutip.org,https://github.com/qutip/qutip/pull/1405#issuecomment-864073566,1,['detect'],['detection']
Safety,"g`. Here is a file `kraus.py` that can reproduce these segfaults semi-reliably (may need to run it a few times to get it to trigger):. ```python; import qutip. s = qutip.rand_super(); c = qutip.to_choi(s); k = qutip.to_kraus(c); ```. For example, here's a similar command on this file:. ```; Debug memory block at address p=0x7f98cc467db0: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7f98cc476def are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p: dd dd dd dd dd dd dd dd ... 00 00 00 00 00 00 00 00. Enable tracemalloc to get the memory block allocation traceback. Fatal Python error: bad trailing pad byte; Python runtime state: finalizing (tstate=0x7f98c9d018e0). Current thread 0x0000000109fe85c0 (most recent call first):; <no Python frame>; Abort trap: 6; ```. So these both use `scipy.linalg.eig`, which is suspicious. ## Valgrind checks. To see if I could track it down, I had a go with valgrind. This isn't guaranteed to find everything, because I'm not using a debug build of Python, and Python also typically optimises small allocations by using a custom allocator into some pre-allocated space it manages itself - invalid writes that still fall within this may not get detected by valgrind. Here is the output of `valgrind` running on the `kraus.py` file I wrote in the previous section: [kraus_valgrind.txt](https://github.com/qutip/qutip/files/6370180/kraus_valgrind.txt) (note I filtered out like 30,000 errors that stem from Python's internal memory management - they're nothing to worry about, they're just what happens when you have your own allocator). The important part is. ```; ==54133== Invalid write of size 8; ==54133== at 0x10AFAFA8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_int",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:4863,Abort,Abort,4863,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['Abort'],['Abort']
Safety,"generic `Options` class that accept any keys used by integrator or solver and can be converted to any specific solver options:; ```; Options(futur_cupy_ode_specific_options=True) # Will work; Options(not_an_options=True) # Error; # For most solver:; __solve(..., opt=Options()); ```; Once options are associated to a solver, they are frozen:; ```; opt = SeOptions(); solver = SeSolver(..., opt); opt['...'] = ... # Ok, but solver has a copy and is unaffected.; solver.options['...'] = ... # Error; solver.options = opt; ```; This is because changing options without the solver knowing will not take effect. I removed saving / storing options for now. It was mostly used to store openmp threshold, which is not supported.; I also propose to write the stored options as python code when we restore it. (`options = eval(repr(options))`, we may have some issue with circular import if called from `__init__.py`, but we can just write the `repr` of the `dict`.). While it's working fine as is, there are few point to discuss:; - Freezing options associated to solver work fine, but I see 2 alternatives:; - Options know they are used by a solver and inform it when modified. More complex but give the image that it just work. ; - All options instance are read-only. To change a key, you create a new options. Simple for us. To modify an existing options we could make it callable: `updated_options = old_options(atol=1e-5)`.; - Passing bad options keys or wrong options types (`mesolve(..., SeOptions)`) raise error, should we be less strict?; - Should we flatten SolverOptions.ode: ; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt['max_order_ns'] = 10; ```; And associated to it, where do we store default for integrators, per solver or per integrator.; - Do we add more sanity check to options values, or do we move `use_cython` to setting and remove the feature?. **Related PR**; It will cause conflict with #1710 and #1644. **Changelog**; Options classes using inheritance.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:4084,sanity check,sanity check,4084,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['sanity check'],['sanity check']
Safety,"ginal GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data.Data`; - `bra * ket` now returns a scalar, not a `Qobj` (no need to do `(bra * ket).data[0, 0]` or `(bra * ket).tr()`) any more; - 1D subspaces in `Qobj.dims` are now never contracted silently (they were, but inconsistently before), but the new function `Qobj.contract()` can be called to do this explicitly; - `Qobj` no longer defines `__array__`, and so cannot be treated as if it is a numpy array. Having this led to inconsistent behaviour when `Qobj` was used in arithmetic with numpy arrays from the left and right, and allowed simple code to become `Qobj.dims`-unsafe _implicitly_. To get the full array view now, you must be explicit and call `Qobj.full()` - it is not enough to do `np.array(qobj)`, and this behaviour is consistent with `scipy.sparse` matrices.; - `eseries` and `essolve` are removed; - OpenMP is temporarily removed (but should be added back in before the release); - most functions marked deprecated as of version 4.5.2 are removed (e.g. in `qutip.correlation`); - `vec2mat` and `mat2vec` are renamed away from the terse MATLAB-compatible syntax to the more QuTiP-consistent `vector_to_operator` and `operator_to_vector`. Non-breaking changes:; - the internal file layout of the code is more organised, with physical ""packages"" `qutip.core` and `qutip.solve` containing the core code and the solvers respectively, but these packages export all their names to the full `qutip` namespace, so there are no user-facing changes; - `Qobj` is a bit more strict about enforcing `Qobj.type`-safety with input types to arithmetic operations, particularly wi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:2569,unsafe,unsafe,2569,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['unsafe'],['unsafe']
Safety,"gmaz() + 1j * qt.sigmax(); initial = qt.basis(2, 1); res1 = qt.mesolve(H, qt.ket2dm(initial), [0, 1]); print(res1.final_state). L = qt.liouvillian(qt.sigmaz()) + 1j * qt.lindblad_dissipator(qt.sigmap()); res2 = qt.mesolve(L, initial, [0, 1]); print(res2.final_state); ```. ### Code Output. ```shell; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=True; Qobj data =; [[-0.33333333+0.j 0.33333333-0.33333333j]; [-0.33333333-0.33333333j 0.66666667+0.j ]]. Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=True; Qobj data =; [[0.23467737+0.42957377j 0. +0.j ]; [0. +0.j 0.27582588-0.42957377j]]; ```. ### Expected Behaviour. For both states, `isherm` should be `False`. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+5fabdd3; Numpy Version: 1.26.3; Scipy Version: 1.12.0; Cython Version: 3.0.8; Matplotlib Version: 3.8.2; Python Version: 3.12.1; Number of CPUs: 20; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The source of the issue is that `_prepare_state` ([link](https://github.com/qutip/qutip/blob/master/qutip/solver/solver_base.py#L86)) and `_restore_state` ([link](https://github.com/qutip/qutip/blob/master/qutip/solver/solver_base.py#L99)) of the `solver_base` module assume that the dynamics preserves the Hermiticity of the state. The `isherm` attribute of the initial state is saved and copied into the output state. We could try to detect whether the Hamiltonian is Hermitian / whether the Liouvillian is Hermiticity-preserving, but @Ericgig mentioned in https://github.com/qutip/qutip/pull/2408 that this solution could be difficult with time-dependent problems. As an aside, I just noticed another potential small issue. This code; ```; res3 = qt.mesolve(H, initial, [0, 1]); print(qt.ket2dm(res3.final_state)); ```; has a different output compared with the `res1` above (because `sesolve` is used, which can of course never produce non-Hermitian states).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2410:1818,detect,detect,1818,https://qutip.org,https://github.com/qutip/qutip/issues/2410,1,['detect'],['detect']
Safety,"her would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that defines what we accept as scalars. We then do: `isinstace(other, _ALLOWED_SCALARS)` and return `NotImplemented` if not there. Two options here:; 1) QuTiP allows only `numbers.Number`:; - In this case `qutip-tensorflow` can extend `_ALLOWED_SCALARS` with tf.Variable and tf.Tensor. However, if the user uses two plug-ins, say qutip-tensorflow and qutip-something-that-does-not-work-well-with-tensorflow (second plug-in), the second plug-in may not work properly. ; - The above point is not a big deal if we make clear that _ALLOWED_SCALARS must accept `complex(other)` for compatibility reasons. In this way the second plug-in can always default to `complex(other)` (this is already the default behaviour of `mul_dense`).; 2) QuTiP allows `numbers.Number`, `ndarray` of shape `(,)`, `tf.Variable` of shape `(,)` and more in the future.; - The upside of this method with respect to 3.1 is that users know which types they must accept.; - This is probably not a good idea as it means qutip has to handle new dependencies (tensorflow and probalby more in the future).; - This _still_ defines what an scalar is at he `Qobj` level. I think this is not bad as it seems to be the only way of avoiding `NotImplemented` at Python space exept for in special methods (`__mul__`, ...). I think that 3.i is the closest to an ideal solution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:3871,avoid,avoiding,3871,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['avoid'],['avoiding']
Safety,"hould not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/d6ebc4a2f1f68b7e355fb7e4dd5ffc0845547f9f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an invalid URI that will not cause httpbin to throw 500</li>; <li><a href=""https://github.com/psf/requests/commit/2d5f54779ad174035c5437b3b3c1146b0eaf60fe""><code>2d5f547</code></a> Pin 3.8 and 3.9 runners back to macos-13 (<a href=""https://redirect.github.com/psf/requests/issues/6688"">#6688</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/f1bb07d39b74d6444e333879f8b8a3d9dd4d2311""><code>f1bb07d</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6687"">#6687</a> from psf/dependabo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:8307,detect,detection,8307,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['detect'],['detection']
Safety,"hrough mamba.; Next, I've opened an IPython console and ran `import qutip`, which resulted in the exception printed below - stating that the `format` attribute of the `fast_csr_matrix` cannot be set. I believe the latest `scipy` [release](https://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:1152,avoid,avoid,1152,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['avoid'],['avoid']
Safety,"https://github.com/qutip/qutip/blob/2ca20fb829dc67d0ee32498422bad1f8ff852a95/qutip/core/data/permute.pyx#L229-L230. `if n:` ignore it completely and assign the wrong variable... This is the main problem. https://github.com/qutip/qutip/blob/2ca20fb829dc67d0ee32498422bad1f8ff852a95/qutip/core/data/permute.pyx#L265. And here's the offending unchecked multiplication. That test is actually off from what I intended, which was hiding the buggy function call below it. The unchecked 32-bit overflow punched through the test and revealed the problematic function. In worse matrices, this would have actually been a huge segfault - the identity was only safe because it has the same number of elements in each row. ---. That's exciting that someone else is trying it out! I'm glad there are speed-ups. If you've got issues let me know and I can maybe help out with some of the internals (my email's in my github profile). I'm fine to wait to check out a PR if you guys are working on something between you. I still need to find the time to finish off the dispatching system and pull the OpenMP parts back into `dev.major`...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1382#issuecomment-728373500:648,safe,safe,648,https://qutip.org,https://github.com/qutip/qutip/issues/1382#issuecomment-728373500,1,['safe'],['safe']
Safety,"ing second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the wor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:1934,abort,aborts,1934,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['abort'],['aborts']
Safety,"ing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can sometimes be paid several times over in simple operations (a particularly notable example is in the implicit promotion of scalars to operators in addition, taking over 500µs to execute `1 + qutip.qeye(2)`). A lot of this can be completely avoided, however, simply by instantiating the objects using _all_ known information, not relying on inference. In particular, various operations _know_ what the type of their outcome is by a simple lookup table: addition is only defined between operations of the same type and maintains that type, whereas the adjoint has the mapping; ```python; _ADJOINT_TYPE_LOOKUP = {; 'ket': 'bra',; 'bra': 'ket',; 'oper': 'oper',; 'super': 'super',; }; ```; If this information is supplied to `Qobj.__init__` (and the fact that it need not copy data we've created specially for it...), we can hugely slash the overhead of mathematical operations while maintaining their safety. The issues start to come once we look at matrix multiplication and tensor-product spaces. The tensor allows us to construct objects which are a mixture of several different types, and matrix multiplication wants to be able to contract scalar product spaces so that `bra * ket` gives a scalar. ## Problems with dimension handling. The current dimension handling in QuTiP is simple and intuitive until tensor-product structures are considered. At this point, it starts to become more complicated. In particular, the `type` of a `Qobj` is tied to its dimensions, but it becomes difficult to define this once there is tensor product structure. Some of this is because QuTiP allows us to construct objects which do not have a really rigourous mathematical backing to them, such as `I . |g>` - the tensor product of an operator and a ket. QuTiP assigns this a type `'oper'`, though the way it reaches this decision is more like:; 1. is it a ket? [no]; 2. is ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:3395,safe,safety,3395,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['safe'],['safety']
Safety,"istests now return False if the object is not a Qobj instead of; raising an exception. In order to avoid a cyclical import qobj.py ->; istests.py -> qobj.py the istests have been moved to qobj.py and are; imported in istests.py for backwards compatability, closes #2. Sorry for the first failed attempt. I should also add some tests before that goes in I suppose. Just wanted to start the discussion about the cyclical import issue",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/4:99,avoid,avoid,99,https://qutip.org,https://github.com/qutip/qutip/pull/4,1,['avoid'],['avoid']
Safety,"ith a float<1e-12 makes all entries 0.0. This can be worked-around as follows:. ``` python; import qutip as qt. print ""Multiplying states by small numbers""; state3 = qt.ket([0])*1e-12; state2 = qt.ket([0])*9.999e-13; state1 = qt.ket([0]); state1 = qt.Qobj(state1.data*9.999e-13); print 'Desired:', state3; print 'Undesired:', state2; print 'Desired, via workaround:', state1; ```. ```; Multiplying states by small numbers; Normal behaviour: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 1.00000000e-12]; [ 0.00000000e+00]]; Undesired: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 0.]; [ 0.]]; Desired, via workaround: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 9.99900000e-13]; [ 0.00000000e+00]]; ```. But the real issue is this 1e-12 bound also occurs for expect() with tensored operators and states even if the individual operators' values are all >1e-12:. ``` python; print ""Expectation values with small operators""; detector = qt.Qobj([[1e-12, 0], [0, 0]]); print 'Expectation value for one detector, 1e-12:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-6, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-6:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); detector = qt.Qobj([[1e-14, 0], [0, 0]]); print 'Expectation value for one detector, 1e-14:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-7, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-7:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); ```. ```; Expectation values with small operators; Expectation value for one detector, 1e-12: 1e-12; Expectation value for two detectors, 1e-6: 1e-12; Expectation value for one detector, 1e-14: 1e-14; Expectation value for two detectors, 1e-7: 0.0; ```. It is important for me to get the real nonzero value in the last case, but I cannot see a way to do it with the current be",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/521:1113,detect,detector,1113,https://qutip.org,https://github.com/qutip/qutip/issues/521,1,['detect'],['detector']
Safety,"ken. I'm not sure I agree that implementing `__array_wrap__` is a good idea - `Qobj` does not support ufunc semantics, and implementing that implies that we're a similar class to `ndarray`, which I don't think we are. I don't think `np.sin(qobj)` should return `ndarray` _or_ `Qobj`; I think it should be a TypeError. To me, we should be rather conservative about adding features like that when there's little tangible benefit - when there's a slightly more explicit alternative syntax, it's better to fail-safe than add potential ""gotchas"". The fact that elementwise operations are not part of the algebra of `Qobj` should be enough of a reason to cause you to have to explicitly ask for it, otherwise it tacitly _becomes_ part of the algebra. For your point three, if that's the case, I'd argue you're doing something wrong: are you constructing the `Qobj` before you've finalised your data? Shouldn't it be; ```python; incomplete_data = np.array([[theta, 0, 0], ...]); return Qobj(np.sin(incomplete_data)); ```; not; ```python; return np.sin(Qobj(incomplete_data)); ```. As a compromise, we could ensure that all our data-layer types (`CSR`, `Dense`, whatever else) will support ufuncs with ndarray syntax; then you could do `Qobj(np.sin(qobj.data))` to be explicitly elementwise if you really wanted, rather than absolutely requiring you to produce a full dense matrix. I'm still not sure I see the use case there, though. I'm in favour of removing `np.array([qobj1, qobj2, ...], dtype=object)` usage inside QuTiP no matter which way we come down on this, though. As far as I recall from seeing it, there no reason to use `ndarray` over a regular Python list in any of our internal use, and it's rarely (if ever) actually returned out of a QuTiP function. Given it might cause subtle differences between different numpy versions, probably best to avoid it. If GSoC applications are imminent, we could open an issue and tag it with ""good first issue"" to give prospective applicants a potential PR?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-774058408:1956,avoid,avoid,1956,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-774058408,1,['avoid'],['avoid']
Safety,"kup table is in `Dispatcher._lookup`. These are marked as private, because messing around with them will almost certainly cause the dispatcher to stop working. Only one specialisation needs to be defined for a dispatcher to work with _all_ data types known by `data.to`. We achieve this because `data.to` guarantees that all possible conversions between data types will exist, so `data.Dispatcher` can always convert its inputs into those which will match one of its known specialisations. Within the initialisation of the data layer, we use a ""magic"" `_defer` keyword argument to `add_specialisations` to break a circular dependency. This is because the ""type"" modules `data.csr` and `data.dense` depend on some mathematical modules (e.g. `add` and `matmul`) to provide the `__add__` and similar methods on the types. For ease of development we want the dispatchers to be defined in the same modules that all the specialisations are (though this is not at all necessary), but the dispatchers require `data.to` to be populated with the types before specialisations can be added. The `_defer` keyword here just defers the building of the lookup table until an explicit call to `Dispatcher.rebuild_lookup()`, breaking the cycle. The user will never need to do this, because by the time they receive the `Dispatcher` object, `data.to` is already initialised to a minimum degree. #### Efficiency notes. The specialisations returned by the `__getitem__` lookups are not significantly faster than just calling the dispatcher directly, because the bulk of the heavy lifting is done when `add_specialisations` or `rebuild_lookup` is called. On call, the generic signature `(*args, **kwargs)` has to be bound to the actual signature of the underlying operation, regardless of whether the specialisation has already been found. At the Cython level there is short-circuit access to the call machinery in the specialisations themselves, but this cannot be safely exposed outside of the `Dispatcher` class itself.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:17657,safe,safely,17657,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['safe'],['safely']
Safety,"le for all known types automatically; when it's asked to do say `kron` on two types it doesn't have a specialisation for, it'll cast the inputs through a path of least weight into a specialisation it _does_ know, and then use that. The desired casting rules and preferred output types can be altered dynamically at run-time as well. While I put a lot of effort into making this as fast as possible (and naturally a constant-time operation with respect to the number of known types and specialisations), of course the penalty we pay is a small run-time cost of type look-ups and dispatch (<1µs, but that's dwarfed by the cost of the operations themselves). We will have a hook for creating ""data-layer types"" out of arbitrary inputs, but we weren't heavily focussing on this at all; it seems rather too special a case to have _another_ magic interface for, and we can basically just reuse `__array__` for it - ""data-layer types"" are essentially just ""matrix-like"" objects. It also isn't appropriate for the situation you're describing here, because your own objects have additional ""quantum-specific"" attributes associated with them, similar to the extra stuff that `Qobj` contains. If you want to see more of this, it's in the `dev.major` branch. ---. Defining an interoperable new public interface I think is quite a big task, since it's inherently got to be future-proof. I'm definitely +1 on us having one, and having some discussion about it before a 5.0 release. I'm most concerned with how we can do it in a manner that's useful without stymieing our own ability to iterate and improve. It's harder for downstream packages to support multiple versions of a magic interface than it is for them to changing call QuTiP library functions; with deprecation warnings we can have multiple valid methods for doing the same thing alive in the library at once, but we can't detect what version of an interface a downstream package requires (not keen on the idea of a `__qutip_qobj_api_version__` flag!!).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507:7965,detect,detect,7965,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-825608507,1,['detect'],['detect']
Safety,"lement heterodyne, but I don't really agree that the current method is overcomplicated. It is in fact basically the same as the method you suggest, so I don't see that either would be more complicated or simpler than the other. The only issue is whether the two stochastic increments are divided up in several stochastic collapse operators or if the d2 function internally takes care of the both stochastic increments for a given stochastic collapse operator. The complexity is just shifted from the d2 function to somewhere else, which in general doesn't simplify anything. However, since the milstein solver you submitted is written so that it only support one increment per collapse operators, then there might be a real advantage of splitting the heterodyne process into two homodyne processes. . I've tried to make the qutip stochastic solver API as general as I could (and it is still a work in process), so that it will be as flexible as possible for implementing custom types of SMEs. Having support for multiple stochastic increments per collapse operators seems to be useful in certain applications. Although such SMEs could probably always be rewritten as multiple collapse operators with single stochastic increments, it might not always be the most natural way to define the SME. The heterodyne detection is one example of this, and it can be formulated in both ways, but I want the qutip SME API to work with both methods (at least with the basic euler solver, not necessarily with every solver we implement). However, that doesn't mean that the implementation of heterodyne for a particular solver has to use one way or the other. We should just document which solvers support multiple increments per operators and which solvers don't. So if it is easier to get the milstein solver working for heterodyne by simulating two homodyne detections, then let's go ahead use that method for that solver. The required preprocessing can be done in the smesolve function, or something like that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22543416:1538,detect,detection,1538,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22543416,2,['detect'],"['detection', 'detections']"
Safety,"liouvillian_fast doesn't set the isherm flag at all, so it becomes the default value True. Unless H=0, the liouvillian should usually be nonhermitian, so False would be a better default value.. Will fix this. Don't think I want to do a full check of the underlaying data in this funciton, because the point of liouvillian_fast is to avoid some unnecessary overhead (although it is still a bit experimental).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/17#issuecomment-16149887:333,avoid,avoid,333,https://qutip.org,https://github.com/qutip/qutip/issues/17#issuecomment-16149887,1,['avoid'],['avoid']
Safety,"low/Pillow/issues/5906"">#5906</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Added ImageShow support for xdg-open <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5897"">#5897</a> [<a href=""https://github.com/m-shinder""><code>@​m-shinder</code></a>]</li>; <li>Fixed typo <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5902"">#5902</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Switched from deprecated &quot;setup.py install&quot; to &quot;pip install .&quot; <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5896"">#5896</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Support 16-bit grayscale ImageQt conversion <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5856"">#5856</a> [<a href=""https://github.com/cmbruns""><code>@​cmbruns</code></a>]</li>; <li>Fixed raising OSError in _safe_read when size is greater than SAFEBLOCK <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5872"">#5872</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Convert subsequent GIF frames to RGB or RGBA <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5857"">#5857</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>WebP: Fix memory leak during decoding on failure <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5798"">#5798</a> [<a href=""https://github.com/ilai-deutel""><code>@​ilai-deutel</code></a>]</li>; <li>Do not prematurely return in ImageFile when saving to stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5665"">#5665</a> [<a href=""https://github.com/infmagic2047""><code>@​infmagic2047</code></a>]</li>; <li>Added support for top right and bottom right TGA orientations <a href=""https://github-redirect.dependa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:6227,SAFE,SAFEBLOCK,6227,https://qutip.org,https://github.com/qutip/qutip/pull/1760,1,['SAFE'],['SAFEBLOCK']
Safety,"method` options, as it is in other solver.; - The method that was referring the homodyne or heterodyne detection is now the `heterodyne` keyword. ie before `method=""heterodyne""` now `heterodyne=True`.; - The default integration method is now `rouchon`, instead of `taylor1.5`. ie the method coming from a physic paper and not a mathematics textbook. . - The stochastic integration methods have been spitted in smaller chunk instead of the huge classes in _stochastic.pyx. I kept most methods, only skipping the taylor order 2.0 method. The python interface is kept very similar to the `Integrator` as `SIntegrator`, the main difference being that `set_state` and `get_state` use an extra random number generator with the time and state. The integration methods are usually 5%~10% slower than they where for medium size problems (shape ~100). Most method are computed the same way as before, but the rouchon method no longer use super operator, but keep the density matrix as a matrix and not an oper-ket. - The derivative computation for used by the integration method has also been split into multiple functions and made only available for `smesolve`. For there methods to be valid, the each diffusion contribution must commute. For `smesolve`, this means that each `sc_ops` must commute, as documented. For `ssesolve`, each `sc_ops` must not only commute, but also commute with other `sc_ops`'s adjoint, this last part being missing from v4's documentation. It also meant that the sc_ops needed to commute with it's own adjoint when using heterodyne detection... - `ssepdpsolve`, `smepdpsolve`, `photocurrent_mesolve`, `photocurrent_sesolve` removed. They are all less efficient variants of `mcsolve`. `mcsolve` already include the photocurrent in the output. - `general_stochastic`, removed. It is a mostly generic stochastic equation solver. The user to define their equations to integrate, but the results are forced into `Results` with expectation values and dims checks, making it hard to use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2131:2094,detect,detection,2094,https://qutip.org,https://github.com/qutip/qutip/pull/2131,1,['detect'],['detection']
Safety,"minate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` tha",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5740,safe,safely,5740,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['safe'],['safely']
Safety,"mization is basically just the runtime of all the internal propagations; calculating the updates should be completely negligible. There's also [shape conversions](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L254-L260) happening in [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself bein",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5262,safe,safe,5262,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['safe'],['safe']
Safety,"n in QuTiP. This function computes two-time correlations for quantum systems, which is computationally intensive, especially for large systems or long time arrays. The goal was to enhance performance by parallelizing these computations. ### Enhancements Overview. 1. **Parallel Computing**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and para",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1187,avoid,avoid,1187,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['avoid'],['avoid']
Safety,"n(msg, UmfpackWarning); > > > ok; > > > correlation: compare spectrum obtained for eseries and fft methods ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.67e+12); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > Failure: ValueError (invalid literal for int() with base 10: '1post0') ... ERROR; > > > mcsolve_f90: Constant H with no collapse ops (expect) ... ok; > > > mcsolve_f90: Constant H with no collapse ops (states) ... ok; > > > mcsolve_f90: Constant H with constant collapse ... ok; > > > mcsolve_f90: Constant H with single collapse operator ... ok; > > > mcsolve_f90: Constant H with single expect operator ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=True) ... ok; > > > mcsolve_f90: check for correct dtypes (mc_avg=False) ... ok; > > > mesolve: cavity-qubit interaction, no dissipation ... ok; > > > mesolve: cavity-qubit without interaction, decay ... ok; > > > mesolve: cavity-qubit with interaction, decay ... /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. num",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:2693,detect,detection,2693,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['detect'],['detection']
Safety,"n2int(_cy_require):; - warnings.warn(; - ""Old version of Cython detected: needed {}, got {}.""; - .format(_cy_require, _Cython.__version__); - ); - if _version2int(_Cython.__version__) >= _version2int(_cy_unsupported):; - warnings.warn(; - ""The new version of Cython, (>= 3.0.0) is not supported.""; - .format(_Cython.__version__); - ); + from sys import version_info as sys_pyver; + if sys_pyver.major == 3 and sys_pyver.minor >= 12:; + # cython3 not supported on python 3.12; + # see https://github.com/qutip/qutip/issues/2293; + print(f""qutip does not support Cython on Python 3.{sys_pyver.minor} (Issue#2293)""); else:; - # Setup pyximport; - import qutip.cy.pyxbuilder as _pyxbuilder; - _pyxbuilder.install(); - del _pyxbuilder, _Cython, _version2int; - qutip.settings.has_cython = True; + from qutip.utilities import _version2int; + _cy_require = ""0.29.20""; + _cy_unsupported = ""3.0.0""; + if _version2int(_Cython.__version__) < _version2int(_cy_require):; + warnings.warn(; + ""Old version of Cython detected: needed {}, got {}.""; + .format(_cy_require, _Cython.__version__); + ); + if _version2int(_Cython.__version__) >= _version2int(_cy_unsupported):; + warnings.warn(; + ""The new version of Cython, (>= 3.0.0) is not supported.""; + .format(_Cython.__version__); + ); + else:; + # Setup pyximport; + import qutip.cy.pyxbuilder as _pyxbuilder; + _pyxbuilder.install(); + del _pyxbuilder, _Cython, _version2int; + qutip.settings.has_cython = True; ; ; # -----------------------------------------------------------------------------; Index: qutip/qutip/tests/test_brmesolve_td.py; ===================================================================; --- qutip.orig/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; @@ -148,7 +148,8 @@; brme = qutip.brmesolve(H, psi0, times, a_ops, e_ops=[a.dag()*a]); assert np.mean(np.abs(brme.expect[0] - exact) / exact) < 1e-5; ; -; +@pytest.mark.skipif(not qut",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543:1631,detect,detected,1631,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543,1,['detect'],['detected']
Safety,"ne 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 246 in _main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 196 in wrap_session; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/main.py"", line 239 in pytest_cmdline_main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/callers.py"", line 187 in _multicall; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 87 in <lambda>; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/manager.py"", line 93 in _hookexec; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/pluggy/hooks.py"", line 286 in __call__; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/_pytest/config/__init__.py"", line 92 in main; File ""/miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip/testing.py"", line 45 in run; File ""<stdin>"", line 1 in <module>; Abort trap: 6; ```; This is in a conda environment with qutip development version with ; ```; Python 3.7.4 (default, Aug 13 2019, 15:17:50); [Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin; ```; and ; ```; QuTiP Version: 4.5.0.dev0+d13f5435; Numpy Version: 1.17.2; Scipy Version: 1.3.1; Cython Version: 0.29.13; Matplotlib Version: 3.1.1; Python Version: 3.7.4; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /miniconda3/envs/qutipdev45/lib/python3.7/site-packages/qutip-4.5.0.dev0+d13f5435-py3.7-macosx-10.9-x86_64.egg/qutip; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160:4519,Abort,Abort,4519,https://qutip.org,https://github.com/qutip/qutip/issues/1160,1,['Abort'],['Abort']
Safety,"ng tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the worker processes and interrupt them manually, or to completely rewrite parallel_map and base it on e.g. `multiprocessing.pool.Pool`. Maybe better to just remove the job_timeout parameter? If",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:2110,timeout,timeout,2110,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['timeout'],['timeout']
Safety,"nstructors when passed sequences of objects that all implement `__array__`. It is still possible to make a Numpy array of `Qobj` even with `Qobj.__array__` defined in Numpy 1.20, but you have to be rather more indirect about it:. ```python; >>> arr = np.empty((3,), dtype=object); >>> arr[:] = [qutip.qeye(2), qutip.qeye(2), qutip.qeye(2)]; >>> arr.shape; (3,); >>> arr[0]; Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[1. 0.]; [0. 1.]]; ```. The reason numpy does this now is because (my understanding is that) defining `__array__` was meant to be a much stronger guarantee than just ""it's convenient to let `np.array` know about this object"". It was meant to be an indication that your class can be safely coerced into `ndarray` (and potentially coerced back afterwards), and that mathematical operations will satisfy the normal ufunc broadcasting rules, which isn't true of `Qobj`. That means that arrays of things implementing `__array__` should be safely representable as `ndarray`, which clearly isn't true for us. Similarly, ever since `Qobj.__array__` was first defined you could use Numpy ufuncs on `Qobj`, which would get implicitly converted to `ndarray` and then return complete nonsense, rather than throwing an error like ""what you're doing is silly"":; ```python; >>> np.sin(qutip.basis(2, 1)); array([[0. ],; [0.84147098]]); ```; (imo that should really be a `TypeError` if done without an explicit conversion into Numpy semantics). There is a way around that latter point in modern Numpy - defining `Qobj.__array_ufunc__ = Qobj.__array_function__ = None` - but it does raise the question of whether we _should_ define `Qobj.__array__`; we have no intention of implying that `Qobj` satisfies the general Numpy ufunc interface, and it isn't any sort of `ndarray`-like type, because it satisfies matrix semantics, not array semantics. That's the reason `scipy.sparse` types don't implement `__array__`. There always was a sanctioned method",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094:2381,safe,safely,2381,https://qutip.org,https://github.com/qutip/qutip/issues/1433#issuecomment-773992094,1,['safe'],['safely']
Safety,"ntain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor will take only two arguments. ### Problems this does not immediately solve. Since QuTiP uses matrices to represent linear algebra objects, we tie ourselves to working in some particular basis. For example, it is invalid to add a vector in the Pauli-Z basis to one in the Pauli-X basis by element-wise addition, but QuTiP has no way of knowing if this is what the user is doing, and will simply allow it because the dimensions will match. This is still the case if the user used `Qobj.transform` to get from one to the other; it is one case where we have to trust that the user is doing the right thing, rather than enforcing correctness. In the future, the system proposed here could be ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:4939,avoid,avoids,4939,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['avoid'],['avoids']
Safety,"oat<1e-12 makes all entries 0.0. This can be worked-around as follows:. ``` python; import qutip as qt. print ""Multiplying states by small numbers""; state3 = qt.ket([0])*1e-12; state2 = qt.ket([0])*9.999e-13; state1 = qt.ket([0]); state1 = qt.Qobj(state1.data*9.999e-13); print 'Desired:', state3; print 'Undesired:', state2; print 'Desired, via workaround:', state1; ```. ```; Multiplying states by small numbers; Normal behaviour: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 1.00000000e-12]; [ 0.00000000e+00]]; Undesired: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 0.]; [ 0.]]; Desired, via workaround: Quantum object: dims = [[2], [1]], shape = [2, 1], type = ket; Qobj data =; [[ 9.99900000e-13]; [ 0.00000000e+00]]; ```. But the real issue is this 1e-12 bound also occurs for expect() with tensored operators and states even if the individual operators' values are all >1e-12:. ``` python; print ""Expectation values with small operators""; detector = qt.Qobj([[1e-12, 0], [0, 0]]); print 'Expectation value for one detector, 1e-12:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-6, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-6:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); detector = qt.Qobj([[1e-14, 0], [0, 0]]); print 'Expectation value for one detector, 1e-14:', qt.expect(detector, qt.ket([0])); detector = qt.Qobj([[1e-7, 0], [0, 0]]); print 'Expectation value for two detectors, 1e-7:', qt.expect(qt.tensor(detector, detector), qt.tensor(qt.ket([0]), qt.ket([0]))); ```. ```; Expectation values with small operators; Expectation value for one detector, 1e-12: 1e-12; Expectation value for two detectors, 1e-6: 1e-12; Expectation value for one detector, 1e-14: 1e-14; Expectation value for two detectors, 1e-7: 0.0; ```. It is important for me to get the real nonzero value in the last case, but I cannot see a way to do it with the current behaviour.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/521:1188,detect,detector,1188,https://qutip.org,https://github.com/qutip/qutip/issues/521,17,['detect'],"['detector', 'detectors']"
Safety,"obj(data, dims=dims, copy=False, type='oper', isherm=...); ```; providing `data` is actually of a valid (`fast_csr_matrix`) format. Technically the `Qobj.data` attribute will be a new object that wraps the same numpy arrays as was passed, rather than the same `fast_csr_matrix`. In various forms, `expect` already does check the Hermicity, that's why `mc-dm` is careful to set it to avoid recalculating it. The expect functions in `qutip.expect` do this directly, and aren't aware of column-stacked density matrices - they'll just raise a TypeError. `mesolve` and `mcsolve` now bypass the `Qobj` stage and go direct to Cython - in 5.0 it might not be a terrible idea to route everything back through the `Qobj` form, since the performance issues there are solved (a column-stacked dense matrix can be directly wrapped by an f-ordered `Dense` type), and it's the natural central point of the code (and those parts are called from Python-space anyway, so no C concerns). Here though, the problem is actually that the expectation generator in `mesolve` correctly calculates the dtype of the output expectation array using both the state and the expectation operator, but then it does it incorrectly in the loop, and passes the hermicity down to Cython using only the expectation operator, which promptly throws out the complex part. So setting `fast='mc-dm'` in `Qobj` is a symptom of the same root cause as the problem here, rather than the cause itself. At the start of `mesolve` we don't assume that the state is Hermitian, but then inside the integration loop we do. We can still keep the speedup - if the output was created with a complex dtype, we can always safely say that we're passing in non-Hermitian operators, even if coincidentally at one timestep they happen to be anyway. See https://github.com/qutip/qutip/blob/d285e96b3afc61afd1deceef61d9635f9d9aa505/qutip/mcsolve.py#L525-L529 and https://github.com/qutip/qutip/blob/d285e96b3afc61afd1deceef61d9635f9d9aa505/qutip/mesolve.py#L509-L511",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048:2094,safe,safely,2094,https://qutip.org,https://github.com/qutip/qutip/issues/1460#issuecomment-796835048,1,['safe'],['safely']
Safety,"or each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfied with how the new rhs functions work I'll merge the branch sme-rhs-restructuring into qutip master and then feel free to submit a pull request with your milstein rhs implementation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1913,detect,detection,1913,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,2,"['avoid', 'detect']","['avoided', 'detection']"
Safety,"ort qutip; qutip.about()""` reports; ```; BLAS Info: OPENBLAS; ```. However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_threads_info:; NOT AVAILABLE; atlas_blas_info:; NOT AVAILABLE; blas_info:; libraries = ['blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:1151,detect,detected,1151,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['detect'],['detected']
Safety,"r to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of memory.; Needed 78.52 MB, but only allowed to use 0.00 MB. Increase `precompute_memory` to raise limit, or; set to `None` to suppress warning.; array( ... ); ```; To suppress the warning, and always use the iterative approach, you can set `precompute_memory=None`. Now, even if you're using the `precompute_memory` option, `qfunc` still can't remember its state between calls. This means it's inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up an",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:1532,avoid,avoid,1532,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['avoid'],['avoid']
Safety,"re exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an issue with QuTiP. I suspect it isn't an issue with `scipy` either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:7153,Abort,Abort,7153,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['Abort'],['Abort']
Safety,"re included. It seems difficult to write better unit tests for such timing-sensitive behavior, but I have tested in detail on both Linux (WSL) and Windows. **Current behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is excee",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:1320,timeout,timeout,1320,https://qutip.org,https://github.com/qutip/qutip/pull/2280,1,['timeout'],['timeout']
Safety,"re those written in the notebook. Various stochastic integration method are provided, the default is the taylor expansion of order 1.5. Thank you very much for your reply, but I still don't quite understand `smesolve`'s `expect` are just the expectation value of the state of each trajectories”. In my understanding, solving for 'smesolve' gives the corresponding 'ρ(t)' and then 'expect'. But 'smesolve' provides **[ntraj [int] number of trajectors]**, which means that there are _ntraj_ 'ρ(t)' (`expect`). If I want to show all _ntraj_ ‘s 'expect', how can I do it?. Can I understand `result.measurement` as measuring(POVM) the `smesolve.result` (where ρ(t) was given by solving the stochastic master equation) .$\hat{\rho}_{f}=\frac{\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}}{\mathrm{Tr}[\hat{\Omega}_{m}\hat{\rho}\hat{\Omega}_{m}^{\dagger}]}$。If this is the case, I don't understand the point of doing the measurement again here, because the stochastic master equation itself has a continuous measurement. What I want to do is simply solve the stochastic master equation to get enough trajectories **ρ(t)** and solve the relevant expected value **Tr[ρ(t)A]**. On the one hand, I want to see the expectations of all N quantum trajectories ρ(t)'s expect (**Tr[ρ(t)A] maybe with different dW**), and on the other hand I want to compare the expected average of N quantum trajectories with the result of the master equation(`mesolve.expect`). This is similar to this code in Note (but the result in [Note](https://nbviewer.org/urls/qutip.org/qutip-tutorials/tutorials-v4/time-evolution/016_smesolve-inefficient-detection.ipynb) is `result.measurement`). `fig, ax = plt.subplots(figsize=(8, 4)). for m in result.measurement:; ax.plot(times, m[:, 0].real, ""b"", alpha=0.025). ax.plot(times, result_ref.expect[1], ""k"", lw=2). ax.set_ylim(-25, 25); ax.set_xlim(0, times.max()); ax.set_xlabel(""time"", fontsize=12); ax.plot(times, np.array(result.measurement).mean(axis=0)[:, 0].real, ""b"", lw=2);`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206:2395,detect,detection,2395,https://qutip.org,https://github.com/qutip/qutip/issues/2194#issuecomment-1635364206,1,['detect'],['detection']
Safety,"restructuring) where I have experimented with rhs functions that internally loop through the A_ops list. In simple cases it only loops through the list and calculates a contribution for each stochastic collapse operator, but now it is also possible to do something more sophisticated, like in your milstein solver. I've edited your notebook so that it uses the standard (now modified) smesolve and your rhs functions for the milstein methods. http://nbviewer.ipython.org/6153688. Note that I still only use the rhs function for the contributions due to the stochastic collapse operators (both the deterministic and stochastic part), and it does not include the unitary part or the deterministic collapse operators (if those are given as well), so it is not quite what you suggested when proposing that the rhs should calculate \rho_{n+1}. Do you think this approach is reasonable, or do you see any problems with it?. Regarding your milstein implementation, it seems that it is only valid for homodyne detection, since your have hardcoded the d1 and d2 function into the rhs function. I've tried to separate the definition of the SDE (d1 and d2) from the implementation of the SDE integrator (rhs), and naively it seems like you could use the d1 and d2 functions in rhs_milstein to make it possible to use it with hetrodyne detection as well. Is there any difficulties in generalizing the milstein method and parameterize it in terms of d1 and d2 functions in this way?. I've also tried to use the smesolve_imp and smesolve_milstein with explicit=False in your original notebook, but I do not get resuls that agree with the other methods if I use these. Looking at the code for smesolve_imp, you do an inversion of some variant of the liouvillian to calculate Lsparse, what is the purpose of that calculation? And finally, I see you use expm in _smesolve_single_milstein_implicit: I think this should be avoided because it will be very computationally demanding for larger systems. If you are satisfie",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22088170:1591,detect,detection,1591,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22088170,1,['detect'],['detection']
Safety,rho0 arguments replaced with psi0; references to density matrices removed; Just to avoid any confusion. No functional changes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/812:83,avoid,avoid,83,https://qutip.org,https://github.com/qutip/qutip/pull/812,1,['avoid'],['avoid']
Safety,"rom the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solver options. It can be used as such:; ```; opt = SolverOptions(method='lsoda'); opt['progress_bar'] = False; opt.ode['max_order_ns'] = 10; ```; To make it work smoothly, each integr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:1177,safe,safety,1177,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['safe'],['safety']
Safety,"s by increasing the nsteps parameter in the Options class."". I tryied to change nsteps parameter but it just doesnt work for any value of it, no matter how big the number is. H= Hamiltonian, shape: 69,2,2; list_Jump-op= Jump operators, shape:69,2,2; time= timesteps, shape (69,); estados_val= the different states that I want to evolve on this dynamics, shape( 6,69,2,2) . Note that I am only taking the 0th element on the axis with lenght of 69. predictions=[mesolve(H,; Qobj(estados_val[i][0]),; time,list_Jump_op,options=Options(nsteps=10000000000000000)) for i in range(len(estados_val))]. The terminal out put is; /home/andrius/anaconda3/lib/python3.8/site-packages/scipy/integrate/_ode.py:1013: UserWarning: zvode: Excess accuracy requested. (Tolerances too small.); warnings.warn('{:s}: {:s}'.format(self.__class__.__name__,; ---------------------------------------------------------------------------; Exception Traceback (most recent call last); <ipython-input-11-0bc27bfd6f01> in <module>; 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. <ipython-input-11-0bc27bfd6f01> in <listcomp>(.0); 40 ; 41 la=10000000000000000; ---> 42 predictions=[mesolve(H,; 43 Qobj(estados_val[i][0]),; 44 time[1:],list_Jump_op,options=Options(nsteps=la)) for i in range(len(estados_val))]. ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in mesolve(H, rho0, tlist, c_ops, e_ops, args, options, progress_bar, _safe_mode); 270 func(0., v, *ode_args) + v; 271 ; --> 272 res = _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, options,; 273 progress_bar, dims=rho0.dims); 274 res.num_collapse = len(c_ops). ~/anaconda3/lib/python3.8/site-packages/qutip/mesolve.py in _generic_ode_solve(func, ode_args, rho0, tlist, e_ops, opt, progress_bar, dims); 515 ; 516 if not r.successful():; --> 517 raise Exception(""ODE integration error: Try to increase ""; 518 ""the allowed numb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1605:1383,predict,predictions,1383,https://qutip.org,https://github.com/qutip/qutip/issues/1605,1,['predict'],['predictions']
Safety,"s defines what an scalar is at the _specialisation_ level. However:; - It may cause inconsistent behaviour where some operations are allowed for a data layer (`TfTensor` or any other) but not for another one. I would argue that all specialisations should accept the same input, although operations may be handled differently internally (for example, in tensorflow we want to keep the graph state).; - `NotImplemented` only makes sense for some special binary methods (`__add__`, `__lt__`, etc) as Python employs `NotImplemented` to try `other`'s binary method. My concern is that if the dispatcher is used by itself at some points of the code (such as for the solver) returning `NotImplemented` may cause wrong error messages or even unexpected behaviour with future specialisations ( for instance, although it now raises a deprecation warning, `NotImplemented` is considered as `True` when evaluated as a condition). It seems to me that we should avoid having `NotImplemented` in python space (except for arithmetic operations in a class where they are useful and always make sense).; ; 2) Simon suggested to define what a scalar is at the _dispatcher_ level (or something similar to this but correct me if I am wrong). This would require to have a function that casts any defined scalar to a complex scalar. The dispatcher would be responsible to ensure that the correct scalar gets passed appropriately to the specialisation and for returning not implemented if necessary. ; - This solves the inconsistency problem as you could register a ""new"" scalar and define how it gets cast to a python complex scalar with a function (in most of the times, if not always, this will be `complex(other)`). ; - This does _not_ solve having `NotImplemented` at the python space.; - It seems to be challenging to implement and will probably make things more difficult to maintain. 3) We can also define more rigorously what a scalar is for `Qobj` with a list, `_ALLOWED_SCALARS = [numbers.Number, ...]` that define",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152:1640,avoid,avoid,1640,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-889006152,1,['avoid'],['avoid']
Safety,"s ea1c129 to b4f75cf as ""new"" (the first three commits of this PR). However, when those commits are taken together, they make the same changes as commit 4102b99 (the one which merged #1242) in `qutip/master`. The Github ""Files changed"" dialog is a pretty-printed version of the `git` command `git diff qutip/master...Canoming/master`, which means ""show all changes on either branch since `qutip/master` and `Canoming/master` diverged"". Because they diverged before #1242 was merged, it includes those changes. The merge completes without conflict, however, because `git` is clever and recognises that the changes introduced in the two branches `qutip/master` and `Canoming/master` are identical, even though the commits are different. As a consequence, however, merging this PR without squashing it would cause commits ea1c129 to b4f75cf to suddenly appear in our commit history, which we don't want. ### If Canoming wanted to fix this (not necessary). First run; ```; git remote add qutip https://github.com/qutip/qutip.git; git fetch qutip; ```; to add the upstream `qutip` remote. Then run; ```; git checkout master; git rebase -i $(git merge-base qutip/master master); ```; and modify the file so that the instruction list looks like (only the first word of each line changes); ```; pick ea1c129a fix function QubitCircuit.remove_gate; fixup 3bd94603 fix function QubitCircui.remove_gate; fixup b4f75cfe fix; pick 4aa90f56 fix bug in QubitCircuit.add_circuit; pick 3a2676de fix function QubitCircuit.add_circuit; pick 58aebc7f fix indent; ```; Should you save and close the file, it would modify your commit history. We'd only do this to avoid a merge conflict which would otherwise occur in the next step. Then, run; ```; git rebase qutip/master; ```; which should complete without error. Finally, your local `master` would now have diverged from Github's copy (and this PR's), so you'd have to force-push the changes by doing; ```; git push --force; ```; which would update this PR accordingly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629701269:2697,avoid,avoid,2697,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629701269,1,['avoid'],['avoid']
Safety,"s://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF data <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5584"">#5584</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Make Image.<strong>array</strong> take optional dtype argument <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5572"">#5572</a> [<a href=""https:/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:1365,avoid,avoid,1365,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['avoid'],['avoid']
Safety,"series and pseudo-inverse methods ... ok; > > > Diagonalization of random two-level system ... ok; > > > Diagonalization of composite systems ... ok; > > > von-Neumann entropy ... ok; > > > Linear entropy ... ok; > > > Concurrence ... ok; > > > Mutual information ... ok; > > > Conditional entropy ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and density matrix ... ok; > > > expect: operator and ket ... ok; > > > expect: operator list and state ... ok; > > > expect: operator list and state list ... ok; > > > expect: operator and state list ... ok; > > > Read and write complex valued decimal formatted data ... ok; > > > Read and write complex valued default formatted data ... ok; > > > Read and write complex valued exp formatted data ... ok; > > > Read and write real valued decimal formatted data ... ok; > > > Read and write real valued default formatted data ... ok; > > > Read and write real valued exp formatted data ... ok; > > > Read and write with automatic separator detection ... ok; > > > Floquet: test unitary evolution of time-dependent two-level system ... ok; > > > gates: expand 1 to N ... ok; > > > gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; > > > gates: expand 2 to N (using swap) ... ok; > > > gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; > > > gates: swap gate ... ok; > > > Graph: Breadth-First Search ... ok; > > > Graph: Graph Degree ... SKIP: Networkx not installed.; > > > Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (Bucky) ... ok; > > > Graph: Reverse Cuthill-McKee Ordering (boost) ... ok; > > > Monte-carlo: Constant H with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H with no collapse ops (states) ... ok; > > > Monte-carlo: Constant H (str format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (func format) with no collapse ops (expect) ... ok; > > > Monte-carlo: Constant H (str",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:2943,detect,detection,2943,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['detect'],['detection']
Safety,"site may help for future reference. On Wed, 13 May 2020 at 23:38, Eric Giguère <notifications@github.com> wrote:. > I did some tests and; > 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian; > matrices) (c's version Ok); > 2 - It happen when installing the scipy stack with pip but not when; > installing it with conda.; > 3 - It depend on the problem size, 64 seems particularly bad, usually it; > fails on the second call.; > 4 - I only got it in zheevr which is only used in brmesolve. But Nathan; > got it in other tests which use scipy's eigh.; > 4 - It happen in scipy in the fortan version of lapack:; >; > import numpy as np; > from scipy.linalg import eigh; > H = random_hermitian(64); > eigh(H) # Work fine; > eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; >; > Possible solutions (for zheevr):; >; > - Installing scipy with conda, the easiest solution, but not in our; > control.; > - Finding a way to link clapack from cython. Linking scipy's one would; > require good knowledge of scipy internals since only one cython interface; > is provided. Linking to another installation of lapack, but it would; > require the user to install lapack or install it with qutip. Both seems; > wrong to me.; > - For mac user, call scipy's eigh from cython i zheevr, slower but; > better than risking segfault.; > - Have the code directly in qutip. We can adapt it from OpenBlas:; > https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1197#issuecomment-628259492>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADPF67AJF3WTZBCU4YWFY23RRMHMHANCNFSM4LCKXE6A>; > .; >; -- ; Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264:1599,risk,risking,1599,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264,1,['risk'],['risking']
Safety,"sks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Removed from documentation | Removed from documentation. **Job timeout**. Currently, the job timeout parameter is ignored by parallel_map. In loky_pmap, it is not the maximum allowed time for one job, but the maximum time between two job finishes (possibly in different processes). If this time is exceeded, all tasks will still be executed until the end; only the results of the tasks that finished too slowly will be discarded. I do not think that this was the intention of the job timeout parameter?. Unfortunately, both `ProcessPoolExecutor` (which parallel_map is based on) and its loky version do not support timeouts for single tasks, nor do they support aborting single tasks manually. (The loky one supports killing *all* worker processes at once.) If we wanted to have a job timeout parameter, we would need to either use non-public API to obtain references to the worker processes and interrupt them manually, or to completely rewrite parallel_map and base it on e.g. `multiprocessing.pool.Pool`. Maybe better to just remove the job_timeout parameter? If you agree with that, I will then also remove it from the available options for `MultiTrajSolver` and all its subclasses.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:2531,timeout,timeout,2531,https://qutip.org,https://github.com/qutip/qutip/pull/2280,4,"['abort', 'timeout']","['aborting', 'timeout', 'timeouts']"
Safety,"sting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot be; passed as <code>dims</code> keyword argument anymore. (Was deprecated in NumPy; 1.16.)</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/numpy/numpy/commit/b235f9e701e14ed6f6f6dcba885f7986a833743f""><code>b235f9e</code></a> Merge pull request <a href=""https://github-redirect.dependabo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:1476,safe,safe,1476,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['safe'],['safe']
Safety,"t cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.ready():; raise TimeoutError; if self._success:; return self._value; else:; > raise self._value; E ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. C:\ ... \Python\Python39\lib\multiprocessing\pool.py:771: ValueError; ----------------------------------------------------- Captured stdout call ------------------------------------------------------ . ```. **To Reproduce**; ```; import qutip.testing. inp = input(""Proceed with full test? [Y/N]: ""); if inp == ""y"" or inp == ""Y"":; qutip.testing.run(). print(""Process Complete!""); ```. System Information:; Windows 10; Python 3.9.6. The error: - incompatible Liouvillian and state dimensions; didn't seem like it was because of missing a requirement, so I'm posting this here. Also, as a side note, to reach 61% it took my system 4 hours, which doesn't sound right (I have a decent system with 8GB ram and core i5). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:2404,timeout,timeout,2404,https://qutip.org,https://github.com/qutip/qutip/issues/1711,3,"['Timeout', 'timeout']","['TimeoutError', 'timeout']"
Safety,"t into this internal representation and internally operate on this, because it's much faster. Essentially what I'm describing here is an abstract syntax tree for relevant linear algebra structures. We _could_ even have the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2021,safe,safe,2021,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['safe'],['safe']
Safety,"tation</strong></p>; <ul>; <li>Various typo fixes and doc improvements.</li>; </ul>; <p><strong>Packaging</strong></p>; <ul>; <li>Requests has started adopting some modern packaging practices.; The source files for the projects (formerly <code>requests</code>) is now located; in <code>src/requests</code> in the Requests sdist. (<a href=""https://redirect.github.com/psf/requests/issues/6506"">#6506</a>)</li>; <li>Starting in Requests 2.33.0, Requests will migrate to a PEP 517 build system; using <code>hatchling</code>. This should not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/d6ebc4a2f1f68b7e355fb7e4dd5ffc0845547f9f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:7771,Avoid,Avoid,7771,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['Avoid'],['Avoid']
Safety,"te` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L312) in Krotov's [`DensityMatrixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) with something that's reentrant so I don't have to [re-initialize the integrator in every time step](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L244) , that might be a significant performance boost already.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:12872,safe,safe,12872,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['safe'],['safe']
Safety,"the quick response @bencbartlett. . Feel free to ignore the comments regarding the shortening of arguments. That was just a suggestion to make things shorter. But as you said clarity is more important. I will not change `waveguide` to `wg` and I think you should leave the others as they are if you can't think of shorter ones. Same applies to the `temporal_basis_vector`. I think you can even add a `temporal_basis` as you mentioned. Regarding the double line breaks wrapping top-level functions, I know the pep8 standard is two newlines but some other QuTiP modules follow just a single line break, e.g., [floquet](https://github.com/qutip/qutip/blob/master/qutip/floquet.py). But again some other modules in QuTiP follow the pep8 standard and wrap two newlines for top-level functions. I am in favor of the pep8 standard and have two newlines. @ajgpitch what do you suggest?. Please remove the helper function `count_filled` without the test if it is not required. We aim to test as much as possible and remove redundancy in code. About `__all__`, I will shift all the rest in a new PR and we can keep yours as it is now. Coming to the more important discussion regarding the `class` based implementation, I have started pushing for similar approaches in newer modules such as [qutip.models.piqs](https://github.com/qutip/qutip/blob/master/qutip/models/piqs.py). I am also working on a new non-Markovian method which requires a class. Something of that sort is already used in `qutip.nonmarkov.heom`. I understand that many of qutip's solvers are written to be isolated functions but that should not mean that we should not write code to fully use the object oriented framework Python provides. Moreover, I noticed that you have to rewrite wrappers for the functions anyways to deal with repeatedly calculating things such as `scattering_probability` which clearly can be made much more compact if we use a class based approach. I am not making this suggestion just for the minor performance impro",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/848#issuecomment-384860713:1025,redund,redundancy,1025,https://qutip.org,https://github.com/qutip/qutip/pull/848#issuecomment-384860713,1,['redund'],['redundancy']
Safety,"the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. You'd still type `dims=[[2], [1]]` to get a qubit ket and `dims=[[1], [2]]` for a qubit bra, so I don't think there's any confusion there. The reason there's not a special ""bra"" structure internally is because it's not necessary; a bra really is just a linear mapping from a particular vector space to the field, so having a special case for that makes more complex - the matmul compatibility test with `Map(Space, Field)` and `Map(Space, Space)` is the exact same test as for two operators, which simplifies the logic. ---. After sleeping on it, I still generally like the singleton pattern for this, but I think _completely_ relying on referential equality is probably a bit ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:2265,safe,safety,2265,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['safe'],['safety']
Safety,"tion purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----------. _Original top comment:_. Not a complete switch-over to `CSR` from `fast_csr_matrix`, but this goes a really long way to achieving that. `Qobj` is done completely, but `QobjEvo` is pretty difficult to disentangle, and that really slowed me down a lot, and I'm not at all sure I've got it right there yet. OpenMP is ignored for now as low-priority. We'll need to get it working before a QuTiP 5.0 release, but I'm not working on it at the moment. `CQobjEvo` has been absolutely stripped bare. All its variants are gone, since the data layer types will handle this instead. `QobjEvo` is basically managed by shim at the moment, and needs a huge tidy up to bring it up to speed with the new data layer, and keep it maintainable. The data layer types have been taught to pickle themselves safely and automatically, and so consequently `QobjEvo` is magically pickle-able (aside from the OpenMP types). This PR includes all the commits from #1296 as well, but it's still a pretty giant PR as it stands right now. The tests won't pass yet, because I haven't finished converting everything.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:3819,safe,safely,3819,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['safe'],['safely']
Safety,"tl;dr We should go ahead and change it according to PEP8. I vaguely remembered that. ```; string_one == string_two; ```. and. ```; string_one is string_two; ```. do something different. According to [post on stackoverflow](http://stackoverflow.com/questions/132988/is-there-a-difference-between-and-is-in-python) ""=="" tests for value equality, while ""is"" checks for whether the variables point to the same thing. Since ""None"" is a singleton the two are the same (except for some [oddball cases](http://jaredgrubb.blogspot.sg/2009/04/python-is-none-vs-none.html)). The [post about the oddball case](http://jaredgrubb.blogspot.sg/2009/04/python-is-none-vs-none.html) also seems to suggest that ""is"" is faster. Anyway, it's a) safe to change and b) recommended, so we should do that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/10#issuecomment-10983787:724,safe,safe,724,https://qutip.org,https://github.com/qutip/qutip/issues/10#issuecomment-10983787,1,['safe'],['safe']
Safety,"to caution you in case you're trying to work towards a PR, because I'm not close to being happy to accept one, yet. If we're going to do this (and we haven't decided if we will yet), we're going to need to get a lot of wide-ranging input from many different libraries, and we'll want to write out a proper design document and get approval of it before we get deep into the implementation. > The latter would make it harder to support multiple versions of qutip in the implementers, but I would not worry too much about it. You can throw an error saying that this other package is not supported and you should either nag it's developers or downgrade qutip.; >; > I'm not particularly worried about the blame: even if the error is thrown from qutip, if the message is clear enough it will be clear that the fault is in the downstream implementors of the API. I'm concerned from a user's perspective. QuTiP has a wide user base, and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:4241,avoid,avoid,4241,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['avoid'],['avoid']
Safety,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:2035,risk,risk,2035,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['risk'],['risk']
Safety,"ucer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an issue with QuTiP. I suspect it isn't an issue with `scipy` either, but I'm not sure - it looks like a slight overwrite in MKL on macOS, though it's also possible that `scipy` passes some invalid pointers when dropping down to BLAS/LAPACK. I get the impression that the next steps involve dropping down a level of abstraction, down to Cython to directly call scipy's wrappers, or even fully down t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:7339,detect,detector,7339,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['detect'],['detector']
Safety,"umerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object that keeps state in a thread-safe way and allows doing time steps would alleviate this overhead (like the `mesolve_prepare_ode(H, state, c_ops) -> OdeState` that you propose in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462). On the other hand, looping over the full `mesolve` as in `In [19]` obviously has no problems with parallelization. I wasn't sure if that's what you meant by ""`mesolve` is re-entrant"" or whether recent changes in QuTiP now use a re-entrant internal integrator, i.e. not `scipy.integrate.ode`. At the time I ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:6159,safe,safely,6159,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['safe'],['safely']
Safety,"useless redundant code. creates so much of a problem. @nonhermitian...merge it please, neill will add the rest",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-102252338:8,redund,redundant,8,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-102252338,1,['redund'],['redundant']
Safety,"utput_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 0.5]; [0.5 0.5]]), Seq(1,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 -0.5]; [-0.5 0.5]])}; >>> z_instrument.sample(ket_plus); (Seq(1,), Outcome(probability=0.5000000000000001, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0. 0.]; [0. 1.]])); ```. Instruments can be combined through composition and tensor products (corresponding to `Seq` and `Par` outcome labels, respectively):. ```python; >>> z_instrument * z_instrument; QInstrument id=2e7d878ab80 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 1); }; >>> qutip.tensor([z_instrument] * 2); QInstrument id=2e7d8a1dcd0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Par(0, 0) Par(0, 1) Par(1, 0) Par(1, 1); }; ```. Impossible outcomes are detected and truncated automatically:. ```python; >>> z_instrument * z_instrument; QInstrument id=2e7d8a6e130 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 1); }; >>> z_instrument.with_finite_visibility(0.95) ** 2; QInstrument id=2e7d8a6ef10 {; dims [[[2], [2]], [[2], [2]]]; outcomes Seq(0, 0) Seq(1, 0) Seq(0, 1) Seq(1, 1); }; ```. Arbitrary subsystem dims are supported:. ```python; >>> qutip.QInstrument.basis_measurement(3); QInstrument id=2e7d5ca4eb0 {; dims [[[3], [3]], [[3], [3]]]; outcomes Seq(0,) Seq(1,) Seq(2,); }; ```. Incomplete instruments (that is, where the probability of obtaining any result is less than 1, as in the erasure channel case) can be completed:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete(); QInstrument id=1f9735f3f10 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq() Seq('⊥',); }; ```. Measurement outcome labels can be re-indexed onto integer labels according to lexographical sorting of original labels:. ```python; >>> qutip.QInst",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:2893,detect,detected,2893,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['detect'],['detected']
Safety,"ved characters in IPv6 Zone ID parsing (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2899"">urllib3/urllib3#2899</a>)</li>; <li>Fix IDNA handling of 'x80' byte (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2901"">urllib3/urllib3#2901</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins; would cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>; </ul>; <h1>1.26.15 (2023-03-10)</h1>; <ul>; <li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing; (<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>; <li>Fix IDNA handling of '\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/c90",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:1970,safe,safety,1970,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['safe'],['safety']
Safety,wrong logic detecting BLAS support discrepant from numpy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:12,detect,detecting,12,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['detect'],['detecting']
Safety,"y the implementation of a stochastic rhs function is relatively isolated from how the deterministic part is calculated (which right now is trivial, but which could become more complex when time-dependent systems are implemented). However, it also gives all the flexibility needed in the rhs function, and these deterministic rhs functions do not need to be used if it is not suitable in a particular stochastic rhs implementation. . I've added the changes to the rhs behavior to the https://github.com/qutip/qutip/tree/sme-rhs-restructuring and updated the gist with the variant of your notebook. http://nbviewer.ipython.org/6153688. Note that a few other things, like the rhs function signature, had to change in the process. I hope that this updated API will be flexible enough to let you implement implicit solver. Regards rhs implementation and d1,d2 function: Yes, I understand that not all possible rhs schemes might be compatible with the parameterization with d1 and d2 functions, but when it is possible it has the great advantage that the user do not need to worry about how the rhs is implemented, only define the SDE in terms of d1 and d2, and then possibly select a rhs solver using the solver argument to smesolve. This will not work in general for solvers like the milstein scheme, since it requires an analytical derivative (unless it can be evaluated numerically?), and in those cases it would be sufficient to implement problem specific rhs functions (like rhs_rho_milstein_homodyne etc). Regarding the use of expm: OK, I agree that it could be a nice method to have to be used on smallish system. However, since we are stepping with a small timestep dt, shouldn't it be sufficient to use an expansion of of expm as usual? Perhaps a second-order expansion would do if the first order isn't sufficient. Doing a full expm is fine too I guess, but if it can be avoided then the same method could be used on larger systems too. . Looking forward to seeing your new notebooks and the PR!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22156426:2749,avoid,avoided,2749,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22156426,1,['avoid'],['avoided']
Safety,"yle](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0.5 0.5]; [0.5 0.5]]), Seq(1,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[ 0.5 -0.5]; [-0.5 0.5]])}; >>> z_instrument.sample(ket_plus); (Seq(1,), Outcome(probability=0.5000000000000001, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =; [[0. 0.]; [0. 1.]])); ```. Instruments can be combined through composition and tensor products (corresponding to `Seq` and `Par` outcome labels, respectively):. ```python; >",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:1539,predict,predict,1539,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['predict'],['predict']
Security," ; ```. and I get this error repeatedly when using the `steadystate` function. . ```; OSError Traceback (most recent call last); <ipython-input-3-4ef4797a881f> in <module>; 30 g2_v = []; 31 for p, x in enumerate(Gamma_vec):; ---> 32 j, z = calculate_avg_photons(N, x); 33 print(p); 34 n_avg.append(j). <ipython-input-3-4ef4797a881f> in calculate_avg_photons(N, Gamma); 18 c_ops.append(np.sqrt(rate)*sm.dag()); 19 ; ---> 20 rho = steadystate(H,c_ops); 21 n_cav = expect(a.dag()*a,rho); 22 g2_cav = expect(a.dag()*a.dag()*a*a,rho)/(n_cav**2). ~\Anaconda\lib\site-packages\qutip\steadystate.py in steadystate(A, c_op_list, method, solver, **kwargs); 288 if (ss_args['solver'] == 'scipy' and ss_args['sparse']) \; 289 or ss_args['solver'] == 'mkl':; --> 290 return _steadystate_direct_sparse(A, ss_args); 291 else:; 292 return _steadystate_direct_dense(A, ss_args). ~\Anaconda\lib\site-packages\qutip\steadystate.py in _steadystate_direct_sparse(L, ss_args); 458 max_iter_refine=ss_args['max_iter_refine'],; 459 scaling_vectors=ss_args['scaling_vectors'],; --> 460 weighted_matching=ss_args['weighted_matching']); 461 _direct_end = time.time(); 462 ss_args['info']['solution_time'] = _direct_end-_direct_start. ~\Anaconda\lib\site-packages\qutip\_mkl\spsolve.py in mkl_spsolve(A, b, perm, verbose, **kwargs); 391 # Do dense RHS solving; 392 if not b_is_sparse:; --> 393 x = lu.solve(b, verbose=verbose); 394 # Solve each RHS vec individually and convert to sparse; 395 else:. ~\Anaconda\lib\site-packages\qutip\_mkl\spsolve.py in solve(self, b, verbose); 168 byref(c_int(33)), byref(c_int(self._dim)), self._data, self._indptr, self._indices,; 169 self._np_perm, byref(c_int(nrhs)), self._np_iparm, byref(c_int(0)), np_b,; --> 170 np_x, np_error); 171 self._solve_time = time.time() -_solve_start; 172 if error[0] != 0:. OSError: exception: access violation reading 0x0000000000000008; ``` . The does not raise every time I use the function and it has a different number at the end everytime it is shown.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1077:2885,access,access,2885,https://qutip.org,https://github.com/qutip/qutip/issues/1077,1,['access'],['access']
Security," <ul>; <li>Fix issue where specially crafted inputs to encode() could; take exceptionally long amount of time to process. [CVE-2024-3651]</li>; </ul>; <p>Thanks to Guido Vranken for reporting the issue.</p>; <p>3.6 (2023-11-25); ++++++++++++++++</p>; <ul>; <li>Fix regression to include tests in source distribution.</li>; </ul>; <p>3.5 (2023-11-24); ++++++++++++++++</p>; <ul>; <li>Update to Unicode 15.1.0</li>; <li>String codec name is now &quot;idna2008&quot; as overriding the system codec; &quot;idna&quot; was not working.</li>; <li>Fix typing error for codec encoding</li>; <li>&quot;setup.cfg&quot; has been added for this release due to some downstream; lack of adherence to PEP 517. Should be removed in a future release; so please prepare accordingly.</li>; <li>Removed reliance on a symlink for the &quot;idna-data&quot; tool to comport; with PEP 517 and the Python Packaging User Guide for sdist archives.</li>; <li>Added security reporting protocol for project</li>; </ul>; <p>Thanks Jon Ribbens, Diogo Teles Sant'Anna, Wu Tingfeng for contributions; to this release.</p>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/kjd/idna/commit/1d365e17e10d72d0b7876316fc7b9ca0eebdd38d""><code>1d365e1</code></a> Release v3.7</li>; <li><a href=""https://github.com/kjd/idna/commit/c1b3154939907fab67c5754346afaebe165ce8e6""><code>c1b3154</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/172"">#172</a> from kjd/optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/0394ec76ff022813e770ba1fd89658790ea35623""><code>0394ec7</code></a> Merge branch 'master' into optimize-contextj</li>; <li><a href=""https://github.com/kjd/idna/commit/cd58a23173d2b0a40b95ee680baf3e59e8d33966""><code>cd58a23</code></a> Merge pull request <a href=""https://redirect.github.com/kjd/idna/issues/152"">#152</a> from elliotwutingfeng/dev</li>; <li><a href=""https://github.com/kjd/idna/commit/5beb28b9dd77912c0dd656d8b0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:1788,secur,security,1788,https://qutip.org,https://github.com/qutip/qutip/pull/2392,1,['secur'],['security']
Security," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ...etc etc...; ________________________________________________________________________________________________________________ TestSESolve.test_06_4_compare_state_and_unitary_list_str ________________________________________________________________________________________________________________. code = '#!python\n#cython: langua",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:16770,access,access,16770,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_ti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:21900,access,access,21900,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security," and LAB <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6647"">#6647</a>; [radarhere]</p>; </li>; <li>; <p>Do not attempt normalization if mode is already normal <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6644"">#6644</a>; [radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d594f4cb8dc47fb0c69ae58d9fff86faae4515bd""><code>d594f4c</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/909dc64ed5f676169aa3d9b0c26f132a06321b83""><code>909dc64</code></a> 9.3.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1a51ce7b955c65c8f2c6bc7772735b197b8a6aa3""><code>1a51ce7</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> from hugovk/security-libtiff_buffer</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c2",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:13742,secur,security-,13742,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['secur'],['security-']
Security," function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1753,validat,validate,1753,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['validat'],['validate']
Security," right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:4177,access,accessible,4177,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,3,['access'],"['access', 'accessible']"
Security," structure type `dimensions._Parsed` inside `Qobj` which is constructed once, and keeps all details of the parsing so they need not be repeated. Determine `Qobj.type` from this data structure; 3. maintain knowledge of the individual `type` of every subspace in the full Hilbert space (e.g. with a list). There is still a ""global"" `Qobj.type`, but this can now be one in the set `{'bra', 'ket', 'oper', 'scalar', 'super', 'other'}`. `'other'` is for when the individual elements do not all match each other. Individual elements cannot be `'other'`. `'scalar'` is added to operations can keep track of tensor elements which have been contracted, say by a `bra-ket` product - operations will then broadcast scalar up to the correct dimensions on certain operations.; 4. dimension parsing is now sped up by using the operation-specific type knowledge. For example, `bra + bra -> bra`, and `ket.dag() -> bra`. Step 3 is necessary to allow matrix multiplication to work. These lookups could be done with enum values instead of string hashing. # Technical details. As of QuTiP 4.5 (and all previous versions), `Qobj` instantiation is slow and this permeates through to all operations on `Qobj`. Matrix multiplication, scalar multiplication, addition and so forth all need to instantiate new `Qobj` instances, and the time penalty for this is on the order of ~50µs per object. This results in more and more code than needs to bypass `Qobj` for speed, and in some cases (e.g. `qutip.control`) makes the use of `Qobj` prohibitively expensive. This obviously is not ideal, since `Qobj` is our primary data type. The majority of this time loss is due to inferring the type of an object from its dimensions, and on unnecessary copying of data at initialisation. This is exacerbated by operations often instantiating an `out` parameter as `out = Qobj()`, and then doing things like `out.dims = ...`, `out.data = ...`. This causes runtime checks to be done at every stage, so the penalty of initialisation can somet",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1320:1531,hash,hashing,1531,https://qutip.org,https://github.com/qutip/qutip/issues/1320,1,['hash'],['hashing']
Security," the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the underlying use case properly in QuTiP itself. So just to be clear: Do *not* add a `yield` to the existing `mesolve` function in QuTiP! I would strongly recommend keeping the existing interface for `mesolve` and just refactor what is going on in the backend to enable single-time-step propagation with as little overhead as possible. > * I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/nami",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:11490,access,accessible,11490,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['access'],['accessible']
Security,"""><code>a04dfef</code></a> Updated the pypi-publish action</li>; <li><a href=""https://github.com/pypa/wheel/commit/94bb62cb182023ac6586c5510ae9031ea56bd682""><code>94bb62c</code></a> Fixed docs not building due to code style changes</li>; <li><a href=""https://github.com/pypa/wheel/commit/d635664abe560d48723cfc3b73c52ad8c906760a""><code>d635664</code></a> Updated the codecov action to the latest version</li>; <li><a href=""https://github.com/pypa/wheel/commit/fcb94cd51f7dfd40d88dff37415750d9e3638d3b""><code>fcb94cd</code></a> Updated <strong>version</strong> to match the release</li>; <li>Additional commits viewable in <a href=""https://github.com/pypa/wheel/compare/0.37.0...0.38.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=wheel&package-manager=pip&previous-version=0.37.0&new-version=0.38.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2052:5128,secur,security-vulnerabilities,5128,https://qutip.org,https://github.com/qutip/qutip/pull/2052,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"""malloc: Incorrect checksum"" error in qutip.testing qt.run()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:19,checksum,checksum,19,https://qutip.org,https://github.com/qutip/qutip/issues/1120,1,['checksum'],['checksum']
Security,"### Bug Description. SciPy 1.8 deprecated importing functions from many submodules of scipy.sparse. For example, `scipy.sparse.sputils`. QuTiP fastsparse implementation accessing many of these functions because it extends scipy's sparse matrix support. It would be good to avoid as many of these deprecated imports as we can. Note that SciPy 1.8 is the first SciPy to support Python 3.10. ### Code to Reproduce the Bug. ```shell; python -X dev -c ""import qutip""; ```. ### Code Output. ```shell; <frozen importlib._bootstrap>:914: ImportWarning: PyxImporter.find_spec() not found; falling back to find_module(); /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `upcast_char` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `to_native` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isdense` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastsparse.py:5: DeprecationWarning: Please use `isshape` from the `scipy.sparse` namespace, the `scipy.sparse.sputils` namespace is deprecated.; from scipy.sparse.sputils import (upcast, upcast_char, to_native, isdense, isshape,; /home/simon/repos/github/qutip/qutip/fastspar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1823:169,access,accessing,169,https://qutip.org,https://github.com/qutip/qutip/issues/1823,1,['access'],['accessing']
Security,"### Bug Description. When you try to access the nnz attribute of a Qobj in CSR format it gives you an error that the qutip.core.csr.CSR class does not have an nnz attribute. . ### Code to Reproduce the Bug. ```shell; qutip.qeye(3).to(""CSR"").data.nnz; ```. ### Code Output. ```shell; AttributeError Traceback (most recent call last); Cell In[46], line 1; ----> 1 qutip.qeye(3).to(""CSR"").data.nnz. AttributeError: 'qutip.core.data.csr.CSR' object has no attribute 'nnz'; ```. ### Expected Behaviour. 3. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.24.2; Scipy Version: 1.10.0; Cython Version: 0.29.37; Matplotlib Version: 3.7.0; Python Version: 3.10.12; Number of CPUs: 4; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2481:37,access,access,37,https://qutip.org,https://github.com/qutip/qutip/issues/2481,1,['access'],['access']
Security,"### Problem Description. Now that qutip-qip has moved to another package, gates are not available in the main repo. This is inconvenient for examples such as the control optimization ones, where one would need to install the qutip-qip package just to access say the Hadamard or CNOT for instance. ### Proposed Solution. The easiest solution would be just to copy the `gates.py` file from the QIP package into the main repo. Perhaps might confuse imports in qip? Also, I think that file has func defs that refer to 'controls' that might not make sense in this repo. ### Alternate Solutions. Have a file called `operations.py`. Just have a subset of the gates (operations), the most typical named unitaries - sounds less QIP like and would avoid import confusion. I think also `hadamard_transform` could be shortened to `hadamard`, but also include the original name. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389:251,access,access,251,https://qutip.org,https://github.com/qutip/qutip/issues/2389,1,['access'],['access']
Security,"#7246</a>; [radarhere]</p>; </li>; <li>; <p>Added ImageFont.MAX_STRING_LENGTH <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7244"">#7244</a>; [radarhere, hugovk]</p>; </li>; <li>; <p>Fix Windows build with pyproject.toml <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7230"">#7230</a>; [hugovk, nulano, radarhere]</p>; </li>; <li>; <p>Do not close provided file handles with libtiff <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7199"">#7199</a>; [radarhere]</p>; </li>; <li>; <p>Convert to HSV if mode is HSV in getcolor() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7226"">#7226</a>; [radarhere]</p>; </li>; <li>; <p>Added alpha_only argument to getbbox() <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7123"">#7123</a>; [radarhere. hugovk]</p>; </li>; <li>; <p>Prioritise speed in <em>repr_png</em> <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7242"">#7242</a>; [radarhere]</p>; </li>; <li>; <p>Do not use CFFI access by default on PyPy <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7236"">#7236</a>; [radarhere]</p>; </li>; <li>; <p>Limit size even if one dimension is zero in decompression bomb check <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7235"">#7235</a>; [radarhere]</p>; </li>; <li>; <p>Use --config-settings instead of deprecated --global-option <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7171"">#7171</a>; [radarhere]</p>; </li>; <li>; <p>Better C integer definitions <a href=""https://redirect.github.com/python-pillow/Pillow/issues/6645"">#6645</a>; [Yay295, hugovk]</p>; </li>; <li>; <p>Fixed finding dependencies on Cygwin <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7175"">#7175</a>; [radarhere]</p>; </li>; <li>; <p>Changed grabclipboard() to use PNG instead of JPG compression on macOS <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7219"">#7219</a>; [abey79, radarhere]</p>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:10057,access,access,10057,https://qutip.org,https://github.com/qutip/qutip/pull/2237,1,['access'],['access']
Security,"(<a href=""https://redirect.github.com/pallets/jinja/issues/1918"">#1918</a>)</li>; <li><a href=""https://github.com/pallets/jinja/commit/19a55db3b411343309f2faaffaedbb089e841895""><code>19a55db</code></a> Make nested-trans-block exceptions nicer</li>; <li><a href=""https://github.com/pallets/jinja/commit/716795349a41d4983a9a4771f7d883c96ea17be7""><code>7167953</code></a> Merge pull request from GHSA-h5c8-rqwp-cp95</li>; <li><a href=""https://github.com/pallets/jinja/commit/7dd3680e6eea0d77fde024763657aa4d884ddb23""><code>7dd3680</code></a> xmlattr filter disallows keys with spaces</li>; <li>Additional commits viewable in <a href=""https://github.com/pallets/jinja/compare/3.1.2...3.1.3"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:3549,secur,security-vulnerabilities,3549,https://qutip.org,https://github.com/qutip/qutip/pull/2291,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"**Describe the bug**; Tried to access the tutorial for the teleportation protocol (under quantum information processing). **To Reproduce**; [Qutip Tutorials](https://qutip.org/tutorials.html#quantum-information-processing). **Screenshots**; <img width=""418"" alt=""image"" src=""https://user-images.githubusercontent.com/62545147/142829630-60ac71b2-eb2e-41a8-b307-ad83ab0f681a.png"">. <br><br>. ![image](https://user-images.githubusercontent.com/62545147/142829702-1dee6e69-21ca-4dbc-a717-e74f9ef80cda.png)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1721:31,access,access,31,https://qutip.org,https://github.com/qutip/qutip/issues/1721,1,['access'],['access']
Security,"**Description**; Add a lock for creating string coefficient. This allow to use the coefficient inside a parallel loop without issues.; The lock use `filelock` which works across processes, so it's safe to use with parallel coming from outside python.; The lock is per file, so different coefficient can compile in parallel. If there is a conflict, the first process will create and compile the coefficient and the other will use it (raising a hash collision error if not actually the same string.). `filelock` is a new requirement for runtime compilation. **Related issues or PRs**; #1963",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1968:443,hash,hash,443,https://qutip.org,https://github.com/qutip/qutip/pull/1968,1,['hash'],['hash']
Security,"**Description**; Add data layer functions needed to update `steadystate` to use qutip's data layer. Most of `steadystate`'s methods solve the system `L(rho_ss) = 0` using different solver from numpy, scipy, mkl.; This add the `solve` dispatched function to wraps this operation at the data layer level.; For the `CSR` version, it gives access to all methods available in `scipy.sparse.linalg` and our mkl version.; For the `Dense` version, `solve` and `lstsq` from `numpy.linalg` are made available.; Options supported by numpy / scipy for each function are pass through:; `qutip.data.solve(A, B, method, options)` call `scipy.sparse.linalg.method(A, B, **options)`. Other methods of `steadystate` decompose the Liouvillian with either `eigen` or `svd`.; `svd` was added as a dispatched function, but only with specialization for `Dense`. ; I made a sparse version, but `svds` can't readily compute all singular values and does not respond well to splitting the problem into 2 like it was done for sparse eigensolver. . This PR only include the new dispatched functions, not updated `steadystate` using them or `Qobj` interface.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2002:336,access,access,336,https://qutip.org,https://github.com/qutip/qutip/pull/2002,1,['access'],['access']
Security,"**Description**; Allow `Propagator` to take a `Solver` instead of an Hamiltonian, this allow to make propagator work with brmesolve or HEOM. To help with that, I made the system's solver dimensions accessible through `sys_dims` and whether they represent super dims in `evolve_dm`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999:198,access,accessible,198,https://qutip.org,https://github.com/qutip/qutip/pull/1999,1,['access'],['accessible']
Security,"**Description**; I think that with the different data type a `Qobj` can contain, it would be useful to be able get the underlying data (ndarray, csr_matrix, jax.Array, etc.) easily from the `Qobj`. I added the method `Qobj.get(copy)` for that. I allow direct access to the object in case it's needed for auto-differentiation or other advanced features. I am open to a better name than `get` if it's too generic.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2141:259,access,access,259,https://qutip.org,https://github.com/qutip/qutip/pull/2141,1,['access'],['access']
Security,"**Description**; Make changes so enable autodiff with `jax` or `tensorflow`:; - In `QobjEvo`, `Elements`, `Coefficient`: `t` is a python object instead of a double as is coefficient output.; This allows to pass jax traced variable or tensorflow's scalar tensor.; - QobjEvo's elements attribute are accessible and new methods `QobjEvo._getstate`, `QobjEvo._restore`.; Used by jax layer to register `QobjEvo` as a pytree.; - Allow subproject to add their own coefficient.; This allow to make a coefficient that can jit well or can be differentiated. `FuncCoefficient` without type restriction could mostly work, but there are some issues with registering them as a pytree or pickling.; - In CoreOptions, an options for the default data type is added:; When not specified, each `Qobj` creation function keeps its default.; ```; with CoreOptions(default_dtype=""jax""):; obj = qeye(N); assert isinstance(obj.data, JaxArray); ```; - Add `QobjEvo.to_list` to restore the list format of the `QobjEvo`. **Related issues or PRs**; Replace #1816",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015:298,access,accessible,298,https://qutip.org,https://github.com/qutip/qutip/pull/2015,1,['access'],['accessible']
Security,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481:820,access,accessible,820,https://qutip.org,https://github.com/qutip/qutip/pull/1481,1,['access'],['accessible']
Security,"**Description**; The OpenQASM 2.0 standard is described [here](https://github.com/Qiskit/openqasm/blob/master/spec/qasm2.rst). ; The purpose of this PR is to create a full implementation of a OpenQASM parser that reads ; a .qasm circuit into a QubitCircuit. This function lives in qutip/qip/qasm.py. There are a number of ; internal functions that enable this conversion but the only api-exposed function is supposed to be ; `read_qasm` which takes in a .qasm file and returns a fully-formed QubitCircuit object. Currently, the heft of the work is done with processing user-defined gates and adding them to the circuit (as well as measurements, but they need to have #1274 on measurements merged before I can enable that functionality). I still need to add features pertaining to initialization of qubits as well as classical control. . **Related issues or PRs**; There was a related PR #1140 which purportedly worked with OpenQASM 1.0 but this one deviates from it largely while adding additional features as well as the ability to process user-defined gates and a comparatively robust parser. ; **Changelog**; Added read_qasm function to read .qasm files into QubitCircuit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291:388,expose,exposed,388,https://qutip.org,https://github.com/qutip/qutip/pull/1291,1,['expose'],['exposed']
Security,"**Description**; `qzero_like` used on `QobjEvo` would call it (it needed `qevo(0).data`), which is both slow and could break `jax.jit`.; I added `Qobj.dtype` and `QobjEvo.dtype` to be used instead of accessing the data directly.; For `QobjEvo`, the `dtype` property still call the object when the type is unclear (mixed or function based), but it should be faster otherwise.; Tested that the example in qutip/qutip-jax#33 works.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2325:200,access,accessing,200,https://qutip.org,https://github.com/qutip/qutip/pull/2325,1,['access'],['accessing']
Security,"**Is your feature request related to a problem? Please describe.**; I would like to use a [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) as a key for a [``functools.lru_cache``](https://docs.python.org/3/library/functools.html#functools.lru_cache), but since the [``qutip.Qobj``](http://qutip.org/docs/latest/apidoc/classes.html#qobj) is not hashable, I can't do this. **Describe the solution you'd like**; A clear and concise description of what you want to happen. I can implement ``qutip.Qobj.__hash__``, which would hash the dims and the data of the ``qutip.Qobj``. **Describe alternatives you've considered**; A clear and concise description of any alternative solutions or features you've considered. **Additional context**; Add any other context or screenshots about the feature request here.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321:367,hash,hashable,367,https://qutip.org,https://github.com/qutip/qutip/issues/1321,2,['hash'],"['hash', 'hashable']"
Security,"**Is your feature request related to a problem? Please describe.**; Some quantum computing libraries (e.g.: pyGSTi) use the Pauli basis for Liouville space, as opposed to QuTiP's column-stacking basis, making it difficult to interoperate between the two. **Describe the solution you'd like**; A new pair of functions `super_to_superpauli` and `superpauli_to_super` for converting between these representations. (`qutip.visualization.hinton` already includes `super_to_superpauli` as a private function, but this could potentially be exposed to user code.). **Describe alternatives you've considered**; - Extend metadata for `kind='super'` Qobj instances to store Liouville space basis information, including col-stacking and Pauli as special cases and possibly including row-stacking or other common conventions as well.; - Possible names other than `superpauli` for conversion functions, such as `super_to_pauli_basis` or `super_from_pauli_basis`.; - Adding new methods `Qobj.to_superbasis(self, basis: str = 'pauli')` and `@classmethod Qobj.from_superbasis(cls, basis: str = 'pauli')` rather than adding more to the global namespace for the QuTiP package.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1664:533,expose,exposed,533,https://qutip.org,https://github.com/qutip/qutip/issues/1664,1,['expose'],['exposed']
Security,", and we're beyond the stage where ""iterate fast and break things"" is ok for us (though of course it's fine and even good for pre-stable libraries, to avoid getting weighed down). We've got to be concerned with backwards and forwards compatibility; what if a user wants to install and use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:5132,expose,expose,5132,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['expose'],['expose']
Security,"----------------------; >; > Best; > Boxi; >; > From: Nathan Shammah<mailto:notifications@github.com>; > Sent: Tuesday, February 25, 2020 8:36 AM; > To: qutip/qutip<mailto:qutip@noreply.github.com>; > Cc: Boxi Li<mailto:etamin1201@gmail.com>; Author<mailto:; > author@noreply.github.com>; > Subject: Re: [qutip/qutip] More detailed information for GSoC 2020 project; > (#1184); >; > Hi Boxi,; >; > Can you please modify the projects of the Wiki page as you deem best?; > All: we can also think of changing the order of them. It may be that; > project #3 is deemed the most important.; >; > Best wishes,; >; > Nathan; >; > Dr. Nathan Shammah; > Postdoctoral Research Scientist; > Theoretical Quantum Physics Laboratory; > RIKEN, Wako, Saitama, Japan; > www.nathanshammah.com; >; >; >; > On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:; >; > > I have some detail information for the GSoC 2020 project ""Error; > mitigation; > > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > > Wiki page. I post it here so if anyone finds it nice could copy it to the; > > Wiki page.; > >; > > I add some details based on the original description:; > > ------------------------------; > > 1. Error mitigation in QuTiP; > >; > > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > > quantum circuit simulator (which was a GSoC project) providing enhanced; > > features for a pulse-level description of quantum circuits and noise; > > models. A new class Processor and several subclasses are added to; > > represent different platforms for quantum computing. They can transfer a; > > quantum circuit into the corresponding control sequence and simulate the; > > dynamics with QuTiP solvers. Different noise models can be added to; > > qutip.qip.noise to simulate noise in a quantum device.; > >; > > This module is still young and many features can be improved, including; > > new device models, new noise models and integration with the existi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553:4166,access,access,4166,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590741553,1,['access'],['access']
Security,".cy.stochastic"" sources; building extension ""qutip.cy.sparse_utils"" sources; building extension ""qutip.cy.graph_utils"" sources; building extension ""qutip.cy.interpolate"" sources; building extension ""qutip.cy.spmath"" sources; building extension ""qutip.cy.heom"" sources; building extension ""qutip.cy.math"" sources; building extension ""qutip.cy.spconvert"" sources; building extension ""qutip.cy.ptrace"" sources; building extension ""qutip.control.cy_grape"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; copying qutip/version.py -> build/lib.linux-x86_64-3.5/qutip; copying build/src.linux-x86_64-3.5/qutip/__config__.py -> build/lib.linux-x86_64-3.5/qutip; running build_ext; customize UnixCCompiler; customize UnixCCompiler using build_ext; building 'qutip.cy.spmatfuncs' extension; compiling C sources; C compiler: gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC. compile options: '-I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c'; extra options: '-w -ffast-math -O3 -march=native -funroll-loops'; gcc: qutip/cy/src/zspmv.c; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wfor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:4165,secur,security,4165,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['secur'],['security']
Security,"/a> Name as 'options' in lambda_eval and unsafe_eval, but '_dict' in deprecated eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/facf3af93dabcbdd8cdbda8c3b50eefafa3bb04c""><code>facf3af</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2a93aba5cfcf6e241ab4f9392c13e3b74032c061""><code>2a93aba</code></a> Use strncpy to avoid buffer overflow</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a670597bc30e9d489656fc9d807170b8f3d7ca57""><code>a670597</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.2.0...10.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:15466,secur,security-vulnerabilities,15466,https://qutip.org,https://github.com/qutip/qutip/pull/2381,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.31.0&new-version=2.32.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:11876,secur,security,11876,https://qutip.org,https://github.com/qutip/qutip/pull/2434,2,"['Secur', 'secur']","['Security', 'security']"
Security,"1. inside the ""Actions"" tab at the top of the GitHub page, you will only see workflows that are present in the code in the default git branch. `dev.major` isn't QuTiP's default branch, so the workflows won't appear immediately after this is merged, only when the `.github/workflows/build.yml` file also exists in `master`. 2. nothing prevents you from running the workflow on a fork, and there's no way and no reason to prevent this - it's also how I tested it. If you did run it on a fork, you'd be using your own GitHub Actions credits (it doesn't cost us anything because we're an open-source project). Only qutip/qutip knows the secret to publish to PyPI, so no fork can succeed on that. The branch check here serves two purposes: the first is that I needed some ""tickbox"" to let the admin decide at runtime whether they needed to publish the package or just build the wheels for personal download; the second is that we release off release branches, not master, so there needed to be an input to say _which_ branch should be built. 3. it's not 100% necessary, but it's the right thing to do. It decouples the project data from the setup code, which makes it much easier to modify both, and allows other tools to access the data. There are other PEPs in the works as well that will move all this data into `pyproject.toml`, rather than just `setup.cfg`. 4. oh, that's useful. I didn't really know or look into it, because it was only a temporary thing anyway. I might actually retire this PR and make it against `master` instead. It's functionally the same as this one, and most of the diff is the same, except that its `setup.py` is better organised, like Simon suggested.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-801289045:1217,access,access,1217,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-801289045,1,['access'],['access']
Security,"2018.0.3; conda install qutip=4.1.3. Now my programs calling steadystate work again but I also get 1 error related to mkl and steady when running the full test. Denis. De : zhang [mailto:notifications@github.com]; Envoyé : samedi 28 septembre 2019 09:33; À : qutip/qutip <qutip@noreply.github.com>; Cc : VION Denis <denis.vion@cea.fr>; Comment <comment@noreply.github.com>; Objet : Re: [qutip/qutip] Error with conda MKL2019.0 on Windows (#975). This was reported on the help group; https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU. (copying from there); the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well. If using mkl(2019.0), there will MKL read problems, like:. File ""C:\Users\ym24chen\Anaconda3\. x = lu.solve(b, verbose=verbose). File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve. np_x, np_error). OSError: exception: access violation reading 0x0000000000000008. envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve. Env info:. QuTiP Version: 4.3.1. Numpy Version: 1.15.4. Scipy Version: 1.1.0. Cython Version: 0.29.6. Matplotlib Version: 3.0.3. Python Version: 3.7.2. Number of CPUs: 8. BLAS Info: INTEL MKL. OPENMP Installed: False. INTEL MKL Ext: True. Platform Info: Windows (AMD64). Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip. ==============================================================================. How can I rollback it to mkl(2018.0.3)? I just use ""conda install mkl=2018"" but the test still return errors. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/qutip/qutip/issues/975?email_source=notifications&email_token=ADBRKX2X6OKO5WY3XBOXMFLQL4CEJA5CNFSM4HFQJOJ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD72TBSI#issuecomment-536162505>, or mute ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-536288655:1075,access,access,1075,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-536288655,1,['access'],['access']
Security,"2dd4680 and b6dcc28 fix the occasional segfaults I was getting, I believe. The error in `reshape_csr` was probably the randomly appearing one - I assume that for it to cause a segfault, either the output CSR needed to have been allocated on the edge of allocated memory (and then I probably would have seen it in the stack trace with `faulthandler`), or it needed to be called on a sufficiently small matrix that `mem.PyMem_Malloc` allocated into Python stack memory such that the next byte after `out.row_index` pointed into freed Python memory, causing a checksum error on the next `PyMem_Malloc` that hit it, or `PyMem_Free` on a previously created object. I was able to track down where these were coming from by judicious use of `gcc -fsanitize`, although had we been using Cython's `typedmemoryview`, setting `boundscheck=True` would also have caught it. Likewise, the error in `permute.dimensions_csr` would have been caught by setting `cdivision=False`, but I just didn't think to try that. It's probably not worth swapping to memory views just because of this, though - I was able to find it easily enough with `AddressSanitizer`, and memory views have a very non-trivial overhead on initialisation for our use case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-668847474:557,checksum,checksum,557,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-668847474,1,['checksum'],['checksum']
Security,"5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; > * I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. That sounds like the exact right solution! ;-). > I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names. Yeah, I think we're actually all on the same page, irrespective of minor implementation/naming details: Have an object that keeps internal state of `mesolve` and allows to advance step-by-step. Personally, I like the naming of `MeSolver` that @Ericgig wrote out in https://github.com/qutip/qutip/issues/1571#issuecomment-858740451, but `mesolve_prepare_ode`/`OdeState` works too. @Ericgig in https://github.com/qutip/qutip/issues/1571#issuecomment-859791561:. > Most of scipy's solver are not ""thread-safe"", but we will be able to use other solvers in the new version. If you can point me to any thread-safe solver, I'd love to try that out. As already discussed above, if I can replace [`scipy.integrate.ode`](https://github.com/qucontrol/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:12182,expose,expose,12182,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['expose'],['expose']
Security,"6)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-20",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:3257,Authoriz,Authorization,3257,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Authoriz', 'authenticat']","['Authorization', 'authenticate']"
Security,"6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4903,certificate,certificate,4903,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['certificate'],['certificate']
Security,"6a70e06377a09aae8""><code>d94029b</code></a> Release 1.26.16</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/18e92145e9cddbabdf51c98f54202aa37fd5d4c8""><code>18e9214</code></a> Use trusted publishing for PyPI</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d25cf83bbae850a290fe34ed1610ae55c0558b36""><code>d25cf83</code></a> [1.26] Fix invalid test_ssl_failure_midway_through_conn</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/25cca389496b86ee809c21e5b641aeaa74809263""><code>25cca38</code></a> [1.26] Fix test_ssl_object_attributes</li>; <li>Additional commits viewable in <a href=""https://github.com/urllib3/urllib3/compare/1.26.14...1.26.17"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:5204,secur,security-vulnerabilities,5204,https://qutip.org,https://github.com/qutip/qutip/pull/2236,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"758ac02cf15a2b8d5409d50d443550581""><code>c930be0</code></a> Restrict builtins within lambdas for ImageMath.eval</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/75b69dd239a4647032f67a80d9b444228af2b736""><code>75b69dd</code></a> Dont need to pin for GHA</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cd938a7744cb46e2ea525a0c3dd79aa08f98c150""><code>cd938a7</code></a> Autolink CWE numbers with sphinx-issues</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2e9c461ca417083c43145a991bf9e1ec93237d89""><code>2e9c461</code></a> Add CVE IDs</li>; <li>See full diff in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.0...9.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.0&new-version=9.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1835:3686,secur,security-vulnerabilities,3686,https://qutip.org,https://github.com/qutip/qutip/pull/1835,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:2436,secur,security-vulnerabilities,2436,https://qutip.org,https://github.com/qutip/qutip/pull/2085,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:3069,secur,security-vulnerabilities,3069,https://qutip.org,https://github.com/qutip/qutip/pull/1563,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,": ???; ==54133== by 0x3FEFFFFFFFFFFFFF: ???; ```. Obviously I don't have the debugging symbols for MKL, so it's pretty hard to say where exactly it's coming from, but it is at least clearly inside that library. I ran `valgrind` on the `Malloc.py` file above, and get the exact same invalid write, which is promising. So the most likely public Python call is `scipy.linalg.eig`. ## Minimal reproducer. Ok, so now let me cut it down to a minimum `eig.py`:. ```python; import numpy as np; import scipy.linalg. x = np.random.rand(25, 25) + 1j*np.random.rand(25, 25); scipy.linalg.eig(x); ```. Note that this file does not even use `qutip`. You can run `PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py`, and it will occasionally trigger a segfault (it happens to me about 1 in 5 times). It's not always the same message as above, e.g.:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler,tracemalloc eig.py; python(54517,0x10a5505c0) malloc: Incorrect checksum for freed object 0x7fe6cb4150e0: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(54517,0x10a5505c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```. However if I run it within valgrind:; ```; jake@tauros$ valgrind --suppressions=valgrind-python.supp python -Xfaulthandler eig.py; ==54530== Memcheck, a memory error detector; ==54530== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==54530== Using Valgrind-3.17.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info; ==54530== Command: python -Xfaulthandler eig.py; ==54530==; ==54530== Invalid write of size 8; ==54530== at 0x10ABF7A8A: ??? (in /Users/jake/.anaconda3/envs/py38/lib/libmkl_intel_thread.dylib); ==54530== by 0xFFFFFFFF: ???; ==54530== by 0x103124AFF: ???; ==54530== by 0x10312376F: ???; ==54530== by 0x10550F0BF: ???; ==54530== by 0x3FEFFFFFFFFFFFFF: ???; ```; the exact same. ## Further steps. I'm now reasonably convinced that this isn't directly an i",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:6951,checksum,checksum,6951,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['checksum'],['checksum']
Security,"; rhoss = steadystate(L); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\steadystate.py"", line 290, in steadystate; return _steadystate_direct_sparse(A, ss_args); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\steadystate.py"", line 460, in _steadystate_direct_sparse; weighted_matching=ss_args['weighted_matching']); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 393, in mkl_spsolve; x = lu.solve(b, verbose=verbose); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 170, in solve; np_x, np_error); OSError: exception: access violation reading 0x0000000099EC80F8. ======================================================================; ERROR: MKL spsolve : Hermitian (real) solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\Boxi\Miniconda3\envs\qutip-dev-py3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\tests\test_mkl.py"", line 230, in test_mkl_spsolve10; y = mkl_spsolve(A, b, hermitian=1); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 414, in mkl_spsolve; lu.delete(); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 208, in delete; byref(c_int(0)), np_error); OSError: exception: access violation reading 0x00000006FFFFFFEF. ======================================================================; ```; Enviroment:; ```; QuTiP Version: 4.4.0.dev0+73a27971; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.7.3; Number of CPUs: 12; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Users\Boxi\Miniconda3\envs\qutip-dev-py3\lib\site-packages\qutip-4.4.0.dev0+73a27971-py3.7-win-amd64.egg\qutip; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-483000016:2042,access,access,2042,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-483000016,1,['access'],['access']
Security,"<li><a href=""https://github.com/psf/requests/commit/87d63de8739263bbe17034fba2285c79780da7e8""><code>87d63de</code></a> v2.29.0</li>; <li><a href=""https://github.com/psf/requests/commit/51716c4ef390136b0d4b800ec7665dd5503e64fc""><code>51716c4</code></a> enable the warnings plugin (<a href=""https://redirect.github.com/psf/requests/issues/6416"">#6416</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/a7da1ab3498b10ec3a3582244c94b2845f8a8e71""><code>a7da1ab</code></a> try on ubuntu 22.04 (<a href=""https://redirect.github.com/psf/requests/issues/6418"">#6418</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.28.2...v2.31.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:7546,secur,security-vulnerabilities,7546,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"> ; > ; > Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems.; > ; > Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook.; > ; > Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See [qutip/qutip-notebooks#100](https://github.com/qutip/qutip-notebooks/issues/100); > ; > One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in #1092, using [loky](https://loky.readthedocs.io).; > ; > In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence.; > ; > If the freeze is indeed caused by spawn-multiprocessing, the problem _should_ also show up on Windows. Is anyone running Windows able to reproduce this?. Windows doesn't have 'fork' at all, if we want to make parallel_map work under windows, we have to find ways to 'spawn' efficiently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416:466,inject,injected,466,https://qutip.org,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416,1,['inject'],['injected']
Security,"> > Instead of having three different measurement functions - `measurement_ket`, `measurement_density` and `measurement_comp_basis` why not have a single `measure` function that has the same signature as `qutip.measurement.measure`, i.e., measure(op, state) where internally you check if the state is a ket or dm and just apply the operation internally? You could also have a `basis='computational`` keyword if you need to specify the basis. But I do not see why you make that distinction?; > ; > In the GSoC meeting we discussed. There may be some efficiency benefits of specific functions for certain tasks. There could be some advantage of an overarching func too. So maybe both is the best approach.; > ; > As far as it makes sense the measurement stuff should go it the main package. Anything that is specific to circuits could go in qip. We have suggested @sarsid and @hodgestar discuss and come up with a design. I have ""proposed"" a preliminary design that basically works by adding a dispatch function that appropriately calls either of the two types of measurements. The new concern is writing good documentation for the same. I am wondering if both kinds of measurements should both have their own api-exposed function (or only one function which dispatches to both types, as is right now)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730550:1212,expose,exposed,1212,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730550,1,['expose'],['exposed']
Security,"> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1649,attack,attack,1649,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['attack'],['attack']
Security,"> Does anyone know how we would give some kind of deprecation warning when `from qutip import *` is made to say that only core functions will be imported from v5 onwards?. @ajgpitch . I know I'm resurrecting a dead thread, but I have a way of detecting star imports if you can cope with a fairly gross hack. The only internal difference in `from qutip import *` (that I know about) from `import qutip` is that in the former, the import system access the `qutip.__all__` list to see which names it should import. This is intended to be a list of names, so the star import doesn't _have_ to import every single name, i.e. so you can manually set what's public to a module; the star import is designed for use within packages, and the user importing a package like that is strongly recommended against (though in scientific code, I'm 100% sure that's a losing battle). So, what if we make `__all__` _look_ like a list, but a list that injects a warning whenever anyone tries to see what items it has? An example:; ```python; import warnings as _warnings. x = 2. class _all_wrapper(list):; def __iter__(self, *args, **kwargs):; _warnings.warn(""You star-imported!""); return super().__iter__(*args, **kwargs). __all__ = _all_wrapper(['x']); ```; I put that in a package called ""test"".; ```python; >>> from test import x; >>> x; 2; ```; or; ```python; >>> from test import *; /Users/jake/code/tmp/test/__init__.py:7: UserWarning: You star-imported!; _warnings.warn(""You star-imported!""); >>> x; 2; ```. I won't complain if you want to scream after that...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1071#issuecomment-605502925:443,access,access,443,https://qutip.org,https://github.com/qutip/qutip/issues/1071#issuecomment-605502925,2,"['access', 'inject']","['access', 'injects']"
Security,"> It doesn't look robust enough to be user facing as it is, but as a private function, if you get a 3.5x, I'd say we want it. I'll rename it to `_from_csr_blocks` and add some more checks on the ordering and shape of the ops if those aren't too expensive and add some tests. We can expose it publicly if that's ever useful. > Technically, just give a type to `i` and it's all running in c code. Thanks! Adding the type to `i` did make it a little faster.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2128#issuecomment-1477071388:282,expose,expose,282,https://qutip.org,https://github.com/qutip/qutip/pull/2128#issuecomment-1477071388,1,['expose'],['expose']
Security,"> So my guess here is that pyximport keeps appending args like -O2 -fPIC etc to the call to gcc until it breaks. Not sure if it is a qutip thing or Cython. Why theory needs to be validated as a first step. I don't understand the point ""Why theory needs to validated as a first step"" in relation to your hypothesis on the issue. Otherwise, I will take a closer look at the qutip and Cython source codes to see if I can track something down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/966#issuecomment-511643800:179,validat,validated,179,https://qutip.org,https://github.com/qutip/qutip/issues/966#issuecomment-511643800,2,['validat'],['validated']
Security,"> Thanks @ajgpitch for the comments. I agree that there should be the specific functions but I think for simplifying user experience there should be a simple overarching function. E.g, when you plot Wigner functions in QuTiP you can send it kets or dms or operators and it just works.; > ; > Internally, it still calls specific functions to compute the Wigner function based on efficient methods specific to the inputs. But it is just a small convenience to the average user to have a simpler clean overarching function to do the same. I have now made it so that the measure and measurement_statistics function precisely do this. Should we keep either mode (one mode is of the ""observable"" type and the other with the ""projective"" type) also as a api-exposed function? If that is not the case, what would be the correct way to write doc_strings ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389:751,expose,exposed,751,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730389,1,['expose'],['exposed']
Security,"> Then out about removing dict expect? Dictionary support was not tested and supported only for some solver for a long time. It ; > would be strange to have it become the default. Well, this is v5 -- we are trying to make things nicer. The issue with lists of e_ops is that often the e_ops have no sensible ordering. E.g. if the e_ops are, say, the number operator and projectors on to two different bases of interest then `[qutip.num(N), proj1, proj2]` are later accessed as `.expect[0]`, `.expect[1]` and `.expect[2]` which are then unreadable and fairly arbitrary and unmemorable numbers. Having `.expect[""num""]`, `.expect[""proj1""]` and `.expect[""proj2""]` is much more readable and will result in fewer mistakes. I *really* like the dict interface because it gives this readability to results. I'm happy to accept that others may prefer lists, but providing multiple interfaces creates a problem for any code working with results. So it is a bit of tricky question to resolve. > For MC result, it has little impact, dict are a little more annoying to work with compared to list, but it need the expect as ndarray; not list or dict anyway. The MC result classes already have to work around these things in awkward ways, and probably need to be a lot more careful -- e.g. e_ops functions can return strange things like Qobjs or perhaps even stranger things like strings or dicts which can't be averaged over. > There are a some differences for the user. Code using `np.array(result.expect)` or `for expect in result.expect:` will break. Agreed, although unless `result.expect` contains a uniform set of things, this are probably not sensible things to be doing. I have some other ideas but I think they make more of a mess -- e.g. keep `.expect` a list but provide `.expect_d` which is a dict. If one needs to write v4 compatible code one can always pass a list of e_ops and then work with `.expect` a bit carefully (i.e. as a dict). Thoughts?. I have added tests now, so it's just the `.expect` issu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1141326041:464,access,accessed,464,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1141326041,1,['access'],['accessed']
Security,"> This was reported on the help group; > https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU; > ; > (copying from there); > the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well.; > ; > If using mkl(2019.0), there will MKL read problems, like:; > ; > ```; > File ""C:\Users\ym24chen\Anaconda3\; > x = lu.solve(b, verbose=verbose); > File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve; > np_x, np_error); > OSError: exception: access violation reading 0x0000000000000008; > envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve; > ```; > ; > Env info:; > ; > ```; > QuTiP Version: 4.3.1; > Numpy Version: 1.15.4; > Scipy Version: 1.1.0; > Cython Version: 0.29.6; > Matplotlib Version: 3.0.3; > Python Version: 3.7.2; > Number of CPUs: 8; > BLAS Info: INTEL MKL; > OPENMP Installed: False; > INTEL MKL Ext: True; > Platform Info: Windows (AMD64); > Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip; > ==============================================================================; > ```. How can I rollback it to mkl(2018.0.3)? I just use ""conda install mkl=2018"" but the test still return errors.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-536162505:583,access,access,583,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-536162505,1,['access'],['access']
Security,">; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b""><code>9c2c230</code></a> Release 1.26.18 (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3159"">#3159</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36""><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73""><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2246:1857,secur,security-vulnerabilities,1857,https://qutip.org,https://github.com/qutip/qutip/pull/2246,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"></a> fixes <a href=""https://github-redirect.dependabot.com/certifi/python-certifi/issues/198"">#198</a> -- update link in license</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/9d514b4cad79357071c89d7dc4dc1b4df72bb997""><code>9d514b4</code></a> 2022.06.15</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/4151e8849481f396537c34812068e89b32731e52""><code>4151e88</code></a> Add py.typed to MANIFEST.in to package in sdist (<a href=""https://github-redirect.dependabot.com/certifi/python-certifi/issues/196"">#196</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2020.12.05...2022.12.07"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2020.12.5&new-version=2022.12.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2035:2443,secur,security-vulnerabilities,2443,https://qutip.org,https://github.com/qutip/qutip/pull/2035,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"@AGaliciaMartinez The `.elements` are intentionally only accessible from Cython (it's not safe to modify the list from Python because the QobjEvo element lists are meant to be immutable). If you have an idea for a cleaner implementation of this though, maybe just write the idea here and then we can all look at it?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2000#issuecomment-1257255808:57,access,accessible,57,https://qutip.org,https://github.com/qutip/qutip/pull/2000#issuecomment-1257255808,1,['access'],['accessible']
Security,"@Ericgig @hodgestar, Eric and Simon: unless there's anything else that springs to mind, I'll pencil in the 4.6 release for later this week/weekend after this is merged to `master`?. Simon in particular: there's a couple of accessible places in `correlation` that make deprecated `ode2es` calls. That particular functionality of the solvers isn't being removed in 5.0 (though maybe it should - `mesolve` is faster and better in almost every way), so they aren't themselves deprecated. Right now they don't trigger `DeprecationWarning` popups if a user calls them (since the stacklevel is 2). Despite that, should I _also_ wrap them in a warning filter to catch it? I don't really know best practices here. I kept postponing doing the 4.6 release because I'd keep thinking of little bits and bobs that I thought should go in, but at this point Boxi's (@BoxiLi) new pulse scheduler stuff is in and ready, the packaging and distribution methods are updated, and we'll have issued deprecation warnings for the things that we know are being removed. Anything beyond this can start to form the basis of a 4.7 release in a few months' time, with the Floquet changes (they might be waiting on me at the moment) and possibly some new stuff out of GSoC. Possibly that'll also include some deprecation warnings and other bits and bobs to do with packages getting moved out of qutip/qutip, and the changes to how the data-layer is going to work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-814937234:223,access,accessible,223,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-814937234,1,['access'],['accessible']
Security,"@Ericgig Do you have examples of where integrators are used?. Some of the interface choices seem inconsistent -- e.g. `system` is a `QobjEvo` instance (so it has dims) but the states are `data` (which don't have dims, type, etc). Perhaps this makes sense given how things are used, but it would be good to be consistent (especially given that accessing `.data` is very fast and would allow the integrator access to the dims and various high-level operations). Perhaps one solution is to have two levels of interface -- i.e. a low-level one (`get_state`, `set_state`, `integrate`) and a high-level one (`run`) where the signature of `run` changes to `run(initial_qobj, tlist) -> final_qobj` and `run` calls `get_state`, `set_state` and `integrate`?. I will also do a more line by line review shortly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925113187:343,access,accessing,343,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925113187,2,['access'],"['access', 'accessing']"
Security,"@Ericgig I think it's unavoidable to have some sort of global state that tells the C compiler which type to choose, and I think passing it as a compilation option is a simple and straight forward solution. Using macros won't change the need for a compilation flag and will make fetching the correct numpy type trickier. If cython does eventually provide a nicer option, I am happy to use it, but they are still having long discussions about the right direction to take. One thing that would make things nicer would be to expose the compilation options used in, for example, `qutip.utilities` so that compilation becomes `compile_time_env=qutip.utilities.compile_time_env()`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052:521,expose,expose,521,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-1104929052,1,['expose'],['expose']
Security,"@Ericgig Ready for review again. I haven't implemented anything for detecting whether an .e_op returns a number that can be averaged, and I'd like to leave that for a later PR because it's really about a better implementation of the MultiTrajResult and MultiTrajResultAveraged classes and that feels quite separate (even if it tweaks the Result class a bit more). In the `HEOMResult` class in #1869 I override `_store_state`, `_store_final_state`, `_pre_copy` and `_e_op_func` which gives quite a lot of flexibility and might be sufficient to implement `MultiTrajResult` as a sub-class of `Result`. There is also a question of whether there should be a way to supply processors directly -- either in e_ops or a separate lists. Processors are almost identical to e_ops except their values are not stored in `.expect` or `.e_data` and they don't appear in `.e_ops`. I'd like to leave that for a later (maybe never) PR too -- currently I don't have an immediate use case for it, and I don't want to expose the extra feature directly until we do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1144867664:996,expose,expose,996,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1144867664,1,['expose'],['expose']
Security,"@Ericgig When I read the description of this PR I thought you might have implemented something that might be even faster. Instead of having the numpy proxy have dynamic access via `__getattr__` we could do either of the following:. * When the numpy backend is set, actually copy the attributes across to the proxy objects so that they are looked up in `__dict__` in the ordinary way without having to fall back to `__getattr__`.; * Do the same as the above but define the attributes as slots so that the `__dict__` lookup is avoided.; * Or implement `__getattribute__` so that the original `__dict__` lookup is never checked.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2509#issuecomment-2294432618:169,access,access,169,https://qutip.org,https://github.com/qutip/qutip/pull/2509#issuecomment-2294432618,1,['access'],['access']
Security,"@hodgestar. yes my script returns the _current_ cpu frequency....I currently am unaware how to get the maximum on Apple silicon. I'll do some research and test some code to see what I can figure out. @matteoacrossi. > A command that somehow gives info on cpu frequencies is sudo /usr/bin/powermetrics -s cpu_power -n 1 ... Powermetrics does seem to be doing some weird trickery. I'm currently trying to reverse engineer it...I've found a bit of interesting things in the assembly but I'm still not fully sure how it's pulling what it does. > But it requires sudo and is a bit messy to parse the max frequencies. I'm pretty sure powermetrics is accessing some private APIs, which is why it requires `sudo`, which is quite unfortunate. I doesn't seem like powermetrics returns any maximum frequencies, though. It only returns _current_ frequencies.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1009099408:644,access,accessing,644,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1009099408,1,['access'],['accessing']
Security,@jakelishman I would vote for not wrapping them right now. We should stop using `ode2es` from the correlation functions (or continue to use it but no longer expose it to users). The DeprecationWarnings will hopefully help remind us to do that.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-815311257:157,expose,expose,157,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-815311257,1,['expose'],['expose']
Security,"@jakelishman, about the two issues you raised:. 1. Import time related to `import qutip`; I agree with you that in order to make it frictionless for downstream libraries to implement qutip's interface you'd want not to increase their loading times. That would easily be achieved by defining the `__qutip_qobj__` as the entry point of this API. A drawback of this implementation is that it requires the conversion method to be defined on the object itself.; The dispatch-like solution, as was proposed by @hodgestar, is easier to play with, can be defined in a separate file, can be added to a separate package like `netket_qutip_interop` or even using setuptools entry points, though that would add complexity. Again, I'm personally not biased. I would go with option 1 because it's simpler, but I do like the organisational beauty of option 2 (that is used throughout the jax ecosystem). 2. About implicit conversion; - Assume we can distinguish two level of APIs exposed by qutip, similar in spirit to the distinction there is between BLAS and LAPACK. ; - There are low level (BLAS-like) operations on Qobjs such as addition, kron, sum, ecc that are performed repeatedly, can be efficiently implemented only among objects whose data structure is well know. Everything is built on top of those, so they need to be fast with a low overhead. ; - There are higher-level (LAPACK-like) operations on Qobjs, such as `.eigenvalues()` or `eigenstates()`, or `sesolve/mesolve` which are built by combining several low level operations. Their runtime is much higher, and they perform a fair bit of setup/input handling, which comes at the price of some overhead, but which is negligible compared to the runtime cost for most meaningfully large systems. I'd then like to state that; - *I have never suggested to insert a mechanism to insert implicit conversion in the low-level operations.* ; - In this RFC in no way have I proposed to implement implicit conversion anywhere else then were is already done in qu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687:965,expose,exposed,965,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-913661687,1,['expose'],['exposed']
Security,"@jrjohansson Thanks for comments, and I am happy you like it!. I will fix things (also, there is some internal stuff). With respect to plots - still I learnt them how to _make_ plots instead of just _using_ them, so after I make fixes I would appreciate . `complex_array_to_rgb` I am exposing it on purpose, not by an accident (see `__init__.py`).; The rationale is following: in QM one works with complex numbers, be it in wave functions, density matrices or other operators. However, I am not aware of cmap-like functions for complex numbers in Scipy (except for some dedicated packages; see also: [my answer to this StackOverflow question](http://stackoverflow.com/questions/15207255/is-there-any-way-to-use-bivariate-colormaps-in-matplotlib/17113417#17113417)). If you do know a more standard/supported/general/canonical method of mapping complex numbers to colors, I would be happy to use it (instead of `complex_array_to_rgb`). Otherwise, having `complex_array_to_rgb` exposed allows plotting other kinds of things.; For example:. ```; imshow(complex_array_to_rgb(a_density_matrix.full()), interpolation='none'); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/105#issuecomment-41377018:975,expose,exposed,975,https://qutip.org,https://github.com/qutip/qutip/pull/105#issuecomment-41377018,1,['expose'],['exposed']
Security,"@nonhermitian please have a look at this when you have time. it is a quite major restructuring of module imports and globally exposed symbols. With this PR qutip no longer put np, numpy, scipy, plt, cython modules, and numerous symbols from those packages in qutips namespace. So doing. ```; import qutip; dir(qutip); help(qutip); ```. should now only give qutip related information.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/233#issuecomment-55978208:126,expose,exposed,126,https://qutip.org,https://github.com/qutip/qutip/pull/233#issuecomment-55978208,1,['expose'],['exposed']
Security,"@nwlambert Would you mind giving this a try with some bigger realistic HEOM examples you have lying around? Eric's recent improvements to CSR `mul` and `imul` also help HEOM RHS construction since there is a lot of `c * op` happening. The 3.5x improvement from this branch is on top of that. @Ericgig Would you mind giving your thoughts on the Cython interface both from a ""is this good from a technical point of view"" and from a ""do we want this point of view"". I guess we could also name it `_from_csr_blocks` if we don't want to expose it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2128#issuecomment-1476648533:532,expose,expose,532,https://qutip.org,https://github.com/qutip/qutip/pull/2128#issuecomment-1476648533,1,['expose'],['expose']
Security,"@pmenczel I've worked on this quite a bit, mostly focusing on putting initial tests in place, supporting the full set of coefficient functions supported by the other solvers for the rates, shifting the martingale calculations into the integrator and moving the rate shift calculations to Cython to avoid the overhead of Python function calls and loops. @Ericgig I ended up doing some odd things because QobjEvo doesn't seem like natural fit for these rate functions and coefficients are a bit awkward to use directly inside solvers. @pmenczel & @Ericgig Could you take a look at everything again and let me know what you think?. Some of the bigger todo items I have in mind at the moment:. - How do we tell that the negative rate case is really working correctly? I added a test but it doesn't match mesolve well and I'm unhappy with that.; - Can we strengthen any of the existing tests with more assertions?; - Now that the discrete and continuous martingale calculations are mostly handled when collapses happen, we could expose them on the result along with `col_which` and `col_time`. Should we?; - Are the new martingale and rate shift calculations correct?; - The way the shared coefficients are used inside `RateSet` and exposed to `MCSolve` required a lot of careful thinking, did I get the design of that right?; - How do we test whether this works when using `parallel_map`? Being able to run in parallel is a key strength of the Monte Carlo method, so it would be good to have tests that show that that works.; - Can we drop the number of trajectories in the docs to make the doc build faster?; - Using the SciPy integrator is a bit awkward. Is there anything we can replace it with? If not, should we expose more of its options? I exposed the `limit` option because I kept having the integration fail during testing.; - Add tests for the `nm_mcsolve` Cython classes. There is also a bunch of general cleaning up still to do, but lets try get the big picture happy first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1493417354:1024,expose,expose,1024,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1493417354,4,['expose'],"['expose', 'exposed']"
Security,"Add a wrapper for function returning `Qobj` to be treated as `QobjEvo`: `QobjEvoFunc`; Wrapped function have access to all method of `QobjEvo` therefore only one version of the code should be sufficient for time dependant problems using both list format and function.; Any callable is considered a function, allowing for class method etc. The new function `qobjevo_maker` can take any valid time dependant quantum object and make it a `QobjEvo` like object. Added wrapper for function using the old `rhs_with_state` format and using no `args`. . Tests for `QobjEvoFunc` have been added but not for `qobjevo_maker`. Solver are not updated to use it yet. @ajgpitch I added it last minute in stochastic, but did not tried it yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1123:109,access,access,109,https://qutip.org,https://github.com/qutip/qutip/pull/1123,1,['access'],['access']
Security,"After installing qutip via conda (conda install qutip) on Mac 10.15.1 High Sierra, I ran the testing script using:. >> import qutip.testing as qt ; >> qt.run(). I am getting the following error: . Qobj subtraction ... python(4259,0x119a26dc0) malloc: Incorrect checksum for freed object 0x7fdbb05c5910: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(4259,0x119a26dc0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6. Does anyone know what is causing this, how to fix it, or what kinds of problems it might cause later? Thank you!. Sacha",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:261,checksum,checksum,261,https://qutip.org,https://github.com/qutip/qutip/issues/1120,1,['checksum'],['checksum']
Security,"Are you running on OSX? If so, this could be a known bug between multiprocessing and matplotlib for matplotlib 3.2. You can downgrade to 3.1 or upgrade to 3.3 (haven't personally validated 3.3 yet).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664716642:179,validat,validated,179,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664716642,1,['validat'],['validated']
Security,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:871,access,access,871,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,2,['access'],['access']
Security,"As far as I am aware only the Monte Carlo solver supports any kind of parallelization. Many of the other solvers require sequential processing. However, there may be some operations that allow parallel processing. . It is well known for instance that GPUs are widely used for matrix operations. Although Numpy and Sympy do not currently directly support GPU, there are other libraries that could be investigated. Of course not everyone has access to GPU, and potentially the could be CPU parallel possibilities here too. The optimal control modules could certainly be parallelised. In most cases the calculation of the propagators and / or the fidelity gradients are the most costly operations, and can be computed in parallel. So this would be a fairly easy implementation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/438:440,access,access,440,https://qutip.org,https://github.com/qutip/qutip/issues/438,1,['access'],['access']
Security,"As it stands now, all of the steady state solvers treat the solution vector as a dense array. However, often times the steady state density matrix is sparse and therefore the current implementation is not optimal. As of SciPy 0.14, the sparse LU solver can now access the underlying L and U sparse matrices. Therefore, we should be able to do some kind of sparse forward and backward substitution to get the solution vector. In particular, since the RHS vector has only a single nonzero entry, the substitutions are greatly simplified,and we could also see a speed up.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/163:261,access,access,261,https://qutip.org,https://github.com/qutip/qutip/issues/163,1,['access'],['access']
Security,"As per discussion in #474, [this notebook](http://nbviewer.jupyter.org/gist/cgranade/d20fcf3e9907eb26c7fc2f6a8d855918) describes the semantics for a proposed `Qobj.__call__` method that would generalize action on density operators and state vectors by superoperators and unitary operators. This would help make QuTiP more accessible and provide a consistent API for several closely-related group actions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/475:322,access,accessible,322,https://qutip.org,https://github.com/qutip/qutip/issues/475,1,['access'],['accessible']
Security,"Assuming you have Anaconda 2.5 installed (so that you can use the Intel MKL on all platforms), the default number of threads is one. Therefore, you don't get much benefit. To change the number of threads used you can do:. ``` python; import mkl; mkl.set_num_threads(N); ```. or in QuTiP it is easy to set using:. ``` python; n_threads = hardware_info()['cpus']; mkl.set_num_threads(n_threads); ```. One can not access the spare MKL routines directly as there is no support in the scipy.sparse library. However, you can get to all of the functions using ctypes. An example of complex SpMV is here:. https://gist.github.com/nonhermitian/74c3ddbbd006b2f8d306. The only issue with the attached method, is that finding the MKL runtime library is platform dependent (maybe should file an issue with the Anaconda people?). Therefore, it is a bit cumbersome to work with. Moreover, it is not possible to access these routines via Cython as they do not have any of the development stuff available. That may not really be an issue at the end of the day though as one needs quite a large system to get any benefit, and at large Hilbert dimensions, the overhead from calling Python funcs. directly is not an issue. I will be chatting with the [Intel Python](https://software.intel.com/en-us/python-distribution) people tomorrow to give them some suggestions and talk about our project. Hopefully we can hash out some plan to make our life a bit easier, and take advantage of the MKL tools. Their parallel direct sparse solver may also be of interest.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/438#issuecomment-186864518:411,access,access,411,https://qutip.org,https://github.com/qutip/qutip/issues/438#issuecomment-186864518,3,"['access', 'hash']","['access', 'hash']"
Security,"At present the only known working option that works with the runtime compile features (e.g. string type time-dependence) requires Visual Studio 2015 with C++ options. The community edition is fine, which has no monetary cost, but it does come with a considerable install time and disk space (11GB) cost. . According to the [Python wiki on Windows compilers](https://wiki.python.org/moin/WindowsCompilers) These [build tools](https://visualstudio.microsoft.com/downloads/#build-tools-for-visual-studio-2017) are supposed to work, but so far I did not succeed. Not tried in a while, as I don't have very easy access to a Windows machine I can play with. So if someone else wants to give a try, then that would be just great. This issue would ideally be closed after a merging of a PR updating the installation instructions in https://github.com/qutip/qutip-doc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/954:607,access,access,607,https://qutip.org,https://github.com/qutip/qutip/issues/954,1,['access'],['access']
Security,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:1002,access,access,1002,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,1,['access'],['access']
Security,"Bumps [babel](https://github.com/python-babel/babel) from 2.9.0 to 2.9.1.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/releases"">babel's releases</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <h1>Bugfixes</h1>; <ul>; <li>The internal locale-data loading functions now validate the name of the locale file to be loaded and only allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/python-babel/babel/blob/master/CHANGES"">babel's changelog</a>.</em></p>; <blockquote>; <h2>Version 2.9.1</h2>; <p>Bugfixes</p>; <pre><code>; * The internal locale-data loading functions now validate the name of the locale file to be loaded and only; allow files within Babel's data directory. Thank you to Chris Lyne of Tenable, Inc. for discovering the issue!; </code></pre>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-babel/babel/commit/a99fa2474c808b51ebdabea18db871e389751559""><code>a99fa24</code></a> Use 2.9.0's setup.py for 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/60b33e083801109277cb068105251e76d0b7c14e""><code>60b33e0</code></a> Become 2.9.1</li>; <li><a href=""https://github.com/python-babel/babel/commit/412015ef642bfcc0d8ba8f4d05cdbb6aac98d9b3""><code>412015e</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-babel/babel/issues/782"">#782</a> from python-babel/locale-basename</li>; <li><a href=""https://github.com/python-babel/babel/commit/5caf717ceca4bd235552362b4fbff88983c75d8c""><code>5caf717</code></a> Disallow special filenames on Windows</li>; <li><a href=""https://github.com/python-babel/babel/commit/3a700b5b8b53606fd98ef8294a56f9510f7290f8""><code>3a700b5</code></a> Run locale identifiers through <code>o",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:343,validat,validate,343,https://qutip.org,https://github.com/qutip/qutip/pull/1695,2,['validat'],['validate']
Security,"Bumps [certifi](https://github.com/certifi/python-certifi) from 2022.12.7 to 2023.7.22.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/certifi/python-certifi/commit/8fb96ed81f71e7097ed11bc4d9b19afd7ea5c909""><code>8fb96ed</code></a> 2023.07.22</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/afe77220e0eaa722593fc5d294213ff5275d1b40""><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/230"">#230</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b""><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/229"">#229</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b""><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=""https://redirect.github.com/certifi/python-certifi/issues/228"">#228</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0""><code>8b3d7ba</code></a> 2023.05.07</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8""><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=""https://redirect.github.com/certifi/python-certifi/issues/224"">#224</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8""><code>c2fc3b1</code></a> Create a Security Policy (<a href=""https://redirect.github.com/certifi/python-certifi/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01""><code>c211ef4</code></a> Set up permissions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:937,Hash,Hash,937,https://qutip.org,https://github.com/qutip/qutip/pull/2205,1,['Hash'],['Hash']
Security,"Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.2 to 3.1.3.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/releases"">jinja2's releases</a>.</em></p>; <blockquote>; <h2>3.1.3</h2>; <p>This is a fix release for the 3.1.x feature branch.</p>; <ul>; <li>Fix for <a href=""https://github.com/pallets/jinja/security/advisories/GHSA-h5c8-rqwp-cp95"">GHSA-h5c8-rqwp-cp95</a>. You are affected if you are using <code>xmlattr</code> and passing user input as attribute keys.</li>; <li>Changes: <a href=""https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3"">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-3</a></li>; <li>Milestone: <a href=""https://github.com/pallets/jinja/milestone/15?closed=1"">https://github.com/pallets/jinja/milestone/15?closed=1</a></li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/blob/main/CHANGES.rst"">jinja2's changelog</a>.</em></p>; <blockquote>; <h2>Version 3.1.3</h2>; <p>Released 2024-01-10</p>; <ul>; <li>Fix compiler error when checking if required blocks in parent templates are; empty. :pr:<code>1858</code></li>; <li><code>xmlattr</code> filter does not allow keys with spaces. GHSA-h5c8-rqwp-cp95</li>; <li>Make error messages stemming from invalid nesting of <code>{% trans %}</code> blocks; more helpful. :pr:<code>1918</code></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pallets/jinja/commit/d9de4bb215fd1cc8092a410fb834c7c4060b1fc1""><code>d9de4bb</code></a> release version 3.1.3</li>; <li><a href=""https://github.com/pallets/jinja/commit/50124e16561f17f6c1ec85a692f6551418971cdc""><code>50124e1</code></a> skip test pypi</li>; <li><a href=""https://github.com/pallets/jinja/commit/9ea7222ef3f184480be0d0884e30ccfb4172b17b""><code>9ea7222</code></a> use trusted publishing</li>; <li><a href=""https://github.c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:371,secur,security,371,https://qutip.org,https://github.com/qutip/qutip/pull/2291,1,['secur'],['security']
Security,"Bumps [jinja2](https://github.com/pallets/jinja) from 3.1.3 to 3.1.4.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/releases"">jinja2's releases</a>.</em></p>; <blockquote>; <h2>3.1.4</h2>; <p>This is the Jinja 3.1.4 security release, which fixes security issues and bugs but does not otherwise change behavior and should not result in breaking changes.</p>; <p>PyPI: <a href=""https://pypi.org/project/Jinja2/3.1.4/"">https://pypi.org/project/Jinja2/3.1.4/</a>; Changes: <a href=""https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-4"">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-4</a></p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code> greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces. Regardless of any validation done by Jinja, user input should never be used as keys to this filter, or must be separately validated first. GHSA-h75v-3vvj-5mfj</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/blob/main/CHANGES.rst"">jinja2's changelog</a>.</em></p>; <blockquote>; <h2>Version 3.1.4</h2>; <p>Released 2024-05-05</p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code>; greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces.; Regardless of any validation done by Jinja, user input should never be used; as keys to this filter, or must be separately validated first.; :ghsa:<code>h75v-3vvj-5mfj</code></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pallets/jinja/commit/dd4a8b5466d8790540c181590b14db4d4d889d57""><code>dd4a8b5</code></a> release version 3.1.4</li>; <li><a href=""https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb""><",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:278,secur,security,278,https://qutip.org,https://github.com/qutip/qutip/pull/2418,4,"['secur', 'validat']","['security', 'validated', 'validation']"
Security,"Bumps [pillow](https://github.com/python-pillow/Pillow) from 8.2.0 to 8.3.2.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/python-pillow/Pillow/releases"">pillow's releases</a>.</em></p>; <blockquote>; <h2>8.3.2</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.2.html</a></p>; <h2>Security</h2>; <ul>; <li>; <p>CVE-2021-23437 Raise ValueError if color specifier is too long; [hugovk, radarhere]</p>; </li>; <li>; <p>Fix 6-byte OOB read in FliDecode; [wiredfool]</p>; </li>; </ul>; <h2>Python 3.10 wheels</h2>; <ul>; <li>Add support for Python 3.10 <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5569"">#5569</a>, <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5570"">#5570</a>; [hugovk, radarhere]</li>; </ul>; <h2>Fixed regressions</h2>; <ul>; <li>; <p>Ensure TIFF <code>RowsPerStrip</code> is multiple of 8 for JPEG compression <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5588"">#5588</a>; [kmilos, radarhere]</p>; </li>; <li>; <p>Updates for <code>ImagePalette</code> channel order <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5599"">#5599</a>; [radarhere]</p>; </li>; <li>; <p>Hide FriBiDi shim symbols to avoid conflict with real FriBiDi library <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5651"">#5651</a>; [nulano]</p>; </li>; </ul>; <h2>8.3.1</h2>; <p><a href=""https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html"">https://pillow.readthedocs.io/en/stable/releasenotes/8.3.1.html</a></p>; <h2>Changes</h2>; <ul>; <li>Catch OSError when checking if fp is sys.stdout <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5585"">#5585</a> [<a href=""https://github.com/radarhere""><code>@​radarhere</code></a>]</li>; <li>Handle removing orientation from alternate types of EXIF dat",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:419,Secur,Security,419,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['Secur'],['Security']
Security,"Bumps [requests](https://github.com/psf/requests) from 2.28.2 to 2.31.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/releases"">requests's releases</a>.</em></p>; <blockquote>; <h2>v2.31.0</h2>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urll",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:298,Secur,Security,298,https://qutip.org,https://github.com/qutip/qutip/pull/2164,5,"['Authoriz', 'Secur', 'authenticat']","['Authorization', 'Security', 'authenticate']"
Security,"Bumps [requests](https://github.com/psf/requests) from 2.31.0 to 2.32.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/releases"">requests's releases</a>.</em></p>; <blockquote>; <h2>v2.32.0</h2>; <h2>2.32.0 (2024-05-20)</h2>; <h2>🐍 PYCON US 2024 EDITION 🐍</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:334,Secur,Security,334,https://qutip.org,https://github.com/qutip/qutip/pull/2434,3,"['Secur', 'secur']","['Security', 'security']"
Security,"Bumps [urllib3](https://github.com/urllib3/urllib3) from 1.26.14 to 1.26.17.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.17</h2>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (GHSA-v845-jxx5-vc9f)</li>; </ul>; <h2>1.26.16</h2>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins would cause connection pools to be closed while requests are in progress (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2954"">#2954</a>)</li>; </ul>; <h2>1.26.15</h2>; <ul>; <li>Fix socket timeout value when HTTPConnection is reused (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2645"">urllib3/urllib3#2645</a>)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2899"">urllib3/urllib3#2899</a>)</li>; <li>Fix IDNA handling of 'x80' byte (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2901"">urllib3/urllib3#2901</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:580,access,accessing,580,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['access'],['accessing']
Security,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1815:297,access,accessible,297,https://qutip.org,https://github.com/qutip/qutip/issues/1815,1,['access'],['accessible']
Security,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:427,access,access,427,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,1,['access'],['access']
Security,"Currently QuTiP solvers are pure batch jobs. One calls a function, e.g. `mesolve`, which then runs until the state has been propagated to all requested time steps and then the function returns the result. There are a variety of use cases where having access to results as they are calculated can be useful:. * Implementing a progress bar; * Limiting how long a solver runs for; * Stopping a solver early if a steady state or other desired or undesired state is detected.; * Implementing adaptive solvers where parameters are changed depending on the current state. We're currently refactoring the QuTiP solvers for QuTiP v5, so perhaps now is a good time to consider whether this feature will see enough use to be worth the effort. Implementation options:. * The solver could call a `callback function` each time a new result becomes available.; * The solver could `yield` each time a new result becomes available.; * The solver could do something asynchronous (I think this is not worth supporting natively in QuTiP -- either of the others would allow something asynchronous to be implemented by a QuTiP users themselves if they wanted). Probably these are not mutually exclusive. To make porting easier, it should still be possible to call some solve function without a callback or yielding as one can do now. Related issues:. * qucontrol/krotov#93",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:251,access,access,251,https://qutip.org,https://github.com/qutip/qutip/issues/1571,1,['access'],['access']
Security,"Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems. Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook. . Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See https://github.com/qutip/qutip-notebooks/issues/100. One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in https://github.com/qutip/qutip/pull/1092, using [loky](https://loky.readthedocs.io). In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence. If the freeze is indeed caused by spawn-multiprocessing, the problem *should* also show up on Windows. Is anyone running Windows able to reproduce this?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202:456,inject,injected,456,https://qutip.org,https://github.com/qutip/qutip/issues/1202,1,['inject'],['injected']
Security,Do you have any plans to continue working on `qutip/cy/blas_funcs.pyx` or would it be sufficient to access blas through `scipy.linalg.blas.get_blas_funcs`? In that case I think `qutip/cy/blas_funcs.pyx` should be removed and this issue could be closed.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/39#issuecomment-48557119:100,access,access,100,https://qutip.org,https://github.com/qutip/qutip/issues/39#issuecomment-48557119,1,['access'],['access']
Security,ENH: Allow for picking SS solver & access MKL solver internals,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/801:35,access,access,35,https://qutip.org,https://github.com/qutip/qutip/pull/801,1,['access'],['access']
Security,"Early thought:. The `solver.add_feedback` approach doesn't look too bad, but it does seem a bit odd because on does to specify the state parameters when constructing the operators that the define the system -- i.e. H, c_ops, etc. Could we not expose the feedback on the QobjEvo itself so that users can then do:. ```python; H = QobjEvo([op, lambda t, ket: bra @ ket], feedback={""ket"": ""qobj""}); ...; ```. or; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); H.add_feedback(ket=""qobj""); ...; ```. or even; ```python; H = QobjEvo([op, lambda t, ket: bra @ ket]); solver = Solver(...); solver.rhs.add_feedback(ket=""qobj""); ```. Thoughts?. It will get a bit trickier for the feedback that is less easily available from the state, but perhaps solvers can just check whether the ops they're using need the special feedback?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538:243,expose,expose,243,https://qutip.org,https://github.com/qutip/qutip/pull/2210#issuecomment-1663061538,1,['expose'],['expose']
Security,"Example: `binary_search`; If the function is in fact not public, then precede with `_`, e.g. `_binary_search`,; then it does not need a docstring. ; In this specific example, if it is private, then still better to have the opening comment as a docstring.; As for what is private and public, then this is kind of up to you to decide. The rule of thumb that I go by is if you don't expect any user of the library (other than library developers) to access it, then it's private.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-443201886:446,access,access,446,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-443201886,1,['access'],['access']
Security,"Finding the full power spectrum given a time-dependent Hamiltonian usually requires a 2-sided power spectrum. For convenience, it would be useful to be able to access this data in a properly ordered array. Additionally, the majority of literature regarding cavity optomechanics uses a positive e^(i w t) Fourier convention. Passing a simple boolean parameter to this function would allow for the use of scipy's ifft function, scaled by the number of elements.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/821:160,access,access,160,https://qutip.org,https://github.com/qutip/qutip/pull/821,1,['access'],['access']
Security,"Fix a couple of incorrect attribute accesses in `_isherm_csr_full`, which were incorrectly merged up from `master` - they refer to the old SciPy names for the fields, rather than the new `CSR` type names. This wasn't caught at the time because the tests hadn't been merged up yet, so I've written those as well. **Changelog**; - Fix typos in `isherm_csr`; - Add tests of `isherm` for all data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614:36,access,accesses,36,https://qutip.org,https://github.com/qutip/qutip/pull/1614,1,['access'],['accesses']
Security,Fix bad attribute accesses in isherm_csr,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614:18,access,accesses,18,https://qutip.org,https://github.com/qutip/qutip/pull/1614,1,['access'],['accesses']
Security,"Following up, even if an option for drawing matrix elements with a border is added, the thresholded version of Hinton diagrams is much more common, especially in the ML community where it first originated. For example:. - https://matplotlib.org/stable/gallery/specialty_plots/hinton_demo.html; - https://www.mathworks.com/help/deeplearning/ref/plotwb.html (NB: not accessible for red–green color blindness, but thresholded nonetheless); - https://tex.stackexchange.com/questions/155291/generate-a-hinton-diagram-using-pgfplots; - https://mathematica.stackexchange.com/questions/194212/how-to-make-hinton-diagrams. Given those examples, I definitely agree that a border option could be really helpful, but it'd still be nice to be able to generate more traditional Hinton diagrams as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1595#issuecomment-922114051:365,access,accessible,365,https://qutip.org,https://github.com/qutip/qutip/issues/1595#issuecomment-922114051,1,['access'],['accessible']
Security,"For a constant Liouvillian, it seems very reasonable that an eigenseries-based solution would be faster? In the end, that massively reduces the number of matrix-matrix operations to be done. I'm not at all familiar with Matlab, but I wouldn't be shocked if that's what your toolbox there is doing too. Looking at your code, you seem to have 16 cores available. QuTiP at present can't make too much use of multiple cores in `mesolve` or `essolve` (though it can in `correlation`), whereas Matlab may well have some fancy parallelised methods for solving eigenvector problems (if doing that method) - we rely on Scipy for our eigenvector calculations, and I'm pretty sure there's no parallelisation in there. There could also be large timing disparities if you're not being linked to good BLAS/LAPACK/ARPACK implementations in Python space. I'm sure that any distributed version of Matlab will come stuffed with lovely libraries compiled specifically for your processor's instruction set, but Scipy may only be able to find Netlib BLAS or (even worse) Accelerate - if so, they probably won't be making good use of vectorised instructions in your processor, and may not be well-optimised for memory access.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1591#issuecomment-871031472:1196,access,access,1196,https://qutip.org,https://github.com/qutip/qutip/issues/1591#issuecomment-871031472,1,['access'],['access']
Security,"Hello, ; I wish to install QuTiP with the INTEL MKL ext. set to True. I have been having issues with this on various laptops (MacBook Pro M1, as well as a Windows i7). I have set below the information I obtained on the Windows i7 machine following various installation attempts in different conda environments. Sometimes I manage for ‘BLAS Info’ to show INTEL MKL, but the ‘INTEL MKL Ext’ flag remains False. It is unclear to me how I should obtain this result, could anyone help me with this issue?. The underlying reason for wanting to have MKL is that it allowed me in the past (on the same machine but with a different conda environment I no longer have access to) to calculate the steady states of much larger Liouvillians than I am now able to. I am unfortunately unable to reproduce this environment. Below you can find the outcomes of various installation processes, each in a new conda environment:. **Attempt 1a:** ; Conda install mkl; conda install numpy; conda install scipy; conda install conda-forge::qutip; **Results:** ; QuTiP Version: 	5.0.3; Numpy Version: 	2.0.0; Scipy Version: 	1.14.0; Cython Version: 	None; Matplotlib Version: 	None; Python Version: 	3.12.4; Number of CPUs: 	12; BLAS Info: 		Generic; INTEL MKL Ext: 	False; Platform Info: 	Windows (AMD64). **Attempt 1b:**; Conda install mkl; conda install scipy ; conda install conda-forge::qutip; **Results:**; QuTiP Version: 	5.0.3; Numpy Version: 	1.26.4; Scipy Version: 	 1.10.1; Cython Version: 	None; Matplotlib Version: 	None; Python Version: 	3.10.14; Number of CPUs: 	12; BLAS Info: 		INTEL MKL; INTEL MKL Ext: 	False; Platform Info: 	Windows (AMD64). **Attempt 1c:**; Conda install mkl; conda install conda-forge::qutip; **Results**; QuTiP Version: 5.0.3; Numpy Version: 2.0.0; Scipy Version: 1.14.0; Cython Version: None; Matplotlib Version: None; Python Version: 3.12.4; Number of CPUs: 12; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Windows (AMD64). **Attempt 2:** ; Conda install conda-forge::qutip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2496:658,access,access,658,https://qutip.org,https://github.com/qutip/qutip/issues/2496,1,['access'],['access']
Security,"Hey @Ericgig.This is a great feature! I wanted to suggest a slightly different implementation that would work also for non constant cases. We could do checking that the f(t) value is real and that all elements are hermitian. However, the following does not seem to work for me (on a jupyter noteebok with latest dev.major):; ```python; qutip.QobjEvo(qt.sigmax()).elements; ```; are elements only accessible from cython?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2000#issuecomment-1256990030:396,access,accessible,396,https://qutip.org,https://github.com/qutip/qutip/pull/2000#issuecomment-1256990030,1,['access'],['accessible']
Security,"Hi Boxi,. Can you please modify the projects of the Wiki page as you deem best?; All: we can also think of changing the order of them. It may be that; project #3 is deemed the most important. Best wishes,. Nathan. Dr. Nathan Shammah; Postdoctoral Research Scientist; Theoretical Quantum Physics Laboratory; RIKEN, Wako, Saitama, Japan; www.nathanshammah.com. On Sun, Feb 23, 2020 at 5:42 AM Boxi Li <notifications@github.com> wrote:. > I have some detail information for the GSoC 2020 project ""Error mitigation; > in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub; > Wiki page. I post it here so if anyone finds it nice could copy it to the; > Wiki page.; >; > I add some details based on the original description:; > ------------------------------; > 1. Error mitigation in QuTiP; >; > From the QuTiP 4.5 release, the qutip.qip module now contains the noisy; > quantum circuit simulator (which was a GSoC project) providing enhanced; > features for a pulse-level description of quantum circuits and noise; > models. A new class Processor and several subclasses are added to; > represent different platforms for quantum computing. They can transfer a; > quantum circuit into the corresponding control sequence and simulate the; > dynamics with QuTiP solvers. Different noise models can be added to; > qutip.qip.noise to simulate noise in a quantum device.; >; > This module is still young and many features can be improved, including; > new device models, new noise models and integration with the existing; > general framework for quantum circuits (qutip.qip.circuit). There are; > also possible applications such as error mitigation techniques [1-3].; >; > The tutorial notebooks can be found at; > http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM; > conference may help you get an overview (; > https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the; > Github Project page for a collection of related issues and ongoing Pull; > Request",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313:561,access,access,561,https://qutip.org,https://github.com/qutip/qutip/issues/1184#issuecomment-590726313,1,['access'],['access']
Security,"Hi Eric, thanks for your comment. > You should remove the options from `solver_options` instead. It contain every valid options keys, just removing the key from it would makes setting it an error. Unfortunately it is not so easy, since `MCSolver` relies on the option being present in `self.options`: https://github.com/qutip/qutip/blob/48df19ceeb1f07dd60659ccdc2fe61d8df159e78/qutip/solver/mcsolve.py#L474; We could try overriding every method of MCSolver that accesses this option, but that seems easy to break accidentally again with future changes in MCSolver. > Also I would suggest to overwrite the `options` property to add the `completeness_rtol`, etc. to it's docsting. Done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2234#issuecomment-1750005892:462,access,accesses,462,https://qutip.org,https://github.com/qutip/qutip/pull/2234#issuecomment-1750005892,1,['access'],['accesses']
Security,"Hi Paul,; How do you use openblas from python? I found that some blas routines are exposed in numpy but not all of them. Are there some examples of sparse blas calls from python? ; EPD and Anaconda python include MKL so I would like to play a bit with sparse blas routines.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/55#issuecomment-25367184:83,expose,exposed,83,https://qutip.org,https://github.com/qutip/qutip/issues/55#issuecomment-25367184,1,['expose'],['exposed']
Security,"Hi, I report a strange behavior of `propagator` method.; `propagator` with collapse operator fails to dimension validation on composite system. At first, single system works correctly.; ```python; import qutip as qt; ```; ```python; H = qt.sigmaz(); c_ops = [np.sqrt(1) * qt.sigmam()]; tlist = np.linspace(0, 10, 201); rho0 = qt.ket2dm(qt.basis(2, 0)).unit(). # mesolve; rho_f = qt.mesolve(H, rho0, tlist, c_ops=c_ops).states[-1]. # using propagator; F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)). rho_f.overlap(rho_f_prop); ```. The output is; ```; 0.9999092149599982; ```; (I'm not sure why this is not 1. I guess it's limited by the numerical precision.). However, same code on composite system fails.; The differences are only `H`, `c_ops`, and `rho0`, using `qt.tensor(*, qt.qeye(2))`; ```python; H = qt.tensor(qt.sigmaz(), qt.qeye(2)); c_ops = [np.sqrt(1) * qt.tensor(qt.sigmam(), qt.qeye(2))]; tlist = np.linspace(0, 10, 201); rho0 = qt.ket2dm(qt.tensor(qt.basis(2, 0), qt.basis(2, 0))).unit(). # mesolve; rho_f = qt.mesolve(H, rho0, tlist, c_ops=c_ops).states[-1]. # using propagator; F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)). rho_f.overlap(rho_f_prop); ```. ```; ---------------------------------------------------------------------------; ValueError Traceback (most recent call last); <ipython-input-1-551bcc27bcfa> in <module>; 8 ; 9 # using propagator; ---> 10 F = qt.propagator(H, tlist, c_op_list=c_ops)[-1]; 11 rho_f_prop = qt.vector_to_operator(F * qt.operator_to_vector(rho0)); 12 . c:\users\mizuno\research\py38\lib\site-packages\qutip\propagator.py in propagator(H, t, c_op_list, args, options, unitary_mode, parallel, progress_bar, _safe_mode, **kwargs); 239 rho0 = Qobj(sp.csr_matrix(([1], ([row_idx], [col_idx])),; 240 shape=(N, N), dtype=complex)); --> 241 output = mesolve(H, rho0, tlist, c_op_list, [], args, options,; 242 _saf",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585:112,validat,validation,112,https://qutip.org,https://github.com/qutip/qutip/issues/1585,1,['validat'],['validation']
Security,"Hi,. There is a [manual integration](https://github.com/qutip/qutip/blob/master/qutip/floquet.py#L602-L624) using rectangles method in `qutip.floquet` file which sometimes fail. Problem is that the number of timesteps, `nT`, is hardcoded and not accessible to the user. In my case, `nT = 100` does not seem to be enough and the integral is wrong. A quick and dirty fix is to have an extra `nT=100` keyword argument to `floquet_master_equation_rates`, so that user can overload it. Still, it does not seem to be the most efficient way of doing it. I have a quick fix I can contribute which is using `scipy.integrate.simps` instead. This requires keeping an array of values to integrate in memory (which is less memory-efficient) but I could keep `nT=100` and get the correct integral by using this method. I guess the best option would be to use [`scipy.integrate.quad`](https://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.quad.html#scipy.integrate.quad), as it uses an adaptive algorithm. I can contribute a fix for this, just looking for feedback on the best available option :). Thanks!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/767:246,access,accessible,246,https://qutip.org,https://github.com/qutip/qutip/issues/767,1,['access'],['accessible']
Security,"Hi. OK, I see. For implicit SDE solvers there is and advantage in having the rhs function calculating the state at the next time-step. I hesitated doing it like that, because I didn't want to mix up the definition of the stochastic SDE contribution with the deterministic part, which sometime in the future should use qutip's existing framework for time-dependent hamiltonian and collapse operators. Having the stochastic rhs function exposed to all that is a bit unnecessary and makes things more complicated than it needs to be. However, I think I found a reasonable compromise in that I created new _rhs_psi_deterministic and _rhs_rho_deterministic where the current deterministic contributions are calculated. These functions can now be called from a stochastic rhs implementation, like this. ```; dpsi_t = _rhs_psi_deterministic(H, psi_t, t, dt, args); ```. In this way the implementation of a stochastic rhs function is relatively isolated from how the deterministic part is calculated (which right now is trivial, but which could become more complex when time-dependent systems are implemented). However, it also gives all the flexibility needed in the rhs function, and these deterministic rhs functions do not need to be used if it is not suitable in a particular stochastic rhs implementation. . I've added the changes to the rhs behavior to the https://github.com/qutip/qutip/tree/sme-rhs-restructuring and updated the gist with the variant of your notebook. http://nbviewer.ipython.org/6153688. Note that a few other things, like the rhs function signature, had to change in the process. I hope that this updated API will be flexible enough to let you implement implicit solver. Regards rhs implementation and d1,d2 function: Yes, I understand that not all possible rhs schemes might be compatible with the parameterization with d1 and d2 functions, but when it is possible it has the great advantage that the user do not need to worry about how the rhs is implemented, only define the SDE",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/35#issuecomment-22156426:435,expose,exposed,435,https://qutip.org,https://github.com/qutip/qutip/issues/35#issuecomment-22156426,1,['expose'],['exposed']
Security,"I actually have a question about this automatic normalization. Do we really need this to hide the numerical errors? Wouldn't it be better to just expose the error since it will be proportional to `atol` anyway (and if not, something went wrong)? Which group of users will this auto-normalization benefit?. Sometimes an unnormalised state at the ends can also indicate that there is something wrong with the Hamiltonian, e.g., it is not hermitian due to some typos.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2427#issuecomment-2115886018:146,expose,expose,146,https://qutip.org,https://github.com/qutip/qutip/pull/2427#issuecomment-2115886018,1,['expose'],['expose']
Security,"I agree that is is getting a bit unwieldy with all the options to the steadystate function, many of which only have meaning for specific solvers. We should do something about that. I wouldn't favor getting rid of the steadystate function though.. It might break a lot of old code and I think it is nice to have a high-level API that is decoupled from the specific implementation (direct, interative, or something else). Currently steadystate is only dispatching to other functions, and I think that is how it is supposed to be. To solve the problem with diverging options requirements for different solvers I would suggest changing the function signature to. ```; def steadystate(A, c_ops=[], method='direct', **kwargs):; ...; if method == 'direct'; steadystate_direct(A, c_ops, **kwargs); ```. and defer all the specifics about kwargs to specific solvers (including docstrings). That would bring the default values of those options closer to where they are used and reduce duplication. It would also allow us more flexibility in maintaining a backwards compatible api, and future maintainability. It's fine with me to make _steadystate_direct and _steadystate_iterative publicly accessible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/108#issuecomment-41362284:1180,access,accessible,1180,https://qutip.org,https://github.com/qutip/qutip/issues/108#issuecomment-41362284,1,['access'],['accessible']
Security,I agree with @jakelishman's general principle (and maybe we should even move the tests out of the `qutip` package for v5 still) but it's also really important to have an easy way for data layer implementations to run a comprehensive test suite *that is defined by the data layer*. I suspect that if anyone is running tests against master (i.e. what is currently dev.major) they will *want* tests to break if we add new methods. I have a slightly different proposal:. What if we create `qutip.core.data.testing` which is an explicitly exported suite of pytest classes that we intentionally expose for data layers to use? Initially the file can just import test classes from `qutip.tests.core.data`. I would also not use `__all__` in the individual test packages but instead import the test classes explicitly in `qutip.core.data.testing` so that it's 100% clear by reading just that file what the exported interface is (and adding new tests requires explicitly adding them into the exposed package).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874:589,expose,expose,589,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979884874,2,['expose'],"['expose', 'exposed']"
Security,"I also get no error. The user already has access to Q.data, so if this is what they want, then it is already available. I do not see any benefit of changing the display output.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/432#issuecomment-184881219:42,access,access,42,https://qutip.org,https://github.com/qutip/qutip/issues/432#issuecomment-184881219,1,['access'],['access']
Security,"I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:; - I think the function `qutip.mesolve` shouldn't change interface at all for 5.0 - we can change its backend, but I think it'll be a huge hindrance to adoption of 5.0 if we make major breaking changes to effectively our premier function, and I don't see a need to do that. We can add, rather than change, and keep `mesolve` as the ""quick-and-dirty"" method that just works.; - I'm in favour of exposing the different parts of the `mesolve` process as user-accessible, composable chunks. So something like exposing a `mesolve_prepare_ode(H, state, c_ops) -> OdeState` function, where `OdeState` has properties `rhs: QobjEvo`, `state: Qobj`, `time: float` (`sesolve_prepare_ode` and `mcsolve_prepare_ode` would presumably return the same object, or a derived object). Then we'd have an `Integrator` class, which encapsulates an integration step using whatever integrator of choice, so there's one that encapsulates the scipy integrator, one which is a Cython-ised RK4 implementation, etc. Then the low-level user would simply write the `for time in times` loop themselves; at this level, there's nothing fancy that QuTiP adds, so we may as well just expose it directly. I think this architecture is approximately what Eric had in mind too, though I presumably haven't used the same names.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:593,access,accessible,593,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859917462,2,"['access', 'expose']","['accessible', 'expose']"
Security,"I am unable to find the list of states returned by the essolve function. For example:. ```python; import qutip as qt; test = qt.essolve(qt.qeye(2), qt.ket2dm(qt.basis(2, 0)), [1,2,3], c_op_list=[], e_ops=[]); ```; Returns the message; ```; Result object with essolve data.; --------------------------------; states = True, expect = True; num_expect = 0, num_collapse = 0; ```; but if I try to access the states; ```; test.states; >>> []; ```; Should this contain a list of states like mesolve()? It seems a similar issue has been raised before: https://groups.google.com/forum/#!topic/qutip/st3i6STPrQY. Here's my environment details:. ```; QuTiP: Quantum Toolbox in Python; ================================; QuTiP Version: 4.5.0; Numpy Version: 1.16.4; Scipy Version: 1.1.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: C:\Users\chris\Anaconda3\lib\site-packages\qutip; ============================================; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1262:393,access,access,393,https://qutip.org,https://github.com/qutip/qutip/issues/1262,1,['access'],['access']
Security,"I don't think it breaks the functional API at all - in fact it almost makes it stronger, since everything is a ""function"" at every stage. This kind of partial application is classic part of functional programming. Perhaps I don't understand _why_ you want to move to a class-based API? I'd be quite strongly against having the user have to instantiate classes to do very simple parts like creating operators. Certainly in Python programming, I don't think a class-based interface is de facto the right sort to aim for, and procedural is much more ""Pythonic"". For one, it's a lot of unnecessary boilerplate for simple operations. It adds cognitive complexity for the advanced user to decide ""should I use `displace` or `Displacer`?"", and in the strong majority of use-cases, the operator creation is not a computational bottleneck so we'd be adding it for no gain. A lot of operators have no meaningful reason to live in a class, like `sigmax` and so on, so now you have a split between operators that need a class and operators that don't, or you do something really crazy like requiring the user to do; ```python; sx_builder = qutip.operators.SigmaX(); sx = sx_builder.get_operator(); sy_builder = qutip.operators.SigmaY(); sy = sy_builder.get_operator(); sz_builder = qutip.operators.SigmaZ(); sz = sz_builder.get_operator(); ```; when all they wanted was `qutip.sigmax(), qutip.sigmay(), qutip.sigmaz()`. Obviously that example is a bit facetious, but what benefit does the user derive from having to write boilerplate to access simple functionality?. All the operators already share a class in `Qobj`, and things like `displace` and `sigmax` are factory methods of `Qobj`. What shared functionality do the factory methods possess that means they should be classes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332:1525,access,access,1525,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646631332,1,['access'],['access']
Security,"I don't think this is the right way to solve your problem, but we probably should be consistent. `Qobj` is not a container for arbitrary data, and a 1x1 `Qobj` basically should never exist. If I remember correctly, the auto-promotion to `Qobj` is to avoid breaking backwards compatibility, because 4.x doesn't use the `@` syntax at all. We almost certainly should be moving to remove that ""feature"", not add to it - it should never work with compound Hilbert spaces (we should be safe-by-default), and trying to detect special behaviour on 1x1 inputs just leads to weird edge cases and breakages all over the place. You probably want some sort of different mechanism for deciding what types a `Qobj.data` instance can accept in `mul`. At the moment, the test is `isinstance(other, numbers.Number)`, but you want to accept `tensorflow.Variable` if the backing data is TF-like. I think the right solution would be based on having some way for downstream classes to expose what types they can accept, perhaps by a well-defined try/except pattern?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1611#issuecomment-880664515:963,expose,expose,963,https://qutip.org,https://github.com/qutip/qutip/pull/1611#issuecomment-880664515,1,['expose'],['expose']
Security,I get the following error when trying to use the ip_parallel_map:. ```; FileNotFoundError: [Errno 2] No such file or directory: '/home/paul/.ipython/profile_default/security/ipcontroller-client.json'; ```. Everything else works as expected.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276#issuecomment-66558727:165,secur,security,165,https://qutip.org,https://github.com/qutip/qutip/pull/276#issuecomment-66558727,1,['secur'],['security']
Security,"I guess not. But my original motivation was to try to do the mcsolver in; cython. Perhaps the scipy blas calls work just as good in cython. I; already ran into these blas difficulties on the mac. You would think the; calling structure would be uniform by now.; On Aug 10, 2013 6:08 PM, ""Robert Johansson"" notifications@github.com; wrote:. > Now with a8b79f7https://github.com/qutip/qutip/commit/a8b79f7bd2ad58713e9ed7b104e204b155fcdc20it works again on my machine. Is there a big difference in performance; > between accessing the blas stuff through scipy instead of directly from a; > cython module? If not it would be good to let the scipy ppl worry about the; > linking to blas and not have to deal with that in qutip.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/qutip/qutip/issues/39#issuecomment-22436635; > .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/39#issuecomment-22436693:517,access,accessing,517,https://qutip.org,https://github.com/qutip/qutip/issues/39#issuecomment-22436693,1,['access'],['accessing']
Security,"I had a bit more success by switching as much as possible in the setup of the testing environment to pip:; ~~~; conda create -q -n qutip_testing_env -y python=3.7; conda install -n qutip_testing_env -y numpy scipy cython; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/bin/python -m pip install -e .; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/bin/python -m pip install nose ipython; ~~~; I also added a `unittest.skipIf` decorator to `qutip/tests/test_stochastic_se.py:test_smesolve_homodyne_methods`, which is the only test that consistently fails on `master`. With this, the test suite runs through about 50% of the time. The other 50% it crashes with the following:; ~~~; ...; PIQS: Test the warning for diagonal Hamiltonians to use internal solver. ... ok; Propagator: HO ('single mode') ... ok; Propagator: HO ('batch mode') ... ok; Propagator: HO parallel ... ok; Propagator: str td format ... ok; Propagator: func td format ... ok; Propagator: steady state ... python(52709,0x10fc1f5c0) malloc: Incorrect checksum for freed object 0x7fcbf338af10: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(52709,0x10fc1f5c0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ~~~",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-540141378:1063,checksum,checksum,1063,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-540141378,1,['checksum'],['checksum']
Security,I have had a bit of a read around 'incorrect checksum for freed object'. I don't think there's anything wrong with our stuff. This must be an issue with Python on MacOS. I suggest just merge the PRs and hopefully someone will fix the underlying issue at some point,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/944#issuecomment-458656776:45,checksum,checksum,45,https://qutip.org,https://github.com/qutip/qutip/issues/944#issuecomment-458656776,1,['checksum'],['checksum']
Security,"I have just installed qutip using the master branch. When running the tests script test_steadystate.py, I receive a similar violation as above. . ```python; packages\qutip\qutip\steadystate.py:275: in steadystate; return _steadystate_direct_sparse(A, ss_args); packages\qutip\qutip\steadystate.py:442: in _steadystate_direct_sparse; v = mkl_spsolve(L, b, perm=in_perm, verbose=ss_args['verbose'],; packages\qutip\qutip\_mkl\spsolve.py:393: in mkl_spsolve; x = lu.solve(b, verbose=verbose); OSError: exception: access violation reading 0x00000000000000C4; packages\qutip\qutip\_mkl\spsolve.py:167: OSError; ```; Is this a known bug with windows, or is there a fix?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1077#issuecomment-653144199:510,access,access,510,https://qutip.org,https://github.com/qutip/qutip/issues/1077#issuecomment-653144199,1,['access'],['access']
Security,"I have some detail information for the GSoC 2020 project ""Error mitigation in QuTiP"". Unfortunately, I don't have writing access to the QuTiP GitHub Wiki page. I post it here so if anyone finding it nice could copy it to the Wiki page. I add some details based on the original description:. -----------------------------------; ## 1. Error mitigation in QuTiP; From the QuTiP 4.5 release, the qutip.qip module now contains the noisy quantum circuit simulator (which was a GSoC project) providing enhanced features for a pulse-level description of quantum circuits and noise models. A new class `Processor` and several subclasses are added to represent different platforms for quantum computing. They can transfer a quantum circuit into the corresponding control sequence and simulate the dynamics with QuTiP solvers. Different noise models can be added to `qutip.qip.noise` to simulate noise in a quantum device. . This module is still young and many features can be improved, including new device models, new noise models and integration with the existing general framework for quantum circuits (`qutip.qip.circuit`). There are also possible applications such as error mitigation techniques [1-3]. The tutorial notebooks can be found at http://qutip.org/tutorials.html#nisq. A recent presentation on the FOSDEM conference may help you get an overview (https://fosdem.org/2020/schedule/event/quantum_qutip/). See also the Github Project page for a collection of related issues and ongoing Pull Requests. ### Expected outcomes; - More devices defined in the `qutip.qip.device` module. At the moment, we have two models: spin chain and cavity QED. We would like to include some other commonly used planform such as Superconducting system, Ion trap system or silicon system. Each model will need a new set of control hamiltonian and a compiler that find the control pulse of a quantum gate. This part is gonna involve some physics and study of commonly used hardware platforms. The related code can be fo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1184:122,access,access,122,https://qutip.org,https://github.com/qutip/qutip/issues/1184,1,['access'],['access']
Security,"I know this is a very simple change, but could we add a test that it works? E.g. maybe a test in which we subclass `Data` and then create an instance of it and access shape?. And perhaps a test that shows that shape is immutable?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663:160,access,access,160,https://qutip.org,https://github.com/qutip/qutip/pull/1584#issuecomment-865241663,1,['access'],['access']
Security,"I made some benchmarks timing different way to call matmul and contouring the dispatcher is worth it. ; For 10x10, CRS x Dense, it's 4x slowdown for matmul and 2x for expect.; For 1000 x 1000, it's 10% and 5%, reasonable but still felt. The easiest would be having `matmul(self, Dense in, Dense out)` method for Data layer. There is no need for all pairs of layer types to be supported by this, states in scipy's solver are always Dense. But it's a little late for that. Not having that, since 99% of users will use our data type and we only really need it for `matmul` and `expect`, we can so a manual disptach for just those. The way I did it was quite ugly, I wanted to limit the calls to `isinstance` which are not proper cython so did it once moving the type. I did not think of `type`...; `type(op) is CSR` is 15x faster than `isinstance(op, CSR)` and about as fast as comparing for enums, making have `layer_type` useless. Renamed it to `matmul_data_dense_dense` in matmul.pyx.; Still short of a c dispatcher for function pointers, but I am not attacking this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1407#issuecomment-747703407:1052,attack,attacking,1052,https://qutip.org,https://github.com/qutip/qutip/pull/1407#issuecomment-747703407,1,['attack'],['attacking']
Security,"I re-launched the Travis tests on all platforms. They pass for all besides Mac OS (similar error as for other PR). With `python setup.py install`, with `install` instead of `develop`, things seem to work. What it is unclear to me is why it reads that the QuTiP Version is `4.4.0.dev0+1a639d7a`, when I could not find this hash in here (or maybe I am confused). Now, after some tries with install and develop, I am on that version of qutip-dev. . To begin with, I am running the contents of the [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). Some comments below are relevant to the PR of the notebooks, https://github.com/qutip/qutip-notebooks/pull/71. * `development-qobjevo.ipynb`: Runs fine. ; * `development-qobjevo-adv.ipynb`: Runs fine. ; * `development-qobjevo-timing.ipynb`: Runs fine. * The notebook [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb) could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:322,hash,hash,322,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['hash'],['hash']
Security,"I report local tests failing on my MacOS 10.13.6 by running qutip.testing.run(). Tests fail for python 3.7 and 3.6 environments, if QuTiP 4.4. is installed in develop mode (openmp = True). ; Tests fail also for QuTiP 4.3.1 installed with conda. . ### py36; Broken test for python 3.6 with: (1) QuTiP 4.4-dev, with openmp =True and (2) conda install qutip, QuTiP 4.3.1: ; Error Message below: ; ``` ; Metrics: Trace dist. & Fidelity mixed/pure inequality ... ok ; Metrics: Check avg gate fidelities for random ... ; python(35852,0x7fff9757f380) malloc: *** error for object 0x7fe189168a10: incorrect checksum for freed object - object was probably modified after being freed. *** ; set a breakpoint in malloc_error_break to debug ; Abort trap: 6 ---------------------------------------------- ; ``` . Building the dev environment: ; ``` conda create --name qutip-dev-44-py36 ; source activate qutip-dev-44-py36 ; conda install python=3.6 cython numpy scipy nose jupyter matplotlib; python setup.py develop --with-openmp; ``` . ### py37; Broken test for python 3.7 with: (1) QuTiP 4.4-dev, with openmp =True and (2) conda install qutip, QuTiP 4.3.1. Error Message below: ; ``` ; qutip.tests.test_qobj.test_expect_exception ... ok Qobj data ... ok Qobj type ... ok Qobj Hermicity ... ok ; Qobj unitarity ... ok ; Qobj shape ... ok ; Qobj: multiplication w/ non-square qobj.dims ... ok ; Qobj addition ... ok ; Qobj subtraction ... ok ; Qobj multiplication ... ok ; Qobj division ... ok ; Qobj power ... ; python(35379,0x7fff9757f380) malloc: *** error for object 0x7fbf1089fa90: incorrect checksum for freed object - object was probably modified after being freed. *** ; set a breakpoint in malloc_error_break to debug ; Abort trap: 6 ; ``` . Building the dev environment: ; ``` conda create --name qutip-dev-44-py37 ; source activate qutip-dev-44-py37 ; conda install python=3.7 cython numpy scipy nose jupyter matplotlib; python setup.py develop --with-openmp```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-473772867:599,checksum,checksum,599,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-473772867,2,['checksum'],['checksum']
Security,"I think it should be possible to do this within the pytest framework without touching the package `setup.py` or `MANIFEST`. [`pytest.fixture`](https://docs.pytest.org/en/stable/fixture.html#sharing-test-data) seems a natural choice for loading data. For file accessibility, [this](https://stackoverflow.com/questions/46019170/how-do-you-properly-integrate-unit-tests-for-file-parsing-with-pytest) might help. Porbably @jakelishman knows more about the natural way of doing this with pytest?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-655970508:259,access,accessibility,259,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-655970508,1,['access'],['accessibility']
Security,"I think it would be reasonable to change ""from numpy import *"" to ""import numpy as np"" in the generated cython code. Then if a user wants a numpy function that is overloaded by the new definitions that you've added, or wants a function that is not included in that list, it can be accessed by explicly including the namespace, like 'np.exp(...)'",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/251#issuecomment-61604751:281,access,accessed,281,https://qutip.org,https://github.com/qutip/qutip/pull/251#issuecomment-61604751,1,['access'],['accessed']
Security,"I think we can get rid of it for the moment. It might be useful to call these via Cython at some point, but for now this can be removed. On Jul 10, 2014, at 10:55 AM, Robert Johansson notifications@github.com wrote:. > Do you have any plans to continue working on qutip/cy/blas_funcs.pyx or would it be sufficient to access blas through scipy.linalg.blas.get_blas_funcs? In that case I think qutip/cy/blas_funcs.pyx should be removed and this issue could be closed.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/39#issuecomment-48557254:317,access,access,317,https://qutip.org,https://github.com/qutip/qutip/issues/39#issuecomment-48557254,1,['access'],['access']
Security,"I was trying to figure out why tests on #943 and #942 were failing for MacOS and could pin-point it down to the `qutip.superop_reps.to_kraus` function. The test `tests.test_superop_reps.test_ChoiKrausChoi` leads to the same malloc error with the message,; ```; python(2234,0x7fff95aef380) malloc: *** error for object 0x7fde6f2f0ff0: incorrect checksum for freed object - object was probably modified after being freed.; ```; Investigating more.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/944:344,checksum,checksum,344,https://qutip.org,https://github.com/qutip/qutip/issues/944,1,['checksum'],['checksum']
Security,"I would like to try to build the solution for this. **Task 1:** For chrome, the error seems to be due to the CORS (Cross-origin Resource Sharing) policy of google chrome.; `Access to XMLHttpRequest at 'file:///C:/Users/Sid/Desktop/qutip-doc/QuTiP_tree_plot/d3_data/qutip.json' from origin 'null' has been blocked by CORS policy: Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.`. To fix this, I created a local server (on port 8080) from the `../qutip-doc/QuTiP_tree_plot` folder and then ran the URL `http://localhost:8082/qutip_org.html` on chrome.; Egde doesn't seemed to have any problem in running `qutip-doc.html`. **Task 2:** ; Clarification - We would right a new script to generate `qutip.json` from `apidoc/functions.rst`, just like `QuTiP_tree_plot/qutip-structure.py`. Am I right?. **Task 4:** ; Can you please elaborate on task 4 as to link to which API docs. **Task 5:**; The script written in Task 2 can be made to run for `classes.rst` and a json file would be created which would be used to generate a tree, right?; Where would we put it in the docs? guide-overview?. PS: I'm sorry if I've asked or stated an obvious thing, I am new to this community and am still trying to fimiliarize myself. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588:173,Access,Access,173,https://qutip.org,https://github.com/qutip/qutip/issues/1525#issuecomment-469209588,1,['Access'],['Access']
Security,"I'm glad that it's useful! We wanted this work to be accessible, so I thought it made sense to contribute the definition. If the current design is acceptable, then I'll go on and finish the test cases and add a corresponding PR to qutip/qutip-notebooks demonstrating the new function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/357#issuecomment-125965058:53,access,accessible,53,https://qutip.org,https://github.com/qutip/qutip/pull/357#issuecomment-125965058,1,['access'],['accessible']
Security,"I'm not at all a fan of making tests part of the public interface like this. It's something that we make absolutely no stability guarantees about, and coupling downstream packages to our own tests just sounds like a recipe for disaster - if we find a bug in main QuTiP and need to change tests or add methods (which we should be able to do completely freely), we're going to inject a ton of extra code into downstream packages, and may completely break them. To be honest, I'm not even wild about how we distribute our tests as part of the module code at all, but that's what we've got. It _could_ be ok if you import the test case base, and redefine your tests from there. We still don't make any stability guarantees about that, but it's conceivable that we could (though of course, the problem of ""what if we need to add methods"" persists). That would also solve your problems about saying you can't import individual tests. You can import individual tests anyway, you just need to rename them to things like `_TestAdd`, or use one of the pytest hooks in your local `conftest.py` to reject tests whose `__module__` isn't your local module, or do one of the other methods of filtering.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-976540355:375,inject,inject,375,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-976540355,1,['inject'],['inject']
Security,"I'm not entirely sure what's being asked of us here, because the code numba supports is to do with the numba developers, not us? numba is a compiler for Python code accessing NumPy arrays in ways other than internal NumPy compiled C code. The benefit to QuTiP users even if numba _were_ to add support would be minor, because a) we use custom sparse matrices which numba couldn't currently target to a GPU efficiently and b) almost all of our heavy code is compiled C, which is already as the same target as standard numba. We aren't going to convert (e.g.) `Qobj` to a numba `jitclass` because our entire library is written in Cython, and besides, the speed-ups come from the internal `Qobj.data` attributes, which we are already low-level. GPU-based sparse matrix routines are an interesting side-note, but will require very specialised data structures and accesses. This is more possible in the new data-layer added in 5.0, but still would require a huge amount of work. We're not likely to achieve this by using numba, but instead to use specialised GPU-enabled data structures like cupy instead, since that fits into our data model better.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/900#issuecomment-809667000:165,access,accessing,165,https://qutip.org,https://github.com/qutip/qutip/issues/900#issuecomment-809667000,2,['access'],"['accesses', 'accessing']"
Security,"I'm not sure solution 3 will work as easily as this - if the user's `scipy.linalg.eigh` is broken, then calling it doesn't help, surely?. Also, I can reproduce the segfaults with both `np.ascontiguousarray` and `np.asfortranarray` on my machine, but it is a size of 64 that seems to reliably do me in. Script to reproduce:; ```python; import numpy as np; from scipy.linalg import eigh. def random_hermitian(n):; h = np.random.rand(n, n) + 1j*np.random.rand(n, n); return h + np.conj(h.T). for n in range(1, 101):; print(n); for _ in [None]*100:; x = eigh(np.ascontiguousarray(random_hermitian(n))); ```; and this segfaults on `n=64` reliably with the `pip` version of `scipy` (linked against OpenBLAS 0.3.7), and always succeeds with the `conda` version (linked against MKL 2019.4). Both `scipy` versions are 1.4.1 here. I did the most bare-bones install to test this:; ```; $ conda create -n blastest python; $ conda activate blastest; $ pip install scipy; $ python blas.py; ```; where `blas.py` is the repro script above. Doing this, `pip` pulls me OpenBLAS 0.3.7. Looking at the source of OpenBLAS, the whole heavy-lifting implementation is in Fortran - there's the classic LAPACKe C wrapper around the core Fortran LAPACK, but everything eventually goes down to the Fortran. If it helps, it's an out-of-bounds access error that causes the segfault for me, and the address it's trying to access doesn't look like dummy nonsense (`0x101b95010`). I'm pretty sure it's a nasty Mac/OpenBLAS bug. If the problem is particularly in `zheevr` we could swap the call to `eig` (instead of `eigh`) for Mac only, which should hopefully sidestep the problem, because it'll call `zgeev` instead. All recent pip installs of `scipy` link against OpenBLAS, so there's not much that can sidestep it there, other than mandating `conda` usage, because you can't relink `scipy` to decent libraries without compiling from source.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628780955:1314,access,access,1314,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628780955,2,['access'],['access']
Security,"I'm quite new to the package, so please forgive me if this is obvious. Haven't been able to find anything in docs or previous issues. I'm looking to get images of quantum circuits saved. My quirks of setup means that I'm not using notebooks. Therefore the normal `qc.png` command isn't compatible. . In `qutip/qip/circuit.py`, the properties `png()` and `svg()` directly display in a notebook the compiled LaTeX figure of the cicuit. I would rather be able to access the compiled image directly. I've been looking around the codebase to see if there is native functionality for this. We can get Bloch spheres using the kind of workflow I'm imagining:. ```; from qutip import * . b = Bloch(). b.show(). bb = b.fig; bb.savefig('Bloch.png'); bb.savefig('Bloch.pdf'); ```. Does anyone have any suggestions? . I think that `_latex_compile()` returns a bytes object, which can be interpreted as an image, but I haven't had a chance to play around with it yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/913:460,access,access,460,https://qutip.org,https://github.com/qutip/qutip/issues/913,1,['access'],['access']
Security,"Idea: We could perhaps pass one extra argument called, e.g., ""context"" or ""ctxt"", that allows access to various strange things like the state. The ""ctxt"" object could then have properties or methods that returned the state upon request.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/947#issuecomment-1142171064:94,access,access,94,https://qutip.org,https://github.com/qutip/qutip/issues/947#issuecomment-1142171064,1,['access'],['access']
Security,"If we don't do `del numpy` in qutip's `__init__.py`, then doing this works:. ```; from import qutip *; numpy.func(...); ```. because numpy was imported but not deleted before the end of qutips init file, and it will be exported form qutip as a global symbol in qutips namespace (which is the callers global name space if called as above). However, this is not a desired behaviour of a module to do like this: importing qutip shouldn't impose that numpy is imported in any particular way (even though qutip uses numpy internally). For example, if a user prefer to import numpy as `np`, then it is pointless that qutip exposes numpy as `numpy` as well. It because even weirder when an import pattern like `import qutip as q` is used, because as it is now then numpy is available through `q.numpy`, which is unnecessary and causes problem with for example nose unit testing of qutip module (because it finds numpy and run all numpy tests as well) and also with module autocompletion in for example spyder and ipython. For these and many other similar reasons, it is neatest if qutip only exports its own symbols, and if a users requires any symbols of other packages they should be explicitly imported from those packages. I hope this explains why I want to eliminate qutips currently excessive namespace populating.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/233#issuecomment-56176673:617,expose,exposes,617,https://qutip.org,https://github.com/qutip/qutip/pull/233#issuecomment-56176673,1,['expose'],['exposes']
Security,"In development version 4.4: . - For Python 3.6, when running `qutip.testing.run()`. ```; uTiP Version: 4.4.0.dev0+0bf3e05e; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.6.8; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: True; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); ```; I obtain an error at ; ```; Propagator: steady state ... Segmentation fault: 11; ```. - For Python 3.7 with ; ```; QuTiP Version: 4.4.0.dev0+0bf3e05e; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: True; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/nathanshammah/miniconda3/envs/py37/lib/python3.7/site-packages/qutip-4.4.0.dev0+0bf3e05e-py3.7-macosx-10.7-x86_64.egg/qutip; ```; the error occurs at . ```; Metrics: Check avg gate fidelities for random ... python(42424,0x7fffa34a8380) malloc: *** error for object 0x7fc74f258880: incorrect checksum for freed object - object was probably modified after being freed.; *** set a breakpoint in malloc_error_break to debug; Abort trap: 6; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-482116179:1071,checksum,checksum,1071,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-482116179,1,['checksum'],['checksum']
Security,"Is there any performance reason why we should not compile the extensions using C++ ?. We are having issues with the conda forge packages:; conda-forge/qutip-feedstock#16; I am sure than this problem would not occur if we were compiling using MS compilers.; We are receiving lots of support requests on the Google group for help installing on Windows; We do not have a solution for python>=3.5 on Windows. I posted a question on the Cython help group asking about accessing complex functions on Windows. One suggestion was to try C++, importing functions from `complex` rather than `complex.h`. I made a small test project that imported `conj` and it compiled using MS compilers and worked on Windows 10 with both Python 2.7 and 3.5. We only have one small C source file. I guess it could be rewritten in C++ quite easily.; I can do further tests to check performance if we consider C++ compilation is an option for qutip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/647:463,access,accessing,463,https://qutip.org,https://github.com/qutip/qutip/issues/647,1,['access'],['accessing']
Security,Issue with setting phase_option #400 resolved by using property setter rather than set_phase_option; Took the opportunity to replace all get_ and set_ functions with property accessors.; Full list of function and attrib name changes provided in 'qtrl-v3_2-release_notes.txt'; These should only affect customised sub-classes. Deprecation warnings given.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/397#issuecomment-159366015:175,access,accessors,175,https://qutip.org,https://github.com/qutip/qutip/pull/397#issuecomment-159366015,1,['access'],['accessors']
Security,"It *should* also affect Windows, even with Python 3.7: Windows has always (I think) used ""spawn"" for multiprocessing. Thus, if there's a workaround in place that makes `mcsolve` work on Windows, it should also be applicable to macOS/Python 3.8. Alas, I don't have easy access to a Windows system, so I haven't tested this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-598855427:269,access,access,269,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-598855427,1,['access'],['access']
Security,"It is possible that someone having trouble compiling qutip extensions may wish to set CFLAGS, CPATH, C_INCLUDE_PATH. Currently these would not be used in the qutip installation / building or extensions generally. I had a scenario where I was trying to install qutip on machines which I did not have sudo access on. They did not have cython or pydev. So I managed to install pydev and cython into the home folder. For the latter I had to set the C_INCLUDE_PATH to the local install of the C headers, or maybe I used the -I switch with CFLAGS. This did not work for qutip, so I made some changes to the `setup.py` files, and also the `pyximport` in `__init__.py`. However, none of it worked due to disk space issues in the end. Clearly, if there had been enough disk space, then Anaconda would have been a much better solution. So, the question are: ; 1. Is there any value in making a PR from the changes I made (in a local copy) to use the CFLAGS, CPATH, C_INCLUDE_PATH env vars if they are set?. 2. If so should the qutip pyximport extend or prepend the CFLAGS or should it not set CFLAGS at all if the user has set values?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/571:304,access,access,304,https://qutip.org,https://github.com/qutip/qutip/issues/571,1,['access'],['access']
Security,"It looks like the loop on line 64 https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/qobjevo_codegen.py#L64 completes on the first try, but doesn't manage to import any objects, so the import_list remains empty. Could you use pdb to access local variables?. ---; P.S. You can use Markdown to format the traceback in a user-friendly way:; e.g. ; \`\`\`python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; \`\`\`. Renders to:; ```python-traceback; /opt/anaconda3/envs/qutip-env/lib/python3.8/site-packages/qutip/qobjevo_codegen.py in _import_str(code, basefilename, obj_name, cythonfile); 80 if not import_list:; 81 raise Exception(""Could not convert string to importable function, ""; ---> 82 ""tmpfile:"" + try_file + ext) from e; 83 coeff_obj = import_list[0]; 84 return coeff_obj, try_file + ext; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108:265,access,access,265,https://qutip.org,https://github.com/qutip/qutip/issues/1196#issuecomment-595050108,1,['access'],['access']
Security,"It seems like this routine is geared toward a specific problem, rather than a general input. Regardless, I think a notebook explaining this method is required, including better examples on the usage. This can be added to the documentation once it is converted to IPython notebooks. A few things I noticed are given below:; - The output is not a list, but a Result class object.; - Why is it not possible to directly calculate expectation values other than the coupling term?; - Why are the default input values what they are?; - The print statement at the end should be optional depending on the setting of the debugger.; - The call to Odeoptions in mesolve needs to be user accessible.; - tlist should not be the last input argument and should probably not be a kwarg.; - The call to eigenstates should also have an optional argument to call the sparse eigenstates solver if needed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103712771:675,access,accessible,675,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103712771,1,['access'],['accessible']
Security,"It's interesting to see how my style of writing tests changes and matures. It's being particularly influenced at the moment, because on Qiskit we use a fairly thin wrapper around raw `unittest`, rather than `pytest`, so I'm being exposed to writing in other styles as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614#issuecomment-882516763:230,expose,exposed,230,https://qutip.org,https://github.com/qutip/qutip/pull/1614#issuecomment-882516763,1,['expose'],['exposed']
Security,Iterable access to solver results and possibility of feedback to solvers,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571:9,access,access,9,https://qutip.org,https://github.com/qutip/qutip/issues/1571,1,['access'],['access']
Security,"Just found what may have been the cause of the segfault. Incorrect indexing in `data.csr.Accumulator.gather` led to uninitialised memory being exposed if it encountered a zero value which in the current PR would only have been exposed by `Qobj.ptrace` on CSR to CSR, but by no fault of its own. This PR is ready for review - these last couple of patches I've just been sending could equally have gone to the next PR I'm preparing which is waiting for this one to be merged so I can rebase it on top of the new `dev.major`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338#issuecomment-678399544:143,expose,exposed,143,https://qutip.org,https://github.com/qutip/qutip/pull/1338#issuecomment-678399544,2,['expose'],['exposed']
Security,"My computer is a Mac, by the way - I don't have direct access to a Windows machine at the moment.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1194#issuecomment-605290310:55,access,access,55,https://qutip.org,https://github.com/qutip/qutip/pull/1194#issuecomment-605290310,1,['access'],['access']
Security,"New schemes for the options. All options's default value can be set and seen in qutip.settings:; ```; >>> from qutip import settings; >>> settings.solver[""atol""] = 1e-10; >>> settings.core[""auto_tidyup""] = False; >>> settings.solver.mcsolve[""norm_tol""] = 1e-4; >>> settings.save(); >>> print(qutip.settings); qutip.settings.install:; debug : False; log_handler : 'default'; colorblind_safe : False; tmproot : '/home/eric/.qutip/coeffs'; mkl_lib : None; has_mkl : False; ipython : True; _logger : <Logger qutip.installsettings (WARNING)>; eigh_unsafe : False. qutip.settings.core:; auto_tidyup : False; auto_tidyup_dims : True; auto_herm : True; atol : 1e-12; auto_tidyup_atol : 1e-12; ...; ```. The main changes are; - `settings` is an object in `qutip/settings.py`.; - Actual options are accessed as dictionary values instead of attributes.; - `settings`'s values are read from qutiprc at import.; - Easy saving of settings; - `reset` function as described in documentation but not available yet.; - solver `Options` renamed and split, some options removed (`rhs_with_state`, ...). @jakelishman, I commented out most of the openmp stuff, I expect you to pass behind me and clean when you re-implement it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1337:789,access,accessed,789,https://qutip.org,https://github.com/qutip/qutip/pull/1337,1,['access'],['accessed']
Security,"Not quite all links we refer to have valid SSL certificates, so we leave those ones be. **Changelog**; Convert http links to https",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1555:47,certificate,certificates,47,https://qutip.org,https://github.com/qutip/qutip/pull/1555,1,['certificate'],['certificates']
Security,Note that 5.0 is already a lot better about what it exposes via `from qutip import *`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1071#issuecomment-1427874263:52,expose,exposes,52,https://qutip.org,https://github.com/qutip/qutip/issues/1071#issuecomment-1427874263,1,['expose'],['exposes']
Security,"Nothing too clever here. As in cached flag cleared whenever unitarity threatened; The check could probably be more efficient, but as not expected to be used intensively, then this would seem acceptable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/817#issuecomment-364163769:70,threat,threatened,70,https://qutip.org,https://github.com/qutip/qutip/pull/817#issuecomment-364163769,1,['threat'],['threatened']
Security,Now with a8b79f7bd2ad58713e9ed7b104e204b155fcdc20 it works again on my machine. Is there a big difference in performance between accessing the blas stuff through scipy instead of directly from a cython module? If not it would be good to let the scipy ppl worry about the linking to blas and not have to deal with that in qutip.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/39#issuecomment-22436635:129,access,accessing,129,https://qutip.org,https://github.com/qutip/qutip/issues/39#issuecomment-22436635,1,['access'],['accessing']
Security,"Oh sorry, I thought you were reporting the sys gcc, not the conda one. Conda-forge and QuTiP are tested heavily against Ubuntu 14.04, so if any; platform works, it should be that one. As I originally suspected, the problem comes from the Cython code.; Specifically for the sparse matrix math. The fact that you can build it; yourself suggests a binary incompatibility. However, again, we test; against 14.04, so I am hard pressed to think about what the issue could be.; gdb might be able to hunt down where the dump occurs. On Mar 25, 2017 18:27, ""Michael Goerz"" <notifications@github.com> wrote:. Since it's the python from the conda package, I'm assuming that's because; Continuum created the linux package on a Redhat system. GCC is identified; like that on both of the workstations. But yeah, my guess would be that; there is some shared library that's compiled in a way that's incompatible; with the rest of the system. Is there any linux utility that would allow to; determine which library is being accessed at the moment of the crash? Some; invocation of ldd?. —; You are receiving this because you commented. Reply to this email directly, view it on GitHub; <https://github.com/qutip/qutip/issues/674#issuecomment-289249308>, or mute; the thread; <https://github.com/notifications/unsubscribe-auth/ABMPqT0F1WSzbd-hOyso9XQM0K5ldiiwks5rpbEBgaJpZM4MpI4Z>; .",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-289250540:1007,access,accessed,1007,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-289250540,1,['access'],['accessed']
Security,"Ok, I think I understand now. The QObjEvo class is well documented. The `cqobjevo` classes are not really exposed to the user, and so they don't need full documentation.; I would suggest that any new files added by this PR have a short file level docstring that explains the purpose of the classes / functions that it defines. Consider these as messages to developers rather than users.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-454724726:106,expose,exposed,106,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-454724726,1,['expose'],['exposed']
Security,"Originally reported in #944. Tests seem to be failing for MacOS. We get errors like; ```; python(2234,0x7fff95aef380) malloc: *** error for object 0x7fde6f2f0ff0: incorrect checksum for freed object - object was probably modified after being freed.; ```; The build is pretty much always failing, but sometimes passes. I think we only get the errors when tests are run, the functions work fine otherwise. I think someone tried pytest and still got same errors. So kind of a nasty one to investigate, but there might be an easy fix if we can work out what to do. I believe @nathanshammah has done some quite thorough investigation and could probably add to this.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963:173,checksum,checksum,173,https://qutip.org,https://github.com/qutip/qutip/issues/963,1,['checksum'],['checksum']
Security,"Parallel map function having different behaviour on different OS is not new, it's quite annoying.; I am quite surprised (and sad) that it Mac that is going fine for this one. Most cluster are using linux, so I would be fine to just run the test once on linux... I understand that you are developing with a mpi enable cluster, not just your local machine. Do you use `mpiexec` when running the tests? Maybe not using it with pytest could have side effects. Maybe mpi4py's [discussions board](https://github.com/mpi4py/mpi4py/discussions) could help? They also have a google group, but it seems full of spam... I have access to a cluster and I will try it later this week. I will come back to you if I find something interesting. But I have little experience with mpi in python.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2296#issuecomment-1906562182:616,access,access,616,https://qutip.org,https://github.com/qutip/qutip/pull/2296#issuecomment-1906562182,1,['access'],['access']
Security,"QuTiP 4.5.3 doesn't support M1 Macs, sorry. None of us has access to one to test, and our CI didn't support them for quite a while. This will be fixed in the next release of QuTiP. In the meantime, you can either build the package from the current source code here, or you can go into your QuTiP installation folder and comment out lines 48 and 49 of `qutip/hardware_info.py` to work around it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1473#issuecomment-808873718:59,access,access,59,https://qutip.org,https://github.com/qutip/qutip/issues/1473#issuecomment-808873718,1,['access'],['access']
Security,"Setting the phase option with fid_params does not seem to work. set_phase_option() does not have access to fid_params and when passed in None, sets the option by the fidcomp.phase_option field. However, that appears to be deprecated and requires hard coding in the FidComputer reset method.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/400:97,access,access,97,https://qutip.org,https://github.com/qutip/qutip/issues/400,1,['access'],['access']
Security,"Since it's the python from the conda package, I'm assuming that's because Continuum created the linux package on a Redhat system. GCC is identified like that on both of the workstations. But yeah, my guess would be that there is some shared library that's compiled in a way that's incompatible with the rest of the system. Is there any linux utility that would allow to determine which library is being accessed at the moment of the crash? Some invocation of `ldd`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-289249308:403,access,accessed,403,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-289249308,1,['access'],['accessed']
Security,So my guess here is that pyximport keeps appending args like -O2 -fPIC etc to the call to gcc until it breaks. Not sure if it is a qutip thing or Cython. Why theory needs to be validated as a first step.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/966#issuecomment-511388484:177,validat,validated,177,https://qutip.org,https://github.com/qutip/qutip/issues/966#issuecomment-511388484,1,['validat'],['validated']
Security,"Solvers: absolutely the solvers should always be packaged with the main `qutip`. I had sort of envisaged that we'd put them in a `solve` package, which would be exported into the main namespace just like `core` is. This way is more just for greater separation, so that the full core isn't entangled with the solvers themselves - I think separating them like this will help us ensure that we specify the data layer API much more cleanly if the solvers aren't referenced within it. (i.e. there's no reference to any solver within `core`, but the API is built sufficiently cleanly that they can still access all the internals). OpenMP check: I think there's two neater ways:; 1. perhaps `settings` should just be in `core` too? I avoided putting the check in `core/__init__.py` because I'm really trying to avoid bi-directional dependencies between the packages, but moving `settings.py` into `core` would solve that.; 2. alternatively, we could just write `settings.py` as part of `setup.py` - determine whether we built against OpenMP/MKL at compile-time, and then just write it in? We can still choose whether or not to use it in various runtime situations. As for the current test - yeah, the comparative complexity is kind of indicative that this isn't the right way to do it. It's a relatively straightforward use of `importlib`, but still it's more difficult. (By the way: are you and @ajgpitch getting notified when I post in [the discussion board](https://github.com/orgs/qutip/teams/data-layer-devs)?)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1282#issuecomment-638730654:598,access,access,598,https://qutip.org,https://github.com/qutip/qutip/pull/1282#issuecomment-638730654,1,['access'],['access']
Security,"Some minor pep8 fixes in files I might touch soon with regards to moving to the Numpy 1.17 random-number generation. There's a bunch of seemingly dead code in `mcsolve` about a ""diagonal"" system? Seems to have a few logic bugs in it at the very least, and no way to access it. I fixed one about `e_ops`, but looking at the log, seems like the whole system might not be needed. **Changelog**: pep8 changes.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1575:266,access,access,266,https://qutip.org,https://github.com/qutip/qutip/pull/1575,1,['access'],['access']
Security,Something is way off about that test failure again... Is it possible Travis isn't cleaning up properly? I can't reproduce the failure (it's also clearly nothing to do with this change) and the error message doesn't match up. If anything it looks like the error message is coming from a hash collision inside QobjEvo _maybe_?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672:286,hash,hash,286,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-605533672,1,['hash'],['hash']
Security,"Sounds good, I'll add superoperator support to `hinton()`, then. I had used the mpltools version for the rough writeup partially for accessibility reasons: those plots were originally for presenting to colorblind users, and so I couldn't use the red/blue colormap. ddf9ae3 should enable this, then. Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/268#issuecomment-65416492:133,access,accessibility,133,https://qutip.org,https://github.com/qutip/qutip/pull/268#issuecomment-65416492,1,['access'],['accessibility']
Security,"Thank you @christian512, pdf seems to be build without error.; Could you add an upload step so we can access it after the job finished?; The mirror of the ""Upload built HTML files"" step.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1883#issuecomment-1109695548:102,access,access,102,https://qutip.org,https://github.com/qutip/qutip/pull/1883#issuecomment-1109695548,1,['access'],['access']
Security,"Thank you for your answer @Ericgig !. So, even though we are not using any quotes in our code, this internally maps to the string approach ?; I am trying to understand how to do what I want using callbacks instead, I could use a bit of help.; This is what the original code I shared here reads:. ```; # list of variational parameters ""a[]""; a=[]; for i in range(numite):; a.append(0.01*i). # define energy function by using variational parameters; def energy(a):; psi = initial_H.eigenstates(sparse=False)[1][0]; t = np.linspace(0, 1, timesteps+1); for i in range(numite):; 	H=[[initial_H,1-a[i]*t],[final_H,a[i]*t]]; 	result= qt.mesolve(H, psi, t, [], []); 	psi=result.states[timesteps]. E = qt.expect(final_H,psi); return E; ```. I tried to understand the documentation here: http://qutip.org/docs/latest/modules/qutip/mesolve.html; What I think I need to do is the following:. - I need to just pass callbacks instead of formulas / strings for the coefficients when defining the operators.; - these callbacks must have a signature with the format `(t, *args)` and should return an np.array; - `t` and `args` values are passed as arguments to mesolve. . I am a bit unclear whether or not ""args"" is a list or a dictionary and how I can access it inside my callbacks. I made an attempt but it returns errors: maybe it would be easy for you to fix some lines of this example and tell me if I am on the right track? Or do you have a link to an example, maybe ?; I am just targeting the innermost portion of the code, here:. ```; mesolve_args = ... # a dictionary ? a list? Something that lets me access the variable ""a""; def h_t1(t, *args):; return np.array(1-a[i]*t) # how do I retrieve a[i] by accessing args?; def h_t2(t, *args):; return np.array(a[i]*t) # same. H=[ [initial_H, h_t1], [final_H, h_t2] ]; result= qt.mesolve(H, psi, t, c_ops=[], e_ops=[], args=mesolve_args) # is this correct ?; psi=result.states[timesteps]; ```. Thank you for your help !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/966#issuecomment-474154477:1236,access,access,1236,https://qutip.org,https://github.com/qutip/qutip/issues/966#issuecomment-474154477,3,['access'],"['access', 'accessing']"
Security,"Thanks @BoxiLi ; Okay, embarrassingly, I was still in my `update-4,x` branch, so hence didn't find the file. Still, I did try a lot of stuff like `from qutip import hadamard_transform` (in other envs) that didn't work, before I found (with some help) that `from qutip import gates` is a good option. It seems like there was a deliberate choice not to expose the function names individually. A search for ""hadamard_transform"" or ""gates"" does not return anything helpful. Does it need pointing at in the docs build?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2389#issuecomment-2046653469:351,expose,expose,351,https://qutip.org,https://github.com/qutip/qutip/issues/2389#issuecomment-2046653469,1,['expose'],['expose']
Security,Thanks @fmayo96. Question: Should the `einsum` function be in `dimensions.py`? And should it be internal or exposed via the public API? It looks generically useful but what specific use cases do we have in mind?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2545#issuecomment-2415262480:108,expose,exposed,108,https://qutip.org,https://github.com/qutip/qutip/pull/2545#issuecomment-2415262480,1,['expose'],['exposed']
Security,"Thanks @fromage88 for the bug report and @mmensing for the proposed work around. I could also reproduce the bug and confirm that the work around works. An alternative work around until this is fixed is directly access the underlying matplotlib figure instance:. ```; import numpy as np; from qutip import *. b = Bloch(). for i in range(5):; b.add_vectors([np.sin(i),0,np.cos(i)]); b.render(); b.fig.savefig(""bloch_sf%d.png"" % i); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/304#issuecomment-71307382:211,access,access,211,https://qutip.org,https://github.com/qutip/qutip/issues/304#issuecomment-71307382,1,['access'],['access']
Security,"Thanks for reporting this - it's an important bug that's snuck in. Right now, there's a few errors in your code that you can fix to get on your way again, but we need to fix the error on our side. You're using `sigmap()` which is the Pauli excitation operator and is only defined for a Hilbert space with dimension 2. You actually are working with a Hilbert space of dimension `nmax * nmax` (a tensor-product space), so your `e_ops` argument to `sesolve` is wrong - it's difficult to know exactly what you meant here. `destroy(2)` is equivalent to `sigmap()`, so it's possible you intended to have `e_ops` be `[qutip.tensor(a1, a2)]`?. ---. Maintainers: The error is actually a segfault, because QuTiP 4.5 (probably 4.4 too) does not do sufficient error checking on`e_ops` arguments - probably they're missing in the conversion to `CQobjEvo`. When the expectation is called, it has already sidestepped `Qobj`'s dimensions check and there is no matrix size check, so it simply segfaults on OOB access. The fix for the 4.x branch is to have a very loud Python-space error due to mismatched `Qobj` dimensions on entry to the solvers, or insert a size check within `CQobjEvo`. High priority: there's no reason we should be segfaulting here. Partially fixed in the 5.x branch; all matrix multiplications that take place in C-space have a size check and throw a Python exception, however the solvers still sidestep the `Qobj` dimension check so a tensor-product-space mismatch will not be detected.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492:993,access,access,993,https://qutip.org,https://github.com/qutip/qutip/issues/1374#issuecomment-717495492,1,['access'],['access']
Security,"Thanks for the quick reply! . > Should it raise a warning for users that tries to access each trajectories? Or add a note in the docstring? The trajectories would look strange if you don't read the documentation.; > ; Maybe, though I'm not sure why they would look strange? It's possible a user could get confused if they don't see any no-jump trajectories other than the first one, but hopefully they wouldn't be confused if they set the flag to use this algorithm. > I am wondering if `MCSolverImprovedSampling` could be merged in `MCSolver`. I am not a fan of having `mcsolve` use 2 different solvers and it should be accessing by the new class interface. Another options would be that make `MCSolverImprovedSampling` public and add a new function to call it `mcissolve`?; > ; Yeah this might be the way to go. I only had it the way I did to have `MultiTrajSolverImprovedSampling` get inherited before `MCSolver` so that the functionality there gets used and also have `resultclass = McResultImprovedSampling`. We could do a conditional inheritance in `MCSolver`, but I'm worried that might be messy/ugly?. > I would prefer that you revert the changes made by black. It add a lot of changes that are unrelated to the new feature and makes reviewing the PR annoying. Also we use the pep8 line width of 80 instead of black's 88. For now, we mostly use black in new code and adding black to existing file should be their own PR.; >; Sorry about that, will revert",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2218#issuecomment-1687054681:82,access,access,82,https://qutip.org,https://github.com/qutip/qutip/pull/2218#issuecomment-1687054681,2,['access'],"['access', 'accessing']"
Security,"That's very odd, it looks like the test was killed the test midway through, but I have no idea why. I'd guess that rerunning the build may work, but answers to [a question on StackOverflow](http://stackoverflow.com/questions/17606874/trigger-a-travis-ci-rebuild-without-pushing-a-commit) claim that you must have write access to the repo in order to trigger a new build.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128689363:319,access,access,319,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128689363,1,['access'],['access']
Security,"The `_hashable_without_global_phase` made the tests nice and easy to read, but honestly it was just a timebomb waiting to go off and break the tests. Floats can't reasonably be hashed as an equality test, because they should always include a delta in the comparison. This technically makes the tests slower, but as long as we're just testing the single-qubit Clifford group, it's only a fraction of a second (because there's 24 of them ignoring global phase and 24^2 is only 576).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251#issuecomment-626317467:177,hash,hashed,177,https://qutip.org,https://github.com/qutip/qutip/pull/1251#issuecomment-626317467,1,['hash'],['hashed']
Security,"The internal data type for storing dynamics generators (Hamiltonians), propagators, and the time evolution can now be set as Qobj. When using Qobj the propagators are computed using qutip methods for expm. Resolves #370; The default for small systems remains ndarray, as this provides much faster execution (factor of 10 approx). However, it is assumed, but not yet tested, that for larger systems the Qobj propagation will be faster, and certainly less memory consumptive. The internal data type (if not specified) is chosen automatically using the same criteria Qobj.expm() uses to determine whether to use the (cython) sparse method.; The main motivation for implementing this change is for users developing their own custom fidelity and gradient measures which use the partial trace method. Consequently, preserving the dimensions is important. This has been shown (by colleagues testing) to be more efficient than recreating the Qobjs from ndarrays.; The internal operator processing methods and attributes have been renamed with underscores preceding to indicate that these will be of the internal operator data type. Accessors have been added that will always provide Qobj representations of the operators.; Theoretically any operator data type that supports the dot() method could be used, e.g. some other sparse matrix type, however this has not been extensively tested and should be considered an experimental feature.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/397:1124,Access,Accessors,1124,https://qutip.org,https://github.com/qutip/qutip/pull/397,1,['Access'],['Accessors']
Security,"The main function of the `Options` class is to hold the documentation of the options supported by solver, mostly integrator related ones are an issue. Since sub-packages can add new integration methods, it should be somewhere dynamic that can fetch them at runtime. We can't have them in the description of the function interface directly, but it must be clear from that documentation where to find them.; We can't have them in the documentation of the solver class. It could be in a solver instance, but that too late: needing to initialize a `BrSolver` or `HEOMSolver` just to know which options `bsmesolve` and `heomsolve` support is not user friendly.; The Integrator class is useless for the users: if they want to solve ODE, they should use `scipy.integrate`, for quantum systems evolution, `mesolve` etc. So we should not ask them to look there. `SolverOptions(name)` make it reasonably easy to check the supported options and their default before using the solver. Another approach I see is to fix the integrator when using the functions interface, this way we could properly document the function with all items from both the solver and integrator. When using the class interface, we keep both options separated (and make the choice of integrator it's own keyword):; ```; solver = SeSolver(H, integrator_method='adams', options=solver_options, ode_options=ode_options); solver.options # Solver options only. solver.set_integrator('vern7', ode_options); help(solver.ode_options) # See description of integrator options; ```. That way the function calls is very close to v4 and easy to use, and the class interface give access to new features. ; This also makes `krylovsolve` fit more. Since `method` is used by the solver, not the integrator, it should not be under the `options.ode`, but it seems confusing to have it with the normal options, so having it as an independent parameter could make it clearer.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897:1627,access,access,1627,https://qutip.org,https://github.com/qutip/qutip/pull/1947#issuecomment-1174438897,1,['access'],['access']
Security,"The problem appears in qutip version 4.0.0 when considering the tensor product of a few systems, and including more than one dissipation channel. I noticed a similar issue on a much more complex system, but in the code attached I consider the simplest system on which I have found the bug to appear. Consider three uncoupled qubits, each with a distinct frequency. The Hamiltonian is (ignoring tensor products with identity matrices) :. H = (w1 / 2) * sigmaz_1 + (w2 / 2) * sigmaz_2 + (w3 / 2) * sigmaz_3. Let us couple qubits 2 and 3 to independent white-noise environments through operators sigmax_2 and sigmax_3. Qubit 1 is decoupled from the other qubits, and does not couple to any relaxation channel. We consider the initial state |1:e, 2:g, 3:g>, where g(e) labels the ground (excited) state of a qubit, and evaluate the population of the excited state of qubit 1 as a function of time using bloch_redfield_tensor() and bloch_redfield_solve(). Since qubit 1 is decoupled from the other qubits, its excited-state population should remain 1 at all times. Yet, qutip yields exponential decay of the population of qubit 1. I noticed that when I remove dissipation for qubit 2 (keeping only dissipation through sigmax_3), the problem disappears and qubit 1 forever stays in its excited state. So the problem seems to arise when combining two relaxation sources. I am using qutip version 4.0.0. A colleague of mine tried the attached test code on qutip version 3.1.0 and did not catch any bug (i.e. qubit 1 did not relax with qutip 3.1.0). So the problem seems to be related to versions of qutip later than 3.1.0. Can anyone replicate the bug with the attached code ? . (I tried putting the code directly here but the hashtag signs for the comments made a mess, and github does not accept attached .py files, so I have put the code in a .txt file instead.). [redfield.txt](https://github.com/qutip/qutip/files/635122/redfield.txt)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/572:1719,hash,hashtag,1719,https://qutip.org,https://github.com/qutip/qutip/issues/572,1,['hash'],['hashtag']
Security,"The problem is recognising what a true 0 is from a small value. In your example on the new data layer, there will already be exactly 0 items explicitly stored (and `data.add_csr` is going to get faster and smarter in another PR, too) without `tidyup`, but much more concerningly `1e-15 * qutip.rand_herm(5)` will end up in a zero matrix, which is clearly absolutely wrong. The argument from Liouvillian doesn't work here - even before the new data layer, `liouvillian` never called the `tidyup` code because it accessed the `Qobj.data` field directly, rather than used `Qobj`. Since it then goes into `CQobjEvo` in most of the solvers, which also don't touch the `tidyup` code, it doesn't get called. I don't think there's any safe way to know if small values should actually be zero, or if they're just small values. It makes sense that we want to maintain as much sparsity as possible when values are truly zero, but I think having the QuTiP default be to attempt to tidy up after every addition, multiplication and matrix multiplication is quite unsafe, and for people who aren't doing very very sparse calculations, it's actually a slow down.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384:511,access,accessed,511,https://qutip.org,https://github.com/qutip/qutip/issues/1349#issuecomment-680011384,1,['access'],['accessed']
Security,"The problem with windows has been that there was/is no free 64 bit compiler, and because of that it has been way easier to just install anaconda 32 and use mingw32 on windows (even on windows 64). . In principle is should be possible build and install qutip 64-bit version on windows with a commercial 64-bit compiler (e.g. Visual Studio), but since few people has access to such a compiler we have not tested this option. Perhaps mingw64 is now a viable option, but I'm not sure how useful it is now. Would be great if someone could test it. . Binary builds for 32 and 64 conda packages for windows would be highly desirable in my opinion. I have once created a conda package for qutip (https://github.com/conda/conda-recipes/tree/master/qutip) ; so if someone got the development environment with the required compilers setup for windows it should be straightforward to build the packages.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/377#issuecomment-145857462:365,access,access,365,https://qutip.org,https://github.com/qutip/qutip/issues/377#issuecomment-145857462,1,['access'],['access']
Security,"The stochastic solver have been redone.; smesolve and ssesovle can be used for time dependent systems (H, c_ops and sc_ops).; The available solvers are : 'euler-maruyama', 'pc-euler, 'milstein', 'platen', 'milstein-imp', 'taylor15', 'taylor15-imp', 'explicit15'. All solvers are usable by both ssesolve and smesolve, for time-dependent cases and for both heterodyne and homodyne methods. There is no restriction on the number of sc_ops. The solvers are in cython, making them 2~3 time faster than the previous version, with the exception of the implicit solvers, where the timing is about the same. The photocurrent method as been moved to it's own functions: photocurrentmesolve and photocurrentsesolve. It can take time-dependent Hamiltonian. The stochastic (piecewse deterministic process) PDP solvers (ssepdpsolve and smepdpsolve) are untouched. The previous version of smesolve/ssesolve allowed the user to determine it's own d1 and d2 function. This capacity have been moved to the function general_stochastic. However the function only has access to some solver: 'euler-maruyama', 'platen', 'explicit15'. . I created a function which list the solvers with the references: stochastic_solver_info(). The convergence of the solvers was tested with a tests similar to https://github.com/qutip/qutip-notebooks/blob/master/development/development-smesolver-new-methods.ipynb .",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815:1047,access,access,1047,https://qutip.org,https://github.com/qutip/qutip/pull/815,1,['access'],['access']
Security,"There are no test code for progress bars yet.; You will need to create a new test file: `qutip/tests/test_progressbar.py`. The test can be as simple as creating the bar, call `update`, call `finished` and check that the total time is a sensible value.; You could also use pytest to catch print with [capsys](https://docs.pytest.org/en/7.1.x/how-to/capture-stdout-stderr.html#accessing-captured-output-from-a-test-function) and confirm that something was printed when `update` / `finished` is called.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520:375,access,accessing-captured-output-from-a-test-function,375,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471949520,1,['access'],['accessing-captured-output-from-a-test-function']
Security,"There doesn't seem to be the package released under Ubuntu 16.04 channel. After I added the Ubuntu PPA for QuTiP, I got the following error/warning:. ```; qxd@ubuntu1604$: sudo apt-get update; ...; W: The repository 'http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu xenial Release' does not have a Release file.; N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.; N: See apt-secure(8) manpage for repository creation and user configuration details.; E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-amd64/Packages 404 Not Found; E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-i386/Packages 404 Not Found; ```. Thanks for maintaining it :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/472:363,authenticat,authenticated,363,https://qutip.org,https://github.com/qutip/qutip/issues/472,2,"['authenticat', 'secur']","['authenticated', 'secure']"
Security,"There seems to be a failure in how `Qobj.istp` checks trace-preservingness for superoperators acting on composite systems. I think there's an exception raised inside the property accessor which is being downgraded to `istp == False`; I'll investigate and fix it soon. In the meantime, I've written a [brief test case](https://gist.github.com/cgranade/31bce360282097d4abd545b68eb65b7d) that shows the problem.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/498:179,access,accessor,179,https://qutip.org,https://github.com/qutip/qutip/issues/498,1,['access'],['accessor']
Security,"This PR is part of PR #969 , splitting that PR in two parts. It contains:; - `qobjevo`'s args that update with the state. (replacing rhs_with_state functionality) ; - method `norm` renamed to `_cdc` as it was not used as a norm.; - cython side of expect method no longer take `isherm` as an arguments.; - security check in propagator for `H` as a function with `batch` method.; - `propagator` uses `sesolve` capability to evolve operators.; - floquet now call `sesolve` instead of `mesolve` with no collapse.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990:305,secur,security,305,https://qutip.org,https://github.com/qutip/qutip/pull/990,1,['secur'],['security']
Security,"This PR is perhaps not quite as insane as it looks. It ""simply"" writes the entire history of the `qutip/qutip-doc` repository into `qutip/qutip` as if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes thes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:299,hash,hashes,299,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['hash'],['hashes']
Security,"This PR should fix #451 by adding an additional check to `Qobj.iscp` to check the hermicity-preserving condition. Since this is a useful condition in its own right, the PR also adds `Qobj.ishp` to expose that logic separately. Finally, new unit tests have been added to check for regressions on #451, and for the new `Qobj.ishp` attribute.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/452:197,expose,expose,197,https://qutip.org,https://github.com/qutip/qutip/pull/452,1,['expose'],['expose']
Security,"This change enables the use of Python standard logging, and backs it by a new qutip.settings entry. A few instances of classic `if debug: print` style logging have been refactored. The new `qutip.settings` entry is based on [configobj](http://configobj.readthedocs.org), with a fallback to classic `~/.qutiprc` parsing if that library is not available. Errors in the new functionality introduced by this commit are also logged, and can be accessed by setting up `logging.basicConfig` _before_ importing QuTiP. The optional configobj dependency should almost always be met, since it's shipped with matplotlib.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248:439,access,accessed,439,https://qutip.org,https://github.com/qutip/qutip/pull/248,1,['access'],['accessed']
Security,"This fails for python2.7 and it might also be related to older scipy version. I could not even install it locally in my python2.7 conda environment with scipy 0.15 as I get some compile errors for the `cy/brtools` module. One more reason to move to Python 3 and update scipy perhaps. @ajgpitch . If you have seen this error before with a conda env clashing with the Python GIL, please let me know,; ```; qutip/cy/brtools.pyx:98:51: Converting to Python object not allowed without gil; Traceback (most recent call last):; ```; The conda environment is as follows:; ```; # packages in environment at /Users/shahnawaz/miniconda3/envs/python2:; #; # Name Version Build Channel; blas 1.0 mkl; ca-certificates 2018.4.16 0 conda-forge; certifi 2018.4.16 py27_0 conda-forge; cython 0.28.3 py27_0 conda-forge; intel-openmp 2018.0.3 0; libgfortran 3.0.1 h93005f0_2; mkl 2018.0.3 1; ncurses 5.9 10 conda-forge; numpy 1.9.3 py27hb3dd696_3; numpy-base 1.14.3 py27ha9ae307_2; openblas 0.2.20 8 conda-forge; openssl 1.0.2o 0 conda-forge; pip 9.0.3 py27_0 conda-forge; python 2.7.15 0 conda-forge; qutip 4.3.0.dev0+2a849f2e <pip>; readline 7.0 0 conda-forge; scipy 0.15.1 np19py27_0; setuptools 39.2.0 py27_0 conda-forge; sqlite 3.20.1 2 conda-forge; tk 8.6.7 0 conda-forge; wheel 0.31.0 py27_0 conda-forge; zlib 1.2.11 h470a237_3 conda-forge; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-396111344:691,certificate,certificates,691,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-396111344,1,['certificate'],['certificates']
Security,"This is a tidied up and completed version of #934. The first commit is credited to the original author (although I fixed up some little concerns in the PR and rebased it), because it's logically built off that PR, although in the end it's a complete reimplementation. This is a complete rewrite of the Husimi Q calculations, to make a more formal split between the iterative (low-memory) and precomputed (faster) algorithms, giving full access to both of them. It's a bit easier to use from a user's perspective, and it's faster than #934 as well. The concept of the precomputed matrix is encapsulated into a class with a cached tensor, so that the same precomputed system can be used for many states of different sizes, and autoexpands (up to the memory limit) to accommodate larger states. This is called `QFunc` as opposed to the standard function interface `qfunc`. It also adds rather more error checking on its inputs, and adds a complete testing suite for the new implementation. Closes #934. ## Examples. Let's say we have some states, and the phase-space coordinates we want to calculate the Husimi Q function at.; ```python; >>> import qutip; >>> states = [qutip.rand_dm(32, density=0.2) for _ in [None]*100]; >>> xs = np.linspace(-2, 2, 401); ```. Now the normal way of calculating the Q distribution for a single state is; ```python; >>> qutip.qfunc(states[0], xs, xs); array( ... ); ```. This already has some speed advantages over the pre-PR version of `qfunc`, because it caches a lot of its intermediary results, to avoid recomputing them. This results in calculating more matrix-vector products than before, but far fewr FLOPS overall. By default, `qfunc` issues a warning if it exceeds a certain amount of memory, and falls back to the low-memory version. You can control this limit with the `precompute_memory` option:; ```python; >>> qutip.qfunc(states[0], xs, xs, precompute_memory=0); qutip/qutip/wigner.py:822: UserWarning: Falling back to iterative algorithm due to lack of mem",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:437,access,access,437,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['access'],['access']
Security,"This is just a test. ; Since many failed Travis builds had a malloc error, also according to [this StackOverflow thread](https://stackoverflow.com/questions/19840671/malloc-error-incorrect-checksum-for-freed-object-object-was-probably-mod/19841133) it seemed that XCode was the source of the problem. . I added as osx environment in the travis configuration file xcode 10.2 (should be on osx 10.14 Mojave, not sure though). Build still fails, now at ; ```; Qobj subtraction ... python(2491,0x1192585c0) malloc: Incorrect checksum for freed object 0x7ffe6ff1ad50: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(2491,0x1192585c0) malloc: *** set a breakpoint in malloc_error_break to debug; /Users/travis/.travis/functions: line 104: 2491 Abort trap: 6 nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; The command ""nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip"" exited with 134.; ```; which seems a pretty basic test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/985#issuecomment-485054530:189,checksum,checksum-for-freed-object-object-was-probably-mod,189,https://qutip.org,https://github.com/qutip/qutip/pull/985#issuecomment-485054530,2,['checksum'],"['checksum', 'checksum-for-freed-object-object-was-probably-mod']"
Security,"This latest commit 77c21f8 fixes several bugs in the testing of `qutip.qip.operations.gates` - see the commit message for more details. (Force-pushed a new version of it to increase the commit hash references by one character, so GitHub would pick them up and link them.). We should also add tests that the explicit forms of the gates are correct (comparing to hard-coded arrays) in their base forms. These tests should never really fail, but they should be there as a fail-safe sanity check against somebody changing things in that module in the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-593333553:193,hash,hash,193,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-593333553,1,['hash'],['hash']
Security,"This moves our entire testing apparatus over to GitHub Actions, since Travis has changed its pricing model and we can no longer rely on it. This actually has several advantages for us right now:; - better integration with other GitHub Actions workflows; - more concurrent jobs; - more access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:285,access,access,285,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['access'],['access']
Security,"This pull implements a safety check where the Qobj data class is validated as fast_csr_matrix type everytime the Q.data attribute is set. This guarantees that the Qobj's have the correct data type. This was not always true previously. In addition, many items are fixed so that the above rule passes. Finally, we no longer need the tests that check for Qobj csr_matrix type. This is now strictly enforced.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/609:65,validat,validated,65,https://qutip.org,https://github.com/qutip/qutip/pull/609,1,['validat'],['validated']
Security,"This relaxes the amount of sorting required in the `add_csr` operation. In the current version in `dev.major`, both the left and right matrices are sorted in all cases. This PR makes `add_csr` an `Accumulator` operation, which straight away reduces the number of sorts required to one. Second, I add a track inside `scatter` to know whether the scatters were in sorted order; if so, there's no need to sort within `gather`, which removes the other sort from `add_csr`. Effectively, this means that `add_csr` is O(n) when both input matrices are sorted (the most common) and O(n lg(n)) when either isn't, and we don't actually have to perform a separate test to decide between them. In practice, this is around a 2x speedup for most common sparse matrices, and goes up from there. I have also made `Accumulator` a C struct, and all the operations on it header-file only. This allows them to be operated on without holding the GIL (though threaded access to the same one would be unsafe anyway), and it also allows them to be inlined - if they are defined in the `pyx` file, then they will be compiled into a separate object and so must be called. We had talked about making `CSR` have a ""guarantee"" that it is always sorted, but I haven't implemented that here. Because of the changes to `scatter`, that would no longer give an algorithmic speedup in this case for matrices that are sorted (although we could avoid the use of `Accumulator` which would be more efficient). All of the operations I have written return a sorted matrix, so generally matrices will tend to become sorted over time anyway.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1362:946,access,access,946,https://qutip.org,https://github.com/qutip/qutip/pull/1362,1,['access'],['access']
Security,"This was reported on the help group; https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU. (copying from there); the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well. If using mkl(2019.0), there will MKL read problems, like:; ```; File ""C:\Users\ym24chen\Anaconda3\; x = lu.solve(b, verbose=verbose); File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve; np_x, np_error); OSError: exception: access violation reading 0x0000000000000008; envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve; ```. Env info:; ```; QuTiP Version: 4.3.1; Numpy Version: 1.15.4; Scipy Version: 1.1.0; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.7.2; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip; ==============================================================================; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975:548,access,access,548,https://qutip.org,https://github.com/qutip/qutip/issues/975,1,['access'],['access']
Security,"This will be a collection of functions that access the sparse features in the Intel MKL:. 1) Parallel CSR SpMV. 2) Parallel direct sparse LU factorization. I have yet to work out a nice way of importing the MKL library, so these functions will not work unless the path to the MKL is modified by hand. My thinking is to look at the python version string to check for the Anaconda or Intel Python distros, and if found, find the MKL in the known locations for each distro and platform. Intel said they would expose this functionality in a later version of their distro.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/459:44,access,access,44,https://qutip.org,https://github.com/qutip/qutip/pull/459,2,"['access', 'expose']","['access', 'expose']"
Security,Travis tests failing for MacOS - incorrect checksum for freed object,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963:43,checksum,checksum,43,https://qutip.org,https://github.com/qutip/qutip/issues/963,1,['checksum'],['checksum']
Security,Trouble accessing Boxi Li's FOSDEM slides,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1467:8,access,accessing,8,https://qutip.org,https://github.com/qutip/qutip/issues/1467,1,['access'],['accessing']
Security,"We can't implement `__hash__` for `Qobj`, sorry - it's just not possible while following the [Python data model](https://docs.python.org/3/reference/datamodel.html#object.__hash__). The two principle points that a hash function must follow from there are; 1. objects which compare equal with `__eq__` have the same hash; 2. the hash of an object cannot change after instantiation (no mutable types). Unfortunately we fail on both points. `Qobj.__eq__` is a rounding match, because it gives a total `True` or `False` based on a floating point tolerance, not on exact equality. I'm not aware of any hash function which can handle this. Second, the `data` attribute of a `Qobj` is mutable in-place, and so hashing based on the data in the object is not valid. This is the same reason that `list` and `np.ndarray` are also not hashable types. If your cache is just for memoisation over a small number of `Qobj` where you know that floating-point tolerance will never be an issue, you may be able to get away with rolling your own cache decorator which uses linear lookup rather than constant-time. I mean something like; ```python; In [1]: import functools; ...: import qutip; ...:; ...: def linear_cache(f):; ...: cache = []; ...: @functools.wraps(f); ...: def out(*args):; ...: for cached_args, cached_value in cache:; ...: if args == cached_args:; ...: print(""Getting from cache""); ...: return cached_value; ...: print(""Computing new value""); ...: value = f(*args); ...: cache.append((args, value)); ...: return value; ...: return out; ...:; ...: @linear_cache; ...: def negate(x):; ...: return -x; ...:; ...: sx = qutip.sigmax(); ...: sy = qutip.sigmay(); ...: negate(sx); ...: negate(sx); ...: negate(sy); ...: negate(sx); ...: negate(sy); Computing new value; Getting from cache; Computing new value; Getting from cache; Getting from cache; ```; This will lead to degraded performance if you need to do it for a large number of possible inputs, but if you have a relatively small number of inputs an",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277:214,hash,hash,214,https://qutip.org,https://github.com/qutip/qutip/issues/1321#issuecomment-658078277,6,['hash'],"['hash', 'hashable', 'hashing']"
Security,"We have decided not to continue to maintain the Ubuntu channel. Please; install from source to using qutip 3.2.; Alternatively you can use the conda-forge channel if you are able to work; with qutip 3.1. On 9 May 2016 at 02:52, Qi notifications@github.com wrote:. > There doesn't seem to be the package released under Ubuntu 16.04 channel.; > After I added the Ubuntu PPA for QuTiP, I got the following error/warning:; > ; > qxd@ubuntu1604$: sudo apt-get update; > ...; > W: The repository 'http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu xenial Release' does not have a Release file.; > N: Data from such a repository can't be authenticated and is therefore potentially dangerous to use.; > N: See apt-secure(8) manpage for repository creation and user configuration details.; > E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-amd64/Packages 404 Not Found; > E: Failed to fetch http://ppa.launchpad.net/jrjohansson/qutip-releases/ubuntu/dists/xenial/main/binary-i386/Packages 404 Not Found; > ; > Thanks for maintaining it :); > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/qutip/qutip/issues/472",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/472#issuecomment-218122293:639,authenticat,authenticated,639,https://qutip.org,https://github.com/qutip/qutip/issues/472#issuecomment-218122293,2,"['authenticat', 'secur']","['authenticated', 'secure']"
Security,"What should we do with the qutip/examples directory? It contains a lot of old stuff which is not really maintained anymore, but there are still some useful tests examples there. The current situation is:. qutip/qutip/examples - official examples accessible through the GUI and used in the docs; qutip/qutip/tests - unit tests; qutip/notebooks - development tests and benchmarks; qutip/examples - no clear purpose and not well maintained. We need to think about what we want to do with the examples directory and what purpose these example scripts have. I'm inclined to getting rid of these examples in favor or more contextual development examples in notebook form stored in qutip/notebooks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/23:246,access,accessible,246,https://qutip.org,https://github.com/qutip/qutip/issues/23,1,['access'],['accessible']
Security,"Yeah, Google will just update itself over time, I think - the http links aren't dead, they just redirect through to the https ones (or at least they will when I force https access from tomorrow). There's a similar PR on the website (qutip/qutip.github.io#145) to fix links there as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1555#issuecomment-840558024:173,access,access,173,https://qutip.org,https://github.com/qutip/qutip/pull/1555#issuecomment-840558024,1,['access'],['access']
Security,"Yeah, this is a ""true"" merge of the qutip-doc repository with this one. Technically all the commits have been rewritten (you'll find that the hashes won't match between the repositories), but they'll all be credited to the same authors on GitHub. Everyone will actually get the credit ""twice"" - once for the archived qutip/qutip-doc repo, and once for the new commit object in here. If anybody was in the habit of signing their commits with a private key, that will have been lost, but the only people that's likely to have affected are me and the GitHub merge bot. It doesn't mean anything in the greater scheme of things, because I've signed the merge commit. (signing is mostly just a way of verifying that the author really was who it says it was). *edit:* I checked, the only two types of signed commits in qutip/qutip-doc are those from me and those from the GitHub bot. Answers:; - I'll migrate all open issues on qutip-doc into the qutip/qutip repository, and tag them with a ""docs"" tag. GitHub has a built-in mechanism to migrate issues.; - We'll archive it, posting a message on the front page of it (or the README if GitHub doesn't have a separate mechanism). We need to leave the repository up and available on the web, because old documentation refers to it in links.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513#issuecomment-830106458:142,hash,hashes,142,https://qutip.org,https://github.com/qutip/qutip/pull/1513#issuecomment-830106458,1,['hash'],['hashes']
Security,"[http://qutip.org/docs/latest/guide/dynamics/dynamics-time.html](url). Under section Accessing the state from solver, it says the state of the system can be obtained using args for the time dependent Hamiltonian, but I couldn't figure out what that key was to use the state of system in the time dependent Hamiltonian , an example would be good. ![qutipIssue](https://user-images.githubusercontent.com/7588933/109229114-d9eb3b00-7790-11eb-94ef-17d53aaabaf7.JPG)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1538:85,Access,Accessing,85,https://qutip.org,https://github.com/qutip/qutip/issues/1538,1,['Access'],['Accessing']
Security,"[radarhere]</p>; </li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/d594f4cb8dc47fb0c69ae58d9fff86faae4515bd""><code>d594f4c</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/909dc64ed5f676169aa3d9b0c26f132a06321b83""><code>909dc64</code></a> 9.3.0 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1a51ce7b955c65c8f2c6bc7772735b197b8a6aa3""><code>1a51ce7</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> from hugovk/security-libtiff_buffer</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:14022,secur,security-,14022,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['secur'],['security-']
Security,"[urllib3](https://github.com/urllib3/urllib3) from 1.26.18 to 1.26.19.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/releases"">urllib3's releases</a>.</em></p>; <blockquote>; <h2>1.26.19</h2>; <h2>🚀 urllib3 is fundraising for HTTP/2 support</h2>; <p><a href=""https://sethmlarson.dev/urllib3-is-fundraising-for-http2-support"">urllib3 is raising ~$40,000 USD</a> to release HTTP/2 support and ensure long-term sustainable maintenance of the project after a sharp decline in financial support for 2023. If your company or organization uses Python and would benefit from HTTP/2 support in Requests, pip, cloud SDKs, and thousands of other projects <a href=""https://opencollective.com/urllib3"">please consider contributing financially</a> to ensure HTTP/2 support is developed sustainably and maintained for the long-haul.</p>; <p>Thank you for your support.</p>; <h2>Changes</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19</a></p>; <p>Note that due to an issue with our release automation, no <code> multiple.intoto.jsonl</code> file is available for this release.</p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/1.26.19/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.19 (2024-06-17)</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; <li>Fixed handling",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:979,Authoriz,Authorization,979,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['Authoriz'],['Authorization']
Security,"_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . > ???; E ModuleNotFoundError: No module named 'rhs4968611'. <string>:1: ModuleNotFoundError; __________________________________________________________________________________________________________ TestTimeDependence.test_varying_coefficient_hamiltonian_2ls[string] ___________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:12995,hash,hash,12995,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Security,"_Last updated: 2020-08-12_. This is an issue for tracking and publicising the development status of a separated data layer. This is a major breaking change to be introduced in QuTiP 5, and will change how library functions and users access the underlying data structures of `Qobj`. This document and issue will change over time. Development is taking place on the [`dev.major` branch](https://github.com/qutip/qutip/tree/dev.major) in `qutip/qutip`. Pull requests implementing new features:; - #1282 separating out the core QuTiP operations into a (logical but user-transparent) package `qutip.core`.; - #1296 implementing the first parts of the data multiple dispatch and new data types.; - #1332 replacing the `fast_csr_matrix` with the new Cython type `CSR` all across QuTiP; - #1338 implementing the data-layer creation, conversion and dispatcher routines. We are writing a new ""developers' guide"" to explain the logic behind the design decisions, and help new QuTiP developers work on the code. You can follow initial development hosted as [a repo in my user account](https://github.com/jakelishman/qutip-devguide) until we decide how this will be added to the main documentation. You can view a rendered version of the documentation at https://jakelishman.github.io/qutip-devguide. Some design documents:; - [data layer](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/01-data-time-layer-separation.md); - [data structure implementation choices](https://github.com/jakelishman/qutip-doc/blob/design-data-layer/design/02-data-structures.md); - [original GSoC proposal (PDF)](https://www.binhbar.com/posts/2020/05/welcome-to-google-summer-of-code-2020/proposal.pdf). New design elements under consideration:; - [improved `'type'` and `'dims'` handling for tensor-product spaces](https://github.com/qutip/qutip/issues/1320). Major breaking changes to QuTiP:; - `Qobj.data` is no longer an instance of `scipy.sparse.spmatrix`, but the new abstract ""data-layer type"" `core.data",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1278:233,access,access,233,https://qutip.org,https://github.com/qutip/qutip/issues/1278,1,['access'],['access']
Security,"_________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_46049686147042'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_correlation.TestTimeDependence object at 0x7fe9f0e896d0>, dependence_2ls = 'exp(-(t-t_off)**2 / (2 * tp*tp))'. def test_varying_coefficient_hamiltonian_2ls(self, dependence_2ls):; H = [[_2ls_args['H0'], dependence_2ls]]; > assert abs(_2ls_g2_0(H, []) - 0.575) < 1e-2. /usr/lib/python3/dist-packages/qutip/tests/test_correlation.py:167: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:13401,access,access,13401,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security,"_________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unitary_list_str(self):; ""sesolve: compare state and unitary operator evo - list str td""; eps = 0.2 * 2*np.pi; delta = 1.0 * 2*np.pi # atom frequency; w0 = 0.5*eps; w1 = 0.5*delta; H0 = w0*sigmaz(); H1 = w1*sigmax(); w_a = w0; ; td_args = {'w_a':w_a}; H = [H0, [H1, 'cos(w_a*t)']]; ; psi0 = basis(2, 0) # initial state; tlist = np.linspace(0, 20, 200); ; > self.compare_evolution(H, psi0, tlist,; normalize=False, td_args=td_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:18678,access,access,18678,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['access'],['access']
Security,"`namedtuple` is not a bad idea, although it's a bit odd because `e_ops` is never a namedtuple and it doesn't solve the problem of what type `.e_ops` has. And `namedtuple` forbids attributes which aren't identifiers, which is also problematic. I guess we could write our own type, `Expect`, that acts enough like a list for numpy, etc but still allows item and attribute access. That feels a bit crazy, but maybe it is worth it?. I still feel that all of these options are overly complicated. `e_ops` is not a list conceptually. Lists are typically ordered, but unstructured. The `e_ops` are clearly not ordered because `e_ops[0]` doesn't ""come before"" `e_ops[1]` in any meaningful way. The order of the indexes in a list `e_ops` are meaningless -- they exist only because that is how Python lists work. *Sometimes* there may be a natural ordering to e_ops -- e.g. if they happen to be the projectors onto a complete set of basis elements -- but this a small subset of the more general situation where e_ops might be any set of operators and functions. I do see that you feel lists are the most important case though, so it would be good to support them well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185:370,access,access,370,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1142339185,1,['access'],['access']
Security,"`traj_states` property added to result object. This is just `states` unless `average_states` is used. When `average_states` is used then it is the original trajectory states. Sometimes it can be useful to access the original trajectory states. . `avg_states` property added to result object. This is the same as `states` when `average_states` is used, otherwise it is `None`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1115#issuecomment-547751565:205,access,access,205,https://qutip.org,https://github.com/qutip/qutip/pull/1115#issuecomment-547751565,1,['access'],['access']
Security,"ame time different versions of the interface, however, and there’s value in doing so. > To me, this is absolutely one of the mistakes that Numpy made in their implementation, and we shouldn't be copying it. I don't know enough of the history behind numpy current api, but I see your point. however I'd like to reiterate that this is not what I am proposing. ; I think there is considerable difference between supporting arbitrary operations `new_obj = Qobj + netket_operator*5` (though if you are going to export dispatch hooks in `5.0`, this would be possible in a consistent way, I think) and `qutip.mesolve(netket_operator, ...)`. ; In the first, I do agree with your point that the nature python's `__add__/__radd__` is not commutative, leading to surprising behavior. From my point of view, no package really owns `+` so any conversion would be implicit.; But `qutip.groundstate(netket_operator)` is in itself an explicit cast. I am explicitly asking to qutip `please give me the ground state of this object`. I do expect to get a Qobj out, and qutip to make an effort converting this object to whatever format he internally wants to work with. Same goes with time evolution. . > For greater discussion, here's an alternate approach: instead of objects defining __qutip_qobj__, instead we expose an entry-point qutip.Qobj.register_conversion_function(converter, type, priority, version=None), and downstream libraries register functions rather than defining methods on their classes. I do prefer such an approach. I just did not think that was an option in QuTiP.; In fact we have redesigned NetKet to allow for something similar using multiple dispatch. (I’m not familiar with Tensorflow either.). I do agree with all your points, especially the first. As for your last point, about downstream packages having to import qutip: This is indeed a potential issue. I’ll try to investigate this: maybe there is a solution whereby a callback executed on package load can be registered with importlib?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742:3520,expose,expose,3520,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830113742,1,['expose'],['expose']
Security,"are not engaged with the project, do not reply to communications or attend board meetings. . **<span style=""text-decoration:underline;"">Decisions</span>**; Each board member has a vote in decisions, which are taken by a majority vote. . **<span style=""text-decoration:underline;"">Communications</span>**; The board agrees to meet **[once a year]** (also via online meeting). The board is informed at least **[once a year]** by the Admin Team on QuTiP development and other activities (via email in the qutip-board channel). . ### 4. Non-profit Support; Since 2018, QuTiP is an affiliated project of [NumFOCUS](https://numfocus.org/), a 501(c)(3) nonprofit organization registered in the USA. The mission of NumFOCUS is to promote open practices in research, data, and scientific computing **[Unitary Fund](http://unitary.fund/)** pledges to support the QuTiP project as a fiscally sponsored project. QuTiP remains an affiliated project of NumFOCUS. [Unitary Fund](http://unitary.fund/) is a 501(c)(3) nonprofit organization registered in the USA working to create a quantum technology ecosystem that benefits the most people. Due to its role in the quantum software community, Unitary Fund pledges to: . * Promote the knowledge of QuTiP in the quantum software and sci-dev community.; * Provide scientific and technical software advice upon request of the Admin team and Board. ; * Provide logistic and financial support for code projects and meetings (subject to request by the QuTiP admins and availability of Unitary Fund funds). ; * Accept financial support on behalf of the QuTiP project. These funds will be allocated to and managed by the QuTiP admins on board’s approval in coordination with Unitary Fund. ; * Provide access to expert legal advice (subject to request by the QuTiP board or admin team and availability of Unitary Fund funds) through its legal counsel, useful for matters related to licensing, copyright, collaborations with industry and to protect the QuTiP brand and project.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1373:13986,access,access,13986,https://qutip.org,https://github.com/qutip/qutip/issues/1373,1,['access'],['access']
Security,"automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**. Update ipython used to build documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1780:4482,secur,security,4482,https://qutip.org,https://github.com/qutip/qutip/pull/1780,2,"['Secur', 'secur']","['Security', 'security']"
Security,"b47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.2.0&new-version=8.3.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:9067,secur,security-vulnerabilities,9067,https://qutip.org,https://github.com/qutip/qutip/pull/1654,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"building extension ""qutip.cy.graph_utils"" sources; > building extension ""qutip.cy.interpolate"" sources; > building extension ""qutip.cy.spmath"" sources; > building extension ""qutip.cy.heom"" sources; > building extension ""qutip.cy.math"" sources; > building extension ""qutip.cy.spconvert"" sources; > building extension ""qutip.cy.ptrace"" sources; > building extension ""qutip.control.cy_grape"" sources; > building data_files sources; > build_src: building npy-pkg config files; > running build_py; > copying qutip/version.py -> build/lib.linux-x86_64-3.5/qutip; > copying build/src.linux-x86_64-3.5/qutip/*config*.py ->; > build/lib.linux-x86_64-3.5/qutip; > running build_ext; > customize UnixCCompiler; > customize UnixCCompiler using build_ext; > building 'qutip.cy.spmatfuncs' extension; > compiling C sources; > C compiler: gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall; > -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2; > -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer; > -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions; > -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error; > -Wp,-D_REENTRANT -fPIC; >; > compile options:; > '-I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/include/python3.5m -c'; > extra options: '-w -ffast-math -O3 -march=native -funroll-loops'; > gcc: qutip/cy/src/zspmv.c; > qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or; > directory; > #include <complex.h>; > ^; > compilation terminated.; > qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or; > directory; > #include <complex.h>; > ^; > compilation terminated.; > error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall; > -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectoriz",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639#issuecomment-275734243:4561,secur,security,4561,https://qutip.org,https://github.com/qutip/qutip/issues/639#issuecomment-275734243,1,['secur'],['security']
Security,"com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:5821,secur,security,5821,https://qutip.org,https://github.com/qutip/qutip/pull/2392,2,"['Secur', 'secur']","['Security', 'security']"
Security,"com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b""><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/229"">#229</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b""><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=""https://redirect.github.com/certifi/python-certifi/issues/228"">#228</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0""><code>8b3d7ba</code></a> 2023.05.07</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8""><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=""https://redirect.github.com/certifi/python-certifi/issues/224"">#224</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8""><code>c2fc3b1</code></a> Create a Security Policy (<a href=""https://redirect.github.com/certifi/python-certifi/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01""><code>c211ef4</code></a> Set up permissions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5""><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=""https://redirect.github.com/certifi/python-certifi/issues/219"">#219</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec""><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22"">compare view</a></li>; </ul>; </details>; <b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:1606,Secur,Security,1606,https://qutip.org,https://github.com/qutip/qutip/pull/2205,1,['Secur'],['Security']
Security,"compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.14&new-version=1.26.17)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:6929,secur,security,6929,https://qutip.org,https://github.com/qutip/qutip/pull/2236,2,"['Secur', 'secur']","['Security', 'security']"
Security,"compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2246:3582,secur,security,3582,https://qutip.org,https://github.com/qutip/qutip/pull/2246,2,"['Secur', 'secur']","['Security', 'security']"
Security,"compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.18&new-version=1.26.19)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:5718,secur,security,5718,https://qutip.org,https://github.com/qutip/qutip/pull/2458,2,"['Secur', 'secur']","['Security', 'security']"
Security,"d so will not automatically turn itself into one. Having this produced very inconsistent behaviour when multiplying by numpy arrays, or otherwise dealing with numpy functions. If you _need_ `Qobj` to be array, be explicit and call `Qobj.full()`. Notable changes in `Qobj`:; - matrix multiplication now contracts to a scalar if doing `bra @ ket`; - matrix multiplication no longer contracts 1D subspaces, but the new `Qobj.contract()` will do this; - arithmetic operations are much more strict about enforcing `Qobj.type`-safety; - `Qobj` understands the `@` operator to mean matrix multiplication, but also maintains the same behaviour of treating `Qobj * Qobj` as matrix multiplication. Package organisation:; - the solvers are now physically contained in `qutip.solve`, but are still logically available in the `qutip` namespace. This means that direct imports (like `from qutip.mesolve import mesolve`) will fail (it becomes `from qutip.solve.mesolve import mesolve`), but the ""proper"" unqualified access `from qutip import mesolve` remains unchanged. This is for internal code organisation purposes. The integral type used as the indices in the `CSR` type is now done by simple typedef in the files `qutip/core/data/base.{pyx,pxd}`, so changes it in those two files at compile-time will allow you to switch between 32-bit and 64-bit. The C++ backing source file `zspmv.cpp` and its associated header are renamed to `matmul_csr_vector` to match the new data-layer naming conventions, but more importantly, the functions are now templated over integral types so they will ""magically"" work at either size. In general, `setuptools` likes to link dynamically (on Linux and Mac, but not Windows), and so the templates have to be made explicit, rather than allowing Cython to generate only the necessary one. _Note:_ I'll make a PR to push deprecation warnings onto `eseries`, `essolve` and all other removals or renames that don't already have one in `master`, ready for when we drop QuTiP 4.6.0. -----",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332:2028,access,access,2028,https://qutip.org,https://github.com/qutip/qutip/pull/1332,1,['access'],['access']
Security,"da3/include/python3.5m/Python.h:11, from; > qutip/cy/spmatfuncs.c:27:; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61:; > fatal error: limits.h: No such file or directory #include_next; > <limits.h> /* recurse down to the real one */ ^ compilation; > terminated. In file included from; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/syslimits.h:7:0,; > from; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:34,; > from /home/jakeargent/anaconda3/include/python3.5m/Python.h:11, from; > qutip/cy/spmatfuncs.c:27:; > /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61:; > fatal error: limits.h: No such file or directory #include_next; > <limits.h> /* recurse down to the real one */ ^ compilation; > terminated. error: Setup script exited with error: Command ""gcc; > -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes; > -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC; > -Wformat -Wformat-security -fno-omit-frame-pointer; > -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions; > -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error; > -Wp,-D_REENTRANT -fPIC; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/include/python3.5m -c; > qutip/cy/spmatfuncs.c -o; > build/temp.linux-x86_64-3.5/qutip/cy/spmatfuncs.o -w -ffast-math -O3; > -march=native -funroll-loops"" failed with exit status 1|; >; > Then, I cloned the qutip/qutip repository, and tried to build a wheel; > with |python setup.py bdist_wheel| under the qutip directory. Which; > gave me the following log:; >; > `running bdist_wheel; > running build; > running config_cc; > unifing config_cc, config, build_clib, build_ext, build commands; > --compiler options; > running config_fc; > unifi",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639#issuecomment-275734243:2260,secur,security,2260,https://qutip.org,https://github.com/qutip/qutip/issues/639#issuecomment-275734243,1,['secur'],['security']
Security,"de>0ee5eb4</code></a> satisfy formatter, linter, and strict mypy</li>; <li><a href=""https://github.com/pallets/jinja/commit/20477c63575175196bfc8103f223cc9f5642595d""><code>20477c6</code></a> update project files (<a href=""https://redirect.github.com/pallets/jinja/issues/5457"">#5457</a>)</li>; <li><a href=""https://github.com/pallets/jinja/commit/e491223739dedbb1f4fc6a71340c1484e149d947""><code>e491223</code></a> update pyyaml dev dependency</li>; <li><a href=""https://github.com/pallets/jinja/commit/36f98854c721f98ba103f97f65a8a098da5af0d7""><code>36f9885</code></a> fix pr link</li>; <li>Additional commits viewable in <a href=""https://github.com/pallets/jinja/compare/3.1.3...3.1.4"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.3&new-version=3.1.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:3831,secur,security-vulnerabilities,3831,https://qutip.org,https://github.com/qutip/qutip/pull/2418,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"de>61127bb</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19268"">#19268</a> from charris/backport-19264</li>; <li><a href=""https://github.com/numpy/numpy/commit/143d45fff3ed9e051bdeef7bdb4df38025ea7d1c""><code>143d45f</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/numpy/numpy/issues/19269"">#19269</a> from charris/backport-19228</li>; <li><a href=""https://github.com/numpy/numpy/commit/d80e4738f781a1d206bbc04a2e863299e5f2e104""><code>d80e473</code></a> BUG: Removed typing for == and != in dtypes</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.19.5...v1.21.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.19.5&new-version=1.21.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:4674,secur,security-vulnerabilities,4674,https://qutip.org,https://github.com/qutip/qutip/pull/1767,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"dges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.2&new-version=3.1.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2291:5274,secur,security,5274,https://qutip.org,https://github.com/qutip/qutip/pull/2291,2,"['Secur', 'secur']","['Security', 'security']"
Security,"dges/compatibility_score?dependency-name=jinja2&package-manager=pip&previous-version=3.1.3&new-version=3.1.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:5556,secur,security,5556,https://qutip.org,https://github.com/qutip/qutip/pull/2418,2,"['Secur', 'secur']","['Security', 'security']"
Security,"e view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pygments&package-manager=pip&previous-version=2.14.0&new-version=2.15.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2201:15677,secur,security,15677,https://qutip.org,https://github.com/qutip/qutip/pull/2201,2,"['Secur', 'secur']","['Security', 'security']"
Security,"e view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.28.2&new-version=2.31.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:9146,secur,security,9146,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Secur', 'secur']","['Security', 'security']"
Security,"e-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC. compile options: '-I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c'; extra options: '-w -ffast-math -O3 -march=native -funroll-loops'; gcc: qutip/cy/src/zspmv.c; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or directory; #include <complex.h>; ^; compilation terminated.; error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c qutip/cy/src/zspmv.c -o build/temp.linux-x86_64-3.5/qutip/cy/src/zspmv.o -w -ffast-math -O3 -march=native -funroll-loops"" failed with exit status 1`. Well, all of them seem to fail with a similar issue. Whatever is exit status 1. ([This](http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c) is the SO solution I followed, it claims that error code is related to operation not permitted or setuptools not being installed. I upgraded the setuptools, pip doesn't work with sudo (I'm guessing it should",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:5159,secur,security,5159,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['secur'],['security']
Security,"ects.com/en/3.1.x/changes/#version-3-1-4"">https://jinja.palletsprojects.com/en/3.1.x/changes/#version-3-1-4</a></p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code> greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces. Regardless of any validation done by Jinja, user input should never be used as keys to this filter, or must be separately validated first. GHSA-h75v-3vvj-5mfj</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/pallets/jinja/blob/main/CHANGES.rst"">jinja2's changelog</a>.</em></p>; <blockquote>; <h2>Version 3.1.4</h2>; <p>Released 2024-05-05</p>; <ul>; <li>The <code>xmlattr</code> filter does not allow keys with <code>/</code> solidus, <code>&gt;</code>; greater-than sign, or <code>=</code> equals sign, in addition to disallowing spaces.; Regardless of any validation done by Jinja, user input should never be used; as keys to this filter, or must be separately validated first.; :ghsa:<code>h75v-3vvj-5mfj</code></li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pallets/jinja/commit/dd4a8b5466d8790540c181590b14db4d4d889d57""><code>dd4a8b5</code></a> release version 3.1.4</li>; <li><a href=""https://github.com/pallets/jinja/commit/0668239dc6b44ef38e7a6c9f91f312fd4ca581cb""><code>0668239</code></a> Merge pull request from GHSA-h75v-3vvj-5mfj</li>; <li><a href=""https://github.com/pallets/jinja/commit/d655030770081e2dfe46f90e27620472a502289d""><code>d655030</code></a> disallow invalid characters in keys to xmlattr filter</li>; <li><a href=""https://github.com/pallets/jinja/commit/a7863ba9d3521f1450f821119c50d19d7ecea329""><code>a7863ba</code></a> add ghsa links</li>; <li><a href=""https://github.com/pallets/jinja/commit/b5c98e78c2ee7d2bf0aa06d29ed9bf7082de9cf4""><code>b5c98e7</code></a> start version 3.1.4</li>; <li><a href=""https://git",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2418:1515,validat,validation,1515,https://qutip.org,https://github.com/qutip/qutip/pull/2418,2,['validat'],"['validated', 'validation']"
Security,"elog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.18 (2023-10-17)</h1>; <ul>; <li>Made body stripped from HTTP requests changing the request method to GET after HTTP 303 &quot;See Other&quot; redirect responses.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/9c2c2307dd1d6af504e09aac0326d86ee3597a0b""><code>9c2c230</code></a> Release 1.26.18 (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3159"">#3159</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b594c5ceaca38e1ac215f916538fb128e3526a36""><code>b594c5c</code></a> Merge pull request from GHSA-g4mx-q9vg-27p4</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/944f0eb134485f41bc531be52de12ba5a37bca73""><code>944f0eb</code></a> [1.26] Use vendored six in urllib3.contrib.securetransport</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.17...1.26.18"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.17&new-version=1.26.18)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2246:1457,secur,securetransport,1457,https://qutip.org,https://github.com/qutip/qutip/pull/2246,1,['secur'],['securetransport']
Security,enblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python; - python-dateutil; - python-symengine; - pytz; - pyyaml; - pyzmq; - qt; - qtawesome; - qtconsole; - qtpy; - qutip; - r-base; - r-clisymbols; - readline; - reportlab; - requests; - rope; - scikit-learn; - scipy; - send2trash; - setuptools; - simplegeneric; - sip; - six; - snowballstemmer; - sphinx; - sphinxcontrib; - sphinxcontrib-applehelp; - sphinxcontrib-devhelp; - sphinxcontrib-htmlhelp; - sphinxcontrib-jsmath; - sphinxcontrib-qthelp; - sphinxcontrib-serializinghtml; - sphinxcontrib-websupport; - spyder; - spyder-kernels; - sqlite; - symengine; - symmetrica; - sympow; - sympy; - tensorboard; - tensorflow; - tensorflow-base; - tensorflow-estimator; - termcolor; - terminado; - testpath; - tk; - tktable; - tornado; - traitlets; - typed-ast; - typing; - urllib3; - wcwidth; - webencodings; - werkzeug; - wheel; - wrapt; - wurlitzer; - xz; - yaml; - zeromq; - tqdm; - zlib; - zstd; - pytest; - numba; - hypothesis; - pytest-cov; - mypy; - pytest-xdist; - watchdog; - pytest-runner; - coveralls; - doctr; - gitpython; - pre-commit; - tox; - cookiecutter; - pdbpp; - sphinx-autobuild; - sphinx-autodoc-typehints; - sphinx_rtd_theme; - travis-encrypt; - twine; - nbval; - nbsphinx; - watermark; - ipyparallel; - unittest2pytest; - pytest-benchmark; - pytest-repeat; - pytest-subtests; - fastcore; - fastscript; - asttokens; - cached-property; - crayons; - executing; - flask; - humanize; - ipywidgets; - itsdangerous; - jsonpickle; - jupyter; - littleutils; - nbconvert; - outdated; - portpicker; - sqlalchemy; - widgetsnbextension; - nbdime; - rich; - mayavi; - pip:; - birdseye; - icecream; - nbdev==1.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:3150,encrypt,encrypt,3150,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['encrypt'],['encrypt']
Security,"ependabot.com/ipython/ipython/issues/13412"">#13412</a> from bnavigator/backport-inspect</li>; <li><a href=""https://github.com/ipython/ipython/commit/4f26796cf368d24edadbb3d62e052e6aa4ddc820""><code>4f26796</code></a> fix xxlimited_35 import name</li>; <li><a href=""https://github.com/ipython/ipython/commit/77ca4a6312374f0659fb6973925e5b696d5dc74e""><code>77ca4a6</code></a> don't run nose-based iptest on py310, only pytest</li>; <li><a href=""https://github.com/ipython/ipython/commit/533e5094aa36b51549cf6a316fc439c6404643c9""><code>533e509</code></a> back to decorator skip</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.22.0...7.31.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.22.0&new-version=7.31.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1780:2389,secur,security-vulnerabilities,2389,https://qutip.org,https://github.com/qutip/qutip/pull/1780,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"ers of files, doing different work before and after will all cause the segfault to change, and may mask it.; - As annoying as they are, segfaults are actually the _good_ case of the bug - the worst is when we have invalid memory writes but _no_ segfault, because then we have memory corruption that's gone undetected. ## Thoughts about #1120. This issue is still present using Andrew's `Malloc.py` file as of the current master branch (commit 624405e7), and is in QuTiP 4.6.0 and most previous versions. I have been able to reproduce the segfaults with Python 3.7, but not Python 3.8, and I can reproduce it with all allowable values of `PYTHONMALLOC`. The most telling is `pymalloc_debug`, where the entire operation completes (it prints ""500""), and _then_ the fault occurs. This along with the error message should hopefully make it clear that an out-of-bounds write occurs occasionally, and it is temperamental where exactly this happens. This is typically not detected until the object is freed, when the Python allocators do a little bit of checksumming. I think that in _all_ cases we're seeing the failure come from the garbage collection, but I can't be 100% certain - note that this almost certainly means the failure is somewhere completely different, and it's only _detected_ at garbage collection. Here is the output of a Python 3.8 crash on the `Malloc.py` file with some additional debugging enabled. This is with Python 3.8.8, Numpy 1.19.2, Scipy 1.6.2 and MKL:; ```; jake@tauros$ PYTHONMALLOC=pymalloc_debug python -Xfaulthandler Malloc.py; 500; Debug memory block at address p=0x7fa2e02de610: API 'r'; 61503 bytes originally requested; The 7 pad bytes at p-7 are FORBIDDENBYTE, as expected.; The 8 pad bytes at tail=0x7fa2e02ed64f are not all FORBIDDENBYTE (0xfd):; at tail+0: 0x00 *** OUCH; at tail+1: 0x00 *** OUCH; at tail+2: 0x00 *** OUCH; at tail+3: 0x00 *** OUCH; at tail+4: 0x00 *** OUCH; at tail+5: 0x00 *** OUCH; at tail+6: 0x00 *** OUCH; at tail+7: 0x00 *** OUCH; Data at p",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807:2325,checksum,checksumming,2325,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826124807,1,['checksum'],['checksumming']
Security,"es/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.0.1&new-version=10.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:17215,secur,security,17215,https://qutip.org,https://github.com/qutip/qutip/pull/2302,2,"['Secur', 'secur']","['Security', 'security']"
Security,"es/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.2.0&new-version=10.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2381:17191,secur,security,17191,https://qutip.org,https://github.com/qutip/qutip/pull/2381,2,"['Secur', 'secur']","['Security', 'security']"
Security,"ests#6258</a></li>; <li><a href=""https://github.com/cpzt""><code>@​cpzt</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6456"">psf/requests#6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4633,secur,security,4633,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['secur'],['security']
Security,"fined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/request",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:4083,secur,security,4083,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Secur', 'secur']","['Security', 'security']"
Security,"fined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>v2.30.0</h2>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""htt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:1512,secur,security,1512,https://qutip.org,https://github.com/qutip/qutip/pull/2164,2,"['Secur', 'secur']","['Security', 'security']"
Security,functools_lru_cache; - blas; - bleach; - bwidget; - bzip2; - c-ares; - ca-certificates; - cairo; - certifi; - cffi; - chardet; - cloudpickle; - compiler-rt; - constantly; - cryptography; - curl; - cycler; - cython; - dbus; - decorator; - defusedxml; - docutils; - entrypoints; - expat; - fastcache; - flake8; - fontconfig; - freetype; - fribidi; - gast; - gettext; - glib; - gmp; - gmpy2; - graphite2; - grpcio; - gsl; - h5py; - harfbuzz; - hdf5; - html5lib; - icu; - idna; - imagesize; - intel-openmp; - ipykernel; - ipython; - ipython_genutils; - isort; - jbig; - jedi; - jinja2; - jpeg; - jsonschema; - jupyter_client; - jupyter_contrib_core; - jupyter_contrib_nbextensions; - jupyter_core; - jupyter_highlight_selected_word; - jupyter_latex_envs; - jupyter_nbextensions_configurator; - keras-applications; - keras-preprocessing; - keyring; - krb5; - lazy-object-proxy; - libcurl; - libcxx; - libcxxabi; - libedit; - libffi; - libgcc; - libgfortran; - libiconv; - libopenblas; - libpng; - libprotobuf; - libsodium; - libssh2; - libtiff; - libxml2; - libxslt; - llvm; - llvm-openmp; - lxml; - make; - markdown; - markupsafe; - matplotlib; - mccabe; - mistune; - mkl; - mkl_fft; - mkl_random; - mock; - mpc; - mpfr; - mpmath; - nbconvert; - nbformat; - ncurses; - nomkl; - notebook; - numpy; - numpy-base; - numpydoc; - olefile; - openblas; - openblas-devel; - openssl; - packaging; - pandas; - pandoc; - pandocfilters; - pango; - pari; - parso; - patsy; - pbr; - pcre; - perl; - pexpect; - pickleshare; - pillow; - pip; - pixman; - prometheus_client; - prompt_toolkit; - protobuf; - psutil; - ptyprocess; - pycodestyle; - pycparser; - pyflakes; - pygments; - pylint; - pyopenssl; - pyparsing; - pyqt; - pyrsistent; - pysocks; - python;,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563:338,certificate,certificates,338,https://qutip.org,https://github.com/qutip/qutip/pull/1558#issuecomment-842089563,1,['certificate'],['certificates']
Security,"g propagation steps from two different propagations). I'm also not sure what using `QobjEvo` does: In the benchmarking, there didn't seem to be any difference whether I wrap my nested lists into `QobjEvo` or not. Is there something specific that `QobjEvo` should enable that I can't do with nested lists?. > QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. That sounds perfect! I might wait for QuTiP 5 to come out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatev",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:8552,access,accessible,8552,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,2,['access'],"['access', 'accessible']"
Security,"ges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.4.0&new-version=10.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:14963,secur,security,14963,https://qutip.org,https://github.com/qutip/qutip/pull/2237,2,"['Secur', 'secur']","['Security', 'security']"
Security,"heel file names with; multiple platform tags</li>; </ul>; <p><strong>0.38.1 (2022-11-04)</strong></p>; <ul>; <li>Removed install dependency on setuptools</li>; <li>The future-proof fix in 0.36.0 for converting PyPy's SOABI into a abi tag was; faulty. Fixed so that future changes in the SOABI will not change the tag.</li>; </ul>; <p><strong>0.38.0 (2022-10-21)</strong></p>; <ul>; <li>Dropped support for Python &lt; 3.7</li>; <li>Updated vendored <code>packaging</code> to 21.3</li>; <li>Replaced all uses of <code>distutils</code> with <code>setuptools</code></li>; <li>The handling of <code>license_files</code> (including glob patterns and default; values) is now delegated to <code>setuptools&gt;=57.0.0</code> (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/466"">#466</a>).; The package dependencies were updated to reflect this change.</li>; <li>Fixed potential DoS attack via the <code>WHEEL_INFO_RE</code> regular expression</li>; <li>Fixed <code>ValueError: ZIP does not support timestamps before 1980</code> when using; <code>SOURCE_DATE_EPOCH=0</code> or when on-disk timestamps are earlier than 1980-01-01. Such; timestamps are now changed to the minimum value before packaging.</li>; </ul>; <p><strong>0.37.1 (2021-12-22)</strong></p>; <ul>; <li>Fixed <code>wheel pack</code> duplicating the <code>WHEEL</code> contents when the build number has changed (<a href=""https://github-redirect.dependabot.com/pypa/wheel/issues/415"">#415</a>)</li>; <li>Fixed parsing of file names containing commas in <code>RECORD</code> (PR by Hood Chatham)</li>; </ul>; <p><strong>0.37.0 (2021-08-09)</strong></p>; <ul>; <li>Added official Python 3.10 support</li>; <li>Updated vendored <code>packaging</code> library to v20.9</li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/pypa/wheel/commit/6f1608dc1a88f00d2390b9044bd655753f39234c""><code>6f1608d</code></a> Created ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2052:1827,attack,attack,1827,https://qutip.org,https://github.com/qutip/qutip/pull/2052,1,['attack'],['attack']
Security,"href=""https://github.com/python-pillow/Pillow/commit/c827f3b30f50bf04fd65daeeba6bbfd56fc7b50e""><code>c827f3b</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7246"">#7246</a> from radarhere/deallocate</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/39a3b1d83edcf826c3864e26bedff5b4e4dd331b""><code>39a3b1d</code></a> Fixed deallocating mask images</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8c1dc819fd91471825da01976ac0e0bc8789590f""><code>8c1dc81</code></a> Update CHANGES.rst [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.4.0...10.0.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.4.0&new-version=10.0.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2237:13238,secur,security-vulnerabilities,13238,https://qutip.org,https://github.com/qutip/qutip/pull/2237,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"in the current `master`. It is likely caused by changes made in #1289. Trying to `import qutip` with OpenMP built produces errors; ```python; In [1]: import qutip; Calibrating OPENMP threshold...; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-1-e01d5608f34f> in <module>; ----> 1 import qutip. ~/code/qutip/qutip/qutip/__init__.py in <module>; 277 print('Calibrating OPENMP threshold...'); 278 thrsh = calculate_openmp_thresh(); --> 279 qutip.configrc.write_rc_key(rc_file, 'openmp_thresh', thrsh); 280; 281 # Load the config file. ~/code/qutip/qutip/qutip/configrc.py in write_rc_key(key, value, section, rc_file); 169 config.read(rc_file); 170 if not config.has_section(section):; --> 171 config.add_section(section); 172 config.set(section, key, str(value)); 173. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in add_section(self, section); 1205 RawConfigParser.add_section by validating if the section name is; 1206 a string.""""""; -> 1207 self._validate_value_types(section=section); 1208 super().add_section(section); 1209. ~/.anaconda3/envs/qutip-dev/lib/python3.8/configparser.py in _validate_value_types(self, section, option, value); 1178 """"""; 1179 if not isinstance(section, str):; -> 1180 raise TypeError(""section names must be strings""); 1181 if not isinstance(option, str):; 1182 raise TypeError(""option keys must be strings""). TypeError: section names must be strings; ```. The issue is probably due to `__init__.py` being out-of-date with regards to the change to how the `qutiprc` file is written. The immediate fix should be very simple, however it highlights a larger problem with our testing - this should have been caught by the OpenMP tests. In this case, I believe that the tests don't see the issue because there is a test in `__init__.py` that doesn't trigger the OpenMP calibration if only there is only 1 CPU. Presumably, we only ever get allocated single-CPU VMs on Travi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470:1009,validat,validating,1009,https://qutip.org,https://github.com/qutip/qutip/issues/1470,1,['validat'],['validating']
Security,"ing</code>. This should not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/matthewarmand""><code>@​matthewarmand</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6258"">psf/requests#6258</a></li>; <li><a href=""https://github.com/cpzt""><code>@​cpzt</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6456"">psf/requests#6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>app",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4250,Secur,Security,4250,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['Secur'],['Security']
Security,"issions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5""><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=""https://redirect.github.com/certifi/python-certifi/issues/219"">#219</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec""><code>e0b9fc5</code></a> remove paragraphs about 1024-bit roots from README</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2022.12.07...2023.07.22"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:2819,secur,security-vulnerabilities,2819,https://qutip.org,https://github.com/qutip/qutip/pull/2205,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"its.h:34,; from /home/jakeargent/anaconda3/include/python3.5m/Python.h:11,; from qutip/cy/spmatfuncs.c:27:; /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61: fatal error: limits.h: No such file or directory; #include_next <limits.h> /* recurse down to the real one */; ^; compilation terminated.; In file included from /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/syslimits.h:7:0,; from /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:34,; from /home/jakeargent/anaconda3/include/python3.5m/Python.h:11,; from qutip/cy/spmatfuncs.c:27:; /usr/lib64/gcc/x86_64-solus-linux/6.3.0/include-fixed/limits.h:168:61: fatal error: limits.h: No such file or directory; #include_next <limits.h> /* recurse down to the real one */; ^; compilation terminated.; error: Setup script exited with error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c qutip/cy/spmatfuncs.c -o build/temp.linux-x86_64-3.5/qutip/cy/spmatfuncs.o -w -ffast-math -O3 -march=native -funroll-loops"" failed with exit status 1; `. Then, I cloned the qutip/qutip repository, and tried to build a wheel with `python setup.py bdist_wheel` under the qutip directory. Which gave me the following log:. `running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcomp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:1993,secur,security,1993,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['secur'],['security']
Security,"ixODEPropagator`](https://github.com/qucontrol/krotov/blob/cfe6b108708cdfd29ab7eee24f2112977b951ed2/src/krotov/propagators.py#L162) which would be nice to eliminate. Lastly, having dense internal storage for states might actually give the same speedup as we've demonstrated in https://qucontrol.github.io/krotov/v1.2.1/notebooks/09_example_numpy.html for doing Krotov with numpy arrays instead of Qobj's -- potentially even more speedup, in fact, since with numpy now *everything* is dense (including the Hamiltonian), whereas the best thing to do numerically would be to do sparse-matrix-dense-vector operations (which is what we do in Fortran, incidentally). > In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. Just to be clear: there's two interconnected issues here: One is just being ""reentrant"" in the sense that I can safely have multiple `mesolve`'s run in parallel. This doesn't seem to be a problem for `mesolve` as a whole (propagating over the entire time grid). The other issue, at a lower level is whether I can keep the internal state of the integrator (`scipy.integrate.ode` or whatever else `mesolve` might be using) when propagating a single time step (and whether I can have multiple integrators to run in parallel that each safely keep track of their own state). That comes down to the integrator itself being ""reentrant"", of course. Certainly, calling `mesolve` in a loop (`In [19]`) doesn't keep the internal state of the integrator, hence the overhead between `In [21]` compared to `In [18]`. I wouldn't expect it to, of course, but the question is whether a refactoring of `mesolves` internals into an object tha",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:5588,access,access,5588,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['access'],['access']
Security,"kflows/build.yml`, while `MANIFEST.in` and a new file `VERSION` were also touched. ### Distribution changes:; - there is a GitHub Action which will build all the wheels for CPython 3.6+ on Linux (`manylinux1` x86 and x86_64), macOS and Windows (32- and 64-bit). This action is triggered manually, and the wheels will be available for download afterwards. Optionally, the action will push to PyPI, making the version immediately available on `pip` by binary release.; - `.cpp` files are now distributed with the wheels but not added to source control. This is a step towards a full Cython-free delivery of the QuTiP source (binary releases never require Cython), but right now I think our `setuptools` machinery doesn't quite handle that. ### Changes to `setup.py`; - all package metadata is moved out into `setup.cfg`, which is easier to read and change, and modern `setuptools`' preferred way of doing things; - all directory-tree access is done in a completely platform-agnostic manner, rather than just hoping that Unix-style paths will work on Windows; - the file is tidied and structured into a small script, with separated components; - build requirements are moved into `pyproject.toml` including listing `setuptools` as the build method, in accordance with PEP 517. Any PEP 517-complaint installation and build process will now _enforce_ the presence of `numpy`, `scipy` and `cython` (and `setuptools`) before attempting the build, so no more need for attempted import guards.; - packages are now discovered rather than explicitly stated, using standard `setuptools` machinery; - Cython extension modules are now discovered rather than explicitly stated, using globbing; - version information is now stored in a single-line file `VERSION`. This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465:1819,access,access,1819,https://qutip.org,https://github.com/qutip/qutip/pull/1465,1,['access'],['access']
Security,"kup table is in `Dispatcher._lookup`. These are marked as private, because messing around with them will almost certainly cause the dispatcher to stop working. Only one specialisation needs to be defined for a dispatcher to work with _all_ data types known by `data.to`. We achieve this because `data.to` guarantees that all possible conversions between data types will exist, so `data.Dispatcher` can always convert its inputs into those which will match one of its known specialisations. Within the initialisation of the data layer, we use a ""magic"" `_defer` keyword argument to `add_specialisations` to break a circular dependency. This is because the ""type"" modules `data.csr` and `data.dense` depend on some mathematical modules (e.g. `add` and `matmul`) to provide the `__add__` and similar methods on the types. For ease of development we want the dispatchers to be defined in the same modules that all the specialisations are (though this is not at all necessary), but the dispatchers require `data.to` to be populated with the types before specialisations can be added. The `_defer` keyword here just defers the building of the lookup table until an explicit call to `Dispatcher.rebuild_lookup()`, breaking the cycle. The user will never need to do this, because by the time they receive the `Dispatcher` object, `data.to` is already initialised to a minimum degree. #### Efficiency notes. The specialisations returned by the `__getitem__` lookups are not significantly faster than just calling the dispatcher directly, because the bulk of the heavy lifting is done when `add_specialisations` or `rebuild_lookup` is called. On call, the generic signature `(*args, **kwargs)` has to be bound to the actual signature of the underlying operation, regardless of whether the specialisation has already been found. At the Cython level there is short-circuit access to the call machinery in the specialisations themselves, but this cannot be safely exposed outside of the `Dispatcher` class itself.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:17574,access,access,17574,https://qutip.org,https://github.com/qutip/qutip/pull/1338,2,"['access', 'expose']","['access', 'exposed']"
Security,"latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:3010,Authoriz,Authorization,3010,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Authoriz'],['Authorization']
Security,"lf.coeff_get, Code, file_ = _compiled_coeffs(; /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:94: in _compiled_coeffs; coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...f double t_off = self.t_off\n cdef double tp = self.tp\n\n coeff[0] = exp(-(t-t_off)**2 / (2 * tp*tp))\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:16364,hash,hash,16364,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Security,"lf.coeff_get, Code, file_ = _compiled_coeffs(; /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:94: in _compiled_coeffs; coeff_obj, filename = _import_str(code, ""cqobjevo_compiled_coeff_"",; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:21494,hash,hash,21494,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Security,"lly by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:5162,secur,security,5162,https://qutip.org,https://github.com/qutip/qutip/pull/1563,20,"['Secur', 'secur']","['Security', 'security']"
Security,"mainly developed for users with issues compiling; (i.e. on Windows). Though things have moved on so much since we started; trying that as a solution. On 26 March 2017 at 02:01, Paul Nation <notifications@github.com> wrote:. > Oh sorry, I thought you were reporting the sys gcc, not the conda one.; >; > Conda-forge and QuTiP are tested heavily against Ubuntu 14.04, so if any; > platform works, it should be that one.; >; > As I originally suspected, the problem comes from the Cython code.; > Specifically for the sparse matrix math. The fact that you can build it; > yourself suggests a binary incompatibility. However, again, we test; > against 14.04, so I am hard pressed to think about what the issue could be.; > gdb might be able to hunt down where the dump occurs.; >; > On Mar 25, 2017 18:27, ""Michael Goerz"" <notifications@github.com> wrote:; >; > Since it's the python from the conda package, I'm assuming that's because; > Continuum created the linux package on a Redhat system. GCC is identified; > like that on both of the workstations. But yeah, my guess would be that; > there is some shared library that's compiled in a way that's incompatible; > with the rest of the system. Is there any linux utility that would allow to; > determine which library is being accessed at the moment of the crash? Some; > invocation of ldd?; >; > —; > You are receiving this because you commented.; >; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/674#issuecomment-289249308>, or; > mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqT0F1WSzbd-; > hOyso9XQM0K5ldiiwks5rpbEBgaJpZM4MpI4Z>; > .; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/674#issuecomment-289250540>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AIxX7avUu3PEQJN5JidXFS1DT4HHW3g_ks5rpbjngaJpZM4MpI4Z>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/674#issuecomment-289852411:1504,access,accessed,1504,https://qutip.org,https://github.com/qutip/qutip/issues/674#issuecomment-289852411,1,['access'],['accessed']
Security,"me out, or if these things are already in `master`, I'll see if I can maybe revisit `DensityMatrixODEPropagator` and maybe also add something for the Hilbert space case (whatever `sesolve` is doing internally). As an aside, I was actually surprised how much better `DensityMatrixODEPropagator` performs compared to looping over `mesolve` (`In [29]` vs `In [21]`): Since the `DensityMatrixODEPropagator` also re-initializes `scipy.integrate.ode` in every time steps, it would seem like the only difference between the two is the overhead of `mesolve` deciding that it has to handle the specific case of density matrix propagation. That might be something to keep an eye on in future QuTiP development: Ideally, calling `mesolve` would have negligible overhead compared to manually doing whatever `mesolve` does internally for a particular case. > We're unlikely to add `yield` to `mesolve` directly because that's a very breaking change to one of QuTiP's core functions (we can't return from a generator, or at least not ergonomically), but we are splitting up the `mesolve` monolith into a much more modular architecture, and making it more user-accessible. The other advantage of this is that the integrator component will just be one element of a composable system, so we'll not be tied to scipy integrators any more. I would absolutely not expect you to modifying how `mesolve` works directly. In fact, I would strongly recommend leaving the `mesolve` interface unchanged. The internal refactoring is all I'm after here. @jakelishman in https://github.com/qutip/qutip/issues/1571#issuecomment-859917462:. > I also note that I'm not replying to the thread I thought I was - I thought I was in `krotov`! For my response to the discussion points:. Yeah, sorry the discussion got a little confused between what I was suggesting in https://github.com/qucontrol/krotov/issues/93 for myself to try out (adding a `yield` to `mesolve` as a dirty hack) and the discussion here about how to address the under",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243:9849,access,accessible,9849,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-860254243,1,['access'],['accessible']
Security,"n. qutip keeps configuration (e.g. for openmp) in a config file handled in configrc.py. The default location is in the home dir, with; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L36; setting the dir to `~/.qutip` and; https://github.com/qutip/qutip/blob/d2f1ed57d13bd35055d72f3f6b3418c962491bd9/qutip/configrc.py#L38; setting the config file to `~/.qutip/qutiprc`. This forces Linux distributions to do more work when building in a chroot. For instance Debian build chroots set the ""home"" directory to `/nonexistent`, and then building docs fails with; ```; PermissionError: [Errno 13] Permission denied: '/nonexistent'; ```; since it can't create `/nonexistent/.qutip`. In practice that's not a great problem since when building docs for the package, we can set `HOME=$BUILDDIR` to place the config location in the build dir (which is writable) instead of `/nonexistent`. However there is a standardized location for config files which might be worth considering instead. The freedesktop.org specification at https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html identifies locations for config and data files. Config files can be located under (one of) `$XDG_CONFIG_DIRS` for system configuration, or under `$XDG_CONFIG_HOME` for user configuration. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. In python XDG is accessible from the xdg package (in debian, the python3-xdg package). So the XDG equivalent of ; ```; qutip_conf_dir = os.path.join(os.path.expanduser(""~""), '.qutip'); ```; could be done with; ```; from xdg import XDG_CONFIG_HOME; ...; qutip_conf_dir = os.path.join(XDG_CONFIG_HOME, '.qutip'); ```; A more sophisticated method could be set up to also check XDG_CONFIG_DIRS instead (XDG_CONFIG_HOME is the first entry in the list defined in XDG_CONFIG_DIRS). ### Your Environment. ```shell; QuTiP Version: 4.7.0; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1876:1464,access,accessible,1464,https://qutip.org,https://github.com/qutip/qutip/issues/1876,1,['access'],['accessible']
Security,"ndabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); - `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language; - `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language; - `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language; - `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language. You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>. **Changelog**; Update the version of numpy used for documentation builds to numpy 1.21.0.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:6767,secur,security,6767,https://qutip.org,https://github.com/qutip/qutip/pull/1767,2,"['Secur', 'secur']","['Security', 'security']"
Security,"ns; > -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error; > -Wp,-D_REENTRANT -fPIC; >; > compile options:; > '-I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/include/python3.5m -c'; > extra options: '-w -ffast-math -O3 -march=native -funroll-loops'; > gcc: qutip/cy/src/zspmv.c; > qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or; > directory; > #include <complex.h>; > ^; > compilation terminated.; > qutip/cy/src/zspmv.c:2:21: fatal error: complex.h: No such file or; > directory; > #include <complex.h>; > ^; > compilation terminated.; > error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall; > -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2; > -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer; > -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions; > -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error; > -Wp,-D_REENTRANT -fPIC; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include ; >; > -I/home/jakeargent/anaconda3/include/python3.5m -c; > qutip/cy/src/zspmv.c -o; > build/temp.linux-x86_64-3.5/qutip/cy/src/zspmv.o -w -ffast-math -O3; > -march=native -funroll-loops"" failed with exit status 1`; >; > Well, all of them seem to fail with a similar issue. Whatever is exit; > status 1. (This; > <http://stackoverflow.com/questions/35991403/python-pip-install-gives-command-python-setup-py-egg-info-failed-with-error-c> ; >; > is the SO solution I followed, it claims that error code is related to; > operation not permitted or setuptools not being installed. I upgraded; > the",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639#issuecomment-275734243:5627,secur,security,5627,https://qutip.org,https://github.com/qutip/qutip/issues/639#issuecomment-275734243,1,['secur'],['security']
Security,"nsure HTTP/2 support is developed sustainably and maintained for the long-haul.</p>; <p>Thank you for your support.</p>; <h2>Changes</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19</a></p>; <p>Note that due to an issue with our release automation, no <code> multiple.intoto.jsonl</code> file is available for this release.</p>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/1.26.19/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h2>1.26.19 (2024-06-17)</h2>; <ul>; <li>Added the <code>Proxy-Authorization</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>.</li>; <li>Fixed handling of OpenSSL 3.2.0 new error message for misconfiguring an HTTP proxy as HTTPS. (<code>[#3405](https://github.com/urllib3/urllib3/issues/3405) &lt;https://github.com/urllib3/urllib3/issues/3405&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/d9d85c88aa644af56d5e129634e750ce76e1a765""><code>d9d85c8</code></a> Release 1.26.19</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/8528b63b6fe5cfd7b21942cf988670de68fcd8c0""><code>8528b63</code></a> [1.26] Fix downstream tests (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3409"">#3409</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468""><code>40b6d16</code></a> Merge pull",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:1780,Authoriz,Authorization,1780,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['Authoriz'],['Authorization']
Security,"ode></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6687"">#6687</a> from psf/dependabot/github_actions/github/codeql-act...</li>; <li><a href=""https://github.com/psf/requests/commit/60047ade64b0b882cbc94e047198818ab580911e""><code>60047ad</code></a> Bump github/codeql-action from 3.24.0 to 3.25.0</li>; <li><a href=""https://github.com/psf/requests/commit/31ebb8102c00f8cf8b396a6356743cca4362e07b""><code>31ebb81</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6682"">#6682</a> from frenzymadness/pytest8</li>; <li>Additional commits viewable in <a href=""https://github.com/psf/requests/compare/v2.31.0...v2.32.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=requests&package-manager=pip&previous-version=2.31.0&new-version=2.32.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:10151,secur,security-vulnerabilities,10151,https://qutip.org,https://github.com/qutip/qutip/pull/2434,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"ode></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/f8df5303fa9daf40cf8bfe232403cb40389d8f8f""><code>f8df530</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7672"">#7672</a> from nulano/imagefont-negative-crop</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/24e9485e6bb733a1a816f228dc75fd0086a93e19""><code>24e9485</code></a> Merge pull request <a href=""https://redirect.github.com/python-pillow/Pillow/issues/7671"">#7671</a> from radarhere/imagetransform</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/10.0.1...10.2.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=10.0.1&new-version=10.2.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2302:15490,secur,security-vulnerabilities,15490,https://qutip.org,https://github.com/qutip/qutip/pull/2302,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"patibility_score?dependency-name=certifi&package-manager=pip&previous-version=2023.7.22&new-version=2024.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot show <dependency name> ignore conditions` will show all of the ignore conditions of the specified dependency; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483:4817,secur,security,4817,https://qutip.org,https://github.com/qutip/qutip/pull/2483,2,"['Secur', 'secur']","['Security', 'security']"
Security,"plement custom measurements and pass a callback function (for example to work with time-dependent Hamiltonians etc). According to the [documentation](http://qutip.org/docs/4.1/apidoc/functions.html#module-qutip.mesolve). > An instance of the class qutip.Result, which contains either an array result.expect of expectation values for the times specified by tlist, (...), or nothing if a callback function was given in place of operators for which to calculate the expectation values. So to work with callback function, we need to manage the storage by ourselves, for example by defining a global list, as it is done in [this example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe the solution you'd like**. Currently when we pass a list of operators such as. ```python; e_ops = [sigmax(), sigmay(), sigmaz()]; result = mesolve(H, rho0, e_ops=e_ops); ```. We will be able to access expectation value of `sigmax()` in `result.expect[0]`, of `sigmay()` in `result.expect[1]` and of course `sigmaz()` in `result.expect[2]`. Why not capture the custom measurement in similar way?. ```; def customMeasurement(tau, psi):; exp_x = expect(sigmax(), psi); exp_y = expect(sigmaz(), psi); exp_z = expect(sigmay(), psi); energy = expect(H, psi); fidelity = np.abs(psi_ref.overlap(psi))**2.; return [exp_x, exp_y, exp_z, energy, fidelity]; ```. Now it is possible to still get expectation values as before, but in addition we can take more custom measurements (in this example energy and fidelity of state) and access them in exactly the same way for the convenience. The only thing user needs to keep track of is order of operators returned from the callback function. So now it is as before but in addition `result.expect[3]` contains energy and `result.expect[4]` contains fidelity and no custom managed global external lists required as it was in the [example](https://nbviewer.jupyter.org/github/jr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238:1348,access,access,1348,https://qutip.org,https://github.com/qutip/qutip/issues/1238,1,['access'],['access']
Security,"ps://github.com/numpy/numpy/commit/794b36f7e1bf2a8c42774ab0db86a74bd32f674b""><code>794b36f</code></a> Update armccompiler.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/d93b14e3d7abaa1d837825e51671f817788e120f""><code>d93b14e</code></a> Update test_public_api.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/7662c0789cc6a70d5ad4d950ee2e95f3afef7df6""><code>7662c07</code></a> Update <strong>init</strong>.py</li>; <li><a href=""https://github.com/numpy/numpy/commit/311ab52488a7d096ac3bc4c2de0fdae17ecd13ef""><code>311ab52</code></a> Update armccompiler.py</li>; <li>Additional commits viewable in <a href=""https://github.com/numpy/numpy/compare/v1.21.0...v1.22.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=numpy&package-manager=pip&previous-version=1.21.0&new-version=1.22.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940:5292,secur,security-vulnerabilities,5292,https://qutip.org,https://github.com/qutip/qutip/pull/1940,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"pygments/pygments/issues/2373"">#2373</a>)</li>; <li><a href=""https://github.com/pygments/pygments/commit/0e9c87bcf096908956e031f15a4e589e83be1691""><code>0e9c87b</code></a> Update CHANGES</li>; <li><a href=""https://github.com/pygments/pygments/commit/ef0abbaece522732031d61391567c017d48d87b7""><code>ef0abba</code></a> Add PostgreSQL Explain lexer (<a href=""https://redirect.github.com/pygments/pygments/issues/2398"">#2398</a>)</li>; <li><a href=""https://github.com/pygments/pygments/commit/3c6e2af8fbc44bb1ef77389d09118c37faea8746""><code>3c6e2af</code></a> Update CHANGES</li>; <li>Additional commits viewable in <a href=""https://github.com/pygments/pygments/compare/2.14.0...2.15.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pygments&package-manager=pip&previous-version=2.14.0&new-version=2.15.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2201:14077,secur,security-vulnerabilities,14077,https://qutip.org,https://github.com/qutip/qutip/pull/2201,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"python-pillow/Pillow/commit/032d2dc3658f94718109068ac70799313e440754""><code>032d2dc</code></a> Update CHANGES.rst [ci skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/baae9ec4b67c68e3adaf1208cf54e8de5e38a6fd""><code>baae9ec</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/5921"">#5921</a> from radarhere/jpeg_eoi</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/1059eb537639925c96d3245dcd73c106d4266c83""><code>1059eb5</code></a> If appended EOI did not work, do not keep trying</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.3.2...9.0.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=8.3.2&new-version=9.0.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1760:16084,secur,security-vulnerabilities,16084,https://qutip.org,https://github.com/qutip/qutip/pull/1760,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"rator we're looking for. `G` is anti-Hermitian, and so it shares its eigensystem (up to scaling of the eigenvalues) with the Hermitian `i G` and consequently is diagonalised by a unitary formed of its eigenvectors. Now `S = i G / abs(alpha)` is a tridiagonal Hermitian, and with a similarity transformation we can find a _real-symmetric_ tridiagonal `T = P^-1 . S . P` for some diagonal unitary `P` (which is easy to calculate). The reason for scaling out `alpha` here should become clear at the end. The main diagonal of `T` is all zeros, and the first sub- and super-diagonals look like; ```[sqrt(1), -sqrt(2), sqrt(3), -sqrt(4), ...]```; and the diagonal of `P` looks like; ```[i, e^(-1i arg(alpha)), i e^(-2i arg(alpha)), e^(-3i arg(alpha)), ...]```. Now this real-symmetric tridiagonal form is the basis of Hermitian eigenvalue solvers, and has direct entry points in LAPACK (e.g. `?stemr`), which allow us to pass only the main diagonal and the first subdiagonal. Scipy provides convenient wrapped access in Python by `scipy.linalg.eigh_tridiagonal`. This lets us get the full eigensystem of `T`, which is related to that of `G` by dividing the eigenvalues by the scaling factor, and multiplying the eigenvectors by `P` to transform them into the correct basis. We now have a diagonalised matrix `G = Q^-1 . D . Q`, so `exp(G) = Q^-1 . exp(D) . Q`, which is now trivial because `D` is diagonal. Putting all this together allows us to use our knowledge of the problem domain to convert the matrix exponentiation problem into a much simpler real-symmetric tridiagonal eigensystem problem, which gets us a nice big speed up, and it's equivalent up to the tolerance of the eigenvalue solver (~1e-14). Even better for you, a lot of the hard work is done in the eigensystem solver, and I scaled out `alpha` at the start, so we can do a good chunk _without fixing alpha_. That means we can pay the computational cost only once at the start, and then get faster calculations from then on. If I make a t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030:1361,access,access,1361,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-645685030,1,['access'],['access']
Security,"rds, and likely most of it will work from 4.4. In the 5.x series, almost all the intermediary operations should get a speed up as well (`Qobj.__init__` is getting its time slashed, and the line `current_liouvillian += control * operator` may be able to be replaced with one that applies the same in-place calculation optimisations that `mesolve` does internally). One thing you pay a nasty penalty for right now if that internally we'd keep column-stacking/unstacking the state, but in the 5.x branch it'll stop being represented internally by a sparse matrix, and instead it'll be a Fortran-ordered dense matrix, for which the stack/unstack is a free operation. In the form I've written it, this loop is thread-safe already. As it stands in the 4.x series, `mesolve` is re-entrant (I'm fairly sure), but note that it does generally mutate its arguments, especially if you pass a `QobjEvo` Liouvillian as the first argument. As long as you make sure you give each thread a distinct copy of the input Liouvillian, `mesolve` itself doesn't access global state as far as I recall. QuTiP 5 is (probably) going to formalise that (^) sort of low-level calling convention of `mesolve`, but it should work already. The new one look a bit different because instead of doing the setup very manually, there'll be a ""low-level"" function to prepare a master equation problem (and a Schrodinger equation one, etc), and then there'll be a `step` method instead of calling the ""high-level"" interface function `mesolve`, but functionally it'll do largely the same, just with a lot less data copying than the current form has to do. In the new system, it's likely that the function `mesolve` itself will keep the exact same interface it has now, just internally most of its processing will be split into modular components, each of which will be accessible (with different names) to the user to compose themselves, if they want low-level access. We're unlikely to add `yield` to `mesolve` directly because that's a very",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615:3387,access,access,3387,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859873615,1,['access'],['access']
Security,"record layer failure&quot; (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3405"">#3405</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b60064388302f54a3455259ddab121618650a154""><code>b600643</code></a> [1.26] Bump RECENT_DATE (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3404"">#3404</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/7e2d3890926d4788e219f63e2e36fbeb8714827f""><code>7e2d389</code></a> [1.26] Fix running CPython 2.7 tests in CI (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3137"">#3137</a>)</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.18&new-version=1.26.19)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:3993,secur,security-vulnerabilities,3993,https://qutip.org,https://github.com/qutip/qutip/pull/2458,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their proxy credentials through; the user information portion of their proxy URL are not subject to this; vulnerability.</p>; <p>Full details can be read in our <a href=""https://github.com/psf/requests/security/advisories/GHSA-j8r2-6x86-q33q"">Github Security Advisory</a>; and <a href=""https://nvd.nist.gov/vuln/detail/CVE-2023-32681"">CVE-2023-32681</a>.</p>; </li>; </ul>; <h2>2.30.0 (2023-05-03)</h2>; <p><strong>Dependencies</strong></p>; <ul>; <li>; <p>⚠️ Added support for urllib3 2.0. ⚠️</p>; <p>This may contain minor breaking changes so we advise careful testing and; reviewing <a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:3454,Authoriz,Authorization,3454,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Authoriz'],['Authorization']
Security,"rge/base/envs/qutip_test/include/python3.9 -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/common -Ibuild/src.macosx-11.0-arm64-3.9/numpy/core/src/npymath -c'; extra options: '-faltivec -I/System/Library/Frameworks/vecLib.framework/Headers'; clang: numpy/core/src/multiarray/array_assign_scalar.c; clang: numpy/core/src/multiarray/alloc.c; clang: numpy/core/src/multiarray/buffer.c; clang: numpy/core/src/multiarray/common.c; clang: numpy/core/src/multiarray/conversion_utils.c; clang: numpy/core/src/multiarray/datetime_strings.c; clang: numpy/core/src/multiarray/descriptor.c; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/einsum.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: build/src.macosx-11.0-arm64-3.9/numpy/core/src/multiarray/lowlevel_strided_loops.c; clang: numpy/core/src/multiarray/hashdescr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/multiarraymodule.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/nditer_constr.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/refcount.c; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: error: the clang compiler does not support 'faltivec', please use -maltivec and include altivec.h explicitly; clang: numpy/core/src/multiarray/scalarapi.c; clang: numpy/core/src/multiarray/temp_elide.c; clang: numpy/core/src/multiarra",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:65539,hash,hashdescr,65539,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['hash'],['hashdescr']
Security,"s (WIP)</li>; <li><a href=""https://github.com/python-babel/babel/commit/d1bbc08e845d03d8e1f0dfa0e04983d755f39cb5""><code>d1bbc08</code></a> import_cldr: use logging; add -q option</li>; <li><a href=""https://github.com/python-babel/babel/commit/156b7fb9f377ccf58c71cf01dc69fb10c7b69314""><code>156b7fb</code></a> Quiesce CLDR download progress bar if requested (or not a TTY)</li>; <li><a href=""https://github.com/python-babel/babel/commit/613dc1700f91c3d40b081948c0dd6023d8ece057""><code>613dc17</code></a> Make the import warnings about unsupported number systems less verbose</li>; <li>Additional commits viewable in <a href=""https://github.com/python-babel/babel/compare/v2.9.0...v2.9.1"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=babel&package-manager=pip&previous-version=2.9.0&new-version=2.9.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1695:3435,secur,security-vulnerabilities,3435,https://qutip.org,https://github.com/qutip/qutip/pull/1695,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"s `'other'`, since it is not a standard operation, but that's ok because we no longer need `Qobj.type` for fast dimension parsing. The `Compound` threading over `Map` goes follows these rules:. - `Compound(Map(x1, y1), Map(x2, y2))` is `Map(Compound(x1, x2), Compound(y1, y2))`; - `Compound(Map(x1, y1), Space(z))` is `Map(Compound(x1, Field), Compound(y1, Space(z)))`. In other words, the `from` and `to` fields inside maps are `Compound`ed with their counterparts, and `Space` is ""promoted"" to `Map(Field, Space)`. This latter object is not actually valid, but `Space` will behave as if it were within `Compound`. Related but different, `Compound(Field, Field)` will exist for the purposes of tensor-product `'bra'` types as the `to` field of `Map` (to allow us to keep track of empty spaces), but a `Qobj` whose dimensions would be a `Compound` made entirely of `Field` will instead become a Python complex number. The dimensions types should be available for advanced users (to allow them to access the full parsing speed-ups), but should not be presented as the standard choice. I propose we place the types inside a nested namespace, such as `qutip.dims` (logically - physically it would be `qutip/core/dims.py`), to allow the form `from qutip.dims import *` where appropriate without forcing the user to do the modern bad practice left over from our MATLAB past `from qutip import *`. ## User impact. In principle, nothing will change for the normal QuTiP user compared to the 4.x branch. You will still be able to supply the `dims` argument to the `Qobj` constructor as lists in the exact same format, and they will be parsed in the same way. Users _do not_ need to type out the new computer-friendly dimensions objects, but they will be available for advanced users who frequently make `Qobj` using the raw constructor with funny dimensions. We will publicly provide `qutip.dims.parse` to turn a list into the new form, so even advanced users do not need to type out all the nonsense. `Qobj`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:9407,access,access,9407,https://qutip.org,https://github.com/qutip/qutip/issues/1421,1,['access'],['access']
Security,"s to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/build.yml`).~ *edit: Done 2021-02-15.*",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:4559,access,access,4559,https://qutip.org,https://github.com/qutip/qutip/pull/1429,1,['access'],['access']
Security,"struments (that is, where the probability of obtaining any result is less than 1, as in the erasure channel case) can be completed:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete(); QInstrument id=1f9735f3f10 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq() Seq('⊥',); }; ```. Measurement outcome labels can be re-indexed onto integer labels according to lexographical sorting of original labels:. ```python; >>> qutip.QInstrument(qutip.projection(4, 0, 0)).complete().reindex(); QInstrument id=1f96e774970 {; dims [[[4], [4]], [[4], [4]]]; outcomes Seq(0,) Seq(1,); }; ```. Composition and tensor products can be combined:. ```python; >>> qutip.tensor(z_instrument.with_finite_visibility(0.95) ** 2, z_instrument); QInstrument id=2e7d89a19a0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Par(Seq(0, 0), 0) Par(Seq(0, 0), 1) Par(Seq(1, 0), 0) Par(Seq(1, 0), 1) Par(Seq(0, 1), 0) Par(Seq(0, 1), 1) Par(Seq(1, 1), 0) Par(Seq(1, 1), 1); }; ```. Outcomes can be labeled by arbitrary hashable types:. ```python; >>> qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX""); QInstrument id=2e7d89d5dc0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ) Seq(-XX, +ZZ) Seq(+XX, -ZZ) Seq(-XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")) ** 2; QInstrument id=2e7d89a44c0 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, +XX, -ZZ) Seq(-XX, -ZZ, -XX, -ZZ); }; >>> (qutip.QInstrument.pauli_measurement(""ZZ"") * qutip.QInstrument.pauli_measurement(""XX"")).with_finite_visibility(0.95) ** 2; QInstrument id=2e7d6654520 {; dims [[[2, 2], [2, 2]], [[2, 2], [2, 2]]]; outcomes Seq(+XX, +ZZ, +XX, +ZZ) Seq(-XX, +ZZ, +XX, +ZZ) Seq(+XX, -ZZ, +XX, +ZZ) Seq(-XX, -ZZ, +XX, +ZZ) Seq(+XX, +ZZ, -XX, +ZZ) Seq(-XX, +ZZ, -XX, +ZZ) Seq(+XX, -ZZ, -XX, +ZZ) Seq(-XX, -ZZ, ; -XX, +ZZ) Seq(+XX, +ZZ, +XX, -ZZ) Seq(-XX, +ZZ, +XX, -Z",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:4464,hash,hashable,4464,https://qutip.org,https://github.com/qutip/qutip/pull/1687,1,['hash'],['hashable']
Security,"t/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.1...9.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.1&new-version=9.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:15392,secur,security-vulnerabilities,15392,https://qutip.org,https://github.com/qutip/qutip/pull/2023,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"tate, time, e_ops); integrator = _mesolve_process_instructions(instructions, integrator); ```; and a call to `mesolve` would be like; ```python; solver = mesolve(H, rho0, times, c_ops); try:; result = next(solver); while True:; next_control = krotov.get_next_control(result.time, result.state); result = solver.send([; ('update-arguments', {'control': next_control}),; ('update-hamiltonian', ...),; ('add-c_op', ...),; # possible examples of API commands; ]); except StopIteration:; pass; ```; That's not super user friendly, but it _is_ nicely re-entrant. You'd have a single object you can copy and branch off, and QuTiP would be able to update the relevant objects for you at any given time. Still, I don't think it's a good strategy in general - we'd have to _very_ rigorously define the ""instructions"" API, and it would be pretty awkward to use. It would also be a nuisance for extensibility, probably; the intermediate state and instructions of `mesolve` would just more APIs we have to maintain and keep constant. Note that you can achieve the exact same thing with a callback function pattern here, except that control would never really pass back to the caller, so it would be impossible to (for example) branch execution part way through. The new, modular system we want to put into QuTiP 5 is an attempt to get the best of all these worlds. For users who don't need all this low-level behaviour, there'll still be the convenient `mesolve`, which just keeps working the same way it does now. For users (like you) who need more, we'll expose all the inner logic of the `mesolve` loop as separate components, so you'll still get all the nice set-up utilities if you want them, but you'll also then just be able to run the inner loop yourself. Since everything is modular, you'll have access to modify _everything_ that `mesolve` can access, so we won't need to define a specific, awkward API, and you can change it in whatever programming style you like, and is appropriate for your use case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481:3515,expose,expose,3515,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859907481,3,"['access', 'expose']","['access', 'expose']"
Security,"tation</strong></p>; <ul>; <li>Various typo fixes and doc improvements.</li>; </ul>; <p><strong>Packaging</strong></p>; <ul>; <li>Requests has started adopting some modern packaging practices.; The source files for the projects (formerly <code>requests</code>) is now located; in <code>src/requests</code> in the Requests sdist. (<a href=""https://redirect.github.com/psf/requests/issues/6506"">#6506</a>)</li>; <li>Starting in Requests 2.33.0, Requests will migrate to a PEP 517 build system; using <code>hatchling</code>. This should not impact the average user, but extremely old; versions of packaging utilities may have issues with the new packaging format.</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/d6ebc4a2f1f68b7e355fb7e4dd5ffc0845547f9f""><code>d6ebc4a</code></a> v2.32.0</li>; <li><a href=""https://github.com/psf/requests/commit/9a40d1277807f0a4f26c9a37eea8ec90faa8aadc""><code>9a40d12</code></a> Avoid reloading root certificates to improve concurrent performance (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/0c030f78d24f29a459dbf39b28b4cc765e2153d7""><code>0c030f7</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a> from nateprewitt/no_char_detection</li>; <li><a href=""https://github.com/psf/requests/commit/555b870eb19d497ddb67042645420083ec8efb02""><code>555b870</code></a> Allow character detection dependencies to be optional in post-packaging steps</li>; <li><a href=""https://github.com/psf/requests/commit/d6dded3f00afcf56a7e866cb0732799045301eb0""><code>d6dded3</code></a> Merge pull request <a href=""https://redirect.github.com/psf/requests/issues/6700"">#6700</a> from franekmagiera/update-redirect-to-invalid-uri-test</li>; <li><a href=""https://github.com/psf/requests/commit/bf24b7d8d17da34be720c19e5978b2d3bf94a53b""><code>bf24b7d</code></a> Use an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:7792,certificate,certificates,7792,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['certificate'],['certificates']
Security,"te or e_ops values (but could also do other things); - a ``_post_init`` method that allows a result sub-class to override what processors are configured; - helper methods ``_store_state``, ``_store_final_state``, ``_pre_copy`` and ``_e_op_func`` that sub-classes can override if they use states that are not ``Qobj``.; - a ``.e_ops`` attribute that stores a dictionary of ``ExpectOP`` instances where ``.e_ops[k](t, state)`` will calculate the expected value and ``.e_ops[k].op`` returns the original object used to create the e_op.; - a ``.e_data`` attribute that store the ``.expect`` values as a dictionary rather than a list, so that ``.e_data[k]`` is ``.expect[i]``. Other changes:. - the normalization of states is now performed in the base solver class, rather than in results.; - the solver ``stats`` passed to the results are now *only for that solver .run call* rather than being a strange record of everything the solver has done so far.; These allow:. - The HEOM solver to implement a ``HEOMResult`` class and use the base solver ``.run`` method.; - The normalization of states to be applied when using the ``.step()`` solver method.; - Consistently expose ``.expect`` and a list of results (consistent with QuTiP 4 and useful when turning expectation values into a numpy array); - Provide a dictionary of expectation values via ``.e_data`` so that when e_ops are supplied as a dictionary, the results can be accessed by the same keys, e.g. ``.e_data[""nice-name""]``.; - Possibly allow the MC result classes to be refactored more easily. **Related issues or PRs**; - #1889 -- I think we could implement this PR more easily on top of the refactored result class.; - #1869 -- the v5 HEOM Solver can use much more of the base solver and results class with these changes . **Todo**; - [X] I would like to add more tests for the base result class, but it would be good to get a +1 on the general approach before I spend time on that. **Changelog**; Add a more flexible base result class for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907:1262,expose,expose,1262,https://qutip.org,https://github.com/qutip/qutip/pull/1907,2,"['access', 'expose']","['accessed', 'expose']"
Security,that provides a nicer API to access the jmat function. Made helper functions jplus and lz internal.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/117:29,access,access,29,https://qutip.org,https://github.com/qutip/qutip/pull/117,1,['access'],['access']
Security,"thub.com/kjd/idna/commit/d516b874c3388047934938a500c7488d52c4e067""><code>d516b87</code></a> Update Github actions/checkout to v4</li>; <li><a href=""https://github.com/kjd/idna/commit/c095c75943413c75ebf8ac74179757031b7f80b7""><code>c095c75</code></a> Merge branch 'master' into dev</li>; <li><a href=""https://github.com/kjd/idna/commit/60a0a4cb61ec6834d74306bd8a1fa46daac94c98""><code>60a0a4c</code></a> Fix typo in GitHub Actions workflow key</li>; <li><a href=""https://github.com/kjd/idna/commit/5918a0ef8034379c2e409ae93ee11d24295bb201""><code>5918a0e</code></a> Merge branch 'master' into dev</li>; <li>Additional commits viewable in <a href=""https://github.com/kjd/idna/compare/v3.4...v3.7"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=idna&package-manager=pip&previous-version=3.4&new-version=3.7)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2392:4096,secur,security-vulnerabilities,4096,https://qutip.org,https://github.com/qutip/qutip/pull/2392,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"tomatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force user to recompile. But it raise the risk of forgetting to change it when working on them. ; Lastly, I added an option to disable the string coefficient parsing since there seems to have some reservation in the last meeting.; But there is a weakness when using that form if unused args are passed: the `key = args['key']` code could be generated for those extra `args` but will not affect the hash name. . **Related issues or PRs**; Will replace part of #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:2391,hash,hash,2391,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['hash'],['hash']
Security,"tps://github.com/matthewarmand""><code>@​matthewarmand</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6258"">psf/requests#6258</a></li>; <li><a href=""https://github.com/cpzt""><code>@​cpzt</code></a> made their first contribution in <a href=""https://redirect.github.com/psf/requests/pull/6456"">psf/requests#6456</a></li>; </ul>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.32.0 (2024-05-20)</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:4560,secur,security,4560,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['secur'],['security']
Security,"tps://github.com/psf/requests) from 2.31.0 to 2.32.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/releases"">requests's releases</a>.</em></p>; <blockquote>; <h2>v2.32.0</h2>; <h2>2.32.0 (2024-05-20)</h2>; <h2>🐍 PYCON US 2024 EDITION 🐍</h2>; <p><strong>Security</strong></p>; <ul>; <li>Fixed an issue where setting <code>verify=False</code> on the first request from a; Session will cause subsequent requests to the <em>same origin</em> to also ignore; cert verification, regardless of the value of <code>verify</code>.; (<a href=""https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56"">https://github.com/psf/requests/security/advisories/GHSA-9wx4-h78v-vm56</a>)</li>; </ul>; <p><strong>Improvements</strong></p>; <ul>; <li><code>verify=True</code> now reuses a global SSLContext which should improve; request time variance between first and subsequent requests. It should; also minimize certificate load time on Windows systems when using a Python; version built with OpenSSL 3.x. (<a href=""https://redirect.github.com/psf/requests/issues/6667"">#6667</a>)</li>; <li>Requests now supports optional use of character detection; (<code>chardet</code> or <code>charset_normalizer</code>) when repackaged or vendored.; This enables <code>pip</code> and other projects to minimize their vendoring; surface area. The <code>Response.text()</code> and <code>apparent_encoding</code> APIs; will default to <code>utf-8</code> if neither library is present. (<a href=""https://redirect.github.com/psf/requests/issues/6702"">#6702</a>)</li>; </ul>; <p><strong>Bugfixes</strong></p>; <ul>; <li>Fixed bug in length detection where emoji length was incorrectly; calculated in the request content-length. (<a href=""https://redirect.github.com/psf/requests/issues/6589"">#6589</a>)</li>; <li>Fixed deserialization bug in JSONDecodeError. (<a href=""https://redirect.github.com/psf/requests/issues/6629"">#6629</a>)</li>; <li>Fixed bug where an ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2434:987,certificate,certificate,987,https://qutip.org,https://github.com/qutip/qutip/pull/2434,1,['certificate'],['certificate']
Security,"ues/286"">#286</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/4a9569a3eb58db8548536fc16c5c5c7af946a5b1""><code>4a9569a</code></a> Bump actions/checkout from 4.1.2 to 4.1.4 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/287"">#287</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/1fc808626a895a916b1e4c2b63abae6c5eafdbe3""><code>1fc8086</code></a> Bump peter-evans/create-pull-request from 6.0.4 to 6.0.5 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/288"">#288</a>)</li>; <li>Additional commits viewable in <a href=""https://github.com/certifi/python-certifi/compare/2023.07.22...2024.07.04"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2023.7.22&new-version=2024.7.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by c",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2483:3092,secur,security-vulnerabilities,3092,https://qutip.org,https://github.com/qutip/qutip/pull/2483,2,['secur'],"['security-updates', 'security-vulnerabilities']"
Security,"ul testing and; reviewing <a href=""https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html"">https://urllib3.readthedocs.io/en/latest/v2-migration-guide.html</a>; prior to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>v2.29.0</h2>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/psf/requests/blob/main/HISTORY.md"">requests's changelog</a>.</em></p>; <blockquote>; <h2>2.31.0 (2023-05-22)</h2>; <p><strong>Security</strong></p>; <ul>; <li>; <p>Versions of Requests between v2.3.0 and v2.30.0 are vulnerable to potential; forwarding of <code>Proxy-Authorization</code> headers to destination servers when; following HTTPS redirects.</p>; <p>When proxies are defined with user info (<a href=""https://user:pass@proxy:8080"">https://user:pass@proxy:8080</a>), Requests; will construct a <code>Proxy-Authorization</code> header that is attached to the request to; authenticate with the proxy.</p>; <p>In cases where Requests receives a redirect response, it previously reattached; the <code>Proxy-Authorization</code> header incorrectly, resulting in the value being; sent through the tunneled connection to the destination server. Users who rely on; defining their proxy credentials in the URL are <em>strongly</em> encouraged to upgrade; to Requests 2.31.0+ to prevent unintentional leakage and rotate their proxy; credentials once the change has been fully deployed.</p>; <p>Users who do not use a proxy or do not supply their p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:2869,Secur,Security,2869,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['Secur'],['Security']
Security,"urrent noise in a DQD model; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\Boxi\Miniconda3\envs\qutip-dev-py3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\tests\test_countstat.py"", line 73, in test_dqd_current; rhoss = steadystate(L); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\steadystate.py"", line 290, in steadystate; return _steadystate_direct_sparse(A, ss_args); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\steadystate.py"", line 460, in _steadystate_direct_sparse; weighted_matching=ss_args['weighted_matching']); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 393, in mkl_spsolve; x = lu.solve(b, verbose=verbose); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 170, in solve; np_x, np_error); OSError: exception: access violation reading 0x0000000099EC80F8. ======================================================================; ERROR: MKL spsolve : Hermitian (real) solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\Boxi\Miniconda3\envs\qutip-dev-py3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\tests\test_mkl.py"", line 230, in test_mkl_spsolve10; y = mkl_spsolve(A, b, hermitian=1); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 414, in mkl_spsolve; lu.delete(); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 208, in delete; byref(c_int(0)), np_error); OSError: exception: access violation reading 0x00000006FFFFFFEF. ======================================================================; ```; Enviroment:; ```; QuTiP Version: 4.4.0.dev0+73a27",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-483000016:1222,access,access,1222,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-483000016,1,['access'],['access']
Security,"urselves, for example by defining a global list, as it is done in [this example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe the solution you'd like**. Currently when we pass a list of operators such as. ```python; e_ops = [sigmax(), sigmay(), sigmaz()]; result = mesolve(H, rho0, e_ops=e_ops); ```. We will be able to access expectation value of `sigmax()` in `result.expect[0]`, of `sigmay()` in `result.expect[1]` and of course `sigmaz()` in `result.expect[2]`. Why not capture the custom measurement in similar way?. ```; def customMeasurement(tau, psi):; exp_x = expect(sigmax(), psi); exp_y = expect(sigmaz(), psi); exp_z = expect(sigmay(), psi); energy = expect(H, psi); fidelity = np.abs(psi_ref.overlap(psi))**2.; return [exp_x, exp_y, exp_z, energy, fidelity]; ```. Now it is possible to still get expectation values as before, but in addition we can take more custom measurements (in this example energy and fidelity of state) and access them in exactly the same way for the convenience. The only thing user needs to keep track of is order of operators returned from the callback function. So now it is as before but in addition `result.expect[3]` contains energy and `result.expect[4]` contains fidelity and no custom managed global external lists required as it was in the [example](https://nbviewer.jupyter.org/github/jrjohansson/qutip-lectures/blob/master/Lecture-8-Adiabatic-quantum-computing.ipynb#Evolve-the-system-in-time). **Describe alternatives you've considered**. Alternatively we could establish that custom measurement callback function must return only single value and user would be able to pass mixed list of operators and functions in the `e_ops`. **Additional context**. Correct me if I'm wrong, based on the docs and examples I referenced above I have impression there is no better way to do it, but maybe I just missed it? Please regard this issue as ope",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1238:1971,access,access,1971,https://qutip.org,https://github.com/qutip/qutip/issues/1238,1,['access'],['access']
Security,"ve the fastest connectivity. #### Adding new types. You can add new data-layer types by calling the `add_conversions` method of this object, and then rebuilding all of the mathematical dispatchers. See the docstring of that method for more information. #### Implementation details. Not all conversions have to be specified for a new type; it is enough to have just one to and from a known type to a new type. The rest of the conversion graph is built up by graph traversal over known types (the graph is reconstructed whenever `add_conversions` is called), where the approximate cost of each function is used as the weight of an ""edge"" joining two data-layer type ""vertices"". The shortest path conversion function is constructed and stored (as the interal type `data.convert._converter`) for each pair of types. We willingly sacrifice memory efficiency for speed-efficiency here, since we expect there to be few data-layer types, but for the calls to happen millions of times. The converters returned by single-key access (e.g. `data.to[data.Dense]`) are constructed individually on a call to `__getitem__`, and are instances of the private type `data.convert._partial_converter`, which internally stores a reference to every ""full"" converter, and dispatches to the correct one when called. The entire `data.to` object and all subsidiary `_converter` and `_partial_converter` objects are `pickle`-able. . #### Efficiency notes. From an efficiency perspective, there is very little benefit to using the key-lookup syntax. Internally, `to(to_type, data)` effectively calls `to[to_type, type(data)]`, so storing the object elides the creation of a single tuple and a dict lookup, but the cost of this is generally less than 500ns. Using the one-argument lookup (e.g. `to[Dense]`) is no more efficient than the general call at all, but can be used in cases where a single callable is required and is more efficient, concise and descriptive than `functools.partial`. ### `data.Dispatcher`: arbitrary multip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338:5951,access,access,5951,https://qutip.org,https://github.com/qutip/qutip/pull/1338,1,['access'],['access']
Security,"ved characters in IPv6 Zone ID parsing (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2899"">urllib3/urllib3#2899</a>)</li>; <li>Fix IDNA handling of 'x80' byte (<a href=""https://redirect.github.com/urllib3/urllib3/issues/2901"">urllib3/urllib3#2901</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Changelog</summary>; <p><em>Sourced from <a href=""https://github.com/urllib3/urllib3/blob/main/CHANGES.rst"">urllib3's changelog</a>.</em></p>; <blockquote>; <h1>1.26.17 (2023-10-02)</h1>; <ul>; <li>Added the <code>Cookie</code> header to the list of headers to strip from requests when redirecting to a different host. As before, different headers can be set via <code>Retry.remove_headers_on_redirect</code>. (<code>[#3139](https://github.com/urllib3/urllib3/issues/3139) &lt;https://github.com/urllib3/urllib3/pull/3139&gt;</code>_)</li>; </ul>; <h1>1.26.16 (2023-05-23)</h1>; <ul>; <li>Fixed thread-safety issue where accessing a <code>PoolManager</code> with many distinct origins; would cause connection pools to be closed while requests are in progress (<code>[#2954](https://github.com/urllib3/urllib3/issues/2954) &lt;https://github.com/urllib3/urllib3/pull/2954&gt;</code>_)</li>; </ul>; <h1>1.26.15 (2023-03-10)</h1>; <ul>; <li>Fix socket timeout value when <code>HTTPConnection</code> is reused (<code>[#2645](https://github.com/urllib3/urllib3/issues/2645) &lt;https://github.com/urllib3/urllib3/issues/2645&gt;</code>__)</li>; <li>Remove &quot;!&quot; character from the unreserved characters in IPv6 Zone ID parsing; (<code>[#2899](https://github.com/urllib3/urllib3/issues/2899) &lt;https://github.com/urllib3/urllib3/issues/2899&gt;</code>__)</li>; <li>Fix IDNA handling of '\x80' byte (<code>[#2901](https://github.com/urllib3/urllib3/issues/2901) &lt;https://github.com/urllib3/urllib3/issues/2901&gt;</code>__)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/urllib3/urllib3/commit/c90",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2236:1989,access,accessing,1989,https://qutip.org,https://github.com/qutip/qutip/pull/2236,1,['access'],['accessing']
Security,"w</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=certifi&package-manager=pip&previous-version=2022.12.7&new-version=2023.7.22)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependabot merge` will merge this PR after your CI passes on it; - `@dependabot squash and merge` will squash and merge this PR after your CI passes on it; - `@dependabot cancel merge` will cancel a previously requested merge and block automerging; - `@dependabot reopen` will reopen this PR if it is closed; - `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually; - `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself); - `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself); You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/qutip/qutip/network/alerts). </details>",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:4419,secur,security,4419,https://qutip.org,https://github.com/qutip/qutip/pull/2205,2,"['Secur', 'secur']","['Security', 'security']"
Security,"xception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ...etc etc...; ________________________________________________________________________________________________________________ TestSESolve.test_06_4_compare_state_and_unitary_list_str ________________________________________________________________________________________________________________. code = '#!python\n#cython: language_level=3\n# This file is generated automatically by QuTiP.\n\nimport numpy as np\ncimport ...id _call_core(self, double t, complex * coeff):\n cdef double w_a = self.w_a\n\n coeff[0] = cos(w_a*t)\n'; basefilename = 'cqobjevo_compiled_coeff_', obj_name = 'CompiledStrCoeff', cythonfile = True. def _import_str(code, basefilename, obj_name, cythonfile=False):; """"""; Import 'obj_name' defined in 'code'.; Using a temporary file starting by 'basefilename'.; """"""; filename = (basefilename + str(hash(code))[1:4] +; str(os.getpid()) + time.strftime(""%M%S"")); tries = 0; import_list = []; ext = "".pyx"" if cythonfile else "".py""; e = ImportError() # used if import_list remains empty; if os.getcwd() not in sys.path:; sys.path.insert(0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); > exec(import_code, locals()); E ModuleNotFoundError: No module named 'cqobjevo_compiled_coeff_98549686147162'. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:45: ModuleNotFoundError. The above exception was the direct cause of the following exception:. self = <qutip.tests.test_sesolve.TestSESolve object at 0x7fe9e7e576e0>. def test_06_4_compare_state_and_unit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:18272,hash,hash,18272,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['hash'],['hash']
Testability," '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10487,test,test,10487,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability," (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1703,log,logger,1703,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability," (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 349, in testMESimpleConstDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options);",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:15351,test,test,15351,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['test']
Testability," + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802965>:; >; > > + num_ladders = _num_dicke_ladders(N); > + jm_operator = dok_matrix((nds, nds)); > +; > + s = 0; > + for k in range(0, num_ladders):; > + j = 0.5 * N - k; > + mmax = int(2 * j + 1); > + for i in range(0, mmax):; > + m = j - i; > + if (s - 1) in range(0,nds):; > + jm_operator[s,s-1] = am(j,m+1); > + s = s + 1; > +; > + return Qobj(jm_operator); > +; > +def ap( j, m):; >; > no space before j; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#di",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:8034,test,tests,8034,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability," - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001704, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); /nix/store/dz8lm4h0ivibad5kfc0ya3p3zqyd2fyf-python3-3.11.7/lib/python3.11/contextlib.py:81: AssertionError; =========================== short test summary info ============================; FAILED ../tests/test_countstat.py::test_dqd_current - AssertionError:; ```. ### Expected Behaviour. unit test succeeds. ### Your Environment. ```shell; QuTiP Version: 4.7.5; Numpy Versi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:2604,Assert,AssertionError,2604,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['Assert'],['AssertionError']
Testability," -----------; >; > heading. It formats nicely in the docs; > see:; > http://qutip.org/docs/latest/apidoc/functions.html#quantum-states; > file qutip.states.py; > for example; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168800674>:; >; > > + -------; > + identity: Qobj matrix (QuTiP class); > + With the correct dimensions (dims); > + """"""; > + N = int(N); > + rho = np.zeros((2**N, 2**N)); > + for i in range(0, 2**N):; > + rho[i, i] = 1; > +; > + spin_dim = [2 for i in range(0, N)]; > + spins_dims = list((spin_dim, spin_dim)); > + identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802965>:; >; > > + num_ladders = _num_dicke_ladders(N); > + jm_operator = dok_matrix((nds, nds)); > +; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:7621,test,tests,7621,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability," -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25360,test,tests,25360,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36508,test,tests,36508,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecati,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38295,test,tests,38295,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37548,test,tests,37548,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36410,test,tests,36410,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46238,test,tests,46238,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability," ../tests/test_qubits.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rand.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sparse.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_spinchain.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_spmath.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_states.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_steadystate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_stochastic_me.py - AttributeError: module 'qutip' has no ...; ERROR ../tests/test_stochastic_se.py - AttributeError: module 'qutip' has no ...; ERROR ../tests/test_subsys_apply.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_superop_reps.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_superoper.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_td_formats.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_tensor.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_three_level.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_utilities.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_wigner.py - AttributeError: module 'qutip' has no attribu...; !!!!!!!!!!!!!!!!!!! Interrupted: 65 errors during collection !!!!!!!!!!!!!!!!!!!; ======================== 2 warnings, 65 errors in 2.53s ========================; The command ""pytest --verbosity=1 --d",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:55249,test,tests,55249,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability," ../tests/test_rand.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sparse.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_spinchain.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_spmath.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_states.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_steadystate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_stochastic_me.py - AttributeError: module 'qutip' has no ...; ERROR ../tests/test_stochastic_se.py - AttributeError: module 'qutip' has no ...; ERROR ../tests/test_subsys_apply.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_superop_reps.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_superoper.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_td_formats.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_tensor.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_three_level.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_utilities.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_wigner.py - AttributeError: module 'qutip' has no attribu...; !!!!!!!!!!!!!!!!!!! Interrupted: 65 errors during collection !!!!!!!!!!!!!!!!!!!; ======================== 2 warnings, 65 errors in 2.53s ========================; The command ""pytest --verbosity=1 --disable-pytest-warnings --cov=qutip --pyargs qutip"" exited with 2.; Done. Your buil",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:55331,test,tests,55331,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability, /opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/python3.8/site-packages/qutip-4.5.0.dev0+3421bc5c-py3.8-macosx-10.15-x86_64.egg/qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_op,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:1929,log,logger,1929,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability," 0.9 1.0 3.2 ; sum((rho-rho).norm()); dm 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ket 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0; ```. My new version is pretty simple, using numpy's built-in ndarray routines. I've looked at the code for ptrace and it's a bit opaque to me; at the moment I don't feel quite up to modifying it, so I'm just putting up the code I've used instead of doing a pull request. My new function is here:; ```; def ptracealt(rho,qkeep) :; rd = rho.dims[0]; nd = len(rd); qkeep = list(sort(qkeep)); dkeep = (np.array(rd)[qkeep]).tolist(); qtrace = list(set(np.arange(nd))-set(qkeep)); dtrace = (np.array(rd)[qtrace]).tolist(); if isket(rho) :; vmat = (rho.full(); .reshape(rd); .transpose(qkeep+qtrace); .reshape([prod(dkeep),prod(dtrace)])); rhomat = vmat.dot(vmat.conj().T); else :; rhomat = np.trace(rho.full(); .reshape(rd+rd); .transpose(qtrace+[nd+q for q in qtrace]+qkeep+[nd+q for q in qkeep]); .reshape([prod(dtrace),prod(dtrace),prod(dkeep),prod(dkeep)])); return Qobj(rhomat,dims=[dkeep, dkeep]); ```; and the test code here: ; ```; Nqmax=10; ntest = 100; trdiff = np.zeros([2,Nqmax-1]); ttr = np.zeros([4,Nqmax-1]); for nd in range(2,Nqmax+1) :; r0 = [ rand_dm(2**nd,dims=[[2 for j in range(nd)] for l in range(2)]) for i in range(ntest) ]; v0 = [ rand_ket(2**nd) for i in range(ntest) ]; for v in v0 :; v.dims = [[2 for j in range(nd)],[1 for j in range(nd)]]; subs = [ np.random.choice(range(nd),np.random.randint(1,nd),replace=False).tolist() for i in range(ntest) ]; t0 = time.time(); rhotr1 = [r.ptrace(p) for r,p in zip(r0,subs)]; ttr[0,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); rhotr2 = [ptracealt(r,p) for r,p in zip(r0,subs)]; ttr[1,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr1 = [v.ptrace(p) for v,p in zip(v0,subs)]; ttr[2,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr2 = [ptracealt(v,p) for v,p in zip(v0,subs)]; ttr[3,nd-2] = (time.time()-t0)/ntest; trdiff[0,nd-2] = sum([(r1 - r2).norm() for r1,r2 in zip(rhotr1,rhotr2)]); trdiff[1,nd-2] = ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1076:1851,test,test,1851,https://qutip.org,https://github.com/qutip/qutip/issues/1076,1,['test'],['test']
Testability, 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_fileio.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_floquet.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_gates.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_graph.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_heom_solver.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_interpolate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_lattice.py - Att,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:51477,test,tests,51477,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability," 2 spaces:. ket: Dimensions(Field, Space); bra: Dimensions(Space, Field); oper: Dimensions(Space, Space); ... This Dimension is the `Map` proposed by Jake, but ket are map from `Field` to `Space` and not `Space` themselves. Spaces come into multiple sub classes as proposed : `Space`, `SuperSpace`, `Field`, `Compound`, and `EnrSpace`. Splitting maps and spaces simplify spaces by not needing to have a dummy 2nd dims. Dimensions can be initiated from a list and converted back to one. Field are automatically contracted: `Compound(Field, Field)` is a `Field`, same for maps. With the exceptions that `Qobj` with a shape of `(1,1)` with be a `Dimensions(Field, Field)` and not a `Field`. . Some previously valid and used list format are no longer accepted. Playing with of tensor of super operators, `permute` and `reshuffle`, you could make object with dims as `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]` which can be interpreted as the tensor of 3 super operators. But then `[[[2, 2], [3, 3]], [[2, 2],[3, 3]]]` can both be interpreted as tensor of super operator or super operator of tensor spaces, so : ; - `[[[2, 2], [3, 3], [4, 4]], [[2, 2], [3, 3], [4, 4]]]`: Error; - `[[[2, 2], [4, 4]], [[2, 2], [4, 4]]]`: list representation of dimensions of `to_super(tensor(oper, oper))`; - `[[[2], [2], [3], [3]], [[2], [2], [3], [3]]]`: list representation of dimensions of `tensor(to_super(oper), to_super(oper))`. Dimensions object have a `type` and `shape` set a initialization. There is a check when creating/ modifying a `Qobj` with between the data's shape and dims's shape and an error is raise when they are not matching. . Since operator-ket have a `superrep`, I added the `superrep` parameter to the Superspace instead of the dimensions, for now. But a better look at super operator representation is needed. `Qobj.dims` take and return a list, keeping the dimension object internally. From there, minimal adjustment were made so test pass. **Related issues or PRs**; Replace #1826",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1996:2327,test,test,2327,https://qutip.org,https://github.com/qutip/qutip/pull/1996,1,['test'],['test']
Testability, 3.12:; ```; =========================== short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolv,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1148,test,tests,1148,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability, 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ______________________________________________________________________________________________________________,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7610,test,tests,7610,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability, 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7685,test,tests,7685,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability," 50-branch `if/elif` (in the bad cases) based on the name. `QubitCircuit` shouldn't need the million `_gate_resolved` functions - if there's a `Gate` class, instances of that (whether done by subclass or composition) should be supplying it (though the lookup table is a good choice under the circumstances). Given how `circuit.py` currently organises its data, it feels like you have to introduce some seemingly arbitrary splits to keep CodeClimate happy, but I'd argue the problem is the data structure, and CodeClimate is right to complain about the complexity. In stuff like compilers, there's a reason code compilers do parsing->verification->optimisation, with several passes in the last one, and transform things internally into a very strict intermediate representation at every step. `Qobj._repr_latex_` was like this - the `master` version is claimed to be like ""78"" complexity, but I'd be prepared to bet CodeClimate would have the `dev.major` version less than 10 and I think the output is near byte-for-byte identical. The change is that the `master` version basically reimplements the same algorithm 4 times with complex, split up for loops (not to mention that for some reason the alignment and new-line characters are considered part of formatting a number?). The `dev.major` version first decides if it's going to truncate the rows and/or columns, then it just calls a formatter on each row it decided it wants rendering with a special value to say when it should output a truncation character, and then joins the rows together. Obviously it's not _always_ the data structure - e.g. in `propagator` the branching to choose an evaluation method is fine, but once it's chosen, it should delegate to specialised methods. That way, the maintainer can verify the branching paths with a nice top-down overview without 50 lines of specialised logic inbetween each one, then you can verify each specialised path independently. If you did that, I'm sure the ""complexity"" would drop to like 10.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1447#issuecomment-782249555:3302,log,logic,3302,https://qutip.org,https://github.com/qutip/qutip/pull/1447#issuecomment-782249555,1,['log'],['logic']
Testability," = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to be an integer so isn't <code>delta_t</code> a better name here? --> **Renamed to <code>delta_t</code>.**; * [x] <code>bound_function</code> seems very generic. Same with <code>optimizer</code>. --> **Renamed to <code>_lanczos_error_equation_to_optimize_delta_t</code> and <code>_optimize_",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1544,test,tested,1544,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['test'],['tested']
Testability," = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singular(5); q = Qobj(data); randN = 10 * np.random.random(); - q = q / randN; + q /= randN; assert np.allclose(q.full",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25814,test,tests,25814,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability," = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singular(5); q = Qobj(data); randN = 10 * np.random.random(); - q = q / randN; + q /= randN; assert np.allclose(q.full(), data / randN); ; ; diff --git a/qutip/visualization.py b/qutip/visualization.py; index 47f40",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25898,Test,TestJCModelEvolution,25898,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['Test'],['TestJCModelEvolution']
Testability, =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py; ERROR ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30220,test,tests,30220,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_brmesolve_td.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_brtools.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_control_pulseoptim.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_correlation.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:2577,test,tests,2577,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_dimensions.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_eigenstates.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_enr_state_operator.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_entropy.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:5888,test,tests,5888,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_operators.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_parallel.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________ ERROR collecting qutip/tests/test_partial_transpose.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_piqs.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:13930,test,tests,13930,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1612,log,logger,1612,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability," Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Checks that mul and tensor of skew-Hermitian operators report `isherm = True`. ... ok; > > > Tensor: Checks that super_tensor correctly tensors on underlying spaces. ... ok; > > > quantum process tomography for snot gate ... ok; > > > quantum process tomography for cnot gate ... ok; > > > Test mesolve qubit, with dissipation ... ok; > > > Test mesolve qubit, no dissipation ... ok; > > > Test essolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, with dissipation ... ok; > > > Test mcsolve qubit, no dissipation ... ok; > > > random Unitary ... ok; > > > random density matrix ... ok; > > > random hermitian ... ok; > > > random ket ... ok; > > > Sparse eigs Hermitian ... ok; > > > Sparse eigs non-Hermitian ... ok; > > > Sparse eigvals only Hermitian. ... ok; > > > Dense eigs Hermitian. ... ok; > > > Dense eigs non-Hermitian ... ok; > > > Dense eigvals only Hermitian ... ok; > > > states: coherent density matrix ... ok; > > > states: Fock density matrix ... ok; > > > states: thermal density matrix ... ok; > > > Steady state: Thermal qubit ... ok; > > > Steady state: Thermal harmonic oscillator ... ok; > > > Steady state: Driven cavity ... ok; > > > Stochastic: smesolve: photo-current ... ok; > > > Stochastic: smesolve: homodyne ... ok; > > > Stochastic: smesolve: heterodyne ... ok; > > > Stochastic: ssesolve: photo-current ..",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:8822,Test,Test,8822,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['Test'],['Test']
Testability," Collecting qutip; Downloading qutip-4.5.0.tar.gz (3.5 MB); |████████████████████████████████| 3.5 MB 509 kB/s ; ERROR: Command errored out with exit status 1:; command: /usr/bin/python3 -c 'import sys, setuptools, tokenize; sys.argv[0] = '""'""'/tmp/pip-install-69anjthq/qutip/setup.py'""'""'; __file__='""'""'/tmp/pip-install-69anjthq/qutip/setup.py'""'""';f=getattr(tokenize, '""'""'open'""'""', open)(__file__);code=f.read().replace('""'""'\r\n'""'""', '""'""'\n'""'""');f.close();exec(compile(code, __file__, '""'""'exec'""'""'))' egg_info --egg-base /tmp/pip-install-69anjthq/qutip/pip-egg-info; cwd: /tmp/pip-install-69anjthq/qutip/; Complete output (5 lines):; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; File ""/tmp/pip-install-69anjthq/qutip/setup.py"", line 52, in <module>; from Cython.Build import cythonize; ModuleNotFoundError: No module named 'Cython'; ----------------------------------------; ERROR: Command errored out with exit status 1: python setup.py egg_info Check the logs for full command output. ** Installing cython fixes it **. jevon@bb8:~$ pip3 install cython; Collecting cython; Downloading Cython-0.29.17-cp38-cp38-manylinux1_x86_64.whl (2.0 MB); |████████████████████████████████| 2.0 MB 721 kB/s ; Installing collected packages: cython; Successfully installed cython-0.29.17; jevon@bb8:~$ pip3 install qutip; Collecting qutip; Using cached qutip-4.5.0.tar.gz (3.5 MB); Requirement already satisfied: cython>=0.21 in ./.local/lib/python3.8/site-packages (from qutip) (0.29.17); Requirement already satisfied: numpy>=1.12 in ./.local/lib/python3.8/site-packages (from qutip) (1.18.3); Requirement already satisfied: scipy>=1.0 in ./.local/lib/python3.8/site-packages (from qutip) (1.4.1); Building wheels for collected packages: qutip; Building wheel for qutip (setup.py) ... done; Created wheel for qutip: filename=qutip-4.5.0-cp38-cp38-linux_x86_64.whl size=17905114 sha256=3f461cbc07b40c0de96b709ea20bca495c7ffe1b6060a533a1ab733107c161ab; Stored in directory: /h",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1246:1281,log,logs,1281,https://qutip.org,https://github.com/qutip/qutip/issues/1246,1,['log'],['logs']
Testability," Could this issue perhaps be broken into sub-tasks in some way, perhaps, in order to enable work starting on it a bit more feasible?. Also, I can see it's been labelled as a ""good first issue"" but it seems to me the definition of done (i.e., what would a PR - or a set of PRs - that would successfully address the problem entail?), with respect to the entire issue, could be clarified a bit further, and the breakdown into sub-tasks (which itself might result organically from some further discussion) might help a bit in that direction. Regarding possible approaches for handling randomness - I have to admit I've started looking into QuTiP only very recently, and I'm yet to start familiarising myself with its more intricate details and get to run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on tho",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:967,test,tests,967,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,2,['test'],"['testing', 'tests']"
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_control_pulseoptim.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_correlation.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_countstat.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_cqed.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:3528,test,tests,3528,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ____________ ERROR collecting qutip/tests/test_partial_transpose.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_piqs.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_propagator.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_ptrace.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:14879,test,tests,14879,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_me.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_se.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_subsys_apply.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_superop_reps.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:25284,test,tests,25284,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_se.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_subsys_apply.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_superop_reps.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_superoper.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:25757,test,tests,25757,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_subsys_apply.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_superop_reps.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_superoper.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_td_formats.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:26232,test,tests,26232,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_superop_reps.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_superoper.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_td_formats.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_tensor.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:26704,test,tests,26704,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_cy_structs.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_dimensions.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_eigenstates.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_enr_state_operator.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:5419,test,tests,5419,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_td_formats.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_tensor.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_three_level.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_utilities.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:27650,test,tests,27650,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_countstat.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_cqed.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_cy_structs.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_dimensions.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:4473,test,tests,4473,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_brtools.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_control_pulseoptim.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_correlation.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_countstat.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:3054,test,tests,3054,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_entropy.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_expect.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_fastsparse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_fileio.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:7311,test,tests,7311,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_random.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_rhs_reuse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_scattering.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sesolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:20555,test,tests,20555,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sp_eigs.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sparse.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_spinchain.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_spmath.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:22448,test,tests,22448,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_spmath.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_states.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_steadystate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_me.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:23866,test,tests,23866,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_tensor.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_three_level.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_utilities.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_wigner.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; !!!!!!!!!!!!!!!!!!! Interrupted: 60 errors du",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:28124,test,tests,28124,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_cqed.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_cy_structs.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_dimensions.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_eigenstates.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:4946,test,tests,4946,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_gates.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_graph.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_heom_solver.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_interpolate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:9676,test,tests,9676,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_graph.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_heom_solver.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_interpolate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_mcsolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:10149,test,tests,10149,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_rand.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_random.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_rhs_reuse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_scattering.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:20083,test,tests,20083,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_mkl.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_openmp.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_operators.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_parallel.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________ ERROR collecting qutip/tests/tes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:12988,test,tests,12988,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_qpt.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________ ERROR collecting qutip/tests/test_qubit_evolution.py _____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_qubitcircuit.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_qubits.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:18189,test,tests,18189,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ==================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28118,test,testing,28118,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147142.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_96649686147152.pyx; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx; ============================================================================================================== 21 failed, 15 passed, 3233 deselected, 33 warnings in 15.37s ==============================================================================================================; ```. ### Expected Behaviour. Tests should pass with python3.12. ### Your Environment. ```shell; $ python3.12 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board member",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:26291,Test,TestSESolve,26291,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability," ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7798,test,tests,7798,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18563,test,tests,18563,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20906,test,testing,20906,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6699"">#6699</a> from hugovk/security-libtiff_buffer</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.1...9.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.1&new-version=9.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by comme",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:14658,log,logs,14658,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['log'],['logs']
Testability," More detailed info:; # ; ## ERROR: Sparse: Symmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 73, in test_sparse_symmetric_reverse_permute; B=sparse_reverse_permute(x,perm,perm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Nonsymmetric Reverse Permute. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 89, in test_sparse_nonsymmetric_reverse_permute; B=sparse_reverse_permute(x,rperm,cperm); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 566, in sparse_reverse_permute; A.indptr, nrows, ncols, rperm, cperm, flag); File ""sparse_utils.pyx"", line 266, in qutip.cy.sparse_utils._sparse_reverse_permute_complex (qutip/cy/sparse_utils.c:5740); ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; # ; ## ERROR: Sparse: Bandwidth. Traceback (most recent call last):; File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", line 144, in test_sparse_bandwidth; out2=sparse_bandwidth(B); File ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", line 60",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73:1157,test,test,1157,https://qutip.org,https://github.com/qutip/qutip/issues/73,1,['test'],['test']
Testability," Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:29568,test,tests,29568,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/python3.11/site-packages/qutip/tests/test_countstat.py:58: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; args = (<function assert_allclose.<locals>.compare at 0xfffeb718f880>, array([0.0007729 , 0.00087857, 0.00099616, 0.00112145,...9, 0.00142197, 0.00144314, 0.00142247, 0.00135199,; 0.0012452 , 0.00112145, 0.00099616, 0.00087857, 0.0007729 ])); kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0.0001', 'verbose': True}; @wraps(func); def inner(*args, **kwds):; with self._recreate_cm():; > return func(*args, **kwds); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.00035163; E Max relative difference: 0.26008554; E x: array([0.0007",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:1804,test,testing,1804,https://qutip.org,https://github.com/qutip/qutip/issues/2316,1,['test'],['testing']
Testability," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:7582,test,test,7582,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['test']
Testability," __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/X",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9568,test,tests,9568,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20725,test,tests,20725,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," `/qutip/tests` (I originally didn't like it, but I now see more and more benefits of the `/src` (or `/lib`) convention in Python projects).; - the current `qutip/tests` should entirely become `/test/qutip`; - a new `/src/qutip/test` becomes a fully-supported _public_ module, including base classes (such as the data-layer mixins) and things like that. We'd need to be careful, because reducing your possibilities for flexibility in testing generally sounds like a bad idea to me, but if we take care to be very limited, it could work. I suspect you won't be able to import the test suite from inside `qutip.core.data` because of cyclical dependencies, which is probably a good thing - it'll force us to put the structure the right way round immediately. For an idea pretty far out of left field:; - the data layer tests should really _discover_ the specialisations rather than us needing to specify them (this is true regardless of this PR); - if so, in the new form, we _could_ directly export this part of the test suite from `qutip.test` (our test suite would import this as well), and add a little bit of logic to allow filtering of which tests need to be run (class decorators, probably); - downstream packages could then test just by importing our classes and disabling any specialisations that are only on internal data-layer objects. I'm not 100% sure how I feel about this, but it's plausible - we'd still be able to add extra methods in our own test suite if we wanted them, because we could just derive from the classes, rather than defining the names into the test suite in those cases. ---. About us breaking downstream CI: having been a maintainer of QuTiP and now Qiskit, I have a deep-rooted hatred for any upstream package that forces CI failures on its dependents, because it _requires_ the lower packages to move ""fix CI"" way up to the top of their priority list; you can't merge _anything_ until CI is running again, which is very frustrating. It messes with all your workflows.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-979917075:1297,test,test,1297,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-979917075,7,"['log', 'test']","['logic', 'test', 'tests']"
Testability," a given fixed Hermitian matrix and $\rho(T)$ is a time-evolved quantum state under given Hamiltonian and time interval $[0,T]$. You can also think about this as maximizing trace overlap between two quantum states, if we set $O$ to be another density matrix. I've used all three different fidelitycomputers, but apparently all of them failed to optimize the cost function properly. I'd appreciate it much if anyone can help me understanding what I've been doing wrong! I attached a simple example code below with explanations:. 1. First, I initialized setups such as defining Hamiltonian, initial state, and target observable $O$. Then by creating `create_pulse_optimizer` as follows, I defined/initialized the dynamics as `dyn` with some randomly chosen initial amps. I tried all possible choices of `fid_type`. (see code below). <img width=""977"" alt=""grape_example1"" src=""https://user-images.githubusercontent.com/55151494/170385354-f7efe678-11fc-47de-afa7-ac77359bb5e0.png"">. 2. I then ran the optimization using GRAPE and reported its results. As shown below and in particular the very last line of the figure, the cost function I wanted to estimate is just $0$, whereas my task wants to maximize $\text{Tr}(O\rho)$. While testing several things, I changed $O$ to a ket vector (e.g. $|00>$) and it worked very well. So in principle, I thought the code should work properly as we can think of $O$ being a quantum state (e.g. $|00><00|$). . <img width=""1013"" alt=""grape_2"" src=""https://user-images.githubusercontent.com/55151494/170385858-eeddb7fb-f821-4057-8503-ee2a52e27805.png"">; <img width=""968"" alt=""grape_3"" src=""https://user-images.githubusercontent.com/55151494/170385868-7816a7ee-cc90-4dba-83dd-3304cd2404d8.png"">. I'd be great if someone points out what I'm missing here. One of my guesses of why this is happening is perhaps because we evolve a ket statevector while the target observable is in full matrix form. If so though, I'm not sure how to cure this problem. Thank you in advance!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1900:1309,test,testing,1309,https://qutip.org,https://github.com/qutip/qutip/issues/1900,1,['test'],['testing']
Testability," access to Windows and macOS machines; - easier job dependency graphs within our resources. This first commit does not add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPAC",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1298,test,tests,1298,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['tests']
Testability," add in any Windows tests because they're currently known to fail, but the intention is to turn them on. The blocking issue is currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1474,test,test,1474,https://qutip.org,https://github.com/qutip/qutip/pull/1551,1,['test'],['test']
Testability," addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py"", line 35, in version2int; return sum([int(d) \* (100 *\* (3 - n)) for n, d in enumerate(str_list[:3])]); ValueError: invalid literal for int() with base 10: '1post0'; # ; ## ERROR: mesolve: simple time-dependence as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 398, in testMESimpleTDDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; ImportError: No module named rhs0; # ; ## ERROR: mesolve: constant decay as string list. Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mesolve.py"", line 349, in testMESimpleConstDecayAsStrList; medata = mesolve(H, psi0, tlist, c_op_list, [a.dag() \* a], args=args); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 209, in mesolve; expt_ops, args, options); File ""/usr/local/lib/python2.7/dist-packages/qutip/mesolve.py"", line 525, in _mesolve_list_str_td; exec(code, globals()); File """,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:15456,test,testMESimpleTDDecayAsStrList,15456,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['testMESimpleTDDecayAsStrList']
Testability," an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change behaviour (aside from the obvious) within this PR, so I codified those defaults into our file for now. If we want to begin counting the tests in the complexity analysis (and I'm not wildly against that), we can remove the line in a different PR. I suggest that reviewers use the ""Commit filter"" in the ""Files changed"" tab to show only the changes that come after merge commit b3fa49c (the one which actually grafts in `qutip/qutip-doc` ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:1637,test,tested,1637,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['test'],['tested']
Testability," assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22698,test,testing,22698,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1129,test,tests,1129,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init file 'qutip/cy/openmp/src/__init__.py' not found (or not a regular file); running egg_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16557,test,tests,16557,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/leg,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15871,test,tests,15871,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability, build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15786,test,tests,15786,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability, build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16488,test,tests,16488,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:37073,test,tests,37073,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability, build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/dual.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:12910,test,tests,12910,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability," calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qutip. ## Citations. [1] D. Aharonov, A. Kitaev, and N. Nisan, “Quantum circuits with mixed states,” in Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 20–30, 1998.; [2] A. Gilchrist, N. K. Langford, and M. A. Nielsen, “Distance measures to compare real and ideal quantum processes,” Physical Review A, vol. 71, no. 6, p. 062310, 2005; [3] J. Watrous, “Simpler semidefinite programs for completely bounded norms,” arXiv preprint arXiv:1207.5726, 2012.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:2007,test,tests,2007,https://qutip.org,https://github.com/qutip/qutip/pull/2416,2,['test'],"['test', 'tests']"
Testability," content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32; [build_ext]; compiler = mingw32; The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above.; 4. Obtain the QuTiP source code and installed it following the instructions given above. However, there are some errors after i run the installation verifying process. Is there anyone came across such errors? How can I repair these errors? The errors are presented as follow:; ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 60, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.46s. Est. time left: 00:00:00:25; 20.0%. Run time: 4.37s. Est. time left: 00:00:00:17; 32.0%. Run time: 5.00s. Est. time left: 00:00:00:10; 40.0%. Run time: 5.01s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.65s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.69s.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:1444,test,tests,1444,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability," corr., H td (fn td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (str-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6511,test,tests,6511,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability," could be re-adapted to be among other tutorials, with some title like ""Time-dependent `Qobj` with `QobjEvo`"". There could be much more commentary of the basics of `QobjEvo`. Some could be copy-pasted from the introductory comment in `qobjevo.py`. You are the best person to explain, with basic examples, of increasing complexity, what QobjEvo can do. Possibly taking a known physics problem, e.g., the damped harmonic oscillator with `mesolve`, could help the user. . * In [development-qobjevo.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo.ipynb), block 22 has the first check set to False, but this is both in the notebook I run locally and in the one online. So probably that's the expected behaviour. . In [development-qobjevo-adv.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-adv.ipynb), block 20 has a comment that is an unfinished sentence. In general, I think that examples could be much more descriptive, with comments, about the tests that are being performed. . * I wonder whether `qobjevo_codegen.py` should stay there. It stands out from all other modules, also because in the other cases the title are self-explanatory. ; Regarding this comment:; ```; Function to build cython code from str, compile and import it.; Used by cQobjEvo.; cy/codegen.py does the same thing for specific solver; ```; could then this file by moved to `qutip/cy/`?. * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), block 24 online has a printed error `TypeError: __call__() got an unexpected keyword argument 'args'`, yet on my machine runs fine, it can be replaced. I opened a PR, also running the last blocks and qutip.about(), https://github.com/qutip/qutip-notebooks/pull/72. . * In [development-qobjevo-timing.ipynb](https://github.com/qutip/qutip-notebooks/blob/master/development/development-qobjevo-timing.ipynb), `Time ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-489565751:2002,test,tests,2002,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-489565751,1,['test'],['tests']
Testability," currently a failure of the multiprocessing capabilities, which also affects mcsolve. We can now reasonably run coverage reporting on every test run, and upload all of them to Coveralls at the end, so we get accurate stats on what lines were actually tested. I've also turned pytest's timer, so it reports all tests that took longer than a second to run. This should really help identify where the real problems in our testing are - right now you should see that there's a `correlation` test that takes around 2 minutes to run, which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are rea",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:1501,test,tests,1501,https://qutip.org,https://github.com/qutip/qutip/pull/1551,2,['test'],"['test', 'tests']"
Testability," excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and ket ... ok; expect: operator list and state ... ok; expect: operator list and state list ... ok; expect: operator and state list ... ok; fastsparse: fast_csr_matrix operations ... ok; fastsparse: transpose operations ... ok; fastsparse: adjoint operations ... ok; Read and write complex valued decimal formatted data ... ok; Read and write complex valued default formatted data ... ok; Read and write complex valued exp formatted data ... ok; Read and write real valued decimal formatted data ... ok; Read and write real valued default formatted data ... ok; Read and write real valued exp formatted data ... ok; Read and write with automatic separator detection ... ok; qsave/qload ... ok; Floquet: test unitary evolution of time-dependent two-level system ... ok; gates: expand 1 to N ... ok; gates: expand 2 to N (using cnot, iswap, sqrtswap) ... ok; gates: expand 2 to N (using swap) ... ok; gates: expand 3 to N (using toffoli, fredkin, and random 3 qubit gate) ... ok; gates: expand 3 to 3 with permuTation (using toffoli) ... ok; gates: swap gate ... ok; qutip.tests.test_gates.TestGates.test_are_cliffords ... ok; qutip.tests.test_gates.TestGates.test_clifford_group_len ... ok; Graph: Graph Degree ... ok; Graph: Breadth-First Search ... ok; Graph: Reverse Cuthill-McKee Ordering (simple) ... ok; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:8501,test,test,8501,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,5,"['Test', 'test']","['TestGates', 'test', 'tests']"
Testability," ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23375,test,tests,23375,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability," for Debian unstable, all tests are passing with python 3.11. But a dozen tests using qobjevo fail with python 3.12:; ```; =========================== short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAIL",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1002,Test,TestMESolveStepFuncCoeff,1002,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'tests']"
Testability," from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py:1: in <module>; from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/P",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:12881,test,testing,12881,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," from numpy.testing import assert_, assert_equal, assert_string_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py:6: in <module>; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:13586,test,testing,13586,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing Tests**: Integrated the new tests into the existing pytest framework used for QuTiP, making use of fixtures and parameterization to test different scenarios and system setups effectively. ### Implementation Details. - **Concurrency**: The parallel execution is managed through a pool of processes, where each process is responsible for a subset of the total computations. This method is particularly effective for operations that can be divided into independent, smaller tasks.; - **Compatibility**: Ensured that the enhancements are backward-compatible with existing code by modifying only the internal execution strategy of the `correlation_2op_1t` function and by maintaining the original API signature.; - **Performance Considerations**: The parallel",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:1683,Test,Testing,1683,https://qutip.org,https://github.com/qutip/qutip/pull/2395,3,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability," get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.31s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.25s. Est. time left: 00:00:00:16; 32.0%. Run time: 4.65s. Est. time left: 00:00:00:09; 40.0%. Run time: 4.65s. Est. time left: 00:00:00:06; 52.0%. Run time: 5.06s. Est. time left: 00:00:00:04; 60.0%. Run time: 5.07s. Est. time left: 00:00:00:03; 72.0%. Run time: 5.50s. Est. time left: 00:00:00:02; 80.0%. Run time: 5.88s. Est. time left: 00:00:00:01; Total run time: 5.99s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_se.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_se.py"", line 119, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 365, in ssesolve; res = _ssesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 692, in _ssesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.81s. Est. time left: 00:00:00:27; 20.0%. Run time: 4.76s. Est. time left: 00:00:00:19; 32.0%. Run time: 5.66s. Est. time left: 00:00:00:12; 40.0%. Run time: 5.67s. Est. time left: 00:00:00:08; 52.0%. Run time: 6.59s. Est. time l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:9379,test,test,9379,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability," get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 3.40s. Est. time left: 00:00:00:24; 20.0%. Run time: 4.32s. Est. time left: 00:00:00:17; 32.0%. Run time: 4.88s. Est. time left: 00:00:00:10; 40.0%. Run time: 4.89s. Est. time left: 00:00:00:07; 52.0%. Run time: 5.45s. Est. time left: 00:00:00:05; 60.0%. Run time: 5.49s. Est. time left: 00:00:00:03; 72.0%. Run time: 6.02s. Est. time left: 00:00:00:02; 80.0%. Run time: 6.57s. Est. time left: 00:00:00:01; Total run time: 6.62s. --------------------- >> end captured stdout << ----------------------. ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_heterodyne; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 120, in test_ssesolve_heterodyne; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0%. Run time: 4.13s. Est. time left: 00:00:00:30; 20.0%. Run time: 5.12s. Est. time left: 00:00:00:20; 32.0%. Run time: 6.16s. Est. time left: 00:00:00:13; 40.0%. Run time: 6.21s. Est. time left: 00:00:00:09; 52.0%. Run time: 7.26s. Est. time l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:4581,test,test,4581,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['test']
Testability, grep 'CONFLICT'. CONFLICT (content): Merge conflict in setup.py; CONFLICT (add/add): Merge conflict in setup.cfg; CONFLICT (content): Merge conflict in qutip/visualization.py; CONFLICT (modify/delete): qutip/tests/test_superoper.py deleted in HEAD and modified in master. Version master of qutip/tests/test_superoper.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_subsys_apply.py; CONFLICT (content): Merge conflict in qutip/tests/test_random.py; CONFLICT (modify/delete): qutip/tests/test_rand.py deleted in master and modified in HEAD. Version HEAD of qutip/tests/test_rand.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_qubitcircuit.py; CONFLICT (content): Merge conflict in qutip/tests/test_noise.py; CONFLICT (content): Merge conflict in qutip/tests/test_mkl.py; CONFLICT (content): Merge conflict in qutip/tests/test_device.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_qubit_evolution.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_brtools.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_superop_reps.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_qobj.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_metrics.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_eigen.py; CONFLICT (modify/delete): qutip/superoperator.py deleted in HEAD and modified in master. Version master of qutip/superoperator.py left in tree.; CONFLICT (modify/delete): qutip/sparse.py deleted in HEAD and modified in master. Version master of qutip/sparse.py left in tree.; CONFLICT (content): Merge conflict in qutip/solve/stochastic.py; CONFLICT (content): Merge conflict in qutip/solve/steadystate.py; CONFLICT (content): Merge conflict in qutip/solve/sesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mcsolve.py; CONFLICT (content): Merge conflict in qutip/solve/floquet.py; CONFLICT (content,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165:1137,test,tests,1137,https://qutip.org,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165,1,['test'],['tests']
Testability," have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3155,test,tests,3155,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability," if it has always been there within the subdirectory `doc`. The commit objects of `qutip/qutip-doc` are all _technically_ completely rewritten (all the hashes change when you change the tree structure), but I kept all the metadata of them so they'll appear the same, and you can traverse the history just like you could before. Aside from the complete rewriting of history to place it inside a `doc` subdirectory, `git` sees this PR as an actual merge commit, because I melded the two repositories together. All commits will appear separately in `git log`, as you'd expect (although by default `git log --graph` might only show you one branch). I rewrote history to make using `git log` and `git blame` a little less confusing; if I had just made a single commit renaming everything into the subdirectory, there might have been weird name conflicts and a rename to navigate when trying to look through the history. This PR also logically changes a few links, so there are 3 commits tacked on the top to make the necessary changes within the `doc` folder and within the main QuTiP README. These include moving the docs GitHub Actions workflow up into the root of the repository (and suitably modifying it), and updating several links within the documentation. The documentation build action [has succeeded on my branch](https://github.com/jakelishman/qutip/runs/2469049269). I have excluded the `docs` repository from the CodeClimate analysis, since it's not really part of the code we want tested. I'm not absolutely certain that this is the correct decision (there's plenty of ancient code within `docs`), so I'm open to changing it. As part of this exclusion, I also had to specify the exclusion of the `tests` and (autogenerated) `dist` directories. This is not actually new behaviour; when no exclusions are set, [CodeClimate implicitly excludes these folders](https://docs.codeclimate.com/docs/excluding-files-and-folders#auto-generated-file-and-folder-exclusions). I'm not intending to change be",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1513:1075,log,logically,1075,https://qutip.org,https://github.com/qutip/qutip/pull/1513,1,['log'],['logically']
Testability," if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/loc",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3182,Test,TestKrylovSolve,3182,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability," in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10073,test,testing,10073,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability," in range(ntest) ]; t0 = time.time(); rhotr1 = [r.ptrace(p) for r,p in zip(r0,subs)]; ttr[0,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); rhotr2 = [ptracealt(r,p) for r,p in zip(r0,subs)]; ttr[1,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr1 = [v.ptrace(p) for v,p in zip(v0,subs)]; ttr[2,nd-2] = (time.time()-t0)/ntest; t0 = time.time(); vtr2 = [ptracealt(v,p) for v,p in zip(v0,subs)]; ttr[3,nd-2] = (time.time()-t0)/ntest; trdiff[0,nd-2] = sum([(r1 - r2).norm() for r1,r2 in zip(rhotr1,rhotr2)]); trdiff[1,nd-2] = sum([(r1 - r2).norm() for r1,r2 in zip(vtr1,vtr2)]); print(str(nd)+' qubits: rand dm rand ket'); print('ptrace: '+str(round(1000*ttr[0,nd-2],2))+' '+str(round(1000*ttr[2,nd-2],2))+' ms/trace'); print('new funcs: '+str(round(1000*ttr[1,nd-2],2))+' '+str(round(1000*ttr[3,nd-2],2))+' ms/trace'); print(' Sum diff = '+str(trdiff[0,nd-2])+', '+str(trdiff[1,nd-2])); print('Running time (ms/trace)'); print(' '+' '.join([str(n) for n in range(2,Nqmax+1)])+' qubits'); print('ptrace (dm) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[0]])); print('new func (dm) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[1]])); print('ptrace (ket) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[2]])); print('new func (ket) '+' '.join([(lambda x : x+''.join([' ' for m in range(5-len(x))]))(str(round(1000*x,1))) for x in ttr[3]])); print('sum((rho-rho).norm())'); print('dm '+' '.join([str(x) for x in trdiff[0]])); print('ket '+' '.join([str(x) for x in trdiff[0]])); plt.plot(range(2,Nqmax+1),ttr[0],c='C0'); plt.plot(range(2,Nqmax+1),ttr[2],c='C0',linestyle='--'); plt.plot(range(2,Nqmax+1),ttr[1],c='C1'); plt.plot(range(2,Nqmax+1),ttr[3],c='C1',linestyle='--'); plt.xlabel('# qubits'); plt.ylabel('time/trace [s]'); plt.yscale('log'); plt.legend(['ptrace (dm)','ptrace (ket)', 'new func (dm)', 'new func (ket)']); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1076:4204,log,log,4204,https://qutip.org,https://github.com/qutip/qutip/issues/1076,1,['log'],['log']
Testability," in the old script. I have changed nothing in hte duplicated script, other than uninstalling cvxpy to make it run.; I then reinstalled cvxpy with upgrade and then qutip again. This time I can still import qutip, but with a warning. I ran the script with no problem, but still got the same deviated behavior from 3 years ago. [codes.zip](https://github.com/user-attachments/files/16367713/codes.zip). The 3-year-old script is included only to show the previous results. It is not meant to be run. I suspect if you run it with your likely different setup, you might get the same deviation as I did, or even yet another different deviation. I cannot recall the state of installation I had from 3 years ago. I believe I did it through conda. I just realized that I cannot include qutip scripts with this report. I included a zipped folder containing these two files. Please let me know if it didn'tgo through. Thank you! . ### Code to Reproduce the Bug. ```shell; Old code in ""Ikonen First Shot New Unitary Trans States 2 level Full H Gated Test 2 - Copy.ipynb""; New code in ""Test.ipynb""; Both attached.; These two codes are exactly identical. Only difference is in the qutip installation, one from 3 years ago and one just completed.; ```. ### Code Output. ```shell; Output in block 23 in the new code is significantly different from that in block 215 in the old code.; ```. ### Expected Behaviour. Expected qutip to produce same results on identical codes 3 years apart. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier Galicia, Paul Menczel, and Patrick Hopf.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501:1766,Test,Test,1766,https://qutip.org,https://github.com/qutip/qutip/issues/2501,1,['Test'],['Test']
Testability," inefficient. Instead, we can use the `QFunc` class, which adds an extra step (set-up and call as opposed to just call), but it encapsulates the state.; ```python; >>> qfunc_calculator = qutip.QFunc(xs, xs); >>> husimiqs = [qfunc_calculator(state) for state in states]; ```; This is much much faster. The class version `QFunc` also takes a memory option, but since this is designed to be the precompute version, it errors out if the amount of memory needed is too great, rather than trying to fall back. This gives users a way to put a limit on the amount of memory used:; ```python; >>> qfunc_calculator_low_memory = qutip.QFunc(xs, xs, memory=0); >>> qfunc_calculator_low_memory(states[0]); MemoryError: Refusing to precompute up to 32 basis states. This would require 78.52 MB, but only 0 MB is allowed.; ```. ## Timings. These benchmarks were taken on a Macbook Pro 2.9GHz i5 (2015) with 8GB of RAM. The different tests had different numbers of phase-space coordinates (the first number in the first column) in each dimension, and the number after 'ket' or 'dm' is the Hilbert space dimension. The columns are:. - `original`: The state of the code before this and the previous commit; - `prev def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for #934; - `prev pre`: Calls of `qutip.qfunc(..., precompute=pre)`, where the calculation of `pre` was done outside the timing. This times how long it would take to call in a loop many times.; - `cur def`: Direct calls of `qutip.qfunc` with the given state and phase-space coordinates, but everything else at the default for this commit.; - `cur pre`: Calls to a pre-constructed `qutip.QFunc` instance (which was excluded from the timings) for this commit. This times how long it would take to call in a loop many times. ```text; │ original │ prev def │ prev pre │ cur def │ cur pre; ────────────┼───────────┼───────────┼───────────┼───────────┼──────────; 11, ket 5 │ 126.07 µs │ ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583:3308,test,tests,3308,https://qutip.org,https://github.com/qutip/qutip/pull/1583,1,['test'],['tests']
Testability," line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 190, in test_04_1_state_with_list_str_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\li",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:9122,test,tests,9122,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability," line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 245, in test_05_2_unitary_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:22678,test,tests,22678,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability," linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:1369,test,tests,1369,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability," many many things in the same test function.; > ; > The test seems structured ok to me. Certainly the testing algorithm isn't the major cause of speed loss. You could try timing some ""real-world"" examples of using your measurements, and try running them in a profiler to see if there are any obvious ways to speed things up.; > ; > With any luck the new data-layer tools and the possibility of using dense `Qobj` storage will give you a fair amount of speed-up once they're complete, since I imagine in your small circuit you're paying quite a lot of sparse matrix overhead.; > ; > I'll prefix this last part with: _you should always profile your code before optimising it_. That said, let me wildly break that rule and guess at where I think you'll find big speed-ups: caching and pre-computation. If you know you're going to run the same thing loads and loads of times, then you shouldn't have to call `self.propagators` each time, or build `measurement_ops` inside `measure_comp_basis`. Do those once at the start of `run_statistics`, and save them.; > ; > Minor things that _may_ speed up - check the profiling!; > ; > 1. ""compress"" the output of `self.propagators`: consecutive propagators with no measurements or classical controls inbetween can be pre-multiplied together at the start to make one matrix. This will save you ~3 matrix multiplications per run in the test.; > 2. use more efficient ways to construct large tensor spaces: `qutip.basis`, `qutip.projection` and `qutip.qeye` can all directly constructor product spaces (e.g. `qutip.basis([2, 2, 2], [0, 1, 0])`). `tensor` is a comparatively expensive operation, and tensoring a list of elements internally is effectively `tensor(...(tensor(tensor(els[0], els[1]), els[2]), ...), els[-1])`. Excellent Suggestions ! I already added some of the speed-ups you suggested, just haven't pushed them yet ! However, I think it might just be a better idea to go with Boxi's idea of removing the need for way too many runs in the first place !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640128273:1705,test,test,1705,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640128273,1,['test'],['test']
Testability," means that if the global option `auto_tidyup` is set to `True` (its default), then small values (< 1e-15) are truncated from the output matrices. This generally ends up with ""neater"" looking matrices when output; there are far fewer numbers like `1 + 4.516584e-17j` reported, when that's basically just `1`. There are, however, a couple of problems because of this. The first is speed; after every (very simple)_ operation, such as `matmul` or `add`, the tidier runs on the matrix. This typically has `O(nnz)` complexity for sparse matrices, and `O(n * n)` complexity for a dense square matrix with `n` rows. This adds very significant overhead on to simple operations. Second is numerical precision. By dropping small terms, we are effectively turning numerical imprecision into a ""feature"" as opposed to a bug. Because QuTiP 5 uses the new data-layer to do most of its operations, rather than constructing intermediary `Qobj` instances, many mathematical operations will not give the same result if the data layer is used directly compared to if `Qobj` is used at every step. For example, let's say we have three random `Qobj`:; ```python; a, b, c = [qutip.rand_herm(5) for _ in [None]*3]; ```; Now, in general,; ```python; a + b + c != qutip.Qobj(a.data + b.data + c.data); ```; because `a + b + c` will invoke the `tidyup` code twice, whereas the right-hand side will not invoke it at all. This means that despite the fact that `Qobj.__add__` uses the data-layer addition underneath, there will be numerical differences using the QuTiP default settings. I suspect these sort of problems are behind the recent test instabilities on `dev.major` with regards to tolerances. ----. My vote is for a removal of `auto_tidyup`, or at the very least, changing the default value of the option to `False`. We still want nice values for display, so perhaps we could consider having an option to produce a tidied up copy when calling `__repr__`, instead?. Interested to hear what others think about this too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1349:1691,test,test,1691,https://qutip.org,https://github.com/qutip/qutip/issues/1349,1,['test'],['test']
Testability," no attribute 'settings'; !!!!!!!!!!!!!!!!!!! Interrupted: 60 errors during collection !!!!!!!!!!!!!!!!!!!; =========================== 60 error in 1.85 seconds ===========================; (base) cln-232-18:qutip nathanshammah$; ```; this on the 4.4.0 release version. ; On the dev version, ; ```; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Fatal Python error: Segmentation fault: 11; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip; collected 561 items. qutip/tests/test_basis_transformation.py ........ [ 1%]; qutip/tests/test_brmesolve.py Fatal Python error: Segmentation fault: 11; ```; and with nosetests; ```; (qdev) cln-232-18:qutip nathanshammah$ nosetests; /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjCte size changed, may indicate binary incompatibility. Expected 344 from C header, got 352 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTd size changed, may indicate binary incompatibility. Expected 560 from C header, got 568 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTdMatched size changed, may indicate binary incompatibility. Expected 1344 from C header, got 1352 from PyObject; return f(*args, **kwds); /miniconda3/envs/qdev/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:29992,test,tests,29992,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability," not ideal as a Dense, but I don't think we should raise an error for other type... It doesn't actually restrict the RHS to CSR -- it only *constructs* the RHS as a CSR initially. The base solver will convert the RHS to the correct format for the integrator if needed. It might be possible one day to avoid constructing the RHS as a CSR but it might be tricky to make it not horribly slow, so I'd like to leave this as potential enhancement rather than work on it right now. > There is no `heomsolve` to go with `HEOMSolver`. I've added `heomsolve`. It has more parameters than `sesolve` or `mesolve`, which is not great, but I'm not sure how to avoid it. The bath and the max_depth are not really optional for the HEOM, and there aren't reasonably default values. > With other solvers, they accept `H` as a `Qobj` or `QobjEvo` only, list format is accepted by the __solve function. I changed HEOMSolver to only support `Qobj` or `QobjEvo`. I allowed `HSolverDL` to continue to support other objects since `HSolverDL` exists only for backwards compatibility. Perhaps we should remove it at some point, but the amount of code in it is also tiny. > `bofin_*.py` does not have a `__all__`, even if they are not supposed to be imported directly, it would be better if they had. I've added `__all__`.; ; > The test coverage does not include time-dependent Hamiltonian. Are those too slow to include in automated tests?. The tests don't include a truly time-dependent case because it's hard to solve one analytically. Previously I tested the time-dependent logic by supplying `[H]` as the system (i.e. fooling the code into using the time-dependent path) but that broke when I switched to using `QobjEvo.isconstant`. I fixed it by using `[H, lambda t: 1.0]` instead, which would be very hard to determine as constant. Thank for picking this up. Me might be able to do a truly time-dependent test by running with a memory-less bath and comparing with mesolve, but I'd also like to leave that as future work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1165701845:1482,test,test,1482,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1165701845,6,"['log', 'test']","['logic', 'test', 'tested', 'tests']"
Testability," not specified by user; if ss_args['use_rcm'] and ('permc_spec' not in kwargs.keys()):; ss_args['permc_spec'] = 'NATURAL'; ; L = _steadystate_setup(A, c_op_list); # Set weight parameter to avg abs val in L if not set explicitly; if 'weight' not in kwargs.keys():; ss_args['weight'] = np.mean(np.abs(L.data.data.max())); ss_args['info']['weight'] = ss_args['weight']; ; n = int(np.sqrt(L.shape[0])); if ss_args['method'] == 'iterative':; ss_list = _steadystate_LU_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; elif ss_args['method'] == 'power':; ss_list = _steadystate_power_liouvillian(L, ss_args); L, perm, perm2, rev_perm, ss_args = ss_list; else:; > raise ValueError(""Invalid preconditioning method.""); E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:16504,test,test,16504,https://qutip.org,https://github.com/qutip/qutip/issues/1755,2,['test'],"['test', 'tests']"
Testability, numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45090,test,testing,45090,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability," qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1886,test,tests,1886,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability," qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_st",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1804,test,tests,1804,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability," qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ========================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2158,Test,TestSESolve,2158,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestSESolve']
Testability, qutip/tests/test_superoper.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_subsys_apply.py; CONFLICT (content): Merge conflict in qutip/tests/test_random.py; CONFLICT (modify/delete): qutip/tests/test_rand.py deleted in master and modified in HEAD. Version HEAD of qutip/tests/test_rand.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_qubitcircuit.py; CONFLICT (content): Merge conflict in qutip/tests/test_noise.py; CONFLICT (content): Merge conflict in qutip/tests/test_mkl.py; CONFLICT (content): Merge conflict in qutip/tests/test_device.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_qubit_evolution.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_brtools.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_superop_reps.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_qobj.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_metrics.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_eigen.py; CONFLICT (modify/delete): qutip/superoperator.py deleted in HEAD and modified in master. Version master of qutip/superoperator.py left in tree.; CONFLICT (modify/delete): qutip/sparse.py deleted in HEAD and modified in master. Version master of qutip/sparse.py left in tree.; CONFLICT (content): Merge conflict in qutip/solve/stochastic.py; CONFLICT (content): Merge conflict in qutip/solve/steadystate.py; CONFLICT (content): Merge conflict in qutip/solve/sesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mcsolve.py; CONFLICT (content): Merge conflict in qutip/solve/floquet.py; CONFLICT (content): Merge conflict in qutip/solve/countstat.py; CONFLICT (content): Merge conflict in qutip/solve/correlation.py; CONFLICT (content): Merge conflict in qutip/solve/_brtools.pyx; CONFLICT (content): Merge conflict in qutip/random_objects.py; CONFLICT (modify/delete): qutip/qobjevo.py delete,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165:1428,test,tests,1428,https://qutip.org,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165,1,['test'],['tests']
Testability," raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8013f130a5077b238a4346b73e149432b180a8ea""><code>8013f13</code></a> 8.3.2 version bump</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/23c7ca82f09df6ba1047d2d96714eb825f0d7948""><code>23c7ca8</code></a> Update CHANGES.rst</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/8450366be331762ae327036e3c6658c517b05638""><code>8450366</code></a> Update release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/a0afe89990f5ba40a019afc2f22e1b656f8cfd03""><code>a0afe89</code></a> Update test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/9e08eb8f78fdfd2f476e1b20b7cf38683754866b""><code>9e08eb8</code></a> Raise ValueError if color specifier is too long</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/bd5cf7db87c6abf7c3510a50170851af5538249f""><code>bd5cf7d</code></a> FLI tests for Oss-fuzz crash.</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/94a0cf1b14f09626c7403af83fa9fef0dfc9bb47""><code>94a0cf1</code></a> Fix 6-byte OOB read in FliDecode</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/cece64f4be10ab28b12a83a3555af579dad343a5""><code>cece64f</code></a> Add 8.3.2 (2021-09-02) [CI skip]</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/e42238637651f191c2fc6e3f4024348c126e0ccc""><code>e422386</code></a> Add release notes for Pillow 8.3.2</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/08dcbb873217874eee0830fc5aaa1f231c5af4fa""><code>08dcbb8</code></a> Pillow 8.3.2 supports Python 3.10 [ci skip]</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/8.2.0...8.3.2"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1654:7970,test,tests,7970,https://qutip.org,https://github.com/qutip/qutip/pull/1654,1,['test'],['tests']
Testability," real one */; ^; compilation terminated.; error: Setup script exited with error: Command ""gcc -pthread -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -mtune=generic -march=x86-64 -ftree-vectorize -g2 -O2 -pipe -fPIC -Wformat -Wformat-security -fno-omit-frame-pointer -fstack-protector-strong --param ssp-buffer-size=4 -fexceptions -D_FORTIFY_SOURCE=2 -feliminate-unused-debug-types -Wno-error -Wp,-D_REENTRANT -fPIC -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/lib/python3.5/site-packages/numpy/core/include -I/home/jakeargent/anaconda3/include/python3.5m -c qutip/cy/spmatfuncs.c -o build/temp.linux-x86_64-3.5/qutip/cy/spmatfuncs.o -w -ffast-math -O3 -march=native -funroll-loops"" failed with exit status 1; `. Then, I cloned the qutip/qutip repository, and tried to build a wheel with `python setup.py bdist_wheel` under the qutip directory. Which gave me the following log:. `running bdist_wheel; running build; running config_cc; unifing config_cc, config, build_clib, build_ext, build commands --compiler options; running config_fc; unifing config_fc, config, build_clib, build_ext, build commands --fcompiler options; running build_src; build_src; building py_modules sources; building extension ""qutip.cy.spmatfuncs"" sources; building extension ""qutip.cy.stochastic"" sources; building extension ""qutip.cy.sparse_utils"" sources; building extension ""qutip.cy.graph_utils"" sources; building extension ""qutip.cy.interpolate"" sources; building extension ""qutip.cy.spmath"" sources; building extension ""qutip.cy.heom"" sources; building extension ""qutip.cy.math"" sources; building extension ""qutip.cy.spconvert"" sources; building extension ""qutip.cy.ptrace"" sources; building extension ""qutip.control.cy_grape"" sources; building data_files sources; build_src: building npy-pkg config files; running build_py; copying qutip/version.py -> build/lib.linux-x86_64-3",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/639:2768,log,log,2768,https://qutip.org,https://github.com/qutip/qutip/issues/639,1,['log'],['log']
Testability," really getting annoying. I copied the error message from Travis bellow:; > ; > ```; > =================================== FAILURES ===================================; > ___________________________ test_MCSimpleConstStates ___________________________; > @pytest.mark.slow; > def test_MCSimpleConstStates():; > ""Monte-carlo: Constant H with constant collapse (states)""; > N = 10 # number of basis states to consider; > a = destroy(N); > H = a.dag() * a; > psi0 = basis(N, 9) # initial state; > kappa = 0.2 # coupling to oscillator; > c_op_list = [np.sqrt(kappa) * a]; > tlist = np.linspace(0, 10, 100); > mcdata = mcsolve(H, psi0, tlist, c_op_list, [], ntraj=ntraj,; > options=Options(average_states=True)); > assert_(len(mcdata.states) == len(tlist)); > assert_(isinstance(mcdata.states[0], Qobj)); > expt = expect(a.dag() * a, mcdata.states); > actual_answer = 9.0 * np.exp(-kappa * tlist); > avg_diff = np.mean(abs(actual_answer - expt) / actual_answer); > > assert_equal(avg_diff < mc_error, True); > E AssertionError: ; > E Items are not equal:; > E ACTUAL: False; > E DESIRED: True; > ../../../../miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.5.0.dev0+4512014-py3.7-macosx-10.9-x86_64.egg/qutip/tests/test_mcsolve.py:240: AssertionError; > ----------------------------- Captured stdout call -----------------------------; > 10.0%. Run time: 2.25s. Est. time left: 00:00:00:20; > 20.0%. Run time: 4.93s. Est. time left: 00:00:00:19; > 30.0%. Run time: 6.67s. Est. time left: 00:00:00:15; > 40.0%. Run time: 8.10s. Est. time left: 00:00:00:12; > 50.0%. Run time: 10.13s. Est. time left: 00:00:00:10; > 60.0%. Run time: 12.40s. Est. time left: 00:00:00:08; > 70.0%. Run time: 14.97s. Est. time left: 00:00:00:06; > 80.0%. Run time: 16.57s. Est. time left: 00:00:00:04; > 90.0%. Run time: 18.81s. Est. time left: 00:00:00:02; > 100.0%. Run time: 20.29s. Est. time left: 00:00:00:00; > Total run time: 20.34s; > ---------- coverage: platform darwin, python 3.7.7-final-0 -------",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896:1056,Assert,AssertionError,1056,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896,1,['Assert'],['AssertionError']
Testability," return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9074,test,tests,9074,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," run the full set of tests, and investigate what kind of test failures occur. In the meantime, I'll generally share some (what I _think_ is) relevant experience in the context of handling randomness in tests:; - My understanding is that we're talking about not testing the behaviour of random-number generations per se, but how the numbers they generate affect the non-deterministic functions/algorithms, which depend on the former. In such cases, I've either used a fixed seed (as you've mentioned in your [original post](https://github.com/qutip/qutip/issues/1268#issue-619006856)), which can get a bit messy, as there's Python's `random`, NumPy's `random` (which also comes in a legacy and a modern flavour, namely `numpy.random.RandomState` and `numpy.random.Generator`). Also, as you've mentioned, there's tight coupling between the implementation logic and the corresponding set of tests, and updates in the former require constant maintenance of the latter.; - As an alternative, I've sometimes resorted to [`mock`](https://docs.python.org/3/library/unittest.mock.html)ing the random-number generation process itself, and - in a way equivalent to using a fixed seed - providing a pre-defined sequence of numbers to the functions which depend on those. It comes with the same disadvantage of relatively tight coupling, but is somehow more flexible and powerful than just setting the seeds.; - I have used Hypothesis in the past (on a relatively small-scale project), and it's indeed a great framework with a lot of interesting and nice functionalities. I like it very much, but one disadvantage I ran into was the increased overall time for completion of a test run. In my case, a viable approach, for instance, was to run my Hypothesis tests (which were a subset of all tests) with a bit larger periodicity (in the CI pipeline) than the regular tests. Another concern that I intuitively have (I may be _wildly_ wrong on this one, though, not having yet properly explored QuTiP's testing landsc",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707:1781,mock,mock,1781,https://qutip.org,https://github.com/qutip/qutip/issues/1268#issuecomment-1123679707,1,['mock'],['mock']
Testability," search_path, dry_run=dry_run); 37 elif os.name == 'nt':. ~/opt/anaconda3/lib/python3.7/distutils/spawn.py in _spawn_posix(cmd, search_path, verbose, dry_run); 148 ""command %r terminated by signal %d""; --> 149 % (cmd, os.WTERMSIG(status))); 150 elif os.WIFEXITED(status):. DistutilsExecError: command 'gcc' terminated by signal 6. During handling of the above exception, another exception occurred:. CompileError Traceback (most recent call last); ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 215 inplace=build_inplace, language_level=language_level); 216 mod = imp.load_dynamic(name, so_path). ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 inplace=inplace,; --> 191 reload_support=pyxargs.reload_support); 192 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. ~/opt/anaconda3/lib/python3.7/distutils/dist.py in run_commands(self); 965 for cmd in self.commands:; --> 966 self.run_command(cmd); 967 . ~/opt/anaconda3/lib/python3.7/distutils/dist.py in run_command(self, command); 984 cmd_obj.ensure_finalized(); --> 985 cmd_obj.run(); 986 self.have_run[command] = 1. ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:2636,assert,assert,2636,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['assert'],['assert']
Testability," self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_rhs_reuse.py"", line 53, in test_rhs_reuse; out1 = qt.mesolve(H, psi0,tlist, e_ops=e_ops); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\mesolve.py"", line 336, in mesolve; e_ops, args, options, progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Use",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:4565,test,tests,4565,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability, short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_sta,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1174,test,testPropHOStrTd,1174,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testPropHOStrTd']
Testability," sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator. Alternative name to :func:`qeye`.; 494; 495 Parameters; (...); 506 Identity operator Qobj.; 507 """"""; --> 508 return qeye(dims). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:488, in qeye(dimensions); 452 """"""; 453 Identity operator.; 454; (...); 485; 486 """"""; 487 size, dimensions = _implicit_tensor_dimensions(dimensions); --> 488 return Qobj(fast_identity(size),; 489 dims=dimensions, isherm=True, isunitary=True). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:389, in fast_identity(N); 387 ptr = np.arange(N+1, dtype=np.int32); 388 ptr[-1] = N; --> 389 return fast_csr_matrix((data,ind,ptr),shape=(N,N)). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:55, in fast_csr_matrix.__init__(self, args, shape, dtype, copy); 53 self.dtype = complex; 54 self.maxprint = 50; ---> 55 se",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:2243,test,test-env-scipy-qutip,2243,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability," terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcess",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3515,test,tests,3515,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability, test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[QFT-Qobj propagation]; 2.65s call test_control_pulseoptim.py::TestOptimization::test_crab[Qobj propagation]; 2.57s call test_wigner.py::test_wigner_compare_methods_dm; 2.46s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Symplectic coupled oscillators-Qobj propagation]; 2.31s call test_parallel.py::test_parfor1; 2.11s call test_wigner.py::test_wigner_bell1_su2parity; 1.90s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Ising state-to-state-Qobj propagation]; 1.86s call test_sparse.py::test_sp_profile; 1.66s call test_correlation.py::test_correlation_solver_equivalence[es-legacy]; 1.65s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Lindbladian amplitude damping channel-Qobj propagation]; 1.56s call test_correlation.py::test_correlation_solver_equivalence[es]; 1.43s call test_mesolve.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:3321,Test,TestOptimization,3321,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestOptimization']
Testability," the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.dims); #print(superoperator.dims); > assert (test_supe - superoperator).norm(maxiter=1e6) < 1e-5; E assert 313.53468707624677 < 1e-05; E + where 313.53468707624677 = <bound method Qobj.norm of Quantum object: d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1474,Test,TestSuperopReps,1474,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['Test'],['TestSuperopReps']
Testability," to 1.21.0.; <details>; <summary>Release notes</summary>; <p><em>Sourced from <a href=""https://github.com/numpy/numpy/releases"">numpy's releases</a>.</em></p>; <blockquote>; <h2>v1.21.0</h2>; <h1>NumPy 1.21.0 Release Notes</h1>; <p>The NumPy 1.21.0 release highlights are</p>; <ul>; <li>continued SIMD work covering more functions and platforms,</li>; <li>initial work on the new dtype infrastructure and casting,</li>; <li>universal2 wheels for Python 3.8 and Python 3.9 on Mac,</li>; <li>improved documentation,</li>; <li>improved annotations,</li>; <li>new <code>PCG64DXSM</code> bitgenerator for random numbers.</li>; </ul>; <p>In addition there are the usual large number of bug fixes and other; improvements.</p>; <p>The Python versions supported for this release are 3.7-3.9. Official; support for Python 3.10 will be added when it is released.</p>; <p>:warning: Warning: there are unresolved problems compiling NumPy 1.21.0 with gcc-11.1 .</p>; <ul>; <li>Optimization level <code>-O3</code> results in many wrong warnings when running the tests.</li>; <li>On some hardware NumPy will hang in an infinite loop.</li>; </ul>; <h2>New functions</h2>; <h3>Add PCG64DXSM BitGenerator</h3>; <p>Uses of the PCG64 BitGenerator in a massively-parallel context have; been shown to have statistical weaknesses that were not apparent at the; first release in numpy 1.17. Most users will never observe this weakness; and are safe to continue to use PCG64. We have introduced a new; PCG64DXSM BitGenerator that will eventually become the new default; BitGenerator implementation used by <code>default_rng</code> in future releases.; PCG64DXSM solves the statistical weakness while preserving the; performance and the features of PCG64.</p>; <p>See <code>upgrading-pcg64</code> for more details.</p>; <p>(<a href=""https://github-redirect.dependabot.com/numpy/numpy/pull/18906"">gh-18906</a>)</p>; <h2>Expired deprecations</h2>; <ul>; <li>The <code>shape</code> argument <code>numpy.unravel_index</code> cannot",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1767:1104,test,tests,1104,https://qutip.org,https://github.com/qutip/qutip/pull/1767,1,['test'],['tests']
Testability," to upgrading.</p>; <p>Users who wish to stay on urllib3 1.x can pin to <code>urllib3&lt;2</code>.</p>; </li>; </ul>; <h2>2.29.0 (2023-04-26)</h2>; <p><strong>Improvements</strong></p>; <ul>; <li>Requests now defers chunked requests to the urllib3 implementation to improve; standardization. (<a href=""https://redirect.github.com/psf/requests/issues/6226"">#6226</a>)</li>; <li>Requests relaxes header component requirements to support bytes/str subclasses. (<a href=""https://redirect.github.com/psf/requests/issues/6356"">#6356</a>)</li>; </ul>; </blockquote>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/psf/requests/commit/147c8511ddbfa5e8f71bbf5c18ede0c4ceb3bba4""><code>147c851</code></a> v2.31.0</li>; <li><a href=""https://github.com/psf/requests/commit/74ea7cf7a6a27a4eeb2ae24e162bcc942a6706d5""><code>74ea7cf</code></a> Merge pull request from GHSA-j8r2-6x86-q33q</li>; <li><a href=""https://github.com/psf/requests/commit/302225334678490ec66b3614a9dddb8a02c5f4fe""><code>3022253</code></a> test on pypy 3.8 and pypy 3.9 on windows and macos (<a href=""https://redirect.github.com/psf/requests/issues/6424"">#6424</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/b639e66c816514e40604d46f0088fbceec1a5149""><code>b639e66</code></a> test on py3.12 (<a href=""https://redirect.github.com/psf/requests/issues/6448"">#6448</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/d3d504436ef0c2ac7ec8af13738b04dcc8c694be""><code>d3d5044</code></a> Fixed a small typo (<a href=""https://redirect.github.com/psf/requests/issues/6452"">#6452</a>)</li>; <li><a href=""https://github.com/psf/requests/commit/2ad18e0e10e7d7ecd5384c378f25ec8821a10a29""><code>2ad18e0</code></a> v2.30.0</li>; <li><a href=""https://github.com/psf/requests/commit/f2629e9e3c7ce3c3c8c025bcd8db551101cbc773""><code>f2629e9</code></a> Remove strict parameter (<a href=""https://redirect.github.com/psf/requests/issues/6434"">#6434</a>)</li>; <li><a href=""https://github.com/psf/req",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2164:5655,test,test,5655,https://qutip.org,https://github.com/qutip/qutip/pull/2164,1,['test'],['test']
Testability," use QuTiP and a different library in the same environment _without_ using them together, but can't even have them coexist because of version incompatibilities in optional conversion features? That's frustrating for users, even though it's not really anybody's fault. Bugging developers is fine when people want to use packages that are still maintained, but I'm sure we've all come up against times in research when you get to trying out a package to do one specific thing that's been abandoned for a while. Again, this certainly isn't an unsolvable problem: having versioning in the interface API is one solution to some of these problems. ---. For greater discussion, here's an alternate approach: instead of objects defining `__qutip_qobj__`, instead we expose an entry-point `qutip.Qobj.register_conversion_function(converter, type, priority, version=None)`, and downstream libraries register functions rather than defining methods on their classes. The logic inside the `Qobj` constructor remains approximately the same as what you suggest. I think TensorFlow does something a little more similar to this? (I'm not very familiar with it at all.). Advantages of this over a `__qutip_qobj__` magic method:; - Users aren't limited to what libraries define for them, but can add their own conversions or override library ones if they don't like them. I actually see this as being closer to Julia's dispatch, or Rust's `impl for`.; - It doesn't involve weird namespacing, or anything like that, and doesn't require downstream classes to carry around additional slots. It's less an issue for classes that define `__slots__` since those are frozen methods, but extra methods adds a minor amount vtable weight for most libraries, and makes their class definitions more complex.; - Control between different versions is perhaps a little easier (though a minor point): this _feels_ easier to separate out different versions, and detect what to register as the conversion function with QuTiP. This is a pa",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691:5333,log,logic,5333,https://qutip.org,https://github.com/qutip/qutip/issues/1508#issuecomment-830003691,1,['log'],['logic']
Testability," version 3.2.0 can not run testing in my mac system OS X EI Capitan. When I try:; `$ python3 -c ""import qutip.testing as qt; qt.run()""`; I get the follow message:; ; > ---; > ; > Ran 0 tests in 0.000s; 2. However, the testing.py and the folder 'tests' exist. I can run the test in the 'tests' folder one-by-one. For example, when I run:; `$ sudo python3 test_mesolve.py`; I get; ; > .....................; > Ran 21 tests in 48.167s; > ; > OK; 3. `sudo` is needed here for permission. For example, when I run: ; `$ python3 test_mesolve.py`; I get a set of the following error message. > # .....E...E.E...E..E..; > ## ERROR: mesolve: time-dependence as array with super as init cond; > ; > Traceback (most recent call last):; > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/nose/case.py"", line 198, in runTest; > self.test(*self.arg); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/tests/test_mesolve.py"", line 638, in testMETDDecayAsArray; > out1 = mesolve(H, psi0, tlist, c_op_list, []); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 277, in mesolve; > progress_bar); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 661, in _mesolve_list_str_td; > cgen.generate(config.tdname + "".pyx""); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 116, in generate; > self.file(filename); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 78, in file; > self.file = open(filename, ""w""); > PermissionError: [Errno 13] Permission denied: 'rhs165050.pyx'",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/445:1010,test,tests,1010,https://qutip.org,https://github.com/qutip/qutip/issues/445,2,['test'],"['testMETDDecayAsArray', 'tests']"
Testability," we missed your last comment, but Nathan just notified us. We will get it all sorted out by wednesday at most. I leave a todolist to keep track of everything that @Ericgig mentioned. To-do. * [x] Include some tests like test_sesolve.py --> **Included tests with random Hamiltonian, ising transverse field and SHO. Both for states and expectation values. Lacking a testing example for callable e_ops**. * [x] Why <code>krylov_dim=30?</code> ? --> **There was a subtle physical reason, but we conclude its better to leave it as a free input without a predefined variable.**. * [x] <code>tolerance</code>, <code>store_states</code> and <code>store_final_state</code> --> **Changed as an Options qutip class, now tolerance is <code>Options.atol</code> property**. * [x] <code>e_ops</code> should also take a callable or list of mixed function and <code>Qobj</code> --> **Added support**. * [x] Remove support for <code>np.ndarray</code> --> **Removed for qutip cleanliness**. * [x] Assertion errors to specififc errors --> **Modified.**. * [x] Check that psi0 is a ket --> **Added**. * [x] If both <code>store_states</code> and <code>store_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.sparse</code> . There",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:995,Assert,Assertion,995,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,1,['Assert'],['Assertion']
Testability," when creating a clean environment, and installing `qutip` (and IPython as console) through mamba.; Next, I've opened an IPython console and ran `import qutip`, which resulted in the exception printed below - stating that the `format` attribute of the `fast_csr_matrix` cannot be set. I believe the latest `scipy` [release](https://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:1033,test,test-env-scipy-qutip,1033,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability," while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11348,test,tests,11348,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Trac",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17666,test,tests,17666,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25773,test,tests,25773,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceba",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2374,test,tests,2374,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability," ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in load_module(self, fullname); 461 build_inplace=self.inplace,; --> 462 language_level=self.language_level); 463 return module. ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 230 if sys.version_info[0] >= 3:; --> 231 raise exc.with_traceback(tb); 232 else:. ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in load_module(name, pyxfilename, pyxbuild_dir, is_package, build_inplace, language_level, so_path); 214 so_path = build_module(module_name, pyxfilename, pyxbuild_dir,; --> 215 inplace=build_inplace, language_level=language_level); 216 mod = imp.load_dynamic(name, so_path). ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyximport.py in build_module(name, pyxfilename, pyxbuild_dir, inplace, language_level); 190 inplace=inplace,; --> 191 reload_support=pyxargs.reload_support); 192 assert os.path.exists(so_path), ""Cannot find: %s"" % so_path. ~/opt/anaconda3/lib/python3.7/site-packages/pyximport/pyxbuild.py in pyx_to_dll(filename, ext, force_rebuild, build_in_temp, pyxbuild_dir, setup_args, reload_support, inplace); 101 obj_build_ext = dist.get_command_obj(""build_ext""); --> 102 dist.run_commands(); 103 so_path = obj_build_ext.get_outputs()[0]. ~/opt/anaconda3/lib/python3.7/distutils/dist.py in run_commands(self); 965 for cmd in self.commands:; --> 966 self.run_command(cmd); 967 . ~/opt/anaconda3/lib/python3.7/distutils/dist.py in run_command(self, command); 984 cmd_obj.ensure_finalized(); --> 985 cmd_obj.run(); 986 self.have_run[command] = 1. ~/opt/anaconda3/lib/python3.7/site-packages/Cython/Distutils/old_build_ext.py in run(self); 185 ; --> 186 _build_ext.build_ext.run(self); 187 . ~/opt/anaconda3/lib/python3.7/distutils/command/build_ext.py in run(self); 339 # Now actually compile and link everything.; --> 340 self.build_extensions(); 341 . ~/opt/anaconda3",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290:6228,assert,assert,6228,https://qutip.org,https://github.com/qutip/qutip/issues/1326#issuecomment-664714290,1,['assert'],['assert']
Testability,"""""""; .................................................................................................................................../Users/nathanshammah/github/qutip/qutip/control/optimizer.py:1070: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working; elif not isinstance(self.pulse_generator, collections.Iterable):; ..............................................................................................................................................................SSSSSS.......................................................................................................................Segmentation fault: 11. kills nosetests, which do not even start doing QuTiP's tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-496380658:780,test,tests,780,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-496380658,1,['test'],['tests']
Testability,"""Sparse eigs Hermitian"" test failing, in NOMKL build only - Segmentation fault",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/871:24,test,test,24,https://qutip.org,https://github.com/qutip/qutip/issues/871,1,['test'],['test']
Testability,"""denstity matrices"" on line 84 in the basis transformations test. Just my two cents for using the library :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/106:60,test,test,60,https://qutip.org,https://github.com/qutip/qutip/issues/106,1,['test'],['test']
Testability,"""malloc: Incorrect checksum"" error in qutip.testing qt.run()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:44,test,testing,44,https://qutip.org,https://github.com/qutip/qutip/issues/1120,1,['test'],['testing']
Testability,"# Change log; Right now, maintainers need to go through the PRs in `qutip/qutip` to update the changelog. This is quite time consuming. . There may be automated tools to generate the change log. . I propose at minimum to keep a changelog file also in `qutip/qutip`, asking contributors to update it before merging the PR. This makes it simpler than for them to open another PR to `qutip/qutip-doc`. # Classes and functions; As note in the [`release_distribution`](https://github.com/qutip/qutip-doc/blob/master/release_distribution.rst) guidelines, one should check that new functions and classes are included in the `classes.rst` and `functions.rst` files. Having a recipe to check this quickly or automatically, maybe with a script like this [one](https://stackoverflow.com/questions/1796180/how-can-i-get-a-list-of-all-classes-within-current-module-in-python).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1533:9,log,log,9,https://qutip.org,https://github.com/qutip/qutip/issues/1533,2,['log'],['log']
Testability,"# Projects. Another option is to use the Projects section on GitHub, which I am testing for a couple of ongoing projects. The downside of this option is that only organization members / owners can add or edit projects. https://github.com/qutip/qutip/projects",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1132#issuecomment-563696592:80,test,testing,80,https://qutip.org,https://github.com/qutip/qutip/issues/1132#issuecomment-563696592,1,['test'],['testing']
Testability,"### Bug Description. 4 tests produce errors (qutip installed with pip in a virtual environment on a Apple M2 pro chip). ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ================================================================= ERRORS =================================================================; ____________________________________________ ERROR collecting qutip/tests/core/test_gates.py _____________________________________________; qutip/tests/core/test_gates.py:109: in <module>; class TestCliffordGroup:; qutip/tests/core/test_gates.py:115: in TestCliffordGroup; clifford = gates.qubit_clifford_group(); qutip/core/gates.py:815: in qubit_clifford_group; X = sigmax(); qutip/core/operators.py:387: in sigmax; return _SIGMAX.to(dtype, True); qutip/core/qobj.py:395: in to; _data.to(data_type, self._data),; qutip/core/data/convert.pyx:395: in qutip.core.data.convert._to.__call__; return self._convert[to_type, from_type](data); qutip/core/data/convert.pyx:101: in qutip.core.data.convert._converter.__call__; arg = self.functions[i](arg); qutip/core/data/dia.pyx:341: in qutip.core.data.dia.from_csr; cpdef Dia from_csr(CSR matrix):; qutip/core/data/dia.pyx:353: in qutip.core.data.dia.from_csr; return Dia((data, diags), shape=matrix.shape, copy=False); qutip/core/data/dia.pyx:134: in qutip.core.data.dia.Dia.__init__; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/issues/2472,8,"['Test', 'test']","['TestCliffordGroup', 'testing', 'tests']"
Testability,"### Bug Description. Building qutip 4.7.3 for Debian unstable, all tests are passing with python 3.11. But a dozen tests using qobjevo fail with python 3.12:; ```; =========================== short test summary info ============================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolv",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:67,test,tests,67,https://qutip.org,https://github.com/qutip/qutip/issues/2293,21,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'TestMESolveSuperInit', 'TestMESolveTDDecay', 'TestMESolverConstDecay', 'TestTimeDependence', 'test', 'testMEDecayAsStrList', 'testMETDDecayAsStrList', 'tests']"
Testability,"### Bug Description. Hi, I think there is an bug in the distributions.py file. The functions `update_psi()` and `update_rho()` of the class `TwoModeQuadratureCorrelation` both have a `Qobj.data[i,j]` type statement as was the norm before qutip5. I encountered this issue when code from my PC would not run on my MacBook. I could fix it by just replacing the `psi.data[i,0]` with a `psi.data_as()[i,0]` (and analogous with `rho.data`) in the distributions.py file as noted in the change log. . ### Code to Reproduce the Bug. ```shell; import qutip as qt; a = qt.tensor(qt.destroy(5), qt.qeye(5)); b = qt.tensor(qt.qeye(5), qt.destroy(5)); z = 0.9; rho=qt.squeezing(a,b,z)*qt.tensor(qt.fock(5,0),qt.fock(5,0)); p=qt.TwoModeQuadratureCorrelation(rho,theta1=0,theta2=0); p.visualize(); ```. ### Code Output. ```shell; TypeError Traceback (most recent call last); Cell In[69], line 44; 39 print(""P quadrature correlation:"", p_corr); 41 # Ensure the correct dimensions are used by TwoModeQuadratureCorrelation; 42 # Calculating two-mode quadrature correlation (if this is the function you mean); 43 # This is a placeholder for any specific function you're calling:; ---> 44 corr = qt.TwoModeQuadratureCorrelation(two_mode_squeezed_state); 45 # print(""Two-mode quadrature correlation:"", corr); File ~/Library/CloudStorage/OneDrive-ETHZurich/PythonScripts/Qutip/TMS_Kerr_simulations/.venv/lib/python3.12/site-packages/qutip/distributions.py:283, in TwoModeQuadratureCorrelation.__init__(self, state, theta1, theta2, extent, steps); 280 self.theta1 = theta1; 281 self.theta2 = theta2; --> 283 self.update(state); File ~/Library/CloudStorage/OneDrive-ETHZurich/PythonScripts/Qutip/TMS_Kerr_simulations/.venv/lib/python3.12/site-packages/qutip/distributions.py:291, in TwoModeQuadratureCorrelation.update(self, state); 286 """"""; 287 calculate probability distribution for quadrature measurement; 288 outcomes given a two-mode wavefunction or density matrix; 289 """"""; 290 if isket(state):; --> 291 self.update_psi(",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2546:486,log,log,486,https://qutip.org,https://github.com/qutip/qutip/issues/2546,1,['log'],['log']
Testability,"### Bug Description. I took a qutip script created 3 years ago (named ""Ikonen First Shot New Unitary Trans States 2 level Full H Gated Test 2 - Copy.ipynb"") and ran it now (exact copied named ""Test.ipynb"") and got different results.; There is a caveat, whether relevant or not. When I ran the duplicated script (Test.ipynb) this time, I got errors keeping me from importing qutip. I submitted a ticket yesterday (#2500), which was kindly addressed, recommending that I uninstall cvxpy to remove conflict. I did that and was able to import qutip.; I then ran the duplicate script, but got a different result from 3 years ago. If you compare the output at block 23, you'll see it deviates significantly from the corresponding block in the old script. I have changed nothing in hte duplicated script, other than uninstalling cvxpy to make it run.; I then reinstalled cvxpy with upgrade and then qutip again. This time I can still import qutip, but with a warning. I ran the script with no problem, but still got the same deviated behavior from 3 years ago. [codes.zip](https://github.com/user-attachments/files/16367713/codes.zip). The 3-year-old script is included only to show the previous results. It is not meant to be run. I suspect if you run it with your likely different setup, you might get the same deviation as I did, or even yet another different deviation. I cannot recall the state of installation I had from 3 years ago. I believe I did it through conda. I just realized that I cannot include qutip scripts with this report. I included a zipped folder containing these two files. Please let me know if it didn'tgo through. Thank you! . ### Code to Reproduce the Bug. ```shell; Old code in ""Ikonen First Shot New Unitary Trans States 2 level Full H Gated Test 2 - Copy.ipynb""; New code in ""Test.ipynb""; Both attached.; These two codes are exactly identical. Only difference is in the qutip installation, one from 3 years ago and one just completed.; ```. ### Code Output. ```shell; Output i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2501:135,Test,Test,135,https://qutip.org,https://github.com/qutip/qutip/issues/2501,3,['Test'],['Test']
Testability,"### Bug Description. I've encountered this bug when creating a clean environment, and installing `qutip` (and IPython as console) through mamba.; Next, I've opened an IPython console and ran `import qutip`, which resulted in the exception printed below - stating that the `format` attribute of the `fast_csr_matrix` cannot be set. I believe the latest `scipy` [release](https://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigma",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:701,test,test-env-scipy-qutip,701,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"### Bug Description. In a fresh virtual environment, doing `pip install qutip` will cause the error. ```; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. I know this is quite an old OS and Python version, but that's what I have available. Numpy 1.24 should be supported in Python 3.8.10. ### Code to Reproduce the Bug. ```shell; $ python3 -m venv /tmp/test-venv. $ source /tmp/test-venv/bin/activate. $ pip install --upgrade pip; Collecting pip; Using cached pip-24.0-py3-none-any.whl (2.1 MB); Installing collected packages: pip; Attempting uninstall: pip; Found existing installation: pip 20.0.2; Uninstalling pip-20.0.2:; Successfully uninstalled pip-20.0.2; Successfully installed pip-24.0. $ pip list; Package Version; ------------- -------; pip 24.0; pkg_resources 0.0.0; setuptools 44.0.0. $ pip install qutip; Collecting qutip; Using cached qutip-5.0.1.tar.gz (6.4 MB); Installing build dependencies ... done; Getting requirements to build wheel ... done; ERROR: Some build dependencies for qutip from https://files.pythonhosted.org/packages/43/41/cae32aa94bfe0b22d2aec9392b2676210e5473ce097b10c689297b254a80/qutip-5.0.1.tar.gz conflict with the backend dependencies: numpy==1.17.3 is incompatible with numpy>=1.19.; ```. ### Code Output. _No response_. ### Expected Behaviour. Qutip should install normally. ### Your Environment. ```shell; QuTiP Version: 5.0.1; Numpy Version: (1.17.3) (apparently this is the version it's trying to install); Scipy Version: (1.10.1); Cython Version: (3.0.2); Matplotlib Version: -; Python Version: 3.8.10; Number of CPUs: 16; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64) (Ubuntu 20.04.6 LTS); ```. ### Additional Context. Here's the output of `pip install --verbose qutip`, not sure if i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2412:570,test,test-venv,570,https://qutip.org,https://github.com/qutip/qutip/issues/2412,2,['test'],['test-venv']
Testability,"### Bug Description. In some rare cases, like the example below, simdiag does not return orthonormal eigenvectors, despite this always being possible. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import simdiag, Qobj. a = np.array([[1, 0, 1, -1, 0],; [0, 4, 0, 0, 1],; [1, 0, 4, 1, 0],; [-1, 0, 1, 4, 0],; [0, 1, 0, 0, 4]]). b = np.eye(5). evals, evecs = simdiag([Qobj(a), Qobj(b)]); evecs = np.array([evec.full() for evec in evecs]).squeeze(). # Check that eigenvectors form an othonormal basis (<=> matrix of eigenvectors is unitary); deviation_from_unitarity = np.linalg.norm(evecs@evecs.conj().T - np.eye(len(evecs))); assert np.isclose(deviation_from_unitarity, 0); ```. ### Code Output. ```shell; AssertionError; ```. ### Expected Behaviour. Since by requirement of simdiag all input matrices must be hermitian and commute, the common eigenvectors should always be orthonormal. ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.23.5; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.11.6; Number of CPUs: 8; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. The fix is simple: ; Here; ```python; subspace = vecs.conj().T @ ops[i].full() @ vecs; eigvals, eigvecs = la.eig(subspace); ```; `la.eig` has to be replaced by `la.eigh`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2268:650,assert,assert,650,https://qutip.org,https://github.com/qutip/qutip/issues/2268,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,"### Bug Description. It seems that the measurement in `dev.major` does not truncate the probabilities correctly. It is probably caused by some changes in the last month and leads to [a test failing in `qutip-qip`](https://github.com/qutip/qutip-qip/actions/runs/3610116105/jobs/6083718885). The last test running was 24 days ago and was successful. I don't see any code in the measurement that manually tidies up the state. In `qutip-4.7` it is also directly compared to `0`.; https://github.com/qutip/qutip/blob/5a47ee3b8dd817d4c6c36cc84a952c41305cdcb5/qutip/measurement.py#L101-L108. So my guess is that, in `dev.major`, the final states fail to be automatically truncated. ### Code to Reproduce the Bug. ```python; from qutip.measurement import measurement_statistics; import qutip; measurement_ops = [qutip.basis(2,0), qutip.basis(2,1)]; state = qutip.Qobj([[1-1.e-12], [1.e-12]]); print(measurement_statistics(state, measurement_ops)); ```. ### Code Output; dev.major; --------; ```shell. ([Quantum object: dims=[[2], [1]], shape=(2, 1), type='ket'; Qobj data =; [[1.]; [0.]], Quantum object: dims=[[2], [1]], shape=(2, 1), type='ket'; Qobj data =; [[0.]; [1.]]], [0.999999999998, 1e-24]); ```. qutip4.7; -------; ```; ([Quantum object: dims = [[2], [1]], shape = (2, 1), type = ket; Qobj data =; [[1.]; [0.]], None], [0.999999999998, 0.0]); ```. ### Expected Behaviour. They are expected to behave the same. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+2ef8847; Numpy Version: 1.23.5; Scipy Version: 1.9.3; Cython Version: 0.29.32; Matplotlib Version: 3.6.2; Python Version: 3.10.0; Number of CPUs: 12; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Windows (AMD64). And. QuTiP Version: 4.7.0; Numpy Version: 1.22.4; Scipy Version: 1.7.3; Cython Version: 0.29.30; Matplotlib Version: 3.5.2; Python Version: 3.9.0; Number of CPUs: 12; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. _No resp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2029:185,test,test,185,https://qutip.org,https://github.com/qutip/qutip/issues/2029,2,['test'],['test']
Testability,"### Bug Description. Realized that I was getting inconsistent results in my Hamiltonian simulation code, and was testing using basic matrix operations. Some pieces that qutip was not doing easily, I used numpy objects and operations to complete. . Qutip documentation suggests using * operator for matrix/vector multiplication https://qutip.org/docs/4.7/guide/guide-states.html -- but this will yield undesired results when the types of all objects are not rigorously checked. . ### Code to Reproduce the Bug. ```shell; import qutip; import numpy as np. A = qutip.Qobj([[0, 1], [1, 0]]); B = qutip.Qobj([[1, 2], [3, 4]]). # qutip objects; print(A * B) # gives expected results; print(A @ B) # gives expected results. C = np.array([[0, 1], [1, 0]]); D = np.array([[1, 2], [3, 4]]). # numpy objects; print(C * D) # gives wrong results; print(C.dot(D)) # gives expected results; print(C @ D) # gives expecting results; ```. ### Code Output. ```shell; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; Quantum object: dims=[[2], [2]], shape=(2, 2), type='oper', dtype=Dense, isherm=False; Qobj data =; [[3. 4.]; [1. 2.]]; [[0 2]; [3 0]]; [[3 4]; [1 2]]; [[3 4]; [1 2]]; ```. ### Expected Behaviour. Would prefer that qutip A*B yields the same results as numpy, and A @ B becomes the default matrix operator, or another function is suggested. Consistency with numpy would be better. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross, Asier Galicia, Paul Menczel, and Patrick Hopf.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2547:113,test,testing,113,https://qutip.org,https://github.com/qutip/qutip/issues/2547,1,['test'],['testing']
Testability,"### Bug Description. Running `import qutip` eagerly imports `scipy.fft` via `qutip.correlation`, causing all native dependencies of `scipy.fft`'s fftpack-based implementation to load. In particular when using SciPy 1.8.1 on Linux, fftpack requires `GLIBCXX_3.4.30` but contains a private copy of `GLIBCXX_3.4.29` such that the import fails unless another Python package provides its own implementation of `GLIBCXX_3.4.30` (typically, PyZMQ via `jupyter-client`). This in turn can cause `import qutip` to fail even when not using features backed by fftpack (e.g.: as happened in the case of https://github.com/microsoft/iqsharp/pull/676). ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; # Example from build logs for https://dev.azure.com/ms-quantum-public/Microsoft%20Quantum%20(public)/_build/results?buildId=42116&view=logs&j=1c33f9fa-7159-5ed6-d128-ab2ed6cefd14&t=74d456a9-739b-5d92-ed57-026d8fef9427, ; $PREFIX/lib/python3.8/site-packages/zmq/backend/cython/../../../../.././libstdc++.so.6: version `GLIBCXX_3.4.30' not found (required by $PREFIX/lib/python3.8/site-packages/scipy/fft/_pocketfft/pypocketfft.cpython-38-x86_64-linux-gnu.so); ```. ### Expected Behaviour. `import qutip` should not cause native dependencies of `scipy.fft` to be imported eagerly. ### Your Environment. ```shell; (omitted --- `qutip.about()` failed to execute due to error running `import qutip`); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1915:746,log,logs,746,https://qutip.org,https://github.com/qutip/qutip/issues/1915,2,['log'],['logs']
Testability,"### Bug Description. SciPy 1.11 raises the following two deprecation warnings during qutip-4.7.X test runs:; ````; FAILED qutip/tests/test_sp_eigs.py::test_DenseHermValsVecs - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; FAILED qutip/tests/test_sp_eigs.py::test_DenseValsOnly - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; =========== 2 failed, 3250 passed, 12 skipped in 1792.40s (0:29:52) ============; ```. ### Code to Reproduce the Bug. ```shell; pytest -W error qutip/tests/test_sp_eigs.py; ```. ### Code Output. ```shell; FAILED qutip/tests/test_sp_eigs.py::test_DenseHermValsVecs - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; FAILED qutip/tests/test_sp_eigs.py::test_DenseValsOnly - DeprecationWarning: Keyword argument 'eigvals' is deprecated in favour of 'subset_by_index' keyword instead and will be removed in SciPy 1.12.0.; ```. ### Expected Behaviour. Tests do not fail. ### Your Environment. ```shell; QuTiP Version: 4.7.1; SciPy Version: 1.11; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2093:97,test,test,97,https://qutip.org,https://github.com/qutip/qutip/issues/2093,7,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"### Bug Description. Some tests of qutip.testing.run() fail on master on a MacBook Pro (2021) with M1. Qutip was installed on a miniforge python 3.9.9 distribution. ### Code to Reproduce the Bug. ```shell; import qutip.testing; qutip.testing.run(); ```. ### Code Output. ```shell; ============================================================================================= FAILURES ==============================================================================================; _________________________________________________________________________________________ test_dqd_current __________________________________________________________________________________________. def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:26,test,tests,26,https://qutip.org,https://github.com/qutip/qutip/issues/1755,4,['test'],"['testing', 'tests']"
Testability,"### Bug Description. The ReadTheDocs build fails with:; ```; gcc -pthread -B /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -I/home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include/python3.10 -c _configtest.c -o _configtest.o; _configtest.c:2:10: fatal error: mpi.h: No such file or directory; 2 | #include <mpi.h>; | ^~~~~~~; ```; See https://readthedocs.org/projects/qutip/builds/23361676/ for the full build log (not sure if this is publicly visible -- if not, I can add QuTiP admins as maintainers on readthedocs.org if they give me their username). The QuTiP ReadTheDocs configuration is at: https://github.com/qutip/qutip/blob/master/.readthedocs.yaml. Probably this can be fixed by adding an appropriate dependency to https://github.com/qutip/qutip/blob/master/doc/rtd-environment.yml. ### Code to Reproduce the Bug. ```shell; Attempt to build the documentation on ReadTheDocs.; ```. ### Code Output. ```shell; gcc -pthread -B /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/compiler_compat -Wno-unused-result -Wsign-compare -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -O2 -isystem /home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include -fPIC -I/home/docs/checkouts/readthedocs.org/user_builds/qutip/conda/master/include/python3.10 -c _configtest.c -o _configtest.o; _configtest.c:2:10: fatal error: mpi.h: No such file or directory; 2 | #include <mpi.h>; | ^~~~~~~; ```. ### Expected Behaviour. ReadTheDocs builds successfully. ### Your Environment. ```shell; QuTiP version: master branch; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2317:726,log,log,726,https://qutip.org,https://github.com/qutip/qutip/issues/2317,1,['log'],['log']
Testability,"### Bug Description. The act of the CNOT gate is not what it is expected. In particular it changes the target qubit when the control qubit is in the ground state instead of excited state given that in qutip basis(2,1) is the ground state. If this is on purpose it needs to be clearly stated in the tutorials or the documentation. ### Code to Reproduce the Bug. ```shell; from qutip import *; from qutip_qip.circuit import QubitCircuit; from qutip_qip.operations import (Gate, berkeley, cnot, cphase, csign, fredkin,; gate_sequence_product, globalphase, iswap,; molmer_sorensen, phasegate, qrot, rx, ry, rz,; snot, sqrtiswap, sqrtnot, sqrtswap, swap,; swapalpha, toffoli); test=cnot()*tensor(basis(2,1),basis(2,1)); print(test); ```. ### Code Output. ```shell; Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [1.]; [0.]]; ```. ### Expected Behaviour. Quantum object: dims=[[2, 2], [1, 1]], shape=(4, 1), type='ket', dtype=Dense; Qobj data =; [[0.]; [0.]; [0.]; [1.]]. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.11.4; Cython Version: None; Matplotlib Version: 3.8.0; Python Version: 3.11.0; Number of CPUs: 8; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/anaconda3/lib/python3.11/site-packages/qutip; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2494:672,test,test,672,https://qutip.org,https://github.com/qutip/qutip/issues/2494,2,['test'],['test']
Testability,"### Bug Description. The function `negativity() ` is currently broken because of a broken import of `partial_transpose()`. This is probably an easy fix and good first issue, but more importantly we need a test for this function, and anything else that currently is not tested in `entropy.py`. Also, might be useful to either properly support kets in negativity (i think it just assumes at the moment the input state is a density operator, and incorrectly acts on kets), or give a warning if a state is provided, and not a density operator. ### Code to Reproduce the Bug. ```shell; import numpy as np; from qutip import *. test = (tensor(basis(2,0),basis(2,1)) + tensor(basis(2,1),basis(2,0)))/np.sqrt(2); negativity(test * test.dag(),0); ```. ### Code Output. ```shell; 123 """"""; 124 Compute the negativity for a multipartite quantum system described; 125 by the density matrix rho. The subsys argument is an index that; (...); 130 Experimental.; 131 """"""; 132 mask = [idx == subsys for idx, n in enumerate(rho.dims[0])]; --> 133 rho_pt = partial_transpose(rho, mask); 135 if method == 'tracenorm':; 136 N = ((rho_pt.dag() * rho_pt).sqrtm().tr().real - 1)/2.0. TypeError: 'module' object is not callable; ```. ### Expected Behaviour. should be = 0.5. ### Your Environment. ```shell; QuTiP Version: 5.0.0.dev0+c745ace; Numpy Version: 1.26.3; Scipy Version: 1.11.4; Cython Version: 3.0.8; Matplotlib Version: 3.8.0; Python Version: 3.12.1; Number of CPUs: 28; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2345:205,test,test,205,https://qutip.org,https://github.com/qutip/qutip/issues/2345,5,['test'],"['test', 'tested']"
Testability,"### Bug Description. The output is not consistent with what we get on an Intel chip. It either fails, does complete but has invalid output data (times and states data not the same sizes), or gives different simulation results entirely. ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np. def psd(w):; return w * np.exp(-w). out = brmesolve(sigmax(), psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), psd]]). assert len(out.states) == len(out.times), f'{len(out.states)} vs {len(out.times)}'; ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; AssertionError Traceback (most recent call last); Input In [11], in <cell line: 6>(); 2 return w * np.exp(-w); 4 out = brmesolve(sigmax(), psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), psd]]); ----> 6 assert len(out.states) == len(out.times), f'{len(out.states)} vs {len(out.times)}'. AssertionError: 10 vs 100; ```. ### Expected Behaviour. As we see, the above code does run and produces an output, but the states list is not the same as the times lists (these should be the same length as they have a 1-1 correspondence). It actually appears it has only given data for the first 10 time-steps in this case.; The same code works fine on Intel chip. ; We can increase the `nsteps` parameter to give the correct number of output states, but they do not agree with Intels output (also see below for related issue), and actually are not always even quantum states, so something in the solver went wrong. Another example, using the cython string formatting:. ```brmesolve([[sigmax(), 'cos(t)']], psi0=basis(2,0), tlist=np.arange(0, 1, 0.01), a_ops=[[sigmax(), '1']])``` works fine on Intel, but gives error ```Exception: ODE integration error: Try to increase the allowed number of substeps by increasing the nsteps parameter in the Options class.``` on M1. . Moreover, if I do increase the `nsteps` sufficiently, this does appear to run corr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965:452,assert,assert,452,https://qutip.org,https://github.com/qutip/qutip/issues/1965,4,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,"### Bug Description. The test `Test_isherm.test_compare_implicit_zero_random` can sometime fail randomly.; I ran in locally 1000000 times and it failed 36 times.; It usually fails at high density (>90%), but can fail with a density of 75%.; https://github.com/qutip/qutip/runs/6012031509. ### Code to Reproduce the Bug. _No response_. ### Code Output. _No response_. ### Expected Behaviour. It should always pass. ### Your Environment. ```shell; Seen in ""ubuntu-latest, python3.10, Python 3.10"" test job on `dev.major`.; Reproduced locally on python 3.9.; ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1865:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/issues/1865,2,['test'],['test']
Testability,"### Bug Description. This issue originates from a [problem in the Help Group](https://groups.google.com/g/qutip/c/F7tOoZzMjto). Calculating the entropy of a density matrix in the Dicke basis leads to -Inf, while the standard calculation with ""entropy_vn"" returns a finite (more logical) result. ; I already tracked down the problem to the calculation of eigenvalues in `dicke_trace_function`. Due to numerical behaviour some eigenvalues have very small negative values, which lead to -Inf entropy. If these values are rounded to zero, the problem disappears. However, I am not sure, which way is the best way to perform this rounding. ; @nathanshammah @quantshah . ### Code to Reproduce the Bug. ```shell; from qutip import *; from qutip.piqs import *; import numpy as np; import numpy.random; from scipy.linalg import eig; from scipy.sparse import block_diag. N = 10; system = Dicke(N); [jx, jy, jz] = jspin(N,basis=""dicke""); jx=jx*2; jy=jy*2; jz=jz*2. V=3; g=1; system.emission = 1; system.hamiltonian = V/(2*(N-1)) * jz*jz + g/2 * jx; D_tls = system.liouvillian(); rho_ss = steadystate(D_tls,method='eigen',); vn_dicke=entropy_vn_dicke(rho_ss); vn_dicke_over=entropy_vn(Qobj(block_diag(dicke_blocks_full(rho_ss)))). print(vn_dicke,vn_dicke_over); ```. ### Code Output. ```shell; -inf 0.006061297461844266; ```. ### Expected Behaviour. The value for the entropy should not depend on the way it is calculated. I.e., we should have `vn_dicke == vn_dicke_over` up to numerical uncertainty. ### Your Environment. ```shell; uTiP Version: 5.0.0.dev0+ee51e50; Numpy Version: 1.21.0; Scipy Version: 1.6.2; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.10; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Linux (x86_64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1919:278,log,logical,278,https://qutip.org,https://github.com/qutip/qutip/issues/1919,1,['log'],['logical']
Testability,"### Bug Description. When one uses the `floquet_modes` function, the Floquet modes can sometimes come out non-orthogonal. **More info** . I think the problem occurs when some quasienergies are almost degenerate. This could be related to the fact that `floquet_modes` uses `eig` from numpy to diagonalise the propagator U, which in turn does not guarantee orthogonality of the eigenvectors according to the [numpy docs. ](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eig.html). I tried to come up with a simple example of the problem. I also tested what happens if one changes the precision of the numerical integrator used in the `propagator` function within `floquet modes`, and it does affect the result a lot. The `floquet_modes_mod` function that appears in the code below is exactly `floquet_modes`, only I modified it to also accept Options that are then passed to `propagator` (by the way, is there a smarter way to do this without defining this new function?). . ### Code to Reproduce the Bug. ```shell; from qutip import *; import numpy as np; import numpy.linalg as la; from numpy import angle, pi. # create a modified floquet_modes that also accepts Options; def floquet_modes_mod(H, T, args=None, sort=False, U=None, options=None):; """"""; Calculate the initial Floquet modes Phi_alpha(0) for a driven system with; period T. Returns a list of :class:`qutip.qobj` instances representing the Floquet; modes and a list of corresponding quasienergies, sorted by increasing; quasienergy in the interval [-pi/T, pi/T]. The optional parameter `sort`; decides if the output is to be sorted in increasing quasienergies or not. Parameters; ----------. H : :class:`qutip.qobj`; system Hamiltonian, time-dependent with period `T`. args : dictionary; dictionary with variables required to evaluate H. T : float; The period of the time-dependence of the hamiltonian. The default value; 'None' indicates that the 'tlist' spans a single period of the driving. U : :class:`qutip.qobj`; The p",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864:558,test,tested,558,https://qutip.org,https://github.com/qutip/qutip/issues/1864,1,['test'],['tested']
Testability,"### Bug Description. When using qutip integrators with `mcsolve`, parallelizing fails with both `parallel` and `loky` map methods when one doesn't use improved sampling. Also, a side note - memory consumption seems to have gotten worse in setting up the mcsolve problem in v5.0 as compared to v4.7. I can provide some benchmarks later, but I am unable to go to similar truncation sizes as I could before. ### Code to Reproduce the Bug. ```py; import qutip as qp; import numpy as np; N = 2; a1 = qp.tensor(qp.destroy(N), qp.qeye(N)); a2 = qp.tensor(qp.qeye(N), qp.destroy(N)); H = -1j * 0.4 * ((a1.dag()*a1.dag() - a1 * a1) + (a2.dag()*a2.dag() - a2*a2)); psi01 = qp.tensor(qp.states.basis(N, 0), qp.states.basis(N, 0)); tlist = np.linspace(0.0, 30.0, 501); c_ops = [np.sqrt(5)*a1*a1, np.sqrt(5)*a2*a2]; result = qp.mcsolve(H, psi01, tlist, c_ops, ntraj=500, options=dict(map=""parallel"", method=""vern9"", improved_sampling=False)); ```. ### Code Output. ```shell; ---------------------------------------------------------------------------; _RemoteTraceback Traceback (most recent call last); _RemoteTraceback: ; """"""; Traceback (most recent call last):; File ""/lib/python3.10/multiprocessing/queues.py"", line 245, in _feed; obj = _ForkingPickler.dumps(obj); File ""/lib/python3.10/multiprocessing/reduction.py"", line 51, in dumps; cls(buf, protocol).dump(obj); File ""<stringsource>"", line 2, in View.MemoryView._memoryviewslice.__reduce_cython__; TypeError: no default __reduce__ due to non-trivial __cinit__; ```. ### Expected Behaviour. Parallelizing should work independently of the sampling method. . ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.12.0; Cython Version: None; Matplotlib Version: 3.9.0; Python Version: 3.10.4; Number of CPUs: 8; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2450:318,benchmark,benchmarks,318,https://qutip.org,https://github.com/qutip/qutip/issues/2450,1,['benchmark'],['benchmarks']
Testability,"### Bug Description. While benchmarking [dynamiqs](https://github.com/dynamiqs/dynamiqs) vs QuTiP, I've noticed a large performance drop of `qutip.mesolve` when going from v4.7.6 to v5.0.1. On the example below, the benchmarks show:; ```; # QuTiP 4.7.6; # 1.42 s ± 3.17 ms per loop (mean ± std. dev. of 7 runs, 1 loop each); # QuTiP 5.0.1; # 14.5 s ± 2.32 s per loop (mean ± std. dev. of 7 runs, 1 loop each); ```; Found similar behavior on two different CPUs (mac M2, and AMD Ryzen 7). ### Code to Reproduce the Bug. ```python; import timeit. import numpy as np; import qutip as qt. def init(; kappa_2: float = 1.0,; g_cnot: float = 0.3,; nbar: float = 4.0,; num_tsave: int = 100,; N: int = 16,; ):; # time evolution; alpha = np.sqrt(nbar); gate_time = np.pi / (4 * alpha * g_cnot); tlist = np.linspace(0.0, gate_time, num_tsave). # operators; ac = qt.tensor(qt.destroy(N), qt.qeye(N)); nt = qt.tensor(qt.qeye(N), qt.num(N)). # Hamiltonian; H = g_cnot * (ac + ac.dag()) * (nt - nbar). # collapse operators; c_ops = [np.sqrt(kappa_2) * (ac**2 - nbar)]. # initial state; plus = (qt.coherent(N, alpha) + qt.coherent(N, -alpha)).unit(); psi0 = qt.tensor(plus, plus). kwargs = {'H': H, 'rho0': psi0, 'tlist': tlist, 'c_ops': c_ops}; return kwargs. kwargs = init(); %timeit qt.mesolve(**kwargs); ```. ### Your Environment. ```shell; Numpy Version: 1.25.2; Scipy Version: 1.11.2; Cython Version: 0.29.37; Matplotlib Version: 3.7.2; Python Version: 3.11.4; Number of CPUs: 8; BLAS Info: OPENBLAS; INTEL MKL Ext: False; Platform Info: Darwin (arm64); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2406:27,benchmark,benchmarking,27,https://qutip.org,https://github.com/qutip/qutip/issues/2406,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"### Bug Description. ```; ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f40>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_10_happy_breakdown_e_ops_none(self, happy_breakdown_parameters):; ""krylovsolve: check e_ops=None at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.check_e_ops_none(; H, psi0, tlist, dim, krylov_dim=krylov_dim; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:469: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:274: in check_e_ops_none; krylov_outputs = krylovsolve(H, psi0, tlist, krylov_dim, e_ops=None); stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:90,Test,TestKrylovSolve,90,https://qutip.org,https://github.com/qutip/qutip/issues/2190,4,"['Test', 'test']","['TestKrylovSolve', 'tests']"
Testability,"### Bug Description. qutip has functions to detect the available of BLAS libraries. For instance on my system (debian unstable), `python3 -c ""import qutip; qutip.about()""` reports; ```; BLAS Info: OPENBLAS; ```. However, I think the logic behind BLAS Info is not robust. For context, debian builds packages against generic libblas.so (libblas-dev package). The various optimised BLAS implementations are supposed to be binary compatible, such that the system administrator can install the preferred implementation for use at runtime (the identity of libblas.so is controlled using debian's alternatives mechanism). On my system, OpenBLAS is indeed installed. But taking a closer look, I'm not sure it was detected for the right reason.; The blas configuration is identified by the `_blas_info()` function in qutip/utilities.py. It uses the local numpy configuration (`np.__config`), testing the availability of various attributes in the numpy config, in the form of ; ```; if hasattr(config,'mkl_info') ...; elif hasattr(config,'openblas_info'); ```. MKL was not used to build debian's numpy package, and I don't have it installed. So mkl_info is not detected. OpenBLAS was not used to to build numpy either, but it is installed, so I want look closer at the logic. config (i.e. `np.__config__`) does indeed have an openblas_info. But it is empty (`{}`). Nevertheless `hasattr(config,'openblas_info')`returns True, since the empty dict is there. As far as MKL goes, mkl_info is indeed not there, so qutip does not detect MKL BLAS. But there is a `blas_mkl_info` attribute, and `hasattr(config,'blas_mkl_info')` returns True, same as with openblas_info. numpy provides a summary of its configuration in `np.show_config()`:; ```; numpy.show_config(); blas_armpl_info:; NOT AVAILABLE; blas_mkl_info:; NOT AVAILABLE; blis_info:; NOT AVAILABLE; openblas_info:; NOT AVAILABLE; accelerate_info:; NOT AVAILABLE; atlas_3_10_blas_threads_info:; NOT AVAILABLE; atlas_3_10_blas_info:; NOT AVAILABLE; atlas_blas_th",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:233,log,logic,233,https://qutip.org,https://github.com/qutip/qutip/issues/2053,2,"['log', 'test']","['logic', 'testing']"
Testability,"### Bug Description. setup.py manages a `--with-openmp` build option to provide openmp support. pyproject.toml was introduced in QuTiP 4.6.0 to allow PEP517 build without (directly) using setup.py. But the `--with-openmp` option that previously worked with a setup.py build does not seem to be compatible with a PEP517 build. The problem shows up in the Debian build of the qutip package. Debian provides its own tool (pybuild from the dh-python package) to manage the build of python packages. PEP517 is relatively new, so by default pybuild uses setup.py if it is available. pybuild will use PEP517 instead, if the pybuild-plugin-pyproject package is installed and pyproject.toml is available. Without pybuild-plugin-pyproject installed, the Debian build was invoking; ```; /usr/bin/python3.10 setup.py build --with-openmp; ```; using setup.py and specifying `--with-openmp`. A successful build log for this method can be found at https://buildd.debian.org/status/fetch.php?pkg=qutip&arch=amd64&ver=4.6.2-3&stamp=1641397514&raw=0. With pybuild-plugin-pyproject installed, the Debian build invokes a wheel build (command line given below). But `--with-openmp` causes the build to fail. ### Code to Reproduce the Bug. ```shell; python3.10 -m build --skip-dependency-check --no-isolation --wheel --outdir /build/qutip/.pybuild/cpython3_3.10_qutip --with-openmp; ```. ### Code Output. ```shell; usage: python -m build [-h] [--version] [--sdist] [--wheel] [--outdir OUTDIR] [--skip-dependency-check] [--no-isolation] [--config-setting CONFIG_SETTING] [srcdir]; python -m build: error: unrecognized arguments: --with-openmp; ```. ### Expected Behaviour. The PEP517 build should be able to be configured to support openmp. ### Your Environment. ```shell; QuTiP Version: 4.6.2 (trying to build 4.7.0); Numpy Version: 1.21.5; Scipy Version: 1.8.0; Cython Version: 0.29.28; Matplotlib Version: 3.5.1; Python Version: 3.10.4; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True (from setup.py build,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1875:897,log,log,897,https://qutip.org,https://github.com/qutip/qutip/issues/1875,1,['log'],['log']
Testability,"### Bug Description. unit test test_dqd_current fails on aarch64 linux. ### Code to Reproduce the Bug. ```shell; the unit test; ```. ### Code Output. ```shell; =================================== FAILURES ===================================; _______________________________ test_dqd_current _______________________________; def test_dqd_current():; ""Counting statistics: current and current noise in a DQD model""; ; G = 0; L = 1; R = 2; ; sz = qutip.projection(3, L, L) - qutip.projection(3, R, R); sx = qutip.projection(3, L, R) + qutip.projection(3, R, L); sR = qutip.projection(3, G, R); sL = qutip.projection(3, G, L); ; w0 = 1; tc = 0.6 * w0; GammaR = 0.0075 * w0; GammaL = 0.0075 * w0; nth = 0.00; eps_vec = np.linspace(-1.5*w0, 1.5*w0, 20); ; J_ops = [GammaR * qutip.sprepost(sR, sR.dag())]; ; c_ops = [np.sqrt(GammaR * (1 + nth)) * sR,; np.sqrt(GammaR * (nth)) * sR.dag(),; np.sqrt(GammaL * (nth)) * sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); c_, n_ = qutip.countstat_current_noise(L, [], rhoss=rhoss, J_ops=J_ops); current[n] = c_[0]; noise[n] = n_[0, 0, 0]; ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); /nix/store/7v2yn16c9sr8ysdpan9yd2a60a1sizv7-python3.11-qutip-4.7.5/lib/pyt",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2316:26,test,test,26,https://qutip.org,https://github.com/qutip/qutip/issues/2316,2,['test'],['test']
Testability,"### Describe the Issue!. As briefly described in #1910 there are some functions in `Bloch` class that are not fully tested. Besides, there are a few other changes that may benefit `Bloch`. I would like to list them here and provide more information on the change for discussion. . The main changes I propose to do in the Bloch class are: ; - [x] clean-up of the code in `add_points` and `plot_points` methods (addressed in #1909).; - [x] Clean import statements.; - [x] clean-up of the code in `add_vectors` and `plot_vectors` methods (#1917).; - [ ] clean-up of the code in `add_state` method. ; - [ ] make the plot functions (`plot_points, plot_vectors, ...`) private as they are meant to be used only in the render method (the do not even have a docstring). This _breaks backwards compatibility_ but I imagine it will be ok as I do not expect anyone using these methods.; - [x] Test `_repr_svg_` and `_repr_png_` (there seems to be a bug in `_repr_svg_` #1912).; - [ ] We have `render` and `make_sphere` methods that do _exactly_ the same (`make_sphere` calls `render`) I would vote to deprecate `make_sphere` for QuTiP 5.0.; - [ ] Make the interface consistent among the methods `add_state`, `add_vector`, `add_points`, `add_arc` and `add_line`. (This would address #1105 ); - [ ] Address #1106.; - [ ] Update documentation AND notebooks with changes. These task are planned to be addressed each in a separate PR. I plan to finish these tasks myself but feel free to tackle any of these (or add a new one) if no PR is open and you mention it in this issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1913:116,test,tested,116,https://qutip.org,https://github.com/qutip/qutip/issues/1913,2,"['Test', 'test']","['Test', 'tested']"
Testability,"### Describe the Issue!. Cython is getting close to release a new major release. It bring 2 changes that we must asses to be compatible with it.; - The order of the `nogil` and `except` keyword. In cython 0.29, both `nogil except ...` and `except ... nogil` are supported. From 3.0, a warning is raised when the first is used. We used the first order almost everywhere. We need to reorder them all... ; - Cython 0.29 do not use reverse operations such as `__rmatmul__` and `__rmul__`, but call `__mul__` with reverse order (`__mul__(other, self)`). With cython 3, `__rmul__` is used and `self` is always the first input. This breaks some of our tests. The failing tests are related to `Coefficient.__mul__` in qutip/core/cy/coefficient.pyx, `Data.__mul__` in qutip/core/data/base.pyx and `_ConstantElement.__matmul__` and `_EvoElement.__matmul__` both in qutip/core/cy/_element.pyx. While never used, the `__mul__` methods in the last file would break if called in the wrong order.; - One of the automated tests in github action should run using cython 3. ps. This could be solved in 2 PR, an easy one for the first bullet point and another one more involved for the 2 others.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2117:645,test,tests,645,https://qutip.org,https://github.com/qutip/qutip/issues/2117,3,['test'],['tests']
Testability,"### Describe the Issue!. Hi all, I am a brand new qutip user, and am having some issues after running the qutip install. I installed with. `pip3 install qutip`. After running. `import qutip.testing; qutip.testing.run()`. I get the following lengthy output. Does anyone have an idea of what is going on?. >>> import qutip.testing; >>> qutip.testing.run(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.10.1; Cython Version: None; Matplotlib Version: 3.7.1; Python Version: 3.9.6; Number of CPUs: 10; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:190,test,testing,190,https://qutip.org,https://github.com/qutip/qutip/issues/2180,4,['test'],['testing']
Testability,"### Describe the Issue!. I am currently using Qutip 5.0 prerelease. When performing calculations involving 4-mode operators like $e^{A\otimes B\otimes C\otimes D}$, and setting the Hilbert space dimension to be N=7, it takes forever to finish! However, when I use Qutip 4.7, it takes only 1 second to finish same calculations with N=20... This is giving me a serious problem because I need the .logm() function from Qutip 5.0... Anyone facing the same problem? Would be nice if someone can help me :)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2115:395,log,logm,395,https://qutip.org,https://github.com/qutip/qutip/issues/2115,1,['log'],['logm']
Testability,"### Describe the Issue!. I have installed Qutip version 5.0.2, and I've been trying to use the parfor method (see https://qutip.org/docs/4.0.2/guide/guide-parfor.html). When calling it, I get the error: ""NameError: name 'parfor' is not defined"".; I'm not trying to do anything exotic yet, I was just testing the rudimentary example from the webpage:. from qutip import *; def func1(x): ; return x, x**2, x**3; a, b, c = parfor(func1, range(10)); print(a)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2551:300,test,testing,300,https://qutip.org,https://github.com/qutip/qutip/issues/2551,1,['test'],['testing']
Testability,"### Describe the Issue!. I install Qutip from source by following the instruction.; After installing the build requirements, I ran the following command,. qutip.testing.run() ; At around 14%, the test halt, giving no report. i tried few times but same results.; (anaconda3/lib/site-packages/qutip/tests/test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls PASSED [ 14%]; anaconda3/lib/site-packages/qutip/tests/test_correlation.py::TestTimeDependence::test_correlation_c_ops_td[me] PASSED [ 14%]; anaconda3/lib/site-packages/qutip/tests/test_correlation.py::TestTimeDependence::test_correlation_c_ops_td[mc] ). ![pyTest](https://github.com/qutip/qutip/assets/125566140/725c9acc-d29d-4bbd-a337-e4979a844151); ![pyth](https://github.com/qutip/qutip/assets/125566140/cb641e22-f5c9-4afa-bf98-e990d144bd48)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2245:161,test,testing,161,https://qutip.org,https://github.com/qutip/qutip/issues/2245,8,"['Test', 'test']","['TestTimeDependence', 'test', 'testing', 'tests']"
Testability,"### Describe the Issue!. The function `orbital` is not tested and there seems to have an error in the spherical harmonics computation.; Adding a test and fixing any error, possibly using `scipy.special.sph_harm`, would be helpful.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839:55,test,tested,55,https://qutip.org,https://github.com/qutip/qutip/issues/1839,2,['test'],"['test', 'tested']"
Testability,"### New changelog. #### <code>test_krylovsolve.py</code>. * [x] We have <code>qutip.rand_herm</code> for a random hamiltonian. --> **Changed**; * [x] Isn't <code>h_sho</code> equivalent to <code>U=qutip.rand_unitary_haar(dim) \ return U* (qutip.num(dim)+0.5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:289,test,test,289,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,1,['test'],['test']
Testability,"### Objective; The primary objective was to improve the computational efficiency of the `correlation_2op_1t` function in QuTiP. This function computes two-time correlations for quantum systems, which is computationally intensive, especially for large systems or long time arrays. The goal was to enhance performance by parallelizing these computations. ### Enhancements Overview. 1. **Parallel Computing**:; - **Implementation**: Utilized Python’s `concurrent.futures` module, specifically `ProcessPoolExecutor`, to parallelize the computation of correlation values over different tau values (`taulist`). Each tau value computation is independent of others, making this a suitable case for parallel execution.; - **Function Splitting**: Created a helper function `compute_single_tau_correlation` to handle the computation for a single tau. This function manages the setup of the quantum system, computes the correlation for its specific tau, and handles any exceptions that may occur, logging them accordingly.; - **Resource Management**: Used the `cpu_count` from the `os` module to dynamically determine the number of available processors and limited the number of worker processes to avoid overwhelming the host system. This approach helps in balancing load and performance. 2. **Error Handling and Robustness**:; - Enhanced the resilience of the parallel computation by encapsulating the worker function’s body in a try-except block, ensuring that failures in one computation do not impact the overall execution.; - Ensured the stability of the test environment by restoring the original function state after the test execution, preventing side effects on subsequent tests. 3. **Testing**:; - **Extended Test Coverage**: Developed new test cases to validate both the parallel and sequential execution paths of the function. Tests ensure that both modes produce equivalent results, thereby confirming that the parallelization did not introduce computational errors.; - **Integration with Existing T",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2395:985,log,logging,985,https://qutip.org,https://github.com/qutip/qutip/pull/2395,1,['log'],['logging']
Testability,"### Problem Description. CoreOptions has an [`rtol`](https://github.com/qutip/qutip/blob/e92f82b84acfe832f7022e7185e93e1948e4aa7a/qutip/core/options.py#L79) property, but only `atol` gets used in `Qobj.__eq__`. ### Proposed Solution. Incorporate `rtol` into equality testing. Ideally, we could have:. ```python; with CoreOptions(atol=1e-08, rtol=1e-05):; a == b; ```. which would allow comparisons similar to [np.allclose](https://numpy.org/doc/stable/reference/generated/numpy.allclose.html). ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2420:267,test,testing,267,https://qutip.org,https://github.com/qutip/qutip/issues/2420,1,['test'],['testing']
Testability,"### Problem Description. Currently the most time consuming part of making releases is managing the change log (#1055 , #1108, #1533). In addition to the time taken, the release manager is often poorly placed to write change log entries for the PRs involved (the PRs might have been merged some time ago, and the release manager might not have been the author). ### Proposed Solution. [Towncrier](https://pypi.org/project/towncrier/) is a Python package used by Python itself and many other libraries to manage the change log. I propose that we configure towncrier and ensure that each PR adds a towncrier entry. This includes:; - [x] Add suitable towncrier configuration to the respository.; - [x] Update the release documentation with instructions for using towncrier to update the change log.; - [x] Update the development documentation to include the requirement to add towncrier entries for each PR.; - [x] Update the GitHub PR template to mention the requirement to add a towncrier entry.; - [x] Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. ### Alternate Solutions. There are a few other tools that do similar things to towncrier, and we could use one of those instead if they are better. I would recommend that we not roll our own solution. The problem is fairly simple, but writing and documenting our own solution and fixing the inevitable bugs is a lot of work. Plus, I would prefer to have a solution that has already made choices that work, rather than us having to make all of those choices ourselves. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1894:106,log,log,106,https://qutip.org,https://github.com/qutip/qutip/issues/1894,5,"['log', 'test']","['log', 'tests']"
Testability,"### Problem Description. I don't find matrix logrithm logm() in Qobj methods, so to compute matrix logrithm I call logm() in scipy.linalg, which changes the type from qobj to ndarray. And to continue the subsequent computation, I need to reinstantiate the resulting ndarray to Qobj, which is cumbersome.; It would be better if the matrix logrithm logm() is added to the Qobj. ### Proposed Solution. Add the matrix logrithm method logm() to Qobj. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1990:45,log,logrithm,45,https://qutip.org,https://github.com/qutip/qutip/issues/1990,8,['log'],"['logm', 'logrithm']"
Testability,"### Problem Description. QuTiP has bosonic `destroy` and `create` operators that satisfy the commutation relation. The same can be defined for fermions, with the name `fermionic_destroy`, and `fermionic_create` (better suggestions on names are welcome) that satisfy the anti-commutation relations. ### Proposed Solution. - Implement the function `fermionic_destroy`, and `fermionic_create`.; - Add tests to verify the implementation.; - Add docstrings with the math formulas and conventions used. The mathematical formulas and other related issues:; - https://mareknarozniak.com/2020/10/14/jordan-wigner-transformation/ (note that $\sigma^{-}=\sigma_x+i\sigma_y$, which is predefined in qutip).; - https://github.com/qutip/qutip/issues/863. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2165:398,test,tests,398,https://qutip.org,https://github.com/qutip/qutip/issues/2165,1,['test'],['tests']
Testability,"### Problem Description. There are a few issues with graphic capacities in Qutip. 1. Most are not tested. Only Bloch.py has some tests associated. While testing graphs is not evident, matplotlib has testing functions to compare graphs etc. and just running it to ensure that no errors are raised would be a nice start. Here are some files and their coverage:; - tomography.py 50%; - visualization.py 8%; - distribution.py 23%; - bloch.py 55%; - bloch3d.py 8%. 2. The interface is not uniform. Most functions take 'fig' and 'ax', but `hilton` only takes 'ax' but no 'fig'. Maybe one third of the function in visualization accepts 'title' and half a 'figsize'. The order of these options is also inconsistent, 'fig', 'ax' can be the first parameters or the last... As seen in #1573, some want more control so `matrix_histogram` accepts `options`. I am all for more control, but being available for only one function feels wrong. On the bloch side, there is a mismatch between `add_vectors`, `add_points`, which takes `color` and `alpha` as input, and `add_arc`, `add_line` which takes `**kwargs`. 3. The colorblind mode should works everywhere, but presently only `hilton` support it. ### Proposed Solution. So for v5 release, the interface of all these should be clean and uniform, with proper tests. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1910:98,test,tested,98,https://qutip.org,https://github.com/qutip/qutip/issues/1910,5,['test'],"['tested', 'testing', 'tests']"
Testability,"### Problem Description. Update user guide content of documentation to QuTiP 5, which contains many changes that may not be captured by the latest versions of the documentation, e.g., the content in https://qutip.org/docs/latest/guide/guide.html. . ### Proposed Solution. - Read the documentation files on the QuTiP 5 branch, at https://github.com/qutip/qutip/tree/dev.major; - Build locally the documentation on the branch and make sure it builds; - Read the documentation files and check that they match with qutip-5 branch code, so that the documentation matches the actual existing code, similarly to what happens for QuTiP 4.7, https://qutip.org/docs/latest/guide/guide.html and locally test ; - Make changes where needed. . ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1898:692,test,test,692,https://qutip.org,https://github.com/qutip/qutip/issues/1898,1,['test'],['test']
Testability,"### Problem Description. `master` has qutip/qutip/cy/openmp/src/[zspmv_openmp.hpp](https://github.com/qutip/qutip/blob/master/qutip/cy/openmp/src/zspmv_openmp.hpp), for csr @ dense product with openmp, but we did not have the time to add when making the data layer for `dev.major`. In v4, to use openmp, the user needs to compile from source locally with `python setup.py install --with-openmp` and then an option has to be passed to the solver at run time to use it. For v5, it would be great if openMP was part of the Data layer and used without much thought by the user. (No need to pass `Options(use_openmp=True)` to `mesolve`). We would probably keep a flag and threshold as an option in core or settings so we can run tests with and without. We should add support for cython's `prange`. Presently, using it breaks mac's tests. If made available, there are quite a few functions for the data layer that could gain from it. While openmp is available in v4, it was not used much since it can only be used when compiling locally and the options isn't well known. Ideally, it would be packaged in the wheels (for all but Mac?) instead of needing a local installation. However it does not seems easy, [scipy decided against it](https://github.com/scipy/scipy/blob/38261c1141b8aa80bceeef419911fb4f31df5372/doc/source/dev/toolchain.rst#openmp-support), because it does not mix well with [other parallel environments](https://github.com/scipy/scipy/issues/10239#issuecomment-795030817). It may be possible with conda since it has a openmp package. . ### Proposed Solution. Tasks:; - Restore the compilation option for openmp and have `matmul_csr_dense_dense` use `zspmvpy_openmp`.; - Add options in core to control openmp. In `parallel_map`, turn it of when using multiprocessing.; - Add `prange` in a function (`mul_dense`) and ensure that tests passes and wheels build.; - Add `prange` elsewhere where useful. ### Alternate Solutions. _No response_. ### Additional Context. _No response_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1904:724,test,tests,724,https://qutip.org,https://github.com/qutip/qutip/issues/1904,3,['test'],['tests']
Testability,"#1212 . > > Thank you. Can you please add tests for this? I'm leaving to @BoxiLi a closer review.; > . By ""add tests"" we mean include tests in `qutip/tests'. See #1212 for example. @mlaguna10 please don't do this just now. We will give @MartinSandeCosta opportunity to do this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-605883973:42,test,tests,42,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-605883973,4,['test'],['tests']
Testability,"#1249 should be reviewed and merged before this (because if it needs changed, then this PR has to be rebased on top of it), but also I'm going to change the Clifford group tests a little, and rebase the typo fix commit into the general refactor before this one should be merged.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251#issuecomment-626315063:172,test,tests,172,https://qutip.org,https://github.com/qutip/qutip/pull/1251#issuecomment-626315063,1,['test'],['tests']
Testability,"#1347 changed the setup of the tests, but it went unnoticed (sorry!) that the Python version wasn't set correctly; we've been silently testing everything against python-latest since then. That wasn't an issue as long as Python 3.8 was the latest, but the release of Python 3.9 (and the fact we haven't rebuilt a binary distribution of QuTiP for 3.9) caused all Linux builds to break. Mac builds were unaffected because they set `$_PYTHON_VERSION` to a string literal. The Linux Python version was not set correctly because it attempted to set it to the definition of `$TRAVIS_PYTHON_VERSION` _as defined during the `env` stage of the Travis build_. Unfortunately, this environment variable isn't defined until after that stage, which caused us to pass an empty constraint on the Python version to conda, resulting in us getting the latest version. This moves this part of the environment setup into the pre-install phase so `TRAVIS_PYTHON_VERSION` is now set, and guards it with a conditional so the mac builds can still neatly override the standard setup. **Changelog**; Fix Python version setting in CI tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1381:31,test,tests,31,https://qutip.org,https://github.com/qutip/qutip/pull/1381,3,['test'],"['testing', 'tests']"
Testability,"#1651 has been merged into dev.major and I've merged that back into this branch. Tests should still fail, but this branch is at least up to date again.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-1017280259:81,Test,Tests,81,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-1017280259,1,['Test'],['Tests']
Testability,#This pull request will deal with a new module for solving quantum systems exploiting permutational symmetries. A somewhat complete code for this is available at https://github.com/nathanshammah/piqs which is built on several papers @nathanshammah can link to. The code is almost complete and tested but here we will upload it in parts to make the review process easy. @ajgpitch @nonhermitian @nwlambert,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753:293,test,tested,293,https://qutip.org,https://github.com/qutip/qutip/pull/753,1,['test'],['tested']
Testability,"$ nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... ok; BR Tools : dense operator to eigenbasis ... ok; BR Tools : vector to eigenbasis ... ok; BR Tools : eigvector to fockbasis ... ok; BR Tools : vector roundtrip transform ... ok; BR Tools : Diagonal liouvillian mult ... ok; BR Tools : cop_super_mult ... ok; BR Tools : br_term_mult ... ok; control.pulseoptim: Hadamard gate with linear initial pulses ... ok; control.pulseoptim: Hadamard gate with linear initial pulses (no stats) ... ok; co",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576:1176,test,tests,1176,https://qutip.org,https://github.com/qutip/qutip/issues/1093#issuecomment-539853576,1,['test'],['tests']
Testability,%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6541,test,tests,6541,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_co",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23989,test,tests,23989,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"'; ```; and a lot of functionality will break - anything that requires `Qobj.eigenstates()` for example. This is because `Qobj` defines `__array__`, one of numpy's ""array interface"" functions, intended for classes that can be safely converted _implicitly_ into an `ndarray`. This isn't really the case for `Qobj` - it loses all sorts of information when you do that, which is why we've maintained the separate `Qobj.full()` for explicitly getting the dense matrix representation of a `Qobj`. This is not to mention that numpy ufuncs probably should not be able to implicitly convert `Qobj` - I'd strongly argue that `np.sin(qutip.basis(2, 1))` should be `TypeError`, _not_ `array([[0. +0.j], [0.84147098+0.j]])` (like it is right now). We actually already removed this ""functionality"" in `dev.major`. The most pressing incompatibility is that a few points in QuTiP put a few `Qobj` into a `np.array(dtype=object)`. In numpy 1.20, this no longer produces a 1D array of `Qobj`, but a 3D array of complex. This breaks `Qobj.eigenstates`, and prevents test collection due to it being present in `states.py::qutrit_basis()`, which is called during parametrisation. There are a two possible ways to solve this, and we ought to release a fix with one of them in a patch ASAP:; 1. remove `Qobj.__array__`; 2. remove all use of `Qobj` in `np.array`. I'm personally in favour of ""explicit is better than implicit"" in this case, i.e. removing `Qobj.__array__` and relying on `Qobj.full()`. As another example along this vein, note `scipy.sparse` matrices don't implement this either, and they're arguably closer to being safely coerced to `ndarray` than we are. ### Related issues. #938: feature request for implementing `__array__`. This only asks for `np.array(qobj)` as a convenience, acknowledging the availability of `Qobj.full()`.; #1017: includes a comment on buggy behaviour caused by `__array__`. Note that the solution given there (`np.asarray(..., dtype=object)`) will no longer work with numpy 1.20.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1433:1217,test,test,1217,https://qutip.org,https://github.com/qutip/qutip/issues/1433,1,['test'],['test']
Testability,"'s an example output:; ```; jake@tauros$ pytest tests/test_superop_reps.py; =========================================================================================== test session starts ============================================================================================; platform darwin -- Python 3.8.8, pytest-6.2.3, py-1.10.0, pluggy-0.13.1; rootdir: /Users/jake/code/qutip/qutip/qutip/tests, configfile: pytest.ini; plugins: rerunfailures-9.1.1; collected 15 items. tests/test_superop_reps.py ..F............ [100%]. ================================================================================================= FAILURES =================================================================================================; ____________________________________________________________________________________ TestSuperopReps.test_ChoiKrausChoi ____________________________________________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x11f1140d0>. Fatal Python error: Segmentation fault. Current thread 0x000000010c77b5c0 (most recent call first):; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/sre_compile.py"", line 312 in _optimize_charset; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/sre_compile.py"", line 120 in _compile; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/sre_compile.py"", line 607 in _code; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/sre_compile.py"", line 768 in compile; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/re.py"", line 304 in _compile; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/re.py"", line 252 in compile; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/pygments/lexer.py"", line 424 in _process_regex; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages/pygments/lexer.py"", line 495 in _process_state; File ""/Users/jake/.anaconda3/envs/qutip-dev/lib/python3.8/site-packages",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1160#issuecomment-826099502:1244,Test,TestSuperopReps,1244,https://qutip.org,https://github.com/qutip/qutip/issues/1160#issuecomment-826099502,1,['Test'],['TestSuperopReps']
Testability,"(; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10983,test,testing,10983,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"([], dtype=idx_dtype); self.data = np.array([], dtype=data_dtype); self.has_canonical_format = True; else:; try:; obj, (row, col) = arg1; except (TypeError, ValueError) as e:; raise TypeError('invalid input format') from e; ; if shape is None:; if len(row) == 0 or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451:3503,Test,TestDicke,3503,https://qutip.org,https://github.com/qutip/qutip/issues/1451,1,['Test'],['TestDicke']
Testability,(add/add): Merge conflict in setup.cfg; CONFLICT (content): Merge conflict in qutip/visualization.py; CONFLICT (modify/delete): qutip/tests/test_superoper.py deleted in HEAD and modified in master. Version master of qutip/tests/test_superoper.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_subsys_apply.py; CONFLICT (content): Merge conflict in qutip/tests/test_random.py; CONFLICT (modify/delete): qutip/tests/test_rand.py deleted in master and modified in HEAD. Version HEAD of qutip/tests/test_rand.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_qubitcircuit.py; CONFLICT (content): Merge conflict in qutip/tests/test_noise.py; CONFLICT (content): Merge conflict in qutip/tests/test_mkl.py; CONFLICT (content): Merge conflict in qutip/tests/test_device.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_qubit_evolution.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_brtools.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_superop_reps.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_qobj.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_metrics.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_eigen.py; CONFLICT (modify/delete): qutip/superoperator.py deleted in HEAD and modified in master. Version master of qutip/superoperator.py left in tree.; CONFLICT (modify/delete): qutip/sparse.py deleted in HEAD and modified in master. Version master of qutip/sparse.py left in tree.; CONFLICT (content): Merge conflict in qutip/solve/stochastic.py; CONFLICT (content): Merge conflict in qutip/solve/steadystate.py; CONFLICT (content): Merge conflict in qutip/solve/sesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mcsolve.py; CONFLICT (content): Merge conflict in qutip/solve/floquet.py; CONFLICT (content): Merge conflict in qutip/solve/countstat.py; CONFLICT (content): Merge co,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165:1210,test,tests,1210,https://qutip.org,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165,1,['test'],['tests']
Testability,"(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break; return qutip.Qobj(flat.reshape(qobj.shape), dims=qobj.dims); ; @@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:24694,test,tests,24694,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,") * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; __________________________________________ ERROR collecting qutip/tests/solver/test_mesolve.py ___________________________________________; qutip/tests/solver/test_mesolve.py:28: in <module>; class TestMESolveDecay:; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required posi",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:4167,test,tests,4167,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,")), Space(Map(Space(2), Space(2))))`: a superoperator acting on square operators on qubit spaces.; - `[[1], [5]]` = `Map(Space(5), Field)` is a bra for a 5-element space. The current `Qobj.type` attribute will be stored within the dimension object; unlike the list format, each object is unambiguously one single type (1D spaces are a problem in list form). Similarly, the ""size"" of a given dimension object is stored within it. ### How this solves the problems. Type inference is removed as a problem; each `Qobj` type has only one unambiguous representation when expressed as dimension objects. The actual name of the type could be stored as a string attached to the objects to maintain compatibility with the 4.x branch. Dimension compatibility test speed are solved by having dimensions represented by singleton class instances like the Python builtin `None`. The reason to use a singleton class is to replace `==` tests with `is` tests; the former is structural equality and requires walking the tensor structure, whereas the latter is referential equality, and is true if and only if the two operands are the same object in memory. For example the dimensions test of the `add` operation is now `left.dims is right.dims`, which is the same speed as comparing two integers. Dimension/shape compatibility is solved by attaching size information into the singleton classes. As the dimension objects are singletons, the size of a dimension object is calculated only on creation of the object. All subsequent `Qobj` that are of the same dimensions as one that came earlier will consequently reuse the same dimensions object, which already calculated its size. This avoids (relatively) expensive calls to `np.prod` on Python lists. The current list syntax allows for invalid dimensions to be represented such as `[2, 1]` (should be `[[2], [1]]`, probably). These sorts of failures cannot be represented in the new system. Similarly, `[[2], [1], [1]]` cannot be represented as the `Map` constructor wil",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421:4193,test,tests,4193,https://qutip.org,https://github.com/qutip/qutip/issues/1421,2,['test'],['tests']
Testability,"):; else qeye(state.dims[0][j]); for j in range(len(state.dims[0]))]; full_oper = tensor(list(map(Qobj, op_iter_list))); - rho_out = rho_out + full_oper * state * full_oper.dag(); + rho_out += full_oper * state * full_oper.dag(); return Qobj(rho_out); diff --git a/qutip/superoperator.py b/qutip/superoperator.py; index dacc0e1e..8d099484 100644; --- a/qutip/superoperator.py; +++ b/qutip/superoperator.py; @@ -112,19 +112,19 @@ def liouvillian(H, c_ops=[], data_only=False, chi=None):; c_ = c_op; ; if c_.issuper:; - data = data + c_.data; + data += c_.data; else:; cd = c_.data.H; c = c_.data; if chi:; - data = data + np.exp(1j * chi[idx]) * \; + data += np.exp(1j * chi[idx]) * \; zcsr_kron(c.conj(), c); else:; - data = data + zcsr_kron(c.conj(), c); + data += zcsr_kron(c.conj(), c); cdc = cd * c; cdct = cdc.T; - data = data - 0.5 * zcsr_kron(spI, cdc); - data = data - 0.5 * zcsr_kron(cdct, spI); + data -= 0.5 * zcsr_kron(spI, cdc); + data -= 0.5 * zcsr_kron(cdct, spI); ; if not td:; if data_only:; diff --git a/qutip/tests/test_expect.py b/qutip/tests/test_expect.py; index 45568110..17491981 100644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filena",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:22729,test,tests,22729,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"); - rho_out = rho_out + full_oper * state * full_oper.dag(); + rho_out += full_oper * state * full_oper.dag(); return Qobj(rho_out); diff --git a/qutip/superoperator.py b/qutip/superoperator.py; index dacc0e1e..8d099484 100644; --- a/qutip/superoperator.py; +++ b/qutip/superoperator.py; @@ -112,19 +112,19 @@ def liouvillian(H, c_ops=[], data_only=False, chi=None):; c_ = c_op; ; if c_.issuper:; - data = data + c_.data; + data += c_.data; else:; cd = c_.data.H; c = c_.data; if chi:; - data = data + np.exp(1j * chi[idx]) * \; + data += np.exp(1j * chi[idx]) * \; zcsr_kron(c.conj(), c); else:; - data = data + zcsr_kron(c.conj(), c); + data += zcsr_kron(c.conj(), c); cdc = cd * c; cdct = cdc.T; - data = data - 0.5 * zcsr_kron(spI, cdc); - data = data - 0.5 * zcsr_kron(cdct, spI); + data -= 0.5 * zcsr_kron(spI, cdc); + data -= 0.5 * zcsr_kron(cdct, spI); ; if not td:; if data_only:; diff --git a/qutip/tests/test_expect.py b/qutip/tests/test_expect.py; index 45568110..17491981 100644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:22825,test,tests,22825,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"* import + sesolve. * psi in args part 1. * psi in args part 2. * state in args part3. * dyn args test1. * dyn args test2. * args debug. * ready for tests. * s/mesolve pass tests. * mcsolve rework. * mcsolve rework part 2. * mcsolve cython cleaning. * mcsolve working. * mcsolve cython as object. * mcsolve pass all test. * automated test almost passing. * pass all tests. * docs and cleaning. * diag ok. * clean propagator. * clean propagator 2. * clean floquet. * clean floquet 2. * mcsolve serial_map bugfix. * object args bug correction. * dense cQobjEvo bugfix. * spliting PR. * merge priority correction. * merge priority correction. * mcsolve based on qoevo. * better rouchon citation. * final state avg?. * faster postprocessing. * final_state average flag. * final state runs as property. * Some patches for qip.Gate (#995). * remove repetitive assignment. * move description to class def. Doc won't show it if it's under __init__. * check invalid input for targets and control. * all must be integer. * NotImplemented is not callable, use NotImplementedError. * add whitespace. * refactor. * format correction",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1043:149,test,tests,149,https://qutip.org,https://github.com/qutip/qutip/pull/1043,5,['test'],"['test', 'tests']"
Testability,"* sL,; np.sqrt(GammaL * (1 + nth)) * sL.dag()]; ; current = np.zeros(len(eps_vec)); noise = np.zeros(len(eps_vec)); ; for n, eps in enumerate(eps_vec):; H = (eps/2 * sz + tc * sx); L = qutip.liouvillian(H, c_ops); rhoss = qutip.steadystate(L); current[n], noise[n] = qutip.countstat_current_noise(L, [],; rhoss=rhoss,; J_ops=J_ops); ; current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); assert abs(current[n] - current2) < 1e-8; ; current_target = (tc**2 * GammaR; / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps_vec**2)); noise_target = current_target * (; 1 - (8*GammaL*tc**2*(4 * eps_vec**2 * (GammaR - GammaL); + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; + 4*eps_vec**2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:2256,Assert,AssertionError,2256,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Assert'],['AssertionError']
Testability,"**Background**. Since I am planning to add an mpi_parallel_map to the parallel module, I had a detailed look at the current implementations of parallel_map and loky_pmap. In the case of timeouts, errors or interrupts, I found surprising behavior. I will first summarize the current behavior in these situations, and then the behavior if my changes are included. It seems difficult to write better unit tests for such timing-sensitive behavior, but I have tested in detail on both Linux (WSL) and Windows. **Current behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | If `fail_fast`, behaves similarly to `parallel_map`. <br> Otherwise, completes all tasks but only returns <br> results of those that were started before the timeout.; CTRL+C | First CTRL+C interrupts all tasks, but program <br> enters deadlock requiring second CTRL+C | Interrupts currently running tasks, but then still <br> executes the rest before raising `KeyboardInterrupt`.; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes all tasks, then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end.; Job timeout | Ignored | Always completes all tasks anyway, see below. **New behavior**. &nbsp; | `parallel_map` | `loky_pmap`; ---|---|---; Timeout | Finishes currently running tasks, <br> then returns results of all finished tasks. | Aborts currently running tasks, <br> then returns results of all finished tasks.; CTRL+C | First CTRL+C raises `KeyboardInterrupt` | First CTRL+C raises `KeyboardInterrupt`; Task raises <br> exception | `fail_fast`: finishes running tasks, <br> then raises exception. <br> `!fail_fast`: raises `MapExceptions` at the end. | `fail_fast`: finishes tasks earlier in the list, then <br> aborts remaining ones and raises exception. <br> `!fail_fast`: rais",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2280:402,test,tests,402,https://qutip.org,https://github.com/qutip/qutip/pull/2280,2,['test'],"['tested', 'tests']"
Testability,"**Benchmarking**; The results of [development notebooks](https://github.com/qutip/qutip-notebooks/tree/master/development). * development-smesolve-milstein-speed-test.ipynb; * development-smesolver-new-methods.ipynb; * development-smesolve-tests.ipynb; * development-ssesolver-new-methods. all seem consistent with previous notebook results. **Time Benchmarking**; All the stochastic solvers in those notebooks now run much faster: between a factor 2 and 30 in speedup from last time I ran them, which was consistent with times obtained by @Ericgig and saved in the folder. . I am on Python 3.7.3, I recently updated OS from High Sierra to Mojave, plus some other updates in scipy and numpy, and reinstalled conda, so I am curious to see if these speedups are machine independent, which would be great. My specs; ```; Software	Version; QuTiP	4.4.0.dev0+e1639f73; Numpy	1.16.4; SciPy	1.2.1; matplotlib	3.1.0; Cython	0.29.8; Number of CPUs	2; BLAS Info	INTEL MKL; IPython	7.5.0; Python	3.7.3 (default, Mar 27 2019, 16:54:48) [Clang 4.0.1 (tags/RELEASE_401/final)]; OS	posix [darwin]; Mon Jun 10 21:16:02 2019 JST; ```; Some details:; In cell 6 of development-ssesolver-new-methods, the running time went from over 160 seconds to 6 seconds (x25 speedup). Total run time in cell 21 is now down to 14.22s from 79.46s, cell 24/25 of is now 1.4 seconds down from 14.22s in `smesolve`. `ssesolve` in cell 4 is down from 164.50s to 11.06s. Cell 6 is down to 11.48s from 250s. The next cell checking all solver methods in `ssesolve` is down from 80s to 24s. In the notebook with new smesolve methods, cell 11 with multiple time dependence in sc_ops now runs in 69s instead of 171s. . Also, the benchmarking of the different methods now reads; ```; {'solver': 'euler-maruyama'}; Total run time: 0.21s; Total run time: 0.25s; Total run time: 0.30s; Total run time: 0.38s; Total run time: 0.45s; Total run time: 0.55s; Total run time: 0.67s; Total run time: 0.81s; {'solver': 'platen'}; Total run time: 0.70s; Tota",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:2,Benchmark,Benchmarking,2,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,4,"['Benchmark', 'test']","['Benchmarking', 'test', 'tests']"
Testability,**Changelog**; Added tests for Norm.; `norm.trace` raises `ValueError` instead of `TypeError` when the input is not a square matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1631:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1631,1,['test'],['tests']
Testability,**Changelog**; Added tests for reshape specialisations.; Added tests for columns_stack specialisations.; Added tests for columns_unstack specialisations.; Moved tests for split_columns from test_mathematics to test_reshape.; PEP 8 clean test_mathematics.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1637:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1637,4,['test'],['tests']
Testability,"**Checklist**; - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Shouldit not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of dimensions 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1744:164,test,tests,164,https://qutip.org,https://github.com/qutip/qutip/pull/1744,6,['test'],['tests']
Testability,"**Checklist**; - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/). **Description**; Added ptrace specialisation tests. While adding these tests a bug came out with `ptrace_dense` which is now fixed. The problem was it did not work for `sel=[]`, that is, no selection and hence the full trace was required. The bug comes from how `numpy` works as the output of np.prod([]) is float instead of integer. . I wonder though what should be the behaviour for `qobj.ptrace([])`. Should it not be the same as `qobj.trace()`? `qobj.ptrace([])` currently returns a `Qobj` of shape 1x1 whereas `qobj.trace()` returns a complex number. **Changelog**; Fixed error with ptrace when the input and output are dense and `sel=[]`.; Added specialisations tests for ptrace.; Improved `ptrace` tests to test for edge cases (trace all and trace none).; Added a few more checks to catch invalid dims and raise ValueError.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1746:164,test,tests,164,https://qutip.org,https://github.com/qutip/qutip/pull/1746,5,['test'],"['test', 'tests']"
Testability,"**Checklist**; - [x] PEP8. **Description**; The behaviour of the `liouvillian` seemed to be wrong. For a `TfTensor` as input it returned a `Dense` as oupu. This is mainly because the identity matrix created within the function was not a `TfTensor`. . _Testing The tests that I included where would pass without the fix!_ . Reproducing this behaviour within QuTiP seems to be challenging. This is because of how things are automatically converted from one data type to another. In particular, `liouvillian` worked as expected for both `Dense` and `CSR` but not for `TfTensor`. However, since `TfTensor` is not part of qutip I am not sure how to make it to reproduce this error. . The issue seems in fact to be related to an inconsistency in how data is automatically transformed. The following code summarises the problem:; ```; H = qt.rand_herm(5); csr = H.to('csr').data; dense = H.to('dense').data; tftensor = H.to('tftensor').data. qutip.data.kron(csr, dense) # output: dense; qutip.data.kron(csr, csr) # output: csr; qutip.data.kron(csr, tftensor) # output: dense?? this is what causes problems!; qutip.data.kron(tftensor, tftensor) # output: tftensor; ```. **Changelog**; Fixed liouvillian to not generate dense output when used with TfTensor.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1805:264,test,tests,264,https://qutip.org,https://github.com/qutip/qutip/pull/1805,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR is supposed to mark on-going additions to a new class `qutip.qip.circuit.Measurement` as well as an elementary `qutip.qip.circuit.Measurement.QubitCircuit.run()` function to exactly simulate quantum circuits. The major functions added right now are:. - `Measurement.density_measurement(self, measurement_ops, state)` : This adds generalized state/density matrix measurements given a list of observables. Still needs addition of checks to see if the list of observables is valid ; - `Measurement.measurement_comp_basis(self, state)` : This adds measurement statistics for specific qubit measurements in the computational basis and also returns the collapsed states (without changing the dimensions). ; - `QubitCircuit.run(self, state, cbits)`: Given a ket input to the circuit, applies gates and measurements from the circuit and returns the resultant ket. . Right now, the measurement module is very bare-bones and splintered between the previous code ; from @hodgestar and the new code added by me. The eigenstate based meas",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274:363,test,tests,363,https://qutip.org,https://github.com/qutip/qutip/pull/1274,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; This PR is supposed to address the OpenQASM output functionality. It introduces the class `QasmOutput` and the primary functions:. - `print_qasm(qc)` : prints the QASM output of `QubitCircuit`.; - `save_qasm(qc, file_loc)` : saves the QASM output of `QubitCircuit` to a file. Two [OpenQASM](https://github.com/Qiskit/openqasm) features are missing from this PR that might need to be addressed in a future PR, the possibility of exporting gates with classical control and exporting QuTiP's user-defined gates. . **Related issues or PRs**; This is a companion to PR #1291 and includes the code from it. **Changelog**; Added QASM output functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1318:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1318,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1438:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1438,2,"['log', 'test']","['log', 'tests']"
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/qutip_dev_contrib.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1270:487,test,tests,487,https://qutip.org,https://github.com/qutip/qutip/pull/1270,2,"['log', 'test']","['log', 'tests']"
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [] Please add tests to cover your changes if applicable.; - [ x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; Updating tests in the metrics,superop_reps and tensor modules to pytests. **Changelog**; - Updating unittests to pytests; - Rechecking environment dependent expected failure cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1487,2,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [X] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [X] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [X] Please add tests to cover your changes if applicable.; - [X] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; Added an argument `bc_type` to allow users to specify boundary conditions for interpolating `QobjEvo`. **Related issues or PRs**; [fix #2098 ](https://github.com/qutip/qutip/issues/2098)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2114:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2114,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR presents a prototype for emitting Quantum Intermediate Representation (QIR) modules from `qutip.qip.QubitCircuit` objects, making it easier to interoperate QuTiP with other quantum software tools and platforms. The prototype in this PR uses the [PyQIR](https://qir-alliance.github.io/pyqir/) library for Python to handle QIR generation, isolating QIR generation functionality as an optional dependency. . **Changelog**. - Support for emitting QIR from circuit objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1781:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/1781,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Moved HTMLProgressBar from `qutip/ipynbtools.py` to `qutip/ui/progressbar.py`. **Related issues or PRs**; Fix #2108",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2112,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**. I am adding an efficient module for calculating the wave function that uses a recurrence for it in Cython, and I am applying one of its functions in the update method of the HarmonicOscillatorWaveFunction class in the distribution.py module. This module is an adaptation of one of the modules from the package I developed for efficient wave function calculation: Fast Wave. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2553:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2553,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Do the same change for plot_wigner_sphere and matrix_histogram as #2170 did.; #2170 ; 1. The arguments in plot_wigner_sphere is now similar to those of other functions. Of course, it change its color as users set qutip.settings.colorblind_safe=True.; ```; def plot_wigner_sphere(wigner, reflections=False, *, cmap=None,; colorbar=True, fig=None, ax=None):; ```; 2. matrix_histogram and matrix_histogram_complex combined into one function. The new matrix_histogram can change bar_style and color_style. Here is an example.; <img width=""894"" alt=""matrix_histogram"" src=""https://github.com/qutip/qutip/assets/72233550/a4c94bba-06f8-474f-b6cf-88e0385d7d5a"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2193:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2193,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; Add tests for ui.progressbar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2127,2,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). **Description**; sphereplot and plot_spin_distribution accepts a matrix of values, theta and phi, but the order of them is different and not intuitive to users.; ```; def sphereplot(theta, phi, values, ...; ```; ```; def plot_spin_distribution(P, THETA, PHI, ...; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2219:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2219,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Add a new store_density_matricies option to Result. **Related issues or PRs**; Fixes #2299",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2303,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Add the sparse COO format. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2314:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2314,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Deleted _solve and use _data.solve. **Related issues or PRs**; #2109",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2120:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2120,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This is part of the Google Summer of Code project. My contribution consists of two parts.; One part is organizing arguments of functions in visualization.py. This change helps users to set arguments without referencing documents frequently.; For example, hinton does not have figsize, but other functions such as plot_energy_level do. Also, the order of the arguments varies from function to function, so the user had to see the official document.; I addressed these issues by making the following modifications; First, arguments that many functions should have in common, such as fig and ax, are now keyword arguments.; Second, the order of the argume",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2170:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2170,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; pytest for #2170",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2192:478,test,tests,478,https://qutip.org,https://github.com/qutip/qutip/pull/2192,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. **Description**; There are three major parts to this PR (more or less interlinked): . - Adds `Simulator` class to abstract away circuit run functionality. This enables future contributors to add to exact simulation (and potentially other ways of simulation) easily. It also has a `step` function which allows to go over the circuit step-by-step which could enable interesting visualisations.; - Adds `Result` class as a wrapper around results obtained from circuit simulations. ; - Adds a more efficient mode to `gate_sequence_product` function which allows for faster pre-computation of unitaries. **Changelog**; Added `Simulator`, `Result` class ; Added new mode to `gate_sequence_product`, `QubitCircuit.propagators`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1331:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1331,1,['test'],['tests']
Testability,"**Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [x] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [x] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Fix one warning of #1389 , the others have already been fixed in the main branch. **Related issues or PRs**; Fixes #1389 . **Changelog**; Fix one installation warning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1390:482,test,tests,482,https://qutip.org,https://github.com/qutip/qutip/pull/1390,1,['test'],['tests']
Testability,"**Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:30,test,tests,30,https://qutip.org,https://github.com/qutip/qutip/issues/1639,9,['test'],"['test', 'testing', 'tests']"
Testability,"**Describe the bug**; As described in the title, ``file_`` in ``_file_list().add(file_)`` already has the extension ``'.pyx'`` (this is done by _import_str() in qobjevo_codegen.py), it is unnecessary to add yet another suffix. **To Reproduce**; This can be verified by add a line printing out ``file_`` in ``_file_list().clean()`` ; then run any test that can trigger it (for example ``test_QobjEvo_with_state()``) and observe the output. **Expected behavior**; Should only have a single ``'.pyx'`` in ``file_``. **Your Environment**; ```; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, and Boxi Li; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.0.dev0+8e181cc4; Numpy Version: 1.19.1; Scipy Version: 1.5.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.1; Python Version: 3.8.5; Number of CPUs: 8; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Users\berry\PycharmProjects\qutip\qutip; ==============================================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ```. **Additional context**; I discovered this when dealing with some test failures in windows, it seems that there are multiple problems in ``qobjevo.py`` (actually, what I really wanted to figure out in the first place was that some compiled modules would be deleted before being imported). Anyway, I will update this issue whenever I make any progress.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1354:346,test,test,346,https://qutip.org,https://github.com/qutip/qutip/issues/1354,2,['test'],['test']
Testability,"**Describe the bug**; AttributeError: module 'scipy.sparse._sparsetools' has no attribute 'csr_matmat_pass1' . **To Reproduce**; Install the latest version of scipy 1.5.0, install qutip, and run the tests. The following fail due to the AttributeError specified above:; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[True-2-rand_bra]; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[True-10-rand_bra]; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[False-2-rand_bra]; - test_basis_transformation.py::test_transformations_from_qobj_and_direct_eigenbases_match[False-10-rand_bra]; - test_brtools.py::test_zheevr; I stopped running the tests after these errors appear, and I don't know if it causes other tests to fail as well.; The test_zheevr shows another error, but it fixes when using a previous version of scipy (e.g. 1.3). . The terminal out put is; ```; > fn = getattr(_sparsetools, self.format + '_matmat_pass1'); E AttributeError: module 'scipy.sparse._sparsetools' has no attribute 'csr_matmat_pass1'. /usr/local/lib/python3.6/dist-packages/qutip-4.5.0-py3.6-linux-x86_64.egg/qutip/fastsparse.py:197: AttributeError; ```. **Your Environment**; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Current admin team: Alexander Pitchford, Paul D. Nation, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, and Eric Giguère.; Project Manager: Franco Nori.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.0; Numpy Version: 1.19.0; Scipy Version: 1.3.0 (error fixed); Scipy Version: 1.5.0 (error present); Cython Version: 0.29.20; Matplotlib Version: 3.2.2; Python Version: 3.6.9; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: Fal",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1304:199,test,tests,199,https://qutip.org,https://github.com/qutip/qutip/issues/1304,3,['test'],['tests']
Testability,"**Describe the bug**; Currently qutip is requiring scipy > 1.12 and in the CI checks scipy <1.5 is being checked. There was a bug in scipy 1.4 See [.Stackoverflow error](https://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoper",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:823,test,tests,823,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability,"**Describe the bug**; Hello, I test my qutip installation state using ``qutip.testing.run()`` after importing ``import qutip.testing``. And the result showed that ``AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import)``. **To Reproduce**. ```python; import qutip.testing; qutip.testing.run(); ```; The terminal out put is; ```; AttributeError Traceback (most recent call last); <ipython-input-26-02a40f5288b4> in <module>; ----> 1 import qutip.testing; 2 qutip.testing.run(). D:\useful tools\anaconda\lib\site-packages\qutip\__init__.py in <module>; 42 try:; 43 __IPYTHON__; ---> 44 qutip.settings.ipython = True; 45 except NameError:; 46 qutip.settings.ipython = False. AttributeError: partially initialized module 'qutip' has no attribute 'settings' (most likely due to a circular import). ```. **Expected behavior**; Normally test the installation of qutip. **Your Environment**. ```QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.20.1; Scipy Version: 1.7.1; Cython Version: 0.29.23; Matplotlib Version: 3.3.4; Python Version: 3.8.8; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); Installation path: D:\useful tools\anaconda\lib\site-packages\qutip; ================================================================================; Please cite QuTiP in your publication.; ================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1650:31,test,test,31,https://qutip.org,https://github.com/qutip/qutip/issues/1650,8,['test'],"['test', 'testing']"
Testability,"**Describe the bug**; I'm trying to run some example projects but consistently run into an issue with numpy. I'm quite new to numpy so I couldn't figure out a suitable fix. The following is taken from J. R. Johansson's tutorial 1 (Jaynes Cumming Model), which ran on numpy 1.81. I am currently running numpy 1.16.5. I also tested lower versions of numpy down to 1.14.0; **To Reproduce**; Here is the code to reproduce it:. ```python; output = mesolve(H, psi0, tlist, c_ops, []). # find the indices of the density matrices for the times we are interested in; t_idx = where([tlist == t for t in [0.0, 5.0, 15.0, 25.0]])[1]; tlist[t_idx]. rho_list = array(output.states)[t_idx]; ```; The terminal out put is; ```; ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-44-f8edfb054c33> in <module>; 1 # get a list density matrices; ----> 2 rho_list = array(output.states)[t_idx]. TypeError: must be real number, not Qobj; ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1272:323,test,tested,323,https://qutip.org,https://github.com/qutip/qutip/issues/1272,1,['test'],['tested']
Testability,**Describe the bug**; `test_fileio` is failing on Windows because this use of `tempfile.NamedTemporaryFile` doesn't work on windows. The temporary files cannot be opened twice on Windows according to https://docs.python.org/3.8/library/tempfile.html#tempfile.NamedTemporaryFile.; https://github.com/qutip/qutip/blob/9e82f5b81955952833e25bb3eeff3fa24d36556b/qutip/tests/conftest.py#L194-L197; followed by; https://github.com/qutip/qutip/blob/9e82f5b81955952833e25bb3eeff3fa24d36556b/qutip/fileio.py#L70; results in a permission error. **To Reproduce**; Run `test_fileio.py` on windows. **Your Environment**; QuTiP Version: 4.6.0.dev0+6ad7f2b8; Numpy Version: 1.18.2; Scipy Version: 1.4.1; Cython Version: 0.29.20; Matplotlib Version: 3.2.1; Python Version: 3.7.2; Number of CPUs: 12; BLAS Info: OPENBLAS; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64). Do you have any idea on a replacement @jakelishman ?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1311:363,test,tests,363,https://qutip.org,https://github.com/qutip/qutip/issues/1311,1,['test'],['tests']
Testability,"**Describe the issue**; Hi there! Actually, I'm new to QuTiP, so I'm not sure about this, but here's my issue. . I tried to install it from source by following the [documentation](https://qutip.org/docs/latest/installation.html#direct-setuptools-source-builds). ; After installing the build requirements, I ran the following command,; ```; qutip.testing.run() ; ```. At around 61%, the testPropHOSteadyPar test failed and gave the following report. ```; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:346,test,testing,346,https://qutip.org,https://github.com/qutip/qutip/issues/1711,4,['test'],"['test', 'testPropHOSteadyPar', 'testing']"
Testability,"**Description**. - Allow imports of `qutip.qip` seamlessly as imports of `qutip_qip`; - Test the import behaviour when `qutip_qip` is installed and when not. **Related issues or PRs**; Incorporates the ideas in the discussion of #1500.; Fixes #1893. **Todos and questions**; - [ ] ~~Have `qutip-qip` be an optional dependency~~ (will be left for a future PR); - [ ] ~~Add installation of `qutip-qip` to the CI workflow~~. I have a draft of these changes locally, but they fail due to a dependency conflict: `qutip_qip` currently requires `qutip<5 and >=4.6 ` while these changes are being implemented in `v5.0.0.dev`, ie `>5`. This will cause the unit test where `qutip_qip` is installed to be skipped. Any ideas on how to get around this?. **Edit**: Uses a stub for the `qutip_qip` package in the units tests instead, which removes the need of having `qutip-qip` installed. **Changelog**. Allow imports of `qutip.qip` seamlessly as imports of `qutip_qip`.; Have `qutip-qip` be an optional dependency.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920:88,Test,Test,88,https://qutip.org,https://github.com/qutip/qutip/pull/1920,4,"['Test', 'stub', 'test']","['Test', 'stub', 'test', 'tests']"
Testability,"**Description**. - Fixed some errors in the transcription of the husimi Q and Wigner W functions for spins into code.; - Ensure Q and W functions are normalized over (theta, phi).; - Add tests for correctness and normalization of spin Q function.; - Add tests for normalization and real-ness of spin W function. Correctness is established by comparing the overlap of two states and the overlap of their Wigner functions.; - Spin Q function tests take ~11s to complete, spin Wigner tests take ~10s to complete on my laptop. **To do**; - [x] Decide if the `spin_wigner` function should return only real values be default (as is currently done for the `spin_q_function`).; - [x] Find a simple test for correctness of the spin W function.; - [x] Decide whether to integrate the W function normalization in `_rho_kq` rather than at the top level. We divide all terms by `(2*j + 1)` only to end up multiplying it back out at the end which is a waste of time (`_rho_kq` is called `d**2` times, `d=2*j+1`) . The benefit of leaving it as-is is that it reads like most definitions in literature.; - [x] Update docstring for spin Q function.; - [x] Decide if normalization factor for Wigner and spin Q function should be included (Davis et al. suggest the normalization factor is only introduced during integration: Eq 14 https://arxiv.org/abs/2008.10167). **Related issues or PRs**; This issue was raised in another PR #1195 which didn't resolve this issue as intended. The original issue this fixes was #1128. **Changelog**; Fixed error for calculation of Husimi `spin_q_function` and `spin_wigner`.; Added tests to `tests/test_wigner.py` for these functions.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632:187,test,tests,187,https://qutip.org,https://github.com/qutip/qutip/pull/1632,7,['test'],"['test', 'tests']"
Testability,"**Description**. I propose to make it possible to have callable functions inside of the `e_ops` list, not only operators. This becomes useful if we want to measure energy or if we want to have time-dependent measurements just like time-dependent Hamiltonian. Changes are pretty straightforwards, mostly making sure types match. Important design choice is, if measurement is not an operator but a function, the data type is complex by default (to handle the general case). Feedback and suggestions for changes are welcome. I will be happy to contribute more!. **Related issues or PRs**. Suggested in https://github.com/qutip/qutip/issues/1238. **Changelog**. 1. Modified `mesolve` and `sesolve` objects to handle callable function inside of the `e_ops` list.; 2. Prepared `solver` to create empty measured data if list of `e_ops` contains a callable function.; 3. Modified one of the high level tests, `test_compatibility_with_solver` by adding an additional measurement which is not an operator but a lambda expression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1655:894,test,tests,894,https://qutip.org,https://github.com/qutip/qutip/pull/1655,1,['test'],['tests']
Testability,"**Description**. Merge master at after #1847 into `dev.major`. **Notes**. - qip's changes are not kept, this part is still the same state as it was before the merge. Any improvement that were added to master should instead be pushed to qutip/qutip-qip.; - The tests now consider warning as error, this cause other tests to fail, but they run fine without this. ; - Documentation is still at master's state.; - When needed, change from fastsparse to data layer where made as minimally as possible: steadystate, steadystate_floquet, floquet, krylovsolve, etc. use rough shims. **Todo**. - [x] Add back .coveragerc; - [x] Turn off warnings-are-errors flag in tests; - [x] Fix steadystate tests (@AGaliciaMartinez); - [x] Merge in #1837 from master (adding transparency options to points and vectors on the Bloch sphere).; - [x] Fix [qutip/core/cy/openmp/src/zspmv_openmp.cpp](https://github.com/qutip/qutip/pull/1850/files#diff-df17c9d6ec3977033ce197f9a782cd99c0573131ab691cc8fbeeb4b3f0a5c943). **Todo (post PR merge)**. - [x] HEOM: Files where pulled, but any issue was dealt by commenting the code. All related tests are skipped. (@hodgestar); - [x] HEOM: Documentation plots were commented out -- check all docs thoroughly. (@hodgestar); - [x] Steadystate: Test fails, there seems to be ~3 bugs that I could not fix in time.; - [x] Update documentation to build on QuTiP 5 (@hodgestar); - [ ] Thoroughly check Bloch and Bloch3d. (@hodgestar); - [x] Remove _pyxbuilder.py (@ericgig); - [x] Remove legacy bloch_redfield solver (@ericgig); - [x] Fix test warnings and turn warnings-are-errors back on; - [x] Fix doc warnings and turn warnings-are-errors back on; - [x] QIP: Remove qip and qip docs. (@BoxiLi); - [x] Get to the bottom of the Windows PermissionErrors when compiling string coefficients",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1850:260,test,tests,260,https://qutip.org,https://github.com/qutip/qutip/pull/1850,7,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,**Description**. Merge the latest changes of master.; - Activating the windows tests.; - Updating the changelog.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1859:79,test,tests,79,https://qutip.org,https://github.com/qutip/qutip/pull/1859,1,['test'],['tests']
Testability,**Description**. Prepare the 4.6.1 release. **Related issues or PRs**. * PR #1498 (fixed a bug in old Scipy/MKL eigh combinations) - https://github.com/qutip/qutip/pull/1498; * PR #1501 (fixed some errors in QIP gate definitions) - https://github.com/qutip/qutip/pull/1501; * PR #1505 (fixed some documentation build errors) - https://github.com/qutip/qutip/pull/1505; * PR #1506 (fixed some test warnings) - https://github.com/qutip/qutip/pull/1506; * PR #1510 (added the [full] pip install target) - https://github.com/qutip/qutip/pull/1510; * PR #1511 (updated the README) - https://github.com/qutip/qutip/pull/1511; * PR #1513 (graft qutip-doc into qutip) - https://github.com/qutip/qutip/pull/1513; * PR #1541 (fix sdist release) https://github.com/qutip/qutip/pull/1541; * PR #1542 (add Simon as author) https://github.com/qutip/qutip/pull/1542. **Changelog**. Version 4.6.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1543:392,test,test,392,https://qutip.org,https://github.com/qutip/qutip/pull/1543,1,['test'],['test']
Testability,"**Description**. Previously I was using (in qutip-tensorflow):; ```python; import qutip.tests.core.data.test_mathematics; import qutip.tests.core.data.test_reshape. class TestAdd_2(test_mathematic.TestAdd):; 	pass. class TestReshape_2(test_reshape.TestReshape):; 	pass; ```. This PR allows using instead:; ```python; import qutip.tests.core.data as testing. class TestAdd_2(testing.TestAdd):; 	pass. class TestReshape_2(testing.TestReshape):; 	pass; ```; which is more convenient, specially because there are multiple modules that need to be imported in this way. Importing the classes individually is not a valid option as it will run qutip's tests also in qutip-tensorflow. . **Related issues or PRs**; This is currently planned to be used in qutip/qutip-tensorflow#34.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723:88,test,tests,88,https://qutip.org,https://github.com/qutip/qutip/pull/1723,11,"['Test', 'test']","['TestAdd', 'TestReshape', 'testing', 'tests']"
Testability,"**Description**. Python 3.6 tests fail to build cvxopt, there was a new version released last week.; This simply run these tests without it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2215:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/2215,2,['test'],['tests']
Testability,"**Description**. The aim of this project is to enhance the capabilities of qutip's HEOM implementation by introducing a set of tools that offer the option to simulate arbitrary spectral densities or correlation functions. . To achieve this the main idea is to fit our wanted spectral density by a set of underdamped Drude-Lorentz spectral densities or correlation functions. The idea is that the user will supply his desired spectral density or correlation function and the tools will automatically do the fit and construct the corresponding HEOM bath. Guesses ffor the fit and the number of terms will be decided automatically if the user does not specify them. To decided on the number of terms, we will used the normalized root mean square error as a measure of the goodness of the fit. . I also added functions to bosonic bath to quickly obtain the correlation function, power spectrum and spectral density for the existing bosonic baths . **Note**. Those tests fail because mpmath is not in the requirements, it is needed because the scipy version of the Rienmann zeta function doesn't take complex arguments (https://github.com/scipy/scipy/issues/9182). **Related issues or PRs**. The Qutip tutorial notebooks are updated to show this new functionality in (https://github.com/qutip/qutip-tutorials/pull/72)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2260:960,test,tests,960,https://qutip.org,https://github.com/qutip/qutip/pull/2260,1,['test'],['tests']
Testability,"**Description**. Update the interface of random functions:; - The first input is `dimensions` instead of `N`. It act the same way as the input of `qeye`. (#1838); ```; qutip.rand_herm(N).dims == [[N], [N]]; qutip.rand_herm(dims).dims == [dims, dims]. qutip.rand_super(N).dims == [[[N], [N]], [[N], [N]]]; qutip.rand_super([N, M]).dims == [[[N, M], [N, M]], [[N, M], [N, M]]]; qutip.rand_super([[N], [N]]).dims == [[[N], [N]], [[N], [N]]]; ```; - Random Qobj creation use numpy new random interface. The seed now also accept `numpy.random.SeedSequence` or `numpy.random.Generator`.; - We had `unitary = (1j*rand_herm(N, density)).expm()`, therefore the resulting density for `rand_unitary` (and `rand_dm`) used to be denser than what was entered. I changed the density keyword to correspond to the density of output object. I do this by creating a smaller dense matrices and shuffling them together.; - Random super operator function now accept a `superrep` keyword and return the object in that representation. This work for `super`, `chi` and `choi` representation, but not `kraus` since it's not a `Qobj` and this cause issue with the `dtype` keyword.; - Lastly I merged some similar functions: `rand_unitary_haar` is now included as `rand_unitary(N, distribution=""haar"")`, etc. We had a few functions that returned the same type of object, but with different algorithm. I found this confusing, so I merged them to show they are equivalent. The algorithms having a reference to a paper are used as the defaults. I did not keep the previous functions, but we could keep them with a deprecation warning. Lastly I merged the `test_rand` and `test_random` files. Tests in those files where overlapping. **Related issues or PRs**; fix #1838",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1976:1661,Test,Tests,1661,https://qutip.org,https://github.com/qutip/qutip/pull/1976,1,['Test'],['Tests']
Testability,**Description**. Updated steadystate solvers to use ` _dims[0].oper ` (instead of `dims[0]`) to get the dimensions of the returned state from the Liouvillian. This should fix the issue with enr states and steadystate solvers. . Also updated the svd method a little bit to be more consistent with the others. Added a basic test of just the default steadystate solver method. **Related issues or PRs**; fixes #2386,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2387:322,test,test,322,https://qutip.org,https://github.com/qutip/qutip/pull/2387,1,['test'],['test']
Testability,**Description**. We allow scipy version 1.12 (released about 2 months ago) to be used with qutip. Scipy 1.12 is already tested in the build matrix https://github.com/qutip/qutip/blob/master/.github/workflows/tests.yml#L93,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2354:120,test,tested,120,https://qutip.org,https://github.com/qutip/qutip/pull/2354,2,['test'],"['tested', 'tests']"
Testability,"**Description**. We have steadystate tests that fail almost always in CI on Python 3.9 with OpenMP and MKL, and sometimes with just Python 3.9 and MKL. Issue is currently hard to reproduce locally. **Related issues or PRs**; * Test failures seen in #1689 and elsewhere. **Progress so far**; * Fixed a small issue in steadystate tests so that I can use pytest-repeat to run `--count=100` on the steadystate tests in the hopes of reproducing the bug locally.; * Removed mutable default c_ops arguments for steadystate and liouvillian.; * Fix reference to method in _pseudo_inverse_sparse.; * ~~Only set method in pseudo_inverse if one is explicitly defined.~~ (revert). **Changelog**; TODO: Write the changelog once we understand properly what is going on.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/1694,4,"['Test', 'test']","['Test', 'tests']"
Testability,"**Description**. With the inclusion of the new dimensions class, stored in Qobj()'s _dims property, the properties of ENR states are described by ENRspace(). However, when using ENR states with mesolve, Liouvillian, sum() and other functions these _dim properties would be discarded. This PR is a draft attempt to get things working, largely by subbing in _dims instead of dims in various places, and a test to check ENR+mesolve() works for a simple case. All tests pass, but since this is just some bodging to get things working, and messes a little bit with some core functions maybe its also good to check the tutorial notebooks also pass. edit: forgot to mention, this is not exhaustive; e.g., sprepost() has not been updated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2341:403,test,test,403,https://qutip.org,https://github.com/qutip/qutip/pull/2341,2,['test'],"['test', 'tests']"
Testability,"**Description**; - Add a mention that filelock is needed for string coefficient compilation in the guide.; - When a string coefficient is used, a warning will be raised (once) if either cython or filelock is missing.; - Skip string coefficient compilation test when cython is present by filelock is not instead of only checking for cython. **Related issues or PRs**; fix #2162",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2168:256,test,test,256,https://qutip.org,https://github.com/qutip/qutip/pull/2168,1,['test'],['test']
Testability,"**Description**; - Add a test for progress bars.; - Make `start` private. `start` was mostly used right after the initialization. The docstring indicated that it was not needed, but it was for most bars. #2148; - Remove the iteration argument in update.; - Have `HTMLProgressBar` import ipython. **Related issues or PRs**; Fix the issue #2148 for master.; Replace #2127",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/pull/2150,1,['test'],['test']
Testability,"**Description**; - Add product between `Qobj`, `QobjEvo` and `Coefficient`:; `QobjEvo([op, ""t""]) === op * coefficient(""t"")`; - `tensor` accept `QobjEvo`; - Overload `&` for tensor product for `Qobj` and `QobjEvo`:; `tensor(A, B) === A & B`; - Add `__matmul__` to `QobjEvo`.; - Remove call to `QobjEvo.compile` outside `qobjEvo.py`. (Always compiled); - Add `dims` and `shape` as read-only properties of `QobjEvo`.; - Reworked `QobjEvo`'s tests. ; - Found a bug in `liouvillian` with constant `QobjEvo` and `Qobj`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1342:438,test,tests,438,https://qutip.org,https://github.com/qutip/qutip/pull/1342,1,['test'],['tests']
Testability,"**Description**; - Added a job that update to testpypi when the ""test"" is entered as the branch name.; - Removed the check that stopped release with `dev` in the version number.; - Added a token for testpypi. While it's a draft PR, the action will only print, not run the upload command.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2069:46,test,testpypi,46,https://qutip.org,https://github.com/qutip/qutip/pull/2069,3,['test'],"['test', 'testpypi']"
Testability,**Description**; - Added controlled version of the single-qubit gates; - Added controlled single-qubit gates to Qubit.Qip.Circuit.resolve_gates(); - Added controlled single-qubit gates to Qubit.Qip.Circuit.propagator(); - Added controlled single-qubit gates to Qubit.Qip.Circuit.latex_code(); - Added controlled single-qubit gates to Qubit.Qip.Circuit.add_1q_gate(); - Added tests for controlled single-qubit gates in Qubit.Qip.Operations.Gates and Qubit.Qip.Circuit. **Related issues or PRs**; fixes #1225 . **Changelog**; The controlled version of the single-qubit gates and tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224:375,test,tests,375,https://qutip.org,https://github.com/qutip/qutip/pull/1224,2,['test'],['tests']
Testability,"**Description**; - Adds support for pathlib.Path objects in qsave/qload.; - Adds tests for those functions.; - Suffix is optional, if given it won't be appended again.; - Removes prints in qload. **Related issues or PRs**; fix #1184. **Changelog**; `qsave` and `qload` now support `pathlib.Path` objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1813:81,test,tests,81,https://qutip.org,https://github.com/qutip/qutip/pull/1813,1,['test'],['tests']
Testability,"**Description**; - Remove `run_module_suite`, call nosetest, not pytest.; - Change `assert_` to `assert`, the later work better with pytest.; - Add some missing `__all__`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2143:97,assert,assert,97,https://qutip.org,https://github.com/qutip/qutip/pull/2143,1,['assert'],['assert']
Testability,"**Description**; - Support `X`, `Y`, `Z` gates in gate decomposition. Decompose them into `RX`, `RY`, `RZ` gates, with the corresponding global phase. Now `X`, `Y`, `Z` can be used in `Processor`.; - Modernize tests for `CavityQED` and `SpinChain`. **Changelog**; XYZ gates decomposition and modernizing tests",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1356:210,test,tests,210,https://qutip.org,https://github.com/qutip/qutip/pull/1356,2,['test'],['tests']
Testability,"**Description**; A change in `test_k`. In commit 7173a0d `L` was changed, but this was not reflected in `dim_H`. This commit aims to rectify that. **Related issues or PRs**. **Changelog**; Changed `dim_H` to include `L` in its definition in lattice tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1785:249,test,tests,249,https://qutip.org,https://github.com/qutip/qutip/pull/1785,1,['test'],['tests']
Testability,"**Description**; A change in setuptools (pypa/setuptools#3521) raise a warning when compiling coefficient using absolute path, which breaks our tests for `dev.major`:; ```; DeprecationWarning: Absolute path '/home/runner/.qutip/qutip_coeffs_1.1/qtcoeff_8208be2129365a87dda9c12028c457' is being replaced with a relative path 'home/runner/.qutip/qutip_coeffs_1.1/qtcoeff_8208be2129365a87dda9c12028c457' for outputs. This behavior is deprecated. If this behavior is desired, please comment in pypa/distutils#169.; ```; This changes the path to be relative. I change the path before creating the lock files, which otherwise were polluting the active directory.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1975:144,test,tests,144,https://qutip.org,https://github.com/qutip/qutip/pull/1975,1,['test'],['tests']
Testability,"**Description**; A lot of the code in `propagators.py` is quite old and manipulates `Qobj` shapes directly and unnecessarily converts backwards and forward between numpy arrays and `Qobj`s. This PR attempts to address two important bugs in dimension checking -- the one reported in #1585 (when calculating propagators for collapse operators) and another I found while reading the nearby code. A more thorough rework of the code should probably happen on `dev.major` for QuTiP version 5. The `propagator` method could do with more input sanity checking for QuTiP version 5, e.g.; * rename `c_op_list` to `c_ops` for consistency with the solver; * complain if `c_ops` are supplied along with a superoperator (?); * perhaps remove the `single` or `batch` unitary_mode option, or at least complain if the parameters supplied don't make sense. **Related issues or PRs**; * #1585. **Changelog**; - Fixed support for calculating the ``propagator`` of a density matrix with collapse operators. QuTiP 4.6.2 introduced extra sanity checks on the dimensions of inputs to mesolve (#1459), but the propagator function's calls to ``mesolve`` violated these checks by supplying initial states with the dimensions incorrectly set. ``propagator`` now calls ``mesolve`` with the correct dimensions set on the initial state. Fixes #1585.; - Fixed support for calculating the ``propagator`` for a superoperator without collapse operators. This functionality was not tested by the test suite and appears to have broken sometime during 2019. Tests have now been added and the code breakages fixed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1588:1446,test,tested,1446,https://qutip.org,https://github.com/qutip/qutip/pull/1588,3,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,"**Description**; A test for hanging github's action.; To see if it could be caused by multiprocessing, it over with `parallel_map` with `serial_map` so all test are forced to run in one process.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1789:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1789,2,['test'],['test']
Testability,"**Description**; A test was failing since the numpy 2.1 release on windows. ; It seems to be related the the way low level libraries are linked, a lower precision was used on windows... Loosening the ODE tolerance fix the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2516:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/2516,1,['test'],['test']
Testability,**Description**; Activate remaining tests on Windows now that pytest-timeout has been removed. **Related issues or PRs**; - Continues on from #1853. **Changelog**; Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854:36,test,tests,36,https://qutip.org,https://github.com/qutip/qutip/pull/1854,2,['test'],['tests']
Testability,**Description**; Activate the mcsolve tests in QuTiP 5. Changes:; - [x] Swap parallel_map over to ProcessPoolExecutor.; - [x] Switch ``mcsolve`` to the new parallel_map. ; - [x] Reactivated mcsolve tests on Windows. . **Related issues or PRs**; - Continues work from #1853 and #1854 in v4; - #1202 (maybe already resolved in QuTiP 5); - #1190 (hopefully already resolved in QuTiP 5),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1948,2,['test'],['tests']
Testability,"**Description**; Add CSC data-layer. For our use, CSC is almost always slower than CSR...; I build it for testing possible use in AHS. I reused the CSR code as much as possible. Specializations where the *free* transformation `CSC -> transpose(CSR)` could be used have been added. **Related issues or PRs**; Build on top of #1407.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1408:106,test,testing,106,https://qutip.org,https://github.com/qutip/qutip/pull/1408,1,['test'],['testing']
Testability,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - Clean up of #1849. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1853:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/pull/1853,2,['test'],['test']
Testability,**Description**; Add GitHub actions test run on windows-latest. **Related issues or PRs**; - None so far. **Changelog**; Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1849:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/pull/1849,2,['test'],['test']
Testability,**Description**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver. **Todo**; - [x] Clean-up the Pade expansion code.; - [x] ~~Somehow get the Matsubara and Pade results for the current to match.~~ (These are not supposed to match!); - [x] Add solver tests for the Lorentzian baths.; - [x] Add bath tests for the Lorentzian baths.; - [x] Add tests for the DrudeLorentzPadeBath terminator.; - [x] Convert the slightly awkward terminator= argument for Drude-Lorentz baths to a terminator method. **Related issues or PRs**; * #1601; * #1724. **Changelog**; Add Matsubara and Padé expansion Lorentzian baths for the HEOM solver.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1726:271,test,tests,271,https://qutip.org,https://github.com/qutip/qutip/pull/1726,3,['test'],['tests']
Testability,**Description**; Add `Qobj.logm()` for the matrix logarithm operation. **Related issues or PRs**; Fix #1990 for master,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1992:27,log,logm,27,https://qutip.org,https://github.com/qutip/qutip/pull/1992,2,['log'],"['logarithm', 'logm']"
Testability,**Description**; Add `Qobj.logm()` for the matrix logarithm operation.; Only create the `Dense` operation was created. `expm_dense` was also added. **Related issues or PRs**; Fix #1990 for dev.major,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1993:27,log,logm,27,https://qutip.org,https://github.com/qutip/qutip/pull/1993,2,['log'],"['logarithm', 'logm']"
Testability,"**Description**; Add `pyproject.toml` to specify build-system as standardized in PEP 518. This enables building qutip in an emtpy environment i.e. without `setuptools`, `Cython`, `numpy` and `scipy` being pre-installed. If you have a new minimal debian install you sould be able to install this version with; ```; # apt-get install python3-pip; $ pip3 install $PATH_TO_QUTIP; ```; I only veryfied this in WSL so please test :). **Related issues or PRs**; This solves #1246 and #1174 and makes CI for packages that depend on qutip a lot easier. **Changelog**; Add `pyproject.toml` so qutip can be built without prerequisites",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1309:419,test,test,419,https://qutip.org,https://github.com/qutip/qutip/pull/1309,1,['test'],['test']
Testability,"**Description**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix. **Related issues or PRs**; * If test pass consistently with numpy 1.22, we can close #1694. **Changelog**; Add a numpy 1.22 and Python 3.10 build to the CI test matrix.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1777:66,test,test,66,https://qutip.org,https://github.com/qutip/qutip/pull/1777,3,['test'],['test']
Testability,"**Description**; Add a suggestion for tests in the PR template. **Related issues or PRs**; Improve #1198 . **Changelog**; Add a suggestion for tests, documentation and notebook in the PR template.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1220:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1220,2,['test'],['tests']
Testability,"**Description**; Add a variant to `matmul` specialised for case where the right matrix is a column stacked hermitian matrix, and the output is the same. Such as for `mesolve` using super operators. Open solvers `mesolve`, `brmesolve`, `smesolve` and `fmesolve` all have a new options `use_herm_matmul` to use this operation. The default is `False` since we cannot easily check for exception (we can't test that a time dependant Hamiltonian is Hermitian, ...). With large enough systems, this result in a visible speed up:; ```; >>> N = 100; >>> H = qt.rand_herm(N, density=3/N); >>> c_ops = [qt.destroy(N)]. >>> qt.mesolve(H, qt.basis(N, N-2), [0, 10], c_ops=c_ops, options={""use_herm_matmul"": True}).stats[""run time""]; 0.8431086540222168; >>> qt.mesolve(H, qt.basis(N, N-2), [0, 10], c_ops=c_ops, options={""use_herm_matmul"": False}).stats[""run time""]; 1.0559077262878418. qt.smesolve(H, qt.basis(N, N-2), [0, 2], sc_ops=c_ops, ntraj=1, options={""use_herm_matmul"": True}).stats[""run time""]; 0.9043550491333008; qt.smesolve(H, qt.basis(N, N-2), [0, 2], sc_ops=c_ops, ntraj=1, options={""use_herm_matmul"": False}).stats[""run time""]; 2.111673355102539; ```. This is a use case for the capacity to dispatch on `Data` added in #2157. When `herm_matmul` is not available, it can be better to fallback on `matmul` using the same type than to do conversions between data types. For cupy, moving the data to the cpu to halves the work is probably not worth it. ; **Related issues or PRs**; This is build on top of #2157, it should be merged first.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173:401,test,test,401,https://qutip.org,https://github.com/qutip/qutip/pull/2173,1,['test'],['test']
Testability,**Description**; Add do_3d_projection to Arrow3D for matplotlib 3.5 to fix the rendering of vectors on the Bloch sphere. This PR also adds tests for rendering vectors and adds support for passing vectors as tuples. **Related issues or PRs**; - fix #1817; - builds on #1690. **Changelog**; Fixed rendering of vectors on the Bloch sphere when using matplotlib 3.5 and above.; Allowed vectors to be passed as tuples to Bloch.add_vectors.; Added tests for rendering vectors on the Bloch sphere.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1818:139,test,tests,139,https://qutip.org,https://github.com/qutip/qutip/pull/1818,2,['test'],['tests']
Testability,"**Description**; Add hypothesis strategies for data objects and some simple property-based tests for data operations. We aim for compatibility with numpy, but there are caveats in few different cases:. | Operations | Non-finites Equivalent | Notes |; | -- | -- | -- |; | Creation & negation | | No caveats |; | Equality checks | | The same tolerances must be specified |; | Addition & subtraction | Yes | |; | Scalar multiplication & division | Yes | CSR may raise an exception if the scalar is non-finite |; | Matrix multiplication | Not tests | Magnitude range is restrict to ensure precision |; | Trace, adjoint, transpose, conj & copy | | No caveats |. In some cases we also need to ignore warnings raised by numpy about operations with `nan` and `inf` when calculating the expected result. **Related issues or PRs**; - None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957:91,test,tests,91,https://qutip.org,https://github.com/qutip/qutip/pull/1957,2,['test'],['tests']
Testability,"**Description**; Add inplace operations `+=`, `-=`, `*=`, `@=`, `/=` for Qobj.; These operations could already be used as python fallback on normal operator.; But cases like:; ```; for op in operators:; op *= 2; ```; in place operations are needed. Added a tests and checked cases where in place operations were used on users input. Can be useful for averaging states for mcsolve.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2460:257,test,tests,257,https://qutip.org,https://github.com/qutip/qutip/pull/2460,1,['test'],['tests']
Testability,"**Description**; Add missing specialization that were created, but not registered.; The test already call the dispatched function using both data layer, thus adding the specialization will have the added function tested.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2133:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/2133,2,['test'],"['test', 'tested']"
Testability,"**Description**; Add python 3.12 to automated test and wheel build.; However python 3.12 removed the `imp` module used by `pyximport`. ; The fix on cython side may only be for cython 3.X, so we run without cython at runtime on 3.12. Related to #2293",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2294:46,test,test,46,https://qutip.org,https://github.com/qutip/qutip/pull/2294,1,['test'],['test']
Testability,"**Description**; Add some `skipif` to bypass tests that were failing (segmentation faults) during the local testing of `qutip.testing.run()` that was failing in the zip version of #1241. I am on Mac with generic BLAS and no MKL. ; I have been installing it on a fresh conda environment with; ```; pip install -e .[development]; ```; which I think is better than ; ```; python setup.py develop; ```; and by the way maybe this is something that can be updated in the readme and docs.; ; My qutip.about reads:; ```; QuTiP Version: 4.5.1; Numpy Version: 1.15.4; Scipy Version: 1.4.1; Cython Version: 0.29.8; Matplotlib Version: 3.1.2; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (x86_64); Installation path: /Users/nathanshammah/github/qutip-4.5.1/qutip; ```; This PR could be included in the 4.5.1 version @Ericgig. . **Related issues or PRs**; This PR is related to #1241. **Changelog**; Add `skipif`in `pytest` on Mac with generic BLAS, avoiding segmentation fault during `qutip.testing.run()`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1255:45,test,tests,45,https://qutip.org,https://github.com/qutip/qutip/pull/1255,8,['test'],"['testing', 'tests']"
Testability,"**Description**; Add support for setting the numpy version in test runs. **Related issues or PRs**; * See #1694 for the strange steadystate test failures on Python 3.9, numpy 1.21.2 and on certain Azure VMs.; * See #1689 for earlier discussion of the above failures in an unrelated PR. **Changelog**; * Add support for specifying the numpy version in the CI test matrix and pin numpy to the latest 1.20.X by default.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1696:62,test,test,62,https://qutip.org,https://github.com/qutip/qutip/pull/1696,3,['test'],['test']
Testability,"**Description**; Add support for the up comming numpy v2:. - Allows qutip to be compiled with numpy 2, and pass tests.; - Test that binaries compiled with numpy 2 are compatible with numpy 1 at runtime. I did not update the requirement yet, it must be installed in `--no-build-isolation`.; When it's officially released, we will need to update `pyproject.toml` and `setup.cfg`, and possibly add test for np2 on windows and mac. Here are the changes that affect us:; - `np.array(.., copy=False)` no longer mean copy only if needed. `copy=None` was added for that.; - `np.trapz` was replaced by `np.trapezoid`. Since there are no overlaps, I opted to use `scipy.integrate.trapezoid` instead.; - `np.array(1, np.int32) * 2**33` will enforce the integer type and overflow.; - `Py_intptr_t` from `python.h` is no longer available through numpy cython interface.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2421:112,test,tests,112,https://qutip.org,https://github.com/qutip/qutip/pull/2421,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"**Description**; Add test jobs for the familly packages (`qutip-qip`, `qutip-qoc`, `qutip-jax`) for PR in `qutip/qutip`.; Tests the development version or could be ran manually to test any version (tags / branch). This will cause a lot of PR to look bad with error outside their scope, but if we keep the other modules working, then this could be a useful tool.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2504:21,test,test,21,https://qutip.org,https://github.com/qutip/qutip/pull/2504,3,"['Test', 'test']","['Tests', 'test']"
Testability,**Description**; Add the PR from @BoxiLi 's Lattice bug on windows. @jakelishman's #1312 is not be added since the tests upgrade to pytest are not in the release. (yet?). **Related issues or PRs**; apply #1313 to 4.5.2,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1314:115,test,tests,115,https://qutip.org,https://github.com/qutip/qutip/pull/1314,1,['test'],['tests']
Testability,**Description**; Add towncrier draft build of changelog to CI tests. **Related issues or PRs**; None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1946:62,test,tests,62,https://qutip.org,https://github.com/qutip/qutip/pull/1946,1,['test'],['tests']
Testability,"**Description**; Added hints to mesolve, sesolve, result, Qobj, QobjEvo. The aim is not to pass static type checker, but to help the user with hints: ; - I added types to outside facing functions.; - I sometime used hints that do not match the real implementation. For example:; - `Qobj.__mul__` is typed to support product with scalar, not other `Qobj`, (for which `__matmul__` should be used.); - `e_ops` are hinted to dict but also support single operator, list, tuple...; - `solver.options` claim it return a dict not `_SolverOptions` (which is a subclass of dict.); - I skipped the `None` type. (`result.final_state` type is `Qobj` event if it is `None` when not saved.). I created alias types:; - QobjEvoLike: Stuff that can be made into a QobjEvo.; - CoefficientLike: Stuff that can be made into a Coefficient.; - LayerType: Can be understood as our data layer type. (A dynamically generated Literal could be better.); Maybe some alias for dimensions object could be useful?. Knowing that we have extension modules, I used numbers.Number for complex hoping it support jax or tensorflow's scalars. Also `Any` used in some place where other type support can be added such as `Qobj.__init__`. Some of the type hint features I used were only added in python 3.10. We still tests with python 3.9, but it's old enough that we can remove it (according to [spec-0000](https://scientific-python.org/specs/spec-0000/)).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2327:1276,test,tests,1276,https://qutip.org,https://github.com/qutip/qutip/pull/2327,1,['test'],['tests']
Testability,"**Description**; Added one new public function `local_multiply_dense` in a new file qutip/qip/operations/local_operations.py, and tests at tests/test_local_operations.py. This can dramatically improve the speed for performing certain matrix multiplications, taking advantage the new Dense data layer. In particular, for cases where the density matrix/state has few zero's, and we want to multiply a local operator (e.g. one acting on only a small subset of the full system), this routine is expected to be faster. **What is does**; Using some standard tools, such as NumPy's einsum one can compute the local matrix operation directly, i.e. applying a one or two-local gate on a Qobj of many qubits. This is only really useful if one uses the Dense data layer, since otherwise there are conversion overheads which kill any speed-up (at the end of the day, we need NumPy arrays). The code has two 'backends', one using einsum as mentioned, and another using what I call a 'vectorization' approach (where the density matrix or vector is reshaped to a vector over the target qubits). Note: It will work on qudits in general (does not have to be qubits). **Performance**; I find, in systems where the state is dense (few zeros), one can get a speed-up of between 2 and up to around 10x faster (depends on the size and system etc). Of course, sometimes using the standard built in sparse routines are faster, so it really depends what one is doing. Attached is a wall-clock time comparison between the standard sparse way for a 1-local multiplication on a vector (using `gate_expand_1toN`), and the added code (dense local). N being the number of qubits. Here I made things as hard as possible for the sparse routine (all elements non-zero), so this is probably the limit of the speed-up. ![1_local_vector_adaptive_backend](https://user-images.githubusercontent.com/47875526/101932409-91f44900-3b8f-11eb-8b5b-7a00dabec2e4.png). **Other notes**; 1. I am a contractor for NASA, and they required a slight chan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1405:130,test,tests,130,https://qutip.org,https://github.com/qutip/qutip/pull/1405,2,['test'],['tests']
Testability,"**Description**; Added option to include colors to Bloch vectors and points instead of just cycling from a list . **Related issues or PRs**; fix #1292 . **Changelog**; Added an optional argument called colors for the Bloch.add_vectors, Bloch.add_points and Bloch.add_states method. ; Tested it here: https://github.com/rajathshetty20/misc/blob/master/qutip%20%231292.ipynb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1315:284,Test,Tested,284,https://qutip.org,https://github.com/qutip/qutip/pull/1315,1,['Test'],['Tested']
Testability,**Description**; Added tests for expect specialisations. The tests follow the structure in `test_mathematics` which helps developing new data . **Notes**; I changed the logic in `expect.pyx` to also raise `ValuError` when op is not a square matrix. `expect_csr` was crashing with a segment fault when passing a nonsquare matrix as `op`. I am not sure why this error was not being caught by the tests for `qutip.expect`. I guess this function does some check to the Qobj given as argument.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1626:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/pull/1626,4,"['log', 'test']","['logic', 'tests']"
Testability,"**Description**; Added tests for pow specialisation. I also changed the raised error to `ValueError` to be consistent with the rest of the specialisations (and in particular with trace that also raises `ValueError` if input matrix is not square). . The tests do not contemplate the cases where:; - n is not an integer (float): Float is cast to integer so: `pow_csr(matrix, 0.1) == pow_csr(matrix, 0)`. We may want to raise `TypeError` instead.; - n is not positive: `OverflowError` is raised instead of `TypeError`. This is due to how Cython works but we may want to raise TypeError for consistency with the rest of the code. For instance, raising `TypeError` in these cases is what NumPy does. What should we do?. **Related issues or PRs**; None. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Tests for pow specisalisation.; Pow now raises ValueError instead of TypeError if matrix is not square.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1622:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/pull/1622,4,"['Test', 'log', 'test']","['Tests', 'log', 'tests']"
Testability,"**Description**; Adding spin-1/2 fermionic creation and annihilation operators to close #2165 (for UnitaryHack 2023). Specifically, in `qutip.core.operators`, I added the `fcreate` and `fdestroy` functions, following the Jordan-Wigner transformation described in [this guide](https://learn.microsoft.com/en-us/azure/quantum/user-guide/libraries/chemistry/concepts/jordan-wigner). Specifically, I implemented the following using `qutip.tensor` objects, and documented this in the code. $$a_j = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x + i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. $$a_j^{\dagger} = \sigma_z^{\otimes j} \otimes (\frac{\sigma_x - i \sigma_y}{2}) \otimes I^{\otimes N-j-1}$$. Additionally, I wrote a new test in `qutip.tests.core.test_operators` that verified the commutation relations. I also ran the new code through `pycodestyle` to verify it was written nicely. Please let me know if there are any issues or anything I should be doing on the documentation side! I hope I understood the problem correctly :). **Related issues or PRs**; close #2165; I closely followed the protocol in #863",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2166:723,test,test,723,https://qutip.org,https://github.com/qutip/qutip/pull/2166,2,['test'],"['test', 'tests']"
Testability,"**Description**; Adds support for Monte-Carlo simulations of master equations with possibly negative rates. The method implemented here is described in [arXiv:2209.08958](https://arxiv.org/abs/2209.08958) [quant-ph]. A simple example can be found in [this notebook](https://github.com/pmenczel/nm-mcsolve-example/blob/master/nonmarkovian_mcsolver.ipynb). Based on code provided by B. Donvil. **Todo-List**; - [X] Create users guide; - [X] Add example notebook to qutip-tutorial and link it in users guide ([PR in qutip-tutorials repo](https://github.com/qutip/qutip-tutorials/pull/59)); - [X] Store the trajectory-average of the influence martingale in the `Result` object; - Use this as end condition, or to warn users about bad convergence? ; (Unclear how effective that would be. Will not be implemented for now); - [X] Make associated `nm_mcsolve` function (name up for debate?); - [X] Write docstring comments; - [X] Write tests; - [X] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070:928,test,tests,928,https://qutip.org,https://github.com/qutip/qutip/pull/2070,1,['test'],['tests']
Testability,"**Description**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)` signature. The old style signature is used if the arguments to the function are exactly `(t, args)`. Otherwise the new calling convention is used. This PR also limits the arguments stored to those accepted by the function, potentially reducing some extra copies of functions when `.replace_arguments()` is called. **Related issues or PRs**; This is an alternative implementation of #1609. This implementation retains single FunctionCoefficient and _FuncElement classes and simplifies the logic for deciding whether the old or new-style calling convention is used. **Changelog**; Allow function-based Coefficients and QobjEvo elements to support functions with more natural argument signatures like `f(t, w)` or `f(t, **kw)` in addition to the old `f(t, args)`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633:686,log,logic,686,https://qutip.org,https://github.com/qutip/qutip/pull/1633,1,['log'],['logic']
Testability,"**Description**; Allow the dispatcher to accept specialisations on generic `Data`.; This as 2 uses:; - Simplify the creation of complex function using simpler ones: `inner` defined in term of `matmul`. ; - Allow us to create niche dispatched functions for some data layer without the need to be supported by all: blas' zgemm (matmul) can transpose and adjoint of each input matrix in the same operation. . The `Data` dispatched functions have less priority than direct specialization. They are used directly (no `_constructed_specialisation`) when the `Data` is in the inputs, but when the output data type is set, there will always be a conversion from `Data` to the desired type. . In this PR:; - Add dispatch on `Data`.; - Add direct tests for the dispatcher.; - Create `kron_transpose` which is `kron(left.T, tright)`. It's commonly used for superoperator and it can be optimized for `Dense` and `Jax` by doing it in one operation.; - Add `Data` specialization for `inner`, `inner_op`, `expect`, `expect_super` and `trace_oper_ket`.; - Make `zeros_like` and `identity_like` as dispatched function so the order is kept during operation for dense.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2157:737,test,tests,737,https://qutip.org,https://github.com/qutip/qutip/pull/2157,1,['test'],['tests']
Testability,"**Description**; Apply the changes to solver/result.py that were made previously for mcsolve in #1710. ; Also add other improvement to `Result`. Major changes:; - `Result.__init__` signature changed from `(e_ops, options, _super, oper_state)` to `(e_ops, options, tlist, state0)`.; To know if we can normalize the state, we use the first state's dims instead of asking for information about it.; The first `add` is done in the `__init__` call.; - `MultiTrajResult` and `MultiTrajResultAveraged` are merged into `MultiTrajResult`: both classes were be interchangeable but did not share code, so any modification needed to be done twice.; - Add capacity to compute trajectories until a tolerance is reached. A new feature in #1710 was to allow to compute trajectories until the error bars on the expectation values are under a certain tolerance. The `add` method compute the error bars using jackknife re-sampling and return an estimation of the number of trajectories still needed to reach the desired tolerance. The mapping function can then stop computing trajectories when this reach `0`.; - `McResult` was created: `collapse` and `photocurrent` are an output of `mcsolve` only. So these were removed from `MultiTrajResult` and move into `McResult`. Other changes:; - `MultiTrajResult.steady_state` is a function instead of a property. `steady_state` was the average of the states for all times. With long enough `tlist`, it should converge to the steady state, but the first times are usually far from it. As a function, it offer the possibility to average the last `N` states.; - When `e_ops` is a `Qobj`, `QobjEvo` or `callable`, the expect will not be a list but the array of expect:; `Result(e_ops=[num], ...).expect[0] == Result(e_ops=num, ...).expect`.; I am not too sure about that one, it feel logic but could break some codes. . **Related issues or PRs**; #1710",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1889:1805,log,logic,1805,https://qutip.org,https://github.com/qutip/qutip/pull/1889,1,['log'],['logic']
Testability,**Description**; Apply towncrier.; Also import the change logs entries from the 4.7.X branch.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2343:58,log,logs,58,https://qutip.org,https://github.com/qutip/qutip/pull/2343,1,['log'],['logs']
Testability,"**Description**; As observed by @amitjansc, tidyup did not properly reacted to change to the default tolerance in settings.; Fix this and add tests. **Related issues or PRs**; Close #1829 . **Changelog**; Ensure `tidyup`'s default tolerance is read from settings at each call.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1830:142,test,tests,142,https://qutip.org,https://github.com/qutip/qutip/pull/1830,1,['test'],['tests']
Testability,"**Description**; As proposed in #2420, changed `Qobj.__eq__` to use both `rtol` and `atol`.; The a new low level function is needed to support `rtol`. Also I found that our test did not properly shuffled CSR matrices indices in mathematics tests. There was a bug we missed in `multiply_csr`... **Related issues or PRs**; fix #2420",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2425:173,test,test,173,https://qutip.org,https://github.com/qutip/qutip/pull/2425,2,['test'],"['test', 'tests']"
Testability,"**Description**; Changes expect to cast to real only when attribute real exist. This was a problem for qutip-tensorflow as it returned a `tf.Tensor` that does not have the real attribute. . I did not add any test yet. I thought of adding a test that creates a dummy_specialisation that always returns a dummy class. However, this is was quite involved test. I can include it although I wondered if it was the correct approach to test the code. Also, note that I am not using an `isinstance(out, number.Number)` deliberately. There are examples of class that do implement the `real` and `imag` attribute, such us numpy arrays. Furthermore, I opened an [issue](https://github.com/tensorflow/tensorflow/issues/51463) in TensorFlow to see if they would like to support the `real` and `imag` attributes. . **Changelog**; `expect` can now return arbitrary python objects.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1636:208,test,test,208,https://qutip.org,https://github.com/qutip/qutip/pull/1636,4,['test'],['test']
Testability,"**Description**; Clean-up of the methods `add_vectors` and `plot_vectors`.; - raise ValueError when wrong values on inputs for vectors and colors.; - fixes issue #1916 ; - colors argument was bugged as it was not being taken into account when plotting. I kept the colors argument behaving as it was first intended, although we may want to change it later to match the behavior of points.; - Added tests for new ValueErrors and for the colors argument. **Related issues or PRs**; #1913. **Changelog**; Clean-up of the methods `add_vectors` and `plot_vectors`.; Now add_vectors raises ValueErrors for wrong vectors and colors argument; Fix issue #1916 ; Fix colors argument; Improve test coverage",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1917:397,test,tests,397,https://qutip.org,https://github.com/qutip/qutip/pull/1917,2,['test'],"['test', 'tests']"
Testability,**Description**; Clean-up of the point method in the `Bloch` class. This PR does not add any new feature but it does:; - Improve readability and logic in the point methods for the Bloch class. ; - Extended test coverage of the point methods.; - Now add_points raises error if the arguments `points` or `meth` are wrong. **Changelog**; Clean-up of the point methods in the `Bloch` class.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1909:145,log,logic,145,https://qutip.org,https://github.com/qutip/qutip/pull/1909,2,"['log', 'test']","['logic', 'test']"
Testability,"**Description**; Currently, result objects store a reference to the solver object that created them. I think this is an accident. The options field of a solver is an instance of `_SolverOptions` (see [here](https://github.com/qutip/qutip/blob/454b61529d7bf3c37f74c17925a749fcb046c364/qutip/solver/solver_base.py#L312)), which gets stored in the result [here](https://github.com/qutip/qutip/blob/454b61529d7bf3c37f74c17925a749fcb046c364/qutip/solver/solver_base.py#L147). `_SolverOptions` has a `_feedback` field which is assigned an instance method of the solver and thus keeps a reference to the solver. I noticed this issue when I called `qsave` on a result object and the resulting file was ~100 MB instead of the expected ~100 KB. Setting `result.options._feedback = None` before calling `qsave` reduced the file size by a factor ~2000. But also without pickling, I think that this is a memory leak where solver objects can't be garbage collected. The fix I am submitting here makes results create a copy of the options passed to it, setting `_feedback` to `None` if it exists. I considered converting `_SolverOptions` objects to plain `dict`s in the result class, but that would discard a little bit of information. (Note however that in many places, the `options` passed to the results are plain `dict`s anyway, [for example](https://github.com/qutip/qutip/blob/454b61529d7bf3c37f74c17925a749fcb046c364/qutip/tests/solver/test_results.py#L30).) I also considered making `_feedback` a weak reference, but that would make pickling more complicated. I am not sure what tests to add about this, if any.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2262:1415,test,tests,1415,https://qutip.org,https://github.com/qutip/qutip/pull/2262,2,['test'],['tests']
Testability,**Description**; Cython 0.29 is raise a deprecation warning when used with the newest setuptools. Ignore these warnings in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2288:123,test,tests,123,https://qutip.org,https://github.com/qutip/qutip/pull/2288,1,['test'],['tests']
Testability,"**Description**; Did some cleaning in `semidefinite.py`:. - Renamed functions that should be private: `kron` -> `_kron`, `conj` -> `_conj`, etc.; - Removed `dag`, and `bmat`: never used.; - Moved `qudit_swap` as `swap` in operator.py and added tests.; - Use `functools.lru_cache` instead of re implementing a memoize decorator. This used to be done in `dnorm`, comments were still present, removed.; - Merged `herm` `pos_noherm`, `pos` and `dens` into `_make_constraints`.; - Removed the logger call. ; - black the file. @hodgestar Now only qutip-ctrl use the logger, can we move logging_utils.py there?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2138:244,test,tests,244,https://qutip.org,https://github.com/qutip/qutip/pull/2138,3,"['log', 'test']","['logger', 'tests']"
Testability,"**Description**; Dimension checks was not done for `e_ops` for most solvers, which could result in segfault, (#1776).; Add checks and tests for these checks for `sesolve`, `mesolve`, `mcsolve`, stochastic solvers. ; `brmesolve` and `floquet` are safe. **Related issues or PRs**; fixes #1776. **Changelog**; Add dims check for e_ops in main solvers",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1778:134,test,tests,134,https://qutip.org,https://github.com/qutip/qutip/pull/1778,1,['test'],['tests']
Testability,**Description**; Disable mcsolve tests on windows. **Related issues or PRs**; - See #1202. **Changelog**; Disable mcsolve tests on windows. The mcsolve solver uses multprocessing under the hood to simulate many trajectories at once and this can deadlock on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1855:33,test,tests,33,https://qutip.org,https://github.com/qutip/qutip/pull/1855,2,['test'],['tests']
Testability,"**Description**; Enables use of `mcsolve` and `nm_mcsolve` with mixed initial conditions. Added functions `run_mixed` to the MCSolver and NonMarkovianMCSolver classes. Instead of an initial pure state, these functions take either a density matrix or a list of `(psi_i, p_i)` where `psi_i` are pure initial states and `p_i` are the weights for the average over the initial states. In the latter case, the `ntraj` parameter can be a list specifying the number of trajectories to be used for each initial state. The trajectories automatically obtain correction weights if the fraction of trajectories starting in `psi_i` does not match `p_i`. The functions `mcsolve` and `nm_mcsolve` take either a pure state or a density matrix as the initial state, and call either `run` or `run_mixed` of the solver, respectively. The stochastic solvers also inherit the `run_mixed` functions, but I don't know if there is any use case for that. The most complicated issue here was the combination of a mixed initial state with ""improved sampling"". In this case, run_mixed first runs the no-jump trajectories for all initial states (potentially using `parallel_map` etc) and then runs all other trajectories (using `parallel_map` again, this means that there are two progress bars...). **Todo**; - [X] Please add tests to cover your changes if applicable.; - [x] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [x] Include the changelog in a file named: `doc/changes/<PR number>.<type>`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2437:1296,test,tests,1296,https://qutip.org,https://github.com/qutip/qutip/pull/2437,1,['test'],['tests']
Testability,**Description**; Ensure qutip works with cython 3.0.; - `nogil` must come after `except`.; - Set the options `c_api_binop_methods=True` to keep previous behaviour of operators.; - Have one of the test case use cython 3. There is a bug in cython 3.0.0b2 with `overflowcheck` that makes it unable to compile qutip. I works with 3.0.0.b1 and should work with the next release. See cython#5358. **Related issues or PRs**; close #2117,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2151:196,test,test,196,https://qutip.org,https://github.com/qutip/qutip/pull/2151,1,['test'],['test']
Testability,**Description**; Explicitly define matplotlib backend for Windows tests. **Related issues or PRs**; - #2013 (equivalent change for master); - Cherry pick of 123163f4,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2022:66,test,tests,66,https://qutip.org,https://github.com/qutip/qutip/pull/2022,1,['test'],['tests']
Testability,**Description**; Fallback to `fsesolve` passed unused argument.; Add a test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2225:71,test,test,71,https://qutip.org,https://github.com/qutip/qutip/pull/2225,1,['test'],['test']
Testability,**Description**; Fix 2 other tests failing randomly with low probability:; - `test_spin_q_function_normalized`; - `test_m_ops`. `test_m_ops` had a mistake: `measurement`'s shape is not the same for homodyne and heterodyne.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2348:29,test,tests,29,https://qutip.org,https://github.com/qutip/qutip/pull/2348,1,['test'],['tests']
Testability,**Description**; Fix `Qobj.groundstate` and add a test. . **Related issues or PRs**; Fixes #1937; Thank you @christian512 for finding the bug.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1938:50,test,test,50,https://qutip.org,https://github.com/qutip/qutip/pull/1938,1,['test'],['test']
Testability,"**Description**; Fix bug in `correlation 2op_2t ` when using time-dependent hamiltonians and collapse operators. Also, a test was added in `test_correlation`. **Related issues or PRs**; This PR addresses [#1808](uhttps://github.com/qutip/qutip/issues/1808). It solves the issue. **Changelog**; Fixed error for time-dependent hamiltonians and collapse operators in correlation 2op_2t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1929:121,test,test,121,https://qutip.org,https://github.com/qutip/qutip/pull/1929,1,['test'],['test']
Testability,"**Description**; Fix failing `test_stochastic.test_deprecation_warnings`.; It used to catch the first warnings, the one we tested for, and stop.; An update in pytest, made it continue to catch another warning (step rounded to 0) later and failing. This PR fix the test to raise only the desired warnings.; It add a warnings for when the step in rounded to 0 and a test for that warning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2313:123,test,tested,123,https://qutip.org,https://github.com/qutip/qutip/pull/2313,3,['test'],"['test', 'tested']"
Testability,"**Description**; Fix for the numpy 1.25 release.; - `np.product` deprecated, `np.prod` suggested instead.; - Single elements array can no longer be implicitly converted to scalar: `a[i] = bra @ ket` raise a warning since `bra @ ket` is a one elements array.; - Some tests where removed since they expected one element array to be used as a scalar.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2177:266,test,tests,266,https://qutip.org,https://github.com/qutip/qutip/pull/2177,1,['test'],['tests']
Testability,"**Description**; Fix issues from cython 3.; - Manually set cython.bindings(False) for functions mean to be used with ode.; - Removed use of pxyimport. It only import `c` code and se used to monkeypatch it to compile `c++`. It's internal changed and I rewrote the compilation/importation using inspiration from the `cython.inline_module` PR.; - Added one test using cython 0.29; - Changed the temporary file name construction to have less name collision. **Related issues or PRs**; cython#3145, cython#555",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2202:354,test,test,354,https://qutip.org,https://github.com/qutip/qutip/pull/2202,1,['test'],['test']
Testability,"**Description**; Fix issues with multi- trajectory results:; - When one result had trajectories and the other did not, but both stored the states, the merged result had no states.; - When merging 2 results with default ratio, that ratio would depend on whether the `improved_sampling` options was used. ; - When the no-jump probability was 1, the total weight as measured by sum(res.runs_weight) would not be one.; - A no-jump probability over 1 by numerical error would break the evolution.; - Fix weight application in the `_target_tolerance_end`. (At `abs_weight == 1`, the error should be 0).; - `average_final_state` not being computed properly when runs were stored. This PR is a part of #2455. (1/4?); The absolute weighted trajectories are still mixed with the other. (#2455 fixed the issues by not counting the no-jump evolution are a trajectory.). Tests need #2457 to pass.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2459:858,Test,Tests,858,https://qutip.org,https://github.com/qutip/qutip/pull/2459,1,['Test'],['Tests']
Testability,"**Description**; Fix numpy's version in github actions so test passed.; I cherry-picked the merge commit from #1696, hoping it will make the merge of `master` into `dev.major` easier when done.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1701:58,test,test,58,https://qutip.org,https://github.com/qutip/qutip/pull/1701,1,['test'],['test']
Testability,**Description**; Fix some of the warnings in the tests in order to restore the `-Werror` flag later.; - Remove test for `state_number_qobj`: (function replaced by `basis`.); - scipy.sparse matrix operation replaced by `data.CSR` operation.; - Fix passing generator to `hstack`.; - Add some `filterwarnings` for `mcsolve` fallback to `sesolve` and coefficient parsing warning. **Related issues or PRs**; TODO in #1850. **Changelog**; Fix some warnings in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1882:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/1882,3,['test'],"['test', 'tests']"
Testability,**Description**; Fix the bug in collapse feedback that made it work properly only for the first trajectories. (#2422); Also added a check in the feedback test to ensure the collapse argument is reset for each trajectories.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2424:154,test,test,154,https://qutip.org,https://github.com/qutip/qutip/pull/2424,1,['test'],['test']
Testability,**Description**; Fix the bug in the logic to find the blas info reported in #2053. **Related issues or PRs**; Close #2053,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2072:36,log,logic,36,https://qutip.org,https://github.com/qutip/qutip/pull/2072,1,['log'],['logic']
Testability,"**Description**; Fix warnings and errors coming from matplotlip 3.8 release.; - Close figure in errors tests. Lot of empty figures were created and never closed.; - `plt.contourf` can be used as an artist instead of extracting the artists list from it.; - `color` cannot be a numpy array anymore, convert the arrays to list.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2238:103,test,tests,103,https://qutip.org,https://github.com/qutip/qutip/pull/2238,1,['test'],['tests']
Testability,"**Description**; Fixes #1504 and changes signature of `rand_ket` as [requested](https://github.com/qutip/qutip/issues/1504#issuecomment-823455134). . Added tests to check behavior of `rand_ket` by checking shape of output when - both N and dims are specified, only dims is specified and finally only N is specified. . **Changelog**; Fixes typo in random objects and changes signature of rand_ket",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1509:156,test,tests,156,https://qutip.org,https://github.com/qutip/qutip/pull/1509,1,['test'],['tests']
Testability,"**Description**; For awhile the matplotlib tests have failed intermittently on Windows. Setting the matplotlib backend explicitly before running the tests is said to help, so let's try it. **Related issues or PRs**; - None",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2013:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/2013,2,['test'],['tests']
Testability,"**Description**; For hermician matrices, eigenstates are expected to be orthogonal to each other. . `eigh` used by the dense specialization create such states. But in `eigs_csr`, since we obtain the states in 2 calls of `sp.linalg.eigsh`, the states can overlap. This ensure that the eigen states produced by `eigs_csr` are orthogonal and add a test for it. **Related issues or PRs**; Fix #1851",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1867:345,test,test,345,https://qutip.org,https://github.com/qutip/qutip/pull/1867,1,['test'],['test']
Testability,**Description**; I added the option to specify `rtol` in the tests. The default value is the same as for `numpy.testing.all_close` which was being used 'silently' (tests for the exponential pretty much ignored the absolute tolerance specified by us). I also made the tests more consistent. Now the assertion for scalar outputs also use `rtol` in the same way `numpy.testing.all_close` does. . **Related issues or PRs**; This is useful for qutip/qutip-tensorflow#34 where I plan to add support for complex64. **Changelog**; Aded rtol for specialisation tests.; Changed comparison of scalars to be consistent with `numpy.testing.all_close`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1709:61,test,tests,61,https://qutip.org,https://github.com/qutip/qutip/pull/1709,8,"['assert', 'test']","['assertion', 'testing', 'tests']"
Testability,"**Description**; I created three issue templates and one PR template and tested on my own fork. You can have a look and also test it at https://github.com/BoxiLi/qutip. Try to open a PR or issue there, you should see how the template works. As an example, I opened this PR following the template. The bug report issue will automatically get a label BUG, while the feature request issue will get a label ENH. Free feel to give suggestions. **Related issues or PRs**; This PR addresses #1172 #1108 but does not totally solve the issues. It is a replacement of #1188, and therefore closes #1188. **change log**; Added PR and issue templates",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1198:73,test,tested,73,https://qutip.org,https://github.com/qutip/qutip/pull/1198,3,"['log', 'test']","['log', 'test', 'tested']"
Testability,"**Description**; I optimized the dispatched by only supporting positional arguments for matrix to dispatch on:. The dispatcher was supporting any signature for dispatched functions.; Since each dispatchers is an instance of the `Dispatcher` class and cython does not support patching methods, it had to find the inputs matrix to convert from `__call__(*args, **kwargs)` and re-implemented the `_bind` method to do so.; But all our dispatched functions have the matrix as the first positional argument, by embracing this we get a nice speed up for small matrices. Also when the specialization existed, it would not call it directly, but call a `_constructed_specialisation` that called ti. Adding another unneeded layer to each calls. This was changed so it would call the function directly. For a 2x2 matrix:; | | Before | After |; |------------------|--------|-------|; | data.add_dense | 214ns | 210ns |; | data.add (dense) | 774ns | 388ns |; | data.add[Dense, Dense] | 541ns | 182ns |; | data.add_csr | 429ns | 447ns |; | data.add (csr) | 986ns | 649ns |; | data.add[CSR. CSR] | 744ns | 401ns |; | numpy | 473ns | - |. Sadly it will not improve the benchmarks that much since the `Qobj` operations overhead is quite large:; | | Before | After |; |------------------|--------|-------|; | Qboj + Qobj (dense) | 2430ns | 2070ns |; | Qboj + Qobj (csr) | 3070ns | 2330ns |",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2135:1152,benchmark,benchmarks,1152,https://qutip.org,https://github.com/qutip/qutip/pull/2135,1,['benchmark'],['benchmarks']
Testability,**Description**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests. **Related issues or PRs**; - None. **Changelog**; Ignore deprecationg warnings from SciPy 1.8.0 scipy.sparse.X imports in CI tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1797:92,test,tests,92,https://qutip.org,https://github.com/qutip/qutip/pull/1797,2,['test'],['tests']
Testability,"**Description**; In #1812, I worked on removing the tree structure of option and having options per solver instead of having them together.; This way, we don't need to pass `mcsolve` specific options to `mesolve`, etc. and it makes it simpler to know which options are used by which solver. That PR is getting quite large and went through multiple revision, so I am replacing it with two smaller ones. In this PR, I simplify the options in core. `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. Most of these settings are properties of the object and only computed when being called instead of at import in `__init__.py`. . `CoreOptions` and `CompilationOptions` are now both made from a simpler `QutipOptions` class instead of the `optionsclass` which generated many method at import. Some options have been moved around: `debug`, `log_handler`, `colorblind_safe` and `use_cython` has been moved to `CoreOptions`. Since instance of `CoreOptions` cannot be passed to functions using it. It supports context:; ```; with CoreOptions(auto_tidyup=False):; op = sparse1 + sparse2; ```; and global options change using:; ```; qutip.settings.core['atol'] = 1e-6; ```. `CompilationOptions` instance must be passed to `coefficient` to be used. `configrc` was removed. It was used to store settings in a file that would be read when importing qutip. This was mainly used to store the openmp threshold. Without openmp, we don't have any settings to store between sessions. Some test related to mkl had to be fixed, it seems that they were always skipped before these changes. **Related issues or PRs**; Replace #1812. **Changelog**; Simplify settings and core options.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1924:1662,test,test,1662,https://qutip.org,https://github.com/qutip/qutip/pull/1924,1,['test'],['test']
Testability,"**Description**; In #2120, `countstat` was updated to use `data.solve`.; `countstat` would sometime try to solve a system with singular matrix and has a fallback for it using `try: ... except:`; However, while numpy raises an error when the matrix is singular, `scipy.sparse` raises a warnings, thus the tests only pass because we use the warnings as error flags... Without it, the singular matrix would not be caught and the solution from `countstat` would contain a `NaN` and the tests would fail... - Redirect the warning from scipy sparse and numpy's `LinAlgError` to a `ValueError`to allow easy catching of these case.; - Add the small `1e-15` in `countstat` with `auto_tidyup` turned off.; - Add support for the method `lstsq` and `solve` for `data.solve_csr`. These methods are supported by numpy, jax, tensorflow, scipy.sparse is the exception which use `spsolve` and `lsqr` instead, probably to avoid name collision the the dense version they also have.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2144:304,test,tests,304,https://qutip.org,https://github.com/qutip/qutip/pull/2144,2,['test'],['tests']
Testability,"**Description**; In #2513, I forgot to update `CoreOptions.__setattr__` which was newly created when adding type hints.; All our tests changed options only using context, so it was missed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2518:129,test,tests,129,https://qutip.org,https://github.com/qutip/qutip/pull/2518,1,['test'],['tests']
Testability,"**Description**; In cython code, signals (Keyboard Interrupt) are not automatically checked.; And when checked, if error are not properly passed (`expect *`) the signal can be last. This happened in the Runge Kutta integrator, which did not properly passed errors and only when back to python space at time in `tlist` which can be far apart. The stochastic solver stop on (Keyboard Interrupt), the `except` are not needed since the output is a class. I made it explicit for clarity. Doing a few tests, I saw that the error was often caught in the `Qobj.data` property called by `QobjEvo.matmul`. This means more back and forth between python and cython was done than needed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2169:495,test,tests,495,https://qutip.org,https://github.com/qutip/qutip/pull/2169,1,['test'],['tests']
Testability,"**Description**; In the analytical calculation of the circuit unitaries in `Processor`, the drift Hamiltonian was missing. Add it and add a test accordingly. Also fix a wrong docstring. **Related issues or PRs**; fix #1602 . **Changelog**; Add the missing drift Hamiltonian to the method `run_analytically` of `Processor`",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1603:140,test,test,140,https://qutip.org,https://github.com/qutip/qutip/pull/1603,1,['test'],['test']
Testability,"**Description**; Increase the tolerance of tests that could randomly fail. `testFloquetBasis` would fail 1/2000 of the time. The error has a std of 1.2e-5 , but does not follow a gaussian distribution. Fat tails made 4 std not enough. `test_rand_super` failed once recently in #2919 ( I reran the test). I can't reproduce the failure locally, but it is ran a few hundred of times in each actions, so even a small probability of failure will eventually happen.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2337:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/2337,3,['test'],"['test', 'testFloquetBasis', 'tests']"
Testability,**Description**; Installing `dev.major` is raising warnings because of errors in MANIFEST.in:; ```; ...; reading manifest file 'qutip.egg-info/SOURCES.txt'; reading manifest template 'MANIFEST.in'; warning: no files found matching 'qutip.bib' <=====; warning: no files found matching '*.qasm' under directory 'qutip/tests/qasm_files' <=====; adding license file 'LICENSE.txt'; writing manifest file 'qutip.egg-info/SOURCES.txt'; running build_ext; ...; ```; qutip.bib was renamed to CITATION.bib in #1662 ; qasm files were removed in #1890 and are now only included with qutip-qip. **Changelog**; Update MANIFEST.in to reflect changes in #1662 and #1890,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1926:316,test,tests,316,https://qutip.org,https://github.com/qutip/qutip/pull/1926,1,['test'],['tests']
Testability,"**Description**; Looking at the [historical benchmarks](https://qutip.org/qutip-benchmark/ops/matmul.html), Qobj operations got slower last November, which correspond to when we merged the dimensions PR. This PR is to improve those graph. Usually, when a lot of matrix operations are done, we use the data layer object directly. So the overhead of the Qobj should not be that critical. Adding QobjEvo support to `isbra`, `isket`, etc, slowed them down quite a lot. The import of QobjEvo in the function can easily be slower than the matrix operation. (0.7us for the import which is the same as a 32x32 CSR@ket product.) This is the biggest culprit in the jump in the matmul benchmark graph. I added properties for each `is_type_` to Qobj and QobjEvo. The `Qobj` and `QobjEvo`'s `issuper` where not the same. `QobjEvo` would return `True` for oper-ket, not just super operator, while `Qobj.issuper` would be `True` only for super operator. `QobjEvo` now match `Qobj`. I also changed the check to tell if `Qobj.__matmul__` return a number or Qobj. It is now done looking at the output dimensions. Now that type cannot be overwritten, it is the same check. (Before a `[[1], [1]]` could be a bra, ket, oper, etc., now it's a scalar which return True to isbra, isket and isoper.). For `Qobj.__add__` I could speed it up by doing the Qobj check first. But the extra overhead of `Qobj.__init__` is still there. That said, the graph don't look as bad as the matmul ones and it's probably enough.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2295:44,benchmark,benchmarks,44,https://qutip.org,https://github.com/qutip/qutip/pull/2295,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"**Description**; Lower the dims and length of the `tlist` used by `test_correlation_solver_equivalence[mc]`. Since we added a maximum time for the tests, this one test would fail from time to time. This make the test about 20% faster, which hopefully should be enough to have tests consistently passing. **Changelog**; Faster `test_correlation_solver_equivalence` test.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1885:147,test,tests,147,https://qutip.org,https://github.com/qutip/qutip/pull/1885,5,['test'],"['test', 'tests']"
Testability,"**Description**; Mac tests have been failing for a while because of MKL. ; Set the mac test to run with openblas, skipping failing tests.; Added `rcond=None` to `linalg.lstsq` to remove a warning. I also updated versions of github action as some where raising warnings.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2019:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/2019,3,['test'],"['test', 'tests']"
Testability,"**Description**; Make changes so enable autodiff with `jax` or `tensorflow`:; - In `QobjEvo`, `Elements`, `Coefficient`: `t` is a python object instead of a double as is coefficient output.; This allows to pass jax traced variable or tensorflow's scalar tensor.; - QobjEvo's elements attribute are accessible and new methods `QobjEvo._getstate`, `QobjEvo._restore`.; Used by jax layer to register `QobjEvo` as a pytree.; - Allow subproject to add their own coefficient.; This allow to make a coefficient that can jit well or can be differentiated. `FuncCoefficient` without type restriction could mostly work, but there are some issues with registering them as a pytree or pickling.; - In CoreOptions, an options for the default data type is added:; When not specified, each `Qobj` creation function keeps its default.; ```; with CoreOptions(default_dtype=""jax""):; obj = qeye(N); assert isinstance(obj.data, JaxArray); ```; - Add `QobjEvo.to_list` to restore the list format of the `QobjEvo`. **Related issues or PRs**; Replace #1816",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2015:880,assert,assert,880,https://qutip.org,https://github.com/qutip/qutip/pull/2015,1,['assert'],['assert']
Testability,"**Description**; Make our integrator re-entrant. Scipy'ode is can only have one active instance active for some of the methods. This cuased no issue when the whole integration is done at once as when used in `mesolve`. But with solver as class, this mean using them will have side effect on other solver instances. This PR make the check for concurrent integrator usage before scipy does and force a reset if needed. Switching between system will be inefficient, but will return the expected results. In lsoda's integrator's `_backstep` we are catching a warning before acting on it, but catching the warnings still printed them at the end of tests, bloating the output. In this PR, I also do the check before scipy does so the warning is never raised. **Related issues or PRs**; Point raised in discussion with @hodgestar and @AGaliciaMartinez on #1710 . **Changelog**; Front run some safety check in scipy.ode",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1734:643,test,tests,643,https://qutip.org,https://github.com/qutip/qutip/pull/1734,1,['test'],['tests']
Testability,**Description**; Making 4.5.1 up-to-date for next week release. **Changelog**; Moved test to 3.8; `randint`'s dtype fixed for seed generation; Mac pool use spawn; corrected heterodyne's m_ops (by eliegenois),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1241:85,test,test,85,https://qutip.org,https://github.com/qutip/qutip/pull/1241,1,['test'],['test']
Testability,"**Description**; Making superop module tests compliant with the general pytest scheme. While doing that I found out some left `TODO` points. This took me to change code in the generalized kraus calculation to use SVD decomposition of rectangular matrices accurately.; Still there is a cryptic `TODO` referring to ptrace, the meaning of which I can not guess. Maybe someone with more experience on the module can be of help. **Changelog**; - Converted superop_rep tests to pytest; - Changed code in `generalized_kraus` to allow expansion of rectangular operators.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491:39,test,tests,39,https://qutip.org,https://github.com/qutip/qutip/pull/1491,2,['test'],['tests']
Testability,"**Description**; Many of the operator functions did not set the `isherm` flag.; Not having the flag set would cause issue with `jax.jit`. - Set the `isherm` flag for almost every functions in `operators.py` and `gates.py`. ; - `qdiags` flags are only set when only one diagonal in used.; - I did not touch functions creating operators from other operators ( `commutator`, `squeezing`); - Set the `isunitary` flags for all these also.; - Updated the gates `dtype` parameter to use the `default_dtype` settings.; - Updated the sigma operators to have a `dtype` parameter.; - Added tests for all of these.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2388:579,test,tests,579,https://qutip.org,https://github.com/qutip/qutip/pull/2388,1,['test'],['tests']
Testability,"**Description**; Merge `QobjEvo`, `cQobjEvo`, `QobjEvoFunc` into one cython class. (#1468). This remove the need to have both keep 2 objects (`QobjEvo`, `cQobjEvo`) by solver and the need to support 3 classes. It support any format for time-dependant system accepted by `mesolve`.; It keeps mostly the same interface as the present `QobjEvo`, the biggest changes being:; - `QobjEvo.mul_vec`, `QobjEvo.solver_set_args`, `QobjEvo._cdc` removed.; - `QobjEvo.mul` renamed to `QobjEvo.matmul` and only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `QobjEvo.expect` only accept `Qobj` input (from `Qobj`, `Data`, `np.array`); - `cQobjEvo.matmul_dense` and `cQobjEvo.expect_dense` removed, use the `_data` version instead, they have optimization for `Dense` included.; - Some of `QobjEvo`'s attributes are no longer accessible: `cte`, `ops`. Instead of `A.cte.dims`, simply use `A.dims`. Same for `shape`, `issuper` and `isoper`.; - `shift` renamed to `_insert_time_shift`. It is meant for use in correlation only so I renamed to a longer name. . Internally, some of the logic have been moved to an `Element` class (pair `Qobj`, `Coefficient`) to support function format.; `matmul` is there to support the bloch redfield tensor. Function based `QobjEvo` reuse calls to the function: ; With `cdc = QobjEvo(f).dag() * QobjEvo(f)`, `cdc(t)` will call `f` only once. This remove the need of special code of `QobjEvoFunc` in superoperator. . ##### Leftover issues; The class keep a copy of `args` only for the `__call__(self, t, args)` method, since the coefficient have their own copy of `args`. It could be removed if we remove that functionality.; While coefficient with different `args` can be mixed, function cannot.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481:1075,log,logic,1075,https://qutip.org,https://github.com/qutip/qutip/pull/1481,1,['log'],['logic']
Testability,**Description**; Minor changes to correct invalid string literals and close files opened by `hardware_info.py`. This removes warnings that currently appear when importing quTiP with non-standard warnings settings (for instance when testing a code that import quTiP). **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed invalid string literals and proporly close opened files.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380:232,test,testing,232,https://qutip.org,https://github.com/qutip/qutip/pull/1380,2,"['log', 'test']","['log', 'testing']"
Testability,"**Description**; Move `rcsolve` ot legacy.; `rcsolve` does not have any tests, has little documentation and can fail for not obvious reasons...; It also seems that most groups create their own flavour of the solver instead of using the one we provide.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2158:72,test,tests,72,https://qutip.org,https://github.com/qutip/qutip/pull/2158,1,['test'],['tests']
Testability,"**Description**; New sparse type: `Dia`.; Optimal for diagonal operators such as `qeye`, `destroy`. But it's quite bad for vectors ('bra', 'ket'). For a tri-diagonal matrix, it's about 25% faster than `CSR` for `oper @ dense`.; It can do an very efficient `dense @ dia`, while `CSR` is only efficient `csr @ dense`, not the opposite. . This include most specializations, change the default in operators, add tests. The implementation mostly match the one in scipy. ; The matrices are stored in two arrays, the diagonals offsets `shape=num_offsets` and the data `shape=[num_offsets, ncols]`. The diagonals are lined so that for each entry, the column in the data array match the matrix column.; The main differences with scipy's implementation are fixed dtype and the shape of the data array being fixed. (scipy accept longer diagonals and ignore entries outside the matrix.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2196:408,test,tests,408,https://qutip.org,https://github.com/qutip/qutip/pull/2196,1,['test'],['tests']
Testability,"**Description**; Not sure why, but after merging, #2457, the tests failed.; This fix tests (at least in my fork...).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2463:61,test,tests,61,https://qutip.org,https://github.com/qutip/qutip/pull/2463,2,['test'],['tests']
Testability,"**Description**; On mac, with OpenBlas, `eigh` can cause segmentation fault, see #1197. For 4.5.1, we simply skipped the tests causing problems ( #1257). This replace the calls of `numpy.linalg.eigh` to `numpy.linalg.eig`, and lapack calls of `ZHEEVR` to `ZGEEV` when at risk of segfault. This will result in slower `Qobj.eigenstates` and `brmesolve`. . Tests where adapted, the issues were the phase of the eigenvectors and the lower numerical precision of `eig`. While the flag to use `eig` instead of `eigh` is `qutip.settings.eigh_unsafe`, it must be set before importing `qutip.sparse` to have any effect. Thus it is not a true settings, (like `has_openmp`). **Changelog**; Replace calls of `eigh` to `eig` when at risk of segfault.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1288:121,test,tests,121,https://qutip.org,https://github.com/qutip/qutip/pull/1288,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"**Description**; Over the holidays a new versions of cython and setuptools came out resulting in pyximport raising a deprecation warning. For v4.7, I just set it to ignore the warning in tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2287:187,test,tests,187,https://qutip.org,https://github.com/qutip/qutip/pull/2287,1,['test'],['tests']
Testability,"**Description**; Qobj support Dense representation, but there are still no easy way to create dense matrix. So this add a keyword only `dtype` options to most function of qutip.states, qutip.operators and qutip.random_object. To make them, I made 2 new dispatched function: `diag` and `one_element`. `diag` has the same use than @jakelishman #1419 function, but I fall back on scipy quickly... So I will switch to his version as soon as it is merged. . To make the `dtype` more user friendly than seeking the type in `qutip.core.data`, I changed `to` to accept the string representation of the name (case insensitive). Only `to` accept string, `dispatch` is not really user facing so there is no reason to touch it. I also updated the `create` to use `add_creators` and make `Dense` out of `numpy array`. Jake, I am not sure of what were your plans for this. So if I am messing your plans, please tell me. . Tests are not all created yet and it will create a conflict with #1419 and #1407. **Related issues or PRs**; #1419",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420:908,Test,Tests,908,https://qutip.org,https://github.com/qutip/qutip/pull/1420,1,['Test'],['Tests']
Testability,**Description**; Re-enable test errors on ImportWarnings. These were disabled in QuTiP 4 because it used pyximport. QuTiP 5 no longer uses pyximport. **Related issues or PRs**; - None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2083:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/pull/2083,1,['test'],['test']
Testability,"**Description**; Re-implement entropy_relative. This function was implemented in March 2012, but then removed a month later. After some digging, it appears that the reason the function was removed is that it assumed the eigenvectors of the density matrices were identical (and in the same order). After some reading of Nielsen & Chuang, I have re-implemented it to address the issue. **Still todo**; - [x] Update the documentation.; - [ ] Add an example to an example notebook.; - [x] Add some tests for specific cases where we know what the answer should be.; - [x] Stretch goal: Vectorize the calculation of P_ij and the rest of the loop as much as we can (but let's make sure the answers are correct first). **Changelog**; Re-implement entropy_relative which returns the quantum relative entropy between two density matrices.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1553:494,test,tests,494,https://qutip.org,https://github.com/qutip/qutip/pull/1553,1,['test'],['tests']
Testability,**Description**; Remove Windows test suite warning suppression. **Related issues or PRs**; - None,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2119:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/2119,1,['test'],['test']
Testability,"**Description**; Remove coercion of coefficient values to complex in `Coefficient` and `QobjEvo` allowing to use `tf.Variable` as coefficient to enable auto-differentiation to be used in solver.; It is build on top of #1644 since it include integration method using our data object. Coefficient creation is no longer hard coded, but use a dict of `type: callable`, each type is associated to a function that create a coefficient, allowing to add support for other coefficient types per project such as qutip-tensorflow. Also, function based coefficient no longer cast to complex, but the check in the coefficient function is still there. Since other type are not supported without new data layer, this feels like a proper balance. `QobjEvo` cython casting of coefficient's value to complex as been removing.; No tests are added since other types of coefficient are not supported by data layer.; But here is an example of auto differentiation with this branch:. ```; import qutip as qt; import numpy as np; import qutip_tensorflow as qtf; import tensorflow as tf; from qutip.core.coefficient import Coefficient, coefficient_builders; from qutip.solver.sesolve import SeSolver. # Create a new Coefficient for tf.Variable, ; # This should be added to qutip-tensorflow,; # Here I use a step interpolation.; class TfVarArgsCoefficient(Coefficient):; def __init__(self, variable, tlist, **_):; self.variable = variable; self._tlist = tlist; ; def __call__(self, t, _args=None, **_):; if t <= self._tlist[0]:; return self.variable[0]; if t >= self._tlist[-1]:; return self.variable[-1]; idx = np.searchsorted(self._tlist, t, 'right') - 1; return self.variable[idx]. coefficient_builders[tf.Variable] = TfVarArgsCoefficient. # Create a Coefficient as normal.; variable = tf.Variable(np.linspace(0.1,0.9,6), dtype=tf.complex128); coeff1 = qt.coefficient(variable, tlist=np.linspace(0,0.5,6)). N = 5; a = qt.destroy(N, dtype='tftensor'); num = qt.num(N, dtype='tftensor'); H = qt.qeye(N, dtype='tftensor') + qt.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1816:812,test,tests,812,https://qutip.org,https://github.com/qutip/qutip/pull/1816,1,['test'],['tests']
Testability,"**Description**; Remove tests using python 3.6 and 3.7 and openmp tests.; SInce we need to add a new job for each python version, we also need to remove older jobs so the whole test suite don't get bloated. Numpy has a suggestion for version support in scientific project in [NEP29](https://numpy.org/neps/nep-0029-deprecation_policy.html) which we can follow to decide when we can remove some tests and if it's fine to use newer feature forcing us to improve our requirements. I added a note in the contributing and release guides to refer to this when adding a change using feature of newer version of package we use.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1941,4,['test'],"['test', 'tests']"
Testability,"**Description**; Remove the QIP submodule that has been migrated to `qutip/qutip-qip`. Most files were simply deleted, but there are a few non trivial parts:; - The gates used in tests were added to operators.py, all others were removed. The signature was changed: the `target` parameter was removed and `dtype` keywords added to match other operators. This means that there will be two version of `cnot` etc. available. . - `qutip.enntropy.entangling_power` was also removed. While it was not strictly in the qip module, it is meant to be used for 2 qubits gates, so it felt more natural to be included there. - The target qubits options for measurement was removed. qip has it's own more specialized `Measurement` class, which I guess is the reference for such case. But we could make it stronger so that it can target various kind of subsystems, such as one site on a lattice or one of harmonic oscillator coupled to others, etc. Bonus: The `-Werror` for pytest was restored. **Related issues or PRs**; Checklist item in #1850. **Changelog**; Remove the qip submodule.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890:179,test,tests,179,https://qutip.org,https://github.com/qutip/qutip/pull/1890,1,['test'],['tests']
Testability,"**Description**; Rewrite the main solvers with a more object approach.; The `Solver` class manage inputs and create the system (-i*H, liouvillian, ...).; The `Evolver` (#1409 do the evolution for each time in tlist.; The computation of `e_ops` and storing of states is done by the `Result` class. Updated function are moved from qutip/solve to qutip/solver. - The [..]solve function are matched with a [..]Solver class.; ```; solver = MeSolver(H, c_ops, times=..., options=..., args=..., e_ops=...); solver.run(rho, tlist). solver.start(rho, t0); solver.step(t1); ```; This remove the `rhs_reuse` options and come with a step function. The step function always return the state (it does not compute e_ops). . - Dynamic_args / feedback is no longer merged with normal args but entered in a `feedback_args` solver argument.; The input format is `feedback_args = {key: ""Qobj""}` will have args[key] be updated with the state as a Qobj at each system call.; ( no longer the magic keyword method). - With the class interface, array coefficient times are given independently from the `tlist`. - `mcsolve` result include the photocurrent, removing the need of `photocurrent_sesolve`.; - `MeMcSolver` (in progress) could replace `photocurrent_mesolve`. It does the save computation using Monte-Carlo algorithm.; - `mcsolve` code that compute collapse was moved from cython to python. I did not benchmark the effect on the speed, be expect it to be small and the overall evolution to be faster with improvement in the map function (do not need to store every states before computing average) and `Evolver` (better backstep for adam method).; ; - `SteadyState` use a `SteadyStateOptions` instead of a bunch of kwargs. **Related issues or PRs**; Build from #1409.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1455:1385,benchmark,benchmark,1385,https://qutip.org,https://github.com/qutip/qutip/pull/1455,1,['benchmark'],['benchmark']
Testability,**Description**; Run mac test with openblas instead of MKL to skip the tests failing with pardiso. Update github action version since they are raising deprecation warning. **Related issues or PRs**; #2019,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2020:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/pull/2020,2,['test'],"['test', 'tests']"
Testability,"**Description**; Scipy 1.12 rename a variable in linalg solver: `tol` to `rtol` and raise a deprecation warning with the old name.; Scipy 1.11 does not accept `rtol`. This parameter is passed thought `**kwargs` in steadystate and is not used elsewhere, so only the test need to be updated.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2301:265,test,test,265,https://qutip.org,https://github.com/qutip/qutip/pull/2301,1,['test'],['test']
Testability,"**Description**; Scipy 1.13 change the way sparse operations are done.; Some changes to scipy fix most issues, but I get some segfault with the sparse eigen solver and I am unable to run all tests.; 1.13 work with v5 so I changed the requirements to exclude that version in v4.7.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2383:191,test,tests,191,https://qutip.org,https://github.com/qutip/qutip/pull/2383,1,['test'],['tests']
Testability,"**Description**; Set minimum python version to 3.9 for v5. While we don't use many feature that prevent previous version, we don't test them and pip install does not work because of conflict with `oldest-supported-numpy` (see #2412). Improve `installation.rst`, it still listed requirement for v4, openmp support and instruction on installing v5's pre-releases. [Exclude numpy 2 from requirements.](https://numpy.org/devdocs/dev/depending_on_numpy.html#numpy-2-0-specific-advice) We don't know if we are compatible yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2413:131,test,test,131,https://qutip.org,https://github.com/qutip/qutip/pull/2413,1,['test'],['test']
Testability,**Description**; Setting eigh_unsafe on sipy<1.5 and MKL. **Related issues or PRs**; #1495. **Changelog**; - Changed init to set eigh not safe in case scipy<1.5 and mkl backend; - Added the correct pytest breaking test from issue #1491 to check the solution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498:214,test,test,214,https://qutip.org,https://github.com/qutip/qutip/pull/1498,1,['test'],['test']
Testability,"**Description**; Since merging #2497, mkl tests on windows fails from segfault.; I am not sure of the source of the error:; Since the library was not found before the PR, the bug can have been there for a long time, but the tests passed in #2497.; Just settings mkl to verbose is enough for the tests to passes... I don't think relying on the verbose options is a good idea so I made it unable to find mkl on windows for this PR. We will need to find a more reliable way to use it, `ctypes` does not look at the header file so it guess the types from our call. Maybe some version of mkl are 32 bit and other 64 bit and we are not adapting. [pydiso](https://github.com/simpeg/pydiso) looks promising.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2529:42,test,tests,42,https://qutip.org,https://github.com/qutip/qutip/pull/2529,3,['test'],['tests']
Testability,"**Description**; Since the code is checking `or offset ? 0`, the method is effectively being ignored in most cases. Pretty sure that's not intended behavior. Changing to correct behavior in `coherent` makes `coherent_dm` pretty trivial. In theory, this introduces nothing that isn't explicitly documented. However, since there don't appear to be any tests that were failing because of this, I'll try to add some. **Changelog**; Fixed method name check in `coherent` and `coherent_dm`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1469:350,test,tests,350,https://qutip.org,https://github.com/qutip/qutip/pull/1469,1,['test'],['tests']
Testability,"**Description**; Since yesterday, our tests hangs for both `master` and `dev.major` and never finish. It seen only a few tests are affected.; I am adding a timeout so the tests that hangs result in a localized error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1787:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1787,3,['test'],['tests']
Testability,"**Description**; Speed up and simplify `state_number_enumerate`, `state_number_index`, `state_index_number`, `state_number_qobj`, and `enr_state_dictionaries`. I've changed quite a few functions in states.py, but all the changes are small. It seemed easier to combine this into a single pull request instead of splitting it up into many smaller ones (but this could be done). The changes in more detail:; - `state_number_enumerate` and `state_index_number` now always return tuples. Before, `state_number_enumerate` returned arrays for `excitations is None` and tuples otherwise, and `state_index_number` returned a list. For `excitations is None`, I realized that a simple call to `itertools.product` is enough, and is about 20x faster for a (relatively big) test case. It would be trivial to keep returning arrays instead of tuples here as before, but this slows the code down (quite significantly, in fact) and, in any case, returning arrays or tuples depending on whether `excitations` is set seems like an inconsistent interface, so I decided to make it consistent (and faster). I checked that the uses in the code base should not be affected. The algorithm used when the number of excitations is restricted is a slightly more elegant version of the one from my previous pull request (#1594), and is faster by another factor of 5 or more for the ""big"" test cases I looked at. ~~It is still recursive, but quite fast, and I did not find an elegant non-recursive algorithm.~~ I came up with an even faster non-recursive algorithm after all. It's arguably a bit less elegant, but I think still readable, and another 50% or so faster than the previous one (see the second commit below).; - `enr_state_dictionaries` now returns a dictionary and a list instead of two dictionaries. Before, `idx2state` was a dictionary with integer keys from 0 to nstates-1, which behaves essentially like a list. However, before Python 3.7, iteration order was not guaranteed to be insertion order (i.e., iterating ove",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1604:760,test,test,760,https://qutip.org,https://github.com/qutip/qutip/pull/1604,1,['test'],['test']
Testability,"**Description**; Test for the bloch sphere require matplotlib and ipython to pass, but these were not installed with `qutip[tests]`.; These tests are now skipped when these packages are missing instead of failing. Also add `loky` and `tqdm` to extra require as they can now be used in solvers.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2095:17,Test,Test,17,https://qutip.org,https://github.com/qutip/qutip/pull/2095,3,"['Test', 'test']","['Test', 'tests']"
Testability,**Description**; Testing the email sending github action.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2244:17,Test,Testing,17,https://qutip.org,https://github.com/qutip/qutip/pull/2244,1,['Test'],['Testing']
Testability,"**Description**; Tests are using numpy's svd but the dispatched function is using scipy's svd.; They use different algorithms and can give different result causing error in the tests. With this PR, scipy is used in test also.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2239:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/2239,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,**Description**; Tests for functions in `random_object.py` are split between `test_rand` and `test_random`. I merged those 2 files and rewrote some using `parametrize`.; The test themselves are mostly the same with some additions:; - `rank_ket` output's norm is checked .; - Given eigenvalue tests actually check the eigenvalues.; - `rand_herm` test for sparse and dense cases since the called function differ. Fix a bug in `rand_herm` with `pos_def=True` and `density>0.5`. **Changelog**; Improve random object tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1562:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1562,5,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,**Description**; Tests in `simdiag` sometime fail with one or two values over the tolerance. This cause automated tests to fail for reason unrelated to the PR. This add the flaky mark to rerun these and increase some tolerances.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2067:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/2067,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"**Description**; Tests related to krylovsolve take a lot of time, close to 1/3 of the whole test suite.; I kept all the tests, but reduced the size of the systems used.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1861:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1861,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,**Description**; Tests would fail to run if `matplotlib` or `ipython` were not installed.; This add `pytest.importskip` to skip instead or failing the the packages are missing.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2311:17,Test,Tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/2311,1,['Test'],['Tests']
Testability,"**Description**; The PR provides a way to characterize thermal environments for open quantum systems, The user can now construct Thermal environments by specifying The spectral density, or the correlation function , or the power spectrum and the Temperature. Once specified the other two are calculated. We hope once integrated with the solvers, this PR will allow for a more systematic way of comparing different approaches, and easier simulations by quickly obtaining the quantities needed from the bath objects. The PR also provides exponential approximations of the environment via a fit of the correlation function, and a fit of the spectral density in terms of underdamped modes, the PR allows for incorporation of more approximation methods, which will be added in the future. . **Related issues or PRs**; This PR is a generalization of #2260 . Special Thanks to @pmenczel for improving the code significantly and valuable suggestions!. **TODO:**. I think perhaps those are better finished once we have decided that this structure for the environments is the way to go. However, the most important missing bits are . - [x] Finish documentation in the User's guide; - [x] Add relevant tests for the HEOM solver using the enviroment class; - [ ] Finish tests for environment.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2534:1191,test,tests,1191,https://qutip.org,https://github.com/qutip/qutip/pull/2534,2,['test'],['tests']
Testability,"**Description**; The `4.x` documentation suggests that the user test the installation by; ```python; import qutip.testing; qutip.testing.run(); ```; and when something fails (e.g. due to missing `matplotlib`), the obvious reaction would be to re-execute `qutip.testing.run()`. However, this does not currently work, because passing a `zip` generator to `pytest.parametrize` limits that test case to be executed only once. This PR does nothing but allowing tests to be executed multiple times in one Python session. P.S. I would recommend backporting the new shell testing command `pytest qutip/qutip/tests` to the `4.x` documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2538:64,test,test,64,https://qutip.org,https://github.com/qutip/qutip/pull/2538,8,['test'],"['test', 'testing', 'tests']"
Testability,"**Description**; The `dataclass` inspired tree structure options we have in `dev.major` is more complex than needed.; The tree structure allow to split `mcsolve` specific options from the other, but they are still present in those passed to `sesolve` etc. This redo options using normal class inheritance. ; `install` options are put back into `settings`, these are most options that the user cannot change, such as the presence of mkl or running in `ipython`. The exceptions is the location of the .qutip folder which is a setting but can be changed. The base for the options is a dict with fixed keys and default values. As before, options can be set as keywork at initialization or when setting items. The default can be changed using context (mainly for tests) or setting items at the class:. ```; SolverOptions['method`] = 'bdf' # Set default method ; with SolverOptions(atol=1e-5):; opt = SolverOptions(store_state=True); opt['progress_bar'] = False; print(opt). progress_bar : False; store_state : True; method : 'bdf'; atol : 1e-5; ...; ```; The option can also be initialized from a dict or another options instance, it will make a copy. I added the capacity to add a safety check when setting an options. It is only used for `use_cython` which will error when trying to set it to `True` without cython installed. Otherwise, it will fail when trying to use the options. *Solver's options*; Each solver has it's option class (SeOptions, MeOptions, etc.) with only needed keys.This somewhat feel overkill since they are all the some for now, until mcsolve is merged. Each integrator also has an associated options and the solver options contain an integrator options. Conversion between options type will raise an error. When creating a solver options, it read the `method` key and setup a matching integrator options. Thus only the keys used by the solver or integrator are defined in the instance. This allow adding new integrator with their own options without adding complexity to the solve",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1812:758,test,tests,758,https://qutip.org,https://github.com/qutip/qutip/pull/1812,1,['test'],['tests']
Testability,"**Description**; The `purity` method in `qobj` is supposed to give purity no more than 1. However, at the moment, it can give values greater than 1 as well because it does not verify if `Qobj` is a valid quantum state. Minimal code to reproduce the error would be: . ```; not_dm = Qobj(np.random.rand(5,5)); not_dm.purity(); ```; To solve this, I have modified `purity()` primarily by adding `check_isdensity()` (with accompanying test method in `tests`) . **Changelog** ; Added density matrix check for purity calculation",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232:431,test,test,431,https://qutip.org,https://github.com/qutip/qutip/pull/1232,2,['test'],"['test', 'tests']"
Testability,"**Description**; The check that the initial state was already normalised for normalising output would branch over values, which breaks `jax.jit` support... Moved the option check first. Also changed the `isoper` check to filter out rectangular operator.; Rectangular state in solver are tolerated, but we don't have tests for it. I did not add any here, but we should . **Related issues or PRs**; qutip/qutip-jax#49 qutip/qutip-tutorials#100",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2448:316,test,tests,316,https://qutip.org,https://github.com/qutip/qutip/pull/2448,1,['test'],['tests']
Testability,"**Description**; The error for too large minimum step was not raised.; The error therefore came later in scipy code and was hard to understand. ; Found from https://groups.google.com/g/qutip/c/NUcKnAwpx30/m/7IKDqbNOAgA; Fix the error and add a test for it. Also added some sanity check on `min_step` and `max_step`, which could create infinite loop if `min_step = 0` or `min_step > max_step`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2402:244,test,test,244,https://qutip.org,https://github.com/qutip/qutip/pull/2402,1,['test'],['test']
Testability,**Description**; The function mesolve was not including the complex part of the expectation value when the initial state was a not Hermitian. This led to an error in `correlation_2op_1t()` which uses an initial state that is not Hermitian to compute the correlation.; I also fixed an error in the documentation where `tlist` was referenced instead of `taulist` (`tlist` is not an argument in `correlation_2op_1t()`) and included a test for `correlation_2op_1t()`. **Related issues or PRs**; Fix #1460. **Changelog**; Fixed error where complex expectation value for non Hermitian initial state was not being included in results when using mesolve.; Fix doxumentation error in `correlation_2op_1t()`.; Added test for `correlation_2op_1t()`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478:431,test,test,431,https://qutip.org,https://github.com/qutip/qutip/pull/1478,2,['test'],['test']
Testability,"**Description**; The internal processing of noise is simplified. instead of adding Pulse object to the pulse list, Noisy dynamics are added to a dummy pulse object called systematic noise. Update the test. The test was not correctly collected by `pytest`, because the name was `Test` with capital T. **Changelog**; Improve noise processing in qutip.qip",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1445:200,test,test,200,https://qutip.org,https://github.com/qutip/qutip/pull/1445,3,"['Test', 'test']","['Test', 'test']"
Testability,"**Description**; The mkl finding was sometime missing the library even when available.; Sometime the library can has a version number in the file name:; `libmkl_rt.so.2`, `mkl_rt.2.dll`, with or without a symbolic link to the version less name.; Also it ouly look for it if it's found in numpy's config, but the module mkl is available an could be installed even if numpy does not link to it. Our use using ctypes does not require numpy to be using it to work. So I changed the lookup function to look for the library without checking is numpy uses it. I also added a new setting, `settings.mkl_lib_location`, which is not read only and allow users to enter the path to their mkl implementation. We only look inside the python library path, this would allow to use libraries installed at the OS level. Also fixed a bug in mkl spsolve with scipy 1.14 that was missed since mkl tests were skipped. **Related issues or PRs**; fix #2496",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2497:876,test,tests,876,https://qutip.org,https://github.com/qutip/qutip/pull/2497,1,['test'],['tests']
Testability,"**Description**; The orbital function had some errors in it. Here, I replaced the manual calculation of the spherical harmonics, with the implementation provided by SciPy. Additionally, I provide some tests to the function. **Related issues or PRs**; fixes #1839 . **Changelog**; Fixed errors in orbital functions",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1844:201,test,tests,201,https://qutip.org,https://github.com/qutip/qutip/pull/1844,1,['test'],['tests']
Testability,"**Description**; The permutation function used in v5 is reversed from v4, (it does `out[perm] = in`). This was not taken into account when updating the steadystates permutations functions.; Fixed and added tests. **Related issues or PRs**; fix #2443",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2446:206,test,tests,206,https://qutip.org,https://github.com/qutip/qutip/pull/2446,1,['test'],['tests']
Testability,**Description**; The sparse svd test is causing segfault in a setup that I can't reproduce.; The function `svd_csr` was never used as it could not work as a `svd_dense` replacement: `_data.svd(csr)` would use `svd_dense`. So I simply removed the function.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2361:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/2361,1,['test'],['test']
Testability,"**Description**; The test `test_random_iscptp` would sometime randomly fail.; This increase the tolerance of the test, lowering the fail rate from 0.35% to less than 1 in 10000 tries.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2147:21,test,test,21,https://qutip.org,https://github.com/qutip/qutip/pull/2147,2,['test'],['test']
Testability,**Description**; The test for the new method `run_from_experiment` has a time step too long for the euler method. This would cause fail once a few hundreds time as in https://github.com/qutip/qutip/actions/runs/8979789558/job/24662362047.; Reducing the system size with smaller steps makes the test more consistent (no failure in 20000 tries.). Also reduced `test_feedback` step size to improve that test consistency.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2419:21,test,test,21,https://qutip.org,https://github.com/qutip/qutip/pull/2419,3,['test'],['test']
Testability,"**Description**; There are presently 8 variations of `CQobjEvo`. There are `Cte` and `Td` variants, Dense and csr sparse and serial vs openmp versions. Adding a feature, (ex. AHS support) result in the need to modify all of them and QobjEvoFunc and AHS PRs will add new one. So as a first step, I am merging them the ones presently available.; Cte (no coefficient) are now limit case of Td (time-dependant). omp ones have been removed in favor of a `spmvpy` variant that switch between the serial and omp version at compilation. . Also reworked the compilation of `QobjEvo`:; - Simpler with only 3 variants instead of 8.; - Compilation of the coefficient and object are separated. (`H *= -1j` does not force recompiling the coefficients.); - But have the side effect of making temp file cleanup harder. File are erased at python close instead of object deletion.; - Moved the location of temp file to ~/.qutip/temp for now, but does this work on windows?; - Auto-cleanup on importing qutip, for files older than 7 days for now. But should be set by user, the temp file location also. Other to-do:; Dense versions of CQobjEvo could be more optimized and is not parallel. One option would be to use blas and hope the user's blas is parallel. (probably other PR). ps. Running tests for now. Do not merge.; **Changelog**; Cleaned CObjEvo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1231:1273,test,tests,1273,https://qutip.org,https://github.com/qutip/qutip/pull/1231,1,['test'],['tests']
Testability,"**Description**; There are some edge cases with the eigen solver that are bugged in `dev.major` that tests missed:; - `_eigs_dense` : It would not compute the proper eigen states when not all eigen states are required and the matrix is non-Hermitian.; - `_eigs_csr` : When all but one eigen values / vectors are needed: the smallest eigen values would always be removed, even when `sort='high'`. Also one element of the eigen vector matrix was removed, not one column. I rewrote the tests with pytest to catch more cases. **Changelog**; Fix some edges cases in `eigs`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1820:101,test,tests,101,https://qutip.org,https://github.com/qutip/qutip/pull/1820,2,['test'],['tests']
Testability,**Description**; There was a logic error in the matmul's `out` shape check making the check too lenient.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2349:29,log,logic,29,https://qutip.org,https://github.com/qutip/qutip/pull/2349,1,['log'],['logic']
Testability,"**Description**; This PR adds backend support to `metrics.py`. This change will help us to change backend to `jax.numpy`. **Related issues or PRs**; A PR would be created to add the changes to `qutip-jax`. **Note**; `'fidelity', 'tracedist', 'bures_dist', 'bures_angle', 'hellinger_dist', 'hilbert_dist'` are tested and working with `jit`.; `'average_gate_fidelity', 'process_fidelity', 'unitarity', 'dnorm'` are not working as of now. I am finding some issues with testing them. Only `trace_dist` and `hilbert_dist` are working with `grad` as there is no support for `sqrtm` in grad.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2461:309,test,tested,309,https://qutip.org,https://github.com/qutip/qutip/pull/2461,2,['test'],"['tested', 'testing']"
Testability,"**Description**; This PR fixed #2535 by adding a check for which matplotlib version is installed, similar to the custom `_axes3D`. Tested with `matplotlib==3.9.2` and `matplotlib==3.8.3`. **Related issues or PRs**; Fix for #2535",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2544:131,Test,Tested,131,https://qutip.org,https://github.com/qutip/qutip/pull/2544,1,['Test'],['Tested']
Testability,"**Description**; This PR implements and tests a new version of `process_fidelity`.; The new version follows the definition in Gilchrist et al., Physical Review A 71, 062310 (2005). **Related issues or PRs**; Discussion at https://github.com/qutip/qutip/issues/1703.; I previously submitted a similar PR at https://github.com/qutip/qutip/pull/1708, targeting `master`. ; This PR targets `dev.major` rather than `master` because existing functionality is changed, and contains improvements following @Ericgig 's suggestions. I have also adapted the tests to match the style of the tests in `dev.major`. Addresses part 2 of https://github.com/qutip/qutip/issues/1703. **Changelog**; Implement and test a new version of `process_fidelity` (https://github.com/qutip/qutip/issues/1703)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1712:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/1712,4,['test'],"['test', 'tests']"
Testability,"**Description**; This add documentation of the new BoFiN-based HEOM solver added in #1601. **Todo**; - [x] Rework the documentation structure.; - [x] Update the introduction; - [x] Update the bosonic example; - [x] Update the fermionic example; - [x] Add a short history of the HEOM implementation; - [x] Mention that the old HEOM implementation is available as `dl_heom`; - [x] Add a link to the HEOM notebooks.; - [x] Update `.run(..., ado_init=True)` to accept an instance of `HierarchyADOsState` since this is what `.run(..., ado_return=True)` returns. Add tests for `ado_init=True`. **Related PRs**; - #1601; - #1726. **Changelog**; Add and rework the HEOM documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1724:561,test,tests,561,https://qutip.org,https://github.com/qutip/qutip/pull/1724,1,['test'],['tests']
Testability,"**Description**; This adds a few more tests to the specialisations. I also found a Bug in expm and changed `TypeError` to `ValueError`. - Expm: ; - Added tests for its specialisations.; - There was a _bug_ in expm where if the matrix was csr and diagonal, zero values where not being exponentiated as they did not appear in scipy's data attribute. This case is now handled properly with the same scaling in resources (O(N) where N is the non-cero diagonal elements in the matrix).; - Incorrect shape now raises ValueError.; ; - UnaryOpMixin: ; - It did not check for bad shapes. It now does have a function that checks for them (this avoids code duplication in `trace`, `expm` and some others). ; - As a result of this change a hidden bug emerged: even though `TestProject` had a non-empty `bad_shapes` attribute, it was not doing anything as `UnaryOpMixin` did not generate tests for bad shapes. It now does. - Project:; - Changed `TypeError` to `ValueError`.; - Removed redundant `TestProject`. - Pow:; - Added the case where `n=0` as it is a special case. **Changelog**; `project` specialisations now return `ValueError` when matrix has not valid shapes.; Removed redundant `TestProject`.; Added special test case for Pow (n=0).; `UnaryOpMixin` now has test_incorrect_shapes (by default it does not have any bad shapes); Added tests for `expm` specialisations.; Fixed bug where diagonal `CSR` matrix was not exponentiating zero values in the diagonal.; `expm` specialisations now raises `ValueError` when matrix is not square. _Edit: Added ""Removed redundant `TestProject`""_; _Edit2: Added changelog_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1630:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/1630,9,"['Test', 'test']","['TestProject', 'test', 'tests']"
Testability,"**Description**; This is a refactor of the changes from https://github.com/qutip/qutip/pull/1712. Previously, the logic which extracts the dimensions of the input and output Hilbert spaces of the involved quantum channels was spread out throughout `process_fidelity` and `_process_fidelity_to_id`. This PR collects it in a new private function `core.metrics._hilbert_space_dims`. This will also allow reducing `average_gate_fidelity` to `process_fidelity` (in a future PR) as explained in https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html, without having to re-implement extracting the dimensions. **Related issues or PRs**; Part of the work on https://github.com/qutip/qutip/issues/1703. **Changelog**; refactor process_fidelity using new function _hilbert_space_dims",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1748:114,log,logic,114,https://qutip.org,https://github.com/qutip/qutip/pull/1748,2,"['log', 'stub']","['logic', 'stubs']"
Testability,"**Description**; This is imports [BoFiN](https://github.com/tehruhn/bofin/) into QuTiP with the intention of replacing `qutip.nonmarkov.heom` with `qutip.nonmarkov.bofin` in 4.7 (where `qutip.nonmarkov.heom` will be a thin wrapper around the new, better HEOM solvers) and completely replacing `qutip.nonmarkov.heom` in 5.0. The strategy used was to import the BoFiN history (52 commits) without the examples and their data files into `qutip/nonmarkov/bofin` and then to proceed to tidy things up from there. Specifically I imported the branch from https://github.com/tehruhn/bofin/pull/7 which has @nwlambert's work on the `HSolverDL` replacement. **Todo**; - [x] Add more exhaustive tests.; - [x] Address or silence CodeClimate issues.; - [x] Remove the many assigned but unused variables.; - [x] Add better tests that new `HSolverDL` is compatible with the existing `HSolverDL`.; - [x] Replace the existing `HSolverDL` with the new one.; - [x] Decide what to do with `heom.HEOMSolver`. Should it stay as it is? Be incorporated into BoFiN? Be Removed? *-- Neil and I decided we should remove it*; - [x] Decide what to do about the `renorm` argument to the old `HSolverDL`. Do we add it to the new BoFiN one?; - [x] Decide what to do about the `stats` argument. I'm planning to just add a note telling people to use `pyinstrument` if they need to profile their code.; - [x] Make HSolverDL use a bath instead of having the Matsubara calculation burried inside the solver.; - [x] Add Pade coefficient calculator somewhere? Maybe also as a bath?; - [x] Clean up the interfaces of `BosonicHEOMSolver` and `FermionicHEOMSolver`.; - [x] Whatever else we discover along the way.; - [x] Keep just the gather_op mode of RHS construction.; - [x] Split bath classes out into their own module.; - [x] Add underdamped spectral density bath. **Follow up PRs (i.e. before 4.7)**; - [x] Add Lorentzian fermionic bath (#1726); - [x] Convert the extension BoFiN documentation and into an extensive QuTiP guide (this PR ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1601:684,test,tests,684,https://qutip.org,https://github.com/qutip/qutip/pull/1601,2,['test'],['tests']
Testability,**Description**; This sets up the towncrier utility to manage the changelog. - Add suitable towncrier configuration to the respository.; - Update the release documentation with instructions for using towncrier to update the change log.; - Update the development documentation to include the requirement to add towncrier entries for each PR.; - Update the GitHub PR template to mention the requirement to add a towncrier entry.; - Add a check to the GitHub action tests workflow that checks that a towncrier entry was added. **Related issues or PRs**; #1894. **Changelog**; See doc/changes/1927.doc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927:231,log,log,231,https://qutip.org,https://github.com/qutip/qutip/pull/1927,2,"['log', 'test']","['log', 'tests']"
Testability,"**Description**; Two small bugs crept in in the conversion of the steady_state solver in the HEOM method to QuTiP v5. Firstly, the system state was returned without Fortran ordering (so it was effectively returned transposed), and the line which was supposed to enforce hermiticity used a conj() instead of an adjoint() so it just deleted the imaginary parts of the off-diagonals instead. . I think none of the notebooks or tests were sensitive to these two compounding issues, but it is fairly easy to make an example which is. This is also added as a rudimentary test, comparing output of the long-time dynamics to the steadystate. I didn't include any parameters to change in that test, but can do so if its useful. As a comment, the steady-state solver could probably be written to be more like the standard steadystate solver. But maybe better that is done alongside an effort to make the heom solver more data-layer flexible.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2333:424,test,tests,424,https://qutip.org,https://github.com/qutip/qutip/pull/2333,3,['test'],"['test', 'tests']"
Testability,"**Description**; Update HEOM for v5. Other changes:; - This resulted in a bit of a refactor of the Result class (#1907); - I found a few places where QobjEvo did not correctly set `.type` and fixed those (they were breaking the HEOM tests). Todos and questions:; - [X] Should HierarchyADOsState store ado_state as a Data object rather than a numpy array? (it can't be stored as a Data object because the ADOs have shape `n_ado, n, n` and the Data layer only supports 2-d arrays).; - [X] How should the ado_state be stored on a results object? In particular, how should the change in e_ops signature be handled (for the HEOM solver the e_ops callables also take the full ADO state). (implemented); - [X] What should be done with the steady_state method? I guess it can just stay. Should other solvers also have this? (it should just stay, I think); - [x] Recheck the time-dependent case. (I also simplified the time-dependent case so that the Liouvillian is never added and so doesn't have to be subtracted off).; - [X] The HEOM can't really take new QObjEvo arguments each time `run` is called because calculating the RHS again is quite expensive. Maybe something can be done? (implemented -- passing new args to .run is now supported); - [X] In the base solver the new options seem to be set after retrieving the integrator -- is this right? (fixed); - [X] Compare performance to the HEOM in 4.7. (looks faster, yay!); - [X] We could also implement `.start()` and `.step()` for the HEOMSolver. Not quite sure of the use case yet though. (implemented and tested -- the implementation came for free after sorting out having .run inherit from the base solver).; - [x] Add some direct tests for the QobjEvo type errors that have been fixed.; - [x] Moved solver into `qutip.solver.heom`. . **Related issues or PRs**; - One of the todos from #1850; - In #1907 the Result class was changed largely to support extension by the HEOMSolver. **Changelog**; Update HEOM for v5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869:233,test,tests,233,https://qutip.org,https://github.com/qutip/qutip/pull/1869,3,['test'],"['tested', 'tests']"
Testability,**Description**; Update dev.major CI tests setup from master. This also merges the build changes needed to support Python 3.10 (which is tested in the latest CI test setup from master). **Related issues or PRs**; * Brings in: #1777. **Changelog**; Update dev.major CI tests setup from master.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1791:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/1791,4,['test'],"['test', 'tested', 'tests']"
Testability,"**Description**; Update tests in `test_steadystate` to use pytest.; Improve coverage by adding tests for previously untested method and options and tests for raised errors. It will not reach full coverage: no tests use `debug=True`, `pinv2` is deprecated on `scipy` side, some checks are redundant, etc. Some work on `steadystate.py` will be needed, but this is for another time, possibly for dev.major. **Changelog**; Update steadystates tests to pytest for better coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1679:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1679,5,['test'],['tests']
Testability,"**Description**; Update tests in `test_utilities.py` to `pytest` and add test for previouly untested function.; I removed 2 functions:; `linspace_with`: never used, almost equivalent to `np.linspace`.; `view_methods`: supposed to print methods of a `Qobj`, but broken... **Changelog**; Update tests in test_utilities.py to pytest.; Remove broken qutip.utilities.view_methods.; Remove qutip.utilities.linspace_with (use numpy.linspace instead).",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1680:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1680,3,['test'],"['test', 'tests']"
Testability,**Description**; Update the superop reps tests to use pytest and parameterized tests. Thank you for contributing these @MrRobot2211. **Related issues or PRs**; - Originally submitted as part of #1491 which also added support for rectangular superops. **Changelog**; Update the superop reps tests to use pytest and parameterized tests. Contributed by @MrRobot2211),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1825:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/pull/1825,4,['test'],['tests']
Testability,"**Description**; Updated the test matrix, removing test using older version of python, scipy and numpy to add new versions.; Matrix include all python versions from 3.9 to 3.12, all scipy from 1.8 to 1.12, all numpy from 1.22 to 1.26.; I keep test with no cython, cython 0.X and 3.X. With and without mkl and all 3 os. Added python 3.12 to the list of build wheels, but removed 3.8. Increase minimum version of scipy and numpy in requirement to match those we actually tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2309:29,test,test,29,https://qutip.org,https://github.com/qutip/qutip/pull/2309,4,['test'],"['test', 'tests']"
Testability,**Description**; Updating cython to 0.29.30 break some tests... This fix the issue. **Changelog**; Add support for cython 0.29.30,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1895:55,test,tests,55,https://qutip.org,https://github.com/qutip/qutip/pull/1895,1,['test'],['tests']
Testability,"**Description**; Upgrade from 4.5.1 to 4.5.2.; Include cherry picked commit from the following PR:. #1307 Fix zcsr_proj for bras with unsorted indices; #1306 Fix quadratic complexity in zcsr_inner; #1302 Enforce a CI test with scipy<1.5; #1301 Fix brtools zheevr test; #1298 Support scipy >= 1.5 in fast_csr_matrix matmul and legacy.ptrace; #1283 Milstein's heterodyne index fix; #1271 Remove duplicate line in setup.py; #1264 Remove incorrect use of 'is' in comparisons. Code from #1288 was added manually to evade conflict and related test were reinstalled. (removed in 4.5.1, not in master). #1269 and #1242 are not included since they depend on #1209 which is more that a bugfix and is not in 4.5.0. **Changelog**; Bug Fixes; -------; - `zcsr_proj` does not fail with unsorted indices (by **Jake Lishman**); - Fixed Milstein's heterodyne errors (by **Eric Giguère**); - Removed risky code (by **Jake Lishman**); <!-- - Fix `add_circuit` and `remove_gate` (by **Canoming**) -->. Improvements; -------; - Faster `zcsr_inner` (by **Jake Lishman**); - Support for Scipy 1.5 (by **Jake Lishman**)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1310:217,test,test,217,https://qutip.org,https://github.com/qutip/qutip/pull/1310,3,['test'],['test']
Testability,"**Description**; Use `scipy.linalg.eigh` instead of `scipy.linalg.eig` for `qutip.simdiag` in order to ensure returned eigenvectors are always orthonormal. Since `simdiag` requires operands to be commuting and hermitian, this change should be justified. I did not add any new tests as this bug only occured in very rare circumstances. If desired, I could add the reproducing code from the related issue as a test case. **Related issues or PRs**; Fixes issue #2268",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2269:276,test,tests,276,https://qutip.org,https://github.com/qutip/qutip/pull/2269,2,['test'],"['test', 'tests']"
Testability,"**Description**; We had some duplicated tests in `test_superop_reps.py`, I removed the old ones. There was also two tests in `test_convert.py` that had the same name. Renamed one of them.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2486:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/2486,2,['test'],['tests']
Testability,"**Description**; We use `imatmul_data_dense` for cython only, in-place `matmul` operation since the dispatcher can't handle in-place operation but they can't have nice impact on performance.; `imatmul_data_dense` had a bug that when data is not `Dense` or `CSR` it would use a wrong specialization of `matmul` and raise an error. . It work fine with all data layer in qutip/qutip so we can test it here, but some tests fails in qutip-jax (qutip/qutip-jax#14) because of it. **Related issues or PRs**; Blocking qutip/qutip-jax#14",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2137:390,test,test,390,https://qutip.org,https://github.com/qutip/qutip/pull/2137,2,['test'],"['test', 'tests']"
Testability,"**Description**; When a `Qobj` is present in the output of a Jupyter cell, e.g. when running:; ```python; import qutip as qt; qt.fock(2, 0); ```; the output, which contains LaTeX code, is displayed in Markdown. The aim of this PR is to display the LaTeX output correctly. Replacing the `equation` environment in the LaTeX code with `$$...$$` and changing the `array` environment alignment from `*{11}c` to `cc` causes the vectors and matrices to display in the expected mathematical typeface. A test has not yet been provided, because the change was to a stored raw string; if a test is needed then the presence of this syntax in the string could be detected. **Related issues or PRs**; Fixes #2172",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2272:495,test,test,495,https://qutip.org,https://github.com/qutip/qutip/pull/2272,2,['test'],['test']
Testability,"**Description**; When allocating memory in cython, we did not check if the memory was allocated or not due to lacking RAM.; `kron_dia` was particularly inefficient for `bra & ket` combination., which caused a segfault in the `steadystate` benchmarks.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2224:239,benchmark,benchmarks,239,https://qutip.org,https://github.com/qutip/qutip/pull/2224,1,['benchmark'],['benchmarks']
Testability,"**Description**; When the number of excitations in `state_number_enumerate` is limited, instead of iterating over all states and discarding the ones with too many excitations, directly choose the limits to only iterate over allowed states. As a small additional optimization, do not redo the same sum every time, but keep track of the sum within the algorithm. For the tests I've made, this is a factor of ~4-10 faster than the current version. Together with #1593, this reduces the runtime of `enr_destroy` (which uses `state_number_enumerate`) from almost 4s to 15 ms for the case I just treated, and another much bigger case takes 2.5 s now, while it hadn't finished after more than an hour with the previous version. Note that since the two PRs (this one and #1593) are somewhat related, it might make sense to combine them into a single one. I'd be happy to do that. **Changelog**; Made state_number_enumerate somewhat faster.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1594:369,test,tests,369,https://qutip.org,https://github.com/qutip/qutip/pull/1594,1,['test'],['tests']
Testability,"**Description**; When using `brmesolve`, the tensor would always be seen as time-dependent. Which for Bloch Redfield mean computing eigen vectors at each time-step and result is a massive slowdown when not required. There is no tests, the result does not change. . **Related issues or PRs**; fix #2530",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2541:228,test,tests,228,https://qutip.org,https://github.com/qutip/qutip/pull/2541,1,['test'],['tests']
Testability,"**Description**; While working on the [heom-tls notebook] I discovered two wrong behaviors of the `HEOMSolver`. ; 1. Running `hsolver.run()` does not return the states if `e_ops=None`, but the documentation says that it should do so. I added the missing if condition to `HEOMSolver`. ; 2. If passing a progress bar like `qutip.ui.progressbar.TextProgressBar()` to `HEOMSolver` it results in an error, because internally it only checks for `None` or `True`. The documentation says it should also work if I pass an instance of `BaseProgressBar` (or a subclass). I added the checks and a test in the testfile for this. **Related issues or PRs**; None. **Changelog**; Fix HEOMSolver state return and progress bar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1908:585,test,test,585,https://qutip.org,https://github.com/qutip/qutip/pull/1908,2,['test'],"['test', 'testfile']"
Testability,"**Description**; With new version of os, it sometime break our hardware_info function, as with the new apple M1 with #1754.; Instead of fixing it each time, I propose removing the function:; - Qutip only use the number of cpu from that function, we never uses the cpu frequency or any other info obtained.; - There are cross platform modules for that (`psutil`), if we need that information, we should use them instead. In this PR, I removed `hardware_info`, created a new function `available_cpu_count` which is placed it in `utilities.py` since `blas_info` is also there. This function is set to detect the number of cpus _available_, not total number, so that when used on a cluster, it return the number of cpus assigned to the job. I tested it on slurm. **Changelog**; Remove hardware info",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1758:739,test,tested,739,https://qutip.org,https://github.com/qutip/qutip/pull/1758,1,['test'],['tested']
Testability,"**Description**; With the update of correlation to v5 in #1997, the need for `shift` in `QobjEvo` and `Coefficient` disappeared.; `ShiftCoefficient`, `QobjEvo._insert_time_shift` and related tests are removed. I also restored the correlation tests on windows hoping they are now fast enough to not timeout. **Related issues or PRs**; #1997",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2016:191,test,tests,191,https://qutip.org,https://github.com/qutip/qutip/pull/2016,2,['test'],['tests']
Testability,"**Description**; `Dense` was missing some dispatch specialisations:; `isherm`, `isdiag`, `inner`, `inner_op`, `pow`, `indices` and `dimensions`.; Some of them are quite commonly used:; - `isherm` is called in a few method of `Qobj` like `eigenstates`.; - `inner` is used in `Qobj.__matmul__` between `bra` and `ket`. Tests for new functions are added.; For `isherm`, it was already tested for Dense, but relied on the automatic conversion of the dispatcher. Also fix some docstings which used `Arguments` instead of `Parameters`.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2008:317,Test,Tests,317,https://qutip.org,https://github.com/qutip/qutip/pull/2008,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"**Description**; `IntergratorScipylsoda.mcstep` read the integration range from the scipy solver's `rwork`. However `rwork` is initialized to 0 when initializing the state and only take the expected value when the first step in done. Therefore it would fail when starting from time other than `0`. `IntergratorScipyZvode` also used `rwork` in an unsafe way. Fix that and add a test. . **Related issues or PRs**; Similar improvement where first made in https://github.com/qutip/qutip/pull/1710, splitting it to made that PR simpler. **Changelog**; `IntergratorScipylsoda` safe for starting at any time.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1880:377,test,test,377,https://qutip.org,https://github.com/qutip/qutip/pull/1880,1,['test'],['test']
Testability,"**Description**; `actions/upload-artifact@v4` and `actions/download-artifact@v4` have breaking change cause the 5.0.3 release to miss wheels on pypi. Different jobs in one workflow can't create artifacts with the same name. (but not on retry).; Download artifact only download artifact from one job without the proper options.; (https://github.com/actions/upload-artifact/issues/478). - Upload to different artifacts per OS.; - Merge artifacts when downloading.; - Add test that all wheels and source are available before pypi release.; - For test build, built artifacts are listed.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2476:469,test,test,469,https://qutip.org,https://github.com/qutip/qutip/pull/2476,2,['test'],['test']
Testability,"**Description**; `actions/upload-artifact@v4` and `actions/download-artifact@v4` have breaking change cause the 5.0.3 release to miss wheels on pypi. Different jobs in one workflow can't create artifacts with the same name. ; Download artifact only download artifact from one job without the proper options.; (https://github.com/actions/upload-artifact/issues/478). I also updated cibuildwheel version, we did it in qutip-5.0.X to build wheels for py3.12, but did not push it yet to master. I also merged the jobs to publish or pypi and testpypi, only some environment variables changed and they could get out of synchronization. Lastly I added a check that all wheels are available before uploading to pypi. With 5.0.3's first try, only linux's wheel were published,",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477:537,test,testpypi,537,https://qutip.org,https://github.com/qutip/qutip/pull/2477,1,['test'],['testpypi']
Testability,"**Description**; `countstat.py` does not depend on solver, however it has a **F** maintainability score on codeclimate.; This clean the code to make it more readable, running codeclimat locally, there are not issues left.; Also added a call using the pseudo inverse method in the test. **Changelog**; Make `countstat.py`'s code more readable.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1794:280,test,test,280,https://qutip.org,https://github.com/qutip/qutip/pull/1794,1,['test'],['test']
Testability,"**Description**; `isherm_csr` did not fully tested the structure, it only checked that each line had as many elements in it than the corresponding column. So ; ```; [[1, 1, 0],; [0, 1, 1],; [1, 0, 1]]; ```; was seen as hermician. This added a second layer of structure check for such cases and a test that would previously fail. **Related issues or PRs**; Fixes #1865",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1866:44,test,tested,44,https://qutip.org,https://github.com/qutip/qutip/pull/1866,2,['test'],"['test', 'tested']"
Testability,**Description**; `pyximport` raises a deprecation warning due to importing `imp` instead of `importlib`. I silenced it. It was causing some problem in qutip-tensorflow testing as all warnings are treated as errors. Let me know if I should have proceeded in a different way. . **Changelog**; Silenced deprecation warning from `pyximport`.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582:168,test,testing,168,https://qutip.org,https://github.com/qutip/qutip/pull/1582,1,['test'],['testing']
Testability,"**Description**; `qeye_like`, `qzero_like` and the data layer version, `identity_like` and `zeros_like` came up as useful in multiple conversation.; I added them with tests, but I did not go through the code to use them.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2153:167,test,tests,167,https://qutip.org,https://github.com/qutip/qutip/pull/2153,1,['test'],['tests']
Testability,"**Description**; `qutip.coefficient` accept scipy's CubicSpline input, but only work for complex `y` array:; ```; x = np.linspace(0, 1, 11); y = np.exp(-1j*x); H = qutip.QobjEvo([H0, scipy.interpolate.CubicSpline(x, y)]); ```; worked, but ; ```; x = np.linspace(0, 1, 11); y = np.sin(x); H = qutip.QobjEvo([H0, scipy.interpolate.CubicSpline(x, y)]); ```; did not. ; This add support for CubicSpline built using real array. ; Also add a test for both real and imag arrays + using both PPoly (parent class of CubicSpline) and Bspline (another spline class of scipy.). bug reported in: https://groups.google.com/g/qutip/c/MS0r6YNFkd8/m/0_cPnqheAQAJ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2397:436,test,test,436,https://qutip.org,https://github.com/qutip/qutip/pull/2397,1,['test'],['test']
Testability,"**Description**; `qzero_like` used on `QobjEvo` would call it (it needed `qevo(0).data`), which is both slow and could break `jax.jit`.; I added `Qobj.dtype` and `QobjEvo.dtype` to be used instead of accessing the data directly.; For `QobjEvo`, the `dtype` property still call the object when the type is unclear (mixed or function based), but it should be faster otherwise.; Tested that the example in qutip/qutip-jax#33 works.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2325:376,Test,Tested,376,https://qutip.org,https://github.com/qutip/qutip/pull/2325,1,['Test'],['Tested']
Testability,**Description**; `simdiags` didn't have any test... Add some. **Changelog**; Add tests for simdiags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1681:44,test,test,44,https://qutip.org,https://github.com/qutip/qutip/pull/1681,2,['test'],"['test', 'tests']"
Testability,**Description**; `svd`'s states are defined up to a sign.; We used both numpy and scipy for the tests and that difference in sign could make the tests fail randomly.; This makes the tests independent of the signs.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2092:96,test,tests,96,https://qutip.org,https://github.com/qutip/qutip/pull/2092,3,['test'],['tests']
Testability,**Description**; `test_nm_mcsolve.test_super_H` [failed in master's test](https://github.com/qutip/qutip/actions/runs/8807804559/job/24175678290). . Same issue as #2344. The tolerance is too tight and the test can fail randomly with a low probability.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2407:68,test,test,68,https://qutip.org,https://github.com/qutip/qutip/pull/2407,2,['test'],['test']
Testability,"**Description**; `test_super_H` can randomly fail, as seen in https://github.com/qutip/qutip/actions/runs/8112849659/job/22174928821. Trying it locally, it fail with a probability of `~1/500`.; Which is very close to what is expected with the tolerance used in the test.; I loosen the test `atol` for an expected rate of failure of about ~1/100000.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2344:265,test,test,265,https://qutip.org,https://github.com/qutip/qutip/pull/2344,2,['test'],['test']
Testability,"**Description**; refactor with fstring to format string to make code more Pythonic. **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2281:562,test,tests,562,https://qutip.org,https://github.com/qutip/qutip/pull/2281,1,['test'],['tests']
Testability,"**Is your feature request related to a problem? Please describe.**; A lot of issues in test fail seem to arise from random objects (as well as low-level math in MKL and/or cython issues). . **Describe the solution you'd like**; There are several options at hand. . ### stick to pytest and be creative; A possible fix in testing may be to add randomly generated data that then is pointed at or fix seeds.; **Pros**: fast (?); **Cons**: technical debt. ### pytest-randomly plugin; [pytest-randomly](https://github.com/pytest-dev/pytest-randomly) is a pytest plugin that addresses this kind of issues. It allows to control `random.seed`, rather than `numpy.random.seed`. ; **Pros**: pytest plugin, supports doctest. ; **Cons**: not super popular, not designed for numpy; ; ### property-based testing with Hypothesis; Hypothesis is a library that aims at changing the way tests are designed, allegedly: it should go from testing an instance to designing a test that applies to a domain of instances ([property-based testing](https://hypothesis.works/)). It is not super clear to me right now. ; It contains various randomness-related features, including a [seed function](https://hypothesis.readthedocs.io/en/latest/reproducing.html#hypothesis.seed). **Pros**: sounds powerful and clever, popular and growing, well documented, more robust even beyond this randomness problems.; **Cons**: radical change of testing framework (?), steep learning curve (?), overkill (?). I also admit I used nose until recently / used with pytest tests thought for nose, without taking advantage of pytest full power.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1268:87,test,test,87,https://qutip.org,https://github.com/qutip/qutip/issues/1268,9,['test'],"['test', 'testing', 'tests']"
Testability,"**Issue**; Currently, to develop qutip from source (e.g., installing from)the installation guide says to do ; ```; python setup.py develop; ```; However, it is [suggested](https://stackoverflow.com/questions/30306099/pip-install-editable-vs-python-setup-py-develop) to use the command; ```; pip -e .[development]; ```; This currently is not supported as there is no `development_requirements.txt` file. Also, in dev mode, one needs to install pytest, otherwise the `qt.run()` fails. If pytest as well as cython numpy and scipy were specified in such file, this should be done automatically. . Additionally, it may be ideal to pin only minor versions with tilde, stuff like `numpy~=1.18.1`, which should update micro releases but not minor. . **Describe the solution you'd like**; Add a `development_requirements.txt` file and in setup add; ```; extras_require={; 'development': set(dev_requirements),; 'test': dev_requirements,; ```; the set option should be needed for how pypi wants it given. . Add tildes pinning.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1263:903,test,test,903,https://qutip.org,https://github.com/qutip/qutip/issues/1263,1,['test'],['test']
Testability,"**Summary of what was done:**. - Changes in floquet_master_equation_rates to make it faster.; - Corrected transposition errors in _floquet_master_equation_tensor_ and changes to make it faster. I also removed a line so that the ME is solved in the interaction picture, this implies a different basis change in the _floquet_markov_mesolve_ function.; - Correction in _floquet_markov_mesolve_. As explained in the point above, the Floquet-Markov ME was not being solved in the interaction picture, therefore I modified _floquet_master_equation_tensor_ and modified the basis change in _floquet_markov_mesolve_. This modification requires an additional variable in the entry of _floquet_markov_mesolve_ which can not be chosen by default. For the moment, if this variable is not given and _floquet_basis=False_, then the density matrix or expectation values are returned in the interaction picture, in the computational basis, and a warning message is sent. ; - Added integration options in: _floquet_modes, floquet_modes_t, floquet_modes_table, floquet_states_t, floquet_modes_t, floquet_wavefunction_t, fsesolve, floquet_master_equation_rates, fmmesolve_; - Added test functions to verify the dissipative dynamics:; a) Compare _fmmesolve_ and _mesolve_ for the cases: (NO drive but dissipation) and (Drive but NO dissipation); b) Compare numerical and analytical matrix elements for a driven-dissipative TLS with RWA. There are some places where the code could be modified to optimize the running time, especially in the basis change in _floquet_markov_mesolve_.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1248#issuecomment-740126949:1163,test,test,1163,https://qutip.org,https://github.com/qutip/qutip/pull/1248#issuecomment-740126949,1,['test'],['test']
Testability,"**Testing fails on several platforms**; In QuTiP 4.5.1, several `skipif`have been introduced to avoid build fail on Mac. Similarly, there are other issues related to robust random objects testing. . **Describe the solution you'd like**; An option could be using [`xdist`](https://docs.pytest.org/en/3.0.1/xdist.html) to allow specifics of certain tests, as it seems to have, beyond parallelization, some potentially interesting multi-platform coverage.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1267:2,Test,Testing,2,https://qutip.org,https://github.com/qutip/qutip/issues/1267,3,"['Test', 'test']","['Testing', 'testing', 'tests']"
Testability,"+ identity = Qobj(rho, dims = spins_dims); > +; > + return identity; > +; > +# Uncoupled states in the full Hilbert space.; >; > Some of these 'uncoupled' functions are defined as internal others; > external. It's not clear to me why; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168801755>:; >; > > @@ -0,0 +1,309 @@; > +""""""; >; > why not put this file in qutip/tests. Will this file still be picked up by; > nose?; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802341>:; >; > > @@ -0,0 +1,1325 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802444>:; >; > > @@ -0,0 +1,309 @@; > +""""""; > +Tests for Permutation Invariance methods; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168802965>:; >; > > + num_ladders = _num_dicke_ladders(N); > + jm_operator = dok_matrix((nds, nds)); > +; > + s = 0; > + for k in range(0, num_ladders):; > + j = 0.5 * N - k; > + mmax = int(2 * j + 1); > + for i in range(0, mmax):; > + m = j - i; > + if (s - 1) in range(0,nds):; > + jm_operator[s,s-1] = am(j,m+1); > + s = s + 1; > +; > + return Qobj(jm_operator); > +; > +def ap( j, m):; >; > no space before j; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168803599>:; >; > > +; > + if collective_emission != 0:; > + c_ops.append(np.sqrt(collective_emission) * jm); > +; > + if collective_dephasing != 0:; > + c_ops.append(np.sqrt(colle",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:8160,Test,Tests,8160,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['Test'],['Tests']
Testability,"+1. Container-based testing on travis is the way to go, and qutip should make use of it as soon as possible. The speed issue could probably be fixed later, if necessary, but might also very well be fixed upstream. . BTW: Great work on this and other recent PRs!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/360#issuecomment-130548492:20,test,testing,20,https://qutip.org,https://github.com/qutip/qutip/pull/360#issuecomment-130548492,1,['test'],['testing']
Testability,"+1. This looks like a good PR to me. Just a quick note: We have had some side-effect issues when changing how isherm and other cached attributes are handled in the past, in particular with respect to performance. I used to monitor the performance over time with the continous-benchmarking suite in one of the respositories in the project, and that was sometimes useful to find unexpected performance hits. . Hopefully this PR will only improve performance, but it could still be worthwhile to check that for example the unit test suite does not take longer time on this branch than on master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/359#issuecomment-130549106:276,benchmark,benchmarking,276,https://qutip.org,https://github.com/qutip/qutip/pull/359#issuecomment-130549106,2,"['benchmark', 'test']","['benchmarking', 'test']"
Testability,"+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 6.76e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 7.81e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 8.35e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.03e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:13769,Test,Test,13769,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['Test'],['Test']
Testability,"+= c_.data; else:; cd = c_.data.H; c = c_.data; if chi:; - data = data + np.exp(1j * chi[idx]) * \; + data += np.exp(1j * chi[idx]) * \; zcsr_kron(c.conj(), c); else:; - data = data + zcsr_kron(c.conj(), c); + data += zcsr_kron(c.conj(), c); cdc = cd * c; cdct = cdc.T; - data = data - 0.5 * zcsr_kron(spI, cdc); - data = data - 0.5 * zcsr_kron(cdct, spI); + data -= 0.5 * zcsr_kron(spI, cdc); + data -= 0.5 * zcsr_kron(cdct, spI); ; if not td:; if data_only:; diff --git a/qutip/tests/test_expect.py b/qutip/tests/test_expect.py; index 45568110..17491981 100644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break; return qutip.Qobj(flat.reshape(qobj.shape), dims=qo",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:23270,test,tests,23270,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,", -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/tes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25325,test,tests,25325,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,", ; > line 566, in sparse_reverse_permute; > A.indptr, nrows, ncols, rperm, cperm, flag); > File ""sparse_utils.pyx"", line 266, in ; > qutip.cy.sparse_utils./sparse/reverse_permute_complex ; > (qutip/cy/sparse_utils.c:5740); > ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; > ; > ```; > ERROR: Sparse: Nonsymmetric Reverse Permute; > ```; > ; > Traceback (most recent call last):; > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", ; > line 198, in runTest; > self.test(*self.arg); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", ; > line 89, in test_sparse_nonsymmetric_reverse_permute; > B=sparse_reverse_permute(x,rperm,cperm); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", ; > line 566, in sparse_reverse_permute; > A.indptr, nrows, ncols, rperm, cperm, flag); > File ""sparse_utils.pyx"", line 266, in ; > qutip.cy.sparse_utils./sparse/reverse_permute_complex ; > (qutip/cy/sparse_utils.c:5740); > ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; > ; > ```; > ERROR: Sparse: Bandwidth; > ```; > ; > Traceback (most recent call last):; > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/nose-1.3.0-py3.3.egg/nose/case.py"", ; > line 198, in runTest; > self.test(*self.arg); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/tests/test_Sparse.py"", ; > line 144, in test_sparse_bandwidth; > out2=sparse_bandwidth(B); > File ; > ""/home/rob/py-envs/py3-devel/lib/python3.3/site-packages/qutip/sparse.py"", ; > line 603, in sparse_bandwidth; > return /sparse/bandwidth(A.indices, A.indptr, nrows); > File ""sparse_utils.pyx"", line 42, in ; > qutip.cy.sparse_utils./sparse/bandwidth (qutip/cy/sparse_utils.c:1458); > ValueError: Buffer dtype mismatch, expected 'int' but got 'long'; > ; > —; > Reply to this email directly or view it on GitHub ; > https://github.com/qutip/qutip/issues/73.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73#issuecomment-35583331:2318,test,test,2318,https://qutip.org,https://github.com/qutip/qutip/issues/73#issuecomment-35583331,2,['test'],"['test', 'tests']"
Testability,", assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21796,test,testing,21796,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,", dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singular(5); q = Qobj(data); randN = 10 * np.random.random(); - q = q / randN; + q /= randN; assert np.allclose(q.full(), data / randN); ; ; diff --git a/qutip/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25849,test,tests,25849,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 226, in test_05_1_state_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 191, in build_module; reload_support=pyxargs.reload_support); File ""C:\Users\MTS-144\Anaconda3\lib",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:18167,test,tests,18167,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability,", which is a very sizable chunk of the entire test suite. We can concentrate on rewriting the longest tests to make sure we're still testing all the behaviour, without excessively long runtimes. I've been fairly conservative with the number of tests I set in motion. On the free GitHub plan we can have 20 concurrent VMs running across the whole QuTiP organisation, which I think spreads across all repositories and all test runs. With no Windows tests currently active this is 6 test runs plus the documentation build. If we want more, we could consider spending some money ($4/user/month) to convert into a Teams account which gets us 60 concurrent VMs, but I don't see any need to do this right now. All the test runners now start up almost instantly, which really solves a lot of the slowdown we were getting on Travis. The actual speeds of the Linux VMs seem to be similar to what we had on Travis - the walltimes are slightly longer because I now install _all_ optional dependencies in most runners, so slightly more gets tested than before. Currently there's also a slowdown on several machines because `cvxpy` doesn't build many wheels, and none at all for Linux, on `pip`. I install all our dependencies except BLAS/LAPACK stuff that way, since it's easiest to read out the dependencies like that. We can potentially save some build time (maybe ~3 minutes?) if we install that from conda-forge instead. I also fixed a minor point of how environment variables are read within `setup.py` (in the end I didn't actually use the new behaviour in the action, but I did during testing), and added a warning filter on dnorm tests to account for a deprecated Numpy alias being used within `cvxpy` code. Also of note: this [should allow us to have commits that skip the testing stages](https://github.blog/changelog/2021-02-08-github-actions-skip-pull-request-and-push-workflows-with-skip-ci/) (though possibly not codeclimate). You should be able to put `[skip ci]` in the commit message to avoid it.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551:2633,test,testing,2633,https://qutip.org,https://github.com/qutip/qutip/pull/1551,3,['test'],"['testing', 'tests']"
Testability,"- 1, 2: Solvers expect list, not tuple. In a few places, we do not explicitly test for list but only extract the elements, so tuple should behave the same, but it's untested. In my tries with `mesolve` they seems to behave the same or raise error. - 3: `c_ops=[C_0, C_1, [(\hat{a}, f(t)), (\hat{b}, c(t))]]` should work in `mesolve` with `[(\hat{a}, f(t)), (\hat{b}, c(t))]` as the third collapse operator.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2065#issuecomment-1408604158:78,test,test,78,https://qutip.org,https://github.com/qutip/qutip/issues/2065#issuecomment-1408604158,1,['test'],['test']
Testability,- A Qobj times a dense vector would result in a recursive loop and; crash the computer.; - Made the multi array check better about handling dtypes and added; test. The output is a dense array. However if we do create a dense Qobj class (as described in #437) then that should be the returned object.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/443:158,test,test,158,https://qutip.org,https://github.com/qutip/qutip/pull/443,1,['test'],['test']
Testability,"- Added random stochastic operators.; - rand_herm and rand_dm can be passed an array of eigenvalues that will be the eigenvalues of the resulting random operators. This is done via complex Jacobi rotations, but is really only suitable for operators with dimensionality <~=1000.; - Added unit tests.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/419:292,test,tests,292,https://qutip.org,https://github.com/qutip/qutip/pull/419,1,['test'],['tests']
Testability,- All builds fail a test regarding optimal control in `` fails with `AttributeError: 'TestPulseOptim' object has no attribute 'tmp_dirs'`.; - The MacOs build still exits with an error once it encounters `ptrace`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/972#issuecomment-484364190:20,test,test,20,https://qutip.org,https://github.com/qutip/qutip/pull/972#issuecomment-484364190,2,"['Test', 'test']","['TestPulseOptim', 'test']"
Testability,- Can now convert from COO to CSR structs inplace with inplace indices sort; - zcsr_mult now has the option to sort indices or not.; - sp_reshape now calls zcsr_reshape that does an in-place reshape.; - Handy functions for quickly builting structs from COO and CSR SciPy matrices.; - Unit tests for cython structs.; - Random objects with a given eigenspectra are now sorted.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/641:289,test,tests,289,https://qutip.org,https://github.com/qutip/qutip/pull/641,1,['test'],['tests']
Testability,"- Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compar",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2073,Test,TestSESolve,2073,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestSESolve', 'tests']"
Testability,- Fixed seeds inadvertently being reused.; - Added test to verify seeds not being reused.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/275:51,test,test,51,https://qutip.org,https://github.com/qutip/qutip/pull/275,1,['test'],['test']
Testability,"- ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Excep",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:24012,Test,TestMESolveStepFuncCoeff,24012,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestMESolveStepFuncCoeff']
Testability,- Propagator can now be run in parallel.; - Simplified dissipative calling by unifying 'sparse' and dense calls when dissipative.; - Added propagator unit tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/496:155,test,tests,155,https://qutip.org,https://github.com/qutip/qutip/pull/496,1,['test'],['tests']
Testability,- QuTiP already has some interpolation functions that can be compiled down into Cython. Is there some reason we need new ones? Does the new solver support the current interp functions?. - I don't see any changes / additions to unit tests. Are these still coming?. - The new `td_qobj` objects should be able to be passed to all the solvers. This is most easily done by just looking for a `td_qobj` instance and then grabbing the `Q_object` from it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/774#issuecomment-344648478:232,test,tests,232,https://qutip.org,https://github.com/qutip/qutip/pull/774#issuecomment-344648478,1,['test'],['tests']
Testability,- Remove Python 2.7 (probably good to drop support at this stage); - Bumped Python version numbers up.; - Added OSX test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/923:116,test,test,116,https://qutip.org,https://github.com/qutip/qutip/pull/923,1,['test'],['test']
Testability,- Remove dependence on networkx for graph_degree test.; - Add test to check list input for ntraj in mcsolver.; - Added fidelity and trace distance tests.; - Shorten names of tests that are longer than 80 chars.; - Updated installation and release notes.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/280:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/280,4,['test'],"['test', 'tests']"
Testability,- Removed yield commands as they output to the console.; - Removed the lgmres steady state tests since this will be removed.; - Fixed test name going over 80 chars.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/458:91,test,tests,91,https://qutip.org,https://github.com/qutip/qutip/pull/458,2,['test'],"['test', 'tests']"
Testability,- Restructure code to avoid multiple copies of code snippets.; - Optionally return dict with details on solution and solver details.; - Allow for building preconditioner separately so that different; iterative methods can be applied.; - Calculates inf-norm of residual at output.; - Returns number of iterations performed.; - Allow for inputing initial guess vector.; - Calculate a lower bound on the condition number of a preconditioner.; - Residual norm is given when iterative method fails to converge.; - Removed bicg method since it is not compatible.; - General docstring edits.; - Add tests for bicgstab method.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/221:592,test,tests,592,https://qutip.org,https://github.com/qutip/qutip/pull/221,1,['test'],['tests']
Testability,"- The debug setting is off by default so conditional loading of the; logging feature does not work. Here we load the logger by default, but; do not log anything unless the debug feature is set.; - Also got rid of the inspect stack as I do not see the point of that.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/261:69,log,logging,69,https://qutip.org,https://github.com/qutip/qutip/pull/261,3,['log'],"['log', 'logger', 'logging']"
Testability,"- This pull contains a sparse kron function that does not need to convert to COO format to do the product. It is possible to get up to ~20x performance over the SciPy implementation.; - This function can likely be recast to use OPENMP on the outer-loop.; - Added random tests comparing this method vs the SciPy sparse kron. Here are speed ups for various random objects (dims in range [2,100]) with random densities:; ![oper-oper](https://cloud.githubusercontent.com/assets/1249193/18156290/76e1f8d4-6fd2-11e6-91b4-e898429ecf1c.png); ![oper-ket](https://cloud.githubusercontent.com/assets/1249193/18156291/784e4204-6fd2-11e6-95e1-221a90c3d20b.png); ![ket-ket](https://cloud.githubusercontent.com/assets/1249193/18156292/796a22fc-6fd2-11e6-9646-04214cdf3af4.png). The graphs show a relatively constant speedup. However, the results are a bit better than displayed here when using the `timeit` module directly.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/530:270,test,tests,270,https://qutip.org,https://github.com/qutip/qutip/pull/530,1,['test'],['tests']
Testability,- occasional unit tests error due to tight tolerance; - warning when calling `choi_to_chi`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/129:18,test,tests,18,https://qutip.org,https://github.com/qutip/qutip/pull/129,1,['test'],['tests']
Testability,"- output; ```python; U1 != U2; myFid: 0.158 qutipFid: 2.746; myFid: 0.167 qutipFid: 3.371; myFid: 0.117 qutipFid: 2.769; myFid: 0.164 qutipFid: 3.479; myFid: 0.255 qutipFid: 2.700; myFid: 0.255 qutipFid: 2.662; myFid: 0.293 qutipFid: 2.768; myFid: 0.166 qutipFid: 2.658; myFid: 0.195 qutipFid: 3.453; myFid: 0.292 qutipFid: 2.807. U1 == U2; myFid: 1.000 qutipFid: 2.650; myFid: 1.000 qutipFid: 2.857; myFid: 1.000 qutipFid: 1.855; myFid: 1.000 qutipFid: 2.506; myFid: 1.000 qutipFid: 1.926; myFid: 1.000 qutipFid: 1.556; myFid: 1.000 qutipFid: 1.916; myFid: 1.000 qutipFid: 1.989; myFid: 1.000 qutipFid: 2.971; myFid: 1.000 qutipFid: 1.835; ```; - to reproduce; ```python; import numpy as np; from qutip import *. def fid(A, B):; assert A.shape == B.shape; fids = []; A = A.T; B = B.T; for i in range(A.shape[0]):; v1 = A[i]; v2 = B[i]; fidi = ( np.abs( np.dot( np.conj(v1), v2 ) ) )**2; fids.append(fidi); return np.mean(np.array(fids)). def test2():; def compare(U1, U2):; myFid = fid(U1.full(), U2.full()); qutipFid = fidelity(U1, U2); print('myFid: %.3f qutipFid: %.3f' % (myFid, qutipFid)); print(""U1 != U2""); for i in range(10):; U1 = rand_unitary(5); U2 = rand_unitary(5); compare(U1, U2); print(""\nU1 == U2""); for i in range(10):; U1 = rand_unitary(5); compare(U1, U1). test2(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1372:730,assert,assert,730,https://qutip.org,https://github.com/qutip/qutip/issues/1372,1,['assert'],['assert']
Testability,"--- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, True); diff --git a/qutip/tests/test_qobj.py b/qutip/tests/test_qobj.py; index 11caa048..c875ef3f 100644; --- a/qutip/tests/test_qobj.py; +++ b/qutip/tests/test_qobj.py; @@ -244,7 +244,7 @@ def test_QobjAddition():; x1 = q + 5; x2 = 5 + q; ; - data = data + np.eye(5) * 5; + data += np.eye(5) * 5; assert np.all(x1.full() == data); assert np.all(x2.full() == data); ; @@ -298,7 +298,7 @@ def test_QobjDivision():; data = _random_not_singular(5); q = Qobj(data); randN = 10 * np.random.random(); - q = q / randN; + q /= randN; assert np.allclose(q.full(), data / randN); ; ; diff --git a/qutip/visualization.py b/qutip/visualization.py; index 47f40fc1..21ef765e 100644; --- a/qutip/visualization.py; +++ b/qutip/visualization.py; @@ -416,7 +416,7 @@ def _stick_to_planes(stick, azim, ax, M, spacing):; Stick to xz and yz planes; """"""; if stick is True:; - azim = azim % 360; + azim %= 360; if 0 <= azim <= 90:; ax.set_ylim(1 - .5,); ax.set_xlim(1 - .5,); @@ -879,7 +879,7 @@ def plot_energy_levels(H_list, N=0, labels=None, show_ylabels=False,; ; for H1 in H",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:26311,test,tests,26311,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,----------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_fileio.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_floquet.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_gates.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_graph.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_heom_solver.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_interpolate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_lattice.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mcsolve.py - Att,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:51559,test,tests,51559,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,--------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/tes,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:49918,test,test-environment,49918,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,---------; Name Stmts Miss Cover; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ====================,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:49763,test,test-environment,49763,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,---------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_fileio.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_floquet.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_gates.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_graph.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_heom_solver.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_interpolate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_lattice.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mcsolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mesolve.py - Attribu,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:51641,test,tests,51641,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4132,Test,TestCircuitProcessor,4132,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testGetObjevo']"
Testability,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13104,test,tests,13104,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13887,test,tests,13887,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> b,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17723,test,tests,17723,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/unixccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/numpy_distribution.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/conv_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/cpuinfo.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/msvc9compiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/distutils/npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils; copying numpy/d,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19831,test,tests,19831,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matr,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39633,test,tests,39633,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.ma,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18692,test,tests,18692,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/core; copying numpy/core/numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/einsumfunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath_tests.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_ufunc_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:15707,test,tests,15707,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/broadcasting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/basics.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/byteswapping.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/structured,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27671,test,tests,27671,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_build.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:38543,test,testutils,38543,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['testutils']
Testability,-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39364,test,tests,39364,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44102,test,tests,44102,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42079,test,tests,42079,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46582,test,tests,46582,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_numpy_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_reloading.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_public_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_scripts.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; running build_clib; customize UnixCCompiler; customize UnixCCompiler using new_build_clib; building 'npymath' library; compiling C sources; C compiler: clang -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -fwrapv -O2 -Wall -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64 -fPIC -O2 -isystem /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/include -arch arm64; ; creating build/temp.macosx-11.0-arm64-3.9; creating build/temp.macosx-11.0-arm64-3.9/numpy; creating build/temp.macosx-11.0-arm64-3.9/numpy/core; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src; creating build/temp.macosx-11.0-arm64-3.9/numpy/core/src/npymath; creating build/temp.macosx-11.0-arm64-3.9/build; creating build/temp.macosx-11.0-arm64-3.9/build/src.macosx-11.0-arm64-3.9; creating build/temp,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:46748,test,tests,46748,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; package init ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16473,test,tests,16473,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/__init__.py -> build/lib.macosx-11.0-arm64-3.9/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27228,test,tests,27228,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18112,test,tests,18112,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18977,test,tests,18977,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16964,test,tests,16964,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18212,test,tests,18212,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18302,test,tests,18302,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30929,test,tests,30929,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_fileio.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_floquet.py - At,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:51067,test,tests,51067,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:50073,test,test-environment,50073,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ---------- coverage: platform linux, python 3.6.10-final-0 -----------; Name Stmts Miss Cover; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:49142,test,test-environment,49142,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10271,test,tests,10271,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9120,test,testing,9120,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14065,test,tests,14065,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13290,test,tests,13290,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,". However, in the special case where we are trying to calculate the difference between two unitary channels, a very efficient implementation exists. This makes use of an unproved theorem on page 29 of [1]. I have proved this theorem and elaborated an efficient algorithm to calculate the diamond distance between two unitaries as part of my masters thesis. . The current qutip implementation makes use of the semi-definite program formulation in [3] and only uses a simplified calculation on 2 qubit unitary differences. The implementation of this novel approach is very simple - the hardest step involves diagonalising a unitary. Although time complexity is still exponential in the number of qubits, this implementation is far more efficient than the more general implementation. The Choi representation of the quantum channel isn't used and there is no need to solve a complicated semi-definite program (meaning I can do away with the `cvxpy` dependency). ## Empirical testing; Results of empirical testing on my machine are reported below. | | 3 qubit | 4 qubit |; |---------|---------|----------|; | current implementation | 5.22 s | 3min 21s |; | hyper-efficient implementation | 924 µs | 1.11 ms |. ## Proposition; Given the popularity of the circuit model and unitary-based quantum computation, I believe a very efficient implementation of the diamond distance for unitaries would be incredibly valuable for the research community. Given how simple the change is (current tests already cover the test case), I think it would be a simple and worthwhile addition to qutip. ## Citations. [1] D. Aharonov, A. Kitaev, and N. Nisan, “Quantum circuits with mixed states,” in Proceedings of the thirtieth annual ACM symposium on Theory of computing, pp. 20–30, 1998.; [2] A. Gilchrist, N. K. Langford, and M. A. Nielsen, “Distance measures to compare real and ideal quantum processes,” Physical Review A, vol. 71, no. 6, p. 062310, 2005; [3] J. Watrous, “Simpler semidefinite programs for completely b",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416:1499,test,testing,1499,https://qutip.org,https://github.com/qutip/qutip/pull/2416,2,['test'],['testing']
Testability,". This is mostly for CI reasons; it's much easier to parse and override at the CI level when it's a single file, rather than attempting `sed s/.../.../ setup.py` or something crazy like that. The validity of the version string is tested by regex.; - local version information is now _always_ appended, even if `git` isn't present - the local version is just then ""nogit"" rather than the git shorthash; - `setup.py` gained a new `--release` flag or environment variable `CI_QUTIP_RELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 4.6.0a1 is the current state of `master`). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465:4119,test,testing,4119,https://qutip.org,https://github.com/qutip/qutip/pull/1465,3,['test'],"['test', 'testing']"
Testability,". This transpired to be because `coverage.py` wasn't able to find our `.coveragerc` file correctly when `pytest` was called in the manner it is on Travis. This PR then does a couple of things:; 1. correctly locates the `.coveragerc` file; 2. excludes the Cython bootstrapping code from being part of the coverage; 3. correctly locates the pytest configuration file `pytest.ini` (although now we have a `pyproject.toml`, we could move that configuration there); 4. completely reorganises `.travis.yml` to remove dead configs, properly share common setups, and generally make it a bit easier to read and see what's going on; 5. fixes file reporting in Coveralls (look at the ""tree"" tab in the Coveralls web report compared to the current `master`); you can now click on the files and get proper line-by-line detail on what was covered and what wasn't, e.g. [here's the report for `mcsolve.py`](https://coveralls.io/builds/32982136/source?filename=qutip/mcsolve.py). We _don't_ enable Cython line-tracing and coverage analysis. This is actually [quite easily possible](https://cython.readthedocs.io/en/latest/src/tutorial/profiling_tutorial.html#enabling-coverage-analysis), but enabling full tracing including on `nogil` functions absolutely tanks performance to the degree where the coverage Travis run would take well in excess of two hours to complete (I think Travis actually just kills things that run longer than 2 hours). I might return to the Cython elements to see how much of them when _can_ reasonably do coverage analysis on. My prediction about actual test coverage dropping once the test files are correctly omitted, which I mentioned in #1339, came true though not _quite_ as cataclysmically (`coverage.py` uses statements, not SLOC as its metric); coverage drops from ~71% to ~63%. Technically the true percentage is higher because the Cython code is generally very well covered, but arguing between 63% and 71% when we should be aiming to get to >95% is missing the point. Fixes #1339.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1347:1686,test,test,1686,https://qutip.org,https://github.com/qutip/qutip/pull/1347,2,['test'],['test']
Testability,". self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f40>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_10_happy_breakdown_e_ops_none(self, happy_breakdown_parameters):; ""krylovsolve: check e_ops=None at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.check_e_ops_none(; H, psi0, tlist, dim, krylov_dim=krylov_dim; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:469: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:274: in check_e_ops_none; krylov_outputs = krylovsolve(H, psi0, tlist, krylov_dim, e_ops=None); stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:1217,test,tests,1217,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"... ok; correlation: comparing 3LS emission corr., c_ops td (np-list td format) ... ok; correlation: comparing 3LS emission corr., c_ops td (fn-list td format) ... ok; correlation: comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Ent",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6620,test,tests,6620,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,".................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions __________________________________________________________________________. @pytest.mark.requires_cython; def test_CoeffOptions():; from itertools import combinations; base = ""1 + 1. + 1j""; options = []; options.append(CompilationOptions(accept_int=True)); options.append(CompilationOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False)); coeffs = [coefficient(base, compile_opt=opt) for opt in options]; for coeff in coeffs:; assert coeff(0) == 2+1j; for coeff1, coeff2 in combinations(coeffs, 2):; > assert not isinstance(coeff1, coeff2.__class__); E AssertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; fr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:4874,assert,assert,4874,https://qutip.org,https://github.com/qutip/qutip/issues/2162,2,['assert'],['assert']
Testability,"............s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions __________________________________________________________________________. @pytest.mark.requires_cython; def test_CoeffOptions():; from itertools import combinations; base = ""1 + 1. + 1j""; options = []; options.append(CompilationOptions(accept_int=True)); options.append(CompilationOptions(accept_float=False)); options.append(CompilationOptions(static_types=True)); options.append(CompilationOptions(try_parse=False)); options.append(CompilationOptions(use_cython=False)); coeffs = [coefficient(base, compile_opt=opt) for opt in options]; for coeff in coeffs:; assert coeff(0) == 2+1j; for coeff1, coeff2 in combinations(coeffs, 2):; > assert not isinstance(coeff1, coeff2.__class__); E AssertionError: assert not True; E + where True = isinstance(<qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7d40>, <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'>); E + where <class 'qutip.core.cy.coefficient.StrFunctionCoefficient'> = <qutip.core.cy.coefficient.StrFunctionCoefficient object at 0x7f86f86a7f00>.__class__. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py:239: AssertionError; __________________________________________________________________________ test_advance_use ___________________________________________________________________________. @pytest.mark.requires_cython; def test_advance_use():; opt = CompilationOptions(recompile=True, extra_import=""""""; from qutip import basis; from qutip.core.data cimport CSR; from qutip.core.data.expect cimport expect_csr; """"""); csr = qutip.num(3).data; coeff = coefficient(""expect_csr(op, op)"",; args={""op"": csr},; args_ctypes={""op"": ""CSR""}",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:5000,Assert,AssertionError,5000,https://qutip.org,https://github.com/qutip/qutip/issues/2162,2,"['Assert', 'assert']","['AssertionError', 'assert']"
Testability,../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py - AttributeError: module 'qutip' has n...; ERROR ../tests/test_qubitcircuit.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_qubits.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rand.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sparse.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_spinchain.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_spmath.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_states.py - Attrib,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:54101,test,tests,54101,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,./tests/test_gates.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_graph.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_heom_solver.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_interpolate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_lattice.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mcsolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_metrics.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mkl.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_noise.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_openmp.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_operators.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py ,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:53117,test,tests,53117,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,./tests/test_heom_solver.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_interpolate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_lattice.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mcsolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_metrics.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mkl.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_noise.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_openmp.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_operators.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py - AttributeError: module 'qutip' has n...; ERROR ../tests/test_qubitcircuit.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_qubits.py - Attribu,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:53281,test,tests,53281,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,".0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/l",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4225,test,tests,4225,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18784,test,tests,18784,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_protocols.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_regression.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:19073,test,tests,19073,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35949,test,tests,35949,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,".0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3879,test,tests,3879,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,".1). Other Python distributions, such as Enthought Python Distribution or Anaconda CE have also been reported to work.; 2. When installing Python(x,y), explicitly select to include the Cython package in the installation. This package is not selected by default.; 3. Add the following content to the file C:/Python27/Lib/distutils/distutils.cfg (or create the file if it does not already exists):; [build]; compiler = mingw32; [build_ext]; compiler = mingw32; The directory where the distutils.cfg file should be placed might be different if you have installed the Python environment in a different location than in the example above.; 4. Obtain the QuTiP source code and installed it following the instructions given above. However, there are some errors after i run the installation verifying process. Is there anyone came across such errors? How can I repair these errors? The errors are presented as follow:; ======================================================================; ERROR: qutip.tests.test_stochastic_me.test_ssesolve_photocurrent; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Python27\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Python27\lib\site-packages\qutip\tests\test_stochastic_me.py"", line 60, in test_ssesolve_photocurrent; map_func=parallel_map); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 527, in smesolve; res = _smesolve_generic(sso, sso.options, sso.progress_bar); File ""C:\Python27\lib\site-packages\qutip\stochastic.py"", line 870, in _smesolve_generic; task_args, task_kwargs, **map_kwargs); File ""C:\Python27\lib\site-packages\qutip\parallel.py"", line 266, in parallel_map; return [ar.get() for ar in async_res]; File ""C:\Python27\lib\multiprocessing\pool.py"", line 554, in get; raise self._value; ValueError: object of too small depth for desired array; -------------------- >> begin captured stdout << ---------------------; 12.0",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/788:1146,test,tests,1146,https://qutip.org,https://github.com/qutip/qutip/issues/788,1,['test'],['tests']
Testability,".36s; Total run time: 5.51s; Total run time: 6.58s; Total run time: 9.64s; Total run time: 10.74s; Total run time: 12.29s; {'solver': 'pc-euler-2'}; Total run time: 1.54s; Total run time: 1.86s; Total run time: 2.50s; Total run time: 2.79s; Total run time: 3.36s; Total run time: 4.03s; Total run time: 4.98s; Total run time: 6.56s; {'solver': 'explicit1.5'}; Total run time: 5.28s; Total run time: 6.35s; Total run time: 7.74s; Total run time: 8.99s; Total run time: 10.34s; Total run time: 12.41s; Total run time: 15.40s; Total run time: 21.40s; {'solver': 'taylor1.5'}; Total run time: 3.30s; Total run time: 3.85s; Total run time: 4.52s; Total run time: 5.63s; Total run time: 7.22s; Total run time: 8.72s; Total run time: 9.51s; Total run time: 11.84s; {'solver': 'taylor1.5-imp'}; Total run time: 5.43s; Total run time: 6.81s; Total run time: 7.60s; Total run time: 10.05s; Total run time: 11.88s; Total run time: 12.88s; Total run time: 15.63s; Total run time: 22.31s. ```; ; **Minor issue: plots breaking notebook rendering**; Jupyter Notebooks have a broken rendering when cells with plots are run; refreshing the notebook sometimes works fine. This is sometimes fixed in the first place by adding; ```; plt.show(); plt.close(); ```; but not always. Maybe we can have a look at this minor issue in the development notebooks. . **Documentation**; It would really increase the adoption rate if the API doc and User Guide could be updated to highlight the stochastic solvers and new methods. The development notebooks are so well written that drawing from their examples should be simple. . Congratulations @Ericgig for this refurbishment, improvement, optimization and thorough benchmarking investigations of the stochastic solvers, which I hope will be widely tested by @nwlambert @ajgpitch @quantshah (and @fminga) for robustness once merged in the development master branch. I am merging this and the montecarlo split PR, hoping there are no incompatibility issues (#990 --> #991 --> #969).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/990#issuecomment-500396003:6267,benchmark,benchmarking,6267,https://qutip.org,https://github.com/qutip/qutip/pull/990#issuecomment-500396003,2,"['benchmark', 'test']","['benchmarking', 'tested']"
Testability,.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:50776,test,tests,50776,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13200,test,tests,13200,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,".]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve currently supports Hamiltonian Qobj operators only""; ); ; if not H.isherm:; raise TypeError(""Hamiltonian 'H' must be hermician.""); ; if not isinstance(psi0, Qobj):; raise TypeError(""'psi0' must be a Qobj.""); ; if not psi0.isket:; raise TypeError(""Initial state must be a ket Qobj.""); ; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. ―――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[magnetization subspace state XXZ model] ――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:7840,Test,TestKrylovSolve,7840,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite;",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:21639,test,tests,21639,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_6,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14758,test,tests,14758,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15448,test,tests,15448,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14842,test,tests,14842,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:17537,test,tests,17537,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copy,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31583,test,tests,31583,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,".matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================== short test summary info =========================================================; ERROR qutip/tests/core/test_gates.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/core/test_qobjevo.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_integrator.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_mesolve.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ============================================= 17 deselected, 40 warnings, 4 errors in 5.47s ==============================================; ```. ### Expected Behaviour. No errors. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.14.0; Cython Version: 3.0.10; Matplotlib Version: 3.9.0; Python Version: 3.12.4; Number of CPUs: 10; BLAS Info: Generic; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /Us",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:5452,test,tests,5452,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/bench_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16385,test,tests,16385,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-a,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26696,test,tests,26696,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26908,test,tests,26908,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/constants.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/ufuncs.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27120,test,tests,27120,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; creating build/lib.macosx-11.0-arm64-3.9/numpy/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36881,test,tests,36881,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg; copying numpy/linalg/linalg.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36785,test,tests,36785,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_packbits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_stride_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_nanfunctions.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:36227,test,tests,36227,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,".py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test modu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23797,test,tests,23797,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,".py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTd size changed, may indicate binary incompatibility. Expected 560 from C header, got 568 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTdMatched size changed, may indicate binary incompatibility. Expected 1344 from C header, got 1352 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo_factor.CoeffFunc size changed, may indicate binary incompatibility. Expected 32 from C header, got 40 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo_factor.StrCoeff size changed, may indicate binary incompatibility. Expected 40 from C header, got 488 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvo size changed, may indicate binary incompatibility. Expected 288 from C header, got 296 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjCteDense size changed, may indicate binary incompatibility. Expected 496 from C header, got 504 from PyObject; return f(*args, **kwds); /Users/nathanshammah/miniconda3/envs/qutip44/lib/python3.7/importlib/_bootstrap.py:219: RuntimeWarning: qutip.cy.cqobjevo.CQobjEvoTdDense size changed, may indicate binary incompatibility. Expected 920 from C header, got 928 from PyObject; return f(*args, **kwds); /Users/nathanshammah/github/qutip/qutip/tests/test_metrics.py:300: DeprecationWarning: invalid escape sequence \o; """"""; .................................................................................................; ```; cc @Ericgig.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-496378866:2227,test,tests,2227,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-496378866,1,['test'],['tests']
Testability,".py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings in 0.84s ==========================================================================================; XIO: fatal IO error 0 (Success) on X server "":1029""; after 366 requests (352 known processed) with 19 events remaining.; $ echo $?; 1; ```. **Expected behavior**. The XIO error should not be triggered. Exit value should be 0 not 1. **Your Environment**. Linux (Debian unstable). ```; $ python3 -c ""import qutip; qutip.about()"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.6.2; Numpy Version: 1.19.5; Scipy Version: 1.7.0; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.2; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; ```. **Additional context**. The first thing to check for is whether plots are being closed. But TestPlot already uses `plt.clf()`. Evidently it is not enough.; Replacing `plt.clf()` with `plt.close('all')` seems to work, allowing tests to be registered as successful without error.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:7017,Test,TestPlot,7017,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestPlot', 'tests']"
Testability,".run(self); 186 ; 187 def build_extensions(self):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in run(self); 337 ; 338 # Now actually compile and link everything.; --> 339 self.build_extensions(); 340 ; 341 def check_extensions_list(self, extensions):. /home/caidish1234/anaconda3/lib/python3.6/site-packages/Cython/Distutils/old_build_ext.py in build_extensions(self); 191 for ext in self.extensions:; 192 ext.sources = self.cython_sources(ext.sources, ext); --> 193 self.build_extension(ext); 194 ; 195 def cython_sources(self, sources, extension):. /home/caidish1234/anaconda3/lib/python3.6/distutils/command/build_ext.py in build_extension(self, ext); 531 debug=self.debug,; 532 extra_postargs=extra_args,; --> 533 depends=ext.depends); 534 ; 535 # XXX outdated variable, kept here in case third-part code. /home/caidish1234/anaconda3/lib/python3.6/distutils/ccompiler.py in compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends); 572 except KeyError:; 573 continue; --> 574 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts); 575 ; 576 # Return *all* object filenames, not just the ones we just built. /home/caidish1234/anaconda3/lib/python3.6/distutils/unixccompiler.py in _compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts); 118 extra_postargs); 119 except DistutilsExecError as msg:; --> 120 raise CompileError(msg); 121 ; 122 def create_static_lib(self, objects, output_libname,. ImportError: Building module rhs82342421 failed: [""distutils.errors.CompileError: command 'gcc' failed with exit status 1\n""]; ```. So, I opened my server's log,it showed lots of:; `cc1plus: warning: command line option ‘-Wstrict-prototypes’ is valid for C/ObjC but not for C++ [enabled by default]`. And an error:; `gcc: error trying to exec '/usr/lib/gcc/x86_64-linux-gnu/4.8/cc1plus': execv: Argument list too long`. After killing the kernel, open the notebook again...Everything is ok...I'm puzzled now...",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/697:5613,log,log,5613,https://qutip.org,https://github.com/qutip/qutip/issues/697,1,['log'],['log']
Testability,".test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[-1. 0...0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -2. 0.]; [ 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. -5.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve current",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:6095,test,tests,6095,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,".test_krylovsolve.TestKrylovSolve object at 0xa1095afd0>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 1.0, 1, 0). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:217: in simple_check_states_e_ops; output = krylovsolve(; stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:86: in krylovsolve; _check_inputs(H, psi0, krylov_dim); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. H = Quantum object: dims = [[2, 2, 2, 2], [2, 2, 2, 2]], shape = (16, 16), type = oper, isherm = True; Qobj data =; [[ 4. 0...0. 0. 0. 0. 0. -1. 0. 0. 0. 0. -1. -2. 0.]; [ 0. 0. 0. -1. 0. 0. 0. 0. 0. -1. 0. 0. -1. 0. 0. -4.]]; psi0 = Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]]; krylov_dim = 12. def _check_inputs(H, psi0, krylov_dim):; """"""Check that the inputs 'H' and 'psi0' have the correct structures.""""""; if not isinstance(H, Qobj):; raise TypeError(; ""krylovsolve cu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:8999,test,tests,8999,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,".testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/sit",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6619,test,testing,6619,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Version",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:8751,test,test,8751,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:16677,test,test,16677,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Fram",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24016,test,test,24016,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py:5: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/li",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:9990,test,testing,9990,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:14878,test,test,14878,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py:6: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py __________________________________; ImportError while importing",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:7628,test,tests,7628,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,/dynamics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/control; creating build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/memorycascade.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/transfertensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; copying qutip/nonmarkov/heom.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/nonmarkov; creating build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/li,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11191,test,tests,11191,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15358,test,tests,15358,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_interaction.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_masked_matrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/_polybase.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/pol,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:40311,test,tests,40311,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framewo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:17715,test,test,17715,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framework",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:25822,test,test,25822,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ================================================================ short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:28528,test,test,28528,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,/linalg/tests; copying numpy/linalg/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/linalg/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/testutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/bench.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/timer_comparison.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; copying numpy/ma/mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma; creating build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_old_ma.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_core.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_subclassing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_extras.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_mrecords.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; copying numpy/ma/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/ma/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; copying numpy/matrixlib/defmatrix.py -> build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib; creating build/lib.macosx-11.0-arm64-3.9/numpy/matrixlib/tests; copying numpy/matrixlib/tests/test_matrix_linalg.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:39269,test,tests,39269,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16198,test,tests,16198,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/format.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/financial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/index_t,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:33075,test,tests,33075,https://qutip.org,https://github.com/qutip/qutip/issues/1740,1,['test'],['tests']
Testability,/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44006,test,tests,44006,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43505,test,tests,43505,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_fileio.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_floquet.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_gates.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_graph.py - Attri,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:51231,test,tests,51231,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =================================================================================================; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122; /usr/lib/python3/dist-packages/_pytest/stepwise.py:122: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/stepwise; self.config.cache.set(""cache/stepwise"", []). /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396; /usr/lib/python3/dist-packages/_pytest/cacheprovider.py:396: PytestCacheWarning: could not create cache path /usr/lib/python3/dist-packages/qutip/tests/.pytest_cache/v/cache/nodeids; config.cache.set(""cache/nodeids"", sorted(self.cached_nodeids)). -- Docs: https://docs.pytest.org/en/stable/warnings.html; ========================================================================================= 11 passed, 2 warnings ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:4603,Test,TestCircuitProcessor,4603,https://qutip.org,https://github.com/qutip/qutip/issues/1639,2,"['Test', 'test']","['TestCircuitProcessor', 'testChooseSolver']"
Testability,/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44691,test,testing,44691,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:20276,test,test,20276,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py:4: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_td_formats.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:24784,test,test,24784,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/mixins.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/nanfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/recfunctions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/histograms.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/scimath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/user_array.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/__init__.py -> build/lib.macosx-11.0-arm64-3.9/num,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:32802,test,tests,32802,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22591,test,testing,22591,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7764,test,tests,7764,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal, assert_almost_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19871,test,testing,19871,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"0""><code>8528b63</code></a> [1.26] Fix downstream tests (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3409"">#3409</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/40b6d1605814dd1db0a46e202d6e56f2e4c9a468""><code>40b6d16</code></a> Merge pull request from GHSA-34jh-p97f-mpxf</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/29cfd02f66376c61bd20f1725477925106321f68""><code>29cfd02</code></a> Fix handling of OpenSSL 3.2.0 new error message &quot;record layer failure&quot; (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3405"">#3405</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/b60064388302f54a3455259ddab121618650a154""><code>b600643</code></a> [1.26] Bump RECENT_DATE (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3404"">#3404</a>)</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/7e2d3890926d4788e219f63e2e36fbeb8714827f""><code>7e2d389</code></a> [1.26] Fix running CPython 2.7 tests in CI (<a href=""https://redirect.github.com/urllib3/urllib3/issues/3137"">#3137</a>)</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.18...1.26.19"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.18&new-version=1.26.19)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recre",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2458:3519,test,tests,3519,https://qutip.org,https://github.com/qutip/qutip/pull/2458,1,['test'],['tests']
Testability,"0""><code>afe7722</code></a> Bump actions/setup-python from 4.6.1 to 4.7.0 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/230"">#230</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2038739ad56abec7aaddfa90ad2ce6b3ed7f5c7b""><code>2038739</code></a> Bump dessant/lock-threads from 3.0.0 to 4.0.1 (<a href=""https://redirect.github.com/certifi/python-certifi/issues/229"">#229</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/44df761f4c09d19f32b3cc09208a739043a5e25b""><code>44df761</code></a> Hash pin Actions and enable dependabot (<a href=""https://redirect.github.com/certifi/python-certifi/issues/228"">#228</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/8b3d7bae85bbc87c9181cc1d39548db3d31627f0""><code>8b3d7ba</code></a> 2023.05.07</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/53da2405b1af430f6bafa21ba45d8dd8dfc726b8""><code>53da240</code></a> ci: Add Python 3.12-dev to the testing (<a href=""https://redirect.github.com/certifi/python-certifi/issues/224"">#224</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c2fc3b1f64d6946f1057971ee897ea828ae848d8""><code>c2fc3b1</code></a> Create a Security Policy (<a href=""https://redirect.github.com/certifi/python-certifi/issues/222"">#222</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/c211ef482a01aff5f1bc92c4128bfa0c955f4a01""><code>c211ef4</code></a> Set up permissions to github workflows (<a href=""https://redirect.github.com/certifi/python-certifi/issues/218"">#218</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/2087de5d0aa1d472145fc1dbdfece3fe652bbac5""><code>2087de5</code></a> Don't let deprecation warning fail CI (<a href=""https://redirect.github.com/certifi/python-certifi/issues/219"">#219</a>)</li>; <li><a href=""https://github.com/certifi/python-certifi/commit/e0b9fc5c8f52ac8c300da502e5760ce3d41429ec""><code>e0b9fc5</code></a> remove paragraphs about 1024-",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2205:1371,test,testing,1371,https://qutip.org,https://github.com/qutip/qutip/pull/2205,1,['test'],['testing']
Testability,"0, os.getcwd()); while not import_list and tries < 3:; try_file = filename + str(tries); file_ = open(try_file+ext, ""w""); file_.writelines(code); file_.close(); if not os.access(try_file, os.R_OK):; time.sleep(0.1); codeString = str(""from "" + try_file +; "" import "" + obj_name + '\n' +; ""import_list.append("" + obj_name + "")""); try:; import_code = compile(codeString, '<string>', 'exec'); exec(import_code, locals()); except (ModuleNotFoundError, ImportError) as e:; time.sleep(0.05); tries += 1; _try_remove(try_file+ext); err = e; if not import_list:; > raise Exception(""Could not convert string to importable function, ""; ""tmpfile:"" + try_file + ext) from err; E Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_98549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmp",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:22713,test,test,22713,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,['test'],"['test', 'tests']"
Testability,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_memmap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_nditer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_cpu_features.py -> build/lib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18876,test,tests,18876,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16867,test,tests,16867,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31685,test,tests,31685,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31788,test,tests,31788,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30444,test,tests,30444,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_function_base.py -> build/lib.macosx-11.0-arm64,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35475,test,tests,35475,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; copying numpy/polynomial/hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial; creating build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:42613,test,tests,42613,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/n,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44319,test,tests,44319,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6082,Test,TestMESolveStepFuncCoeff,6082,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolveStepFuncCoeff', 'tests']"
Testability,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> bu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12408,test,tests,12408,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,0.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13637,test,tests,13637,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"0000000e+000 +0.00000000e+000j 0.00000000e+000 +5.29328215e+180j; 5.29328215e+180 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 3.16227766e-001 +0.00000000e+000j 7.63441362e-001 +0.00000000e+000j; 0.00000000e+000 +4.00979001e+087j 0.00000000e+000 +5.37624943e+241j; 5.37624943e+241 +1.18017809e+000j 0.00000000e+000 +1.33956231e+000j; 1.33956231e+000 +0.00000000e+000j 1.48170345e+000 +0.00000000e+000j; 1.84311049e+000 +0.00000000e+000j 9.48683298e-001 +0.00000000e+000j]]; Quantum object: dims = [[1], [10]], shape = (1, 10), type = bra; Qobj data =; [[ 0.31622777+0.j 0.76344136+0.j 0.00000000+0.j; 0.00000000+0.j 0.00000000+1.18017809j 0.00000000+1.33956231j; 1.33956231+0.j 1.48170345+0.j 1.84311049+0.j; ```; I did the same test on two machines and on my old laptop it works fine, so it probably is something architecture dependent. The output of lscpu is:; ```; Architecture: x86_64; CPU op-mode(s): 32-bit, 64-bit; Byte Order: Little Endian; CPU(s): 8; On-line CPU(s) list: 0-7; Thread(s) per core: 1; Core(s) per socket: 8; Socket(s): 1; NUMA node(s): 1; Vendor ID: GenuineIntel; CPU family: 6; Model: 63; Model name: Intel(R) Core(TM) i7-5960X CPU @ 3.00GHz; Stepping: 2; CPU MHz: 1199.890; CPU max MHz: 3500,0000; CPU min MHz: 1200,0000; BogoMIPS: 5989.11; Virtualization: VT-x; L1d cache: 32K; L1i cache: 32K; L2 cache: 256K; L3 cache: 20480K; NUMA node0 CPU(s): 0-7; Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/681:2469,test,test,2469,https://qutip.org,https://github.com/qutip/qutip/issues/681,1,['test'],['test']
Testability,"07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――. self = <qutip.tests.test_krylovsolve.TestKrylovSolve object at 0xa0f9b8f10>; happy_breakdown_parameters = (Quantum object: dims = [[16], [1]], shape = (16, 1), type = ket; Qobj data =; [[0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [1.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]; [0.]], 0.5, 0, 1). def test_9_happy_breakdown_simple(self, happy_breakdown_parameters):; ""krylovsolve: check simple at happy breakdowns""; psi0, hz, Jx, Jz = happy_breakdown_parameters; krylov_dim = 12; N = 4; dim = 2**N; H = h_ising_transverse(N, hx=0, hz=hz, Jx=Jx, Jy=0, Jz=Jz); tlist = np.linspace(0, 20, 200); > self.simple_check_states_e_ops(; H, psi0, tlist, krylov_dim=krylov_dim, square_hamiltonian=False; ). stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py:457: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/usr/local/lib/python3.9/site-packages/quti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:5090,test,tests,5090,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"1 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2900,test,testing,2900,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"1 second was meant to be the order of magnitude rather than a hard limit, but it's a good rule of thumb for testing one piece of functionality. [Here's a (slightly out-dated) list of our current longest tests](https://github.com/qutip/qutip/issues/1217#issuecomment-604116373), bearing in mind that some of those ones actually test many many things in the same test function. The test seems structured ok to me. Certainly the testing algorithm isn't the major cause of speed loss. You could try timing some ""real-world"" examples of using your measurements, and try running them in a profiler to see if there are any obvious ways to speed things up. With any luck the new data-layer tools and the possibility of using dense `Qobj` storage will give you a fair amount of speed-up once they're complete, since I imagine in your small circuit you're paying quite a lot of sparse matrix overhead. I'll prefix this last part with: _you should always profile your code before optimising it_. That said, let me wildly break that rule and guess at where I think you'll find big speed-ups: caching and pre-computation. If you know you're going to run the same thing loads and loads of times, then you shouldn't have to call `self.propagators` each time, or build `measurement_ops` inside `measure_comp_basis`. Do those once at the start of `run_statistics`, and save them. Minor things that _may_ speed up - check the profiling!; 1. ""compress"" the output of `self.propagators`: consecutive propagators with no measurements or classical controls inbetween can be pre-multiplied together at the start to make one matrix. This will save you ~3 matrix multiplications per run in the test.; 2. use more efficient ways to construct large tensor spaces: `qutip.basis`, `qutip.projection` and `qutip.qeye` can all directly constructor product spaces (e.g. `qutip.basis([2, 2, 2], [0, 1, 0])`). `tensor` is a comparatively expensive operation, and tensoring a list of elements internally is effectively `tensor(...(tenso",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640127213:108,test,testing,108,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640127213,6,['test'],"['test', 'testing', 'tests']"
Testability,"1. Don't worry, those aren't problems. A problem would just say ""FAIL"". ""XFAIL"" means ""expected to fail"", which in this case is because those tests were written for an older testing framework and haven't been updated yet.; 2. No, you don't need to worry. If it's installed, you'll get a message at the end which says something like; ```====== 1000 passed, 50 skipped, 10 xfailed in 120s ======```; where the numbers and times will be different, but there won't be any red text saying ""10 failed"" (""xfailed"" is fine). If you've installed `qutip` from `conda` following the [recommended instructions here](http://qutip.org/docs/latest/installation.html#platform-independent-installation), then you should have a valid installation without any issues, and Cython should have sorted itself out. The general principle is that installing `qutip` is as easy as running; ```conda install qutip```; if you've got the `conda-forge` channel activated.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1222#issuecomment-606166596:142,test,tests,142,https://qutip.org,https://github.com/qutip/qutip/issues/1222#issuecomment-606166596,2,['test'],"['testing', 'tests']"
Testability,"1. Gate T and S were defined at qutip.qip.operation. Since Pauli-X, Pauli-Y and Pauli-Z exist in qutip.operators, they were imported as functions into qutip.qip.operation. All functions were tested. ; 2. Each of the new gates was added to the circuit.py file. ; 3. Not apply.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209:191,test,tested,191,https://qutip.org,https://github.com/qutip/qutip/pull/1209,1,['test'],['tested']
Testability,"1. _Non-compound Hilbert spaces_: For state `A` on a simple non-compound Hilbert space, we should have `A.ptrace(0) == A` always. This has appeared as something useful in a few users' scripts (see #1239, #1413). This patch fixes the underlying bug in `_ptrace_dense` which caused this to fail (even though the logic should have supported it), and adds fast-paths to the dense and sparse partial trace functions to avoid doing work if all subspaces are being kept. Fix #1239; Fix #1413. 2. _Unsorted selections_: the tracing logic already ignores the order of the selection terms, this just fixes sparse ptrace's `dims` output. Fix #1325",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1414:310,log,logic,310,https://qutip.org,https://github.com/qutip/qutip/pull/1414,2,['log'],['logic']
Testability,1. _unit_site_H() is added that is used by display_unit_cell() and display_lattice(); 2. ImportError for matplotlib.pyplot is added.; 3. Some logical problems were fixed. @hodgestar Please review this branch.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1702:142,log,logical,142,https://qutip.org,https://github.com/qutip/qutip/pull/1702,1,['log'],['logical']
Testability,"1. inside the ""Actions"" tab at the top of the GitHub page, you will only see workflows that are present in the code in the default git branch. `dev.major` isn't QuTiP's default branch, so the workflows won't appear immediately after this is merged, only when the `.github/workflows/build.yml` file also exists in `master`. 2. nothing prevents you from running the workflow on a fork, and there's no way and no reason to prevent this - it's also how I tested it. If you did run it on a fork, you'd be using your own GitHub Actions credits (it doesn't cost us anything because we're an open-source project). Only qutip/qutip knows the secret to publish to PyPI, so no fork can succeed on that. The branch check here serves two purposes: the first is that I needed some ""tickbox"" to let the admin decide at runtime whether they needed to publish the package or just build the wheels for personal download; the second is that we release off release branches, not master, so there needed to be an input to say _which_ branch should be built. 3. it's not 100% necessary, but it's the right thing to do. It decouples the project data from the setup code, which makes it much easier to modify both, and allows other tools to access the data. There are other PEPs in the works as well that will move all this data into `pyproject.toml`, rather than just `setup.cfg`. 4. oh, that's useful. I didn't really know or look into it, because it was only a temporary thing anyway. I might actually retire this PR and make it against `master` instead. It's functionally the same as this one, and most of the diff is the same, except that its `setup.py` is better organised, like Simon suggested.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429#issuecomment-801289045:451,test,tested,451,https://qutip.org,https://github.com/qutip/qutip/pull/1429#issuecomment-801289045,1,['test'],['tested']
Testability,"1. version 3.2.0 can not run testing in my mac system OS X EI Capitan. When I try:; `$ python3 -c ""import qutip.testing as qt; qt.run()""`; I get the follow message:; ; > ---; > ; > Ran 0 tests in 0.000s; 2. However, the testing.py and the folder 'tests' exist. I can run the test in the 'tests' folder one-by-one. For example, when I run:; `$ sudo python3 test_mesolve.py`; I get; ; > .....................; > Ran 21 tests in 48.167s; > ; > OK; 3. `sudo` is needed here for permission. For example, when I run: ; `$ python3 test_mesolve.py`; I get a set of the following error message. > # .....E...E.E...E..E..; > ## ERROR: mesolve: time-dependence as array with super as init cond; > ; > Traceback (most recent call last):; > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/nose/case.py"", line 198, in runTest; > self.test(*self.arg); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/tests/test_mesolve.py"", line 638, in testMETDDecayAsArray; > out1 = mesolve(H, psi0, tlist, c_op_list, []); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 277, in mesolve; > progress_bar); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/mesolve.py"", line 661, in _mesolve_list_str_td; > cgen.generate(config.tdname + "".pyx""); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 116, in generate; > self.file(filename); > File ""/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/qutip-3.2.0.dev0-py3.5-macosx-10.6-intel.egg/qutip/cy/codegen.py"", line 78, in file; > self.file = open(filename, ""w""); > PermissionError: [Errno 13] Permission denied: 'rhs165050.pyx",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/445:29,test,testing,29,https://qutip.org,https://github.com/qutip/qutip/issues/445,9,['test'],"['test', 'testing', 'tests']"
Testability,1.0-arm64-3.9/numpy/core; copying numpy/core/_exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_type_aliases.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/cversions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/code_generators/generate_numpy_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; creating build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.m,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16105,test,tests,16105,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> bui,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12238,test,tests,12238,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ model] ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_03_simple_check_states_e_ops_H_ising_transverse ✓ 94% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_05_check_e_ops_none[small dim-normal tlist] ✓ 94% █████████▍. ―――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――― TestKrylovSolve.test_9_happy_breakdown_simple[eigenstate] ――――――――――――――――――――――――――――――――――――――",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:4045,test,tests,4045,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,1s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[QFT-Qobj propagation]; 2.65s call test_control_pulseoptim.py::TestOptimization::test_crab[Qobj propagation]; 2.57s call test_wigner.py::test_wigner_compare_methods_dm; 2.46s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Symplectic coupled oscillators-Qobj propagation]; 2.31s call test,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:2709,Test,TestOptimization,2709,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestOptimization']
Testability,"2 improvement to Qobj:; - `inv` method. (close #1102); - faster `ptrace` using dense matrix (taken from #1076); Both dense and sparse method are kept. Default is use sparse method when the matrix density in under 10%. `inv` method also has a sparse and dense version, but sparse is almost always slower. Some improvement to random Qobj to remove edge case. Tests are updated. (Not merge ready yet.)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1113:357,Test,Tests,357,https://qutip.org,https://github.com/qutip/qutip/pull/1113,1,['Test'],['Tests']
Testability,"2*GammaL)**2); ); ; np.testing.assert_allclose(current, current_target, atol=1e-4); > np.testing.assert_allclose(noise, noise_target, atol=1e-4); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=0.0001; E ; E Mismatched elements: 1 / 20 (5%); E Max absolute difference: 0.01597663; E Max relative difference: 11.81715334; E x: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.017329, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]); E y: array([0.000773, 0.000879, 0.000996, 0.001121, 0.001245, 0.001352,; E 0.001422, 0.001443, 0.001422, 0.001393, 0.001393, 0.001422,; E 0.001443, 0.001422, 0.001352, 0.001245, 0.001121, 0.000996,; E 0.000879, 0.000773]). /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/tests/test_countstat.py:58: AssertionError; _________________________________________________________________________ test_scheduling_gates3[circuit2 ALAP no shuffle] __________________________________________________________________________. circuit = <qutip.qip.circuit.QubitCircuit object at 0x12c081640>, method = 'ALAP', expected_length = 5, random_shuffle = False, gates_schedule = False. @pytest.mark.parametrize(; ""circuit, method, expected_length, random_shuffle, gates_schedule"",; [; pytest.param(deepcopy(_circuit2()), ""ALAP"", 5, False, False, id=""circuit2 ALAP no shuffle""); ]); def test_scheduling_gates3(; circuit, method, expected_length, random_shuffle, gates_schedule):; if random_shuffle:; repeat_num = 5; else:; repeat_num = 0; result0 = gate_sequence_product(circuit.propagators()); ; # run the scheduler; scheduler = Scheduler(method); gate_cycle_indices = scheduler.schedule(; circuit, gates_schedule=gates_schedule, repeat_num=repeat_num); ; # check if the scheduled length is expected; > assert(max(gate_cycle_indices) == expected_length); E assert 4 == 5; E +4; E -5. /opt/homebrew/Caskroom/miniforge/base/e",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:3005,Assert,AssertionError,3005,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Assert'],['AssertionError']
Testability,"2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break; return qutip.Qobj(flat.reshape(qobj.shape), dims=qobj.dims); ; @@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:24493,test,test,24493,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,2,['test'],"['test', 'tests']"
Testability,"2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Libr",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3311,test,test,3311,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"2int(_Cython.__version__) < _version2int(_cy_require):; + warnings.warn(; + ""Old version of Cython detected: needed {}, got {}.""; + .format(_cy_require, _Cython.__version__); + ); + if _version2int(_Cython.__version__) >= _version2int(_cy_unsupported):; + warnings.warn(; + ""The new version of Cython, (>= 3.0.0) is not supported.""; + .format(_Cython.__version__); + ); + else:; + # Setup pyximport; + import qutip.cy.pyxbuilder as _pyxbuilder; + _pyxbuilder.install(); + del _pyxbuilder, _Cython, _version2int; + qutip.settings.has_cython = True; ; ; # -----------------------------------------------------------------------------; Index: qutip/qutip/tests/test_brmesolve_td.py; ===================================================================; --- qutip.orig/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; @@ -148,7 +148,8 @@; brme = qutip.brmesolve(H, psi0, times, a_ops, e_ops=[a.dag()*a]); assert np.mean(np.abs(brme.expect[0] - exact) / exact) < 1e-5; ; -; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); @@ -232,6 +233,8 @@; [(a, a.dag()), (spectrum, '1', '1')]]); ; ; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); @pytest.mark.parametrize(""collapse_operators"", [; _2_tuple_split,; pytest.param(_4_tuple_split, marks=pytest.mark.slow),; Index: qutip/qutip/about.py; ===================================================================; --- qutip.orig/qutip/about.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/about.py	2024-01-16 03:54:39.029027082 +0100; @@ -44,7 +44,8 @@; cython_ver = Cython.__version__; except ImportError:; cython_ver = 'None'; - print(""Cython Version: %s"" % cython_ver); + print(""Cython Version: %s%s"" % (cython_ver,; + """" if cython_ver == 'None' or qutip.settings.has_cython else ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543:2533,assert,assert,2533,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543,1,['assert'],['assert']
Testability,"2int; - qutip.settings.has_cython = True; + from qutip.utilities import _version2int; + _cy_require = ""0.29.20""; + _cy_unsupported = ""3.0.0""; + if _version2int(_Cython.__version__) < _version2int(_cy_require):; + warnings.warn(; + ""Old version of Cython detected: needed {}, got {}.""; + .format(_cy_require, _Cython.__version__); + ); + if _version2int(_Cython.__version__) >= _version2int(_cy_unsupported):; + warnings.warn(; + ""The new version of Cython, (>= 3.0.0) is not supported.""; + .format(_Cython.__version__); + ); + else:; + # Setup pyximport; + import qutip.cy.pyxbuilder as _pyxbuilder; + _pyxbuilder.install(); + del _pyxbuilder, _Cython, _version2int; + qutip.settings.has_cython = True; ; ; # -----------------------------------------------------------------------------; Index: qutip/qutip/tests/test_brmesolve_td.py; ===================================================================; --- qutip.orig/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/tests/test_brmesolve_td.py	2024-01-16 03:52:59.780085342 +0100; @@ -148,7 +148,8 @@; brme = qutip.brmesolve(H, psi0, times, a_ops, e_ops=[a.dag()*a]); assert np.mean(np.abs(brme.expect[0] - exact) / exact) < 1e-5; ; -; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); @@ -232,6 +233,8 @@; [(a, a.dag()), (spectrum, '1', '1')]]); ; ; +@pytest.mark.skipif(not qutip.settings.has_cython,; + reason=""cython support is not available""); @pytest.mark.parametrize(""collapse_operators"", [; _2_tuple_split,; pytest.param(_4_tuple_split, marks=pytest.mark.slow),; Index: qutip/qutip/about.py; ===================================================================; --- qutip.orig/qutip/about.py	2024-01-16 03:52:59.780085342 +0100; +++ qutip/qutip/about.py	2024-01-16 03:54:39.029027082 +0100; @@ -44,7 +44,8 @@; cython_ver = Cython.__version__; except ImportError:; cython_ver = 'None';",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543:2382,test,tests,2382,https://qutip.org,https://github.com/qutip/qutip/issues/2293#issuecomment-1893522543,1,['test'],['tests']
Testability,2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_crackfortran.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; copying numpy/fft/_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft; creating build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_pocketfft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/tests/test_helper.py -> build/lib.macosx-11.0-arm64-3.9/numpy/fft/tests; copying numpy/fft/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31991,test,tests,31991,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,3 test runs successful and 4th started.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2013#issuecomment-1318447588:2,test,test,2,https://qutip.org,https://github.com/qutip/qutip/pull/2013#issuecomment-1318447588,1,['test'],['test']
Testability,3 tests fail,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:2,test,tests,2,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['test'],['tests']
Testability,"3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the same ""bandwidth"" of 5, so I assume they are all equivalent. I don't really know anything about the theory here, and just went with what the `matlab` documentation said: https://uk.mathworks.com/help/matlab/ref/symrcm.html. In commit 0ce36d00 it is clear that the functions in `qutip.graph` were meant to be distinct from `Qobj`, so ideally they would be beyond our purview in this package. This actually has already lead to problems with the documentation, since the docstrings in; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L50-L53; and; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/graph.py#L71-L74; are out-of-date. I find that the only uses of `qutip.graph` are in `qutip.steadystate`, which uses `reverse_cuthill_mckee` and `weighted_bipartite_matching`. The former can be replaced directly with the `scipy` version, at the cost of ~10% speed. The latter is not yet in `scipy`, so we ought to perhaps keep it, since it is used and documented for `qutip.steadystate.steadystate`. All other functions in `qutip.graph` are not used, and not documented (and in `scipy` anyway). While obviously I don't want to trample on anybody's code, I think it might be worth considering how we can reduce the package complexity of `qutip`, especially while significant new complexity is frequently being added in the interests of speed. We only have a finite amount of resources to maintain the codebase, and it's already quite difficult to get a handle on bug reports, documentation, testing (what I'm working on in #1181), and keeping old features up-to-date with the new. In the tracking down of these points, I can also strongly advocate for a stricter policy on `git` commit messages and keeping the commit history tidy and descriptive, but I'll live to fight another day on that one!",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:4001,test,testing,4001,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['testing']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3184,test,test,3184,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); __________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py __________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:11392,test,test,11392,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:19372,test,test,19372,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23115,test,test,23115,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,3.9/numpy/core/tests; copying numpy/core/tests/test_numerictypes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarmath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_item_selection.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_machar.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_unicode.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_arrayprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarbuffer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexerrors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_print.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_half.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_mem_overlap.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_deprecations.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_errstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarinherit.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_indexing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.mac,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:16678,test,tests,16678,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,3.9/numpy/core/tests; copying numpy/core/tests/test_umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18504,test,tests,18504,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,4-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> buil,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:12584,test,tests,12584,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,4-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_chebyshev.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite_e.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_laguerre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_legendre.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_printing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_hermite.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_classes.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; copying numpy/polynomial/tests/test_polyutils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/polynomial/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/_pickle.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; copying numpy/random/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random; creating build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_direct.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_extending.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py ->,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:43039,test,tests,43039,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,"5)*U.dag()</code> ? --> **We can test it with that one**.; * [x] Clean imports on <code>test_krylovsolve</code>; <code>qeye</code> imported twice, <code>run_module_suite</code> never used, etc.; * [x] Header no longer used. --> **Removed.**; * [x] Why is <code>os.environ['QUTIP_GRAPHICS'] = ""NO""</code> needed? --> **Remained from the original copy from test_sesolve.py**; * [x] Why not simply compare to <code>sesolve</code> ? --> **Is easier, so we swap it.**; * [x] Naming this fidelity feels wrong with the <code>1-...</code>. Also make Qobj and array conversions more efficiently with Naming this fidelity feels wrong with the <code>1-....</code>; You don't need to work go back and forth between <code>Qobj</code> and array. Also make things more efficiently with <code>1 - np.abs(psi_exact.overlap(psi_k))**2</code>. --> **Corrected.**; * [x] More efficiently <code>psi0=qutip.rand_ket(dim)</code>. --> **Corrected.**; * [x] Why compute 3 expectation values if only one is tested?; Also please use the normal <code>assert</code> instead of numpy's <code>assert_</code>. We are slowly removing them since we migrated from unitest to pytest. --> **Now all of them are checked and using <code>asset</code>**. #### <code>krylovsolve.py</code>. * [x] <code>isinstance</code> should be tested first since if it isn't, <code>psi0.isket</code> will raise an error before reaching it. It should raise a <code>TypeError</code>.; * [x] Please raise an error instead of using <code>assert</code>, since it can be suppressed.; * [x] Testing for dims instead of shape would be better. --> **Done.**; * [x] Empty progress bars can be ignored.; * [x] Improve the print at <code>particular_tlist</code> using <code>warnings.warn</code>. Properly describe the warning.; * [x] Swap illinois algorithm with a root finder from scipy. --> **Now using <code>scipy.optimize.root_finder</code>**.; * [x] <code>n_iterations</code> become <code>delta_t</code> when <code>optimizer</code> is called. It does not seems to",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233:1237,test,tested,1237,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1041914233,2,"['assert', 'test']","['assert', 'tested']"
Testability,"5, in run_command; cmd_obj.run(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 186, in run; _build_ext.build_ext.run(self); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 339, in run; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module rhs278052 failed: ['distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat\n']. ======================================================================; ERROR: Steady state: Driven cavity - power-gmres solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_steadystate.py"", line 490, in test_driven_cavity_power_gmres; use_precond=1); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\steadystate.py"", line 306, in steadystate; return _steadystate_power(A, ss_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\steadystate.py"", line 938, in _steadystate_power; check)); Exception: power-gmres failed to find solution in 1000 iterations. ----------------------------------------------------------------------; Ran 564 tests in 898.617s. FAILED (SKIP=9, errors=57)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:29892,test,test,29892,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,3,['test'],"['test', 'tests']"
Testability,5.75s call test_stochastic_me.py::test_ssesolve_feedback; 33.73s call test_stochastic_se.py::test_ssesolve_feedback; 25.80s call test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; 24.41s call test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; 21.83s call test_propagator.py::testPropHOStrTd; 19.95s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; 17.73s call test_qobjevo.py::test_QobjEvo_expect_rho; 16.52s call test_stochastic_me.py::test_smesolve_homodyne; 15.79s call test_qobjevo.py::test_QobjEvo_call; 12.67s call test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; 12.37s call test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; 11.43s call test_qobjevo.py::test_QobjEvo_mul_mat; 10.89s call test_spmath.py::test_csr_kron; 10.83s call test_qobjevo.py::test_QobjEvo_expect_psi; 9.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[QFT-Qobj propagation]; 9.40s call test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; 9.32s call test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; 8.74s call test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; 8.38s call test_qobjevo.py::test_QobjEvo_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_i,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:1207,Test,TestOptimization,1207,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestOptimization']
Testability,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_gnu.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/misc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/internals.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/creation.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; copying numpy/doc/dispatch.py -> build/lib.macosx-11.0-arm64-3.9/numpy/doc; ,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:27014,test,tests,27014,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,5.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/mips.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/hpux.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/environment.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/pathf95.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/absoft.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; copying numpy/distutils/fcompiler/vast.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/fcompiler; creating build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_system_info.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_mingw32ccompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_from_template.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_intel.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_misc_util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_shell_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_exec_command.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_npy_pkg_config.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fcompiler_nagfor.py -> build/lib.macosx-11.0-arm64-3.9/numpy/distutils/tests; copying numpy/distutils/tests/test_fc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:26586,test,tests,26586,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' h,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:50222,test,test-environment,50222,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,"61341876996443e-08]); > ```; > ; > Is it normal? You did not include any test using `time_sense`.; > ; > ​. The relaxation of the secular approximation isn't by direct time-dependence. It was originally, but this was later changed to relax the secular approximation according to the ""importance"" of each term, which is dictated by a quotient. The numerator of the quotient is the product of the FFT coefficients that make up a certain element of the rate matrix super operator, and the denominator is the difference of frequencies between the two elements multiplied by the system frequency omega. When `time_sense` is `0`, the rate matrix is constructed using only the product of FFT coefficients for which the frequency arguments completely cancel. When `timesense` isn't `0`, however, is when that quotient comes into play. In a nutshell, this ends up dividing the rate at which a certain element changes the system by the frequency at which that rate rotates in the Floquet Basis. If the result of the quotient is small, the frequency is much higher than the collapse operator elements actually affect the system, such that it averages out on longer timescales. If the result of the quotient is large, then the collapse operator elements appreciably change the system on a shorter timescale than they rotate, such that their contribution to the overall matrix can't be ignored. If I've explained this poorly, which I suspect is the case since I'm not sure how to add equations here or if that's possible, I can email you with a more thorough explanation. . I haven't included tests for the latter case yet mostly due to my only dealing with systems heavily dictated by their primary frequency, so far. I'm working on a system now that should show different behavior for different secular approximations, but my results look slightly different from the published results such that I'm not sure I'm very confident in what I've done, yet. I'll try to update with a test for this when I can, however.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1631503788:2238,test,tests,2238,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1631503788,2,['test'],"['test', 'tests']"
Testability,64-3.7/qutip/_mkl; copying qutip/_mkl/spmv.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/spsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; copying qutip/_mkl/utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/_mkl; creating build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_tensor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brtools.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spinchain.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_spmath.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mkl.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_basis_transformation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_td_formats.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_noise.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubit_evolution.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_heom_solver.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve_td.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_metrics.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:11711,test,tests,11711,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"64.egg/qutip/tests/core/test_coefficient.py:292:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; qutip/core/cy/coefficient.pyx:126: in qutip.core.cy.coefficient.Coefficient.__call__; ???; qutip/core/cy/coefficient.pyx:346: in qutip.core.cy.coefficient.StrFunctionCoefficient._call; ???; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. t = 0.0, args = {'op': CSR(shape=(3, 3), nnz=3)}. > ???; E NameError: name 'expect_csr' is not defined. <string>:4: NameError; ======================================================================= short test summary info =======================================================================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts ==============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:7160,test,tests,7160,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"644; --- a/qutip/tests/test_expect.py; +++ b/qutip/tests/test_expect.py; @@ -120,7 +120,7 @@ def test_equivalent_to_matrix_element(hermitian):; state = qutip.rand_ket(dimension, 0.3); op = qutip.rand_herm(dimension, 0.2); if not hermitian:; - op = op + 1j*qutip.rand_herm(dimension, 0.1); + op += 1j * qutip.rand_herm(dimension, 0.1); expected = (state.dag() * op * state).data[0, 0]; assert abs(qutip.expect(op, state) - expected) < 1e-14; ; diff --git a/qutip/tests/test_fileio.py b/qutip/tests/test_fileio.py; index b02e8cb9..db237a41 100644; --- a/qutip/tests/test_fileio.py; +++ b/qutip/tests/test_fileio.py; @@ -22,7 +22,7 @@ class Test_file_data_store_file_data_read:; def case(self, filename, kwargs):; data = 1 - 2*np.random.rand(_dimension, _dimension); if kwargs.get('numtype', 'complex') == 'complex':; - data = data * (0.5*0.5j); + data *= 0.5 * 0.5j; qutip.file_data_store(filename, data, **kwargs); out = qutip.file_data_read(filename); np.testing.assert_allclose(data, out, atol=1e-8); diff --git a/qutip/tests/test_gates.py b/qutip/tests/test_gates.py; index d42ba373..0a24b79a 100644; --- a/qutip/tests/test_gates.py; +++ b/qutip/tests/test_gates.py; @@ -24,7 +24,7 @@ def _remove_global_phase(qobj):; for phase in flat:; if phase != 0:; # Fix the gauge for any global phase.; - flat = flat * np.exp(-1j * np.angle(phase)); + flat *= np.exp(-1j * np.angle(phase)); break; return qutip.Qobj(flat.reshape(qobj.shape), dims=qobj.dims); ; @@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:23829,test,tests,23829,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,7-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/version.py 3 0 100%; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; TOTAL 427 241 44%; =========================== short test summary info ============================; ERROR ../tests/test_basis_transformation.py; ERROR ../tests/test_brmesolve.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_brmesolve_td.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_brtools.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_cavityqed.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_control_pulseoptim.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_correlation.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_countstat.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_cy_structs.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_dimensions.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_eigenstates.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_enr_state_operator.py - AttributeError: module 'qutip' ha...; ERROR ../tests/test_entropy.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_expect.py - Att,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:50821,test,tests,50821,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,"739b width=45% height=45%> <img src=https://github.com/qutip/qutip/assets/78165605/346835ab-5065-4180-b4dd-3a9b8b99dc45 width=45% height=45%>. <img src=https://github.com/qutip/qutip/assets/78165605/20e28bba-a720-4197-b6c8-a5bbb26814ec width=45% height=45%> <img src=https://github.com/qutip/qutip/assets/78165605/8c987724-d7b1-49bb-ab1b-e25908673425 width=45% height=45%>. For before and after changes the plots using the default colors are the same (these are styles 'l', 's' and 'm' in that order):. <img src=https://github.com/qutip/qutip/assets/78165605/3d995e25-8f7e-4240-9707-cb3d6e562cb5 width=30% height=30%> <img src=https://github.com/qutip/qutip/assets/78165605/d1ac9aed-063d-472d-99b7-b935522f308e width=30% height=30%><img src=https://github.com/qutip/qutip/assets/78165605/4dfaa6d9-3691-4e71-83d9-3418869c0103 width=30% height=30%> . Making more tests I found the error with style 'l' that I mentioned in issue #1974, which consisted in an erratic plotting after sorting the points. Here we can see some results of those tests before the changes (style 'l' using the `point_color` and `point_default_color` variables, plus 'm' with the `point_color` variable):. <img src=https://github.com/qutip/qutip/assets/78165605/f8217060-dbff-4012-bf63-98750744e93f width=30% height=30%> <img src=https://github.com/qutip/qutip/assets/78165605/e4e7be6c-6883-4cf5-a71f-1542aea1be75 width=30% height=30%><img src=https://github.com/qutip/qutip/assets/78165605/e6292945-a742-4a10-b434-86b462044049 width=30% height=30%> . And as we can see after the changes, the 'l' style plotting is as expected and the 'm' style plotting has all the colors we defined:. <img src=https://github.com/qutip/qutip/assets/78165605/67fc3442-ad19-45c2-955e-5a7df85217db width=30% height=30%> <img src=https://github.com/qutip/qutip/assets/78165605/4d87cee0-c3c8-46d6-989b-50fac85ec0cd width=30% height=30%><img src=https://github.com/qutip/qutip/assets/78165605/83c8cac0-f12e-4af4-96df-4be972b485d4 width=30% height=30%>",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2308#issuecomment-1913220617:1818,test,tests,1818,https://qutip.org,https://github.com/qutip/qutip/pull/2308#issuecomment-1913220617,1,['test'],['tests']
Testability,"78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator. Alternative name to :func:`qeye`.; 494; 495 Parameters; (...); 506 Identity operator Qobj.; 507 """"""; --> 508 return qeye(dims). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:488, in qeye(dimensions); 452 """"""; 453 Identity operator.; 454; (...); 485; 486 """"""; 487 size, dimensions = _implicit_tensor_dimensions(dimensions); --> 488 return Qobj(fast_identity(size),; 489 dims=dimensions, isherm=True, isunitary=True). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:389, in fast_identity(N); 387 ptr = np.arange(N+1, dtype=np.int32); 388 ptr[-1] = N; --> 389 return fast_csr_matrix((data,ind,ptr),shape=(N,N)). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\fastsparse.py:55, in fast_csr_matrix.__init__(self, args, shape, dtype, copy); 53 self.dtype = complex; 54 self.maxprint = 50; ---> 55 self.format = 'csr'. AttributeError: property 'format' of 'fast_csr_matrix' object has no setter; ```. ### Expected Behaviour. I expected to be able to import qutip :) . ### Your Environment. ```shell; QuTiP Version: 4.7.1; Numpy Version: 1.25.0; Scipy Version: 1.11.0; Cython Version: None; Matplotlib Version: None; Python Version: 3.11.4; Number of CPUs: 8; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Windows (AMD64); ```. ### Additional Context. The environment above was generated with `scipy==1.10.1` (which still worked); I've changed the Scipy version to `1.11.0` manually in that list. Forcing `scipy==1.10.1`, resolves the problem. Hence, I'm under the impression that the recent bump of `scipy` to `1.11.0` is causing the issue.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:3077,test,test-env-scipy-qutip,3077,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"8549686147162.pyx. /usr/lib/python3/dist-packages/qutip/qobjevo_codegen.py:52: Exception; ================================================================================================================================ short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coef",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23402,Test,TestTimeDependence,23402,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['Test'],['TestTimeDependence']
Testability,86_64-3.7/qutip/tests; copying qutip/tests/test_three_level.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superoper.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_propagator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qft.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13374,test,tests,13374,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,89s call test_spmath.py::test_csr_kron; 10.83s call test_qobjevo.py::test_QobjEvo_expect_psi; 9.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[QFT-Qobj propagation]; 9.40s call test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; 9.32s call test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; 8.74s call test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; 8.38s call test_qobjevo.py::test_QobjEvo_call_args; 8.37s call test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; 8.34s call test_qobjevo.py::test_QobjEvo_pickle; 8.21s call test_qobjevo.py::test_QobjEvo_safepickle; 8.11s call test_qobjevo.py::test_QobjEvo_with_state; 7.79s call test_scattering.py::TestScattering::testScatteringProbability; 7.69s call test_brtools.py::test_diag_liou_mult; 7.48s call test_qobjevo.py::test_QobjEvo_mul_vec; 6.89s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Symplectic coupled oscillators-Qobj propagation]; 6.04s call test_qubit_evolution.py::test_MCSolverCase1; 5.90s call test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_st,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:2020,Test,TestOptimization,2020,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,1,['Test'],['TestOptimization']
Testability,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubits.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macos,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13718,test,tests,13718,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_me.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_optpulseprocessor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qpt.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_enr_state_operator.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qubitcircuit.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_states.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_steadystate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_operators.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:13803,test,tests,13803,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,"9.0-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.2 kB); Using cached setuptools-70.0.0-py3-none-any.whl (863 kB); Using cached packaging-24.0-py3-none-any.whl (53 kB); Using cached wheel-0.43.0-py3-none-any.whl (65 kB); Using cached Cython-3.0.2-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.6 MB); Using cached oldest_supported_numpy-2023.12.21-py3-none-any.whl (4.9 kB); Using cached numpy-1.17.3-cp38-cp38-manylinux1_x86_64.whl (20.5 MB); Using cached scipy-1.8.1-cp38-cp38-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (41.6 MB); Installing collected packages: wheel, setuptools, packaging, numpy, cython, scipy, oldest-supported-numpy; ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.; launchpadlib 1.10.13 requires testresources, which is not installed.; awkward-cpp 26 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; awkward 2.5.0 requires numpy>=1.18.0, but you have numpy 1.17.3 which is incompatible.; matplotlib 3.7.4 requires numpy<2,>=1.20, but you have numpy 1.17.3 which is incompatible.; pandas 2.0.3 requires numpy>=1.20.3; python_version < ""3.10"", but you have numpy 1.17.3 which is incompatible.; Successfully installed cython-3.0.2 numpy-1.17.3 oldest-supported-numpy-2023.12.21 packaging-24.0 scipy-1.8.1 setuptools-70.0.0 wheel-0.43.0; Installing build dependencies ... done; Running command Getting requirements to build wheel; Compiling qutip/core/_brtensor.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/Cython/Includes/libcpp/vector.pxd.; Compiling qutip/core/_brtools.pyx because it depends on /tmp/pip-build-env-t_hh31dy/overlay/lib/python3.8/site-packages/scipy/linalg.pxd.; Compiling qutip/solver/sode/ssystem.pyx because it depends on",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2440:3657,test,testresources,3657,https://qutip.org,https://github.com/qutip/qutip/issues/2440,1,['test'],['testresources']
Testability,"9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15915,test,test,15915,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"9/lib/python/site-packages/qutip/tests/test_spmath.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py:2: in <module>; from numpy.testing import (run_module_suite, assert_,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py _____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:22080,test,test,22080,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,9/numpy/core/tests; copying numpy/core/tests/test_numeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_datetime.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test__exceptions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_extint128.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_complex.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/_locales.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_defchararray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_conversion_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalarprint.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_abc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_ufunc.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_umath_accuracy.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_getlimits.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_einsum.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_api.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_longdouble.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_overrides.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_scalar_ctors.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core/tests; copying numpy/core/tests/test_multiarray.py -> build/lib.maco,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:18602,test,tests,18602,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_quoted_character.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_parameter.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_semicolon_split.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_compile_function.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_block_docstring.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_integer.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_re,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:31015,test,tests,31015,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_doctesting.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_warnings.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying numpy/tests/test_matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy/tests; copying nump,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:45401,test,testing,45401,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,9/numpy; copying numpy/_distributor_init.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/ctypeslib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/matlib.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying numpy/_pytesttester.py -> build/lib.macosx-11.0-arm64-3.9/numpy; copying build/src.macosx-11.0-arm64-3.9/numpy/__config__.py -> build/lib.macosx-11.0-arm64-3.9/numpy; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/py3k.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; copying numpy/compat/_inspect.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat; creating build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; copying numpy/compat/tests/test_compat.py -> build/lib.macosx-11.0-arm64-3.9/numpy/compat/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/umath.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/fromnumeric.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_dtype.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_add_newdocs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_methods.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_internal.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_string_helpers.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/multiarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/_asarray.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/records.py -> build/lib.macosx-11.0-arm64-3.9/numpy/core; copying numpy/core/__init__.py -> build/lib.macosx-11.0-arm64-3.9/nu,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:13004,test,tests,13004,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,": comparing TLS emission corr. (str-list td format) ... ok; correlation: comparing TLS emission corr. (np-list td format) ... ok; correlation: comparing TLS emission corr. (fn-list td format) ... ok; Counting statistics: current and current noise in a DQD model ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP and propogator ... ok; Dispersive cQED Setup: compare unitary matrix for ISWAP, SQRTISWAP, ... ok; Cython structs : COO to CSR ... ok; Cython structs : sort CSR indices inplace ... ok; Cython structs : COO to CSR inplace (no sort) ... ok; Cython structs : COO to CSR inplace (sorted) ... ok; Cython structs : CSR to COO ... ok; qutip.tests.test_dimensions.test_flatten ... ok; qutip.tests.test_dimensions.test_enumerate_flat ... ok; qutip.tests.test_dimensions.test_deep_remove ... ok; qutip.tests.test_dimensions.test_unflatten ... ok; qutip.tests.test_dimensions.test_dims_idxs_to_tensor_idxs ... ok; qutip.tests.test_dimensions.test_dims_to_tensor_shape ... ok; qutip.tests.test_dimensions.test_type_from_dims ... ok; qutip.tests.test_dimensions.test_collapse ... ok; Diagonalization of random two-level system ... ok; Diagonalization of composite systems ... ok; Excitation-number-restricted state-space: full state space ... ok; Excitation-number-restricted state space: single excitations ... ok; Excitation-number-restricted state space: two excitations ... ok; Excitation-number-restricted state space: fock states ... ok; Excitation-number-restricted state space: identity operator ... ok; Excitation-number-restricted state space: thermal density operator (I) ... ok; Excitation-number-restricted state space: thermal density operator (II) ... ok; Entropy: von-Neumann entropy ... ok; Entropy: Linear entropy ... ok; Entropy: Concurrence ... ok; Entropy: Mutual information ... ok; Entropy: Conditional entropy ... ok; Entropy: Entangling power ... ok; expect: operator list and state list ... ok; expect: operator and density matrix ... ok; expect: operator and k",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:6799,test,tests,6799,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['test'],['tests']
Testability,"://github.com/scipy/scipy/releases) is the culprit (released 14 hrs ago at the time of writing) - reducing from `scipy==1.11.0` to `scipy==1.10.1` resolves the issue for me. ### Code to Reproduce the Bug. ```shell; import qutip; ```. ### Code Output. ```shell; Cell In[1], line 1; ----> 1 import qutip. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\__init__.py:106; 98 del matplotlib; 101 # -----------------------------------------------------------------------------; 102 # Load modules; 103 #; 104; 105 # core; --> 106 from qutip.qobj import *; 107 from qutip.qobjevo import *; 108 from qutip.states import *. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\qobj.py:2526; 2523 # TRAILING IMPORTS; 2524 # We do a few imports here to avoid circular dependencies.; 2525 from qutip.eseries import eseries; -> 2526 import qutip.superop_reps as sr; 2527 import qutip.tensor as tensor; 2528 import qutip.operators as ops. File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\superop_reps.py:74; 61 return Qobj(dims=[[[2], [2]], [[2], [2]]],; 62 inpt=array([[1. - pe / 2., 0., 0., 1. - pe],; 63 [0., pe / 2., 0., 0.],; 64 [0., 0., pe / 2., 0.],; 65 [1. - pe, 0., 0., 1. - pe / 2.]]),; 66 superrep='choi'); 69 # CHANGE OF BASIS FUNCTIONS ---------------------------------------------------; 70 # These functions find change of basis matrices, and are useful in converting; 71 # between (for instance) Choi and chi matrices. At some point, these should; 72 # probably be moved out to another module.; ---> 74 _SINGLE_QUBIT_PAULI_BASIS = (identity(2), sigmax(), sigmay(), sigmaz()); 77 def _pauli_basis(nq=1):; 78 # NOTE: This is slow as can be.; 79 # TODO: Make this sparse. CSR format was causing problems for the [idx, :]; 80 # slicing below.; 81 B = zeros((4 ** nq, 4 ** nq), dtype=complex). File ~\mambaforge\envs\test-env-scipy-qutip\Lib\site-packages\qutip\operators.py:508, in identity(dims); 492 def identity(dims):; 493 """"""Identity operator.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2182:1358,test,test-env-scipy-qutip,1358,https://qutip.org,https://github.com/qutip/qutip/issues/2182,1,['test'],['test-env-scipy-qutip']
Testability,"://stackoverflow.com/questions/54314529/mkl-error-parameter-12-for-large-matrices-with-scipy-linalg-eigvalsh-in-an) , [bug report ](scipy/scipy#8205) that has been fixed by this [solution](scipy/scipy#11304) in the 1.5 release. This is related to the `linalg.eigh() API` which performs eigenvalue calculation, it causes error of this form `Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB`, which mostly the get silenced, and instead of terminating it just outputs an array of zeros except for the last entry. This issue occurs exclusively when using the API with high dimensional tensors, which are probably not being handled in the tests, but will inevitably cause miscalculations for the users as eigenvalue finding of hermitics is pervasive. **To Reproduce**; Just as an illustration you cun run . `pytest qutip/tests/test_superop_reps.py -s -k SuperChoiChi`. from the codes in #1491 in an environment like the generated for `coverage` tests in the CI. The terminal out put is; ```; qutip/tests/test_superop_reps.py ..; Intel MKL ERROR: Parameter 12 was incorrect on entry to ZHBRDB.; F. ================================================================= FAILURES ==================================================================; _________________________________________________ TestSuperopReps.test_SuperChoiChiSuper[8] _________________________________________________. self = <qutip.tests.test_superop_reps.TestSuperopReps object at 0x7f01d2d5c6d0>, dimension = 8. @pytest.mark.parametrize('dimension', [2, 4, 8]); def test_SuperChoiChiSuper(self, dimension):; """"""; Superoperator: Converting two-qubit superoperator through; Choi and chi representations goes back to right superoperator.; """"""; superoperator = super_tensor(rand_super(dimension), rand_super(dimension)); ; choi_matrix = to_choi(superoperator); chi_matrix = to_chi(choi_matrix); test_supe = to_super(chi_matrix); ; # Assert both that the result is close to expected, and has the right; # type.; #print(test_supe.d",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1495:1182,test,tests,1182,https://qutip.org,https://github.com/qutip/qutip/issues/1495,1,['test'],['tests']
Testability,":127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py:3: in <module>; from numpy.testing import (; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py:2: in <module>; from numpy.testing import assert_, run_module_suite, a",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:10810,test,tests,10810,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,":3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py:6: in <module>; from numpy.testing import assert_, run_module_suite, assert_equal, \; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27997,test,testing,27997,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H F,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:6937,test,tests,6937,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147102.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147112.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147122.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_76649686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_11349686147132.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coe",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:25036,test,tests,25036,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,":; - the versions in `scipy` and `qutip` did subsequently diverge in some form, because they no longer universally give the same results, possibly as a result of #654.; - the `qutip` version of `reverse_cuthill_mckee` is about 10% faster than the `scipy` version; - people may be using them. I think the main argument in favour of removal is that they're now also in `scipy` as `scipy.sparse.csgraph`. For the speed argument, for 1000 by 1000 matrices we're talking 780us vs 850us per matrix difference, so it's unlikely to be a limiting factor, and I think the ability to remove a large chunk of Cython code and maintainability cost outweighs this. I began investigating this because I was looking at `qutip.graph.reverse_cuthill_mckee`, since some of its tests are incorrect. The error is here:; https://github.com/qutip/qutip/blob/01132789581821517986fad1a14ab3feec7d2de2/qutip/tests/test_graph.py#L91-L108; Line 105 is broken: it should read; ```python; assert np.all(ans_perm == perm); ```; to test if _all_ the elements match. As it stands, it currently tests that _not all are different_, or in other words, it would only fail if not a single element in the two arrays matched. On fixing this line, we then learn that the test is actually a failing test, because the expected and actual results do not match (though they do however have equal bandwidths). I also note that `qutip` and `matlab` are in disagreement for the test case there: for the matrix; ```python; np.array([[0, 0, 0, 1, 0, 1, 0, 0, 0, 0],; [0, 0, 1, 0, 1, 0, 1, 0, 0, 1],; [0, 1, 0, 1, 1, 0, 0, 0, 0, 0],; [1, 0, 1, 0, 0, 1, 0, 0, 1, 0],; [0, 1, 1, 0, 0, 0, 1, 0, 0, 0],; [1, 0, 0, 1, 0, 0, 1, 1, 0, 0],; [0, 1, 0, 0, 1, 1, 0, 1, 0, 0],; [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],; [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],; [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]]); ```; we get; ```; qutip: [9, 6, 7, 1, 4, 5, 2, 0, 3, 8]; matlab: [0, 8, 5, 7, 3, 6, 4, 2, 1, 9]; ```; (where I converted the `matlab` indexing into 0-based), however they both have the s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1203:1440,test,test,1440,https://qutip.org,https://github.com/qutip/qutip/issues/1203,1,['test'],['test']
Testability,":; qutip/tests/solver/test_mesolve.py:33: in TestMESolveDecay; ada = a.dag() * a; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ======================================================== short test summary info =========================================================; ERROR qutip/tests/core/test_gates.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/core/test_qobjevo.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_integrator.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ERROR qutip/tests/solver/test_mesolve.py - TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 4 errors during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!; ============================================= 17 deselected, 40 warnings, 4 errors in 5.47s ==============================================; ```. ### Expected Behaviour. No errors. ### Your Environment. ```shell; QuTiP Version: 5.0.2; Numpy Version: 1.26.4; Scipy Version: 1.14.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:5241,test,test,5241,https://qutip.org,https://github.com/qutip/qutip/issues/2472,2,['test'],"['test', 'tests']"
Testability,":\Users\daniel\Anaconda\lib\site-packages\Cython\Distutils\build_ext.py"", line 163, in run; _build_ext.build_ext.run(self); File ""C:\Users\daniel\Anaconda\lib\distutils\command\build_ext.py"", line 337, in run; self.build_extensions(); File ""C:\Users\daniel\Anaconda\lib\site-packages\Cython\Distutils\build_ext.py"", line 171, in build_extensions; self.build_extension(ext); File ""C:\Users\daniel\Anaconda\lib\distutils\command\build_ext.py"", line 496, in build_extension; depends=ext.depends); File ""C:\Users\daniel\Anaconda\lib\distutils\msvc9compiler.py"", line 473, in compile; self.initialize(); File ""C:\Users\daniel\Anaconda\lib\distutils\msvc9compiler.py"", line 383, in initialize; vc_env = query_vcvarsall(VERSION, plat_spec); File ""C:\Users\daniel\Anaconda\lib\distutils\msvc9compiler.py"", line 271, in query_vcvarsall; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); ImportError: Building module qutip.cy.spmatfuncs failed: ['DistutilsPlatformError: Unable to find vcvarsall.bat\n']. I tried testing to see if it was installed correctly by typing import qutip.testing as qt and I get. Traceback (most recent call last):; File ""C:\Users\daniel\Anaconda\lib\site-packages\IPython\core\interactiveshell.py"", line 2883, in run_code; exec(code_obj, self.user_global_ns, self.user_ns); File ""<ipython-input-3-ae6395ba7937>"", line 1, in <module>; import qutip.testing as qt; File ""C:\Program Files (x86)\JetBrains\PyCharm Community Edition 4.0.4\helpers\pydev\pydev_import_hook.py"", line 21, in do_import; module = self._system_import(name, _args, *_kwargs); File ""C:\Users\daniel\Anaconda\lib\site-packages\qutip__init__.py"", line 62, in <module>; qutip.settings.ipython = False; AttributeError: 'module' object has no attribute 'settings'. I have also tried downloading the file, putting it in the folder Anaconda\pkgs, opening a command window, setting the path and installing it there. I don't get any error messages but I still cannot seem to import QuTiP. What am I doing wrong?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/343:4246,test,testing,4246,https://qutip.org,https://github.com/qutip/qutip/issues/343,3,['test'],['testing']
Testability,":laughing: Well, technically we still need to wait for the test. Glad to see 4.6.0 online!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1496#issuecomment-817381396:59,test,test,59,https://qutip.org,https://github.com/qutip/qutip/pull/1496#issuecomment-817381396,1,['test'],['test']
Testability,":test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They indicate there that this error can be triggered if windows managed by Xvfb are not properly closed before completing tests. So it's likely it's related to tests using matplotlib. The only test using matplot lib is testPlot in test_processor.py. Sure enough, if testPlot is skipped then test_processor.py passes successfully without triggering the XIO error. **To Reproduce**. Run test_processor.py directly:; ```; python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; ```. The terminal output is; ```; $ python3 -m pytest /usr/lib/python3/dist-packages/qutip/tests/test_processor.py -v; =============================================================================================== test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:2263,test,testPlot,2263,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['testPlot']
Testability,":test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still n",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1476,test,tests,1476,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ---------- coverage: platform linux, python 3.6.10-final-0 -----------; Name Stmts Miss Cover; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 11 39%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/hardware_info.py 72 32 56%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/settings.py 24 2 92%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/utilities.py 117 83 29%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:49452,test,test-environment,49452,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,; 5.71s call test_control_pulseoptim.py::TestFileIO::test_dumping_to_files; 5.67s call test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; 5.36s call test_mesolve.py::TestMESolveSuperInit::testSuperJC; 5.23s call test_parallel.py::test_serial_map; 5.11s call test_sesolve.py::TestSESolve::test_06_2_compare_state_and_unitary_func; 5.05s call test_partial_transpose.py::test_partial_transpose_comparison; 5.05s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Ising state-to-state-Qobj propagation]; 5.01s call test_qobj.py::test_dual_channel[sub_dimensions3]; 4.84s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsArray; 4.79s call test_parallel.py::test_parallel_map; 4.27s call test_spinchain.py::TestSpinChain::test_analytical_evo; 3.92s call test_stochastic_se.py::test_ssesolve_homodyne; 3.86s call test_correlation.py::TestTimeDependence::test_hamiltonian_from_function_2ls; 3.25s call test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsPartFuncList; 3.23s call test_control_pulseoptim.py::TestOptimization::test_unitarity_via_dump; 3.03s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[QFT-Qobj propagation]; 2.65s call test_control_pulseoptim.py::TestOptimization::test_crab[Qobj propagation]; 2.57s call test_wigner.py::test_wigner_compare_methods_dm; 2.46s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Symplectic coupled oscillators-Qobj propagation]; 2.31s call test_parallel.py::test_parfor1; 2.11s call test_wigner.py::test_wigner_bell1_su2parity; 1.90s call test_control_pulseoptim.py::TestOptimization::test_basic_optimization[Ising state-to-state-Qobj propagation]; 1.86s call test_sparse.py::test_sp_profile; 1.66s call test_correlation.py::test_correlation_solver_equivalence[es-legacy]; 1.65s call test_control_pulseoptim.py::TestOptimization::test_object_oriented_approach_and_gradient[Lindbladian amplitude damping channel-Qobj propagation]; 1.56s call ,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373:3231,Test,TestMESolveSuperInit,3231,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604116373,2,"['Test', 'test']","['TestMESolveSuperInit', 'testMETDDecayAsPartFuncList']"
Testability,"; > + s = s + 1; > +; > + return Qobj(jm_operator); > +; > +def ap( j, m):; >; > no space before j; > ------------------------------; >; > In qutip/models/dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168803599>:; >; > > +; > + if collective_emission != 0:; > + c_ops.append(np.sqrt(collective_emission) * jm); > +; > + if collective_dephasing != 0:; > + c_ops.append(np.sqrt(collective_dephasing) * jz); > +; > + if collective_pumping != 0:; > + c_ops.append(np.sqrt(collective_pumping) * jp); > +; > + return c_ops; > +; > +# ============================================================================; > +# State definitions in the Dicke basis with an option for basis transformation; > +# ============================================================================; > +def dicke_basis(N, jmm1 = None, basis = ""dicke""):; >; > pep8: no spaces in kwargs jmm1 = None should be jmm1=None.; > There are lots of examples in this file. I'll not mark them all; > ------------------------------; >; > In qutip/models/tests/test_dicke.py; > <https://github.com/qutip/qutip/pull/753#discussion_r168803988>:; >; > > + assert_equal(d3, d3_correct); > + assert_equal(d4, d4_correct); > +; > + def test_lindbladian(self):; > + """"""; > + Test the generation of the Lindbladian matrix; > + """"""; > + N = 1; > + gCE = 0.5; > + gCD = 0.5; > + gCP = 0.5; > + gE = 0.1; > + gD = 0.1; > + gP = 0.1; > +; > + system = Piqs(N = N, emission = gE, pumping = gP, dephasing = gD,; >; > spaces in kwargs. Quite a few other examples too, which I will not mark; > all of them; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168804323>:; >; > > @@ -0,0 +1,645 @@; > +""""""; >; > QuTiP license stuff needs to be included at the top of the file. You can; > add yourselves to the list of authors for these files; > ------------------------------; >; > In qutip/cy/dicke.pyx; > <https://github.com/qutip/qutip/pull/753#discussion_r168807920>:; >; ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-366305610:9804,test,tests,9804,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-366305610,1,['test'],['tests']
Testability,"; > L = qutip.liouvillian(H, c_ops); > rhoss = qutip.steadystate(L); > current, noise = qutip.countstat_current_noise(L, [],; > rhoss=rhoss,; > J_ops=J_ops); > ; > current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); > assert abs(current - current2) < 1e-8; > ; > current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); > assert abs(current - current2) < 1e-8; > ; > current_target = (tc**2 * GammaR; > / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps**2)); > noise_target = current_target * (; > 1 - (8*GammaL*tc**2*(4 * eps**2 * (GammaR - GammaL); > + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); > / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; > + 4*eps**2*GammaL)**2); > ); > ; > return current.flatten()[0], current_target, noise.flatten()[0], noise_target, rhoss; > ```; > ; > Now I have the following:; > ; > ```; > >>> res = current_noise_eps(1.04); > >>> print(res[2:4]); > (0.06374906663351243, 0.0011104778081249154); > ```; > ; > So the `noise` is quite different from `noise_target`.; > ; > But if I increment `eps` by `1e-15` then everything is fine.; > ; > ```; > >>> res1 = current_noise_eps(1.04+1e-15); > >>> print(res1); > (0.0011104778081249132, 0.0011104778081249143); > ```; > ; > Comparing `rhoss` in the two cases gives differences that are of the order of the increment in `eps`:; > ; > ```; > >>> print(res[-1].data.todense() - res1[-1].data.todense()); > [[ 1.11022302e-16+0.00000000e+00j 0.00000000e+00+0.00000000e+00j; > 0.00000000e+00+0.00000000e+00j]; > [ 0.00000000e+00+0.00000000e+00j -5.55111512e-16+0.00000000e+00j; > -1.11022302e-16+8.67361738e-19j]; > [ 0.00000000e+00+0.00000000e+00j -1.11022302e-16-8.67361738e-19j; > 2.22044605e-16+0.00000000e+00j]]; > ```; > ; > So I think the problem is not in the `steadystate` function but it must be in `countstat_current_noise`. Can someone tell me how to fix this? because I am also using mac M1, and this is the only test that keeps failing: test_countstat.py::test_dqd_current - AssertionError",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1993817100:2323,test,test,2323,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1993817100,2,"['Assert', 'test']","['AssertionError', 'test']"
Testability,"; >>> import qutip; >>> qutip.cnot(); __main__:1: DeprecationWarning: Importing functions/classes of the qip submodule directly from the namespace qutip is deprecated. Please import them from the submodule instead, e.g. qutip.qip import `func_name`.; Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; Qobj data =; [[1. 0. 0. 0.]; [0. 1. 0. 0.]; [0. 0. 0. 1.]; [0. 0. 1. 0.]]; >>> import qutip # warning appears only once.; >>> qutip.cnot(); Quantum object: dims = [[2, 2], [2, 2]], shape = (4, 4), type = oper, isherm = True; Qobj data =; [[1. 0. 0. 0.]; [0. 1. 0. 0.]; [0. 0. 0. 1.]; [0. 0. 1. 0.]]; ```. The help function still works correctly:; ```; >>> help(cnot); Help on function cnot in module qutip.qip.gates:; cnot(N=None, control=0, target=1); Quantum object representing the CNOT gate. Returns; -------; cnot_gate : qobj; Quantum object representation of CNOT gate. Examples; --------; >>> cnot(); Quantum object: dims = [[2, 2], [2, 2]], shape = [4, 4], type = oper, isHerm = True; Qobj data =; [[ 1.+0.j 0.+0.j 0.+0.j 0.+0.j]; [ 0.+0.j 1.+0.j 0.+0.j 0.+0.j]; [ 0.+0.j 0.+0.j 0.+0.j 1.+0.j]; [ 0.+0.j 0.+0.j 1.+0.j 0.+0.j]]; ```. The only flaw I found is that the traceback will stop at the wrapper function if the arguments are wrong; ```; >>> cnot(wrong_arg=1); __main__:1: DeprecationWarning: Importing functions/classes of the qip submodule directly from the namespace qutip is deprecated. Please import them from the submodule instead, e.g. qutip.qip import `func_name`.; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""c:\users\boxi\onedrive\studium\qutip-project\qutip\qutip\__init__.py"", line 240, in deprecated_func; return func(*args, **kwargs); TypeError: cnot() got an unexpected keyword argument 'wrong_arg'; ```; Anyone would like to try it out and see if the behaviour is the same? For instance, running `test_entropy.py` now will give a warning because the importation is wrong there. All tests still pass.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1074:2872,test,tests,2872,https://qutip.org,https://github.com/qutip/qutip/pull/1074,1,['test'],['tests']
Testability,"; Copyright (c) 2011 and later.; A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade. QuTiP Version: 4.2.0; Numpy Version: 1.13.3; Scipy Version: 1.0.0; Cython Version: 0.27.3; Matplotlib Version: 2.1.2; Python Version: 3.6.4; Number of CPUs: 4; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\ProgramData\Anaconda3\lib\site-packages\qutip. DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-387626958:1344,log,logger,1344,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-387626958,1,['log'],['logger']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_enr_state_operator.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_entropy.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_expect.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_fastsparse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:6840,test,tests,6840,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _____________ ERROR collecting qutip/tests/test_qubit_evolution.py _____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_qubitcircuit.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_qubits.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_rand.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:18665,test,tests,18665,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_eigenstates.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________ ERROR collecting qutip/tests/test_enr_state_operator.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_entropy.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_expect.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:6367,test,tests,6367,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_fastsparse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_fileio.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_floquet.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_gates.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:8259,test,tests,8259,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_heom_solver.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_interpolate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_mcsolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_mesolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:10624,test,tests,10624,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_interpolate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_mcsolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_mesolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_metrics.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:11097,test,tests,11097,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_scattering.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sesolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sp_eigs.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sparse.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:21503,test,tests,21503,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_three_level.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_utilities.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_wigner.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; !!!!!!!!!!!!!!!!!!! Interrupted: 60 errors during collection !!!!!!!!!!!!!!!!!!!; =========================== 60 error in 1.85 seconds ===========================; (base) cln-232-18:qutip nathanshammah$; ```; this on the 4.4.0 release version. ; On the dev version, ; ```; (qdev) cln-232-18:qutip nathanshammah$ pytest; ============================= test session starts ==============================; platform darwin -- Python 3.7.3, pytest-5.0.1, py-1.8.0, pluggy-0.12.0; rootdir: /Users/nathanshammah/github/qutip;",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:28598,test,tests,28598,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_rhs_reuse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_scattering.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sesolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sp_eigs.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:21030,test,tests,21030,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_spinchain.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_spmath.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_states.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_steadystate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:23395,test,tests,23395,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_superoper.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_td_formats.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_tensor.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_three_level.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:27179,test,tests,27179,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_expect.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_fastsparse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_fileio.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_floquet.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:7786,test,tests,7786,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_fileio.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_floquet.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_gates.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_graph.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:8733,test,tests,8733,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_floquet.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_gates.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_graph.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_heom_solver.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:9206,test,tests,9206,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_mcsolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_mesolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_metrics.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_mkl.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:11570,test,tests,11570,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_metrics.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_mkl.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_openmp.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_operators.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:12516,test,tests,12516,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_openmp.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_operators.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_parallel.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________ ERROR collecting qutip/tests/test_partial_transpose.py ____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:13461,test,tests,13461,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_qubits.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_rand.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_random.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_rhs_reuse.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:19611,test,tests,19611,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sesolve.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sp_eigs.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sparse.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_spinchain.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tes",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:21976,test,tests,21976,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_sparse.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ________________ ERROR collecting qutip/tests/test_spinchain.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_spmath.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_states.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:22922,test,tests,22922,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_piqs.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_propagator.py ________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_ptrace.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_qft.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:15354,test,tests,15354,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_qft.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; __________________ ERROR collecting qutip/tests/test_qobj.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_qobjevo.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_qpt.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________ ERROR collecting qutip/tests/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:16773,test,tests,16773,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py ____________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py:2: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py:1: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERR",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:15505,test,testing,15505,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"; ______________________________________________________ testPropHOSteadyPar ______________________________________________________ ; multiprocessing.pool.RemoteTraceback:; """"""; Traceback (most recent call last):; File ""C:\ ... \Python\Python39\lib\multiprocessing\pool.py"", line 125, in worker; result = (True, func(*args, **kwds)); File ""c:\ ... \qutip\qutip\propagator.py"", line 279, in _parallel_mesolve ; output = mesolve(; File ""c:\ ... \qutip\qutip\mesolve.py"", line 237, in mesolve; func, ode_args = ss.makefunc(ss, rho0, args, e_ops, options); File ""c:\ ... \qutip\qutip\mesolve.py"", line 323, in _qobjevo_set; _test_liouvillian_dimensions(H_td.cte.dims, rho0.dims); File ""c:\ ... \qutip\qutip\mesolve.py"", line 304, in _test_liouvillian_dimensions; raise ValueError("""".join([; ValueError: incompatible Liouvillian and state dimensions: [[[2], [2]], [[2], [2]]] and [[5], [5]]. The above exception was the direct cause of the following exception:. def testPropHOSteadyPar():; ""Propagator: steady state parallel""; a = destroy(5); H = a.dag()*a; c_op_list = []; kappa = 0.1; n_th = 2; rate = kappa * (1 + n_th); c_op_list.append(np.sqrt(rate) * a); rate = kappa * n_th; c_op_list.append(np.sqrt(rate) * a.dag()); > U = propagator(H,2*np.pi,c_op_list, parallel=True). qutip\qutip\tests\test_propagator.py:86:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; qutip\qutip\propagator.py:195: in propagator; output = parallel_map(_parallel_mesolve, range(N * N),; qutip\qutip\parallel.py:234: in parallel_map; return [ar.get() for ar in async_res]; qutip\qutip\parallel.py:234: in <listcomp>; return [ar.get() for ar in async_res]; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . self = <multiprocessing.pool.ApplyResult object at 0x000001E7390028B0>, timeout = None. def get(self, timeout=None):; self.wait(timeout); if not self.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711:1413,test,testPropHOSteadyPar,1413,https://qutip.org,https://github.com/qutip/qutip/issues/1711,1,['test'],['testPropHOSteadyPar']
Testability,"; ```; Map(Space(Map(Space, Space)), Space(Map(Space, Space))); ```; to; ```; Super(Space(Map(Space, Space)), Space(Map(Space, Space)), rep='super'); ```; and I definitely like having the superop rep included in it. The user is never ever meant to write any of this themselves, so the literal length shouldn't be too much of a problem. You'd still specify dimensions using the exact same list syntax that we currently use, it's just we'd immediately parse it into this internal representation and internally operate on this, because it's much faster. Essentially what I'm describing here is an abstract syntax tree for relevant linear algebra structures. We _could_ even have the tensor index dimensions stored within the `Compound` objects, to help with `ptrace`, `permute`, the future `local_multiply` algorithms and so on. I wouldn't want to add that immediately, though - no need to complicate things. #### Point 2. Basis safety wouldn't have any performance cost here - `Space(2, basis='x')` and `Space(2, basis='y')` would referentially be unequal, so the test would be free. It's basically the same thing as checking superoperator representations. I would worry about user ergonomics for creating these though. I'd propose that all QuTiP functions maintain their current behaviour of creating everything in the number basis (`sigmaz()`, `num()` and so on all imply a particular basis). Beyond that, the ENR functions would attach some basis information onto their outputs to make them safe, and functions like `Qobj.transform` could take a required argument to name the new basis. . I'm certainly not considering this a priority, just a possible solution to the ENR problem and a couple of people had expressed interest in basis safety in the google group. We can always tack it on in a later release if it ever seems like a good idea in the future. #### Point 3. Yeah, this is absolutely all intended to be internal only. We wouldn't even print out this form in `Qobj.__repr__`, to my mind. Y",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661:1591,test,test,1591,https://qutip.org,https://github.com/qutip/qutip/issues/1421#issuecomment-764870661,1,['test'],['test']
Testability,"; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ___________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py ___________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py:3: in <module>; from numpy.testing import (assert_, run_module_suite, assert_allclose,; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:6415,test,testing,6415,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"; if not ((len(H.shape) == 2) and (H.shape[0] == H.shape[1])):; raise ValueError(""the Hamiltonian must be 2-dimensional square Qobj.""); ; if not (psi0.dims[0] == H.dims[0]):; > raise ValueError(; ""'psi0' and the Hamiltonian must share the same dimension.""; ); E ValueError: 'psi0' and the Hamiltonian must share the same dimension. stage/usr/local/lib/python3.9/site-packages/qutip/krylovsolve.py:453: ValueError. stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_10_happy_breakdown_e_ops_none[eigenstate] ⨯ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[large dim-normal tlist-[c, c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_08_check_e_ops_mixed_list[small dim-empty tlist-[c, q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[large dim-empty tlist-[c]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[q]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_06_check_e_ops_callable[large dim-single element tlist] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[small dim-normal tlist-[q]] ✓ 93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_07_check_e_ops_list_single_callable[intermediate dim-single element tlist-[c]] ✓93% █████████▍; stage/usr/local/lib/python3.9/site-packages/qutip/tests/test_krylovsolve.py::TestKrylovSolve.test_11_happy_breakdown_e_ops_callable[magnetization subspace state XXZ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2190:3527,Test,TestKrylovSolve,3527,https://qutip.org,https://github.com/qutip/qutip/issues/2190,1,['Test'],['TestKrylovSolve']
Testability,"; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py _________________________________________; qutip/tests/solver/test_integrator.py:16: in <module>; class TestIntegratorCte():; qutip/tests/solver/test_integrator.py:20: in TestIntegratorCte; me_system = qutip.liouvillian(qutip.QobjEvo(qutip.qeye(2)),; qutip/core/superoperator.py:96: in liouvillian; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:96: in <genexpr>; L += sum(lindblad_dissipator(c_op, chi=chi_); qutip/core/superoperator.py:169: in lindblad_dissipator; ad_b = a.dag() * b; qutip/core/qobj.py:434: in __mul__; return self.__matmul__(other); qutip/core/qobj.py:476: in __matmul__; _data.matmul(self._data, other._data),; qutip/core/data/dispatch.pyx:392: in qutip.core.data.dispatch.Dispatcher.__call__; return function(*args, **kwargs); qutip/core/data/matmul.pyx:329: in qutip.core.data.matmul.matmul_dia; cpdef Dia matmul_dia(Dia left, Dia right, double complex scale=1):; qutip/core/data/matmul.pyx:332: in qutip.core.data.matmul.matmul_dia; npoffsets = np.unique(np.add.outer(left.as_scipy().offsets, right.as_scipy().offsets)); qutip/core/data/dia.pyx:202: in qutip.core.data.dia.Dia.as_scipy; self._scipy = _dia_matrix(data, offsets, self.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:2817,Test,TestIntegratorCte,2817,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['Test'],['TestIntegratorCte']
Testability,"; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py:10: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py:3: in <module>; from numpy.testing import assert_equal, run_module_suite, assert_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:18932,test,tests,18932,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"; rhoss = steadystate(L); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\steadystate.py"", line 290, in steadystate; return _steadystate_direct_sparse(A, ss_args); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\steadystate.py"", line 460, in _steadystate_direct_sparse; weighted_matching=ss_args['weighted_matching']); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 393, in mkl_spsolve; x = lu.solve(b, verbose=verbose); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 170, in solve; np_x, np_error); OSError: exception: access violation reading 0x0000000099EC80F8. ======================================================================; ERROR: MKL spsolve : Hermitian (real) solver; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""C:\Users\Boxi\Miniconda3\envs\qutip-dev-py3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\tests\test_mkl.py"", line 230, in test_mkl_spsolve10; y = mkl_spsolve(A, b, hermitian=1); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 414, in mkl_spsolve; lu.delete(); File ""C:\Users\Boxi\OneDrive\Studium\qutip-project\qutip\qutip\_mkl\spsolve.py"", line 208, in delete; byref(c_int(0)), np_error); OSError: exception: access violation reading 0x00000006FFFFFFEF. ======================================================================; ```; Enviroment:; ```; QuTiP Version: 4.4.0.dev0+73a27971; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.6; Matplotlib Version: 3.0.3; Python Version: 3.7.3; Number of CPUs: 12; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Windows (AMD64); Installation path: C:\Users\Boxi\Miniconda3\envs\qutip-dev-py3\lib\site-packages\qutip-4.4.0.dev0+73a27971-py3.7-win-amd64.egg\qutip; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-483000016:1603,test,test,1603,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-483000016,2,['test'],"['test', 'tests']"
Testability,"; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 190, in test_04_1_state_with_list_str_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyx",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:8977,test,tests,8977,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability,"; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 207, in test_04_2_unitary_with_list_func_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anacond",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:13490,test,tests,13490,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability,"; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 226, in test_05_1_state_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 64, in check_evolution; args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyxim",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:18024,test,tests,18024,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability,"; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 245, in test_05_2_unitary_with_interp_H; td_args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 67, in check_evolution; output = sesolve(H, U0, tlist, args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ""C:\Users\MTS-144\Anaconda3\",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:22533,test,tests,22533,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability,"; self.build_extensions(); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\Cython\Distutils\old_build_ext.py"", line 194, in build_extensions; self.build_extension(ext); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\command\build_ext.py"", line 533, in build_extension; depends=ext.depends); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 345, in compile; self.initialize(); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 238, in initialize; vc_env = _get_vc_env(plat_spec); File ""C:\Users\MTS-144\Anaconda3\lib\distutils\_msvccompiler.py"", line 134, in _get_vc_env; raise DistutilsPlatformError(""Unable to find vcvarsall.bat""); distutils.errors.DistutilsPlatformError: Unable to find vcvarsall.bat. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\nose\case.py"", line 197, in runTest; self.test(*self.arg); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 354, in test_06_4_compare_state_and_unitary_list_str; normalize=False, td_args=td_args, tol=5e-5); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\tests\test_sesolve.py"", line 255, in compare_evolution; options=options,args=td_args); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 185, in sesolve; progress_bar); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\qutip\sesolve.py"", line 520, in _sesolve_list_str_td; exec(code, globals()); File ""<string>"", line 1, in <module>; File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 462, in load_module; language_level=self.language_level); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 231, in load_module; raise exc.with_traceback(tb); File ""C:\Users\MTS-144\Anaconda3\lib\site-packages\pyximport\pyximport.py"", line 215, in load_module; inplace=build_inplace, language_level=language_level); File ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467317662:27094,test,tests,27094,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467317662,1,['test'],['tests']
Testability,"; sig22 = two * two.dag(); sig33 = three * three.dag(); sig13 = one * three.dag(); sig23 = two * three.dag(); sig12 = one * two.dag(). H = E1*sig11+E2*sig22+E3*sig33. # collapse operators; gamma2 = 0.006/hbar; gamma3 = 0.006/hbar. c1 = gamma2*sig22; c2 = gamma3*sig33; c_ops = [c1,c2]. rho0 = sig22. e_ops = [sig11,sig22,sig33]. output = mesolve(H,rho0,tlist,c_ops,e_ops); plt.plot(tlist, output.expect[0],label = r""$\rho_{11}$""); plt.plot(tlist, output.expect[1],label = r""$\rho_{22}$""); plt.plot(tlist, output.expect[2],label = r""$\rho_{33}$""); plt.legend(); ```; The model with pulse:; ```python; from qutip import * # for quantum dynamics; import numpy as np # for numerical manipulations; from matplotlib import pyplot as plt. # Define ultrafast pulse function; def elecfld(t, args):; c0 = 300 # [nm/fs]; E0 = 4.7*1e-2 # maximum amplitude, [V/nm]; lda_ex = 720 # excitation wavelength, [nm]; t_fwhm = 80 # [fs]; ω0 = 2*np.pi*c0/lda_ex; t0 = 2*t_fwhm; return E0*np.exp(-1j*ω0*t-2*np.log(2)*((t-t0)/t_fwhm)**2). #%% Parameters; hbar = 0.658211951 # units: [eV fs]. # Energy level; E1 = 0; E2 = 1.722 # eV; E3 = 3.426 # eV. # dipole strength; mu12 = 0.1 # [e nm]; mu23 = 0.41. # electric field of ultrafast pulse parameters; c0 = 300 # [nm/fs]; E0 = 4.7*1e-2 # maximum amplitude, [V/nm]; lda_ex = 720 # excitation wavelength, [nm]; t_fwhm = 80 # [fs]; ω0 = 2*np.pi*c0/lda_ex; t0 = 2*t_fwhm; tlist= np.linspace(0,5*t0,800) # [fs]; #%% Construct Hamiltonian; # basis; one, two, three = three_level_basis(); sig11 = one * one.dag(); sig22 = two * two.dag(); sig33 = three * three.dag(); sig13 = one * three.dag(); sig23 = two * three.dag(); sig12 = one * two.dag(). # H = H0+(-$\mu$E(t)); H0 = E1*sig11+E2*sig22+E3*sig33; H1 = -mu12*(sig12+sig12.dag())-mu23*(sig23+sig23.dag()). H = [H0, [H1, elecfld]]. #%% collapse operators. # decay of excited states; gamma2 = 0.006/hbar; gamma3 = 0.006/hbar. c1 = gamma2*sig22; c2 = gamma3*sig33; c_ops = [c1,c2]. # initial state; rho0 = sig11 # ground state. # ex",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2355:2393,log,log,2393,https://qutip.org,https://github.com/qutip/qutip/issues/2355,1,['log'],['log']
Testability,"<!-- **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->; **Description**. This PR reduced the qutip import time by setting the logger names explicitly. . **Related issues or PRs**. See #1980 for more details.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1981:483,test,tests,483,https://qutip.org,https://github.com/qutip/qutip/pull/1981,2,"['log', 'test']","['logger', 'tests']"
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**. Return `TypeError` in `sesolve` when the argument `H` is of incorrect type.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1942:484,test,tests,484,https://qutip.org,https://github.com/qutip/qutip/pull/1942,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**. This PR updates the scipy requirements to version 1.4+. The 1.4 version was released December 2019.; Versions before 1.4 would not have worked with dev.major as an import of functools was missing. With the updated requirements we can remove the version checks in qutip.solve.steadystate which speeds up import times a bit.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1982:484,test,tests,484,https://qutip.org,https://github.com/qutip/qutip/pull/1982,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure.; - [ ] Include the changelog in a file named: `doc/changes/<PR number>.<type>` 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#Changelog%20Generation) for more information). Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; Importing qutip takes a long time. On a Windows system import takes almost 4 seconds. The import time can be analyzed with [importtime-waterfall](https://github.com/asottile/importtime-waterfall). A large part of the time is spend in importing external packages (scipy, IPython, matplotilib), but also qutip itself adds to the import time. This PR reduces the import time by setting the logger names in 4 submodules explicitly. ; Benchmark:; ```; python -c ""import time; import matplotlib; import IPython; import scipy; t0=time.time(); import qutip; dt=time.time()-t0; print(f'{dt*1e3:.2f} ms')""; ``` ; Results:; ```; dev.major: 1996.52 m",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1980:484,test,tests,484,https://qutip.org,https://github.com/qutip/qutip/pull/1980,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; As proposed by @hodgestar, I am splitting #1409 into smaller PRs. This is part 1/3, but contain some change in core that would come later in the Solver PR:. - Add manual cython dispatched function. Used by vern ODE method. - Add `to` to `QobjEvoFunc` and some check. Used by brmesolve rework. - Add a version to string Coefficient, a 'try_parsing' options, partial arguments update and basic cleaning function.; This comes mostly from talk with @jakelishman.; When updating coefficient with new argument, it no longer require all coefficient to be given, but will simply update those available. ; Since those change must overwrite old version of the coefficient, a version tag is added to the coefficient folder and a function to erase the old version. It use it's own `COEFF_VERSION`, not qutip version since I don't expect most qutip update will not touch `coefficient.pyx` so we need not to force us",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1461:488,test,tests,488,https://qutip.org,https://github.com/qutip/qutip/pull/1461,1,['test'],['tests']
Testability,"<!--; **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [ ] Please read [Contributing to QuTiP Development](https://github.com/qutip/qutip-doc/blob/master/CONTRIBUTING.md); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the [documentation](https://github.com/qutip/qutip-doc) and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description.; -->. **Description**; Index error in stochastic `smesolve` made `milstein` solver with `heterodyne` method converge only O(0.5) instead of the O(1) expected. This fix it. **Changelog**; Fixed typo in stochastic code affecting `heterodyne` detection efficiency.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1283:488,test,tests,488,https://qutip.org,https://github.com/qutip/qutip/pull/1283,1,['test'],['tests']
Testability,"<li><a href=""https://github.com/python-pillow/Pillow/commit/2444cddab2f83f28687c7c20871574acbb6dbcf3""><code>2444cdd</code></a> Merge pull request <a href=""https://github-redirect.dependabot.com/python-pillow/Pillow/issues/6700"">#6700</a> from hugovk/security-samples_per_pixel-sec</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/744f455830871d61a8de0a5e629d4c2e33817cbb""><code>744f455</code></a> Added release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/0846bfae48513f2f51ca8547ed3b8954fa501fda""><code>0846bfa</code></a> Add to release notes</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/799a6a01052cea3f417a571d7c64cd14acc18c64""><code>799a6a0</code></a> Fix linting</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/00b25fd3ac3648bc28eff5d4c4d816e605e3f05f""><code>00b25fd</code></a> Hide UserWarning in logs</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/05b175ef88c22f5c416bc9b8d5b897dea1abbf2c""><code>05b175e</code></a> Tighter test case</li>; <li><a href=""https://github.com/python-pillow/Pillow/commit/13f2c5ae14901c89c38f898496102afd9daeaf6d""><code>13f2c5a</code></a> Prevent DOS with large SAMPLESPERPIXEL in Tiff IFD</li>; <li>Additional commits viewable in <a href=""https://github.com/python-pillow/Pillow/compare/9.0.1...9.3.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=pillow&package-manager=pip&previous-version=9.0.1&new-version=9.3.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and opti",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2023:14804,test,test,14804,https://qutip.org,https://github.com/qutip/qutip/pull/2023,1,['test'],['test']
Testability,"= compile_code(code, file_name, parsed, compile_opt); 389 except PermissionError:; 390 pass. File ~/miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/core/coefficient.py:528, in compile_code(code, file_name, parsed, c_opt); 524 os.chdir(qset.coeffroot); 525 # Files with the same name, but differents extension than the pyx file, are; 526 # erased during cythonization process, breaking filelock.; 527 # Adding a prefix make them safe to use.; --> 528 lock = filelock.FileLock(""compile_lock_"" + file_name + "".lock""); 529 try:; 530 lock.acquire(timeout=0). NameError: name 'filelock' is not defined; ```. However, I would expect it to be rare that users call `qutip.coefficient` directly including compilation options. The only indication that something might be wrong then comes from two failing tests, but it is very hard to deduce the actual problem from the pytest output:. ```shell; $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ................................................................................................................F........F..................................... [ 81%]; .......................................s [100%]. ============================================================================== FAILURES ===============================================================================; __________________________________________________________________________ test_CoeffOptions ___________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:3327,test,tests,3327,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"= gates.qubit_clifford_group(); qutip/core/gates.py:815: in qubit_clifford_group; X = sigmax(); qutip/core/operators.py:387: in sigmax; return _SIGMAX.to(dtype, True); qutip/core/qobj.py:395: in to; _data.to(data_type, self._data),; qutip/core/data/convert.pyx:395: in qutip.core.data.convert._to.__call__; return self._convert[to_type, from_type](data); qutip/core/data/convert.pyx:101: in qutip.core.data.convert._converter.__call__; arg = self.functions[i](arg); qutip/core/data/dia.pyx:341: in qutip.core.data.dia.from_csr; cpdef Dia from_csr(CSR matrix):; qutip/core/data/dia.pyx:353: in qutip.core.data.dia.from_csr; return Dia((data, diags), shape=matrix.shape, copy=False); qutip/core/data/dia.pyx:134: in qutip.core.data.dia.Dia.__init__; self._scipy = _dia_matrix(data, offsets, self.shape); qutip/core/data/dia.pyx:52: in qutip.core.data.dia._dia_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; ___________________________________________ ERROR collecting qutip/tests/core/test_qobjevo.py ____________________________________________; qutip/tests/core/test_qobjevo.py:72: in <module>; rand_stochastic(N).to(_data.CSR),; qutip/random_objects.py:871: in rand_stochastic; return Qobj(M, dims=dims).to(dtype); qutip/core/qobj.py:307: in __init__; self._initialize_data(arg, dims, copy); qutip/core/qobj.py:295: in _initialize_data; self._data = _data.create(arg, copy=copy); qutip/core/data/convert.pyx:477: in qutip.core.data.convert._create.__call__; return create(arg, shape, copy=copy); qutip/core/data/csr.pyx:139: in qutip.core.data.csr.CSR.__init__; self._scipy = _csr_matrix(data, col_index, row_index, self.shape); qutip/core/data/csr.pyx:56: in qutip.core.data.csr._csr_matrix; scipy_data_matrix.__init__(out); E TypeError: _data_matrix.__init__() missing 1 required positional argument: 'arg1'; _________________________________________ ERROR collecting qutip/tests/solver/test_integrator.py ____________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2472:1709,test,tests,1709,https://qutip.org,https://github.com/qutip/qutip/issues/2472,1,['test'],['tests']
Testability,"==; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5238,test,tests,5238,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"=========== short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tes",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23620,Test,TestMESolverConstDecay,23620,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestMESolverConstDecay', 'testMEDecayAsStrList']"
Testability,"===========; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; nose.plugins.cover: ERROR: Coverage not available: unable to import coverage module; /Users/goerz/.pyenv/versions/miniconda3-latest/envs/qutip_testing_env/lib/python3.7/site-packages/qutip-4.5.0.dev0+d377c997-py3.7-macos; x-10.9-x86_64.egg/qutip/__init__.py:161: UserWarning: matplotlib not found: Graphics will not work.; warnings.warn(""matplotlib not found: Graphics will not work.""); Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fault: 11; ~~~",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1093:3355,test,tests,3355,https://qutip.org,https://github.com/qutip/qutip/issues/1093,1,['test'],['tests']
Testability,"============; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string]; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy]; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 30",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1230,test,tests,1230,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"==============; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py _________________________________; ImportError while importing te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:3100,test,tests,3100,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"======================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ================================================================================================ warnings summary =====================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3781,Test,TestCircuitProcessor,3781,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,"=======================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCo",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5101,mock,mock-,5101,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['mock'],['mock-']
Testability,"=========================; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_CoeffOptions; FAILED miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py::test_advance_use; =============================================== 2 failed, 214 passed, 1 skipped, 5700 deselected, 13 warnings in 1.17s ================================================; ```. (Note that the second failing test only fails because without cython, there is no `cimport`.). ---. If we install filelock, everything works as expected:. ```shell; $ conda install filelock; $ ipython; 	import qutip; 	coeff = qutip.coefficient(""sin(t)""); 	> [1/1] Cythonizing qtcoeff_f230db93af3a399e4166e330cf4663.pyx; 	> [...]; 	type(coeff); 	> qtcoeff_f230db93af3a399e4166e330cf4663.StrCoefficient; 	exit(); $ pytest --disable-pytest-warnings --pyargs qutip.tests.core -k test_coefficient; ========================================================================= test session starts =========================================================================; platform linux -- Python 3.11.3, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/paul; collected 5917 items / 5700 deselected / 217 selected. miniconda3/envs/qutip-tmp/lib/python3.11/site-packages/qutip-5.0.0.dev0+7892453-py3.11-linux-x86_64.egg/qutip/tests/core/test_coefficient.py .................. [ 8%]; ............................................................................................................................................................... [ 81%]; .......................................s [100%]. ==================================================== 216 passed, 1 skipped, 5700 deselected, 14 warnings in 59.58s ====================================================; ```. ---. I suggest documenting this dependence in the documentation. Regarding the tests, the concerned tests s",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2162:8013,test,tests,8013,https://qutip.org,https://github.com/qutip/qutip/issues/2162,1,['test'],['tests']
Testability,"============================ test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ============================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3659,Test,TestCircuitProcessor,3659,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['Test'],['TestCircuitProcessor']
Testability,"=====================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Framewor",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2418,test,test,2418,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"============================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ___________________________________________________________________________________________________________________________. def test_time_dependent_spline_in_c_ops():; N = 10; a = qutip.destroy(N); H = a.dag()*a; psi0 = qutip.basis(N, 9); times = np.linspace(0, 10, 100); kappa = 0.2; exact = 9 * np.exp(-2 * kappa * (1 - np.exp(-times))); a_ops = [[a + a.dag(), _string_w_interpolating_t(kappa, times)]]; collapse_points = np.sqrt(kappa) * np.exp(-0.5*times); c_ops = [[a, qutip.Cubic_Spline(times[0], times[-1], collapse_points)]]; > brme = qutip.brmesolve(H, psi0, times,; a_ops, e_ops=[a.dag()*a], c_ops=c_ops). /usr/lib/python3/dist-packages/qutip/tests/test_brmesolve_td.py:163: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:200: in brmesolve; output = _td_brmesolve(H, psi0, tlist, a_ops=a_ops, e_ops=e_ops,; /usr/lib/python3/dist-packages/qutip/bloch_redfield.py:482: in _td_brmesolve; exec(code, globals()); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . > ???; E ModuleNotFoundError: No module named 'rhs4968610'. <string>:1: ModuleNotFoundError; _________________________________________________________",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:9138,test,tests,9138,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"===================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; DEBUG:qutip.logging_utils:Creating logger for qutip.control.grape with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimconfig with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dynamics with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.dump with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.tslotcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.fidcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.propcomp with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.optimizer with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulsegen with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.loadparams with policy basic.; DEBUG:qutip.logging_utils:Creating logger for qutip.control.pulseoptim with policy basic.; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, s",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482:2108,log,logger,2108,https://qutip.org,https://github.com/qutip/qutip/issues/1124#issuecomment-552991482,1,['log'],['logger']
Testability,==================================================== short test summary info =================================================================; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_noise.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_openmp.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_optpulseprocessor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_parallel.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_partial_transpose.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_piqs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_processor.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_propagator.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_pulse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qft.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qobjevo.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qpt.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubit_evolution.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_qubits.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_rhs_reuse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_scattering.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sesolve.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sp_eigs.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_sparse.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_spmath.py; ERROR Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_me.py; ERROR Library/P,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:30143,test,tests,30143,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"======================================================== ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py:4: in <module>; from numpy.testing import assert_, run_module_suite, assert_allclose; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _________________________________ ERROR collecting Library/Pyth",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2978,test,testing,2978,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"==========================================================; Please cite QuTiP in your publication.; ==============================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; Transform 2-level to eigenbasis and back ... ok; Transform 10-level real-values to eigenbasis and back ... ok; Transform 10-level to eigenbasis and back ... ok; Transform 10-level imag to eigenbasis and back ... ok; Consistency between transformations of kets and density matrices ... ok; Check diagonalization via eigenbasis transformation ... ok; Check Qobj eigs and direct eig solver transformations match ... ok; Check Qobj eigs and direct eig solver reverse transformations match ... ok; brmesolve: simple qubit ... ok; brmesolve: c_ops alone ... ok; brmesolve: c_ops with a_ops ... ok; brmesolve: harmonic oscillator, zero temperature ... ok; brmesolve: harmonic oscillator, finite temperature ... ok; brmesolve: harmonic oscillator, finite temperature, states ... ok; brmesolve: Jaynes-Cummings model, zero temperature ... ok; brmesolve: Check for #572 bug. ... ok; brmesolve: input list of Qobj ... ok; td_brmesolve: passes all brmesolve tests ... ok; td_brmesolve: time-dependent a_ops ... ok; td_brmesolve: time-dependent a_ops tuple of strings ... ok; td_brmesolve: time-dependent a_ops tuple interp ... ok; td_brmesolve: time-dependent a_ops & c_ops interp ... ok; td_brmesolve: non-Hermitian e_ops check ... ok; td_brmesolve: states check ... ok; td_brmesolve: split ops #1 ... ok; td_brmesolve: split ops #2 ... ok; td_brmesolve: split ops, Cubic_Spline td-terms ... ok; td_brmesolve: split ops, multiple ... ok; td_brmesolve: Hamiltonian args ... ok; BR Tools : zheevr ... Segmentation fault: 11; ```. I'm unsure what is going on here. I tried reinstalling qutip without any change. Prior I had a lot of errors referring to xcrun but I fixed that by installing xcode. Is there something else I need to get this working?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1124:2162,test,tests,2162,https://qutip.org,https://github.com/qutip/qutip/issues/1124,1,['test'],['tests']
Testability,"============================================================; Please cite QuTiP in your publication.; ================================================================================; For your convenience a bibtex reference can be easily generated using `qutip.cite()`; ================================================================== test session starts ===================================================================; platform darwin -- Python 3.9.6, pytest-7.3.2, pluggy-1.2.0 -- /Applications/Xcode.app/Contents/Developer/usr/bin/python3; cachedir: .pytest_cache; rootdir: /Users/guglielmo2; collected 2814 items / 30 errors / 51 deselected / 2763 selected . ========================================================================= ERRORS =========================================================================; _________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_graph.py:3: in <module>; from numpy.testing import run_module_suite, assert_equal; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.py ________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_mesolve.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:2293,test,test,2293,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['test']
Testability,"====================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_45749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could not convert string to importable fun",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23792,test,tests,23792,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"====================================================================== test session starts ===================================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5423,test,tests,5423,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"=================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testChooseSolver PASSED [100%]. ===========================================================================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3756,test,tests,3756,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"======================================================================================= test session starts ===============================================================================================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/.hypothesis/examples'); rootdir: /usr/lib/python3/dist-packages/qutip/tests, configfile: pytest.ini; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collected 11 items . ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_modify_ctrls PASSED [ 9%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_save_read PASSED [ 18%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_evolution PASSED [ 27%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::test_id_with_T1_T2 PASSED [ 36%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testPlot PASSED [ 45%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testSpline PASSED [ 54%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testGetObjevo PASSED [ 63%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testNoise PASSED [ 72%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testMultiLevelSystem PASSED [ 81%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::testDrift PASSED [ 90%]; ../../usr/lib/python3/dist-packages/qutip/tests/test_processor.py::TestCircuitProcessor::t",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:3634,test,tests,3634,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"============================================================================================================= short test summary info =================================================================================================================================; FAILED qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops - ModuleNotFoundError: No module named 'rhs4968610'; FAILED qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] - ModuleNotFoundError: No module named 'rhs4968611'; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_46049686147042.pyx; FAILED qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_26849686147052.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_60949686147062.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_57149686147072.pyx; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff - Exception: Could not convert string to importable function, tmpfile:td_Qobj_single_str38349686147072.pyx; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_00149686147082.pyx; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not convert string to importable function, tmpfile:cqobjevo_compiled_coeff_91749686147092.pyx; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not convert st",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:23597,test,tests,23597,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"==================================================================================================================; platform linux -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0 -- /usr/bin/python3.12; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(PosixPath('/home/drew/projects/misc/build/.hypothesis/examples')); rootdir: /home/drew/projects/misc/build/qutip; plugins: remotedata-0.4.1, asyncio-0.20.3, filter-subpackage-0.1.2, doctestplus-1.1.0, flaky-3.7.0, arraydiff-0.6.1, xvfb-3.0.0, astropy-0.11.0, mpi-0.6, astropy-header-0.2.2, cov-4.1.0, mock-3.12.0, openfiles-0.5.0, hypothesis-6.92.2; asyncio: mode=Mode.STRICT; collected 3269 items / 3233 deselected / 36 selected . qutip/tests/test_brmesolve_td.py::test_time_dependent_spline_in_c_ops FAILED [ 2%]; qutip/tests/test_brmesolve_td.py::test_split_operators_maintain_answer[_2_tuple_split] FAILED [ 5%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[string] FAILED [ 8%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[numpy] FAILED [ 11%]; qutip/tests/test_correlation.py::TestTimeDependence::test_varying_coefficient_hamiltonian_2ls[function] PASSED [ 13%]; qutip/tests/test_krylovsolve.py::TestKrylovSolve::test_04_simple_check_states_e_ops_H_sho PASSED [ 16%]; qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList FAILED [ 19%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff FAILED [ 22%]; qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff FAILED [ 25%]; qutip/tests/test_openmp.py::test_openmp_mesolve_td FAILED [ 27%]; qutip/tests/test_propagator.py::testPropHOStrTd FAILED [ 30%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call FAILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::te",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:5450,Test,TestTimeDependence,5450,https://qutip.org,https://github.com/qutip/qutip/issues/2293,2,"['Test', 'test']","['TestTimeDependence', 'tests']"
Testability,"=idx_dtype); self.col = np.array([], dtype=idx_dtype); self.data = np.array([], dtype=data_dtype); self.has_canonical_format = True; else:; try:; obj, (row, col) = arg1; except (TypeError, ValueError) as e:; raise TypeError('invalid input format') from e; ; if shape is None:; if len(row) == 0 or len(col) == 0:; raise ValueError('cannot infer dimensions from zero '; 'sized index arrays'); M = operator.index(np.max(row)) + 1; N = operator.index(np.max(col)) + 1; self._shape = check_shape((M, N)); else:; # Use 2 steps to ensure shape has length 2.; M, N = shape; self._shape = check_shape((M, N)); ; idx_dtype = get_index_dtype(maxval=max(self.shape)); data_dtype = getdtype(dtype, obj, default=float); self.row = np.array(row, copy=copy, dtype=idx_dtype); self.col = np.array(col, copy=copy, dtype=idx_dtype); > self.data = np.array(obj, copy=copy, dtype=data_dtype); E TypeError: can't convert complex to float. /usr/lib/python3/dist-packages/scipy/sparse/coo.py:161: TypeError; ```. Likewise for `TestDicke.test_lindbladian_dims` and `TestDicke.test_liouvillian`. **Your Environment**. qutip 4.5.3 built on Debian unstable. ```; qutip.about(). QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li and Jake Lishman.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.5.3; Numpy Version: 1.19.5; Scipy Version: 1.6.1; Cython Version: 0.29.21; Matplotlib Version: 3.3.4; Python Version: 3.9.1; Number of CPUs: 4; BLAS Info: OPENBLAS; OPENMP Installed: True; INTEL MKL Ext: False; Platform Info: Linux (x86_64); Installation path: /usr/lib/python3/dist-packages/qutip; =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1451:3465,Test,TestDicke,3465,https://qutip.org,https://github.com/qutip/qutip/issues/1451,1,['Test'],['TestDicke']
Testability,"> #1212; > ; > > > Thank you. Can you please add tests for this? I'm leaving to @BoxiLi a closer review.; > ; > By ""add tests"" we mean include tests in `qutip/tests'. See #1212 for example. @mlaguna10 please don't do this just now. We will give @MartinSandeCosta opportunity to do this. Hi Alex! I thought 'adding test' means creating a notebook using the new features, but great that Martin can have the chance to do it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-606060551:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-606060551,5,['test'],"['test', 'tests']"
Testability,"> * What is the reason that the time-dependent weights are still part of the trajectory result? That seems a bit inconsistent to me and I wonder if the `TrajectoryResult` class could perhaps just be removed?. The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I will look into it this week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851:482,log,logic,482,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2296372851,1,['log'],['logic']
Testability,"> 1 second was meant to be the order of magnitude rather than a hard limit, but it's a good rule of thumb for testing one piece of functionality. [Here's a (slightly out-dated) list of our current longest tests](https://github.com/qutip/qutip/issues/1217#issuecomment-604116373), bearing in mind that some of those ones actually test many many things in the same test function.; > ; > The test seems structured ok to me. Certainly the testing algorithm isn't the major cause of speed loss. You could try timing some ""real-world"" examples of using your measurements, and try running them in a profiler to see if there are any obvious ways to speed things up.; > ; > With any luck the new data-layer tools and the possibility of using dense `Qobj` storage will give you a fair amount of speed-up once they're complete, since I imagine in your small circuit you're paying quite a lot of sparse matrix overhead.; > ; > I'll prefix this last part with: _you should always profile your code before optimising it_. That said, let me wildly break that rule and guess at where I think you'll find big speed-ups: caching and pre-computation. If you know you're going to run the same thing loads and loads of times, then you shouldn't have to call `self.propagators` each time, or build `measurement_ops` inside `measure_comp_basis`. Do those once at the start of `run_statistics`, and save them.; > ; > Minor things that _may_ speed up - check the profiling!; > ; > 1. ""compress"" the output of `self.propagators`: consecutive propagators with no measurements or classical controls inbetween can be pre-multiplied together at the start to make one matrix. This will save you ~3 matrix multiplications per run in the test.; > 2. use more efficient ways to construct large tensor spaces: `qutip.basis`, `qutip.projection` and `qutip.qeye` can all directly constructor product spaces (e.g. `qutip.basis([2, 2, 2], [0, 1, 0])`). `tensor` is a comparatively expensive operation, and tensoring a list of elements inter",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640128273:110,test,testing,110,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640128273,6,['test'],"['test', 'testing', 'tests']"
Testability,"> ; > ; > Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems.; > ; > Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook.; > ; > Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See [qutip/qutip-notebooks#100](https://github.com/qutip/qutip-notebooks/issues/100); > ; > One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in #1092, using [loky](https://loky.readthedocs.io).; > ; > In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence.; > ; > If the freeze is indeed caused by spawn-multiprocessing, the problem _should_ also show up on Windows. Is anyone running Windows able to reproduce this?. Windows doesn't have 'fork' at all, if we want to make parallel_map work under windows, we have to find ways to 'spawn' efficiently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416:1304,test,tests,1304,https://qutip.org,https://github.com/qutip/qutip/issues/1202#issuecomment-683628416,1,['test'],['tests']
Testability,"> ; > ; > I have been trying out pytest for the last couple of days and we can start by using it for the testing as it is now. We need to replace installation [lines](https://github.com/qutip/qutip/blob/master/.travis.yml#L23) like this in the .travis.yml file to install pytest:; > ; > ```; > conda install mkl blas=*=mkl numpy scipy pytest cython coveralls pytest-cov; > ```; > ; > and then change the runner script to use pytest instead of `nose` by changing:; > ; > ```; > nosetests --verbosity=2 --with-coverage --cover-package=qutip qutip; > ```; > ; > to; > ; > ```; > pytest --verbosity=1 --cov=qutip qutip; > ```. I have submitted a pull request with these changes. Travis build fails with error ""file not found: qutip"". I suspect it is a problem with pytest, and I am investigating.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/958#issuecomment-481026053:105,test,testing,105,https://qutip.org,https://github.com/qutip/qutip/issues/958#issuecomment-481026053,1,['test'],['testing']
Testability,> ; > ; > Seems interesting but tests are failing... Hi Ericgig!. Thank you very much for looking into this! I haven't been able to figure out why the build is failing; the error messages quote parts of the code that I didn't even modify. Could you assist me in finding out why?. Thanks a bunch!; Nithin,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/912#issuecomment-466180105:32,test,tests,32,https://qutip.org,https://github.com/qutip/qutip/pull/912#issuecomment-466180105,1,['test'],['tests']
Testability,"> ; > This is something I have not being able to reproduce. It works fine for me with the unmodified lines of code in `show()`. Could you provide an example of when it stops working? In this way, we can include it in a test to avoid the issue happening again. @AGaliciaMartinez Hey Asier, issue #1616 refers to a similar problem. Following it, I tried `plt.show()` and it works. But `b.show()` doesn't work. So, please suggest what to do? Now that `plt.show()` works, I can remove my minor addition in the `show()`, but still I would like to have `b.show()` working. Looking forward to your response.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-945618059:219,test,test,219,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-945618059,1,['test'],['test']
Testability,"> > I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?; > ; > Maybe, but I find teleportation already a very short circuit, isn't it?; > ; > > Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?; > ; > Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics. I have changed the run_statistics function to now do this method in place of running it a number of times. This solves the problem of slow testing of the function as well !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-643730645,3,['test'],"['test', 'testing']"
Testability,"> > I am not sure why it is only failing in the Python 3.8 case.; > ; > Well, it's a statistical average, so it can deviate. I don't think it has anything to do with Python 3.8. But probably it can be avoided? I guess its the same question as #1268; > ; > I'm thinking, what about adding a `targets` parameters to `QubitCircuit.run_statistics`. Usually, people don't interested in the full output state of the circuit because many of them are ancillary qubits. They can use `targets` to specify what is the qubits they want to look at. In the function, we can use `ptrace(state, targets)` to trace out the ancilla. Seems like a good idea, maybe we can add it as optional parameter to both `QubitCircuit.run_statistics` and `QubitCircuit.run`. Also, regarding Python 3.8, I was saying because both times it only failed in that test run, also never failed in any of my runs. Should I make tolerance higher ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640006594:826,test,test,826,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640006594,1,['test'],['test']
Testability,"> > Tried a few more options, looks good.; > > Yeah, I know it is from a linter. Personally, I'm fine since the change is not massive. If others think this might mess up the code history, please speak up.; > > Please add a Towncrier file for the change log.; > > I'll wait for one or two days, if no one comments, will merge.; > ; > Sounds good,; Ha, Def will ; I will add the Towncrier file shortly and open an issue for the new bug",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2442#issuecomment-2147402235:253,log,log,253,https://qutip.org,https://github.com/qutip/qutip/pull/2442#issuecomment-2147402235,1,['log'],['log']
Testability,"> > _**Other minor changes**_; > > In `def show(self)`, the plot was not being displayed using the previous lines of code in the function, so I have commented them out and changed it to; > > ```; > > if self.fig:; > > plt.show(self.fig); > > ```; > ; > This is something I have not being able to reproduce. It works fine for me with the unmodified lines of code in `show()`. Could you provide an example of when it stops working? In this way, we can include it in a test to avoid the issue happening again. So, I found that the value of `self._shown` is false when it tries to execute `show()', and therefore, the Bloch sphere is not displayed. ; I use the following code to play around with the Bloch sphere, please let me know if I need to add something:; ```; b= Bloch(fig=None); b.xlabel = ['$\\left|+\\right>$',' ']; b.ylabel = ['$\\left|+i \\right> (r_8)$',' ']; b.xlpos = [1.1,-1.1]; b.zlabel = [' $\\left|0\\right> (r_7)$','$\\left|1\\right> $']; b.zlpos = [1.075,-1.08]. <b.add_other_stuff>. b.view=[-20,20,0]; b.show(); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-945609485:466,test,test,466,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-945609485,1,['test'],['test']
Testability,> > mesolve: simple time-dependence as partial function list ... ok; > > > mesolve: simple time-dependence as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: constant decay as function list ... ok; > > > mesolve: constant decay as string list ... ok; > > > mesolve: simple constant decay ... ok; > > > mesolve: simple constant decay ... ok; > > > Metrics: Checks that average gate fidelities are sensible for random ... ok; > > > odechecks: monte-carlo ... ok; > > > Spin 1/2 operators ... ok; > > > Spin 3/2 operators ... ok; > > > Spin 2 operators ... ok; > > > Spin 5/2 operators ... ok; > > > Destruction operator ... ok; > > > Creation operator ... ok; > > > Identity operator ... ok; > > > Number operator ... ok; > > > Squeezing operator ... ok; > > > Displacement operator ... ok; > > > parfor ... ok; > > > partial transpose of bipartite systems ... ok; > > > partial transpose: comparing sparse and dense implementations ... ok; > > > partial transpose: randomized tests on tripartite system ... ok; > > > Qobj data ... ok; > > > Qobj type ... ok; > > > Qobj Hermicity ... ok; > > > Qobj shape ... ok; > > > Qobj addition ... ok; > > > Qobj subtraction ... ok; > > > Qobj multiplication ... ok; > > > Qobj division ... ok; > > > Qobj power ... ok; > > > Qobj negation ... ok; > > > Qobj equals ... ok; > > > Qobj getitem ... ok; > > > Qobj multiplication type ... ok; > > > Qobj conjugate ... ok; > > > Qobj adjoint (dagger) ... ok; > > > Qobj diagonals ... ok; > > > Qobj eigenenergies ... ok; > > > Qobj eigenstates ... ok; > > > Qobj expm ... ok; > > > Qobj full ... ok; > > > Qobj norm ... ok; > > > Qobj permute ... ok; > > > Qobj ket type ... ok; > > > Qobj bra type ... ok; > > > Qobj operator type ... ok; > > > Qobj superoperator type ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks that binary ops preserve 'superrep'. ... ok; > > > Superoperator arithmetic: Checks ,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126#issuecomment-42855884:6428,test,tests,6428,https://qutip.org,https://github.com/qutip/qutip/issues/126#issuecomment-42855884,1,['test'],['tests']
Testability,"> @Ericgig Tests added for the type changes.; > ; > Note that `QobjEvo.__rmatmul__` is not currently callable. Calling `qobj @ qevo` will call `QobjEvo.__matmul__(qobj, qevo)` first, which will return the result. If I am not missing a case where `__rmatmul__` is called, I vote that we simply delete the implementation of `__rmatmul__` (in a separate PR). @Ericgig Explained that in Cython 3 `__rmatmul__` will be called, so we can keep it for now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1152371837:11,Test,Tests,11,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1152371837,1,['Test'],['Tests']
Testability,"> @hodgestar shall we attempt to sort out the caching now, or get things moved over ahead of Unitary Hack and sort it out later? I don't think it's particularly a blocking issue - the tests still all run fine, after all. Definitely leave for later. > There's an argument against using `pip wheel` caching for us - we've historically used our tests to try and catch errors when using new versions of packages, which we'd lose if we start pinning versions to one particular thing. I don't think we need to pin to a particular version to benefit from the pip caching, but let's see later.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551#issuecomment-839773306:184,test,tests,184,https://qutip.org,https://github.com/qutip/qutip/pull/1551#issuecomment-839773306,2,['test'],['tests']
Testability,"> @hodgestar since yesterday our tests are failing for python3.9 ubuntu, but I can't reproduce the error locally... I you have time could you take a look. I haven't managed to reproduce locally either yet and the test failures are odd. There was an update to `ubuntu-latest` on `11 October 2021` so maybe that is related somehow? See https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md. I've also clicked ""rerun"" in case there was some transient error with the roll out of the Ubuntu update to GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1689#issuecomment-944354143:33,test,tests,33,https://qutip.org,https://github.com/qutip/qutip/pull/1689#issuecomment-944354143,2,['test'],"['test', 'tests']"
Testability,"> @sarsid thank you for the detailed description of the PR. Some tests are failing at [` TestQubitCircuit.test_user_gate`](https://travis-ci.org/github/qutip/qutip/jobs/699177830#L3017), ""NameError: name 'isfunction' is not defined"".; > ; > This is still in draft mode, however I wonder whether you think it makes sense to provide the user the option to choose from OpenQasm 2.0 and Qasm, with the same function, e.g., `read_qasm`, but with an attribute.; > ; > This is a draft, but please remember to add Numpy docstrings to functions.; > ; > It would be great to have read/write capabilities with QASM, looking forward to this PR. @nathanshammah I was wondering if functions only meant for internal class use should have returns and parameters specified?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-653818309:65,test,tests,65,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-653818309,2,"['Test', 'test']","['TestQubitCircuit', 'tests']"
Testability,"> A possible addition could be to check the trace condition of the steady-state solution and throw a warning if it is violated more than some epsilon. But for now, everything looks good. @davidschlegel That's a good idea, so I added some assertions to all the tests where it was simple to do so.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689:238,assert,assertions,238,https://qutip.org,https://github.com/qutip/qutip/pull/1802#issuecomment-1035153689,2,"['assert', 'test']","['assertions', 'tests']"
Testability,"> Also, how does this PR fit relative to #1491? They appear to make many conflicting changes with each other. Hi Jake with respect to this. The apparent conflicting changes are only in the test file, if I am not mistaken. Ideally I would like this one to get approved, and then I will rebase #1491 from master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-820364728:189,test,test,189,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-820364728,1,['test'],['test']
Testability,"> Also, once you're done, leave this PR without merging and I'll tidy up the commit history. We shouldn't have things like 374debd (a wrong-way merge) because they really mess with the mainline of the history, and make things harder to traceback, and I can collapse all your changes into one ""logical"" change once it's working. . Ok. But what would be the better way to merge master here then?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-878190588:293,log,logical,293,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-878190588,1,['log'],['logical']
Testability,"> Also, regarding Python 3.8, I was saying because both times it only failed in that test run, also never failed in any of my runs. Should I make tolerance higher ?. Ok.... Let me try restart the CI test once",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640007551:85,test,test,85,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640007551,2,['test'],['test']
Testability,> An unrelated test fails after this is merged. It doesn't make sense to me...; > https://github.com/qutip/qutip/runs/3008054620. I am very confused too. Could we try re-run it and see what happens?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1603#issuecomment-875538184:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/1603#issuecomment-875538184,1,['test'],['test']
Testability,"> As I understand it, the only way to avoid needing to touch `MANIFEST.in` is to not have files distributed with the test suite (or to have the temporary files by `*.py`, since `setup.py` automatically recognises them). That's not really a pytest thing, it's a `setuptools` one.; > ; > I don't think there's a problem distributing files as part of the tests. You can add a line which says; > ; > ```; > recursive-include qutip/tests/qasm_files *.qasm; > ```; > ; > to `MANIFEST.in`, and that should hopefully fix the problem. You won't have the problem locally, because you'll be running `./setup.py develop`, which ""installs"" in-place, so you don't notice the fact that you've missed files from the manifest. In the tests, it runs `./setup.py install`, which does the copy, missing files which aren't in the manifest.; > ; > Boxi: I'm not certain what more you'd like to do with fixtures here. Fixtures are good for setup and tear down, parametrisation and sharing resources (like network connections), but I'm not certain what further benefit you get for a test function which is testing whether it can open a known file, read it, and construct the expected output. I think Sidhant is already doing some nice parametrisation of his tests, from what I see.; > ; > Sidhant: I added a comment on the exception test, since pytest gives us an easier-to-read context manager you can use. It's also typically better practice to handle file paths like I did in that (using the overloaded `/` operator with `pathlib.Path`, or `os.path.join`) rather than manually putting in slashes. Windows _usually_ will do the right thing now with slashes, but it's better to let Python handle it for us. Thanks for this information, it seems to work ! I was wondering if the following statement is still needed (at all) in `PACKAGE_DATA` in setup.py? ; `'qutip/tests/qasm_files': ['*.qasm'],`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-656450639:117,test,test,117,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-656450639,9,['test'],"['test', 'testing', 'tests']"
Testability,"> Assuming Simon's point isn't just a complete answer to your question: in the general case, this is an impossible question to answer - it touches on many parts of numerical integration, such as tolerance limits and adaptive step-size methods. When you're dealing with completely arbitrary time-dependence, there's not really any one-size-fits-all approach that'll work (despite how RK45 is often taught as a magic bullet in physics courses).; > ; > Here, you will likely find that your RK45 results depend strongly on how many intermediate timesteps you use, whereas QuTiP's results will be (marginally) more stable. This is because QuTiP will internally subdivide the timesteps more to achieve internal precision goals, but then only returns the results at the time points you ask for. You can increase the maximum number of allowed subdivisions by increasing the `nsteps` parameter in a `qutip.Options` object, and with the `options` keyword argument. I addressed Simon's question. Also, I tried different solver options in mesolve including solver type, nsteps, relative and absolute tolerence, etc ... Also for RK45 I tried to change the parameters in order to see if the solutions coincide. They didn't. I don't know if there exists an analytically solvable problem in which both Hamiltonian and dissipation operators are time dependent, but if there is such a problem, then I can use it as a benchmark in order to compare QuTiP and RK45.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1733#issuecomment-986665248:1399,benchmark,benchmark,1399,https://qutip.org,https://github.com/qutip/qutip/issues/1733#issuecomment-986665248,1,['benchmark'],['benchmark']
Testability,"> Consider what you're doing from a statistical sense here. If everything works correctly, then you're effectively trying a two-tail hypothesis test that your test binomial distribution has a probability of 0.25, given you made `n` observations of it. The analytic success rate of your test is then; > ; > ```python; > import scipy.stats; > def success(n, p, tol):; > dist = scipy.stats.binom(n, p); > return dist.cdf(n * (p+tol)) - dist.cdf(n * (p-tol)); > ```; > ; > where `success(4096, 0.25, 0.02)` is 99.67%. Since there are 5 independent runs on Travis, that's equivalent to a failure rate of 1.6% on every single CI run, which is several orders of magnitude too high. It's probably just luck that it was Python 3.8 on both occasions - it's a one-in-five chance that in two failing CI runs, it was the same setup both times.; > ; > You have to consider what is most appropriate to fix the test, and what you can reasonably test in ~1 second of runtime. You don't want to increase the tolerance too much, because then you can get a lot of false positives even if something is broken.; > ; > If you can bump the number of runs up to 100,000 and set the tolerance at 0.01, you'll have a per-test failure rate of ~3e-13, which is more like what we'd want. If you keep it at 4096, the tolerance should be more like 0.05 (which is pretty big tbh). Thanks for the excellent analysis. I don't think it's feasible to do 100,000 given the current. efficiency. It did give me incentive to make it somewhat faster. What is a good guideline for the maximum time a test can take. It seems like I can maybe do 150 runs in ~ 1s. In any case, it doesnt seem feasible to do even 4096 claims without taking quite a bit of time. Any ideas on how to structure the test differently ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689:144,test,test,144,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640087689,8,['test'],['test']
Testability,"> Could you send the equation for the case where `time_sense` is not `0`.; > ; > When I try it with a period of `1.0` it give extra term with very low frequencies:; > ; > ```; > dict_keys([0.0, 4.304872064735899e-09, 1.0157988986038049e-08, 1.1379302858450767e-08, -2.9820390185456766e-09, -4.304872064735899e-09, 5.8531169213021495e-09, 7.074430793714867e-09, -7.286911083281576e-09, -1.0157988986038049e-08, -5.8531169213021495e-09, 1.2213138724127176e-09, -1.3140028004583725e-08, -1.1379302858450767e-08, -7.074430793714867e-09, -1.2213138724127176e-09, -1.4361341876996443e-08, 2.9820390185456766e-09, 7.286911083281576e-09, 1.3140028004583725e-08, 1.4361341876996443e-08]); > ```; > ; > Is it normal? You did not include any test using `time_sense`.; > ; > ​. The relaxation of the secular approximation isn't by direct time-dependence. It was originally, but this was later changed to relax the secular approximation according to the ""importance"" of each term, which is dictated by a quotient. The numerator of the quotient is the product of the FFT coefficients that make up a certain element of the rate matrix super operator, and the denominator is the difference of frequencies between the two elements multiplied by the system frequency omega. When `time_sense` is `0`, the rate matrix is constructed using only the product of FFT coefficients for which the frequency arguments completely cancel. When `timesense` isn't `0`, however, is when that quotient comes into play. In a nutshell, this ends up dividing the rate at which a certain element changes the system by the frequency at which that rate rotates in the Floquet Basis. If the result of the quotient is small, the frequency is much higher than the collapse operator elements actually affect the system, such that it averages out on longer timescales. If the result of the quotient is large, then the collapse operator elements appreciably change the system on a shorter timescale than they rotate, such that their contribution t",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1631503788:731,test,test,731,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1631503788,1,['test'],['test']
Testability,"> DOC: Update what's new for 8.10</li>; <li><a href=""https://github.com/ipython/ipython/commit/385d69325319a5972ee9b5983638e3617f21cb1f""><code>385d693</code></a> Merge pull request from GHSA-29gw-9793-fvw7</li>; <li><a href=""https://github.com/ipython/ipython/commit/e548ee23ac460a99901f1cd43b94ae84a35ec393""><code>e548ee2</code></a> Swallow potential exceptions from showtraceback() (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13934"">#13934</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/0694b08b436203817059ec7e7136cf8561a6f013""><code>0694b08</code></a> MAINT: mock slowest test. (<a href=""https://github-redirect.dependabot.com/ipython/ipython/issues/13885"">#13885</a>)</li>; <li><a href=""https://github.com/ipython/ipython/commit/865591252a67c6907fe03228b4053305715286e6""><code>8655912</code></a> MAINT: mock slowest test.</li>; <li><a href=""https://github.com/ipython/ipython/commit/a011765b44febfb11bae122d2ed7db763621ac8f""><code>a011765</code></a> Isolate the attack tests with setUp and tearDown methods</li>; <li><a href=""https://github.com/ipython/ipython/commit/c7a9470e540392c575aac46c3ee5cf4fe5123eb1""><code>c7a9470</code></a> Add some regression tests for this change</li>; <li><a href=""https://github.com/ipython/ipython/commit/fd34cf5f1f6e243243c738c6e0cf62eb682c4d68""><code>fd34cf5</code></a> Swallow potential exceptions from showtraceback()</li>; <li>Additional commits viewable in <a href=""https://github.com/ipython/ipython/compare/7.31.1...8.10.0"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=ipython&package-manager=pip&previous-version=7.31.1&new-version=8.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2085:1656,test,tests,1656,https://qutip.org,https://github.com/qutip/qutip/pull/2085,1,['test'],['tests']
Testability,"> Do we have any tests for whether the isherm and isunitary preserving logic is correct?. We do have a few tests, see for instance `test_QobjUnitaryOper` which I modified in this PR to track a few more cases. However, the current tests are not very exhaustive. For example, they do not really ensure that hermiticity is inferred in the operation. some rethinking of these tests may be beneficial but I would prefer leaving that for another PR. Should I open an issue to remember this or do you prefer if I extend these tests in this PR?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-892862214:17,test,tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-892862214,6,"['log', 'test']","['logic', 'tests']"
Testability,"> Does anyone know how we would give some kind of deprecation warning when `from qutip import *` is made to say that only core functions will be imported from v5 onwards?. @ajgpitch . I know I'm resurrecting a dead thread, but I have a way of detecting star imports if you can cope with a fairly gross hack. The only internal difference in `from qutip import *` (that I know about) from `import qutip` is that in the former, the import system access the `qutip.__all__` list to see which names it should import. This is intended to be a list of names, so the star import doesn't _have_ to import every single name, i.e. so you can manually set what's public to a module; the star import is designed for use within packages, and the user importing a package like that is strongly recommended against (though in scientific code, I'm 100% sure that's a losing battle). So, what if we make `__all__` _look_ like a list, but a list that injects a warning whenever anyone tries to see what items it has? An example:; ```python; import warnings as _warnings. x = 2. class _all_wrapper(list):; def __iter__(self, *args, **kwargs):; _warnings.warn(""You star-imported!""); return super().__iter__(*args, **kwargs). __all__ = _all_wrapper(['x']); ```; I put that in a package called ""test"".; ```python; >>> from test import x; >>> x; 2; ```; or; ```python; >>> from test import *; /Users/jake/code/tmp/test/__init__.py:7: UserWarning: You star-imported!; _warnings.warn(""You star-imported!""); >>> x; 2; ```. I won't complain if you want to scream after that...",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1071#issuecomment-605502925:1272,test,test,1272,https://qutip.org,https://github.com/qutip/qutip/issues/1071#issuecomment-605502925,4,['test'],['test']
Testability,"> From what I understand, on intel, brmesolve seems to work correctly, but not on M1. This look like an issue with the eigensolver. Exactly. > Could you run the test suite to see if it fails the eigen and bloch redfield related tests: `pytest path_to_qutip/qutip/tests`. (Tests can take >30min). Yes it is failing these (and some others), but in particular it does fail everything in test_brmesolve.py and test_brmesolve_td.py. All failures I find seem to be related to the `Exception: ODE integration error` as mentioned in the original post.; On an emulated Intel terminal, the tests are all passing as expected.; This is strange, since I seem to find way more tests failing than reported in #1755.; Perhaps this is an issue with my installation, rather than qutip itself. I installed it in the standard way using conda (using the Apple Silicon version at 4.13). > Also could you look at the tensor directly:; > ; > ```; > R, H_eigenvector = bloch_redfield_tensor(sigmax(), a_ops=[[sigmax(), psd]]); > ```; > ; > If the tensor is wrong on M1, this would explain the error. Actually, that looks fine surprisingly enough (agrees with the Intel version). Thanks for the quick response. If I figure anything out, i'll let you know.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1203341063:161,test,test,161,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1203341063,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"> Given that this PR is to fix a particular bug in `correlation`, please could you also add a reproduction for the bug in #1460 in order to ensure that it truly is fixed (I see no reason it shouldn't be from this), and to make sure that we catch any possible regressions in the future?. I modified test_correlation.py to catch this error. It was previously using a non-Hermitian expectation operator which is why it did not raise an error. I changed it to use an Hermitian operator. This means it would fail the test without the fix in mesolve. . However, I wonder now if the test should check for both Hermitian and non-Hermitian expectation operators. I did not add both tests because I did not want to make it slower. Should I make it to cover both cases?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478#issuecomment-812849410:512,test,test,512,https://qutip.org,https://github.com/qutip/qutip/pull/1478#issuecomment-812849410,3,['test'],"['test', 'tests']"
Testability,"> Here are some tests of the proposed modifications. Thank you! I actually meant ""unit tests"" -- as in, adding the tests to `qutip/tests/test_steadystate.py`. It's also not clear to me from your examples how we should see the difference. > This may change the final steady state in some circumstances, but I could not rapidly find a situation where this is actually important. In this example, the two steady states are the same even though the weights are very different. I agree it would be good for the sparse and dense algorithms to align where its sensible to, but it's a bit tricky to evaluate the code if we don't have a concrete idea of the kind of situation in which the new code should be better (and in which situations it might be worse). > The current version gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] = np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([0.+0.j, 0.-0.j, 0.-0.j, 1.+0.j]); > ```; > ; > The proposed modification gives:; > ; > ```; > Ldense = L.data.todense(); > Ldense[0, :] += np.diag(weight*np.ones(n)).reshape((1, n ** 2)); > np.linalg.solve(Ldense, b); > >> array([1.e-16+0.j, 0.e+00-0.j, 0.e+00-0.j, 1.e+00+0.j]); > ```; >; > This is a better result than the one obtained with the current version. I can't see any difference between the old and new results other than that the floating point numbers are formatted a bit differently? Perhaps I am missing something.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-988058511,4,['test'],['tests']
Testability,"> Hi,; > ; > I installed qutip on my windows system and tried the testing codes and faced the problem (as the figure shows):; > ; > TypeError: Cannot convert _UnitedFuncCaller to qutip.cy.cqobjevo_factor.CoeffFunc; > ; > ![image](https://user-images.githubusercontent.com/13745165/60830800-9a9e5e00-a1ea-11e9-99d7-2ec24390083e.png); > ; > Here is the about() information:; > ; > QuTiP: Quantum Toolbox in Python; > Copyright (c) 2011 and later.; > A. J. Pitchford, P. D. Nation, R. J. Johansson, A. Grimsmo, and C. Granade; > ; > QuTiP Version: 4.4.0.dev0; > Numpy Version: 1.16.4; > Scipy Version: 1.2.1; > Cython Version: 0.29.11; > Matplotlib Version: 3.1.0; > Python Version: 3.7.3; > Number of CPUs: 8; > BLAS Info: INTEL MKL; > OPENMP Installed: True; > INTEL MKL Ext: True; > Platform Info: Windows (AMD64); > Installation path: C:\Anaconda\envs\qutip\lib\site-packages\qutip-4.4.0.dev0-py3.7-win-amd64.egg\qutip; > ; > I would appreciate it if you can give me some advice to help me pass the testing codes!. Hi,; Has this problem been solved? I met this same error when installing qutip-4.4.0.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1039#issuecomment-519833092:66,test,testing,66,https://qutip.org,https://github.com/qutip/qutip/issues/1039#issuecomment-519833092,2,['test'],['testing']
Testability,"> Hmmm... 4000/150~25 second. That's not very short actually. The total time for a whole round of qutip CI test costs 15min~20min on Travis.; > ; > Just ideas. Tests here seem to be two-folded:; > ; > * Test classical controlled gates in a circuit; > * Test the measurement functions; > ; > So maybe we can split it. The teleportation circuit test can be done without measurement. Just check the final state tracing out the ancillary qubits. The test for measurement can probably be done for single or two `Qobj` along without circuit. But `run_circuit_statistics`... Probably we then only need to check if the number of elements in the result is correct after some 50 runs?; > ; > On a different matter, I'm wondering if running the statistics takes so long, for such a small teleportation circuit, is it still advantageous in any case? Since we are doing simulation and have the full quantum state, one can actually calculate all 4 possible final states, classically mix them into a density matrix with the corresponding measurement probability and calculate the exact statistics distribution. I doubt that will be slower than 25s, although coding will be harder I suppose. I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ? . Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ? Seems like a decent idea !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253:107,test,test,107,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640107253,8,"['Test', 'test']","['Test', 'Tests', 'test']"
Testability,"> How did you install QuTiP?. In the FreeBSD, after QuTiP has been built, I run ```python -c ""import qutip.testing as qt; qt.run();""```, and it fails.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/891#issuecomment-403715589:107,test,testing,107,https://qutip.org,https://github.com/qutip/qutip/issues/891#issuecomment-403715589,1,['test'],['testing']
Testability,"> I added a test that compares `correlation_2op_1t` to its analytical solution. I was trying to match the `c_ops` of this new test to the ones appearing in `test_correlation_solver_equivalence`, which are:; > ` c_ops = [np.sqrt(G1 * (n_th+1)) * a, np.sqrt(G1 * n_th) * a.dag()]`; > However, the analytical solution I obtained for this case did not work unless I used a very small value for `n_th = 0.1`. I was wondering whether the analytical solution I got was wrong or whether this actually makes sense. I was thinking that the difference probably comes from the cut we use for the number of states (`N = 20`). I did a quick test and it seemed ok upto about n_th = 1 for N=20 and an atol of 2e-5. ; as an aside, I guess some minimal condition here is that the thermal occupation of the cut-off state should be smaller than the tolerance, which i guess you can get out of the analytic expression for the thermal state. maybe.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1478#issuecomment-813959317:12,test,test,12,https://qutip.org,https://github.com/qutip/qutip/pull/1478#issuecomment-813959317,3,['test'],['test']
Testability,"> I added ipython to the testing workflow. Let me know if it should have been included somewhere else. Hmm. I don't like adding random dependencies into the workflow config. On the other hand, this is specific to IPython. Maybe we can add an ""ipython"" section in `setup.cfg` and add that to `full`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1918#issuecomment-1146092238:25,test,testing,25,https://qutip.org,https://github.com/qutip/qutip/pull/1918#issuecomment-1146092238,1,['test'],['testing']
Testability,"> I addressed all your comments in my new commit, but when I try to run the tests with pytest I get a strange error:. This is likely because qutip is not correctly installed. Could you try uninstalling qutip and reinstalling again?. > Also, to avoid the circular import problem with tensor, would it be better if I created a new py file (qutip.core.fermionic_operators.py) for these new operators? . A new file for this seems too much for me... I think `operators.py` is the best choice but it includes indeed mostly basic operators not using `tensor`. Maybe there is a better place for this @Ericgig ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2166#issuecomment-1565683451:76,test,tests,76,https://qutip.org,https://github.com/qutip/qutip/pull/2166#issuecomment-1565683451,1,['test'],['tests']
Testability,"> I believe that `MultiTrajSolverImprovedSampling` and `MultiTrajResultImprovedSampling`. We only need one new class for the solver and result, not 2 each. It would even be nice if it could be inserted into `MCSolver` without making the code to messy...; >; Agreed ; > I believe that a scaling should be applied in to the `McResult.photocurrent` method. Could you check. It's an histogram of the jumps times.; > ; Yes you're right, sorry I missed that. Should be fixed now.; > The last issue is whether to make a new function or not. I feel it belong as an options in the existing mscolve, but it would be easy to overlook by users. As a new function it will get more attention. I also don't have a strong opinion on the matter.; >; I think you are right. I added it as an option to options and updated tests, docs accordingly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2218#issuecomment-1692317449:803,test,tests,803,https://qutip.org,https://github.com/qutip/qutip/pull/2218#issuecomment-1692317449,1,['test'],['tests']
Testability,"> I did the pycodestyle on my code, but it is highlighting errors that were there in the original code. It returned lines that have >linespace errors and more, should I edit them too?. I am going to leave this up to you. It is not required as long as the lines you modified follow PEP8. Although, fixing the output of pycodestyle in the same file would be very much welcome :smile:. > The issue was to add __repr__ function to QobjEvo class. Do I need to add a test? If so, can someone help me with it?. We will indeed need a test for repr. It does not need to be very complicated and in fact, something similar to what you show in the description of this pr should work. In this case, we would create a few different `QobjEvo` that cover most of the cases and we would check that `qobjevo.__rerp__()` returns the expected string. This test should go in `qutip/tests/core/test_qobjevo.py`. You can take a look there to see example of how the tests are written. If this is your first time writing tests you may want to take a look at [our documentation](https://qutip.readthedocs.io/en/master/development/contributing.html#testing) and also at pytests documentation. > If the behavior of the code has changed or new feature has been added, please also update the documentation in the doc folder, and the [notebook](https://github.com/qutip/qutip-tutorials). Feel free to ask if you are not sure. This will not be necessary this time. > Include the changelog in a file named: doc/changes/<PR number>.<type> 'type' can be one of the following: feature, bugfix, doc, removal, misc, or deprecation (see [here](http://qutip.org/docs/latest/development/contributing.html#changelog-generation) for more information). `feature` should work here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111#issuecomment-1455087838:461,test,test,461,https://qutip.org,https://github.com/qutip/qutip/pull/2111#issuecomment-1455087838,7,['test'],"['test', 'testing', 'tests']"
Testability,"> I saw that you added some tests although I must admit I am not sure how useful they will be in the future as they pretty much use the same code to generate the ref figure an the test figure. That being said, I do not know what alternative could be used for testing these cases, so lets just keep them as they are. I agree that the implementations are perhaps a bit too similar, but I'm happy that:. * they show that the code can at least be run, and; * matplotlib saves the plots to `result_images` when the tests are run so that one can look at the output if one wants to, and so; * I am pretty sure the reference implementations look correct and those won't change when the code changes (woot). So if one wants to introduce a bug one will have to change the code, then code change the reference code in the tests and not look at the images matplotlib produces, which is substantially better than the current situation. :)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-1058321987:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-1058321987,5,['test'],"['test', 'testing', 'tests']"
Testability,> I see the tests for the last commit as both passing and failing...; > Could you merge dev.major to rerun the tests. Merged.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-921738684:12,test,tests,12,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-921738684,2,['test'],['tests']
Testability,"> I suspect the method of using QobjEvo that was suggested above only use two time steps (initial and final time) in evolving the Hamiltonian as the seed and interpolate the Hamiltonian at the time between the initial and final time using some interpolation function. This is not the case. The answer to your question is to use `QobjEvo` as suggested. For example, here is a simple example using a fast-oscillating array function in a `QobjEvo` and a much shorter `tlist` in `mesolve`. You may need to set the solver options `nsteps`, `atol` and `rtol` to suitable values, as I have done here. ```python; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * 2.91e2 * fast_ts); # This is the behaviour you were suggesting is happening.; bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]). H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options). assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; ```. You can see that I was able to do a successful integration with only 2 times in `mesolve`, but many in a fast-oscillating Hamiltonian. Clearly the `bad_times` version (which only has the start and end points so misses all the fast oscillation behaviour) is completely different to the other two versions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525:1342,assert,assert,1342,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-810246525,2,['assert'],['assert']
Testability,> I think I still needed to change the test workflow. Lets see if this works but let me know if you prefer another approach to include ipython in testing. The current approach looks good to me.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1918#issuecomment-1152412952:39,test,test,39,https://qutip.org,https://github.com/qutip/qutip/pull/1918#issuecomment-1152412952,2,['test'],"['test', 'testing']"
Testability,"> I think the `.integrate(t, step=....)` interface is currently way too complex, as evidenced by the difficulty of implementing it and the hard to resolve issues.; > ; > SciPy has a much simpler ODE interface -- see https://github.com/scipy/scipy/blob/v1.7.1/scipy/integrate/_ivp/base.py#L25-L214. Essentially a single `.step()` function.; > ; > Is there a reason we could not implement something similar here, and just have one `.step()` method and then implement `.integrate()` on top of that?. The `.step()` is essentially `.integrate(self.t)`, sot there would be no need for both.; If you mean having `step()` always advance one internal integrator step, we don't always have that possibility, `dop853` cannot advance only one step. And it would require to safe `self.back` each time even when not needed.; If you want a method to just advance to the time `t`, what ever it is as `scipy` seems to do, it will crush `mcsolve` speed. `mcsolve` has a root finding step that require a some back and forth and ode schemes all have their quirks when doing this. For actual use `integrate`, `step` and `backstep` can be 3 methods. I had this in the evolver PR but was told to merge them... The complexity could be split: have `integrate` for normal evolution (`sesovle`, `mesolve`), and `step` or `mcstep` for `mcsolve`.; This would also make it easier to create new Integrator for special use, it is easier to choose not to support `mcsolve` if the logic is split.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667:1447,log,logic,1447,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-925988667,1,['log'],['logic']
Testability,"> I tried with `signature=` quite a bit but `(m, k), (k, n)` always produced thing like `(1, 1, 1), (1, 1)` despite setting `max_dims` and `min_dims` to various things. Huh, that's surprising. Share some example code and I'll have a look?. > I expected there to be other use cases. I started with the output of `write numpy.matmul` but ended up playing around with my own strategy (see difficulties with mutually_broadcastable_shapes`above) and liking the idea of not have to unpack`a`and`b`inside the test, and of being able to supply the shapes for`a`and`b` to other strategies (e.g. maybe we will have a strategy for Qobj and QobjEvo objects and want to try various combinations of multiplying things together). 👍 sounds good, carry on then!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1207510876:502,test,test,502,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1207510876,1,['test'],['test']
Testability,"> I'm going to change the Clifford group tests a little, and rebase the typo fix commit into the general refactor before this one should be merged. Sure",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251#issuecomment-626315402:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/pull/1251#issuecomment-626315402,1,['test'],['tests']
Testability,"> I'm not sure the `Qobj permute` failing test is related, by the way. Yeah we actually figured this one out. It's a numerical round off error. `Qobj permute` uses `tidyup`, with the same numerical tolerance as is used when the equality of two `Qobj`s are compared in the test. Kind of lucky that it didn't fail before. We either have to change the test to use a larger tolerance in the comparison, or give an argument to `Qobj permute` to not use `tidyup`. This is not really related to this PR but I'll implement the change once we decide on the best solution. Does anyone have thoughts on why `Qobj permute` uses `tidyup` by default in the first place? I don't know how `permute` actually implements the permutation, but naively I would have thought that a permutation could be done without any numerical error",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098#issuecomment-571353111:42,test,test,42,https://qutip.org,https://github.com/qutip/qutip/pull/1098#issuecomment-571353111,3,['test'],['test']
Testability,"> I've just spotted a bug in `isherm` on the new data layer, which is my fault for not getting the tests for that written yet. That may also be having some impact on the test fragility. Actually, I _didn't_ introduce a bug in `isherm`! It's just also present in the release version of QuTiP, but _masked_ by the `auto_tidyup`. In ""unrelated"" news: I discovered a dumb bug in `tidyup_dense`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1348#issuecomment-680059767:99,test,tests,99,https://qutip.org,https://github.com/qutip/qutip/pull/1348#issuecomment-680059767,2,['test'],"['test', 'tests']"
Testability,"> If I understand correctly it refers to line 300 in test_metrics, which has a new hellinger metric test by @wrzadkow . Could it be that using ""for _ in range(10):"" is a problem?. The following observations:; - `for _ in range(10)` is already in [line 128](https://github.com/qutip/qutip/blob/master/qutip/tests/test_metrics.py#L128) in `test_metrics.py` ; - [line 300](https://github.com/qutip/qutip/blob/master/qutip/tests/test_metrics.py#L300) is the end of docstring of `test_hellinger_monotonicity()` ; - the presence of `invalid escape sequence \o` in the error message; - this thread https://stackoverflow.com/questions/52335970/how-to-fix-string-deprecationwarning-invalid-escape-sequence-in-python. make me think that the issue may be caused by `\otimes` that I used in the docstring explanations. Don't have a Mac to reproduce and check whether removing this will help, though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-496497028:100,test,test,100,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-496497028,3,['test'],"['test', 'tests']"
Testability,"> Including a dimension of 8 makes the tests very slow to run. There's no real need to expand the dimensions of the test to such massive sizes - testing the stability of `eigh` should be done using a minimal test in a more specific location, such as in our general eigensystem tests.; > ; > In this case, you're constructing several 4096x4096 matrices using a sparse format, but they're all 100% dense so you spend ~30 seconds just handling sparse overhead that's nothing to do with the function call. You need to think about what a test is actually trying to test, and how long it _should_ take. When your changes are increasing the runtime by a factor of ~100, that's something you need to consider - are you actually increasing our test coverage, or just spinning the CI for longer? What is your change meant to catch? Could it be done faster in a different place? Take your time when you're changing the code, and really think about what you're trying to achieve. Good point I did not realize it was taking this long on the last mac test. . The thing is after testing thoroughly the issue starts to show itself at `2000X2000` matrices. This is less time consuming than `4096x4096` but still big. In any case `2000X2000` is something an user will probably probe, it is the size of aproximately an 11 qubit hamiltonian.; Regarding puting it with eigensystem tests there is one main issue: the eigenvalues are calculated as well as eigenstates which make running that test on the CI totally unfeasible. We could add a test for eigenenergies there but it seems unnatural. Other options are:; - Adding a test for eigenenergies vals on `test_sp_energies` [ Which I much prefer]; - Having a separate test file where we can include tests for all the nasty numeric instabilities.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-820522699:39,test,tests,39,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-820522699,16,['test'],"['test', 'testing', 'tests']"
Testability,"> Interesting, so doctest will also test docs in the code? How can I try it?. This are tested when you run `make doctest` as well. You can basically write the code example (like some already do) in the docstring of the function or class. For an example please check follow my other comment. It is indicated by the `>>>` and is tested unless skipped explicitly.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1344#issuecomment-676207593:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/pull/1344#issuecomment-676207593,3,['test'],"['test', 'tested']"
Testability,"> It doesn't look robust enough to be user facing as it is, but as a private function, if you get a 3.5x, I'd say we want it. I'll rename it to `_from_csr_blocks` and add some more checks on the ordering and shape of the ops if those aren't too expensive and add some tests. We can expose it publicly if that's ever useful. > Technically, just give a type to `i` and it's all running in c code. Thanks! Adding the type to `i` did make it a little faster.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2128#issuecomment-1477071388:268,test,tests,268,https://qutip.org,https://github.com/qutip/qutip/pull/2128#issuecomment-1477071388,1,['test'],['tests']
Testability,"> It's very clean, I really like the `set & set` and reusing the classes. Thanks!. > But in v4, while we used `f(t, args)` in most examples, we never said that it should be the exact signature up to variable name, so I don't think it an appropriate check for which version to use. Ideally, the check should be good enough we don't need to change any tests not directly related to the addition of this feature. I'm open to modifying the check for QuTiP v4 functions, but I would like to keep the check simple. To quote the Zen of Python, ""If the implementation is hard to explain, it's a bad idea."". :). > Also what should; > ; > ```; > def f(t, w, a=1):; > return a; > ; > coeff = coefficient(f, args={'w':1}); > coeff.replace_arguments(a=2)(0); > ```; > ; > give? Since `a` is not given, it's not our job to update it, or should we add it to `_f_arg_names`?. I think this works fine already in this branch. `a` is included in `_f_arg_names`, so it can be specified via `.replace_arguments(...)` but since it has a default it can also be left out.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390:350,test,tests,350,https://qutip.org,https://github.com/qutip/qutip/pull/1633#issuecomment-894670390,1,['test'],['tests']
Testability,"> Looks good in general. Will have a closer test later today. There are some unnecessary style changes to other parts of the code. Especially `'` to `""` was quite unnecessary... It is not massive but it makes it a bit hard to identify which is the essential change. How hard is it to revert the changes of `'` to `""`? Other styling updates like removing unused importations are fine. it was done by a linter ,I can remove it but it was done to make it consistent with the other areas, I can revert it. the main part is the 2 function change and the ones inside the loop",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2442#issuecomment-2145360068:44,test,test,44,https://qutip.org,https://github.com/qutip/qutip/pull/2442#issuecomment-2145360068,1,['test'],['test']
Testability,"> Looks great. I suggested some changes, mainly to docstring. I wonder what is the meaning of the filename qelib1.inc? Could we find a more explicit name if relevant? Should it be added to the Manifest file? It looks fine to me, looking forward to test it and having a section in the documentation would certainly help, under QIP. Ping for review of the notebook when ready and re-request this PR review. Regarding ""qelib1.inc"", it is a ""header"" file that contains some QASM gate definitions. It is available in the OpenQASM repository (as a standard file) and I think it's always included in QASM exports (atleast by QISKIT). It's useful because we don't need to write our own definitions and can just define QuTiP gates by mapping them to ""qelib1.inc"" gates.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1318#issuecomment-663824413:248,test,test,248,https://qutip.org,https://github.com/qutip/qutip/pull/1318#issuecomment-663824413,1,['test'],['test']
Testability,"> Looks like I did mess up with the floquet.py versus flimesolve.py. I think; > I forgot at some point that I was to include all my new stuff in just the; > flimesolve.py, and then forgot about that script altogether. I apologize; > for this, and I'll fix it.; >; > I'll also go back through and fix style issues. As with above, I think I; > forgot to keep the proper styling at a certain point.; >; > I tried to keep my changes to correlation.py to a minimum, and contained; > to simply adding in the new solver in the make_solver function, as well as; > adding in some inputs as options to that solver, but I'll go through and; > review to see what's wrong.; >; > Thanks for your feedback, and I'll try to get this all fixed up as soon as; > I can.; >; >; > On Mon, Jun 26, 2023, 4:49 PM Eric Giguère ***@***.***>; > wrote:; >; >> ***@***.**** requested changes on this pull request.; >>; >> Something is strange in floquet.py, did you include change not meant to; >> be here?; >> Both floquet.py and flimesolve.py have the original fmesolve and the new; >> flimesolve...; >>; >> Tests should pass.; >> Right now, scipy 1.11 breaks cvxpy which we use so this breaks a few; >> tests, but the changes you made to correlation.py also break the tests.; >> We will want tests for the new solver.; >>; >> Could you also review the style (pep8).; >>; >> - There are some very long line, we use the official 80 characters; >> width.; >> - space are not uniform, sometime they are doubled, other time; >> missing.; >> - There are rules for empty lines, there should not be 3 empty lines; >> in a function.; >>; >> —; >> Reply to this email directly, view it on GitHub; >> <https://github.com/qutip/qutip/pull/2140#pullrequestreview-1499406717>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/AV5WL5EA3UU23BHDUONIEN3XNHYVNANCNFSM6AAAAAAWLGP4AU>; >> .; >> You are receiving this because you authored the thread.Message ID:; >> ***@***.***>; >>; >. -- ; Best Regards,; Fenton Clawson",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805:2410,Test,Tests,2410,https://qutip.org,https://github.com/qutip/qutip/pull/2140#issuecomment-1610056805,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"> Mostly I want to know whether I should have been able to do this with `mutually_broadcastable_shapes`. Yes, you should use [`mutually_broadcastable_shapes(signature=)`](https://hypothesis.readthedocs.io/en/latest/numpy.html#hypothesis.extra.numpy.mutually_broadcastable_shapes) for that. The signature syntax is a little different, since Numpy does it with strings, but we already support named dimensions, constant-size dimensions, and optional dims. Should be a bit more efficient too. > I also wouldn't mind a quick check of `qobj_shared_shapes`. Is this a good thing to be doing with shared strategies?. It does technically work? But in such a situation I'd probably just use `st.data()` and draw in the body of the test; see `hypothesis write numpy.matmul` for an example. If you expected to use it in many tests maybe a custom strategy, but for just `test_data_matmul_operator` that doesn't seem worth it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1207464240:722,test,test,722,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1207464240,2,['test'],"['test', 'tests']"
Testability,"> Nice work!; > ; > > I have removed self.gates as well as self.gates_and_measurements. The replacement is the more ""general"" (and less of a mouthful) self.circuit_ops which contains both.; > ; > I like this merge of to attributes. However, we shouldn't change the attribute name `gates`, at least not in this PR here. It's an open attribute API and as you see we used it a lot in tests. It's very likely that others are using it too.; > ; > Personally, I would keep the attribute `gates` since even for measurement operations, people still usually say ""measurement gates"". `circuit_ops` is certainly more accurate, but might be hard to remember and thus makes the learning curve steeper. Rolled back to self.gates",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648:381,test,tests,381,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-647834648,1,['test'],['tests']
Testability,> Not a huge amount to be done about that CodeClimate failure to be honest. These complexity checking tools were all written with business software application logic in mind and don't cater well to cases where a single conceptual unit can be quite complex. Perhaps when we move to GitHub actions we can run our own linting tools directly there and get rid of CodeClimate.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-824625785:160,log,logic,160,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-824625785,1,['log'],['logic']
Testability,"> Not sure how to make a test for this. The file name is random and it's not always reliable when the `__del__` is called which is where the file is erased. You could create a coefficient and check that the last entry of `coeff_files.file_list` looks correct and exists. The wouldn't check the deletion but would check that the filename is correct. You can do `del qutip.qobjevo.coeff_files` to trigger the clean-up of the object, but that is a bit GC dependent and implementing it properly would require calling `gc.collect()`. Not sure if that is worth the hassle.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2251#issuecomment-1781948773:25,test,test,25,https://qutip.org,https://github.com/qutip/qutip/pull/2251#issuecomment-1781948773,1,['test'],['test']
Testability,"> On the `test_dqd_current()` test: it appears that the problem is with the element 14 in the `eps_vec`. I did some more checking with different values for `eps_vec`, and there are other values which give problems, you can see the code below.; > ; > I defined a function that returns the values for a given value of `eps`:; > ; > ```python; > def current_noise_eps(eps):; > H = (eps/2 * sz + tc * sx); > L = qutip.liouvillian(H, c_ops); > rhoss = qutip.steadystate(L); > current, noise = qutip.countstat_current_noise(L, [],; > rhoss=rhoss,; > J_ops=J_ops); > ; > current2 = qutip.countstat_current(L, rhoss=rhoss, J_ops=J_ops); > assert abs(current - current2) < 1e-8; > ; > current2 = qutip.countstat_current(L, c_ops, J_ops=J_ops); > assert abs(current - current2) < 1e-8; > ; > current_target = (tc**2 * GammaR; > / (tc**2 * (2+GammaR/GammaL) + GammaR**2/4 + eps**2)); > noise_target = current_target * (; > 1 - (8*GammaL*tc**2*(4 * eps**2 * (GammaR - GammaL); > + GammaR*(3*GammaL*GammaR + GammaR**2 + 8*tc**2)); > / (4*tc**2*(2*GammaL + GammaR) + GammaL*GammaR**2; > + 4*eps**2*GammaL)**2); > ); > ; > return current.flatten()[0], current_target, noise.flatten()[0], noise_target, rhoss; > ```; > ; > Now I have the following:; > ; > ```; > >>> res = current_noise_eps(1.04); > >>> print(res[2:4]); > (0.06374906663351243, 0.0011104778081249154); > ```; > ; > So the `noise` is quite different from `noise_target`.; > ; > But if I increment `eps` by `1e-15` then everything is fine.; > ; > ```; > >>> res1 = current_noise_eps(1.04+1e-15); > >>> print(res1); > (0.0011104778081249132, 0.0011104778081249143); > ```; > ; > Comparing `rhoss` in the two cases gives differences that are of the order of the increment in `eps`:; > ; > ```; > >>> print(res[-1].data.todense() - res1[-1].data.todense()); > [[ 1.11022302e-16+0.00000000e+00j 0.00000000e+00+0.00000000e+00j; > 0.00000000e+00+0.00000000e+00j]; > [ 0.00000000e+00+0.00000000e+00j -5.55111512e-16+0.00000000e+00j; > -1.11022302e-16+8.673617",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1993817100:30,test,test,30,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1993817100,3,"['assert', 'test']","['assert', 'test']"
Testability,"> Overly specific build-system.requires can also cause failures with conda-forges build system. Conda-forge does not and cannot use `build-system.requires`; those are PyPI packages and they might not even have the same name in Conda. Conda always sets PIP_NO_BUILD_ISOLATION to avoid this. This (the linked log) is tripping up on setup_requires, which is deprecated and I don't think you have it set up correctly anyway; if you ask for `Cython` but don't `install_requires` Cython, Cython will not be installed before running the setup.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-989955502:307,log,log,307,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-989955502,1,['log'],['log']
Testability,"> Please just use a single pyproject.toml with oldest-supported-numpy. You don't need to copy them around, the build you get is fine for docs & users. You can disable build isolation if you need to have a special newer NumPy for the compile (which is very rare). Thank you for taking a look here. As I explained before, we can't just use oldest-supported-numpy directly because we also require numpy >= 1.16.6 for our own code. The pypi-pyproject.toml file contains a copy of oldest-supported-numpy but with everything less that 1.16.6 replaced with 1.16.6. Overly specific build-system.requires can also cause failures with conda-forges build system -- e.g. this one for building this project with Python 3.10 on Windows 64 -- https://dev.azure.com/conda-forge/feedstock-builds/_build/results?buildId=407213&view=logs&jobId=00f5923e-fdef-5026-5091-0d5a0b3d5a2c&j=00f5923e-fdef-5026-5091-0d5a0b3d5a2c&t=3cc4a9ed-60e1-5810-6eb3-5f9cd4a26dba (maybe there is some separate way around that).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-989950888:814,log,logs,814,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-989950888,1,['log'],['logs']
Testability,"> Quick disclaimer, I can't seem to install `cvxpy` on my machine without using anaconda, so I haven't run the qutip tests personally. I assume these run automatically in the pipeline. That's fine. The CI pipeline does test with cvxpy.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2416#issuecomment-2094924396:117,test,tests,117,https://qutip.org,https://github.com/qutip/qutip/pull/2416#issuecomment-2094924396,2,['test'],"['test', 'tests']"
Testability,"> Thank you for the PR. It look as it should work, but could you add a test to ensure it does.; > ; > Most codeclimat issues should be solved if you make a functions to read `(N, dims)`.; > ; > For super operator you can use: `N**2 = np.prod(qutip.dimensions.flatten(dims[0]))` Ideally, we should also check `type_from_dims(dims) == 'super'`. Hi, @Ericgig! Thank you for the comments.; I will:. [ ] add a test; [ ] create a function to implement the check on `N`, `dims`.; [ ] add a check for the superoperator functions: using `N**2 = np.prod(qutip.dimensions.flatten(dims[0]))`; [ ] add a check for the superoperator functions: check `type_from_dims(dims) == 'super'`. Hi, @AGaliciaMartinez! Thanks for your comments. The plan for `dev.major` is to substitute both `N` and `dims` in favour of `dimensions`, just as you described. I'll start working on that, as soon as I finish the current PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1846#issuecomment-1090664850:71,test,test,71,https://qutip.org,https://github.com/qutip/qutip/pull/1846#issuecomment-1090664850,2,['test'],['test']
Testability,"> Thank you. Can you please add tests for this? I'm leaving to @BoxiLi a closer review. Hello, Nathan! I already submitted a PR for a notebook testing the new functions under the branch ; https://github.com/qutip/qutip-notebooks/pull/106. If you want to see the notebook, here it's at my fork of the repo (latex equations display well in Jupyter): . https://github.com/mlaguna10/qutip-notebooks/blob/master/examples/Pauli-X%2C%20Y%2C%20Z%20and%20S%2CT%20Quantum%20Gates%20using%20QuTiP%20(Test%20under%20%231208).ipynb",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-602757325:32,test,tests,32,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-602757325,3,"['Test', 'test']","['Test', 'testing', 'tests']"
Testability,"> Thanks @eendebakpt. This is a great improvement for a small change. I left one suggestion for adding a bit more of a description to the change log, but I think it looks good to merge. Are there any more changes you'd like to make?. I am creating a similar PR against dev.major. Perhaps there are more optimizations to be done (have not checked yet), but I think it is better to put it in a seperate PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1980#issuecomment-1220046615:145,log,log,145,https://qutip.org,https://github.com/qutip/qutip/pull/1980#issuecomment-1220046615,1,['log'],['log']
Testability,"> Thanks @jakobjakobson13. A few modules' tests fail, on all operating systems, https://travis-ci.org/github/qutip/qutip/jobs/746708587. I wonder why.; > ; I think I went a bit to far. Perhaps I will close this pull request and cut it down into smaller chunks. > By the way, what software did you use, `autoflake`?; >; No, `deepcode.ai` but I don't know really know how good or bad it performs in contrast to other static code checkers.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1394#issuecomment-735719114:42,test,tests,42,https://qutip.org,https://github.com/qutip/qutip/pull/1394#issuecomment-735719114,1,['test'],['tests']
Testability,"> The bug in the 3.9 tests seems a real bug with the new tests, it should be fixed. If it's numpy version specific, we can officially drop that version. (1.20). Yes, I need to fix that. > I see no mention of tidyup, some of the tested operation use it, should it not be turned off for these tests? Otherwise it will cause random fails eventually. Disabling tidyup during the tests is a good idea. > What is the plan for other functions? Most of the common function are tested, but some often used are missing (`kron`, `l2`, `isherm`, `expect`). For this PR I just covered all the functions that are methods of the `Data` class. Some of these call out to dispatch functions, but I included those anyway since they're part of the `Data` class API. > I am also curious about some of the more complex functions (`inv`, `expm`, `pow`) would fare, but I don't expect them to play nice with this kind of test. I suspect those will be a bit tricky, but I think we can still find a way to assert that they give the right answer even if it requires restricting a bit what examples hypothesis generates. > I disagree with making our code worst for common use case just to handle junk the same way others do. I don't think I did this anywhere now? In some cases what QuTiP was doing was just wrong. E.g. `inf * CSR-zeros` is just `NaNs` everywhere. The previous QuTiP answer was wrong. We also don't have to handle junk the same way, but we do have to handle junk in a way that is sensible and avoids silently propagating or swallowing errors. People are going to make mistakes, that set of people includes us as core QuTiP developers.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1507141695:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1507141695,8,"['assert', 'test']","['assert', 'test', 'tested', 'tests']"
Testability,"> The time-dependent weights are available as the `trace` attribute for each trajectories, so I though them as an (indirectly?) physical property of each trajectories. Since they are per trajectories, if feels normal to belong to the single trajectory result. But moving the logic to `NmmcResult` would simplify `MultiTrajResult` a lot and allow to remove `TrajectoryResult`. I do think it would be good to keep the `trace` property on the trajectories, but for the purpose of calculating the weighted averages, it could perhaps be treated like the other types of weights that we have.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958:275,log,logic,275,https://qutip.org,https://github.com/qutip/qutip/pull/2502#issuecomment-2297864958,1,['log'],['logic']
Testability,"> Then out about removing dict expect? Dictionary support was not tested and supported only for some solver for a long time. It ; > would be strange to have it become the default. Well, this is v5 -- we are trying to make things nicer. The issue with lists of e_ops is that often the e_ops have no sensible ordering. E.g. if the e_ops are, say, the number operator and projectors on to two different bases of interest then `[qutip.num(N), proj1, proj2]` are later accessed as `.expect[0]`, `.expect[1]` and `.expect[2]` which are then unreadable and fairly arbitrary and unmemorable numbers. Having `.expect[""num""]`, `.expect[""proj1""]` and `.expect[""proj2""]` is much more readable and will result in fewer mistakes. I *really* like the dict interface because it gives this readability to results. I'm happy to accept that others may prefer lists, but providing multiple interfaces creates a problem for any code working with results. So it is a bit of tricky question to resolve. > For MC result, it has little impact, dict are a little more annoying to work with compared to list, but it need the expect as ndarray; not list or dict anyway. The MC result classes already have to work around these things in awkward ways, and probably need to be a lot more careful -- e.g. e_ops functions can return strange things like Qobjs or perhaps even stranger things like strings or dicts which can't be averaged over. > There are a some differences for the user. Code using `np.array(result.expect)` or `for expect in result.expect:` will break. Agreed, although unless `result.expect` contains a uniform set of things, this are probably not sensible things to be doing. I have some other ideas but I think they make more of a mess -- e.g. keep `.expect` a list but provide `.expect_d` which is a dict. If one needs to write v4 compatible code one can always pass a list of e_ops and then work with `.expect` a bit carefully (i.e. as a dict). Thoughts?. I have added tests now, so it's just the `.expect` issu",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1141326041:66,test,tested,66,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1141326041,1,['test'],['tested']
Testability,"> There are already test for `clebsch` in `test_utilities`. Could you move your new test there?. Yes sorry I didn't realise that was there, I put something together quickly because I was asked to include a test. I'll write something that fits better with the existing test and include it",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1177#issuecomment-583730951:20,test,test,20,https://qutip.org,https://github.com/qutip/qutip/pull/1177#issuecomment-583730951,4,['test'],['test']
Testability,"> There are shims to make Pulse and qip tests work since they used QobjEvo.tlist and QobjEvo.ops.coeff.; @BoxiLi, the new QobjEvo can be added even if coefficient's tlist are different, but you cannot get back the tlist and the array from them. Also for _step_func_coeff, before the first time, Coefficient return the first value of the array, not 0 as expected in pulse.py. Thanks @Ericgig ! This is very useful!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1336#issuecomment-672712550:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/1336#issuecomment-672712550,1,['test'],['tests']
Testability,"> This (the linked log) is tripping up on setup_requires, which is deprecated and I don't think you have it set up correctly anyway; if you ask for `Cython` but don't `install_requires` Cython, Cython will not be installed before running the setup. This is intentional -- we want to support installing from pre-built packages without a compiler or Cython installed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1735#issuecomment-990032654:19,log,log,19,https://qutip.org,https://github.com/qutip/qutip/pull/1735#issuecomment-990032654,1,['log'],['log']
Testability,"> This also means that adding `qutip-qip` as an optional package right now does not make much sense. Probably we can drop this.; > ; > To test it on GitHub action we need to install `qutip-qip@master` for now and test the importation. @hodgestar Is that ok? Otherwise, I can try to get out a new release of `qutip-qip` in a day or so. Just to update the change log and click the button. Completely up to you, of course! If you choose to drop the optional dependency for now, I can also just put those changes on another PR to be merged when the time is right.; I'll stand by for your decision regarding the CI tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920#issuecomment-1147629930:138,test,test,138,https://qutip.org,https://github.com/qutip/qutip/pull/1920#issuecomment-1147629930,4,"['log', 'test']","['log', 'test', 'tests']"
Testability,"> This is likely because qutip is not correctly installed. Could you try uninstalling qutip and reinstalling again?. @BoxiLi I did this and it worked, thank you! The issue was that I had originally installed it with the `build` package instead of with the setuptools build. Also, the code now passes both my new tests and existing tests in `qutip.tests.core.test_operators.py`. Additionally, I ran the `pytest qutip/tests -k` command on `f_op`, `fcreate`, and `fdestroy` to run all the tests associated with the new functions, and they pass as well. Lastly, regarding the circular import problem, I did as you suggested and moved the import inside the `f_op` function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2166#issuecomment-1565769987:312,test,tests,312,https://qutip.org,https://github.com/qutip/qutip/pull/2166#issuecomment-1565769987,5,['test'],['tests']
Testability,"> This randomly failing test appears again. It is really getting annoying. I copied the error message from Travis bellow:; > ; > ```; > =================================== FAILURES ===================================; > ___________________________ test_MCSimpleConstStates ___________________________; > @pytest.mark.slow; > def test_MCSimpleConstStates():; > ""Monte-carlo: Constant H with constant collapse (states)""; > N = 10 # number of basis states to consider; > a = destroy(N); > H = a.dag() * a; > psi0 = basis(N, 9) # initial state; > kappa = 0.2 # coupling to oscillator; > c_op_list = [np.sqrt(kappa) * a]; > tlist = np.linspace(0, 10, 100); > mcdata = mcsolve(H, psi0, tlist, c_op_list, [], ntraj=ntraj,; > options=Options(average_states=True)); > assert_(len(mcdata.states) == len(tlist)); > assert_(isinstance(mcdata.states[0], Qobj)); > expt = expect(a.dag() * a, mcdata.states); > actual_answer = 9.0 * np.exp(-kappa * tlist); > avg_diff = np.mean(abs(actual_answer - expt) / actual_answer); > > assert_equal(avg_diff < mc_error, True); > E AssertionError: ; > E Items are not equal:; > E ACTUAL: False; > E DESIRED: True; > ../../../../miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.5.0.dev0+4512014-py3.7-macosx-10.9-x86_64.egg/qutip/tests/test_mcsolve.py:240: AssertionError; > ----------------------------- Captured stdout call -----------------------------; > 10.0%. Run time: 2.25s. Est. time left: 00:00:00:20; > 20.0%. Run time: 4.93s. Est. time left: 00:00:00:19; > 30.0%. Run time: 6.67s. Est. time left: 00:00:00:15; > 40.0%. Run time: 8.10s. Est. time left: 00:00:00:12; > 50.0%. Run time: 10.13s. Est. time left: 00:00:00:10; > 60.0%. Run time: 12.40s. Est. time left: 00:00:00:08; > 70.0%. Run time: 14.97s. Est. time left: 00:00:00:06; > 80.0%. Run time: 16.57s. Est. time left: 00:00:00:04; > 90.0%. Run time: 18.81s. Est. time left: 00:00:00:02; > 100.0%. Run time: 20.29s. Est. time left: 00:00:00:00; > Total run time: 20.34s; > ---------- covera",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896:24,test,test,24,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896,1,['test'],['test']
Testability,"> This was reported on the help group; > https://groups.google.com/forum/#!topic/qutip/L-MIFFwK0xU; > ; > (copying from there); > the newest mkl(Math library for intel) version(2019) can not work on QuTiP 4.3.1. I rollback it to mkl(2018.0.3), the qutip.testing then work well.; > ; > If using mkl(2019.0), there will MKL read problems, like:; > ; > ```; > File ""C:\Users\ym24chen\Anaconda3\; > x = lu.solve(b, verbose=verbose); > File ""C:\Users\ym24chen\Anaconda3\envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 164, in solve; > np_x, np_error); > OSError: exception: access violation reading 0x0000000000000008; > envs\qutip-env\lib\site-packages\qutip\_mkl\spsolve.py"", line 384, in mkl_spsolve; > ```; > ; > Env info:; > ; > ```; > QuTiP Version: 4.3.1; > Numpy Version: 1.15.4; > Scipy Version: 1.1.0; > Cython Version: 0.29.6; > Matplotlib Version: 3.0.3; > Python Version: 3.7.2; > Number of CPUs: 8; > BLAS Info: INTEL MKL; > OPENMP Installed: False; > INTEL MKL Ext: True; > Platform Info: Windows (AMD64); > Installation path: C:\Users\canwa\AppData\Local\conda\conda\envs\qutipenv\lib\site-packages\qutip; > ==============================================================================; > ```. How can I rollback it to mkl(2018.0.3)? I just use ""conda install mkl=2018"" but the test still return errors.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/975#issuecomment-536162505:254,test,testing,254,https://qutip.org,https://github.com/qutip/qutip/issues/975#issuecomment-536162505,2,['test'],"['test', 'testing']"
Testability,"> Tried a few more options, looks good.; > ; > Yeah, I know it is from a linter. Personally, I'm fine since the change is not massive. If others think this might mess up the code history, please speak up.; > ; > Please add a Towncrier file for the change log.; > ; > I'll wait for one or two days, if no one comments, will merge. Sounds good, I will add the Towncrier file shortly and open an issue for the new bug",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2442#issuecomment-2147354527:255,log,log,255,https://qutip.org,https://github.com/qutip/qutip/pull/2442#issuecomment-2147354527,1,['log'],['log']
Testability,"> We allow the user to supply the `QobjEvo` class to use as an option, and allow them to specify either the class itself or a name for the class. E.g. `qobjevo_cls=QobjEvoHerm` or `qobjevo_cls=herm`. I would prefer the user not needing to know how we do it, just that there an option that speed up the simulation by 40 % in normal cases. Knowing that we forced it in an alternative qobjevo class is not useful and I hope we won't be forced to add many kinds of qobjevo. > Perhaps we should also not allow users to switch the class later by changing options? That might simplify the logic because we wouldn't need to modify the RHS when options are updated. Since changing options does not change the physic, I would like them to be changeable. But the `rhs`, and `_rhs` is certainly not great. I will rethink the way to do it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203:582,log,logic,582,https://qutip.org,https://github.com/qutip/qutip/pull/2173#issuecomment-1664483203,1,['log'],['logic']
Testability,"> We do have a few tests, see for instance `test_QobjUnitaryOper` which I modified in this PR to track a few more cases. Perfect. Thank you!. > However, the current tests are not very exhaustive. For example, they do not really ensure that hermiticity is inferred in the operation. some rethinking of these tests may be beneficial but I would prefer leaving that for another PR. Should I open an issue to remember this or do you prefer if I extend these tests in this PR?. Happy to leave this for another PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1620#issuecomment-893430207:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/1620#issuecomment-893430207,4,['test'],['tests']
Testability,"> What is the main difference between `expect` and `measure`? That's the main thing that comes up ; > to my mind. What different question are you answering? I also wonder if `expect` could be called. . `expect` returns the expectation value (i.e. probability weighted average of the measurements). `measure` returns a *single* measurement (i.e. an eigenvalue and an eigenstate, selected randomly with weighted probabilities). > The description of the `measure` function is a bit general maybe with this regard. But I might have ; > missed the point completely (my bad). Open to suggestions. I will also re-read it and see if I can think of something clearer.; ; > Somehow `smesolve` tests fail with Travis CI, not sure how this PR could have affected it. I'll dig a bit and see if the failure is related somehow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408:683,test,tests,683,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-536753408,1,['test'],['tests']
Testability,> What made you trip over this?. I was using this function with N=13 for some testing code I have and realised it took too long to create the matrix.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1688#issuecomment-942163402:78,test,testing,78,https://qutip.org,https://github.com/qutip/qutip/pull/1688#issuecomment-942163402,1,['test'],['testing']
Testability,"> Which qutip-tensorflow tests are affected? All of them?. Yes, as this warning is raised when qutip is imported. > Do you know why qutip's own tests are not affected?. To be honest, I am not sure. I think at this moment the tests in `dev.major` do not treat warnings as errors (see [this commit](https://github.com/qutip/qutip/commit/c446e4acd0e4b87a7993a9861440debe5436023b)). Although I am not sure if prior to this commit qutip's own tests were affected. However, I have just realised that this is not the first time the deprecation warning from `pyximport` is silenced. In particular, in PR #1506 @jakelishman also silenced this warning in the master branch: ; https://github.com/qutip/qutip/blob/3432bfeb19ba14f1ef51e9e775588e33db17349c/qutip/cy/pyxbuilder.py#L39-L47; I can add the same comment and the `module=pyximport`. Was there any reason to not merge this change in dev.major?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582#issuecomment-864919889:25,test,tests,25,https://qutip.org,https://github.com/qutip/qutip/pull/1582#issuecomment-864919889,4,['test'],['tests']
Testability,"> Yes, you should use [`mutually_broadcastable_shapes(signature=)`](https://hypothesis.readthedocs.io/en/latest/numpy.html#hypothesis.extra.numpy.mutually_broadcastable_shapes) for that. The signature syntax is a little different, since Numpy does it with strings, but we already support named dimensions, constant-size dimensions, and optional dims. Should be a bit more efficient too. I tried with `signature=` quite a bit but `(m, k), (k, n)` always produced thing like `(1, 1, 1), (1, 1)` despite setting `max_dims` and `min_dims` to various things.; ; > It does technically work? But in such a situation I'd probably just use `st.data()` and draw in the body of the test; see `hypothesis write numpy.matmul` for an example. If you expected to use it in many tests maybe a custom strategy, but for just `test_data_matmul_operator` that doesn't seem worth it. I expected there to be other use cases. I started with the output of `write numpy.matmul` but ended up playing around with my own strategy (see difficulties with mutually_broadcastable_shapes` above) and liking the idea of not have to unpack `a` and `b` inside the test, and of being able to supply the shapes for `a` and `b` to other strategies (e.g. maybe we will have a strategy for Qobj and QobjEvo objects and want to try various combinations of multiplying things together)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1207475361:671,test,test,671,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1207475361,3,['test'],"['test', 'tests']"
Testability,"> [![Coverage Status](https://camo.githubusercontent.com/5b95d685d6392d8f3beccad1e575f46ea5187ccd/68747470733a2f2f636f766572616c6c732e696f2f6275696c64732f33323635363130332f6261646765)](https://coveralls.io/builds/32656103); > ; > Coverage decreased (-10.2%) to 60.763% when pulling **[3b09002](https://github.com/qutip/qutip/commit/3b090027a58ee842c419244920d65623d70ee4a2) on jakelishman:core-replace-fast_csr_matrix** into **[0740a04](https://github.com/qutip/qutip/commit/0740a04cf0b9286b5e13cb0bcf026de6b284c011) on qutip:dev.major**. It should be noted that the coverage drop is so large here because large tracts of tested Python source files were removed and replaced by _Cython_ source files, which Coveralls does not handle correctly. These files typically are tested (albeit not yet completely), but Coveralls reports `.pyx` files as having 7 lines of code, of which all 7 are missed.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-672831585:622,test,tested,622,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-672831585,2,['test'],['tested']
Testability,"> _**Other minor changes**_; > ; > In `def show(self)`, the plot was not being displayed using the previous lines of code in the function, so I have commented them out and changed it to; > ; > ```; > if self.fig:; > plt.show(self.fig); > ```; This is something I have not being able to reproduce. It works fine for me with the unmodified lines of code in `show()`. Could you provide an example of when it stops working? In this way, we can include it in a test to avoid the issue happening again.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-945596935:456,test,test,456,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-945596935,1,['test'],['test']
Testability,"> `ProcessPoolExecutor` being enough to fix most windows tests is surprising. I have a feeling this has something to do with processes spawned not still being running after the function exits. > Now we just need to speed up correlation tests. Any idea how to speed up the correlation tests, or should I just skip those again in this PR and we can fix them in a follow up PR?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948#issuecomment-1171235442:57,test,tests,57,https://qutip.org,https://github.com/qutip/qutip/pull/1948#issuecomment-1171235442,3,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_control_pulseoptim.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; creating build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/bloch_redfield.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; copying qutip/legacy/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/legacy; creating build/lib.macosx-10.9-x86_64-3.7/qutip/cy/openmp; copying qutip/cy/openmp/,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:16213,test,tests,16213,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_eigenstates.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_dimensions.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_random.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_interpolate.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_brmesolve.py -> build/lib.macosx-10.9-x8,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15702,test,tests,15702,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_floquet.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_countstat.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_ptrace.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_entropy.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_openmp.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_processor.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_scattering.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_graph.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_gates.py -> build/lib.macosx-10.9-x86_64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:15269,test,tests,15269,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_utilities.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/__init__.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_sp_eigs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fileio.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_subsys_apply.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cy_structs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_partial_transpose.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_pulse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_lattice.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobj.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_piqs.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rhs_reuse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_stochastic_se.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_fastsparse.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_expect.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_wigner.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_mcsolve.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_parallel.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_qobjevo.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_cavityqed.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_correlation.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_superop_reps.py -> build/lib.macosx-10.9-x86_64-3.7/qutip/tests; copying qutip/tests/test_rand.py -> build/lib.macosx-1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1404:14492,test,tests,14492,https://qutip.org,https://github.com/qutip/qutip/issues/1404,2,['test'],['tests']
Testability,> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/func2subr.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__version__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/diagnose.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/capi_maps.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f90mod_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/f2py_testing.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/use_rules.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/auxfuncs.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; copying numpy/f2py/__main__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py; creating build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_mixed.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_logical.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_assumed_shape.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_common.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_kind.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_array_from_pyobj.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_return_real.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/util.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_size.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_callback.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/test_string.py -> build/lib.macosx-11.0-arm64-3.9/numpy/f2py/tests; copying numpy/f2py/tests/__init__.py -> build/lib.macosx-11.0-,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:30343,test,tests,30343,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/function_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraysetops.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/arraypad.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/_datasource.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; copying numpy/lib/ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib; creating build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_type_check.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_twodim_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_polynomial.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__iotools.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_shape_base.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_ufunclike.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_index_tricks.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arrayterator.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test__version.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_io.py -> build/lib.macosx-11.0-arm64-3.9/numpy/lib/tests; copying numpy/lib/tests/test_arraysetops.py -> build/lib.macosx-11.0-arm64-3,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:35379,test,tests,35379,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['tests']
Testability,> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_smoke.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_randomstate_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_seed_sequence.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_generator_mt19937_regressions.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_random.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; copying numpy/random/tests/test_regression.py -> build/lib.macosx-11.0-arm64-3.9/numpy/random/tests; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/setup.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; copying numpy/testing/print_coercion_tables.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/nosetester.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/__init__.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/noseclasses.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/parameterized.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; copying numpy/testing/_private/decorators.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/_private; creating build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_utils.py -> build/lib.macosx-11.0-arm64-3.9/numpy/testing/tests; copying numpy/testing/tests/test_decorators.py -> build/lib.macosx-11.0,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1740:44937,test,testing,44937,https://qutip.org,https://github.com/qutip/qutip/issues/1740,2,['test'],['testing']
Testability,"> can you add some cases that test N is calculated correctly including implicit tensor structure in dims, because that's what this is meant to be most useful for, right?. @jakelishman I have added 2 more functions to test N and tensor shape. I was a bit confused about how to check for tensor structure in dims. So, I check if the shape of output matches to what it is supposed to be. . Would you prefer these functions be combined into one ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1509#issuecomment-831499015:30,test,test,30,https://qutip.org,https://github.com/qutip/qutip/pull/1509#issuecomment-831499015,2,['test'],['test']
Testability,"> does this floquet formalism supports any hamiltonian or just it works for two level systems?. It should support any hamiltonian. I have simulations test cases with harmonic oscillators for instance. However, you should have a look at the code from #766 since the code currently in QuTiP repository seems to have been tested only with two-level systems and contains some bugs. > Also the code uploaded is not working, how to plot this wigner function?. I'm sorry, I have no idea what you are talking about. > Floquet formalism is totally not working fro me. plz help. I think you should first try to make it work with simple two-level systems. See http://qutip.org/docs/latest/guide/dynamics/dynamics-floquet.html and https://gitlab.inria.fr/lverney/qutip_floquet_example/blob/master/Example.ipynb. Note that there are some bugs in the current QuTiP code which are fixed by #766 but this one is not yet merged.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/772#issuecomment-355973074:150,test,test,150,https://qutip.org,https://github.com/qutip/qutip/issues/772#issuecomment-355973074,2,['test'],"['test', 'tested']"
Testability,"> pytest has this bad habit of loading all available plugins whether or not they're actually used by the tests being run. It's quite annoying actually. It would be better if it only loaded plugins specified in conftest.py. Absolutely agree with this. > But it can be useful if the test code itself can be made robust with respect to the problem. Also yes - if I understand right, it's just the testing code that's a problem here, right, not the actual internal code? We can't swap to `pyplot.close('all')` in the library code (for obvious side-effect-y reasons), but if it's in the tests, then it shouldn't be an issue to change. I wonder why it caused a problem in the first place, though - if we could track it down (does `xvfb` do similar things to inline backends with respect to ""capturing"" images during construction/return?) it would be nice to use something slightly more targetted than `pyplot.close('all')`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909159005:105,test,tests,105,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909159005,4,['test'],"['test', 'testing', 'tests']"
Testability,"> thanks, looks good to me! not sure why tests are failing. Definitely not related to this change, but weird. Had a brief look but couldn't make much sense of it :/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2550#issuecomment-2439085075:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/pull/2550#issuecomment-2439085075,1,['test'],['tests']
Testability,"> though that's a whole other can of worms, because that's GPL'd. Yes, if it is GPL then it should be removed. That license can be construed to mean that all other pieces of code that use it must be under the same license; One can read the license as all derivative works must be GPL. So I would revert that PR ASAP. > legality of asserting copyright ""2011 and onwards"" in general. Yeah putting years I think is the correct thing. Didn't know that at the time. > I'm starting at IBM in Lev Bishop's team on the 5th of July. Look forward to talking to you in July!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864049973:331,assert,asserting,331,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864049973,1,['assert'],['asserting']
Testability,"> warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 7.81e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 8.35e+14); > > > warnings.warn(msg, UmfpackWarning); > > > /usr/lib/python2.7/dist-packages/scipy/sparse/linalg/dsolve/umfpack/umfpack.py:576: UmfpackWarning: (almost) singular matrix! (estimated cond. number: 1.03e+15); > > > warnings.warn(msg, UmfpackWarning); > > > ok; > > > Superoperator: Conversion matrix to vector to matrix ... ok; > > > Superoperator: Test compability between matrix/vector conversion and ... ok; > > > Superoperator: Conversion between matrix and vector indices ... ok; > > > Superoperator: Conversion vector to matrix to vector ... ok; > > > wigner: test wigner function calculation for coherent states ... ok; > > > wigner: test wigner function calculation for Fock states ... ok; > > > wigner: compare wigner methods for random density matrices ... ok; > > > wigner: compare wigner methods for random state vectors ... ok; # ; ## ERROR: Failure: ValueError (invalid literal for int() with base 10: '1post0'). Traceback (most recent call last):; File ""/usr/lib/python2.7/dist-packages/nose/loader.py"", line 411, in loadTestsFromName; addr.filename, addr.module); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 47, in importFromPath; return self.importFromDir(dir_path, fqname); File ""/usr/lib/python2.7/dist-packages/nose/importer.py"", line 94, in importFromDir; mod = load_module(part_fqname, fh, filename, desc); File ""/usr/local/lib/python2.7/dist-packages/qutip/tests/test_mcsolve.py"", line 232, in <module>; @unittest.skipIf(version2int(Cython.**version**) < version2int('0.14') or; File ""/usr/local/lib/python2.7/dist-packages/qutip/**init**.py""",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/126:13986,test,test,13986,https://qutip.org,https://github.com/qutip/qutip/issues/126,1,['test'],['test']
Testability,> we can sort out any conflicts. ```text; [~/code/qutip/qutip/qutip] (qutip-dev) (dev.major); jake@tauros$ git merge master | grep 'CONFLICT'. CONFLICT (content): Merge conflict in setup.py; CONFLICT (add/add): Merge conflict in setup.cfg; CONFLICT (content): Merge conflict in qutip/visualization.py; CONFLICT (modify/delete): qutip/tests/test_superoper.py deleted in HEAD and modified in master. Version master of qutip/tests/test_superoper.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_subsys_apply.py; CONFLICT (content): Merge conflict in qutip/tests/test_random.py; CONFLICT (modify/delete): qutip/tests/test_rand.py deleted in master and modified in HEAD. Version HEAD of qutip/tests/test_rand.py left in tree.; CONFLICT (content): Merge conflict in qutip/tests/test_qubitcircuit.py; CONFLICT (content): Merge conflict in qutip/tests/test_noise.py; CONFLICT (content): Merge conflict in qutip/tests/test_mkl.py; CONFLICT (content): Merge conflict in qutip/tests/test_device.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_qubit_evolution.py; CONFLICT (content): Merge conflict in qutip/tests/solve/test_brtools.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_superop_reps.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_qobj.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_metrics.py; CONFLICT (content): Merge conflict in qutip/tests/core/test_eigen.py; CONFLICT (modify/delete): qutip/superoperator.py deleted in HEAD and modified in master. Version master of qutip/superoperator.py left in tree.; CONFLICT (modify/delete): qutip/sparse.py deleted in HEAD and modified in master. Version master of qutip/sparse.py left in tree.; CONFLICT (content): Merge conflict in qutip/solve/stochastic.py; CONFLICT (content): Merge conflict in qutip/solve/steadystate.py; CONFLICT (content): Merge conflict in qutip/solve/sesolve.py; CONFLICT (content): Merge conflict in qutip/solve/mesolve.py; CONFLICT (conten,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165:334,test,tests,334,https://qutip.org,https://github.com/qutip/qutip/pull/1582#issuecomment-864984165,10,['test'],['tests']
Testability,"> you can see that when it runs conda uninstall cython, it downgrades numpy to 1.14.2. This is really strange. > This would not be a problem in a conda-forge release build, because the numpy API dependency is pinned in the feedstock, but it is a potential problem on pip source builds. I was setting up a GitHub Action test for `qutip_qip` https://github.com/qutip/qutip-qip/pull/6. `pip installation` works well there, but it could be that I don't use any run-time compiling.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1448#issuecomment-782174452:319,test,test,319,https://qutip.org,https://github.com/qutip/qutip/pull/1448#issuecomment-782174452,1,['test'],['test']
Testability,">; <li><a href=""https://github.com/urllib3/urllib3/commit/2698537d52f8ff1f0bbb1d45cf018b118e91f637""><code>2698537</code></a> Update vendored six to 1.16.0</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/07bed791e9c391d8bf12950f76537dc3c6f90550""><code>07bed79</code></a> Fix deprecation warnings for Python 3.10 ssl module</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/d725a9b56bb8baf87c9e6eee0e9edf010034b63b""><code>d725a9b</code></a> Add Python 3.10 to GitHub Actions</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/339ad34c677c98fd9ad008de1d8bbeb9dbf34381""><code>339ad34</code></a> Use pytest==6.2.4 on Python 3.10+</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/f271c9c3149e20d7feffb6429b135bbb6c09ddf4""><code>f271c9c</code></a> Apply latest Black formatting</li>; <li><a href=""https://github.com/urllib3/urllib3/commit/1884878aac87ef0494b282e940c32c24ee917d52""><code>1884878</code></a> [1.26] Properly proxy EOF on the SSLTransport test suite</li>; <li>See full diff in <a href=""https://github.com/urllib3/urllib3/compare/1.26.4...1.26.5"">compare view</a></li>; </ul>; </details>; <br />. [![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=urllib3&package-manager=pip&previous-version=1.26.4&new-version=1.26.5)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores). Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`. [//]: # (dependabot-automerge-start); [//]: # (dependabot-automerge-end). ---. <details>; <summary>Dependabot commands and options</summary>; <br />. You can trigger Dependabot actions by commenting on this PR:; - `@dependabot rebase` will rebase this PR; - `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it; - `@dependab",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1563:2678,test,test,2678,https://qutip.org,https://github.com/qutip/qutip/pull/1563,1,['test'],['test']
Testability,">I added the teleportation circuit because it seemed like a simple enough example to test both classically controlled gates and measurements. I have some separate (non-circuit based) examples in the other file. Maybe the run_statistics test can be not on the teleportation circuit and something even simpler ?. Maybe, but I find teleportation already a very short circuit, isn't it?. >Re: the idea for run_statistics, do you mean tracking the various probability elements during each measurement (along with the state) ?. Yes, if we have n qubit measurements, we will have 2^n possible final state. One can calculate the state for each of them along with its probability and then get the exact statistics.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087:85,test,test,85,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640113087,2,['test'],['test']
Testability,">The compound assignment operators have different semantics,. I suggest to reconsider such a wording a bit more. :thought_balloon: I imagine that the discussed assignment variants should logically be equivalent. >which may change the behaviour of the code. Some differences are documented. :thought_balloon: Would you find any “effects” on the software run time characteristics desirable?. >… certain operations that need to perform a copy no longer do. How would you like to identify (and eventually mark) the source code places where in-place data modifications should be excluded? :thinking:. >We already do use compound assignments in many places where we absolutely want the operation to be in-place. Thanks for such a background information. >For immutable types on the left, …, the compound assignment has no difference (other than evaluating subscripts only once). :thought_balloon: Can this information trigger any further development considerations?. >…, it's also just not a good idea to change existing code with no actual measured benefit from an engineering perspective. How do you think about to clarify evolving development views any further by corresponding test cases? :thinking:",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-972776708:187,log,logically,187,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-972776708,2,"['log', 'test']","['logically', 'test']"
Testability,"@@ -310,7 +310,7 @@ class Test_expand_operator:; [ 1, -1, 1, -1, -1, 1, -1, 1],; [ 1, 1, -1, -1, -1, -1, 1, 1],; [ 1, -1, -1, 1, -1, 1, 1, -1]]); - expected = expected/np.sqrt(8); + expected /=np.sqrt(8); np.testing.assert_allclose(test, expected); ; def test_cyclic_permutation(self):; diff --git a/qutip/tests/test_graph.py b/qutip/tests/test_graph.py; index 23fa6f22..f29c7379 100644; --- a/qutip/tests/test_graph.py; +++ b/qutip/tests/test_graph.py; @@ -70,7 +70,7 @@ def test_graph_rcm_boost():; M[4, 6] = 1; M[5, [6, 7]] = 1; M[6, 7] = 1; - M = M+M.T; + M += M.T; M = sp.csr_matrix(M, dtype=complex); with pytest.deprecated_call():; perm = reverse_cuthill_mckee(M, 1); @@ -120,7 +120,7 @@ def test_graph_weighted_matching():; A.data = np.ones(a_len); d = np.arange(0, 25) + 2; B = sp.diags(d, offsets=0, format='csc'); - A = A+B; + A += B; perm = np.random.permutation(25); perm2 = np.random.permutation(25); B = sp_permute(A, perm, perm2); diff --git a/qutip/tests/test_mcsolve.py b/qutip/tests/test_mcsolve.py; index f8567d0e..fe3f264c 100644; --- a/qutip/tests/test_mcsolve.py; +++ b/qutip/tests/test_mcsolve.py; @@ -173,7 +173,7 @@ def test_expectation_dtype(options):; a = qutip.tensor(qutip.destroy(focks), qutip.qeye(2)); sm = qutip.tensor(qutip.qeye(focks), qutip.sigmam()); H = 1j*a.dag()*sm + a; - H = H + H.dag(); + H += H.dag(); state = qutip.basis([focks, 2], [0, 1]); times = np.linspace(0, 10, 5); c_ops = [a, sm]; diff --git a/qutip/tests/test_mesolve.py b/qutip/tests/test_mesolve.py; index f17115ec..bc6cce59 100644; --- a/qutip/tests/test_mesolve.py; +++ b/qutip/tests/test_mesolve.py; @@ -238,8 +238,8 @@ class TestJCModelEvolution:; nc_ss, na_ss = self.jc_steadystate(; N, wc, wa, g, kappa, gamma, pump, psi0, use_rwa, tlist); ; - nc_ss = nc_ss * np.ones(np.shape(nc)); - na_ss = na_ss * np.ones(np.shape(na)); + nc_ss *= np.ones(np.shape(nc)); + na_ss *= np.ones(np.shape(na)); ; assert_(abs(nc[-1] - nc_ss[-1]) < 0.005, True); assert_(abs(na[-1] - na_ss[-1]) < 0.005, Tru",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872:25257,test,tests,25257,https://qutip.org,https://github.com/qutip/qutip/issues/1714#issuecomment-974625872,1,['test'],['tests']
Testability,"@AGaliciaMartinez @gaurav-iiser Since you are looking at the Bloch sphere code too, I'd appreciate some more eyes / trying out of these changes if you have time. We don't have great tests for these plotting functions and the behaviour is rather environment dependent (Python console vs IPython console vs Jupyter notebook vs Spyder).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1619#issuecomment-950309855:182,test,tests,182,https://qutip.org,https://github.com/qutip/qutip/pull/1619#issuecomment-950309855,1,['test'],['tests']
Testability,"@AGaliciaMartinez Hello, I have made the required changes in the __repr__() of QobjEvo. . Output of the new code:; ```; >>> import qutip; >>> qutip.QobjEvo([qutip.qeye(2), lambda t: t]); <QobjEvo: dims=[[2], [2]], shape=(2, 2), type=oper, superrep=None, isconstant=False, num_elements=1>; ```; _In your suggestion, there wasnt a ""<"" before QobjEvo, so I added that._. I have also edited the page according to the `pycodestyle`. Kindly check the test too. This is my first test, so do suggest changes, if required. I could not think of different cases, so I write 4 cases, and checked them according to the expected result.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111#issuecomment-1458446395:445,test,test,445,https://qutip.org,https://github.com/qutip/qutip/pull/2111#issuecomment-1458446395,2,['test'],['test']
Testability,"@AGaliciaMartinez I applied your suggestions, updated the docstrings and added some tests. Would you mind having a quick last review?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-1057408459:84,test,tests,84,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-1057408459,1,['test'],['tests']
Testability,"@AGaliciaMartinez Thank you!; I have removed both `<` and `>` from the `repr()`. Now it looks like this:; ```; >>> import qutip; >>> qutip.QobjEvo([qutip.qeye(2), lambda t: t]); QobjEvo: dims=[[2], [2]], shape=(2, 2), type=oper, superrep=None, isconstant=False, num_elements=1; ```. I have added many tests according to your suggestions. Now there are 7 cases to check.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111#issuecomment-1464940552:301,test,tests,301,https://qutip.org,https://github.com/qutip/qutip/pull/2111#issuecomment-1464940552,1,['test'],['tests']
Testability,@AGaliciaMartinez Thanks for the review and the good suggestions. I've applied them so I'll merge once tests pass.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1818#issuecomment-1060998181:103,test,tests,103,https://qutip.org,https://github.com/qutip/qutip/pull/1818#issuecomment-1060998181,1,['test'],['tests']
Testability,"@AGaliciaMartinez This doesn't look terrible to me, but we've avoided silencing warnings like this in qutip so far and it would be nice to keep it that way. Some questions:. * Do you know why qutip's own tests are not affected?; * Which qutip-tensorflow tests are affected? All of them?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1582#issuecomment-864882142:204,test,tests,204,https://qutip.org,https://github.com/qutip/qutip/pull/1582#issuecomment-864882142,2,['test'],['tests']
Testability,@AGaliciaMartinez Would you mind updating this branch to the latest master branch? (I am trying to understand the broken test),MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1692#issuecomment-947715265:121,test,test,121,https://qutip.org,https://github.com/qutip/qutip/pull/1692#issuecomment-947715265,1,['test'],['test']
Testability,"@ArchieB151 I've now run the notebook myself using QuTiP 4.7.0 and it produces the expected plots. However, it has numerous small things that need to be fixed because it was originally written for an older version of QuTiP. We are almost ready to release a completely updated set of notebooks that updates all of these old notebooks. These notebooks are tested automatically regularly. You can find the updated version of the Jaynes-Cummings lecture at https://qutip.org/qutip-tutorials/tutorials-v4/lectures/Lecture-1-Jaynes-Cumming-model.ipynb and the full set of notebooks at https://qutip.org/qutip-tutorials/ (the page is very plain HTML, but it will be prettified soon). Could you try the updated notebook with 4.7.0 and see if it works for you?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987#issuecomment-1229167791:354,test,tested,354,https://qutip.org,https://github.com/qutip/qutip/issues/1987#issuecomment-1229167791,1,['test'],['tested']
Testability,@Babalion Thank you for tyring.; Please let us know if you meet any bug. I am keeping both for version of `mcsolve` for now for benchmarks.; The new version has more features but it's slower than the previous.; The new version will replace the main one before we release in v5.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1710#issuecomment-974489887:128,benchmark,benchmarks,128,https://qutip.org,https://github.com/qutip/qutip/pull/1710#issuecomment-974489887,1,['benchmark'],['benchmarks']
Testability,"@BoxiLi . Yes, how to include gates in qutip is not clear to me. Many of them seems specialized so I don't think we should keep them all. Keeping only some of them could be fine but I am not well placed to choose a subset of commonly used gates and the `target` made them quite specialized. It also means that some gates will be defined in both qutip and qutip-qip. I also want all function that create `Qobj` in qutip the follow an common interface (they should all support `dtype`) and if we want these functions to also follow the qip signature, it could get somewhat complex. I think removing them and having the private functions for tests will make it easier for us on the long run. I see the use of `expand_operator` now that you explain it. I would prefer to have it in dimension.py and having users call it manually than being included in the `Qobj` creation function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262:639,test,tests,639,https://qutip.org,https://github.com/qutip/qutip/pull/1890#issuecomment-1121155262,1,['test'],['tests']
Testability,@BoxiLi ; ![tests](https://user-images.githubusercontent.com/15188655/78184791-ae03f000-742f-11ea-8736-03e929654bf2.png),MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607480527:12,test,tests,12,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607480527,1,['test'],['tests']
Testability,"@BoxiLi I am happy with the code in this PR now. Great work.; Can you resolve the merge conflicts? I am guessing this is why we don't see the Travis test results. I am not concerned about the CodeClimate test failures. Might be worth commenting on this:; 'Function adjacent_gates has a Cognitive Complexity of 142 (exceeds 5 allowed).' ; though, as it's an order of magnitude beyond the rest :-). Thanks, Alex.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1065#issuecomment-537843702:149,test,test,149,https://qutip.org,https://github.com/qutip/qutip/pull/1065#issuecomment-537843702,2,['test'],['test']
Testability,@BoxiLi I believe this is already solved in QuTiP 5 (or at least I haven't seen it in the Windows tests easily). Do you have an easy way to check?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1190#issuecomment-1171589413:98,test,tests,98,https://qutip.org,https://github.com/qutip/qutip/issues/1190#issuecomment-1171589413,1,['test'],['tests']
Testability,"@BoxiLi I guess; https://github.com/qutip/qutip/blob/4f9b04b149734a7d81cb25ff25a844e4ee41a6ea/qutip/tests/test_processor.py#L333-L345; didn't successfully add a check for this?. I'll try get the unit tests running locally so I can add to this, but feel free to fix this up on my behalf if it's obvious to you :)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1322#issuecomment-658689372:100,test,tests,100,https://qutip.org,https://github.com/qutip/qutip/pull/1322#issuecomment-658689372,2,['test'],['tests']
Testability,"@BoxiLi I'd like you to approve to since this is a very important link to `qutip_qip`. Once we have Boxi's approval and the tests pass, I think we can consider this done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920#issuecomment-1150044489:124,test,tests,124,https://qutip.org,https://github.com/qutip/qutip/pull/1920#issuecomment-1150044489,1,['test'],['tests']
Testability,"@BoxiLi Sure, the tests looks not too complex. I'm working on it. I'm grouping the gates for better error handling. @jakelishman Thanks. Sorry, I was just too lazy to set up the tests on my machine, LOL. I simply create the pull request and see if the code pass. That's why there are always one or two minor fixes here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104:18,test,tests,18,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629843104,2,['test'],['tests']
Testability,"@BoxiLi Would you be happy to apply this to `qutip-qip` too?. @drew-parsons Could you check that this works for you and that I haven't missed any other cases? The entire test suite passed for me, but one never knows.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1648#issuecomment-909203229:170,test,test,170,https://qutip.org,https://github.com/qutip/qutip/pull/1648#issuecomment-909203229,1,['test'],['test']
Testability,"@BoxiLi also, quite interestingly it seems that the tests don't fail all the times. This is another run of the tests:. ```; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; ======================================================== 1 failed, 2872 passed, 119 skipped, 67 deselected, 67 warnings in 132.32s (0:02:12) ========================================================; ```. I actually think it only happens if I use `qutip.testing.run()` more than once in the same python shell. And by running pytest directly they don't seem to fail. . `test_countstat.py::test_dqd_current` is the only one that fails consistently.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1007387315:52,test,tests,52,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1007387315,5,"['Assert', 'test']","['AssertionError', 'testing', 'tests']"
Testability,"@BoxiLi thank you so much for the comments! . I addressed all your comments in my new commit, but when I try to run the tests with `pytest` I get a strange error:. <img width=""570"" alt=""Screen Shot 2023-05-27 at 1 01 17 PM"" src=""https://github.com/qutip/qutip/assets/74874354/1b34ab67-a5c0-4223-863d-d7b64109f153"">. This seems to be an issue with a circular import in `qutip.core.data.__init__.py` file, but I haven't touched anything in that file, or for that matter, any file besides `qutip.core.operators.py` and `qutip.tests.core.test_operators.py`. I wanted to reach out and ask if this problem has been resolved somewhere else. Also, to avoid the circular import problem with `tensor`, would it be better if I created a new py file (`qutip.core.fermionic_operators.py`) for these new operators? happy to do this if it would be helpful. Thank you so much, and please let me know if you have any insight on the `pytest` error :)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2166#issuecomment-1565664898:120,test,tests,120,https://qutip.org,https://github.com/qutip/qutip/pull/2166#issuecomment-1565664898,2,['test'],['tests']
Testability,@ElieGouzien the new QuTiP release solves this. See the [change log](http://qutip.org/docs/latest/changelog.html) for more information on new features.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1019#issuecomment-510892254:64,log,log,64,https://qutip.org,https://github.com/qutip/qutip/issues/1019#issuecomment-510892254,1,['log'],['log']
Testability,"@EricGig thank you for the extensive investigation. What do you think of; adding (even with a temporarily note) this information in the QuTiP Docs? I; feel like the fix may take long and having something written up under some; official section on the website may help for future reference. On Wed, 13 May 2020 at 23:38, Eric Giguère <notifications@github.com> wrote:. > I did some tests and; > 1 - Cause by fortran zheer (lapack eigenvalue solver for complex hermitian; > matrices) (c's version Ok); > 2 - It happen when installing the scipy stack with pip but not when; > installing it with conda.; > 3 - It depend on the problem size, 64 seems particularly bad, usually it; > fails on the second call.; > 4 - I only got it in zheevr which is only used in brmesolve. But Nathan; > got it in other tests which use scipy's eigh.; > 4 - It happen in scipy in the fortan version of lapack:; >; > import numpy as np; > from scipy.linalg import eigh; > H = random_hermitian(64); > eigh(H) # Work fine; > eigh(np.asfortranarray(H)) # segfault after a few try, may need to change H; >; > Possible solutions (for zheevr):; >; > - Installing scipy with conda, the easiest solution, but not in our; > control.; > - Finding a way to link clapack from cython. Linking scipy's one would; > require good knowledge of scipy internals since only one cython interface; > is provided. Linking to another installation of lapack, but it would; > require the user to install lapack or install it with qutip. Both seems; > wrong to me.; > - For mac user, call scipy's eigh from cython i zheevr, slower but; > better than risking segfault.; > - Have the code directly in qutip. We can adapt it from OpenBlas:; > https://github.com/xianyi/OpenBLAS/blob/master/lapack-netlib/LAPACKE/src/lapacke_zheevr.c; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/1197#issuecomment-628259492>, or; > unsubscribe; > <",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264:381,test,tests,381,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-628441264,2,['test'],['tests']
Testability,"@Ericgig . - docstrings should be fixed. - coveraged increased with . `e_ops = [callable, qobj]; e_ops = [callable, callable]; e_ops = [qobj, qobj]`. - added a more efficient and clear pytest parametrization; - fixed the repeated sparse test",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157:237,test,test,237,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1082333157,1,['test'],['test']
Testability,"@Ericgig ; > Is there a way to set towncrier to not require the PR number? Otherwise we need to open a PR without the changelog, which will fail the towncrier test, to modify it to add the change log... It would a lot better if we could add it when developing or have a towncrier read it from the Changelog section of PR description. Yes, I think we could use the issue number that the change is for, if this workflow makes sense for QuTiP (I don't know, I'm a first-time contributor). This is what [pytest does](https://github.com/pytest-dev/pytest/blob/main/CONTRIBUTING.rst#preparing-pull-requests).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1927#issuecomment-1154193144:159,test,test,159,https://qutip.org,https://github.com/qutip/qutip/pull/1927#issuecomment-1154193144,2,"['log', 'test']","['log', 'test']"
Testability,"@Ericgig @nathanshammah @hodgestar ; Hi. All. I need help with creating PR for the qutip-lattice repo. Not quite sure how to do it separately. This is try 1. The lattice.py and topology.py are moved from qutip/ to qutip/lattice which also contains the qutip/lattice/tests/test_lattice.py with all the test functions for the new functions. Usage examples for the new functions can be found in https://github.com/sbisw002/qutip.lattice-notebooks; You'll know how I imported the module and understand the examples. . I still need to learn how the separate repository can be updated, please help with that.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2014:266,test,tests,266,https://qutip.org,https://github.com/qutip/qutip/pull/2014,2,['test'],"['test', 'tests']"
Testability,"@Ericgig After reading the following comment in `setup.cfg`; ```; ; This uses ConfigParser's string interpolation to include all the above; ; dependencies into one single target, convenient for testing full builds.; ```; I changed my mind a bit about the role of `full`. It seems that the intention of full is to install everything for testing and development, so it makes sense for the ipython dependency to be included there. After I changed my mind, I just cherry-picked Asier's merge commit for #1918 to master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1970#issuecomment-1207180169:194,test,testing,194,https://qutip.org,https://github.com/qutip/qutip/pull/1970#issuecomment-1207180169,2,['test'],['testing']
Testability,@Ericgig All tests except Mac are passing. Can we merge now?; @nonhermitian Would you want to my Wigner function to be renamed?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/912#issuecomment-475860332:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/pull/912#issuecomment-475860332,1,['test'],['tests']
Testability,"@Ericgig Approved, because faster tests are good, but I am wondering if the krylovsolve tests are much slower on v5 because tests didn't seem to timeout on v4?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1861#issuecomment-1098919801:34,test,tests,34,https://qutip.org,https://github.com/qutip/qutip/pull/1861#issuecomment-1098919801,3,['test'],['tests']
Testability,@Ericgig Can you help me with this one? I am considering adding tests for progressbar.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1471891250:64,test,tests,64,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1471891250,1,['test'],['tests']
Testability,@Ericgig Can you please guide me through (step-by-step developing test function or test classes) writing tests for progressbar? I don't have much experience with writing python tests? But I am a quick learner and can easily grasp the fundamentals.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220:66,test,test,66,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1474760220,4,['test'],"['test', 'tests']"
Testability,@Ericgig Happy for this to be merged as soon as the tests finish.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1778#issuecomment-1017835823:52,test,tests,52,https://qutip.org,https://github.com/qutip/qutip/pull/1778#issuecomment-1017835823,1,['test'],['tests']
Testability,"@Ericgig Hey Eric, I fixed the test script issues last week, but wasn't sure if you wanted me to ping you again. I'm pinging you again now, but if this isn't what you would like, please let me know!. That is, I'm _pretty sure_ everything should be working now. The test_flimesolve.py script, flimesolve (with your changes made - without the fixing of the step method yet), and correlation.py (where I added options for FLiMESolve to be used) should all be working now. Let me know if there's anything else that needs fixed. Thank you!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-2082770693:31,test,test,31,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-2082770693,1,['test'],['test']
Testability,"@Ericgig Hey Eric, added your changes to the test, fixed the documentation error as well. I also added a steady state solver, would you want me to make a test for that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-2094417518:45,test,test,45,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-2094417518,2,['test'],['test']
Testability,@Ericgig Hi. I added `lsqr` and all tests succeeded.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2120#issuecomment-1470193242:36,test,tests,36,https://qutip.org,https://github.com/qutip/qutip/pull/2120#issuecomment-1470193242,1,['test'],['tests']
Testability,@Ericgig Hi. I added tests. Could you review the code?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2203#issuecomment-1682090307:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/2203#issuecomment-1682090307,1,['test'],['tests']
Testability,@Ericgig Hi. I prefer the latter. I am adding tests in #2193 now.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2192#issuecomment-1637065595:46,test,tests,46,https://qutip.org,https://github.com/qutip/qutip/pull/2192#issuecomment-1637065595,1,['test'],['tests']
Testability,"@Ericgig Hi. The Github test fails because of plot_spin_distribution. ```plot_spin_distribution``` plots color at (x, y), but the correct way to use ```pcolor``` is plotting color in rectangles made by four matrix elements ([the link](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolor.html)). It may be difficult to fix this warning and hence we can not add pytests for it.; https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolor.html",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2192#issuecomment-1634286008:24,test,test,24,https://qutip.org,https://github.com/qutip/qutip/pull/2192#issuecomment-1634286008,1,['test'],['test']
Testability,"@Ericgig I added tests for storing the final state without storing the state and for normalization of kets, dms and unitaries in sesolve. Worryingly, the normalization test passes regardless of whether we have `state.shape[1] == 1` or `data.shape[1] == 1` so I am not sure if both are correct, or if there is something else wrong.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1148785670:17,test,tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1148785670,2,['test'],"['test', 'tests']"
Testability,"@Ericgig I am now trying to use pytest's parametrize feature which allows us to parametrize input to test functions variable by variable. I was able to successfully rewrite some tests which use `yield`, but this one (`test_trunc_neg`) in particular throws an error. Could you please run the following self sufficient snippet locally and inform me if there is anything wrong with the values in this example?? Thanks for the tip about yield, that might indeed be what is wrong. ```; from qutip import *; import numpy as np; import pytest; from numpy.testing import (assert_equal, assert_, assert_almost_equal,; run_module_suite). @pytest.mark.parametrize(""method"", ['clip', 'sgs']); @pytest.mark.parametrize(""qobj"", [rand_dm(5), Qobj(np.diag([1.1, -0.1])),; rand_unitary(3)*Qobj(np.diag([1.1, 0, -0.1]))*rand_unitary(3).dag()]); @pytest.mark.parametrize(""expected"", [None, Qobj(np.diag([1.0, 0.0])),; rand_unitary(3)*Qobj(np.diag([1.0, 0.0, 0.0]))*rand_unitary(3).dag()]); def test_trunc_neg(method, qobj, expected):; ""Checks trunc_neg in several different cases.""; pos_qobj = qobj.trunc_neg(method=method); assert(all([energy > -1e-8 for energy in pos_qobj.eigenenergies()])); assert_almost_equal(pos_qobj.tr(), 1); if expected is not None:; assert_almost_equal(pos_qobj.data.todense(), expected.data.todense()); ```. Also, I would like to rewrite all the tests which use `yield` in this format, would that be okay?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-571008013:101,test,test,101,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-571008013,5,"['assert', 'test']","['assert', 'test', 'testing', 'tests']"
Testability,@Ericgig I chose ```anim_wigner_sphere```. I will add test tomorrow.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2203#issuecomment-1680562161:54,test,test,54,https://qutip.org,https://github.com/qutip/qutip/pull/2203#issuecomment-1680562161,1,['test'],['test']
Testability,"@Ericgig I fixed the typos you mentioned and added a test in for nonzero timesense values and for the correlation functions. I also fixed the typo you mentioned and added a short descriptor for FLiMESolve above the ""parameters"" in documentation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-2090845530:53,test,test,53,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-2090845530,1,['test'],['test']
Testability,"@Ericgig I have added the color option for add_points also. For the single-color method, a single color with be passed. And for the multi-color method, a list of colors will be passed. I have tested it in https://github.com/rajathshetty20/misc/blob/master/qutip%20%231292.ipynb",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1315#issuecomment-665487867:192,test,tested,192,https://qutip.org,https://github.com/qutip/qutip/pull/1315#issuecomment-665487867,1,['test'],['tested']
Testability,"@Ericgig I have completed all the testing now. Everything looks good.; This truly looks like an awesome piece of work. The `QobjEvo` looks like it has great potential in many applications.; On behalf of all qutip users, thank you very much for taking on this mammoth task and doing such an excellent job. It is probably best if you squash and merge this yourself, as you can then edit the merged commit message.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-459375419:34,test,testing,34,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-459375419,1,['test'],['testing']
Testability,"@Ericgig I implemented a version of your suggestion. Let's see how it goes on this test run. Other notes:; - I switched the fork method to `forkserver` for Linux, as that should play better with threads.; - I left the correlation tests in for now, but will remove them again if they still timeout. Perhaps we should set some timeouts in the correlation function tests as a way to prevent the whole test run from dying.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948#issuecomment-1171510877:83,test,test,83,https://qutip.org,https://github.com/qutip/qutip/pull/1948#issuecomment-1171510877,4,['test'],"['test', 'tests']"
Testability,"@Ericgig I re-triggered the builds. If that doesn't fix the tests, could you merge dev.major into this PR?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1657#issuecomment-920075921:60,test,tests,60,https://qutip.org,https://github.com/qutip/qutip/pull/1657#issuecomment-920075921,1,['test'],['tests']
Testability,@Ericgig I tested it on Windows. All tests pass.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1313#issuecomment-655083091:11,test,tested,11,https://qutip.org,https://github.com/qutip/qutip/pull/1313#issuecomment-655083091,2,['test'],"['tested', 'tests']"
Testability,@Ericgig I'm happy to leave this open until a new numpy is released and we can update the version of numpy used in CI tests. Probably also good to have an issue open in case users encounter this in the wild.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694#issuecomment-979433765:118,test,tests,118,https://qutip.org,https://github.com/qutip/qutip/pull/1694#issuecomment-979433765,1,['test'],['tests']
Testability,@Ericgig I'm not sure why my changes make one test `tests/test_brtools.py::test_diag_liou_mult` fail.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1401#issuecomment-751561367:46,test,test,46,https://qutip.org,https://github.com/qutip/qutip/pull/1401#issuecomment-751561367,2,['test'],"['test', 'tests']"
Testability,"@Ericgig I've expanded the tests and reworked this so that it's less of a WIP. I've also documented the expected behaviour of the data layer in the presence of `nans`, etc in the description of the PR. I'll find somewhere in the docs to add that before merging the PR. Would you mind taking another look and letting me know what you think?. P.S. I also haven't had a clean test run on GitHub Actions yet, but they pass consistently on my machine now. I think I cleaned up most of the issues from the recent GitHub Actions runs in my recent commits, but I'll know in the morning. Obviously CI needs to pass consistently before merging could happen.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1506031688:27,test,tests,27,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1506031688,2,['test'],"['test', 'tests']"
Testability,"@Ericgig I've kept the WIP label, but this is ready for a first review. I think I'm made the HEOM look as much like the base solver as I can without having to modify the base solver a bit. Perhaps we can meet up tomorrow on Discord to discuss options. I'm also happy to merge this as is and adapt the solver more in another PR (assuming tests still pass and documentation still builds with my latest commits).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1101587887:337,test,tests,337,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1101587887,1,['test'],['tests']
Testability,@Ericgig I've started this branch specifically to tackle the strange steadystate (and other) test failures.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694#issuecomment-948435607:93,test,test,93,https://qutip.org,https://github.com/qutip/qutip/pull/1694#issuecomment-948435607,1,['test'],['test']
Testability,"@Ericgig Not sure if it's directly related to this PR, but the Travis build failed on `test_diag_liou_mult` with the following tolerance error:; ```; > np.testing.assert_allclose(target, calculated, atol=1e-12); E AssertionError: ; E Not equal to tolerance rtol=1e-07, atol=1e-12; E ; E Mismatched elements: 2 / 6724 (0.0297%); E Max absolute difference: 3.36667153e-12; E Max relative difference: 1.85567862e-08; ```; Not sure if we should relax the tolerance slightly now (maybe 1e-11?), or in a separate PR later, or if there is something real to fix.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1420#issuecomment-853030860:155,test,testing,155,https://qutip.org,https://github.com/qutip/qutip/pull/1420#issuecomment-853030860,2,"['Assert', 'test']","['AssertionError', 'testing']"
Testability,"@Ericgig Ok, I'm happy with all your comments. Let me know when you its ready for me to test functionally.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/815#issuecomment-458516006:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/815#issuecomment-458516006,1,['test'],['test']
Testability,"@Ericgig Should now be passing all tests, and essentially be ready",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2303#issuecomment-1925702584:35,test,tests,35,https://qutip.org,https://github.com/qutip/qutip/pull/2303#issuecomment-1925702584,1,['test'],['tests']
Testability,"@Ericgig Tests added for the type changes. Note that `QobjEvo.__rmatmul__` is not currently callable. Calling `qobj @ qevo` will call `QobjEvo.__matmul__(qobj, qevo)` first, which will return the result. If I am not missing a case where `__rmatmul__` is called, I vote that we simply delete the implementation of `__rmatmul__` (in a separate PR).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1869#issuecomment-1149772678:9,Test,Tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/1869#issuecomment-1149772678,1,['Test'],['Tests']
Testability,@Ericgig Tests changed to use non-hermitian H.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1148925787:9,Test,Tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1148925787,1,['Test'],['Tests']
Testability,"@Ericgig Tests passed and we both approved, so I've clicked the merge button.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1590#issuecomment-876733923:9,Test,Tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/1590#issuecomment-876733923,1,['Test'],['Tests']
Testability,"@Ericgig Thanks for finding that -- I obviously missed a last round of testing in Jupyter notebooks. I've added a special case for the inline backed in Jupyter notebook and even more comments. The downside is that the whole situation with matplotlib is crazy and the current Bloch implementation is not making things any more sane. The upside is that things now seem to work fairly nicely for me in practice. Holding thumbs that they work nicely for you too. P.S. As a bonus, `b.show()` now works for displaying the colormap and the `b.fig` special case is no longer needed (although it still works too).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1619#issuecomment-989293761:71,test,testing,71,https://qutip.org,https://github.com/qutip/qutip/pull/1619#issuecomment-989293761,1,['test'],['testing']
Testability,"@Ericgig Thanks for finding this. I don't think we should add a setting for this though -- it's too obscure. The point of returning `None` when `p == 0` seems to be to avoid division by zero, not to round down small probabilities. I think we should either 1) update the test or 2) if we lots some precision in a recent change, try to get that precision back. Do you know which change caused the loss of precision?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1656#issuecomment-917036156:270,test,test,270,https://qutip.org,https://github.com/qutip/qutip/pull/1656#issuecomment-917036156,1,['test'],['test']
Testability,"@Ericgig Thanks for the review and comments. I'll make some improvement accordingly. 1. About the test, I think the very last test I added in `test_mesolve`, the case of ""mixed callable"", uses the `scipy.interpolate.interp1d`. But I agree with you that there should be a separate test in `test_qobjevo` for calling the coefficients. I'll add a test similar to `test_QobjEvo_call` for the step coefficient case.; 2. About that ""move out"", I mean move out the `_binary_search` inside functions as `_spline_complex_t_second`. . To be more concrete, for example, in `InterCoeffT` we have the following:; ```; cdef void _call_core(self, double t, complex* coeff):; cdef int i; for i in range(self._num_ops):; coeff[i] = _spline_complex_t_second(t, self.tlist,; self.y[i,:], self.M[i,:], self.n_t); ```; For the same time `t` and `tlist`, we call `_spline_complex_t_second` multiple times. Each time we call it, it will have to do a `_binary_search` for `t` in `tlist`, which has complexity log(`len(tlist)`). But since `t` and `tlist` does not change in the function, it's enough to do it only once outside the loop.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1050#issuecomment-513900719:98,test,test,98,https://qutip.org,https://github.com/qutip/qutip/pull/1050#issuecomment-513900719,5,"['log', 'test']","['log', 'test']"
Testability,@Ericgig Thanks! Suggestions committed. I will merge if tests pass.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1149052416:56,test,tests,56,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1149052416,1,['test'],['tests']
Testability,"@Ericgig `.step(...)` looks like a great solution. We should definine more precisely what one is allowed to modify in between calls to `.step` and document that. Aside regarding things we have already implemented: I know -- my point is that there are many such things and we have only implemented one kind of each (for example, what kind of progress bar is appropriate is highly dependent on the environment the code is running in -- if the code is running on a server without a terminal it might be some kind of logging, inside a hypothetical QuTiP UI GUI application it might be a progress bar provided by the GUI toolkit being used, etc).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358:513,log,logging,513,https://qutip.org,https://github.com/qutip/qutip/issues/1571#issuecomment-859578358,1,['log'],['logging']
Testability,"@Ericgig b7cd10a creates a new `qutip.solve` package, and I moved all the solvers and most of their utilities into there. I put Cython utility modules into the same directory, and just prefixed their names with underscores to mark them as internal, rather than making another new `cy` directory. I also moved the tests of the solvers into their own `tests/solve` directory, so we can consider having `pytest` run the tests in order at some point as well. All the names are still imported properly into the `qutip` namespace, so you can still do `qutip.mesolve` and so on. This PR is already way too long. I could put the solver package commit into a different PR if it's helpful, but to be honest, I'm not sure entirely what benefit is derived - my commit messages are usually quite descriptive (please don't squash them!), so it's not like the history will be missing in `git log`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1332#issuecomment-671526504:313,test,tests,313,https://qutip.org,https://github.com/qutip/qutip/pull/1332#issuecomment-671526504,4,"['log', 'test']","['log', 'tests']"
Testability,"@Ericgig good idea about the tests, I'll implement them in this way. now there seems to be some problem with continuous integration, it fails on. ```; ERROR: Failure: ImportError (libgfortran.so.1: cannot open shared object file: No such file or directory); ```. I attempted to fix it by installing `libgfortran` using `conda`, however it didn't fix the issue. https://github.com/travis-ci/travis-ci/issues/4816#issuecomment-148789525; https://github.com/menpo/landmarkerio-server/issues/23#issuecomment-278361601. I don't want to mess up too much with continous integration as it takes long time to rebuild it, any suggestions on that?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-427726780:29,test,tests,29,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-427726780,1,['test'],['tests']
Testability,@Ericgig not in any huge hurry. Once there is a nice subset of tests that can be run to test installation I will update the nixpkgs package for qutip. Thanks for being so responsive! For now I'll just delete some of the tests and can always update the package once the ability to test only a subset is added to a release.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675:63,test,tests,63,https://qutip.org,https://github.com/qutip/qutip/issues/1147#issuecomment-569797675,4,['test'],"['test', 'tests']"
Testability,"@Ericgig sorry about that, I just added the argument, I'm also planning adding some tests but I haven't yet figured out what would be best way to do it, any suggestions welcome!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-427237099:84,test,tests,84,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-427237099,1,['test'],['tests']
Testability,"@Ericgig tests implemented and passing, please code review if you can.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-429515766:9,test,tests,9,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-429515766,1,['test'],['tests']
Testability,"@Ericgig thanks for suggestion. weird, my local tests all passed, let me examine the problem",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-431253362:48,test,tests,48,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-431253362,1,['test'],['tests']
Testability,"@Ericgig, I have tested it myself. However, I need someone else to merge it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/922#issuecomment-428399661:17,test,tested,17,https://qutip.org,https://github.com/qutip/qutip/pull/922#issuecomment-428399661,1,['test'],['tested']
Testability,"@Ericgig: #1337 broke `mcsolve` seed reuse - it seems to be deliberate, since all the seed code has been explicitly cut. Is this something that `mcsolve` will no longer support? If so, we need to remove the tests of seeding, because they're failing the build, and if not we need to reinstate it quickly so we can have passing tests. Also options classes should probably throw an error when given an unknown key.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1338#issuecomment-675463113:207,test,tests,207,https://qutip.org,https://github.com/qutip/qutip/pull/1338#issuecomment-675463113,2,['test'],['tests']
Testability,@Ericgig: another random failure in the CI here (errored test is unchanged in this PR).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-623953963:57,test,test,57,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-623953963,1,['test'],['test']
Testability,"@Francesco-Benfenati: can you tell us what the expected behaviour from your test case is? Are you intending to create a superoperator, or are you intending to create a a density matrix?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600781981:76,test,test,76,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600781981,1,['test'],['test']
Testability,@HarshKhilawala Would you be interested in adding some tests for the progress bars in another PR?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251:55,test,tests,55,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462010251,1,['test'],['tests']
Testability,@Lala5th Thank you for the test fix.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1785#issuecomment-1027853795:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/pull/1785#issuecomment-1027853795,1,['test'],['test']
Testability,@Lala5th Would you mind merging master into this so that the test suite can run again (I had to pin coverage to version 6.2 while coverage 6.3 is being fixed).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1783#issuecomment-1027885014:61,test,test,61,https://qutip.org,https://github.com/qutip/qutip/pull/1783#issuecomment-1027885014,1,['test'],['test']
Testability,"@Leo-am @Ericgig I originally marked this PR for inclusion in 4.7, but I'd like to suggest we skip this PR and clean things up for QuTiP 5. My reasoning is as follows:. - To be included in 4.7.X this PR would have to be included in 4.7.0 now and there is still quite a bit of work to do (writing tests, cleaning up _check_dims, handling some edges cases better) and I'd rather not rush those changes.; - If we make this change now, we will have to break user code *again* for 5.0 because the interface being introduced here is not the one proposed for 5.0 in #1838. Let's rather only break user code once.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1846#issuecomment-1092820030:296,test,tests,296,https://qutip.org,https://github.com/qutip/qutip/pull/1846#issuecomment-1092820030,1,['test'],['tests']
Testability,"@MartinSandeCosta, free feel to complete the tests in the way you want. However, maybe it is good to discuss a bit with @jakelishman? Since there is a refactoring of `qutip/tests/test_gates.py` in #1181. A lot of change in this test might make it hard to resolve two PRs later. Besides, it is better to leave a more detailed description in the PR. As the template indicated:; ```; **Description**; Describe here the proposed change. **Related issues or PRs**; Please mention the related issues or PRs here. If the PR fixes an issue, use the keyword fix/fixes/fixed followed by the issue id, e.g. fix #1184. **Changelog**; Give a short description of the PR in a few words. This will be shown in the QuTiP change log after the PR gets merged.; For example: ; Fixed error checking for null matrix in essolve.; Added option for specifying resolution in Bloch.save function.; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1224#issuecomment-607803156:45,test,tests,45,https://qutip.org,https://github.com/qutip/qutip/pull/1224#issuecomment-607803156,4,"['log', 'test']","['log', 'test', 'tests']"
Testability,@MrRobot2211 Thank you for this! I did a small review just of general code-cleanliness issues and left some comments. I'm hoping someone else who knows this code a bit better will come along and review the actual implementation. Could you perhaps write a test for the new code? That would help illustrate the original problem and help ensure the problem doesn't crop up again if cvxpy or the dnorm implementation change in future. The test should go at the end of `qutip/tests/test_metrics.py` (you'll see a bunch of dnorm tests already there).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1463#issuecomment-801737359:255,test,test,255,https://qutip.org,https://github.com/qutip/qutip/pull/1463#issuecomment-801737359,4,['test'],"['test', 'tests']"
Testability,"@NS2LPS Apologies for the slow reviews. Would you be up for updating this PR and then we can review it properly? It would be good to somehow add tests to these cases, but I'm not sure how easy that is to do.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-893440155:145,test,tests,145,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-893440155,1,['test'],['tests']
Testability,@NS2LPS Just checking whether you're still keen to write a test for this and finish off the PR?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1275#issuecomment-986833630:59,test,test,59,https://qutip.org,https://github.com/qutip/qutip/pull/1275#issuecomment-986833630,1,['test'],['test']
Testability,"@RunawayFancy Apologies, I'm not 100% sure which case you said worked and which didn't. Did ""import qutip.testing"" working in your terminal but fail in your Jupyter notebook?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1650#issuecomment-913454099:106,test,testing,106,https://qutip.org,https://github.com/qutip/qutip/issues/1650#issuecomment-913454099,1,['test'],['testing']
Testability,"@VolodyaCO I'd like to test these changes out locally, but they look good to me now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1707#issuecomment-990400800:23,test,test,23,https://qutip.org,https://github.com/qutip/qutip/pull/1707#issuecomment-990400800,1,['test'],['test']
Testability,"@Zac-HD Any suggestions for ways we could use hypothesis better? It all looks quite clean right now. Is there a way we can change what hypothesis prints when an example is found? E.g. we don't want the data layer object repr to include the contents of the array, but it would be nice to see that in the test failure output.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1186229765:303,test,test,303,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1186229765,1,['test'],['test']
Testability,@Zac-HD Would you mind doing a quick sanity check of my `MatrixShapesStrategy` class (https://github.com/qutip/qutip/blob/2aee70cb3981e60e236de831c56505a7caabd0aa/qutip/tests/strategies.py#L15-L62)? Mostly I want to know whether I should have been able to do this with `mutually_broadcastable_shapes`. I also wouldn't mind a quick check of `qobj_shared_shapes` (https://github.com/qutip/qutip/blob/2aee70cb3981e60e236de831c56505a7caabd0aa/qutip/tests/strategies.py#L113-L131). Is this a good thing to be doing with shared strategies?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957#issuecomment-1207406602:169,test,tests,169,https://qutip.org,https://github.com/qutip/qutip/pull/1957#issuecomment-1207406602,2,['test'],['tests']
Testability,@ajgpitch @gautierronan I've updated this PR. I *think* it's ready to be merged (assuming tests pass in CI now) but a final look from you would be appreciated since this is not a part of QuTiP I know well yet.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369#issuecomment-1058307269:90,test,tests,90,https://qutip.org,https://github.com/qutip/qutip/pull/1369#issuecomment-1058307269,1,['test'],['tests']
Testability,"@ajgpitch @nathanshammah ; I would like to make 4.5.1 from this. All test passes, there is only windows and mac 3.8 to check.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1215#issuecomment-604030641:69,test,test,69,https://qutip.org,https://github.com/qutip/qutip/pull/1215#issuecomment-604030641,1,['test'],['test']
Testability,"@ajgpitch Do you have any detailed instructions on using the 3.2 develop branch in Jupyter notebook? I posted a thread in the [email list](https://groups.google.com/forum/#!topic/qutip/oh1t7xJg5x8) while having trouble to compile the examples in using Stochastic equation solvers. I have tried to compile the source and to call from Conda-forge virtual environment, but always fail despite all tests have been passed. Let me know if those examples are outdated. Thanks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/472#issuecomment-218226943:394,test,tests,394,https://qutip.org,https://github.com/qutip/qutip/issues/472#issuecomment-218226943,1,['test'],['tests']
Testability,"@ajgpitch Hi, this adds input and output states to the QubitCircuit class. The next bit is to get the latex circuit visualisation for this. I will get that working as soon as I can. I guess there is not testing for that and I have to check it by trying out different plots. The next bit will be to get a list of known states and create a map so that they can be converted to a proper `Qobj`. Finally, we should have a method in `QubitCircuit` to calculate the output states, given an initial input state and add it to the circuit. But, I guess I could work on that in a different PR. All this is dicussed in the orginal issue #678",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/679#issuecomment-291489226:203,test,testing,203,https://qutip.org,https://github.com/qutip/qutip/pull/679#issuecomment-291489226,1,['test'],['testing']
Testability,@ajgpitch I believe I fixed the pep8 issues. . There was also a cython issue where I was compiling tensor.pyx each time qutip starts (aka dev mode) rather than leaving it pre-compiled. I think this might be related to the travis test failures. We are about to find out.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883#issuecomment-403663024:229,test,test,229,https://qutip.org,https://github.com/qutip/qutip/pull/883#issuecomment-403663024,1,['test'],['test']
Testability,@ajgpitch Thanks for taking a look. I updated the docstring for the tests. The fancy docstrings are tested as the API docs are also up on piqs.readthedocs.io. We can also add a complete tutorial section with all the nice notebooks that @nathanshammah has compiled. I think this makes case for the long overdue 4.3 release? Should I open another thread for adding a warning for dropping python2 in QuTiP 5?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-396890968:68,test,tests,68,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-396890968,2,['test'],"['tested', 'tests']"
Testability,"@ajgpitch yes, the solver does raise an error... but not always. I was able to get it to integrate a few times but it was very inconsistent. The other error it sometimes raises is ""too much accuracy was requested for the precision of the machine"". When I realized the issue, I was very surprised it even got that far and I still don't know how it could ever run the calculation with a bad `rho0`. @nonhermitian yes, I see the point in the code where `mesolve` digs down into various types of `H` input. I'll work on something for the easy Qobj cases first, and think about how to handle the function case. Should be able to test the size of what the function returns.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/479#issuecomment-221595850:624,test,test,624,https://qutip.org,https://github.com/qutip/qutip/issues/479#issuecomment-221595850,1,['test'],['test']
Testability,"@alexandrupaler Thank you for looking into this. You will have to download this branch and install it in order to find qutip.qip.icm. I think the following set of steps should do it. These are from this [stack overflow question](https://stackoverflow.com/questions/1911109/how-to-clone-a-specific-git-branch). 1. Clone my version of QuTiP using ; ```; git clone https://github.com/sahmed95/qutip.git; ```. 2. Checkout the icm branch in the cloned folder; ```; git checkout icm; ```; 3. Install QuTiP from that branch by going to cloned QuTiP folder; ```; python setup.py install; ```; Alternate way to do this is just copy paste the `qutip/qip/icm.py`, `qutip/qip/circuit.py` and `qutip/tests/test_qubitcircuit.py` files into your local installation of QuTiP. . There are examples in [`qutip/qip/tests/test_icm.py`](https://github.com/qutip/qutip/pull/603/files#diff-93808767f70729e7e757566e9a32b430) which may be useful to see how the code works. @ajgpitch @nonhermitian Suggestions on the recommended way of doing this ? There is this tool called [""hub""](https://hub.github.com) which allows you to directly checkout pull requests using `hub checkout https://github.com/qutip/qutip/pull/603`",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603#issuecomment-315378380:687,test,tests,687,https://qutip.org,https://github.com/qutip/qutip/pull/603#issuecomment-315378380,2,['test'],['tests']
Testability,"@araza6 thank you. Tests in continuous integration are failing. There seem to be too many PEP8 changes (from `black`?) in this PR, unrelated to the changed files. I am not so sure about the constraints put on the use of the `fidelity` function. I had left it as this to keep as much freedom as possible and not spoon feed the user. It is basically a shortcut for Tr(x^2), not much else.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-613052212:19,Test,Tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-613052212,1,['Test'],['Tests']
Testability,@awkwardPotato812 Thanks for starting this PR. I did a partial review and activated the test run. I will leave a full review for Eric to do though.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2114#issuecomment-1462413586:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/2114#issuecomment-1462413586,1,['test'],['test']
Testability,"@bopardikarsoham It can definitely still be looked at, but the situation needs to be untangled before any code change is made:. - If one is using Lindblad operators (see the equation with `L_i` on https://en.wikipedia.org/wiki/Lindbladian) then `a` and `b` are the same and the code is currently correct.; - If one is using some other set of basis operators `A_n` for the bounder operators on `H`, then you will need to include terms for both `n, m` and `m, n` and the sum of the those two terms will again be the same for the current code and the proposed change. So the physics will not change from what it is now if we make the proposed change and it appears that how the terms are organized within the larger sum is a convention. So the question is whether there is a standard convention to follow or not, and I don't know the answer. Step 1 is probably to find some textbooks or canonical references which make the choice clear. Step 2 would be to write some tests for the behaviour in the case where `a != b`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358:964,test,tests,964,https://qutip.org,https://github.com/qutip/qutip/issues/1719#issuecomment-1062919358,1,['test'],['tests']
Testability,@cgranade did you test your PR #362 against dick-t example? If so what were the results?; It would seem that dick-t is comparing a method that works with states in general (mixed or pure) with one that assumes states are pure. Do we have some method in qutip that gives the fidelity when states are assumed pure? It would seem more efficient (and less numerical error risk) to compute the fidelity without the sqrtm (as dick-t did in the comparison) if we knew the states were pure.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/361#issuecomment-134927300:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/issues/361#issuecomment-134927300,1,['test'],['test']
Testability,"@cgranade thanks, better unit test coverage would be highly appreciated. I'm about to add a few more tests before merging this PR, but there will be plenty of room for additional test after this PR is merged and it would be great if you could have a look at that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/95#issuecomment-39404287:30,test,test,30,https://qutip.org,https://github.com/qutip/qutip/pull/95#issuecomment-39404287,3,['test'],"['test', 'tests']"
Testability,@christian512 Thank you for adding the test and explaining the logic. I did a second mini-review.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1961#issuecomment-1200423623:39,test,test,39,https://qutip.org,https://github.com/qutip/qutip/pull/1961#issuecomment-1200423623,2,"['log', 'test']","['logic', 'test']"
Testability,"@christian512, this looks great! I am happy with this being merged as it is. We could further improve tests by testing that all arguments work correctly but I believe that to be out of the scope of this PR. Since this PR already fixes a bug I would rather have it merged. @hodgestar, are you happy with this being merged after the changes?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1843#issuecomment-1106279748:102,test,tests,102,https://qutip.org,https://github.com/qutip/qutip/pull/1843#issuecomment-1106279748,2,['test'],"['testing', 'tests']"
Testability,@cntnly Thanks for this PR. Any updates on the unit test?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/719#issuecomment-396797556:52,test,test,52,https://qutip.org,https://github.com/qutip/qutip/pull/719#issuecomment-396797556,1,['test'],['test']
Testability,"@drew-parsons I imagine `MPLBACKEND=agg` avoids the issue by not using X at all. I have used it in the past for matplotlib tests, and it's not a bad idea perhaps to switch the QuTiP visualization tests to the `agg` backend, but it's not something I'm going to tackle right now I don't think (too many other big QuTiP changes up in the air at the moment).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912397571:123,test,tests,123,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912397571,2,['test'],['tests']
Testability,"@drew-parsons If fixing this will help packaging for Debian, we will definitely fix it!. This appears to be considered an `Xvfb` bug (or at least the discussion in https://github.com/The-Compiler/pytest-xvfb/issues/11 suggests that), but having tests close their windows does seem polite anyway. Installing `xvfb` and `pytest-xvfb` reproduces the error for me and adding `plt.close(""all"")` to the end of `testPlot` removes the error again. After that the rest of the test suite passes, although there have been some reports in the pytest-xvfb of timing or test order sensitive results, so there may be more problems to be found later. For now I'll open a PR that adds the `plt.close(""all"")`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909191682:245,test,tests,245,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909191682,4,['test'],"['test', 'testPlot', 'tests']"
Testability,@drew-parsons Is there a goal you are trying to achieve by running the tests headless on xvfb? Just curious about your use case.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-909005031:71,test,tests,71,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-909005031,1,['test'],['tests']
Testability,"@drew-parsons These tests pass in CI and `pytest qutip/tests/test_processor.py -v` passes for me locally on the master branch, so I'm not quite sure how to reproduce.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-908476483:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-908476483,2,['test'],['tests']
Testability,"@drew-parsons We don't usually run tests with `pytest-xvfb`, so perhaps that triggers the issue somehow?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-908478147:35,test,tests,35,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-908478147,1,['test'],['tests']
Testability,"@ericgig you're right. I have added to this [pull request](https://github.com/qutip/qutip.github.io/pull/114) (114 in qutip.github.io) a new anchor next to the headings #supporting-organizations, and I then wanted to add a link to it here. It could also mention them (or a subset of those listed there) also here, without logos but in writing. . If someone can review that PR 114, I can then modify this one more easily.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1228#issuecomment-610412067:322,log,logos,322,https://qutip.org,https://github.com/qutip/qutip/pull/1228#issuecomment-610412067,1,['log'],['logos']
Testability,"@fhopfmueller Thank you for looking into these various issues! PRs would be very much appreciated. Perhaps lets do separate PRs for the tests, then `process_fidelity` and then `average_gate_fidelity`?. I would like to release 4.7 in the not too distance future, so one option is to target dev.major / 5 directly (in which case the tests are already fixed).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1703#issuecomment-957253538:136,test,tests,136,https://qutip.org,https://github.com/qutip/qutip/issues/1703#issuecomment-957253538,2,['test'],['tests']
Testability,@fhopfmueller Thanks for the help! I've added back the test. I also made a separate commit to remove skipping the tests on Mac OS. Let's see what happens.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1788#issuecomment-1172916163:55,test,test,55,https://qutip.org,https://github.com/qutip/qutip/pull/1788#issuecomment-1172916163,2,['test'],"['test', 'tests']"
Testability,@fpetiziol Thanks for checking. We should fix this for 4.7. It's probably not a very difficult fix (or at least we have logic for making eigenvectors orthogonal elsewhere in QuTiP that we can call or re-use).,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1864#issuecomment-1103658061:120,log,logic,120,https://qutip.org,https://github.com/qutip/qutip/issues/1864#issuecomment-1103658061,1,['log'],['logic']
Testability,"@gaurav-iiser Would you mind also merging the master branch into this one? We recently merged some changes that fixed regular failures in test runs after the new version of numpy broke some tests, and it would be good to have those included in here so that test runs pass.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1690#issuecomment-950320006:138,test,test,138,https://qutip.org,https://github.com/qutip/qutip/pull/1690#issuecomment-950320006,3,['test'],"['test', 'tests']"
Testability,"@gautierronan Thanks Ronan for this useful contribution. It looks good to me. I was discussing something similar with a colleague back in October, so I am going to see if I can get them to test it too.; On the subject of testing... this will need tests to be added before it can be merged. Please see https://github.com/qutip/qutip/blob/master/qutip/tests/test_control_pulseoptim.py; Ideally it would also have an example notebook. See https://github.com/qutip/qutip-notebooks/blob/master/examples/control-pulseoptim-Hadamard.ipynb for example. It could either have new notebook, or one could be extended to show this feature.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1369#issuecomment-754707095:189,test,test,189,https://qutip.org,https://github.com/qutip/qutip/pull/1369#issuecomment-754707095,4,['test'],"['test', 'testing', 'tests']"
Testability,"@goerz we have been discussing encapsulating the matrix type to store qobj.data for some time, see #437 ; It definitely falls into the quite-a-bit-of-work category.; This is a legitimate concern though. I guess we should run some tests comparing times for indexes across arrays with int32 and int64 before we launch into anything.; Do we know whether scipy are already using int64 for the indexes of their sparse matrices?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/850#issuecomment-383849537:230,test,tests,230,https://qutip.org,https://github.com/qutip/qutip/issues/850#issuecomment-383849537,1,['test'],['tests']
Testability,"@haoyudoingthings It looks from your error messages that they are caused not by the import cells, but by later cells, and are the result of having modified the notebook. For example, `H = qt.qobj_list_evaluate(h_t, tau, args)` is a modified line from cell 13 of the original notebook. I would suggest starting again from the original notebook and continuing from there. Some of the notebooks are out of date. We're setting up automated tests to correct that as part of this year's Google Summer of Code, but that has only just started so it might be a few months before we have everything set up. I'm closing this for now, but please feel free to update the issue if you encounter more problems.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1930#issuecomment-1153919964:436,test,tests,436,https://qutip.org,https://github.com/qutip/qutip/issues/1930#issuecomment-1153919964,1,['test'],['tests']
Testability,"@hodgestar , I think I responded to all your comments.; The tests for core/blochredfield.py are present, I think it has a 100% coverage.; I did little cut and paste, but stayed close to the original cython code when possible. The question I still have is about the `a_ops` format: I made breaking changes from v4, so I want to be sure the new way is clear. I think `matmul_var_data` should be available in `core/data` not implemented here, but I don't want to touch that part in this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890:60,test,tests,60,https://qutip.org,https://github.com/qutip/qutip/pull/1651#issuecomment-1010222890,1,['test'],['tests']
Testability,"@hodgestar ; I added default values to options and a default `mcstep`. I added a doc-string entry for `integrator_options`, but please check it. About `mcstep` optimization for scipy's `ode`, I tested both the methods and there can be a factor 2 in timing between both, but it can be in both ways depending on the conditions. So I used `mcsolve`'s method for `zvode` and the new method for `lsoda`. This way, the default will run like `v4`, but you have an alternative when it's not ideal.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1643#issuecomment-933862294:194,test,tested,194,https://qutip.org,https://github.com/qutip/qutip/pull/1643#issuecomment-933862294,1,['test'],['tested']
Testability,"@hodgestar ; Sorry, I reran the test before reading your comment, here is the failing attempt:; https://github.com/qutip/qutip/actions/runs/2805431012/attempts/1",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1968#issuecomment-1208156789:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/1968#issuecomment-1208156789,1,['test'],['test']
Testability,@hodgestar @Ericgig I think the failed tests are unrelated to this PR. Could you rerun the tests?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1626#issuecomment-891908560:39,test,tests,39,https://qutip.org,https://github.com/qutip/qutip/pull/1626#issuecomment-891908560,2,['test'],['tests']
Testability,@hodgestar Anything for reference? Any pre-existing test_code which I can use to write tests for progressbar? PTAL!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1465168803:87,test,tests,87,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1465168803,1,['test'],['tests']
Testability,"@hodgestar Apologies for taking as long, but went on and rebased my PR to 5.0 and addressed some of your comments. In particular, factory methods have been moved out into ordinary functions, and I added a simple string-based format for outcome labels (leaving `Seq` and `Par` for more complex cases as needed). For the notebook, I ran into the slight issue that the qutip-notebooks repo uses a more copyleft license, but in the meantime I put together a notebook at https://gist.github.com/cgranade/7c2a5a0827dddc4281666ad45763b1ec that includes a few examples of the API in use, including for modeling a simple teleportation channel. I still need to address PEP8 issues and add tests, but I think it should be a bit further along; thanks for all your help and feedback! 💕",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128:679,test,tests,679,https://qutip.org,https://github.com/qutip/qutip/pull/1687#issuecomment-1010581128,1,['test'],['tests']
Testability,"@hodgestar Are you sure this was ready to be merged?; While the tests part look fine, have you checked that the wheels will build properly? Is there no need to tell the tools building the wheels were to find python 3.11? With 3.10 we skipped some build, (win32, etc.), don't we need to do the same for 3.11?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2041#issuecomment-1345571497:64,test,tests,64,https://qutip.org,https://github.com/qutip/qutip/pull/2041#issuecomment-1345571497,1,['test'],['tests']
Testability,"@hodgestar Good catch, I was testing this by plotting 2D images over theta and phi, but I was a bit careless because the top of the plot is theta=pi (for theta on the y-axis) which isn't the top of the Bloch sphere, but the bottom. So the result was what I expected, but for the wrong reason. I thought this looked like an easy fix; I believe the exponents are incorrect, where there is addition there should be subtraction, and vice versa. I fixed this and tested as follows:; ```python; j = 1/2; t,p = 0,0; for t in np.linspace(0, np.pi, 100):; for p in np.linspace(-np.pi, np.pi, 100):; psi = spin_coherent(j, t, p); h, _, _ = spin_q_function(psi, t, p); # assert(abs(h - 1/np.pi) < 1e-3) # This assertion fails for some theta and phi, it seems like the angle is incorrect; ```; But it doesn't work for all theta and phi. Moreover, I tried this test on the current qutip code 'as-is' but using @hodgestar fix `h, _, _ = spin_q_function(psi, np.pi - t, p)` but this fails in the exact same way. There might also be a numerical inaccuracy here, because the maximum does reach 1/pi, it's just at a slightly tilted angle. This is a good reference for Q function calculation here : https://arxiv.org/abs/1309.6346.; Although they don't provide the density matrix form, it should be easy enough to expand the Q = <theta, phi| rho |theta,phi> as the spin-coherent states using the calculations from the paper.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1195#issuecomment-893072105:29,test,testing,29,https://qutip.org,https://github.com/qutip/qutip/pull/1195#issuecomment-893072105,5,"['assert', 'test']","['assert', 'assertion', 'test', 'tested', 'testing']"
Testability,@hodgestar I am not much aware with writing tests. Can you help me write test for progressbar file? How to write a test? How to check coverage for the entire file? How to check coverage for each line of code as to know where and what to add test? From where can I learn more about testing? Any documentation for writing tests specifically for qutip repository?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603:44,test,tests,44,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1464861603,6,['test'],"['test', 'testing', 'tests']"
Testability,@hodgestar I decided to add the `spin_wigner` changes in which I've resolved the normalization issue and indexing problems that were also in the `spin_q_function`. I've added a simple test to check for normalization and real-ness of the spin Wigner.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089:184,test,test,184,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-894939089,1,['test'],['test']
Testability,"@hodgestar I have implemented most of your suggested changes. I reduced the largest spin used in the spin Wigner tests, but left the spin Q function as-is because it was fast enough. I've removed the normalization from the functions themselves and described the normalization criterion in the docstrings.; The spin Wigner is now real.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-917315644:113,test,tests,113,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-917315644,1,['test'],['tests']
Testability,"@hodgestar I think I have found a fix, the problems were two-fold:; - The addition/subtraction for the cos/sin(theta/2) terms were swapped, which gives you a flipped result (high Q value on opposite side of sphere); - The phase factor for the diagonal terms of the density matrix were swapped, which gave you flipped result in the Y axis (high Q value for -Y if you give it +Y state). I can submit a new fix for this alongside some test code that does some basic verification (sorry -- I'm not sure what would be a good set of tests, the ones I have come up with are certainly not exhaustive.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1195#issuecomment-893157034:432,test,test,432,https://qutip.org,https://github.com/qutip/qutip/pull/1195#issuecomment-893157034,2,['test'],"['test', 'tests']"
Testability,"@hodgestar I will merge this as is since it block the tests from passing everywhere. The situation with `except * nogil` is not perfect, but it's not a bottleneck in our computations. If you look at the generated code, the issue is only when calling an `except * nogil` function returning complex or void within another `nogil` function. Therefore I removed the nogil from function that called other nogil functions, not those who did the work. If you see optimisation I missed, please open another PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2247#issuecomment-1773058168:54,test,tests,54,https://qutip.org,https://github.com/qutip/qutip/pull/2247#issuecomment-1773058168,1,['test'],['tests']
Testability,"@hodgestar I've added some tests for the spin_q_function. At the moment it tests a random density matrix for three different spin values. I'm not very familiar with qutip's style for writing tests, I would normally write a test function that would also take arguments but that doesn't seem to be the norm here. We could also do something similar to the `TestHusimiQ` class of tests. I've had a look at the `spin_wigner` function as well, and I believe that had the same issue of density matrix indexing.; I've re-implemented it (and the `_rho_kq` function) and I've added details to the docstrings including relevant references.; Should I create a separate PR for this or should I expand the scope of this PR?. NB: At the moment I can't think of an easy way to test the spin Wigner function because there is no simpler/alternative definition that I am aware of to verify the implementation against.; There are simple tests such as if the imaginary part is less than some threshold (currently true), does it integrate to 1 (currently not true, not sure why).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617:27,test,tests,27,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893964617,8,"['Test', 'test']","['TestHusimiQ', 'test', 'tests']"
Testability,"@hodgestar Let's rerun the test a few times to see if it works.; If after ~5 tries, the windows tests always passes. I will approve.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2013#issuecomment-1317836479:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/pull/2013#issuecomment-1317836479,2,['test'],"['test', 'tests']"
Testability,"@hodgestar Sure, do I need to be assigned another issue? Can I create new issue for writing tests for progress bar and get assigned to work on it?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113:92,test,tests,92,https://qutip.org,https://github.com/qutip/qutip/pull/2112#issuecomment-1462049113,1,['test'],['tests']
Testability,"@hodgestar Thank you for your reply. I added `_data.Dense(V)`, but failed. The first code failed and the second code passed the test.; ```; def _solve(A, V):; try:; if settings.has_mkl:; return _data.solve(A, V, ""mkl_spsolve"", {""csc"": True}); else:; return _data.solve(A, V, ""splu""); except TypeError:; out = _data.solve(A,_data.Dense(V)); return out; ```; ```; def _solve(A, V):; try:; if settings.has_mkl:; return _data.solve(A, V, ""mkl_spsolve"", {""csc"": True}); else:; return _data.solve(A, V, ""splu""); except TypeError:; out = sp.linalg.lsqr(A, V)[0]; return out; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2109#issuecomment-1458484606:128,test,test,128,https://qutip.org,https://github.com/qutip/qutip/issues/2109#issuecomment-1458484606,1,['test'],['test']
Testability,"@hodgestar Thanks for doing it!; The custom `m_ops`, as far as I understand, would be of a form `[np.sqrt(coef)*(a+a.dag()), -1i*np.sqrt(coef)*(a - a.dag())]` where `a` would be an annihilation operator for a photon in a mode that is detected, and `coef` represents whatever happens between the emission and the detection (cavity-guide coupling, detection efficiency etc). In the current implementation it would be subset of default `m_ops`, that are formed as; ```python; for c in sso.sc_ops:; m_ops += [c + c.dag(), -1j * (c - c.dag())]; ```. As for the tests, I can think of something like this; ```python; def test_heterodyne_mesolve():; b = 1 # drive amplitude; gamma = 1 # spont. emission rate; eta = 0.3 # coupling efficiency; n_steps = 1000; n_traj = 50; ; H = np.sqrt(eta*gamma) * b * sigmay(); c_ops = [np.sqrt(gamma)*sigmam()]; psi0 = basis(2); times = np.linspace(0, np.pi*2, n_steps). n_tr = 3. sme_het = smesolve(; H,; psi0,; times,; [],; c_ops,; e_ops=[sigmax(), sigmay(), sigmaz()],; store_measurement = True,; dW_factors=[1e-5, 1e-5], # to make tests simpler; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay()],; ntraj=n_traj,; noise=123, # random seed; ); ; assert np.array(sme_het.measurement).shape == (n_traj, n_steps, 1, 2); assert all(np.isclose(np.array(sme_het.measurement).mean(axis=0)[:,0,0].T, np.sqrt(eta)*sme_het.expect[0], atol=2e-2)); ; def test_incorrect_m_ops_heterodyne_mesolve():; ; with pytest.raises(ValueError, match=""The measured operators for the heterodyne method supposed to be pairs of quadratures: m_ops should have even length.""):; sme_het_bad_mops = smesolve(; sigmax(),; basis(2),; np.linspace(0,1,10),; [],; [sigmam()],; e_ops=[],; store_measurement = True,; method=""heterodyne"",; m_ops=[np.sqrt(eta)*sigmax(), np.sqrt(eta)*sigmay(), np.sqrt(eta)*sigmaz()], # three operators; ntraj=10,; ); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548:556,test,tests,556,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424737548,4,"['assert', 'test']","['assert', 'tests']"
Testability,@hodgestar The test is now included. It turned out to be quite simple with monkeypatch. Thanks for the suggestion!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/1636#issuecomment-939918060,1,['test'],['test']
Testability,@hodgestar Yes. I could import `qutip.testing` in my terminal but fail in Jupyter notebook. But I re-installed the qutip lib and now it could be imported successfully.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1650#issuecomment-913463573:38,test,testing,38,https://qutip.org,https://github.com/qutip/qutip/issues/1650#issuecomment-913463573,1,['test'],['testing']
Testability,"@hodgestar okay so I figured out some code. It's VERY close to getting the max frequency, but it's not perfect. . The method I'm using is very similar to how I pull the current frequency, but it's just different enough that it gives a different output. Basically what I'm doing is executing a bunch of `add` instructions through inline assembly multiple times (which will take it's sweet time based on CPU cycles), measuring the time it takes to finish, and doing some fun maths. The problem is that the output it still variates just a little bit. On my M1 Mac mini, 85% of the time I get `2.8 GHz`, and 15% of the time I get `3.1 GHz`...Still needs some fine tuning, but it's better than using `sysctl hw.tbfrequency` or a fixed value. The function is [here](https://github.com/BitesPotatoBacks/osx-cpufreq/blob/4590c2ef6080466df4bda18771f02dd1d2c2c1fd/osx-cpufreq/main.m#L53-L85), and the assembly it uses is [here](https://github.com/BitesPotatoBacks/osx-cpufreq/blob/4590c2ef6080466df4bda18771f02dd1d2c2c1fd/osx-cpufreq/main.m#L19). If anyone else with an Apple Silicon machine wants to test this new trick out, my binary is [here](https://github.com/BitesPotatoBacks/osx-cpufreq/releases) (follow preparation and usage instructions from the projects readme, and make sure to run the binary with option `-x`).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1010398434:1091,test,test,1091,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1010398434,1,['test'],['test']
Testability,"@hodgestar shall we attempt to sort out the caching now, or get things moved over ahead of Unitary Hack and sort it out later? I don't think it's particularly a blocking issue - the tests still all run fine, after all. There's an argument against using `pip wheel` caching for us - we've historically used our tests to try and catch errors when using new versions of packages, which we'd lose if we start pinning versions to one particular thing. I'm not sure which is more desirable for us - overall I think the time loss from installing `cvxpy` isn't _that_ high, and we'd get more improvement from redoing some of our older tests. (Not to mention the _effective_ wait time for tests to pass is now ~35 minutes, whereas it could be >2hours on Travis since you had to wait from Mac machines for a long time.)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1551#issuecomment-839686694:182,test,tests,182,https://qutip.org,https://github.com/qutip/qutip/pull/1551#issuecomment-839686694,4,['test'],['tests']
Testability,"@hodgestar since yesterday our tests are failing for python3.9 ubuntu, but I can't reproduce the error locally...; I you have time could you take a look.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1689#issuecomment-943619749:31,test,tests,31,https://qutip.org,https://github.com/qutip/qutip/pull/1689#issuecomment-943619749,1,['test'],['tests']
Testability,"@hodgestar the `.h` file imported from `base.pxd` makes is a lot simpler.; Changing the header file force recompilation, but the cythonization step is skipped.; If tests passes, it's ready for review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195:164,test,tests,164,https://qutip.org,https://github.com/qutip/qutip/pull/1874#issuecomment-1106675195,1,['test'],['tests']
Testability,"@hodgestar, one of the tests seems to have failed at the installation step, although not idea why. Nevertheless, I think it is not related to the changes in this PR. Could you rerun the test?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1636#issuecomment-940959780:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/pull/1636#issuecomment-940959780,2,['test'],"['test', 'tests']"
Testability,"@hodgestar, tests are passing, can I merge?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1889#issuecomment-1197390147:12,test,tests,12,https://qutip.org,https://github.com/qutip/qutip/pull/1889#issuecomment-1197390147,1,['test'],['tests']
Testability,"@hodgestar, to make it work with HEOM, I had to change `step` to return `rho` directly, (controlled by the `store_ados` options). Could you take a look and tell me if you are fine with this approach. Also, do you know a `Bath` configuration that would result in evolution similar to `mesolve` so we could use it in tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1999#issuecomment-1258539120:315,test,tests,315,https://qutip.org,https://github.com/qutip/qutip/pull/1999#issuecomment-1258539120,1,['test'],['tests']
Testability,"@hodgestar. yes my script returns the _current_ cpu frequency....I currently am unaware how to get the maximum on Apple silicon. I'll do some research and test some code to see what I can figure out. @matteoacrossi. > A command that somehow gives info on cpu frequencies is sudo /usr/bin/powermetrics -s cpu_power -n 1 ... Powermetrics does seem to be doing some weird trickery. I'm currently trying to reverse engineer it...I've found a bit of interesting things in the assembly but I'm still not fully sure how it's pulling what it does. > But it requires sudo and is a bit messy to parse the max frequencies. I'm pretty sure powermetrics is accessing some private APIs, which is why it requires `sudo`, which is quite unfortunate. I doesn't seem like powermetrics returns any maximum frequencies, though. It only returns _current_ frequencies.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1009099408:155,test,test,155,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1009099408,1,['test'],['test']
Testability,"@hodgestar: those comments lines you've highlighted were a careless mistake - they shouldn't have been removed, but it's a function of how I implemented the automated removal. I didn't notice them when I checked it through. I've restored them. The `cython: language_level=3` lines in particular are especially important to maintain, so that was very careless of me. That said, utf-8 is the default encoding for Python 3, so those lines aren't actually necessary at all any more. That wasn't the case with Python 2 (which assumed ASCII), but it's no longer an issue. Regardless, I've restored them because this PR wasn't meant to remove that sort of thing. Similarly, since I had to go through everything anyway, I've excluded the whitespace-only changes within files (though I left the normalisation of whitespace specifically at the ends of files). Apologies, I've force-pushed it back rather than applying it as a new commit, so it probably won't render these changes as nicely in the GitHub interface - it was rather easier for me to modify the commit than to make a ""partial reversion"" commit (and it's better for the logs).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-867019111:1122,log,logs,1122,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-867019111,1,['log'],['logs']
Testability,"@jakelishman , I think it is ready for a review. . There a lot of `TODOs` in the code from the before times, and a general refactor is probably needed since most of the representations are working on the assumption that the channels admit equal right and left tensors:; ![formula](https://render.githubusercontent.com/render/math?math=A_{\alpha}%20=%20B_{\alpha}) . ; This PR at least allows for different left and right tensor in the Stinespring representation, thus completing the `FIXME` in the original tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-831514046:507,test,tests,507,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-831514046,1,['test'],['tests']
Testability,"@jakelishman @Ericgig I'm going to merge this so that I can run a test build easily and so that people who were experiencing issues on 3.10 can try it out easily. If you'd like changes, I can address them in a follow up PR. Hope you are both enjoying your holidays!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1747#issuecomment-1005593804:66,test,test,66,https://qutip.org,https://github.com/qutip/qutip/pull/1747#issuecomment-1005593804,1,['test'],['test']
Testability,"@jakelishman I'm somewhat against re-running flaky tests all the time. It's inelegant and hides other possible flakiness. An alternative approach is to set the random seed before generating the random states using a small fixture, e.g.:. ```python; import numpy; import random as rand. @pytest.fixture; def random():; rand.seed(0); numpy.random.seed(0); ```; (from https://github.com/pytest-dev/pytest/issues/667#issuecomment-112206152). potentially we could also run the tests with a few different random seeds (to cover more cases). If we add hypothesis (https://hypothesis.readthedocs.io/en/latest/) one day, we could generate a broader set of cases to solve and filter out bad cases.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815310190:51,test,tests,51,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815310190,2,['test'],['tests']
Testability,"@jakelishman I've approved this PR -- it's definitely worth getting rid of test flakiness right away. Re random seed: We wouldn't want to set the random seed for all tests, just those like the dnorm ones that are causing issues. But let's leave that for the future.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490#issuecomment-815592138:75,test,test,75,https://qutip.org,https://github.com/qutip/qutip/pull/1490#issuecomment-815592138,2,['test'],"['test', 'tests']"
Testability,@jakelishman There were no issues on OpenBlas. I opened a separate PR with the changes you suggested and the failing test.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-819601408:117,test,test,117,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-819601408,1,['test'],['test']
Testability,"@jakelishman, thanks for the explanation! I forget the tests here belong to the circuit module. @Canoming Would you still like to add some tests to `tests\test_qubitcircuit.py` for `remove_gate` and `add_circuit`? Otherwise, I can also merge this and we will update the tests later.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629800241:55,test,tests,55,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629800241,4,['test'],['tests']
Testability,@jonahpeter Do you perhaps have some specific `a` and `b` in mind that we could use to write a test case?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1719#issuecomment-979432001:95,test,test,95,https://qutip.org,https://github.com/qutip/qutip/issues/1719#issuecomment-979432001,1,['test'],['test']
Testability,@kcgthb have you tested this inside of a conda env on CentOS/RHEL? ; I ask because that is our supported platform.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/723#issuecomment-318011645:17,test,tested,17,https://qutip.org,https://github.com/qutip/qutip/issues/723#issuecomment-318011645,1,['test'],['tested']
Testability,@labay11 Thank you! I've approved the changes and marked them for inclusion in 4.7. I'll merge once the test runs have succeeded.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1813#issuecomment-1047587729:104,test,test,104,https://qutip.org,https://github.com/qutip/qutip/pull/1813#issuecomment-1047587729,1,['test'],['test']
Testability,"@magnamancer I think part of the issue was that you merged `qutip-5.0.X` into `master` but that shouldn't have been done because `master` now contains the latest 5.X qutip code. Sorry to be a pain, but could you open a new new PR with just your changes? No need to be fancy -- just create a new branch from master, copy across the files you want to change, create PR. The `VERSION` file should not be changed. How hard would it be to add tests? I remember you have tests in a notebook somewhere. If you can point me at the latest versions, I can think about how to convert them into unit tests and add them to the new PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1622360050:438,test,tests,438,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1622360050,3,['test'],['tests']
Testability,"@maij @nathanshammah Do you remember how you tested `spin_q_function` when these changes were made? The changes were merged, but I only get the expected results if I invert the direction of theta:; ```python; psi = qutip.spin_coherent(spin, theta, phi); [[husimi_q]], _, _ = qutip.spin_q_function(psi, np.pi - theta, phi); # assert husimi_q == 1 / np.pi; ```; Without inverting theta, the bug persists for me (regardless of whether the spin is integer or half integer). I have a fix that works in my test cases, but I was wondering about the history of the changes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1195#issuecomment-892768442:45,test,tested,45,https://qutip.org,https://github.com/qutip/qutip/pull/1195#issuecomment-892768442,3,"['assert', 'test']","['assert', 'test', 'tested']"
Testability,"@maij Thanks! The test code looks like a good start. Could you add it to `qutip/tests/test_wigner.py`?. Other tests we could add:. * We could write a more general test that compares the output of spin_q_function to a simpler implementation based on the definition -- something like:; ```python; state = qutip.spin_coherent(spin, theta_prime, phi_prime); direct_q = (state.dag() * qutip.ket2dm(psi) * state).norm() / np.pi; ```; Note: I named the angles `theta_prime` and `phi_prime` to emphasize that we can apply this test to cases where the angles for the state psi and the ones passed to spin_q_function are different. * We should also add a test for passing in arrays of theta and phi (i.e. were we really get out a mesh grid for Q values) since that was the primary use case for which `spin_q_function` was defined. Ideas for future PRs:. * It would be nice to also add tests for `spin_wigner` (I am suspicious of it now because of the problems with spin_q_function). Thank you for looking at these and taking charge of this bit of QuTiP.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/pull/1632#issuecomment-893326408,7,['test'],"['test', 'tests']"
Testability,@manas7891 This is a question about usage of qutip. Please ask on help group and include full code snippet.; https://groups.google.com/forum/#!forum/qutip. You get the test errors because you don't have working C++ compiler,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/858#issuecomment-467351684:168,test,test,168,https://qutip.org,https://github.com/qutip/qutip/issues/858#issuecomment-467351684,1,['test'],['test']
Testability,@matteoacrossi Thank you for checking! The value is meant to be in GHz (e.g. on my Linux machine QuTiP returns 4.8) but on Mac OS for some unknown reason the value was truncated by calling `int` on it. I've added some tests so that hopefully these sorts of issues are picked up by our robots in future.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1006612560:218,test,tests,218,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1006612560,1,['test'],['tests']
Testability,"@matteoacrossi Thank you for running the tests and reporting these. I'm glad there are only four failing. I can't immediately guess the cause of any of them, so some digging is needed. If you're up to digging into them I'm happy to review and merge PRs. If not, no worries -- I will try think of another plan.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1007278696:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1007278696,1,['test'],['tests']
Testability,"@matteoacrossi Thanks! I don't know that I have much particular advice, other than ""let's try debug the failing tests one at a time"". Maybe pick one of the `test_driven_cavity` ones, because I'm not quite sure how `ValueError: Invalid preconditioning method` can get raised when it succeeds on other platforms. Maybe it is a bug that isn't completely related to the M1?. Are you familiar with pdb? Running just the one test using pytest and `pytest --pdb` will allow to explore the stack trace and see the values of variables in each stack frame, and hopefully figure out what went wrong. Another first step is just to fix the line `raise ValueError(""Invalid preconditioning method."")` to be `raise ValueError(f""Invalid preconditioning method: {ss_args['method']!r}."")` so that the error messages gives more of a hint of what the invalid method name was.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1007285325:112,test,tests,112,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1007285325,2,['test'],"['test', 'tests']"
Testability,@mtreinish Thank you for the fix!; @AGaliciaMartinez Thank you for trying it out. I'll merge this now so that master isn't broken for numpy 1.22 and then we can add numpy 1.22 to the CI test matrix in a follow up PR.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1752#issuecomment-1006011287:186,test,test,186,https://qutip.org,https://github.com/qutip/qutip/pull/1752#issuecomment-1006011287,1,['test'],['test']
Testability,"@nathanshammah ; I am keeping the release up to date adding merged PR to this one.; This version has most bug fix PR since 4.5.0 and some testing/travis one.; Idealy I would also like to add 2 more waiting approval:; #1219 : Bug on windows using int32; #1215: parallel_map run on mac in python 3.8.; I did not add the PR about gates, they are new feature.; The latex one (#1194 ), I am not sure, so I left it for now.; To be really happy about the release I would like the segfault to be fixed, but I don't have the error and travis test also does not. So I am blind for that one. It will have to wait.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1215#issuecomment-613039746:138,test,testing,138,https://qutip.org,https://github.com/qutip/qutip/pull/1215#issuecomment-613039746,2,['test'],"['test', 'testing']"
Testability,"@nathanshammah ; That was a lot more than 1 commit but it's now ready.; - I added a test suite without cython. It only skip brmesolve time dependent tests. ; - Error is raised when trying to use brmesolve without cython, but not at qutip import.; - Every other features works without cython. I tested without cython with both conda and pip. It work with both when done properly but conda is not as stable: uninstalling cython can change numpy, scipy, etc.'s versions which break qutip. So I am not sure if it will work properly we downloaded as binaries from conda. But this error should already be present for conda installation.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1082#issuecomment-535188336:84,test,test,84,https://qutip.org,https://github.com/qutip/qutip/pull/1082#issuecomment-535188336,3,['test'],"['test', 'tested', 'tests']"
Testability,@nathanshammah @Ericgig all tests seem to pass. Please review. Also thanks for your fix @Ericgig.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-574189773:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-574189773,1,['test'],['tests']
Testability,@nathanshammah All tests passed now,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1155#issuecomment-579661462:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/1155#issuecomment-579661462,1,['test'],['tests']
Testability,@nathanshammah I think @Ericgig is right because it doesn't fail tests locally. Should this be merged for now? If it causes problems we can create new issues later.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-562414356:65,test,tests,65,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-562414356,1,['test'],['tests']
Testability,"@nathanshammah I think it has nothing to do with this PR, I didn't change anything in `qobj.py` where the test failed before. I guess it might have something to do with Erig's commit ""mac without mkl"" and I simply merged it from master.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307:106,test,test,106,https://qutip.org,https://github.com/qutip/qutip/pull/1042#issuecomment-511355307,1,['test'],['test']
Testability,"@nathanshammah OK, my ""tests"" were just creating instances of `Bloch()` with and without `plt.figure()` instance passed in the constructor and then repeatedly executing the `show()` function. Now after I had a look at `qutip/tests` my small testing snippets indeed don't fit into that. Hence at this stage I don't see the benefit from adding these trivial ""tests"" I did to the repo. Thank you for the review and all the guidance.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-494119661:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-494119661,4,['test'],"['testing', 'tests']"
Testability,"@nathanshammah Sure, I can add a test for it. Just I'm not sure what should I test against? If I compare the result matrix, I'm basically just copying the matrix from the code. Test on high dimension?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1028#issuecomment-505095971:33,test,test,33,https://qutip.org,https://github.com/qutip/qutip/pull/1028#issuecomment-505095971,3,"['Test', 'test']","['Test', 'test']"
Testability,@nathanshammah as soon as the tests finish if the usual tests pass.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1024#issuecomment-504556383:30,test,tests,30,https://qutip.org,https://github.com/qutip/qutip/pull/1024#issuecomment-504556383,2,['test'],['tests']
Testability,"@nathanshammah thanks! Submitted a PR that seems to be fixing the issue in the above mentioned way. Naturally I have brief tests for that, in a form of Jupyter notebook and in the form of `.py` file (the `.py` is just a copy of Jupyter but here we need to test both environments). Should I commit the `.py` file to `qutip/tests/` on this repo (add to my PR) and Jupyter test to `qutip-notebooks` or there is another standard way?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-493789773:123,test,tests,123,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-493789773,4,['test'],"['test', 'tests']"
Testability,"@nathanshammah, @Ericgig, @ajgpitch, @nwlambert, @quantshah, @BoxiLi, @hodgestar. I've updated this PR to match what I understand we agreed on. I've also added complete copyright notices to the documentation, including linking the CC-BY-3.0 licence the documentation text is licensed under, and making it clear that it's the documentation _text_ licensed under CC, and that the code is under 3-clause BSD. I've updated the frontmatter, and added a copyright notice to the index, so it's linked from every page in the documentation releases. I have updated the short copyright notice at the bottom of the documentation pages to say ""Copyright 2011 to 2021 inclusive, QuTiP developers and contributors"" to make it consistent with the source code (for the same reasons). As I've added a `_copyright` Sphinx target, the word ""Copyright"" at the bottom of the documentation is now hyperlinked as well. I didn't explicitly split this into more than one PR, but it's split into separate logical commits, which explain their extent and intent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298:979,log,logical,979,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-866977298,1,['log'],['logical']
Testability,"@nathanshammah: It seems that travis fails before it even gets to the testing, when calibrating openmp. I cannot replicate the error on my end, the calibration takes only about a second for me. I did make 535010d more similar to 5501b2e by no longer using numpy.testing.assert_raises, numpy.testing.assert_warns and a ResourceWarning. Instead I use a try-except construction now. That seems to have fixed things, so I suspect that importing/calling one of the functions or the warning makes openmp fail on the rig used by travis. As I'm pretty sure the reason for the previous failure is either a numpy or openmp issue and therefore a hard fix, I would propose to simply not use those functions, the try-except construction does well enough.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-567132755:70,test,testing,70,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-567132755,3,['test'],['testing']
Testability,"@nathanshammah: Sure. An assumption had previously been hard-coded into various conversion functions between super-operator representations that the input and output Hilbert spaces for the superoperator have the same dimension. An example is `_super_tofrom_choi` which converts between Liouville and Choi matrix representations, for example the line:. ``sqrt_shape = int(sqrt(data.shape[0]))``. This enhancement removes these assumptions and instead looks at the input and ouput dimensions of the `Qobj`s, which is stored in the `dims` attribute, to correctly convert in the case when the input and output dims are different. It's needed in all sorts of applications. Since the failing tests are unrelated to this pull request, it is merge ready.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1098#issuecomment-541953594:686,test,tests,686,https://qutip.org,https://github.com/qutip/qutip/pull/1098#issuecomment-541953594,1,['test'],['tests']
Testability,@nonhermitian Thanks for the fix. But the tests are failing for the older scipy version. Maybe we should bump up the min scipy requirement in the setup for the next version?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/865#issuecomment-392012683:42,test,tests,42,https://qutip.org,https://github.com/qutip/qutip/pull/865#issuecomment-392012683,1,['test'],['tests']
Testability,"@nonhermitian The test failure is with NOMKL=1 and OPENMP=0. Specifically, a solver is unavailable. This is not related to the addition of this function. Something else is breaking. ```; cvxpy.error.SolverError: Solver 'CVXOPT' failed. Try another solver.; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/752#issuecomment-331760244:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/pull/752#issuecomment-331760244,1,['test'],['test']
Testability,@nonhermitian There is some BR test failing here. Do I need to worry about this? What are the two Travis tests now?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/721#issuecomment-316062715:31,test,test,31,https://qutip.org,https://github.com/qutip/qutip/pull/721#issuecomment-316062715,2,['test'],"['test', 'tests']"
Testability,"@nonhermitian could you please have a look at _pseudo_inverse_sparse when you have time, and see if you can think of any better way of doing this, from your experience with optimizing the steadystate solver? Would an iterative method make sense here? I basically run into memory problems quite quickly when using splu (which seems to be the most efficient method by far for this particular problem, according to my tests).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/272#issuecomment-67125235:415,test,tests,415,https://qutip.org,https://github.com/qutip/qutip/pull/272#issuecomment-67125235,1,['test'],['tests']
Testability,"@nonhermitian please review and test this PR. As far as I have seen it my test it works well, but it would be great if you could try this PR on some other mcsolve example. Perhaps paying special attention to possible performance regressions, although I think there shouldn't be any, but who knows.. With this PR mcsolve can also be used with the IPython.parallel framework. Here are some examples:. http://nbviewer.ipython.org/gist/jrjohansson/f37aa019080f8fb84c46",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/276#issuecomment-66395472:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/276#issuecomment-66395472,2,['test'],['test']
Testability,"@nonhermitian, I have fixed the import error but 2/4 testers fail. As far as I can tell this is unrelated to this PR. Is there anything that I should do before this can be merged?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/553#issuecomment-257148174:53,test,testers,53,https://qutip.org,https://github.com/qutip/qutip/pull/553#issuecomment-257148174,1,['test'],['testers']
Testability,"@nonhermitian: we haven't accept #1405 (and also I don't think we will soon, because it'll be part of larger changes), but yeah, if it is accepted, it would need to carry its entire licence with it in the file. We already do this somewhere with a vendored version of `Qcircuit.tex` though that's a whole other can of worms, because that's GPL'd, and I'm really not sure it's legally correct that we've done that. (also sidenote: thanks to you, I'm starting at IBM in Lev Bishop's team on the 5th of July - I've just put in the requisition for my computer!). On second thoughts, surely the more correct solution is to have the main licence read ""Copyright 2011-2021 Rob and Paul, 2021 onwards admin team""? That's more historically accurate, for sure. Another question: does anybody know about the legality of asserting copyright ""2011 and onwards"" in general? Numpy put in specific years, and bump the end year by commit. I'm mostly in favour of moving the licencing to the single `LICENSE.txt` file in order to make all these instances of separately licenced code easier to see and maintain. It also seems to be the way other large-scale open-source projects handle their licensing, it makes it much easier for us to manage the licensing of the entire project. I really don't want to rush this. I don't want to merge it without a proper discussion in a full admin meeting. I'm just trying to put it up ahead of time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1579#issuecomment-864038744:808,assert,asserting,808,https://qutip.org,https://github.com/qutip/qutip/pull/1579#issuecomment-864038744,1,['assert'],['asserting']
Testability,"@nonhermitian: yeah, that's why I wasn't so keen on changing the code as it is - I can see from the git log that it went through a few iterations due to old versions of mac os breaking it, and I don't want to introduce regressive bugs. I didn't know why there was a difference, and I couldn't find what the output of `sysctl` was on mac 10.9 or whatever it was in 2013 (or when/if it changed).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395#issuecomment-736688479:104,log,log,104,https://qutip.org,https://github.com/qutip/qutip/issues/1395#issuecomment-736688479,1,['log'],['log']
Testability,"@nwlambert ; Unable to run the test cases in (entropy.py) it show this error ; <img width=""850"" alt=""Screenshot 2024-03-20 at 2 48 54 AM"" src=""https://github.com/qutip/qutip/assets/147247481/710869a8-79e6-4941-b6d6-2ad0cf9fd76d"">; Can you please suggest me the solution to solve it ?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2345#issuecomment-2008154917:31,test,test,31,https://qutip.org,https://github.com/qutip/qutip/issues/2345#issuecomment-2008154917,1,['test'],['test']
Testability,"@nwlambert Neill, does this fix everything for you? I'd like to have a couple of people test it if possible, since I toughened up the exception throwing, which might have caused more previously hidden problems to surface.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1471#issuecomment-808877022:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/1471#issuecomment-808877022,1,['test'],['test']
Testability,"@nwlambert: here's a thought - do you reckon it's worth implementing a test on the rank of the Hamiltonian/Liouvillian on input to `propagator`? If it's significantly less than full-rank (which it almost invariably will be), there's probably a really good speed-up to be had by evolving the system in a rotated frame.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1585#issuecomment-865913240:71,test,test,71,https://qutip.org,https://github.com/qutip/qutip/issues/1585#issuecomment-865913240,1,['test'],['test']
Testability,@ozbenh @michkern @matteoacrossi I don't have an M1 to test with. Would you mind trying this out and letting me know if it works?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1754#issuecomment-1006439720:55,test,test,55,https://qutip.org,https://github.com/qutip/qutip/pull/1754#issuecomment-1006439720,1,['test'],['test']
Testability,@ozbenh Thanks for reporting this!. Do you perhaps know what is causing this on your M1? Is it something Apple forgot to add to the platform? Or is it that they're deprecating `hw.cpufrequency` entirely?. What was your fix?. Unfortunately we have no way to test on M1 ourselves at the moment. Any suggestions welcome. :|. Perhaps the best we can do at the moment is harden QuTiP against these breakages so that it doesn't fail to import if some of the hardware information is missing on the M1.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1606#issuecomment-879822914:257,test,test,257,https://qutip.org,https://github.com/qutip/qutip/issues/1606#issuecomment-879822914,1,['test'],['test']
Testability,"@pmenczel I've worked on this quite a bit, mostly focusing on putting initial tests in place, supporting the full set of coefficient functions supported by the other solvers for the rates, shifting the martingale calculations into the integrator and moving the rate shift calculations to Cython to avoid the overhead of Python function calls and loops. @Ericgig I ended up doing some odd things because QobjEvo doesn't seem like natural fit for these rate functions and coefficients are a bit awkward to use directly inside solvers. @pmenczel & @Ericgig Could you take a look at everything again and let me know what you think?. Some of the bigger todo items I have in mind at the moment:. - How do we tell that the negative rate case is really working correctly? I added a test but it doesn't match mesolve well and I'm unhappy with that.; - Can we strengthen any of the existing tests with more assertions?; - Now that the discrete and continuous martingale calculations are mostly handled when collapses happen, we could expose them on the result along with `col_which` and `col_time`. Should we?; - Are the new martingale and rate shift calculations correct?; - The way the shared coefficients are used inside `RateSet` and exposed to `MCSolve` required a lot of careful thinking, did I get the design of that right?; - How do we test whether this works when using `parallel_map`? Being able to run in parallel is a key strength of the Monte Carlo method, so it would be good to have tests that show that that works.; - Can we drop the number of trajectories in the docs to make the doc build faster?; - Using the SciPy integrator is a bit awkward. Is there anything we can replace it with? If not, should we expose more of its options? I exposed the `limit` option because I kept having the integration fail during testing.; - Add tests for the `nm_mcsolve` Cython classes. There is also a bunch of general cleaning up still to do, but lets try get the big picture happy first.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2070#issuecomment-1493417354:78,test,tests,78,https://qutip.org,https://github.com/qutip/qutip/pull/2070#issuecomment-1493417354,8,"['assert', 'test']","['assertions', 'test', 'testing', 'tests']"
Testability,"@quantshah @BoxiLi @hodgestar I have wrapped up the two measurement functions in the `measure` and `measurement_statistics` function which calls the required functions based on whether `ops` is a `list of Qobjs` or a `Qobj`. Do we want the individual functions (especially POVM) to be more granular? Moreover, the docstring for the wrapper function is really clunky (given the case-wise output types). Any ideas on how to make that simpler ?(one idea is to not specify return types and only have parameters given it's bound to be clunky!). ps. I'll fix the tests all at once after we decide on the api",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844:557,test,tests,557,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-650337844,1,['test'],['tests']
Testability,"@quantshah why did we close this? The tests are still failing. Did you close it because it only happens with the tests? If so, then maybe we should open another issue specifically about that.; I would be happy just to leave this open until the MacOS test are working again.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/944#issuecomment-467256762:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/issues/944#issuecomment-467256762,3,['test'],"['test', 'tests']"
Testability,"@quantshah: Simon and I had temporarily stepped back from this one at the time, because we weren't entirely confident that the physics was being handled correctly - the initial version of the PR certainly had invalid physics, and it was hard to evaluate the new stuff from that perspective. It's changed since then, and it might be ok now, but it'll be easier to re-review now we've cleared the old context from our minds. About your Choi matrices - right now, `Qobj` doesn't have an `act` method, but that could well be a useful addition. It _does_ have `Qobj.__call__` which does a similar thing in a very few cases, so we could properly beef that up, but we might want to discuss exactly what spec it should have. @MrRobot2211: I very quickly glanced through the diff of this, but there still seem to be several points where I asked for changes that haven't been changed: things like removing unnecessary calls to `np.array`, and explaining _why_ dimensions needed to be changed in some tests. Can you go back through the PR and make sure you've addressed everything? Also, since you're trying to add new functionality, please make sure you add tests of explicit, analytically known cases against the whole matrix, in addition to the properties like the dimensions (also asked above). In a super ideal world it'd be great if you could find a published reference for those tests, but if the maths is simple enough that we can verify it by hand, then showing us would be ok. It could be good practice for the rest of GSoC if you try and go through the diff yourself to spot places that might want clarifying, and fix them ahead of review.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512:990,test,tests,990,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-847759512,3,['test'],['tests']
Testability,"@riccameng Hi!. I think this is very achievable. Depending a bit on your time scales, it might make sense to work with QuTiP 5, which is currently under development in the `dev.major` branch. Version 5 includes much better QobjEvo support, much cleaner and more pluggable solvers (which should be merged into `dev.major` later this week), and a pluggable data layer. Some of these might be very helpful to you. For the rest of the discussion I will assume we are targeting QuTiP 5 unless you tell me otherwise. Some questions and thoughts from my side:. * As a first step you might be able to use v5s sparse (csr) data layer and write a custom ODE solver that performs the low-level evolution across multiple cores.; * If that works nicely, it could be extended to work across multiple nodes.; * For quantum circuit simulation, I think you can just ask @BoxiLi in a separate issue in https://github.com/qutip/qutip-qip about adding support for sparse unitaries in circuit simulation. I'm not sure if there are reasons why this might be difficult, but let's open an issue there and see.; * If the operators or states are too big to be stored in main memory even when they're sparse, we'll also need to figure out how to store them. Possibly this would involve a new data layer of some sort, but let's cross that road when we get to it.; * One of the challenges with HPC support is how to ensure we don't break it while continuing to evolve QuTiP. There are two challenges here. The first is to make sure that the code runs correctly -- I'm guessing there is some way to run MPI nicely on a single machine in our unit tests. The second is to make sure that performance isn't negatively impacted by changes. Do you have any thoughts on either of these?. It's exciting to see QuTiP being used on really big hardware. Looking forward to working with you however we can.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1671#issuecomment-927737428:1616,test,tests,1616,https://qutip.org,https://github.com/qutip/qutip/issues/1671#issuecomment-927737428,1,['test'],['tests']
Testability,@sahmed95 I am assuming that tests passed then? ; I can't find any Travis record of them having run.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/873#issuecomment-394270843:29,test,tests,29,https://qutip.org,https://github.com/qutip/qutip/pull/873#issuecomment-394270843,1,['test'],['tests']
Testability,@sahmed95 I assume that you still have a Mac for testing this locally?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/944#issuecomment-458518424:49,test,testing,49,https://qutip.org,https://github.com/qutip/qutip/issues/944#issuecomment-458518424,1,['test'],['testing']
Testability,"@sahmed95 I like everything you are doing with this PR. Looks good to me.; I assume that you have tested all the fancy docstrings with the documentation build. I do think think it would be better if your test method docstrings started ""PIQS: "". Is there a reason not to do this?. Otherwise I think it is merge ready",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-396885841:98,test,tested,98,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-396885841,2,['test'],"['test', 'tested']"
Testability,"@sahmed95 Thanks for this. ; Just restarted failed test. Fail not related to this change, so hopefully just a blip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/827#issuecomment-369642499:51,test,test,51,https://qutip.org,https://github.com/qutip/qutip/pull/827#issuecomment-369642499,1,['test'],['test']
Testability,@sahmed95 You'll see I have raised #881 to solve the py3 test issues. You can merge that (into the master and this) if the tests pass. On the py2 issues. I suggest you skip the tests (for Python 2.x) that are known to be failing. You can add something in the documentation that the PIQS module is only fully supported in Python >= 3.6. While your doing the skipping change ... would be good if the PIQS / Dicke tests had some docstring prefix to show they relate to the same module.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-396565673:57,test,test,57,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-396565673,4,['test'],"['test', 'tests']"
Testability,@sahmed95 can you merge the new master into this.; I'll check it over when the tests are passing.; Thanks,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/861#issuecomment-395844451:79,test,tests,79,https://qutip.org,https://github.com/qutip/qutip/pull/861#issuecomment-395844451,1,['test'],['tests']
Testability,"@sahmed95 thank you very much. 2018-02-21 11:53 GMT+09:00 Shahnawaz Ahmed <notifications@github.com>:. > This is ready for a review. I incorporated the changes and the pep8 fixes.; > We still might go for a change in the name for the module as piqs and the; > class as Dicke to follow the naming in the paper. There are some more; > tests that we would like to add today.; >; > However, for the rest of it, things remain the same. Since the is_diagonal; > feature is more general, I could open a PR to include that as a Qobj; > property. Otherwise, this function will only be used once we add the; > enhancement diagonal_solver which can solve for some special classes of; > Hamiltonians. But that is for later.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#issuecomment-367197236>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AN5ffJy5kuOEnKCIxLH-GjbhKdmP8mHsks5tW4UrgaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-367222920:333,test,tests,333,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-367222920,1,['test'],['tests']
Testability,@sahmed95 weird that the travis test still fails. I merged with master and it still does this.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/883#issuecomment-398273615:32,test,test,32,https://qutip.org,https://github.com/qutip/qutip/pull/883#issuecomment-398273615,1,['test'],['test']
Testability,"@sarsid thank you for the detailed description of the PR. Some tests are failing at [` TestQubitCircuit.test_user_gate`](https://travis-ci.org/github/qutip/qutip/jobs/699177830#L3017), ""NameError: name 'isfunction' is not defined"". . This is still in draft mode, however I wonder whether you think it makes sense to provide the user the option to choose from OpenQasm 2.0 and Qasm, with the same function, e.g., `read_qasm`, but with an attribute. . This is a draft, but please remember to add Numpy docstrings to functions. . It would be great to have read/write capabilities with QASM, looking forward to this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-645411323:63,test,tests,63,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-645411323,2,"['Test', 'test']","['TestQubitCircuit', 'tests']"
Testability,"@sbisw002 can you do a small change so that we see if the tests fail also with `pytest`?; The current fail in OpenBLAS is due to a test in this new module. Please just scrap what is not working so that we can merge this soon. ; ```; FAIL: lattice: Test the methods of Lattice1d in a CROW model.; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/home/travis/miniconda/envs/test-environment/lib/python3.7/site-packages/nose/case.py"", line 197, in runTest; self.test(*self.arg); File ""/home/travis/miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.5.0.dev0+7dcd9be-py3.7-linux-x86_64.egg/qutip/tests/test_lattice.py"", line 580, in test_CROW; assert_(np.max(abs(val_kns-Ana_val_kns)) < 1.0E-13); File ""/home/travis/miniconda/envs/test-environment/lib/python3.7/site-packages/numpy/testing/_private/utils.py"", line 98, in assert_; raise AssertionError(smsg); AssertionError; ----------------------------------------------------------------------; Ran 663 tests in 1006.646s; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1066#issuecomment-575495617:58,test,tests,58,https://qutip.org,https://github.com/qutip/qutip/pull/1066#issuecomment-575495617,12,"['Assert', 'Test', 'test']","['AssertionError', 'Test', 'test', 'test-environment', 'testing', 'tests']"
Testability,@sbisw002 the tests by Travis CI are failing on all operating systems.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1053#issuecomment-513148589:14,test,tests,14,https://qutip.org,https://github.com/qutip/qutip/pull/1053#issuecomment-513148589,1,['test'],['tests']
Testability,"@tehruhn and I found that trying to install qutip from pip with the latest python 3.9 fails. When we run the installations from a fresh conda env (conda 4.8.5) using pip as. ```; pip install qutip; ```; or with conda (using both). ```; conda install -c conda-forge qutip; conda install qutip; ```. we get different errors. The errors do not occur if we use python3.8 while creating the conda environment as. ```; conda create -n py38 python==3.8; ```. Looking at the error it seems there is specification that prohibits python 3.9. @jakelishman @Ericgig any idea about this?. # Steps to reproduce (with conda 4.8.5). ```; conda create -n qutip-test python=3.9; conda activate qutip-test; conda install -c conda-forge qutip; ```. ### Error; ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - qutip -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.5,<3.6.0a0|3.4.*']. Your python: python=3.9. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. Note that strict channel priority may have removed packages",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1371:644,test,test,644,https://qutip.org,https://github.com/qutip/qutip/issues/1371,2,['test'],['test']
Testability,"@tehruhn let's look into this together this week so that I can understand better also Eric comments. I would be happy to merge, and open a separate issue on the np-Cython bit. nose to pytest migration has been dragging on for ages. Also, please let's try to find a way to have the docstrings print to screen, the verbosity=2 thing does not seem to work. With `nose` and current development master now I get a segmentation fault on Mac 10.14 so I cannot test locally.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-563243088:453,test,test,453,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-563243088,1,['test'],['test']
Testability,@theodotk Apologies for the delay and thank you for the tests. I've incorporate them now and they look good. It would be nice to make the expected results match a little better. Supplying only `atol` is problematic when the values themselves are small and currently the relative differences are larger than `1`. Any suggestion for making these better without having the test take too long?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1446044347:56,test,tests,56,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1446044347,2,['test'],"['test', 'tests']"
Testability,"@theodotk Thank you for the bug report. I cherry-picked your fix into this PR. Any thoughts on a simple test case we could add? Ideally we could just pass in custom m_ops in something like `test_smesolve_heterodyne` but I don't know what the custom m_ops should be, how to calculate the expected result or how to be sure the right m_ops were used.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216:104,test,test,104,https://qutip.org,https://github.com/qutip/qutip/pull/2081#issuecomment-1424035216,1,['test'],['test']
Testability,"@tomohiro-soejima Thank you for a very well organized bug report and for suggesting a fix. I've opened PR #1818 that applies your suggestion and adds tests. The PR is a continuation of #1690 because I didn't want to generate merge conflicts, so it can only be easily reviewed and merged once #1690 lands. I've marked the fix for inclusion in 4.7 which should be released in the next couple of weeks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1817#issuecomment-1057931568:150,test,tests,150,https://qutip.org,https://github.com/qutip/qutip/issues/1817#issuecomment-1057931568,1,['test'],['tests']
Testability,@vikas-chaudhary-2802 It looks like something went wrong with the installation. Make sure that you really installed the master branch and are testing it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2345#issuecomment-2016856321:142,test,testing,142,https://qutip.org,https://github.com/qutip/qutip/issues/2345#issuecomment-2016856321,1,['test'],['testing']
Testability,"@vikas-chaudhary-2802 can you add the test to this PR? it can be very simple. if you feel like it will take some time, i can merge this and you can do a separate one later. @ytdHuang thanks for the suggestion, do you think it would be better to use that as the default method? in any case, lets do that in a separate issue/PR",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519:38,test,test,38,https://qutip.org,https://github.com/qutip/qutip/pull/2371#issuecomment-2042114519,1,['test'],['test']
Testability,"@wrzadkow I now read your last comment. I found no previous test for Bloch. If you want to add one that would be great but besides checking the environment I wouldn’t know how to do it. But you’re welcome to go ahead. I don’t think that there are tests in qutip-notebooks, Travis CI only looks into qutip/qutip. Thank you for the PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-494103447:60,test,test,60,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-494103447,2,['test'],"['test', 'tests']"
Testability,@wrzadkow thank you. It sounds good to me. Could [detect](https://stackoverflow.com/questions/5376837/how-can-i-do-an-if-run-from-ipython-test-in-python) whether the environment is `IPython`. ; If you can write a test too for it to avoid environment-dependent errors that would be great.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/989#issuecomment-493725091:138,test,test-in-python,138,https://qutip.org,https://github.com/qutip/qutip/issues/989#issuecomment-493725091,2,['test'],"['test', 'test-in-python']"
Testability,"@yosefrajwulf Thanks for pointing out the bug. I got an unrelated error in MacOS so restarting the tests. Hopefully, they pass and we can merge this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/943#issuecomment-456054829:99,test,tests,99,https://qutip.org,https://github.com/qutip/qutip/pull/943#issuecomment-456054829,1,['test'],['tests']
Testability,"@ziofil, I just checked that updating the colab notebook to have the line; ```; !pip install scipy==1.2.1; !pip install qutip; ```; works for me, as @quantshah mentioned. ; QuTiP will find already the SciPy 1.2.1 requirement and will avoid keeping 1.3.; It is an issue with `IndexMixin` relocation in SciPy 1.3 (released this May 17), which has been changed from `scipy.sparse.sputils` to `scipy.sparse._index`.; I tested this also in My Binder and this works too, by setting in the `environment.yml` file, ; [in line 9,](https://github.com/nathanshammah/interactive-notebooks/blob/master/environment.yml#L9); from; ```; - scipy; ```; to ; ```; - scipy==1.2.1; ```; I will open a PR with this patch for `qutip-notebooks` for the time being. Once the next official version of QuTiP is released, this problem will not arise, as this issue has been taken care of by @Ericgig in PR #999 by updating scipy `IndexMixin`, now under private use, with scipy `get_index_dtype`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1008#issuecomment-499038616:415,test,tested,415,https://qutip.org,https://github.com/qutip/qutip/issues/1008#issuecomment-499038616,1,['test'],['tested']
Testability,"A bit surprisingly, all tests now pass on Windows on QuTiP 5. I'm not 100% sure the parallel map change fixed everything, or if everything was mostly working before. I would like to keep the parallel map change regardless, because it removes some of the management of making multiprocessing work and leaves it with the core Python developers.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948#issuecomment-1170374439:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1948#issuecomment-1170374439,1,['test'],['tests']
Testability,A bug is fixed in Qobj permute and bra vector tests are added.; The bug is found by a student of mine Slava Kuzmin (IQOQI).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/545:46,test,tests,46,https://qutip.org,https://github.com/qutip/qutip/pull/545,1,['test'],['tests']
Testability,"A few proposed changes to internals of the MultiTrajSolver and its subclasses. The changes are (a) to increase consistency between the monte carlo solvers and the stochastic solvers, (b) to reduce repeating code from MultiTrajSolver in the subclasses, (c) to fix some documentation. * Renamed `_MTSystem` and `_MCSystem` into `_MultiTrajRHS` and `_MCRHS` to make them analogous to `_StochasticRHS`. Removed distinction between `.system` and `.rhs` which seemed unnecessary and confusing to me (please tell me if I'm wrong).; * Made `_integrate_one_traj` use the integrator's run method (which doesn't do anything special currently, but I imagine that it could potentially be implemented more efficiently than repeated calls to integrate). Made subclasses use `_run_one_traj`, `_integrate_one_traj` etc of the parent class where possible, instead of duplicating logic.; * The docstring of MCSolver.run was not documenting its parameters, instead referring to the docstring of MultiTrajSolver.run, but MultiTrajSolver is not included in the docs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2359:861,log,logic,861,https://qutip.org,https://github.com/qutip/qutip/pull/2359,1,['log'],['logic']
Testability,"A large portion of the mcsolver runtime is concentrated in the calculation of expectation values for each time in tlist. For example:. ``` python; from qutip import *; from numpy import sqrt, linspace; N0 = 10; N1 = 10; N2 = 10; # damping rates; gamma0 = 0.1; gamma1 = 0.4; gamma2 = 0.1; alpha = sqrt(2) # initial coherent state param for mode 0; ntraj = 500 # number of trajectories; # define operators; a0 = tensor(destroy(N0), qeye(N1), qeye(N2)); a1 = tensor(qeye(N0), destroy(N1), qeye(N2)); a2 = tensor(qeye(N0), qeye(N1), destroy(N2)); # number operators for each mode; num0 = a0.dag() * a0; num1 = a1.dag() * a1; num2 = a2.dag() * a2; # dissipative operators for zero-temp. baths; C0 = sqrt(2.0 * gamma0) * a0; C1 = sqrt(2.0 * gamma1) * a1; C2 = sqrt(2.0 * gamma2) * a2; # initial state: coherent mode 0 & vacuum for modes #1 & #2; psi0 = tensor(coherent(N0, alpha), basis(N1, 0), basis(N2, 0)); # trilinear Hamiltonian; H = 1j * (a0 * a1.dag() * a2.dag() - a0.dag() * a1 * a2). tlist = linspace(0, 10, 100); data = mcsolve(H, psi0, tlist, [C0, C1, C2], [num0, num1, num2],ntraj=ntraj). tlist = linspace(0, 10, 10); data = mcsolve(H, psi0, tlist, [C0, C1, C2], [num0, num1, num2],ntraj=ntraj,; options=Options(seeds=data.seeds)); ```. The second run, where the seeds are the same as the first run to remove randomness in the tests, is nearly 3x faster (using 4 cores) than the first one. However, we are already calculating the expectation values using cython, so it is difficult to see how we can improve on this here.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/264#issuecomment-64517057:1333,test,tests,1333,https://qutip.org,https://github.com/qutip/qutip/pull/264#issuecomment-64517057,1,['test'],['tests']
Testability,"A lot of the cost of the Husimi Q function does not depend on the state. If it is called many times (e.g. for a density matrix or when doing multiple states), this can be used for a speedup. I wrote a function to precompute everything that does not depend on the state and store it as a 3d array. The Q function itself is then a dot product between the last axis of the precomputed array and a pure state. Performance: Everything tested by computing Q of a coherent state with N dimensions, evaluated at 401 points in x and y, respectively.; Speedup is 3x for N=10, 4x for N=20, 7x for N=50. ; For density matrices, precomputing is already paid for by the first call. . Possible further changes:; Because precomputing is always worth it if the state is a density matrix, one could do that automatically. Because the memory cost can be large (len(xvec) * len(yvec) * N * 128 bit) , I still leave the decision to the user. The third if statement in _qfunc_pure can be avoided at a small performance cost in either the polyval or np.dot variant. This seemed the best compromise between performance and nice code.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934:430,test,tested,430,https://qutip.org,https://github.com/qutip/qutip/pull/934,1,['test'],['tested']
Testability,"A new iterative method using Clenshaw summation is implemented. It is numerically stable and fast (2-3 times faster than 'iterative'). Test:. ```; import matplotlib.pyplot as plt; from qutip import *; import numpy as np. xvec=np.linspace(-10,10,101);yvec=xvec;X,Y = np.meshgrid(xvec, yvec); psi=coherent(100,7.3*np.exp(1j*0.5)); rho0 = ket2dm(psi); WW = wigner(rho0,xvec,yvec,method='iterative'); WWc = wigner(rho0,xvec,yvec,method='clenshaw'). plt.contourf(X,Y,WW,100,cmap=plt.cm.viridis); plt.show(); plt.contourf(X,Y,WWc,100,cmap=plt.cm.viridis); plt.show(); ```",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/461:135,Test,Test,135,https://qutip.org,https://github.com/qutip/qutip/pull/461,1,['Test'],['Test']
Testability,"A re-implementation of `qutip.metrics.process_fidelity`. ; The definition implemented here follows Gilchrist, Langford, Nielsen, Phys. Rev. A 71, 062310 (2005), https://journals.aps.org/pra/abstract/10.1103/PhysRevA.71.062310 (https://arxiv.org/abs/quant-ph/0408063).; Depending on how the quantum channels passed to `process_fidelity` are represented (unitary, supermatrix, choi, chi, or Kraus), computational shortcuts are used. They are all tested against each other. **Related issues or PRs**; Proposed in https://github.com/qutip/qutip/issues/1703. **Changelog**; Fixed implementation of qutip.metrics.process_fidelity and added tests",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1708:444,test,tested,444,https://qutip.org,https://github.com/qutip/qutip/pull/1708,2,['test'],"['tested', 'tests']"
Testability,"A representation of a quantum circuit consiting of qubit initialisation (I), controlled NOT gates (C) and measurements (M) with respect to different bases. According to [1], the transformation of a circuit to the ICM representation provides a cannonical form for an exact and fault-tolerant, error corrected circuit needed for optimization prior to final implementation on a hardware model. The algorithm consists of magic qubit initializations, gate teleportation and conditional measurements on qubits. It can be a starting point for topological descriptions of quantum cirucuits important for fault-tolerant quantum computation and can become a part of a pipeline for optimization of topological quantum computing circuits. Check out the game (MeQuanics)[http://www.mequanics.com.au] which aims to do so using crowd sourcing. Several proposals exist for circuit optimizations once we have the topological circuit model (Machine learning, monte carlo search etc) and the ICM model can be a good starting point to get to the initial topological circuit (as far as I could understand). . The algorithm can be roughly described as follows : . ```; Require: Circuit C composed from {Toffoli,CNOT,H,P,T}; Replace the Toffoli gates with their decomposition; Replace the H gates with P V P (already implemented using `resolve_gates`); Implement P V P using gate teleportation outlined in [1]; ```. The final output is a quantum circuit only using qubit initialisations, CNOT and conditional measurements/correction. Once that is complete, maybe another addition can be a conversion to the topological model and visualizations. This is a work in progress. TODO; ------; [ ] Fix code errors; [ ] Write tests; [ ] Update examples and docs. References; ----------; .. [1] arXiv:1509.03962v1 [quant-ph]",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/603:1695,test,tests,1695,https://qutip.org,https://github.com/qutip/qutip/pull/603,1,['test'],['tests']
Testability,"A simple test shows that the Clenshaw method from @Vutshi does not give results consistant with the other solvers. This slipped through because the test suite was not testing this new method against random operators. ``` python; N = 20; xvec = np.linspace(-10, 10, 128); for i in range(3):; rho = rand_dm(N). Wfft = wigner(rho, xvec, xvec, method='iterative'); W = wigner(rho, xvec, xvec, method='clenshaw'). Wdiff = abs(W - Wfft); print(np.sum(abs(Wdiff))); ```. With the above code, I am getting differences on the order of one, where as the other methods all are close on the order of 1e-12 or so. I will revert back to the old iterative method until this is resolved.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/526:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/issues/526,3,['test'],"['test', 'testing']"
Testability,A sticky situation given that Anaconda is MKL by default now. I agree that perhaps the tests can be skipped if MKL is present. This can easily be checked via the qutip.settings.has_mkl property,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/484#issuecomment-222047139:87,test,tests,87,https://qutip.org,https://github.com/qutip/qutip/issues/484#issuecomment-222047139,1,['test'],['tests']
Testability,AILED [ 33%]; qutip/tests/test_qobjevo.py::test_QobjEvo_call_args FAILED [ 36%]; qutip/tests/test_qobjevo.py::test_QobjEvo_step_coeff PASSED [ 38%]; qutip/tests/test_qobjevo.py::test_QobjEvo_copy PASSED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================;,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7339,test,tests,7339,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"AILURES ===================================; > ___________________________ test_MCSimpleConstStates ___________________________; > @pytest.mark.slow; > def test_MCSimpleConstStates():; > ""Monte-carlo: Constant H with constant collapse (states)""; > N = 10 # number of basis states to consider; > a = destroy(N); > H = a.dag() * a; > psi0 = basis(N, 9) # initial state; > kappa = 0.2 # coupling to oscillator; > c_op_list = [np.sqrt(kappa) * a]; > tlist = np.linspace(0, 10, 100); > mcdata = mcsolve(H, psi0, tlist, c_op_list, [], ntraj=ntraj,; > options=Options(average_states=True)); > assert_(len(mcdata.states) == len(tlist)); > assert_(isinstance(mcdata.states[0], Qobj)); > expt = expect(a.dag() * a, mcdata.states); > actual_answer = 9.0 * np.exp(-kappa * tlist); > avg_diff = np.mean(abs(actual_answer - expt) / actual_answer); > > assert_equal(avg_diff < mc_error, True); > E AssertionError: ; > E Items are not equal:; > E ACTUAL: False; > E DESIRED: True; > ../../../../miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.5.0.dev0+4512014-py3.7-macosx-10.9-x86_64.egg/qutip/tests/test_mcsolve.py:240: AssertionError; > ----------------------------- Captured stdout call -----------------------------; > 10.0%. Run time: 2.25s. Est. time left: 00:00:00:20; > 20.0%. Run time: 4.93s. Est. time left: 00:00:00:19; > 30.0%. Run time: 6.67s. Est. time left: 00:00:00:15; > 40.0%. Run time: 8.10s. Est. time left: 00:00:00:12; > 50.0%. Run time: 10.13s. Est. time left: 00:00:00:10; > 60.0%. Run time: 12.40s. Est. time left: 00:00:00:08; > 70.0%. Run time: 14.97s. Est. time left: 00:00:00:06; > 80.0%. Run time: 16.57s. Est. time left: 00:00:00:04; > 90.0%. Run time: 18.81s. Est. time left: 00:00:00:02; > 100.0%. Run time: 20.29s. Est. time left: 00:00:00:00; > Total run time: 20.34s; > ---------- coverage: platform darwin, python 3.7.7-final-0 -----------; > Name ; > ```; > ; > Restart the tests. I agree with you, it's annoying. On my personal Travis CI dashboard, all the ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896:1167,test,test-environment,1167,https://qutip.org,https://github.com/qutip/qutip/pull/1209#issuecomment-607478896,1,['test'],['test-environment']
Testability,"AVAILABLE; openblas_lapack_info:; NOT AVAILABLE; openblas_clapack_info:; NOT AVAILABLE; flame_info:; NOT AVAILABLE; atlas_3_10_threads_info:; NOT AVAILABLE; atlas_3_10_info:; NOT AVAILABLE; atlas_threads_info:; NOT AVAILABLE; atlas_info:; NOT AVAILABLE; lapack_info:; libraries = ['lapack', 'lapack']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = f77; lapack_opt_info:; libraries = ['lapack', 'lapack', 'blas', 'blas']; library_dirs = ['/usr/lib/x86_64-linux-gnu']; language = c; define_macros = [('NO_ATLAS_INFO', 1), ('HAVE_CBLAS', None)]; include_dirs = ['/usr/local/include', '/usr/include']; Supported SIMD extensions in this NumPy install:; baseline = SSE,SSE2,SSE3; found = SSSE3,SSE41,POPCNT,SSE42,AVX,F16C,FMA3,AVX2; not found = AVX512F,AVX512CD,AVX512_SKX,AVX512_CLX,AVX512_CNL,AVX512_ICL; ```; So numpy itself marks openblas_info as NOT AVAILABLE (evidently using a build-time test, not runtime, which arguably is a pity). It seems to me that `hasattr` in qutip's BLAS support tests is returning false positives and false negatives. It indicates if the attribute was defined, even though it might be empty. Would it be better to replace; ```; hasattr(config,'openblas_info'); ```; in qutip/utilities.py with; ```; hasattr(config,'openblas_info') and config.openblas_info; ```; likewise for blas_mkl_info (not mkl_info) ?. This would be similar to numpy's own usage in `np.show_config()` (i.e. `np.__config__.py.show()`), which [uses](https://github.com/numpy/numpy/blob/3b7672ebd16982b661b8fbcabac80158662a8784/numpy/__config__.py.in#L116) `if not info_dict` to print ""NOT AVAILABLE"". ### Code to Reproduce the Bug. ```shell; import numpy; numpy.show_config(). import qutip; qutip.about(); ```. ### Code Output. ```shell; $ python3; Python 3.10.9 (main, Dec 7 2022, 13:47:07) [GCC 12.2.0] on linux; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import numpy; >>> numpy.show_config(); ...; blas_mkl_info:; NOT AVAILABLE; ...; openblas_info:; NOT AV",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2053:3539,test,tests,3539,https://qutip.org,https://github.com/qutip/qutip/issues/2053,1,['test'],['tests']
Testability,"About pickling. `QobjEvo` doesn't contain any cython only data and cython autopickling is working fine.; There is a test for it. (But not for windows, there is still a risk there).; But function used in `linear_map` or in coefficient etc. may cause problem.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1481#issuecomment-815141272:116,test,test,116,https://qutip.org,https://github.com/qutip/qutip/pull/1481#issuecomment-815141272,1,['test'],['test']
Testability,"About tests being very slow, I saw the following notice when I open the details:; ```; Please be aware travis-ci.org will be shutting down in several weeks, with all accounts migrating to travis-ci.com. Please stay tuned here for more information.; ```; I think we are still on `travis-ci.org`? Is this related to us? Maybe ""switch CI to GitHub Actions"" is more pressing than we thought.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1465#issuecomment-805920788:6,test,tests,6,https://qutip.org,https://github.com/qutip/qutip/pull/1465#issuecomment-805920788,1,['test'],['tests']
Testability,Activate mcsolve tests on Windows in QuTiP 5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948:17,test,tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1948,1,['test'],['tests']
Testability,Activate remaining tests on Windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/1854,1,['test'],['tests']
Testability,Actually I am almost certain that they fixed the buffering issue (or at least one of the buffering issues if this happens to persist in your tests). It was discussed here: https://github.com/ipython/ipython/issues/5779,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/121#issuecomment-63221901:141,test,tests,141,https://qutip.org,https://github.com/qutip/qutip/pull/121#issuecomment-63221901,1,['test'],['tests']
Testability,"Actually I'm going to close this for now pending further discussion on #1433. The failing tests are using the implicit array coercion, which we may or may not want, but regardless, there's a bigger decision to be made.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1434#issuecomment-772656180:90,test,tests,90,https://qutip.org,https://github.com/qutip/qutip/pull/1434#issuecomment-772656180,1,['test'],['tests']
Testability,"Actually let's also leave it open until I can determine if it is indeed scipy. After installing scipy with pip as the scipy folks suggested, the example I had in that issue is now working, but I get the same integration error with qutip and same tests failing. When I get time, i'll try to distill down the qutip error to a scipy error and post an update. Hopefully the main issue is just a scipy error, but would be good to confirm.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1205435786:246,test,tests,246,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1205435786,1,['test'],['tests']
Testability,"Actually this does not pass tests, so it is being reverted in #567.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/565#issuecomment-264031521:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/565#issuecomment-264031521,1,['test'],['tests']
Testability,"Actually, I suppose it's much easier than I was fearing - we don't actually need to test the degeneracy or anything. We know they're the eigenvectors of a Hermitian matrix, so taken all together they should span the Hilbert space. Testing that they're all linearly independent I think is a bit of an easier test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299#issuecomment-649527490:84,test,test,84,https://qutip.org,https://github.com/qutip/qutip/issues/1299#issuecomment-649527490,3,"['Test', 'test']","['Testing', 'test']"
Testability,"Actually, with further testing it seems that the scipy method is better at larger sized matrices. Should probably stick with that one. The older qutip algorithm is closer to the matlab version per 3015b, and returns similar results. It seems the scipy one is a bit better behaved at larger sizes.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/464#issuecomment-210640593:23,test,testing,23,https://qutip.org,https://github.com/qutip/qutip/pull/464#issuecomment-210640593,1,['test'],['testing']
Testability,Add GitHub actions test run on windows-latest.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1849:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1849,2,['test'],['test']
Testability,Add QuTiP to test.pypi.org,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/992:13,test,test,13,https://qutip.org,https://github.com/qutip/qutip/issues/992,1,['test'],['test']
Testability,Add `Qobj.logm`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1992:10,log,logm,10,https://qutip.org,https://github.com/qutip/qutip/pull/1992,1,['log'],['logm']
Testability,Add `Qobj.logm` for dev.major,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1993:10,log,logm,10,https://qutip.org,https://github.com/qutip/qutip/pull/1993,1,['log'],['logm']
Testability,Add `kron_dense` specialization to dispatch and test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1646:48,test,test,48,https://qutip.org,https://github.com/qutip/qutip/pull/1646,1,['test'],['test']
Testability,Add `test` subcommand to setup.py and fix exception in settings.py,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/429:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/pull/429,1,['test'],['test']
Testability,"Add a `Coefficient` object to encapsulate the coefficients of the QobjEvo.; `Coefficient`s replace qobjevo's codegen. Their advantages are; - Coefficient are always 'compiled'. String are compiled to cython code at initialization.; - Have cython decorator: taking the conjugate does no longer require new compilation.; - String coefficient are saved to reuse with basic pattern matching: ""cos(a*t)"" and ""cos( w1 *t )"" will use the same compiled object. This object is compiled once and kept between session.; - Cleaner compilation using `setuptools` instead of a monkey patched `pyximport`.; - `QobjEvo` is always compiled.; - `ObjeEvo` does not need to keep track of type making the code simpler. There are shims to make `Pulse` and qip tests work since they used `QobjEvo.tlist` and `QobjEvo.ops.coeff`.; @BoxiLi, the new QobjEvo can be added even if coefficient's tlist are different, but you cannot get back the tlist and the array from them. Also for _step_func_coeff, before the first time, `Coefficient` return the first value of the array, not 0 as expected in pulse.py.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1336:738,test,tests,738,https://qutip.org,https://github.com/qutip/qutip/pull/1336,1,['test'],['tests']
Testability,Add a linux python 3.8 test; Fix MacOS python version to 3.7 as our test environment result in conflict on 3.8; * Does not fix mac tests' errors,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1125:23,test,test,23,https://qutip.org,https://github.com/qutip/qutip/pull/1125,3,['test'],"['test', 'tests']"
Testability,Add a numpy 1.22 and Python 3.10 build to the CI test matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1777:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/1777,1,['test'],['test']
Testability,Add a suggestion for tests in the PR template,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1220:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1220,1,['test'],['tests']
Testability,Add a test for progress bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2150:6,test,test,6,https://qutip.org,https://github.com/qutip/qutip/pull/2150,1,['test'],['test']
Testability,"Add a wrapper for function returning `Qobj` to be treated as `QobjEvo`: `QobjEvoFunc`; Wrapped function have access to all method of `QobjEvo` therefore only one version of the code should be sufficient for time dependant problems using both list format and function.; Any callable is considered a function, allowing for class method etc. The new function `qobjevo_maker` can take any valid time dependant quantum object and make it a `QobjEvo` like object. Added wrapper for function using the old `rhs_with_state` format and using no `args`. . Tests for `QobjEvoFunc` have been added but not for `qobjevo_maker`. Solver are not updated to use it yet. @ajgpitch I added it last minute in stochastic, but did not tried it yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1123:546,Test,Tests,546,https://qutip.org,https://github.com/qutip/qutip/pull/1123,1,['Test'],['Tests']
Testability,Add additional unit tests + updated release and install notes,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/280:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/280,1,['test'],['tests']
Testability,Add familly package tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2504:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/2504,1,['test'],['tests']
Testability,Add hypothesis tests for data operators.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1957:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/pull/1957,1,['test'],['tests']
Testability,"Add new ODE integration methods:; `vern7`, `vern9` and `diag`. Verner 's methods are high order Runge-Kutta method with variable step size and dense output. (http://people.math.sfu.ca/~jverner/). Having our own qutip's implementation allow the state to be a qutip data-layer, instead of numpy arrays, which could be useful for gpu or auto differentiation. . `diag` method diagonalize a constant system and solve it analytically, similar to what `essolve` did.; The states are numpy arrays since we don't have vectorized functions for our data layer. Benchmark of these method are included with those of #1643.; Verner method tend to be faster than `adams` method for smaller systems and `diag` is also very fast. For a diff with #1643, see https://github.com/Ericgig/qutip/pull/5.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1644:550,Benchmark,Benchmark,550,https://qutip.org,https://github.com/qutip/qutip/pull/1644,1,['Benchmark'],['Benchmark']
Testability,Add rerun for simdiag tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2067:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/2067,1,['test'],['tests']
Testability,Add support for specifying the numpy version in the CI test matrix.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1696:55,test,test,55,https://qutip.org,https://github.com/qutip/qutip/pull/1696,1,['test'],['test']
Testability,Add test for half integer for clebsch,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1218:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/1218,1,['test'],['test']
Testability,Add test for orbital,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/issues/1839,1,['test'],['test']
Testability,Add test for qsave/qload,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/324:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/324,1,['test'],['test']
Testability,Add tests for previously untested function in states and operators and parametrize some of the existing tests.; Should improve the coverall by about 100 lines. **Changelog**; Improve test coverage of states and operators functions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1578:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/1578,3,['test'],"['test', 'tests']"
Testability,Add tests for progress_bar,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/2127,1,['test'],['tests']
Testability,Add tests for simdiags,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1681:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/1681,1,['test'],['tests']
Testability,Add the matrix logrithm method logm() to Qobj.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1990:15,log,logrithm,15,https://qutip.org,https://github.com/qutip/qutip/issues/1990,2,['log'],"['logm', 'logrithm']"
Testability,Add towncrier draft build of changelog to CI tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1946:45,test,tests,45,https://qutip.org,https://github.com/qutip/qutip/pull/1946,1,['test'],['tests']
Testability,Add unit test for gate resolution,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/145:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/pull/145,1,['test'],['test']
Testability,Added Test classes to the be importable from tests/core/data,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723:6,Test,Test,6,https://qutip.org,https://github.com/qutip/qutip/pull/1723,2,"['Test', 'test']","['Test', 'tests']"
Testability,Added by @Ericgig during 4.4.0 release. See https://test.pypi.org/project/qutip/. Closing it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/992#issuecomment-510879704:52,test,test,52,https://qutip.org,https://github.com/qutip/qutip/issues/992#issuecomment-510879704,1,['test'],['test']
Testability,Added expect tests for data layer.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1626:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/pull/1626,1,['test'],['tests']
Testability,"Added new logging and settings support, started refactoring debugs.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/248:10,log,logging,10,https://qutip.org,https://github.com/qutip/qutip/pull/248,1,['log'],['logging']
Testability,Added ptrace specialisation tests and fixed a bug for ptrace_dense.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1746:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/1746,1,['test'],['tests']
Testability,Added test to verify,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/194:6,test,test,6,https://qutip.org,https://github.com/qutip/qutip/pull/194,1,['test'],['test']
Testability,"Added the function as discussed here, along with two new unit tests to ensure it agrees with either `tensor()` or `super_tensor()`, as appropriate for the input arguments.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-57089321:62,test,tests,62,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-57089321,1,['test'],['tests']
Testability,"Added the option to import string to python instead of compiling to cython for QobjEvo.; This is default if no cython, or set manually if cython available. `QobjEvoInstance.use_cython = False`; Added test and updated docstring.; Work in parallel.; Did not do any benchmark yet.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1082:200,test,test,200,https://qutip.org,https://github.com/qutip/qutip/pull/1082,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Added transparency values as a parameter to the add methods. **Checklist**; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; Adding the option to set point and vector transparency in bloch.py. **Related issues or PRs**; fix #1287 . **Changelog**; added optional transparency alpha value as a parameter in bloch.add_points(), bloch.add_vectors() and bloch.add_states()",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1836:93,test,tests,93,https://qutip.org,https://github.com/qutip/qutip/pull/1836,1,['test'],['tests']
Testability,Adding a commit that should fix tests in 4.5.1.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1191:32,test,tests,32,https://qutip.org,https://github.com/qutip/qutip/pull/1191,1,['test'],['tests']
Testability,"Additionally, from looking through your comments it appears that something; definitely went weird with formatting and/or merging. I'll comb back; through and make to fix any of these issues before I request a re-review. On Wed, Jun 28, 2023, 3:43 PM Eric Giguère ***@***.***> wrote:. > ***@***.**** requested changes on this pull request.; >; > Are you sure there was not a bad merge somewhere?; > Some code is duplicated, seemingly important variable are never used, a; > typo in the import of flimesolve.py stop it from being imported, etc...; >; > Please add tests covering most case and have them passing.; >; > Also the separation of task is not well used. We split the data container,; > ODE integration and the physics, but here they are mixed together...; >; > The quicksolve is the ""diag"" integrator, you don't have to re implement it; > here. You could just set it as the default method since the rhs is always; > constant (but it seems like this is not desired when time_sense != 0).; > ------------------------------; >; > In doc/guide/scripts/floquet_ex3.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245104940>:; >; > > @@ -35,7 +35,6 @@ def noise_spectrum(omega):; > # Alternatively; > psi_t = output.states[idx]; > p_ex[idx] = qutip.expect(qutip.num(2), psi_t); > -; >; > Why did you erase this line?; > ------------------------------; >; > In VERSION; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245585117>:; >; > > @@ -1 +1 @@; > -5.0.0.dev; > +5.0.0a1; >; > The version change when we do a release, not with each PR.; > ------------------------------; >; > In qutip/solver/correlation.py; > <https://github.com/qutip/qutip/pull/2186#discussion_r1245591365>:; >; > > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; >; > ⬇️ Suggested change; >; > - G1 = correlation_3op(; > - solver, state0, [0], taulist, None, a_op.dag(), a_op)[0]; > + G1 = correlation_3op(; > + solver, state0, [0], taulist, None, a_op.dag(), a_op",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839:562,test,tests,562,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1612047839,1,['test'],['tests']
Testability,Adds target kwarg to average_gate_fidelity; unit tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/364:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/364,1,['test'],['tests']
Testability,"After fixing the fortran issue here is the error:. # . ## ERROR: Test Qobj: trunc_neg works for non-diagonal opers. Traceback (most recent call last):; File ""/home/travis/miniconda/envs/test-environment/lib/python3.5/site-packages/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/travis/build/qutip/qutip/qutip/tests/test_qobj.py"", line 816, in case; pos_qobj = qobj.trunc_neg(method=method); File ""/home/travis/build/qutip/qutip/qutip/qobj.py"", line 1246, in trunc_neg; if eigvals[idx] + acc / (idx + 1) >= 0:; IndexError: index 2 is out of bounds for axis 0 with size 2",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/417#issuecomment-181509701:65,Test,Test,65,https://qutip.org,https://github.com/qutip/qutip/pull/417#issuecomment-181509701,4,"['Test', 'test']","['Test', 'test', 'test-environment', 'tests']"
Testability,"After installing qutip via conda (conda install qutip) on Mac 10.15.1 High Sierra, I ran the testing script using:. >> import qutip.testing as qt ; >> qt.run(). I am getting the following error: . Qobj subtraction ... python(4259,0x119a26dc0) malloc: Incorrect checksum for freed object 0x7fdbb05c5910: probably modified after being freed.; Corrupt value: 0x3ff0000000000000; python(4259,0x119a26dc0) malloc: *** set a breakpoint in malloc_error_break to debug; Abort trap: 6. Does anyone know what is causing this, how to fix it, or what kinds of problems it might cause later? Thank you!. Sacha",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1120:93,test,testing,93,https://qutip.org,https://github.com/qutip/qutip/issues/1120,2,['test'],['testing']
Testability,"After installing qutip, in order to test qutip installation, I type ""python"" in terminal and then type ""import qutip.testing as qt"", getteing to the following error. import qutip.testing as qt; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; ModuleNotFoundError: No module named 'qutip'; >>> qt.run(); Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; NameError: name 'qt' is not defined. If anyone can help to solve the problem?; Thanks",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1391:36,test,test,36,https://qutip.org,https://github.com/qutip/qutip/issues/1391,3,['test'],"['test', 'testing']"
Testability,"After investigating a bit more, I think this may be related to 3a5ab42200b3f1851343081614064e67be3b02bf, in that SCS and CVXOPT are not yet compatible with MKL, and require OpenBLAS instead. If I locally use pip to install SCS and CVXOPT with an MKL-enabled conda env, then importing cvxpy fails due to undefined symbols. On the other hand, if I use the Omnia conda channel to install cvxopt and scs, then `dnorm()` works, but the conda env switches to use OpenBLAS. To resolve the build failures, then, I'd suggest temporarily marking the tests as skipped if MKL is enabled.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/484#issuecomment-222046697:540,test,tests,540,https://qutip.org,https://github.com/qutip/qutip/issues/484#issuecomment-222046697,1,['test'],['tests']
Testability,"After merging #1097, the following error is given on a Linux machine from travis CI ; AttributeError: 'QobjEvo' object has no attribute 'coeff_files'; 1656Exception in thread Thread-546:; 1657Traceback (most recent call last):; 1658 File ""/Users/travis/miniconda/envs/test-environment/lib/python3.7/threading.py"", line 926, in _bootstrap_inner; 1659 self.run()",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1084#issuecomment-543262454:268,test,test-environment,268,https://qutip.org,https://github.com/qutip/qutip/issues/1084#issuecomment-543262454,1,['test'],['test-environment']
Testability,After shifting to `core` the tests have started interfering with each other. It would be better if we could keep the `numpy_backend` class to qutip not `core`.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2490#issuecomment-2235671204:29,test,tests,29,https://qutip.org,https://github.com/qutip/qutip/pull/2490#issuecomment-2235671204,1,['test'],['tests']
Testability,"After you created a fork to work on #1242, a different PR (#1226) was merged into `master`. It so happens that #1242 and #1226 don't conflict so that merge succeeded, but the new changes you're now trying to make do. This is fundamentally a true merge conflict and so unfortunately there's no fancy way around it, though it could have been avoided if you'd matched the state of our `master` before beginning work here, and it would be a bit easier for you for future PRs to branch off before starting work (GitHub has [some nice material about this workflow](https://guides.github.com/introduction/flow/)). I've rebased your PR onto our `master` and fixed the resulting merge conflict for you. You should _immediately, without doing anything else_ reset your branch state to match mine, and then force-push your changes to GitHub to update the PR. To do this, do; ```bash; git remote add jakelishman https://www.github.com/jakelishman/qutip.git; git fetch jakelishman; git checkout master; git reset --hard jakelishman/Canoming-circuit-patch; git push --force; git remote remove jakelishman; ```; This will destroy anything on `master` that you may have but haven't yet pushed. You should do it anyway, because a lot of the underlying structure has changed from underneath you, and your changes aren't consistent with the current state of `circuit.py`. Please also note that the tests are failing after your modifications in (the current) 10e457e.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121:1379,test,tests,1379,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-630932121,1,['test'],['tests']
Testability,"Again, I am not sure why some unrelated tests are failing !",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-649089741:40,test,tests,40,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-649089741,1,['test'],['tests']
Testability,Agreed that it is tricky to test. I mostly wanted the tests because the nice error messages might contain bugs. Happy to let this slide for now though.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2304#issuecomment-1908915742:28,test,test,28,https://qutip.org,https://github.com/qutip/qutip/pull/2304#issuecomment-1908915742,2,['test'],"['test', 'tests']"
Testability,"Agreed, it is a bit sticky. I'd guess that since the MKL switchover was relatively recent, they haven't had time to get things working. At any rate, I'll go on and make a PR that skips the relevant tests then.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/484#issuecomment-222050661:198,test,tests,198,https://qutip.org,https://github.com/qutip/qutip/issues/484#issuecomment-222050661,1,['test'],['tests']
Testability,"Ah great! Thanks! So I probably used parameterization with the circuit in a non-recommended way. The source code is correct, there is just something wrong with the test. I'll try coming up with a solution for that test later.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755#issuecomment-1007381880:164,test,test,164,https://qutip.org,https://github.com/qutip/qutip/issues/1755#issuecomment-1007381880,2,['test'],['test']
Testability,"Ah yes, that constraint was there to prevent accidentally using `qutip-qip` with `qutip@dev.major` because the support was only added a few weeks ago. Only the master branch of `qutip-qip` support this. So this basically prevents installing the `qutip@dev.major` and the released `qutip-qip` at the same time. One has to install `qutip-qip@master` to test them. This also means that adding `qutip-qip` as an optional package right now does not make much sense. Probably we can drop this. To test it on GitHub action we need to install `qutip-qip@master` for now and test the importation. @hodgestar Is that ok? Otherwise, I can try to get out a new release of `qutip-qip` in a day or so. Just to update the change log and click the button.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1920#issuecomment-1147618381:351,test,test,351,https://qutip.org,https://github.com/qutip/qutip/pull/1920#issuecomment-1147618381,4,"['log', 'test']","['log', 'test']"
Testability,"Ah, are you using an Apple M1?. SciPy support for Apple M1 is still rather unreliable (this is more a function of the lack of availability of Apple M1 VMs for open source projects to run tests on than any fault of SciPy's). Perhaps you are encountering one of these two recent bugs:. - https://github.com/scipy/scipy/issues/16767; - https://github.com/scipy/scipy/issues/16875. The bugs are closed but I don't know if new versions have been released. Various work arounds have been suggested in those issue reports. Hopefully one of them will work for your case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1987#issuecomment-1229182134:187,test,tests,187,https://qutip.org,https://github.com/qutip/qutip/issues/1987#issuecomment-1229182134,1,['test'],['tests']
Testability,"Ah, got it. Anyway, this PR is orthogonal to #332, it's just that I only noticed this problem in trying to write test cases and documentation for the new functionality in that PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/337#issuecomment-125637210:113,test,test,113,https://qutip.org,https://github.com/qutip/qutip/pull/337#issuecomment-125637210,1,['test'],['test']
Testability,"Ah, nice catch thanks, and thanks for the super clear repro. We're overhauling the solvers for QuTiP 5.0, which will include a lot more rigorous input checking on entry, but also it uses far safer low-level datatypes that would catch this shape mismatch in the C layer (even though the `dims` _should_ have been checked by `mesolve`). I'll check the other solvers and patch in a sanity test - probably after these lines: https://github.com/qutip/qutip/blob/d5e305513d9186df74beee4fd8da680e89f29d15/qutip/mesolve.py#L259-L261; we can just insert a test; ```python; if rho0.dims[0] != rho0.dims[1]:; raise ValueError(; ""input state must be a pure state or square density matrix""; ); ```. There may also be other segfaults lurking if you use a Python function to generate a time-dependent `Qobj` value in the Liouvillian or the expectation operators, but right now you're unlikely to use that form (because it's slow as anything). The bug slips through because we unsafely pass off a matrix down to C code (where we currently don't have sanity checks) without first verifying that it is a valid shape in Python space - the C code is working as designed, so there shouldn't be problems with correct inputs. Removing `c_ops` causes `mesolve` to delegate to `sesolve` which presumably is better at its type-checking, and I expect that a small dimension size working is likely just `malloc` having slack in the memory it gives us for small sizes or small requests being allocated into the special pre-allocated store.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169:386,test,test,386,https://qutip.org,https://github.com/qutip/qutip/issues/1456#issuecomment-791925169,2,['test'],['test']
Testability,"Ah, the test does not fail because I forgot to make psi0 a density matrix before passing it to sesolve. Fixing.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1907#issuecomment-1148793484:8,test,test,8,https://qutip.org,https://github.com/qutip/qutip/pull/1907#issuecomment-1148793484,1,['test'],['test']
Testability,"Ah, this test failure reminds me I need to merge up the 4.6.0 release to `dev.major`. Documentation fix is good, merging (though ironically there's a typo in your PR name!)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1494#issuecomment-818721204:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/pull/1494#issuecomment-818721204,1,['test'],['test']
Testability,"Ah, we seem to have rediscovered #1202. We also see #1190, but that doesn't cause tests to fail.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1854#issuecomment-1097181695:82,test,tests,82,https://qutip.org,https://github.com/qutip/qutip/pull/1854#issuecomment-1097181695,1,['test'],['tests']
Testability,"Ah, you are right! It seems to be all tests using the ODE solvers are failing.; Indeed mesolve and sesolve tests are also failing (with the same integration error).; There are lots of tests which fail, I think most likely every test that calls a solver... I just did some basic testing with scipy's integrate.ode and this seems to have the same kind of issues, so I think as you mention, the issue lies with the solver...meaning it probably isn't installed correctly.; Similar issues seem to have been raised for scipy previously (e.g. https://github.com/scipy/scipy/issues/15077), though I don't see any currently open. I also updated scipy today and it didn't change anything unfortunately. I guess this issue can be closed, if it's just a scipy problem?; Thanks!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1204170858:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1204170858,5,['test'],"['test', 'testing', 'tests']"
Testability,Ahh well then there is no more issues with this. Just waiting for the minor changes to the mcsolver tests to clear.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425710:100,test,tests,100,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425710,1,['test'],['tests']
Testability,"Ahh, you're right. I never managed to get it to work right before now, but I just tried again and managed to get `DeprecationWarning` to show up in all of `python warn.py`, direct calls from the IPython terminal and from Jupyter notebooks. I think perhaps I learned about stacklevel _after_ the last time I tried to get that to work. My reading of the docs before that had always just ended up with me assuming that somebody using a library interactively was an ""end-user"", so `FutureWarning` was appropriate. I'll change this PR when I've got time - I needed to fix up a few warning controls in tests before it was ready anyway.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449:596,test,tests,596,https://qutip.org,https://github.com/qutip/qutip/pull/1480#issuecomment-814036449,1,['test'],['tests']
Testability,"All deprecation warnings issued by numpy during the tests have now been fixed, resolving #381 ; The motivation was to try and make it more clear when and why issue #430 arises",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/434:52,test,tests,52,https://qutip.org,https://github.com/qutip/qutip/pull/434,1,['test'],['tests']
Testability,"All looks good to me. Thanks a lot for changing all of that - this is all clearly good stuff and should in principle be merged. We should the Linux tests again after #1381 is merged because there is Linux-specific code in the changes that needs to be tested (the tests fail for unrelated reasons at the moment). I can't see any reason why the changes here should cause any true test failures, though - it's more a formality.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648:148,test,tests,148,https://qutip.org,https://github.com/qutip/qutip/pull/1380#issuecomment-727103648,4,['test'],"['test', 'tested', 'tests']"
Testability,All of the individual terms in the dense version of the time-dependent BR solver are now tested and working. Now I need to write the codegen module. A sparse version is just a simple extension once the codegen is done.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/676#issuecomment-295576774:89,test,tested,89,https://qutip.org,https://github.com/qutip/qutip/pull/676#issuecomment-295576774,1,['test'],['tested']
Testability,All pulseoptim tests now passing on Windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/604:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/pull/604,1,['test'],['tests']
Testability,All test runs passed. @Ericgig I'm going to merge so that other PRs can merge this in. Should I also create a PR for dev.major?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2013#issuecomment-1318533244:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/2013#issuecomment-1318533244,1,['test'],['test']
Testability,All tests passing again -- ready for another review!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1948#issuecomment-1171606033:4,test,tests,4,https://qutip.org,https://github.com/qutip/qutip/pull/1948#issuecomment-1171606033,1,['test'],['tests']
Testability,"All the documentation tests have passed, so merging.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1940#issuecomment-1168835644:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/1940#issuecomment-1168835644,1,['test'],['tests']
Testability,"All the same, I'd very much like to further reduce warnings. I've literally had Firefox crash trying to load the entire Travis logs.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/433#issuecomment-185792948:127,log,logs,127,https://qutip.org,https://github.com/qutip/qutip/issues/433#issuecomment-185792948,1,['log'],['logs']
Testability,Allow repeating tests without quitting Python,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2538:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/2538,1,['test'],['tests']
Testability,"Allow rerunning of dnorm tests, refactor test_metrics.py",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1490:25,test,tests,25,https://qutip.org,https://github.com/qutip/qutip/pull/1490,1,['test'],['tests']
Testability,Also added more isherm testing.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/773:23,test,testing,23,https://qutip.org,https://github.com/qutip/qutip/pull/773,1,['test'],['testing']
Testability,"Also fixed dense matmul to use `zgemv` for `oper@ket`.; In the `oper @ ket` [matmul scaling benchmarks](https://qutip.org/qutip-benchmark/s_matmul.html), `Dense` is slower than `numpy`. Our dense data layer used `zgemm` for both matrix @ matrix and matrix @ vector operations. By switching to `zgemv` we get closer to numpy's times: faster in `C` format but slower in `Fortran`.; `bra@oper` still use `zgemm`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2008#issuecomment-1297569831:92,benchmark,benchmarks,92,https://qutip.org,https://github.com/qutip/qutip/pull/2008#issuecomment-1297569831,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,Also to test fix for #672,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/746#issuecomment-323369260:8,test,test,8,https://qutip.org,https://github.com/qutip/qutip/pull/746#issuecomment-323369260,1,['test'],['test']
Testability,"Also, I run these codes on Jupyter notebook but on my PC's terminal, I could successfully import ``qubit.testing`` and ``qubit``.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1650#issuecomment-912900577:105,test,testing,105,https://qutip.org,https://github.com/qutip/qutip/issues/1650#issuecomment-912900577,1,['test'],['testing']
Testability,"Also, I was just quickly searching for a quick-and-dirty ""obviously correct"" method of doing the partial trace to use as the test case (rather than keeping around a legacy Cython version just to test against), and found [this StackOverflow answer](https://scicomp.stackexchange.com/questions/27496/calculating-partial-trace-of-array-in-numpy) which has like 3 people telling someone ""don't do it yourself, just use QuTiP""! Pretty neat!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1325#issuecomment-663126648:125,test,test,125,https://qutip.org,https://github.com/qutip/qutip/issues/1325#issuecomment-663126648,2,['test'],['test']
Testability,"Also, all tests are failing. The one I checked showed:; ```; ImportError: No module named dicke; ```; I assume that this will affect all the builds",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370370268:10,test,tests,10,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370370268,1,['test'],['tests']
Testability,"Also, never before, that I can recall, the tests were running on both the push and pull request. Hope this is working but not just by chance. Congrats @Ericgig on this too.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/969#issuecomment-500649942:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/969#issuecomment-500649942,1,['test'],['tests']
Testability,"Also, nonlinear functions, such as the Von Neumann entropy of the steadystate can be wrong. . Any test on expected values of collective spin operators the steadystate, compared with the steadystate calculated in the full basis, give correct results.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/993#issuecomment-500331700:98,test,test,98,https://qutip.org,https://github.com/qutip/qutip/issues/993#issuecomment-500331700,1,['test'],['test']
Testability,"Also, once you're done, leave this PR without merging and I'll tidy up the commit history. We shouldn't have things like 374debd (a wrong-way merge) because they really mess with the mainline of the history, and make things harder to traceback, and I can collapse all your changes into one ""logical"" change once it's working.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1583#issuecomment-878151587:291,log,logical,291,https://qutip.org,https://github.com/qutip/qutip/pull/1583#issuecomment-878151587,1,['log'],['logical']
Testability,"Also, sorry for stepping on your toes on the `test_metrics` thing - that really wasn't intentional, and I was only looking at it more because there are a few historic problems with dnorm testing that I'd remembered later. I didn't mean to cut you off from what you were doing, and had you had more work done on it, I'd have worked with you to merge the two together rather than suggesting you throw yours out.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1487#issuecomment-815046001:187,test,testing,187,https://qutip.org,https://github.com/qutip/qutip/pull/1487#issuecomment-815046001,1,['test'],['testing']
Testability,"Also, the code needs to work with both python 2 and 3. See the failing Travis tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/141#issuecomment-44496711:78,test,tests,78,https://qutip.org,https://github.com/qutip/qutip/pull/141#issuecomment-44496711,1,['test'],['tests']
Testability,"Also, this added test runs in less than 1 second on my machine. Even an overloaded CI machine isn't going to take excessively long on it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1498#issuecomment-822691415:17,test,test,17,https://qutip.org,https://github.com/qutip/qutip/pull/1498#issuecomment-822691415,1,['test'],['test']
Testability,"Also, this change will duplicate all the tests in QuTiP for the same reason that you originally said you didn't want to import individual tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1723#issuecomment-976543231:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/pull/1723#issuecomment-976543231,2,['test'],['tests']
Testability,"Also, we can ""solve"" the testing issue by forcing the environment variable `QUTIP_NUM_PROCESSES=2` before importing QuTiP, I think.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1470#issuecomment-808299865:25,test,testing,25,https://qutip.org,https://github.com/qutip/qutip/issues/1470#issuecomment-808299865,1,['test'],['testing']
Testability,"Also, when you run `pytest` on the file (`pytest qutip/tests/test_qobj.py` from the git root), it moans a lot about `np.matrix` being essentially deprecated, and `Qobj` uses it as a data representation in some cases. I haven't touched that, but I also didn't want to hide the warning.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576056391:55,test,tests,55,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576056391,1,['test'],['tests']
Testability,"Also: I don't think CodeClimate actually supports skipping the tests when we call it as an action like this. We'd have to set it up to run on CI runner under our control (e.g. on GitHub Actions), and then configure a method of skipping tests within that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506#issuecomment-826814927:63,test,tests,63,https://qutip.org,https://github.com/qutip/qutip/pull/1506#issuecomment-826814927,2,['test'],['tests']
Testability,An IPython notebook example should be provided for using this time-dependent option.; A test should also be added.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/396#issuecomment-155855645:88,test,test,88,https://qutip.org,https://github.com/qutip/qutip/pull/396#issuecomment-155855645,1,['test'],['test']
Testability,An example is given in this gist https://gist.github.com/nathanshammah/f96f6c1db5c323243a4729467cb7351f. ; Some performance benchmarking was done in PR #1024.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1032#issuecomment-533145168:124,benchmark,benchmarking,124,https://qutip.org,https://github.com/qutip/qutip/issues/1032#issuecomment-533145168,1,['benchmark'],['benchmarking']
Testability,An unrelated test fails after this is merged. It doesn't make sense to me...; https://github.com/qutip/qutip/runs/3008054620,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1603#issuecomment-875530358:13,test,test,13,https://qutip.org,https://github.com/qutip/qutip/pull/1603#issuecomment-875530358,1,['test'],['test']
Testability,Anaconda uploaded new packages.; spare eigs test now passing.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/871#issuecomment-394186354:44,test,test,44,https://qutip.org,https://github.com/qutip/qutip/issues/871#issuecomment-394186354,1,['test'],['test']
Testability,"And then the MacOS tests went and failed when this was merged in, so there is still an issue",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/957#issuecomment-469745755:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/957#issuecomment-469745755,1,['test'],['tests']
Testability,Any ideas?; - drop the NOMKL tests?. I'll try and raise with anaconda,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/871#issuecomment-393906852:29,test,tests,29,https://qutip.org,https://github.com/qutip/qutip/issues/871#issuecomment-393906852,1,['test'],['tests']
Testability,"Any reason why it was not seen in the tests earlier? . Also, I am working on the SS section of the docs tonight. Should be done before tomorrow. On Jul 16, 2014, at 9:29 PM, Robert Johansson notifications@github.com wrote:. > That's the hope. Still having some troubles with this though.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/197#issuecomment-49158166:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/197#issuecomment-49158166,1,['test'],['tests']
Testability,"Any update on the failing tests, @araza6?; This is the print message from CI build:; ```; ==================================== ERRORS ====================================; _____________ ERROR collecting tests/test_basis_transformation.py ______________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/_pytest/python.py:513: in _importtestmodule; mod = self.fspath.pyimport(ensuresyspath=importmode); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:176: in <module>; from qutip.qobj import *; E File ""/home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/qobj.py"", line 2026; E """"""; E Checks whether qobj is a valid density matrix; E """"""; E ; E ; E ^; E IndentationError: expected an indented block; ___________________ ERROR collecting tests/test_brmesolve.py ___________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting tests/test_brmesolve_td.py __________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __I",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:26,test,tests,26,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,7,['test'],"['test-environment', 'tests']"
Testability,"Applied fixes for Python 3, and now the new unit tests run locally on both 2.7 and 3.4, so I expect that the CI checks should pass as well.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/358#issuecomment-128549325:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/358#issuecomment-128549325,1,['test'],['tests']
Testability,"Apply your squeeze operator to a state vector and check the norm of the; output. Is the operator really unitary?. -P. On Mar 13, 2017 11:48 AM, ""ziofil"" <notifications@github.com> wrote:. > When I tried to use the qutip.squeeze function for my simulations I; > noticed that something was off. Upon further investigation I found out that; > the output is not a truncated version of the single-mode squeezing unitary,; > but rather the matrix exponential of the truncated generator. These are; > *very* different things!; >; > Am I right in assuming that the most useful matrix would be the truncated; > unitary? If that's the case, the current method to compute it is wrong. To; > compute the right matrix one can use the disentangling formula for SU(1,1); > (formula (31) here <http://aip.scitation.org/doi/pdf/10.1063/1.3413923>):; >; > def squeeze(n,z):; > s0 = np.exp(1j*np.angle(z))*np.tanh(abs(z)); > s1 = -2*np.log(np.cosh(abs(z))); > s2 = -np.exp(-1j*np.angle(z))*np.tanh(abs(z)); >; > L = s0*0.5*(qt.create(n)*qt.create(n)); > K = s1*(0.5*qt.num(n)+0.25*qt.identity(n)); > R = s2*0.5*(qt.destroy(n)*qt.destroy(n)); >; > return (L.expm())*(K.expm())*(R.expm()); >; > As you can see, this definition does *not* depend on the truncation; > parameter. Specifically, the upper-left portion of the matrix that; > qutip.squeeze outputs converges to my squeeze function for large n.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/issues/661>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ABMPqdPPw6WOAYMpYw_kA9pRxVhgVyxIks5rlYF9gaJpZM4MbmLX>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/661#issuecomment-286216795:917,log,log,917,https://qutip.org,https://github.com/qutip/qutip/issues/661#issuecomment-286216795,1,['log'],['log']
Testability,Are you still working on a test?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1177#issuecomment-600798812:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/pull/1177#issuecomment-600798812,1,['test'],['test']
Testability,"Arne,. Do you still have the code where the eigenvalue solver breaks down for the Liouvillian? I am starting to work on the matrix balancing functions and would like something known to cause trouble to test on. Cheers,. Paul",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/16#issuecomment-34325017:202,test,test,202,https://qutip.org,https://github.com/qutip/qutip/issues/16#issuecomment-34325017,1,['test'],['test']
Testability,"As @BoxiLi noted, Mac tests are passing for this PR. I ran them twice to check and they passed. This would solve issue #963.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1042#issuecomment-511349101:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/1042#issuecomment-511349101,1,['test'],['tests']
Testability,"As I understand it, the only way to avoid needing to touch `MANIFEST.in` is to not have files distributed with the test suite (or to have the temporary files by `*.py`, since `setup.py` automatically recognises them). That's not really a pytest thing, it's a `setuptools` one. I don't think there's a problem distributing files as part of the tests. You can add a line which says; ```; recursive-include qutip/tests/qasm_files *.qasm; ```; to `MANIFEST.in`, and that should hopefully fix the problem. You won't have the problem locally, because you'll be running `./setup.py develop`, which ""installs"" in-place, so you don't notice the fact that you've missed files from the manifest. In the tests, it runs `./setup.py install`, which does the copy, missing files which aren't in the manifest. Boxi: I'm not certain what more you'd like to do with fixtures here. Fixtures are good for setup and tear down, parametrisation and sharing resources (like network connections), but I'm not certain what further benefit you get for a test function which is testing whether it can open a known file, read it, and construct the expected output. I think Sidhant is already doing some nice parametrisation of his tests, from what I see. Sidhant: I added a comment on the exception test, since pytest gives us an easier-to-read context manager you can use. It's also typically better practice to handle file paths like I did in that (using the overloaded `/` operator with `pathlib.Path`, or `os.path.join`) rather than manually putting in slashes. Windows _usually_ will do the right thing now with slashes, but it's better to let Python handle it for us.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1291#issuecomment-656255156:115,test,test,115,https://qutip.org,https://github.com/qutip/qutip/pull/1291#issuecomment-656255156,8,['test'],"['test', 'testing', 'tests']"
Testability,"As a note: `qutip.vector_to_operator` is part of the implementation of superoperators. The ""vector"" in the name refers to the idea that a superoperator in a Hilbert space can be represented as a vector on a different Hilbert space which comprises of two copies of the original space tensor-producted together. It doesn't refer to a ""vector"" in the sense of a ""ket"". The difference was introduced in c62a8e9, which is the amalgamated commit encompassing all the discussion in #1098. `qutip.vector_to_operator` expects to receive an argument whose `dims` parameter is of the form `[operator_dims , [1]]`, where `operator_dims` is the dimensions of a regular operator (for example `[[2], [2]]` for a single qubit Hilbert space, or `[[2, 2], [2, 2]]` for an operator acting on a Hilbert space with two qubits in. The exception occurs because `vector_to_operator` attempts to access the two elements of the `operator_dims` array to discover the output shape. Since there is an insufficient number of lists for it to access, it just ends up reading the dimensions of the first two elements of the tensor product, and `np.prod` (used to calculate the output shape) doesn't complain when passed scalars. Notice that running the code with `nb_qubits = 1` will cause an `IndexError`, as there are insufficient tensor-product elements. The immediate solution for your code is to use `qutip.ket2dm`, which converts a ket into a density matrix. I think this is what you're actually trying to do. For a fix, there are two points:; 1. The fix is simply to test that the input dimensions are of the correct form, rather than assuming; this will allow us to provide a more descriptive error.; 2. Perhaps worth considering is moving the super-operator functionality in a sub-module `qutip.super`, and not importing all the functions into the main namespace. This might help reduce user confusion going forwards, especially since most people aren't using the superoperator formalism.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011:1541,test,test,1541,https://qutip.org,https://github.com/qutip/qutip/issues/1204#issuecomment-600792011,1,['test'],['test']
Testability,"As a test, I've used this PR from the RTD build for [qinfer/python-qinfer](https://github.com/QInfer/python-qinfer), since the RTD virtualenv is by default rather restrictive. The modified setup.py works for that build process, which I think is a fairly good sign.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/489#issuecomment-224199565:5,test,test,5,https://qutip.org,https://github.com/qutip/qutip/pull/489#issuecomment-224199565,1,['test'],['test']
Testability,"As described in https://github.com/qutip/qutip/issues/723#issuecomment-318100070 I have tested this and it seems to fix #723, so I would suggest we merge this",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/731#issuecomment-318101980:88,test,tested,88,https://qutip.org,https://github.com/qutip/qutip/pull/731#issuecomment-318101980,1,['test'],['tested']
Testability,"As discussed in #1673, this PR is an initial draft of what instrument support could look like to get feedback and discussion going on the API and functionality. As such, code style, documentation, unit testing and so forth still need to be addressed (see check list below). **Checklist**; Thank you for contributing to QuTiP! Please make sure you have finished the following tasks before opening the PR. - [x] Please read [Contributing to QuTiP Development](http://qutip.org/docs/latest/development/contributing.html); - [ ] Contributions to qutip should follow the [pep8 style](https://www.python.org/dev/peps/pep-0008/).; You can use [pycodestyle](http://pycodestyle.pycqa.org/en/latest/index.html) to check your code automatically; - [ ] Please add tests to cover your changes if applicable.; - [ ] If the behavior of the code has changed or new feature has been added, please also update the documentation in the `doc` folder, and the [notebook](https://github.com/qutip/qutip-notebooks). Feel free to ask if you are not sure. Delete this checklist after you have completed all the tasks. If you have not finished them all, you can also open a [Draft Pull Request](https://github.blog/2019-02-14-introducing-draft-pull-requests/) to let the others know this on-going work and keep this checklist in the PR description. **Description**; This PR adds a new class, `QInstrument`, that wraps a decomposition of a quantum instrument into completely positive trace non-increasing maps (subnormalized channels). This new class can be used to predict measurement outcomes and post-measurement states for a variety of different quantum systems:. ```python; >>> import qutip; >>> H = qutip.operations.hadamard_transform(); >>> ket_plus = H * qutip.basis(2, 0); >>> z_instrument = qutip.QInstrument.basis_measurement(2); >>> (H * z_instrument)(ket_plus); {Seq(0,): Outcome(probability=0.5000000000000002, output_state=Quantum object: dims = [[2], [2]], shape = (2, 2), type = oper, isherm = True; Qobj data =",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1687:202,test,testing,202,https://qutip.org,https://github.com/qutip/qutip/pull/1687,2,['test'],"['testing', 'tests']"
Testability,"As far as the ""known issues"" go, these are discussed in #484.; I don't think the issues I saw recently are the same as in that one.; ```; Intel MKL FATAL ERROR: Cannot load libmkl_avx.so or libmkl_def.so.; ```; I think this is just an MKL install problem.; It's difficult to test at the moment, as I don't seem to be able to create a conda env with mkl blas",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/872#issuecomment-394304854:275,test,test,275,https://qutip.org,https://github.com/qutip/qutip/issues/872#issuecomment-394304854,1,['test'],['test']
Testability,"As for the failing travis tests, don't use xrange since it is not python 3 compatible.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/90#issuecomment-37786575:26,test,tests,26,https://qutip.org,https://github.com/qutip/qutip/pull/90#issuecomment-37786575,1,['test'],['tests']
Testability,"As it is quite a short (but efficient!) change, we can keep it both in qutip and in qutip-qip. Also, I remember this function is also used in the control module (also for testing I think). So we need it in qutip anyway. Eventually, I think it is best to keep these commonly used function in `qutip.operator` and import it to qutip-qip",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1688#issuecomment-942198552:171,test,testing,171,https://qutip.org,https://github.com/qutip/qutip/pull/1688#issuecomment-942198552,1,['test'],['testing']
Testability,"As long as we do some test runs without MPI, I think this is fine. Perhaps we could also document somewhere that `mpi` is needed -- maybe just by raising a nice exception if it needs to be imported but isn't available?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2319#issuecomment-1930820031:22,test,test,22,https://qutip.org,https://github.com/qutip/qutip/pull/2319#issuecomment-1930820031,1,['test'],['test']
Testability,As mentioned in #872 the MKL builds are currently installing with openblas numpy.; This implements the suggestion from; ContinuumIO/anaconda-issues#9519; Initial local tests look fine,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/876#issuecomment-394727727:168,test,tests,168,https://qutip.org,https://github.com/qutip/qutip/pull/876#issuecomment-394727727,1,['test'],['tests']
Testability,"As mentioned previous I have patched out the cython check and installs in **init** in the (windows, qutip-3.1.0) conda package that I built. I have put cython as a build requirement, but not a runtime requirement. I install in an environment without cython and then run tests:; 289 tests in 690s; 7 skip, 6 errors, 1 fail. Then I install cython and mingwpy and run tests again:; 320 tests 2371s; 7 skip, 10 errors, 1 fail. I think the time dependent string format tests fail. Not sure, and will not investigate further at the moment. Would only make if they also fail in GitHub version, for which I have not tested on Windows. At no point do the extensions in qutip/cy get built again. So I think it is not necessary to pyximport.install in the **init**.py; I think we should change the message to a warning, like we have for matplotlib, to say something like 'no Cython, string type time-dependent solvers will not run'. It seems to make sense to allow people to install and use parts of the library even if they can't get a C compiler working for them. I don't understand why some tests do not run without cython. For instance, no mcsolve tests run without cython installed. I can't see cython imported in the mcsolve file. I will look into this further.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/448#issuecomment-192570921:270,test,tests,270,https://qutip.org,https://github.com/qutip/qutip/issues/448#issuecomment-192570921,8,['test'],"['tested', 'tests']"
Testability,"As noted by @ajgpitch in #476, Travis CI is currently raising a large number of errors, as every call to `dnorm()` results in a `SolverError`. I am in the process of investigating this problem, but have not yet been able to reproduce the test failures locally. It appears as though the failures only occur when MKL and CVXPY are used together, but I am able to use MKL and CVXPY together fine locally.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/484:238,test,test,238,https://qutip.org,https://github.com/qutip/qutip/issues/484,1,['test'],['test']
Testability,"As promised in #95, I added some new test cases to make sure that for all binary arithmetic operations and all superreps, the superrep metadata is preserved.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99:37,test,test,37,https://qutip.org,https://github.com/qutip/qutip/pull/99,1,['test'],['test']
Testability,As there are comments on this I will merge now. ; I have tested extensively with the work I am doing on hsolve,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/446#issuecomment-192106154:57,test,tested,57,https://qutip.org,https://github.com/qutip/qutip/pull/446#issuecomment-192106154,1,['test'],['tested']
Testability,"As this was a simple bug fix and all tested passed, then merging now.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/563#issuecomment-263523282:37,test,tested,37,https://qutip.org,https://github.com/qutip/qutip/pull/563#issuecomment-263523282,1,['test'],['tested']
Testability,As we don't have a fix for #963 then this PR skips those tests on the `average_gate_fidelity` on Mac for the time being,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1034:57,test,tests,57,https://qutip.org,https://github.com/qutip/qutip/pull/1034,1,['test'],['tests']
Testability,"At least two tests have been observed to generate unrelated failures:; - `qutip.tests.test_subsys_apply`; - `qutip.tests.test_fidelity2`. I haven't seen any others recently (at least, not since resolving #425), but if we observe any, we should add them here so that we can be sure everything works for 3.2.0.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/430#issuecomment-184077054:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/issues/430#issuecomment-184077054,3,['test'],['tests']
Testability,Attempt to solve issue with false errors in Qobj division tests on 32 bit system by using comparison that is more robust to floating-point errors.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/306:58,test,tests,58,https://qutip.org,https://github.com/qutip/qutip/pull/306,1,['test'],['tests']
Testability,BUG: Loosen tolerance on td-BR states test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/722:38,test,test,38,https://qutip.org,https://github.com/qutip/qutip/pull/722,1,['test'],['test']
Testability,BUG: Loosen tolerances on some random tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/636:38,test,tests,38,https://qutip.org,https://github.com/qutip/qutip/pull/636,1,['test'],['tests']
Testability,BUG: br_states test still too tight,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/730:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/730,1,['test'],['test']
Testability,BUG: dnorm tests sporadically failing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/880:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/issues/880,1,['test'],['tests']
Testability,BUG:Fix for broken Travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/547:26,test,tests,26,https://qutip.org,https://github.com/qutip/qutip/pull/547,1,['test'],['tests']
Testability,"Before:; <img width=""863"" alt=""Screen Shot 2022-11-03 at 4 19 25 PM"" src=""https://user-images.githubusercontent.com/113714002/199853312-2f6880df-09dc-43cc-9c0b-8e1daa15a49f.png"">. After:; <img width=""704"" alt=""Screen Shot 2022-11-03 at 4 17 55 PM"" src=""https://user-images.githubusercontent.com/113714002/199853348-0eb3e5b2-8f20-496f-96fe-d97d27860f93.png"">. Been playing around with the `$` placement but can't seem to get it right, it returns the output like the first picture. Help here is appreciated, it's very slow testing this having to recompile after small changes (noob here). Edit: <s>Also note I'm not quite getting the newline correct. Doesn't quite behave the way I would expect latex to behave.</s>. Edit 2: Was using a wrong version for the second picture, the correct one does respect the; <img width=""512"" alt=""Screen Shot 2022-11-03 at 4 49 01 PM"" src=""https://user-images.githubusercontent.com/113714002/199856352-825db071-fb7e-4567-b4db-c6d71b8a16df.png"">; newline; Also just read I should be using develop mode, so hopefully testing different things will be faster.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2017#issuecomment-1302788072:521,test,testing,521,https://qutip.org,https://github.com/qutip/qutip/pull/2017#issuecomment-1302788072,2,['test'],['testing']
Testability,Benchmark restructuring,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/14:0,Benchmark,Benchmark,0,https://qutip.org,https://github.com/qutip/qutip/pull/14,1,['Benchmark'],['Benchmark']
Testability,Benchmarks:. http://nbviewer.ipython.org/gist/jrjohansson/b3212a496ec1651fca76,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/184#issuecomment-48688527:0,Benchmark,Benchmarks,0,https://qutip.org,https://github.com/qutip/qutip/pull/184#issuecomment-48688527,1,['Benchmark'],['Benchmarks']
Testability,"Better way to permute Qobj. Captured a bug where old permute didn't permute dimensions.; UPDATE: Now works for super objects (including operator-bra); Benchmark (permute 1st and last qubits):; <img width=""520"" alt=""unknown-1"" src=""https://cloud.githubusercontent.com/assets/4971779/26755844/811dbbce-4896-11e7-89b8-c11251b5a550.png"">; <img width=""520"" alt=""unknown-2"" src=""https://cloud.githubusercontent.com/assets/4971779/26755847/87cbe928-4896-11e7-8143-73ddcc77cd36.png"">",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/701:151,Benchmark,Benchmark,151,https://qutip.org,https://github.com/qutip/qutip/pull/701,1,['Benchmark'],['Benchmark']
Testability,Both scripts were tested on a fresh installation of 10.10 (no xcode or anything else). Both scripts installed fine and the new python and ipython versions are on the path and can be used immediately.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/279#issuecomment-65925409:18,test,tested,18,https://qutip.org,https://github.com/qutip/qutip/pull/279#issuecomment-65925409,1,['test'],['tested']
Testability,"Both this failure and the one before it are in unrelated tests. For instance, the most recent failure is in `qutip.tests.test_fidelity2`, which rather surprises me as I'd have thought that test case was quite stable.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/428#issuecomment-183608615:57,test,tests,57,https://qutip.org,https://github.com/qutip/qutip/pull/428#issuecomment-183608615,3,['test'],"['test', 'tests']"
Testability,"Brings `dev.major` up-to-date with the current state of master (f995f6f6). Includes nontrivial additional changes to resolve merge conflicts in some nonobvious files, due to the files moving place:. |new file | old file |; |--------------------------|------------------------|; |core/qobj.py | qobj.py (`eigenstates`, `__array_ufunc__`) |; |core/data/kron.pyx | cy/spmath.pyx (`kron`) |; |core/data/ptrace.pyx | qobj.py (`ptrace`) |; |core/data/properties.pyx | cy/spmath.pyx (`isherm`) |; |tests/test_device.py | tests/test_cavityqed.py |; |tests/test_device.py | tests/test_spinchain.py |. The merging of PRs gh-1289 and gh-1337 (overhauling the settings and reset handling on master and dev.major respectively) is handled by taking only the results of gh-1337; in terms of the ""setting reset"" functionality, these two PRs were equivalent but a huge merge-conflict because they achieved the same thing in two completely separate manners.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1453:491,test,tests,491,https://qutip.org,https://github.com/qutip/qutip/pull/1453,4,['test'],['tests']
Testability,"Bumping an old topic with two major new considerations. Number one: Travis is [changing its pricing model for open source software](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing), and generally it seems like [it's going to become unfeasible for us](https://www.jeffgeerling.com/blog/2020/travis-cis-new-pricing-plan-threw-wrench-my-open-source-works). Over the past month or so, queue times on Linux builds have increased massively (from near-instant to up to 90 minutes), and the number of allowed concurrent builds has already limited the amount of testing we are able to do - we don't even have Windows tests because we couldn't fit them in. In around March 2021 we expect the old travis-ci.org that QuTiP is grandfathered onto to shut down completely, forcing us onto the new model on travis-ci.com. Number two: in November 2019, GitHub released their own CI, GitHub Actions. This is (as best as I can tell) completely free for open source, public repositories like QuTiP, and offers access to a large number of Linux, macOS and Windows containers. This completely free period of GitHub Actions might not last forever (you can imagine maybe they're just trying to drive adoption before increasing the cost), but especially with the new time pressure from Travis, this seems like the right choice for now. Our testing set up is fairly straightforward, so migrating to a new CI shouldn't be too difficult. I just wrote (#1429) a GitHub Actions workflow to build and distribute binary releases of QuTiP on Linux/Mac/Windows, and I'm pretty convinced by the power of their CI. It's got an awful lot of flexibility with a _lot_ of customisation so its initial learning curve is a little steep (or maybe I'm just not used to CI tools), but I'm impressed by what's available. I believe it comes with a degree of reusability as well; I think we can define a test as a single ""action"", and then reuse that in the PR-push workflow and the make-distribution workflow.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/959#issuecomment-770455542:565,test,testing,565,https://qutip.org,https://github.com/qutip/qutip/issues/959#issuecomment-770455542,4,['test'],"['test', 'testing', 'tests']"
Testability,"Bumping this because I'm working on `test_metrics.py` and came across it. ## Attempting to isolate. With `cvxpy` and `cvxopt` from conda-forge, I can run all the `dnorm` tests, but as before (see #874, #880, #881) they fail too much of the time. By my rough tests, failure only occurs with any regularity when using `cvxpy` with operator inputs (not supers) of dimension 3 (not 2). I also find that using `dnorm(A, B)` with `A` and `B` drawn from `rand_unitary_haar` has a failure rate of 0.004(1), whereas drawing from `rand_unitary` instead has a failure rate about 3 times higher of 0.012(2). I'm sure if you have more (i.e. > 0) knowledge of the Haar measure than I do, that presumably gives you more information on what makes it likely for the optimisation to fail. Also, using `dnorm(A)` (i.e. taking `B` to be 0) produced no failures in 4000 tests of the same function. ## Testing strategy. Since each `dnorm` test is repeated 10 times and there's only one offending test, that's a current failure rate of about 4%. The offending test actually isn't even testing what it's supposed to test - it supposedly tests that special cases that are handled by QuTiP agree with the optimisations done by `cvxpy`, except that the offender isn't a handled special case. I'll remove that for now. I will also convert `dnorm` tests to quietly xfail if the optimisation fails, but cause a suite failure if they cause a proper `AssertionError`. ## Future. Since we have a new major version in the future, we do have the option to issue a `FutureWarning` and remove `dnorm` if we want to do so, but if so, we should get the warning out as soon as possible. It's probably worth mentioning that by-and-large, it seems like `dnorm` does actually work in most cases. > This has been the final straw. We have tried to keep dnorm supported. - @ajgpitch . Suspect Alex has some thoughts on this.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/874#issuecomment-634292336:170,test,tests,170,https://qutip.org,https://github.com/qutip/qutip/issues/874#issuecomment-634292336,12,"['Assert', 'Test', 'test']","['AssertionError', 'Testing', 'test', 'testing', 'tests']"
Testability,"But again, the debug flag is not set at runtime so the logger will always be WARN using the above suggestions. It would have to be set inside of a function that is called to properly check the debug flag.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/261#issuecomment-64150730:55,log,logger,55,https://qutip.org,https://github.com/qutip/qutip/pull/261#issuecomment-64150730,1,['log'],['logger']
Testability,"But also, yeah, this is exactly the change I meant when I wrote that comment in the other issue. Unless something's broken in the interrim, it definitely works because I tested the swap fairly heavily when I wrote it, which is also why there's some particularly weird templated code in `core/data/src/matmul_csr_vector.{hpp,cpp}`: https://github.com/qutip/qutip/blob/fbb7fad5bc205910228db622d90601c82db45e4b/qutip/core/data/src/matmul_csr_vector.cpp#L114-L148",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-979886946:170,test,tested,170,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-979886946,1,['test'],['tested']
Testability,"By (3), I meant removing the csr specialisation from the dispatched function and call the function directly when not all values are desired. When `Qobj.eigenstates` is called, the sparse operation being not available, it would defer to the dense code, no warning nor error. ; We can't fully trust `eigs_csr` as it is, so I would like to make it fully working (1) or remove it from the dispatch (3). Yes (2) can be seen as separate enhancement. For me (5) was purely documentation, a warning is fine, but when `sparse` is specified, it would use `eigh_csr` and too bad if wrong results are obtained... (3) would also mean removing the; ```; if isinstance(L.data, _data.CSR) and not sparse:; L = L.to(_data.Dense); evals, evecs = _data.eigs(L.data); ```; since they are no longer used (`spectrum.py`, `floquet.py`, `qobj.py`) and reviewing the tests cases.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1998#issuecomment-1472768466:842,test,tests,842,https://qutip.org,https://github.com/qutip/qutip/issues/1998#issuecomment-1472768466,1,['test'],['tests']
Testability,"Can confirm that on running qutip.testing.run( ) locally, it prints a one line description of tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-574215718:34,test,testing,34,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-574215718,2,['test'],"['testing', 'tests']"
Testability,"Can now give unitary operator as initial `psi0` in sesolve. This way we solve the Schrodinger operator equation.; Also added tests for all the sesolve methods. Kind of a bit of waste of time, as `propagator` does almost exactly the same thing. However, I think it does add a bit of completeness. The tests at least should be valuable",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/832:125,test,tests,125,https://qutip.org,https://github.com/qutip/qutip/pull/832,2,['test'],['tests']
Testability,"Can you fully show your build process, and did this work with a previous version of QuTiP? It builds fine for me from pip sdist on all major platforms with a simple; ```; pip install qutip; ```; and the sdist of 4.5.2 seems to be missing the same file. Officially we don't support building with OpenMP from pip sdist (only git), but to be fair, it should have worked. In the interests of better semantics, can you change the new line in `MANIFEST.in` to; ```; graft qutip/**/src; ```; Technically there's only the one file that doesn't get tagged in (I hope), but logically the principle is that anything in a `src` directory should be distributed in the `sdist`.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343:564,log,logically,564,https://qutip.org,https://github.com/qutip/qutip/pull/1449#issuecomment-782608343,1,['log'],['logically']
Testability,"Can you use `Qobj.expm()` with the identity `n ** x == (exp(log(n)) ** x == exp(x * log(n))`, which is true for any positive real `n`?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2370#issuecomment-2027673583:60,log,log,60,https://qutip.org,https://github.com/qutip/qutip/issues/2370#issuecomment-2027673583,2,['log'],['log']
Testability,"Certainly the `zheevr` segfaults on my machine with scipy < 1.5 and _doesn't_ with scipy 1.5, but that's hardly a perfect test - segfaults are pretty intermittent at the best of times. It's easy to test that all eigenvectors are mathematically actually eigenvectors with the correct eigenvalue, but the harder bit is ensuring that we've actually found _all_ the eigenvectors, especially when we're dealing with a lot of eigenvalues that look like `(0, 0, 0, 1e-17, -1.1e-17, ...)`. Degeneracy is a more annoying to check that we've got the full spanning set of the degenerate basis, and it's even harder when we've got eigenvalues like `1e-17` which is almost certainly actually degenerate with 0, but hasn't been detected as such. This is roughly what I was trying to get at with method 2.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1299#issuecomment-649525934:122,test,test,122,https://qutip.org,https://github.com/qutip/qutip/issues/1299#issuecomment-649525934,2,['test'],['test']
Testability,Change tests/test_metrics.py so that only dnorm tests are skipped if cvxpy is not installed,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1704:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/1704,2,['test'],['tests']
Testability,"Changed `clebsch` to work with non-int inputs. Test file shows it working for both int and float inputs, giving expected results.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1177:47,Test,Test,47,https://qutip.org,https://github.com/qutip/qutip/pull/1177,1,['Test'],['Test']
Testability,"Changed the notation for `type=` comparisons to `issuper`, as suggested. All unit tests pass locally, so I suspect that the Travis build should work.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/241#issuecomment-57070290:82,test,tests,82,https://qutip.org,https://github.com/qutip/qutip/pull/241#issuecomment-57070290,1,['test'],['tests']
Testability,"Changes to the test:; ```; case_1= repr(QobjEvo([qeye(3), lambda t: t])); expected_repr_1= 'QobjEvo: dims=[[3], [3]], shape=(3, 3), type=oper, superrep=None, isconstant=False, num_elements=1'; assert case_1 == expected_repr_1. case_2= repr(QobjEvo(qeye(2))); expected_repr_2= 'QobjEvo: dims=[[2], [2]], shape=(2, 2), type=oper, superrep=None, isconstant=True, num_elements=1'; assert case_2 == expected_repr_2; ; case_3= repr(QobjEvo(basis(5, 2))); expected_repr_3= 'QobjEvo: dims=[[5], [1]], shape=(5, 1), type=ket, superrep=None, isconstant=True, num_elements=1'; assert case_3 == expected_repr_3. X = sigmax(); S = spre(X) * spost(X.dag()); case_4= repr(QobjEvo(to_choi(S))); expected_repr_4= 'QobjEvo: dims=[[[2], [2]], [[2], [2]]], shape=(4, 4), type=super, superrep=choi, isconstant=True, num_elements=1'; assert case_4 == expected_repr_4. case_5= repr(QobjEvo([[qeye(4), lambda t: t], [qeye(4), lambda t: t]], compress=False)); expected_repr_5= 'QobjEvo: dims=[[4], [4]], shape=(4, 4), type=oper, superrep=None, isconstant=False, num_elements=2'; assert case_5 == expected_repr_5; ```. Changes to the `cython` code have also been undone. @Ericgig @AGaliciaMartinez Kindly let me know if there are any more changes to be done.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308:15,test,test,15,https://qutip.org,https://github.com/qutip/qutip/pull/2111#issuecomment-1472176308,6,"['assert', 'test']","['assert', 'test']"
Testability,"Clarification of some variable naming to attempt to link with literature and also be usable without having to read the papers.; Switch to a class module. In line with recent work from @arnelg ; Moved to nonmarkov folder, as this is a non-Markovian approx method. Old file remains with deprecated function, just in case anyone was using it. This now links to the new instance method.; Many efficiency improvements (now up to 10x faster). Test added. . Will provide a notebook example soon. Then some documentation.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/455:437,Test,Test,437,https://qutip.org,https://github.com/qutip/qutip/pull/455,1,['Test'],['Test']
Testability,Clean up test namespace,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/497:9,test,test,9,https://qutip.org,https://github.com/qutip/qutip/pull/497,1,['test'],['test']
Testability,"Cleaned up some minor things in `tests/test_meoslve.py`, like removing trailing white spaces etc.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404#issuecomment-165446733:33,test,tests,33,https://qutip.org,https://github.com/qutip/qutip/pull/404#issuecomment-165446733,1,['test'],['tests']
Testability,Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb. **Related issues or PRs**; * fixes #1639; * see https://github.com/The-Compiler/pytest-xvfb/issues/11 for the discussion of this situation when using pytest-xvfb. **Changelog**; Close figure plots explicitly during tests so that the test suite passes when run headless under Xvfb.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1648:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/1648,4,['test'],"['test', 'tests']"
Testability,Close matplotlib figure windows cleanly in tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1648:43,test,tests,43,https://qutip.org,https://github.com/qutip/qutip/pull/1648,1,['test'],['tests']
Testability,"Come to think of it, neither `eseries` nor `essolve` have significant tests, and a quick `grep` through shows that `eseries` is completely untested, and `essolve` has only one very basic test.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1262#issuecomment-628261967:70,test,tests,70,https://qutip.org,https://github.com/qutip/qutip/issues/1262#issuecomment-628261967,2,['test'],"['test', 'tests']"
Testability,"Commit #bea29a1 breaks some tests since it refactors some attribute names to follow PEP8 snake_case standard (i.e., qubit.qit.circuit.N ->qubit.qit.circuit.n_qubits )",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1212#issuecomment-603441970:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/1212#issuecomment-603441970,1,['test'],['tests']
Testability,"Computed error 1.08705544e-07, tol 1e-7... The initial ket in `rand_ket(2)`. I believe that with `nosetest`, the random seed was kept between test file. One of our early test would fix the seed and all following tests would be deterministic. With `pytest` the seed is probably reset at each file. We could loosen the tolerance. Ideally we would get the stats on the error first. Maybe `pytest` has a support for test that pass 99% of the time.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1249#issuecomment-625283606:142,test,test,142,https://qutip.org,https://github.com/qutip/qutip/pull/1249#issuecomment-625283606,4,['test'],"['test', 'tests']"
Testability,"Concerning the failed test: I suspect this is because the test temporarily uses almost 1Gb of memory.; Can you confirm this as a potential issue? In that case, I could change the test to reduce memory usage.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/934#issuecomment-561549347:22,test,test,22,https://qutip.org,https://github.com/qutip/qutip/pull/934#issuecomment-561549347,3,['test'],['test']
Testability,"Confirmation needed: https://github.com/numfocus/gsoc/issues/396; Google is not happy with our idea lists.; ; ; 1. Be sure to include whether the project is a 175 hour (medium sized) or 350 hour (large project). If it can be either, please state that-per idea. ; 2. `Your Ideas Page URL should be accessible to all and not require login. --- (Covered)`; 3. As we state in the Defining a Project Idea List section of the Mentor guide, please provide the following information for each idea:; a) a project title/description ; b) more detailed description of the project (2-5+ sentences) ; c) expected outcomes ; d) skills required/preferred ; e) possible mentors ; f) expected size of project (175 or 350 hour) ; g) an easy, medium or hard difficulty rating of each project.; ; ; If you want to be selected this year I strongly suggest you make sure your Project Ideas list meets the above requirements ASAP.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1815:331,log,login,331,https://qutip.org,https://github.com/qutip/qutip/issues/1815,1,['log'],['login']
Testability,Confirming that the only tests that are failing currently are the `brmesolve` related tests. The previous commit fixed one failure in the coefficient tests.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1727#issuecomment-1050000793:25,test,tests,25,https://qutip.org,https://github.com/qutip/qutip/pull/1727#issuecomment-1050000793,3,['test'],['tests']
Testability,"Consider what you're doing from a statistical sense here. If everything works correctly, then you're effectively trying a two-tail hypothesis test that your test binomial distribution has a probability of 0.25, given you made `n` observations of it. The analytic success rate of your test is then; ```python; import scipy.stats; def success(n, p, tol):; dist = scipy.stats.binom(n, p); return dist.cdf(n * (p+tol)) - dist.cdf(n * (p-tol)); ```; where `success(4096, 0.25, 0.02)` is 99.67%. Since there are 5 independent runs on Travis, that's equivalent to a failure rate of 1.6% on every single CI run, which is several orders of magnitude too high. It's probably just luck that it was Python 3.8 on both occasions - it's a one-in-five chance that in two failing CI runs, it was the same setup both times. You have to consider what is most appropriate to fix the test, and what you can reasonably test in ~1 second of runtime. You don't want to increase the tolerance too much, because then you can get a lot of false positives even if something is broken. If you can bump the number of runs up to 100,000 and set the tolerance at 0.01, you'll have a per-test failure rate of ~3e-13, which is more like what we'd want. If you keep it at 4096, the tolerance should be more like 0.05 (which is pretty big tbh).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1274#issuecomment-640043626:142,test,test,142,https://qutip.org,https://github.com/qutip/qutip/pull/1274#issuecomment-640043626,6,['test'],['test']
Testability,"Continuing the work of #1164 - this is part two of many more to come, depending on how long I can keep doing this! Of particular note is the first commit in this PR, which registers `pytest.mark.slow` with `pytest` to stop it warning about an unknown mark in use. There are several additional comments and explanations in the expanded commit messages, where I've tried to explain a little bit about bugs I found and reasons for swapping over to certain libraries (e.g. for temporary file handling). I'm in part opening a new PR now so that I can see if the CodeClimate tests are passing. I shouldn't have many pep8 issues because I have a tool to check, but I don't have CodeClimate working locally for things like the complexity (if it even checks them for tests...). I've been really rather aggressively using the parametrisation that `pytest` offers for fixtures, which is cutting out an awful lot of code duplication, and hopefully making it a bit clearer when things are exactly the same. One common theme I'm finding when I'm running these tests is that there's an awful lot of warnings caused by `pyximport`, a part of `Cython`, which is using the Python 2 era `imp` instead of the newer `importlib`. I'm not sure there's anything we can or should do about this, though.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181:569,test,tests,569,https://qutip.org,https://github.com/qutip/qutip/pull/1181,3,['test'],['tests']
Testability,"Control pulse optim tests split into more distinct functions.; This is generally a good idea, and will also help investigate #599",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/600:20,test,tests,20,https://qutip.org,https://github.com/qutip/qutip/pull/600,1,['test'],['tests']
Testability,Convert tests to pytest,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1181,1,['test'],['tests']
Testability,Convert tests to pytest (assorted),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1252:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1252,1,['test'],['tests']
Testability,Convert tests to pytest (gates and cavityqed),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1251:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1251,1,['test'],['tests']
Testability,Convert tests to pytest (solvers and internals),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1250:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/1250,1,['test'],['tests']
Testability,"Copying here the message of the failed build, as I cannot find the message of the successful one in the build history (since it refers to the same PR, it looks like it was not kept). . ```; QuTiP Version: 4.4.0.dev0+109c09d; Numpy Version: 1.16.2; Scipy Version: 1.2.1; Cython Version: 0.29.7; Matplotlib Version: None; Python Version: 3.7.3; Number of CPUs: 2; BLAS Info: INTEL MKL; OPENMP Installed: False; INTEL MKL Ext: True; Platform Info: Darwin (x86_64); Installation path: /Users/travis/miniconda/envs/test-environment/lib/python3.7/site-packages/qutip-4.4.0.dev0+109c09d-py3.7-macosx-10.7-x86_64.egg/qutip; ```; from https://travis-ci.org/qutip/qutip/builds/521534881",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/961#issuecomment-484740433:510,test,test-environment,510,https://qutip.org,https://github.com/qutip/qutip/pull/961#issuecomment-484740433,1,['test'],['test-environment']
Testability,Corrected sign in jmat when called without arguments and the respective tests in test_operators.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/569:72,test,tests,72,https://qutip.org,https://github.com/qutip/qutip/pull/569,1,['test'],['tests']
Testability,Could add a test for `molmer_sorensen` and then we can merge I think.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1028#issuecomment-505095685:12,test,test,12,https://qutip.org,https://github.com/qutip/qutip/pull/1028#issuecomment-505095685,1,['test'],['test']
Testability,Could you fix the import in `test_entropy.py`. It would be better in we don't raise warning in our tests. Otherwise it seems good.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1074#issuecomment-572220880:99,test,tests,99,https://qutip.org,https://github.com/qutip/qutip/pull/1074#issuecomment-572220880,1,['test'],['tests']
Testability,"Could you make 2 changes:; `verbosity=1`, it looks a lot cleaner.; The tests that ""XFAIL"" use `yield` and are skipped as it is not supported by pytest. Could you rewrite them without it. (4 in `test_qobj`, not sure if there are more.) I will be looking at the failing tests in more detail next week.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-570710549:71,test,tests,71,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-570710549,2,['test'],['tests']
Testability,"Could you post a list of the failing tests. If the tensor is right, then the eigensolver seems to work fine. So the ODE solver could be the issue, but in this case, `mesolve` tests should also fail.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1203966750:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1203966750,2,['test'],['tests']
Testability,Could you send me the code you are using for the test.; I find some of the timing strange.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1024#issuecomment-503667653:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/1024#issuecomment-503667653,1,['test'],['test']
Testability,"Could you send the equation for the case where `time_sense` is not `0`. When I try it with a period of `1.0` it give extra term with very low frequencies:; ```; dict_keys([0.0, 4.304872064735899e-09, 1.0157988986038049e-08, 1.1379302858450767e-08, -2.9820390185456766e-09, -4.304872064735899e-09, 5.8531169213021495e-09, 7.074430793714867e-09, -7.286911083281576e-09, -1.0157988986038049e-08, -5.8531169213021495e-09, 1.2213138724127176e-09, -1.3140028004583725e-08, -1.1379302858450767e-08, -7.074430793714867e-09, -1.2213138724127176e-09, -1.4361341876996443e-08, 2.9820390185456766e-09, 7.286911083281576e-09, 1.3140028004583725e-08, 1.4361341876996443e-08]); ```. Is it normal? You did not include any test using `time_sense`. ​",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1631197945:706,test,test,706,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1631197945,1,['test'],['test']
Testability,"Curious cross-reference from [mdanalysis](https://github.com/MDAnalysis/mdanalysis). Their tests trigger the same error (likely again because of pytest-xvfb),; ```; XIO: fatal IO error 0 (Success) on X server "":1029""; ```; Their error is not so simple to clear, since they use the object oriented matplotlib API (e.g. using AxesSubplot `matplotlib.axes._subplots.AxesSubplot`) rather than matplotlib.pyplot. So they don't have access to `plt.close()` and `axes.cla()` doesn't prevent the error, probably for the same reason that `plt.clf()` didn't work for qutip. One point they have which is worth noting: they recommend using the environment variable `MPLBACKEND=agg` for headless CI testing. And sure enough the XIO error does not occur with mdanalysis if `MPLBACKEND=agg` is set. For qutip the `plt.close(fig)` patch is still the best (more robust) solution though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847:91,test,tests,91,https://qutip.org,https://github.com/qutip/qutip/issues/1639#issuecomment-912159847,2,['test'],"['testing', 'tests']"
Testability,Current 106 tests are failing. All seeming 'Metrics' test.; All failing with:; ```; TypeError: __init__() got multiple values for argument 'name'; ```; I will try and reproduce locally,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/872:12,test,tests,12,https://qutip.org,https://github.com/qutip/qutip/issues/872,2,['test'],"['test', 'tests']"
Testability,"Currently the `qutip.measurement.measure_observable` function always uses rank-1 projectors to determine the final state after the measurement. But for obervables with degenerate eigenvalues you might just want to project the state onto a higher-dimensional eigenspace. Eg. measuring the $Z \otimes Z$ operator on the Bell state $\ket{\psi} = 1/\sqrt{2} (\ket{00} + \ket{11})$ using qutip will return either $\ket{00}$ or $\ket{11}$ despite the state being an eigenstate of the observable.; ```; import qutip as qt; import qutip.measurement as meas; import numpy as np. #Prepare Bell state; state = qt.tensor([qt.basis(2, 0)]*2) + qt.tensor([qt.basis(2, 1)]*2); state = state.unit(). # ZZ operator; op = qt.tensor([qt.sigmaz()]*2). result_eigenvalue, final_state = meas.measure(state, op). #Check that the measurement didn't change the state (because it is an eigenstate of the measurement operator); assert np.isclose(qt.fidelity(final_state, state), 1) #fails; ```. I am aware that I can get my intended behaviour by explicity passing the list of projection operators to the `measure` function, but the following enhancement would be very useful:; An option `respect_degenerate_eigenvalues=False` in `qutip.measurement.measure_observable` that groups the eigenstate projectors based on eigenvalue degeneracy. In the above example the rank-2 projectors |00><00| + |11><11| and |01><01| + |10><10| would be used and the Bell state would be preseved during a ZZ measurement.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1800:901,assert,assert,901,https://qutip.org,https://github.com/qutip/qutip/issues/1800,1,['assert'],['assert']
Testability,"Currently, `Qobj` has several attributes which are somewhat expensive to compute:; - `type`; - `isherm`; - `istp`; - `iscp`; - `ishp` (added in #452). Of these, `type` and `isherm` are cached by `Qobj._type` and `Qobj._isherm`, respectively. These should be unified, so that the other three are also cached properly. Moreover, we should add unit tests to make sure that this caching is properly invalidated under at least some reasonably common manipulations. For instance, with the caching of `type`, it can sometimes fail in unexpected ways to build an object up then redefine its `dims`:. ``` python; >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type). >>> rho = ket2dm(bell_state()); >>> rho_out = partial_transpose(rho, [0, 1]); >>> J = 2 * rho_out; >>> print(J.type); >>> J.dims = [[[2], [2]], [[2], [2]]]; >>> J.superrep = 'choi'; >>> print(J.type); ```. The first of these two snippets correctly prints `super`, while the extra `print(J.type)` in the second snippet causes it to cache `type` and print `oper` twice. An experienced user can of course invalidate the cache with `J._type = None`, but that is somewhat counter-intuitive.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/453:346,test,tests,346,https://qutip.org,https://github.com/qutip/qutip/issues/453,1,['test'],['tests']
Testability,"Cython error are quite vague, but there should not be any cython error here.; It could be errors inside a cython function. Could you send the log if it persist.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2351#issuecomment-2004022346:142,log,log,142,https://qutip.org,https://github.com/qutip/qutip/pull/2351#issuecomment-2004022346,1,['log'],['log']
Testability,"Dear @abhisekupadhyaya, ; - test run fine; - could verify the functionality; https://gist.github.com/nathanshammah/6ad41ed5c88aec5f37e10eff16866d37; ![add-qcircuit](https://user-images.githubusercontent.com/14573436/57938271-cf84e780-7902-11e9-989a-6eb253e4f4b8.png); Congratulations for this nice feature and thank you for your contribution. Merging",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/979#issuecomment-493494455:28,test,test,28,https://qutip.org,https://github.com/qutip/qutip/pull/979#issuecomment-493494455,1,['test'],['test']
Testability,"Dear Alex, this can be reviwed by you. I implemented your single line; comments (I thought pep8 recommends wrapping top level functions with two; newlines but I understand that it's just for new classes). In addition, I; changed some bits and added some more tests to make the test coverage 92%. On Tue 6 Mar, 2018, 7:38 PM Alexander Pitchford, <notifications@github.com>; wrote:. > Are we ready for me to check this again?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/753#issuecomment-370738864>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AGpUBASWPWSKscWoJuJ4YyVn3xeC9jlrks5tbmcfgaJpZM4PgbIo>; > .; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-370741295:259,test,tests,259,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-370741295,2,['test'],"['test', 'tests']"
Testability,"Dear Jakelishman. Thank you for your answer. I have changed omega to 1 and still they do not give the same results. ```; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); omegalist = 1; fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * omegalist * fast_ts); bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]); Hanalytic = [[qutip.sigmax(),'2.9e3*pi*cos(2*pi*t)']] # New line; Hanalyticevo = qutip.QobjEvo([[qutip.sigmax(),'2.9e3*pi*cos(2*pi*t)']],tlist=fast_ts) # New line; H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options); analytics = qutip.mesolve(Hanalytic, rho, fast_ts, e_ops=e_ops, options=options) # New line; analyticsevo = qutip.mesolve(Hanalyticevo, rho, times, e_ops=e_ops, options=options) # New line; assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # 3.461676142752336e-05; print(many_times.expect[0][-1]) # 3.4618129999061035e-05; print(bad_times.expect[0][-1]) # -4.546608598637869e-08; print(analytics.expect[0][-1]) # 1.5660042880505376e-09; print(analyticsevo.expect[0][-1]) # -1.0166655253773804e-08",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-819549136:1171,assert,assert,1171,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-819549136,2,['assert'],['assert']
Testability,"Dear Quip-developers and users,. _Sorry for the label ""BUG"" - I thought it was before I could understand it!_. I was trying to go through the smesolver in Qutip, and find it difficult to understand what value to be chosen for dW_factors in smesolver, which is [1.0] by default. The workflow of smesolver is as follows:. - In stochastic.py, the solver options are decided based on user's input and sets the solver to smesolve; - It calls the _sesolve_generic function in stochastic.py ; - _sesolve_generic calls the _single_trajectory function in stochastic.py; - _single_trajectory calls the cy_sesolve_single_trajectory function in ssolver class of cy/stochastic.pyx . - The noise is to be multiplied by the variance of the Wiener noise, which is done in line 482-483 anyway, as given below:. ```; if self.noise_type == 0:; np.random.seed(self.seed[n]); return np.random.randn(self.num_step, self.num_substeps, self.num_dw) *\; np.sqrt(self.dt); ```. - In the function cy_sesolve_single_trajectory, the measurements are computed as follows: ; ```; if sso.store_measurement:; for m_idx, m in enumerate(sso.cm_ops):; m_expt = m.compiled_qobjevo.expect(t, rho_t); measurements[t_idx, m_idx] = m_expt + self.dW_factor[m_idx] * \; sum(noise[t_idx, :, m_idx]) / (self.dt * self.num_substeps); ```; What should be the exact [dW_factors] one should choose when m_ops is explicitly given (for example m_ops=[x])? Should it be sqrt(Gamma), where Gamma is the damping factor? I have tested that dW_factors=[1] generates very strong noise. . Thanks in advance; Sangkha Borah; OIST, Japan",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1387:1473,test,tested,1473,https://qutip.org,https://github.com/qutip/qutip/issues/1387,1,['test'],['tested']
Testability,"Dear qutip admin,. If I wrote the Hamiltonian in terms of analytic function (Hanalytic and Hanayticevo as shown below), I got different answers from using the discretized Hamiltonian obtained by providing the list of Hamiltonian values at discrete times (the variable H) as used previously. May I know how to rectify this problem? Below is the code. ```; import qutip; import numpy as np. fast_ts = np.linspace(0, 1, 1001); omegalist = 2.91e2*fast_ts ; fast_xs = 2.9e3*np.pi * np.cos(2*np.pi * omegalist * fast_ts); bad_interpolation_xs = np.array([fast_xs[0], fast_xs[-1]]); Hanalytic = [[qutip.sigmax(),'2.9e3*pi*cos(2*pi*2.91e2*t**2)']] # New line; Hanalyticevo = qutip.QobjEvo([[qutip.sigmax(),'2.9e3*pi*cos(2*pi*2.91e2*t**2)']],tlist=fast_ts) # New line; H = qutip.QobjEvo([[qutip.sigmax(), fast_xs]], tlist=fast_ts); H_bad = [[qutip.sigmax(), bad_interpolation_xs]]; rho = qutip.basis(2, 0).proj(); times = np.array([0., 1]); e_ops = [qutip.sigmay()]; options = qutip.Options(nsteps=10_000_000, atol=1e-14, rtol=1e-12). two_times = qutip.mesolve(H, rho, times, e_ops=e_ops, options=options); many_times = qutip.mesolve(H, rho, fast_ts, e_ops=e_ops, options=options); bad_times = qutip.mesolve(H_bad, rho, times, e_ops=e_ops, options=options); analytics = qutip.mesolve(Hanalytic, rho, fast_ts, e_ops=e_ops, options=options) # New line; analyticsevo = qutip.mesolve(Hanalyticevo, rho, times, e_ops=e_ops, options=options) # New line; assert len(two_times.expect[0]) == 2; assert len(many_times.expect[0]) == 1001. print(two_times.expect[0][-1]) # -0.59736575; print(many_times.expect[0][-1]) # -0.59736575; print(bad_times.expect[0][-1]) # -4.5466086e-08; print(analytics.expect[0][-1]) # 0.00022501347976357222; print(analyticsevo.expect[0][-1]) # 0.0002250044242251665. ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1472#issuecomment-819524720:1439,assert,assert,1439,https://qutip.org,https://github.com/qutip/qutip/issues/1472#issuecomment-819524720,2,['assert'],['assert']
Testability,Defaulting to using dense solver for small/dense problems and the sparse solver only for large and sparse problems. In my tests the dense solver is actually quite a bit faster up to pretty large system (several hundreds of quantum states at least).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/182:122,test,tests,122,https://qutip.org,https://github.com/qutip/qutip/pull/182,1,['test'],['tests']
Testability,"Denis, Good to hear from you again. It looks like a solid addition! Great to have finally squashed this issue. I ran your code through our unit tests in place of the iterative method and it passed. We can just add additional unit tests similar to the ones we have now for the iterative method.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/461#issuecomment-206692075:144,test,tests,144,https://qutip.org,https://github.com/qutip/qutip/pull/461#issuecomment-206692075,2,['test'],['tests']
Testability,Deprecation Warning in Tests for collections.abc,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1003:23,Test,Tests,23,https://qutip.org,https://github.com/qutip/qutip/issues/1003,1,['Test'],['Tests']
Testability,"Describe the bug**. Running tests for qutip 4.6.2, on linux (Debian unstable), all tests pass successfully, but overall tests return error code 1, which would be treated as test failure. For instance, running tests via `python3 -c ""import qutip.testing; qutip.testing.run()""`; ```; ============================= test session starts ==============================; platform linux -- Python 3.9.2, pytest-6.0.2, py-1.10.0, pluggy-0.13.0 -- /usr/bin/python3.9; cachedir: .pytest_cache; hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/drew/projects/misc/build/qutip/.pybuild/cpython3_3.9_qutip/build-test/.hypothesis/examples'); rootdir: /home/drew/projects/misc/build/qutip; plugins: cov-2.10.1, mpi-0+unknown, doctestplus-0.9.0, remotedata-0.3.2, asyncio-0.14.0, filter-subpackage-0.1.1, arraydiff-0.3, astropy-header-0.1.2, hypothesis-5.43.3, openfiles-0.5.0, xvfb-1.2.0; collecting ... collected 1996 items / 67 deselected / 1 skipped / 1928 selected. qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-real_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-imaginary_hermitian] PASSED [ 0%]; qutip/tests/test_basis_transformation.py::test_transformation_to_eigenbasis_is_reversible[2-complex_hermitian] PASSED [ 0%]. ...; qutip/tests/test_wigner.py::test_wigner_fft_comparse_ket PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_fft_comparse_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_iter_dm PASSED [ 99%]; qutip/tests/test_wigner.py::test_wigner_clenshaw_sp_iter_dm PASSED [100%]XIO: fatal IO error 0 (Success) on X server "":1029""; after 201 requests (201 known processed) with 4 events remaining.; ```. As far as I can tell this XIO error is related to the xvfb module (pytest-xvfb) used to manage graphical tests without display. Some relevant discussion is found at https://github.com/The-Compiler/pytest-xvfb/issues/11 . They i",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1639:990,test,tests,990,https://qutip.org,https://github.com/qutip/qutip/issues/1639,1,['test'],['tests']
Testability,"Description; Modification of PR #1315 .Added option to include colors to Bloch vectors and points instead of just cycling from a list. Related issues or PRs; fix #1292. Changelog; Added an optional argument called colors for the Bloch.add_vectors, Bloch.add_points and Bloch.add_states method.; Tested it here: https://github.com/rajathshetty20/misc/blob/master/qutip%20%231292.ipynb",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1335:295,Test,Tested,295,https://qutip.org,https://github.com/qutip/qutip/pull/1335,1,['Test'],['Tested']
Testability,"Did you install using --with-mcf90 ?. > On Nov 6, 2015, at 14:04, src10 notifications@github.com wrote:; > ; > Hello!!!; > ; > I installed python using anaconda on my mac and then installed qutip.; > ; > When I run the installation test I always get; > ; > Fortran mcsolver: False; > ; > How can I install the Fortran compiler needed.; > ; > Thanks; > ; > Regards!!; > ; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub.; > ; > Untracked with Trackbuster",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/391#issuecomment-154592986:232,test,test,232,https://qutip.org,https://github.com/qutip/qutip/issues/391#issuecomment-154592986,1,['test'],['test']
Testability,"Different platforms have some subtle differences in how multiprocessing works: On linux, processes ""fork"". My basic understanding is that sub-processes are created as copies of the parent process, thus inheriting their entire state (global variables/functions). Windows, and [macOS with Python >= 3.8](https://twitter.com/raymondh/status/1180209729609420800) uses ""spawn"". There, I believe subprocesses start from blank slate, and relevant global state is injected via IPC. Sadly, limitations of the pickle protocol can cause ""spawn""-based multiprocessing to have problems. Jupyter notebooks are affected by this: you cannot use multiprocessing-map using functions defined within the notebook. . Within qutip, this definitely affects the `parallel_map` function: It currently will cause freezes on Windows (See https://qucontrol.github.io/krotov/v1.0.0/notebooks/08_example_ensemble.html). With Python 3.8, macOS is also affected by this. See https://github.com/qutip/qutip-notebooks/issues/100. One possible workaround is to use a third-party replacement for multiprocessing. An work-in-progress implementation of this is in https://github.com/qutip/qutip/pull/1092, using [loky](https://loky.readthedocs.io). In #1197, we also identified a freeze in `mcsolve` when running tests on macOS/Python 3.8. This is suspected to be an issue with spawn-based multiprocessing, although we haven't been able to determine this with complete confidence. If the freeze is indeed caused by spawn-multiprocessing, the problem *should* also show up on Windows. Is anyone running Windows able to reproduce this?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1202:1275,test,tests,1275,https://qutip.org,https://github.com/qutip/qutip/issues/1202,1,['test'],['tests']
Testability,Disable brtools zheevr test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1300:23,test,test,23,https://qutip.org,https://github.com/qutip/qutip/pull/1300,1,['test'],['test']
Testability,Disable mcsolve tests on windows.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1855:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/1855,1,['test'],['tests']
Testability,"Do worry about the failing python2.7 tests, it's a common error on all recent checks. Your pull should not affect them.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-428349067:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-428349067,1,['test'],['tests']
Testability,"Do you get the same behaviour with QuTiP 4.5.0 in the same environment? The offending parts of `qutip/__init__.py` have been there since then, so it shouldn't be new in 4.5.2 at least. I can't reproduce the error unless `pyximport.install()` has already been run before QuTiP is imported (e.g. if I do `import pyximport; pyximport.install(); import qutip` or `importlib.reload(qutip)`). We have `qutip/__init__.py` organised so that we don't enable `pyximport` until after we've done the test for `qutip.cy.openmp.parfuncs`: first we do. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L100-L105. and only after that do we. https://github.com/qutip/qutip/blob/8e181cc44ceefc14ad0e4f4bcf78e1c8fcd2b291/qutip/__init__.py#L124-L126. In your error it's trying to build `qutip.cy.openmp.parfuncs`, and the only line that ever attempts to import that (in Python space) is line 101 above in `__init__`. It can only attempt to Cythonize files if `pyximport` is activated, but `qutip` doesn't activate that til a few lines later. It's certainly still a bug that this error appears if you've manually activated `pyximport` before (which would definitely cause it), but I'm struggling to find any other reason that the error could appear. We're looking to simplify the handling of OpenMP in a later version, and this buggy check is certainly a good reason to expedite that.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290:488,test,test,488,https://qutip.org,https://github.com/qutip/qutip/issues/1334#issuecomment-670167290,1,['test'],['test']
Testability,Do you mean the issue with not being able to find `vcvarsall.bat`? mentioned in:; https://github.com/cython/cython/wiki/CythonExtensionsOnWindows. In my test project I used the workaround they suggest:; ```; try:; from setuptools import setup; from setuptools import Extension; except ImportError:; from distutils.core import setup; from distutils.extension import Extension; ```; And this seems to work. Is it more complicated than that for us?,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/648#issuecomment-280616008:153,test,test,153,https://qutip.org,https://github.com/qutip/qutip/pull/648#issuecomment-280616008,1,['test'],['test']
Testability,Do you want me to restart the Travis tests? Or should we look into these random failing tests a bit before? Maybe @Ericgig knows something about it.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1221#issuecomment-607079474:37,test,tests,37,https://qutip.org,https://github.com/qutip/qutip/pull/1221#issuecomment-607079474,2,['test'],['tests']
Testability,"Doing #1646, I saw that we use operator between data object in code where types are not strictly checked. We may have other test working only because we do test mostly in `CSR`... . This PR add operators support between data-layer. This will help clean the code:; `_data.matmul(_data.matmul(A, B), C)` vs `A @ B @ C`.; and it will reduce the risk of them being used in functions where we expect, but don't check, that all data object are of the same type. . It is added in `base.Data` so any new data-layer will have operators working without having to create them. It use the dispatched function of `add`, `sub`, `matmul`, `mul`, `imul`, and `neg`. But it has the side effect that operators can change the type if the specialization does not exist. @jakelishman, is this something you though of but choose not to do?",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1647:124,test,test,124,https://qutip.org,https://github.com/qutip/qutip/pull/1647,2,['test'],['test']
Testability,"Doing some further testing of `type='super'` `Qobj`s, I ran into a simple test case in which operator multiplication fails to be associative. ```; >>> rho_psi = operator_to_vector(Qobj(np.diag(np.array([0.9, 0.1], dtype=complex))))>>> E_psi = rho_psi.dag(); >>> S = to_super(sigmax()); >>> (E_psi * S) * rho_psi; Traceback (most recent call last):; File ""<ipython-input-22-90cbfac2a43e>"", line 1, in <module>; (E_psi * S) * rho_psi; File ""qutip/qobj.py"", line 416, in __mul__; raise TypeError(""Incompatible Qobj shapes""); TypeError: Incompatible Qobj shapes. >>> E_psi * (S * rho_psi); Quantum object: dims = [[1], [1]], shape = [1, 1], type = oper, isherm = True; Qobj data =; [[ 0.18]]; >>> E_psi; Quantum object: dims = [[1], [[2], [2]]], shape = [1, 4], type = bra; Qobj data =; [[ 0.9 0. 0. 0.1]]; >>> rho_psi; Quantum object: dims = [[[2], [2]], [1]], shape = [4, 1], type = operator-vector; Qobj data =; [[ 0.9]; [ 0. ]; [ 0. ]; [ 0.1]]; >>> S; Quantum object: dims = [[[2], [2]], [[2], [2]]], shape = [4, 4], type = super, isherm = True; Qobj data =; [[ 0. 0. 0. 1.]; [ 0. 0. 1. 0.]; [ 0. 1. 0. 0.]; [ 1. 0. 0. 0.]]; ```. I'm not sure why this is happening yet, but I'll keep looking.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/96:19,test,testing,19,https://qutip.org,https://github.com/qutip/qutip/issues/96,2,['test'],"['test', 'testing']"
Testability,"Don't worry about the tests - progress on merging the refactor is slow (though if you want to review #1249 it'll help!). Besides, these tests would probably go in `test_qubitcircuit.py` which I haven't touched yet. Add the tests here, and I'll rebase #1251 onto `master` after this is merged if it's necessary to add them to the new style. Hopefully this will be the last time!. About the merge oddness: it comes about because this PR is built on a false version of the upstream (our) `master`. As long as you apply this merge as a squash, it will actually be ok and the history will be clean. Don't apply the merge as a history-preserving merge (i.e. a regular one), because it will make the commit history confusing (and defeats the purpose of having merged #1242 as a squash). ## Unnecessary detail. The exact reason is that this commit is build on top of #1242, but this is inconsistent with the upstream `master`; because #1242 was merged as a squash, `qutip/master` and `Canoming/master` diverged at fd13ae0 (i.e. before #1242), so `git` sees commits ea1c129 to b4f75cf as ""new"" (the first three commits of this PR). However, when those commits are taken together, they make the same changes as commit 4102b99 (the one which merged #1242) in `qutip/master`. The Github ""Files changed"" dialog is a pretty-printed version of the `git` command `git diff qutip/master...Canoming/master`, which means ""show all changes on either branch since `qutip/master` and `Canoming/master` diverged"". Because they diverged before #1242 was merged, it includes those changes. The merge completes without conflict, however, because `git` is clever and recognises that the changes introduced in the two branches `qutip/master` and `Canoming/master` are identical, even though the commits are different. As a consequence, however, merging this PR without squashing it would cause commits ea1c129 to b4f75cf to suddenly appear in our commit history, which we don't want. ### If Canoming wanted to fix this (not neces",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1269#issuecomment-629701269:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/1269#issuecomment-629701269,3,['test'],['tests']
Testability,"Done. If the tests pass, I hope we can merge this. Let me know if any more changes are necessary.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/753#issuecomment-371002717:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/pull/753#issuecomment-371002717,1,['test'],['tests']
Testability,Drop tests using older python versions.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1941:5,test,tests,5,https://qutip.org,https://github.com/qutip/qutip/pull/1941,1,['test'],['tests']
Testability,"Due to my exam collision, I was a little bit late. I apologize for that. Currently, I am working on a test case to check whether the negativity of a maximally entangled two-qubit state is close to 0.5, and I'm also verifying the operator, ket, and bra inputs. Once it's done, I will make a Seprate PR. Thank you for your help and support @nwlambert",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2371#issuecomment-2041904800:102,test,test,102,https://qutip.org,https://github.com/qutip/qutip/pull/2371#issuecomment-2041904800,1,['test'],['test']
Testability,Duplicate of #1381 for `dev.major` - should fix the super broken tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1383:65,test,tests,65,https://qutip.org,https://github.com/qutip/qutip/pull/1383,1,['test'],['tests']
Testability,During PR #11 it came up that we might want to test that bloch.py produces the correct figures. Personally I have no idea how to test for correct plotting in a unit test kind of way. Any ideas?,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/12:47,test,test,47,https://qutip.org,https://github.com/qutip/qutip/issues/12,3,['test'],['test']
Testability,During test control.pulseoptim: Hadamard gate (loading config from file) this deprecation warning sometimes happens:; control.pulseoptim: Hadamard gate (loading config from file) ... C:\Users\Paul\A; naconda2\lib\site-packages\qutip\control\loadparams.py:92: DeprecationWarning: Y; ou passed a bytestring as `filenames`. This will not work on Python 3. Use `cp.r; ead_file()` or switch to using Unicode strings across the board.; Reported on pip install of 4.0.1 on macOS; Not able to reproduce on Linux (py2 or py3).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/598:7,test,test,7,https://qutip.org,https://github.com/qutip/qutip/issues/598,1,['test'],['test']
Testability,"E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_steadystate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_me.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_se.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_subsys_apply.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:24811,test,tests,24811,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_qobjevo.py _________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ___________________ ERROR collecting qutip/tests/test_qpt.py ___________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _____________ ERROR collecting qutip/tests/test_qubit_evolution.py _____________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_qubitcircuit.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:17715,test,tests,17715,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"E AttributeError: module 'qutip' has no attribute 'settings'; _________________ ERROR collecting qutip/tests/test_states.py __________________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; _______________ ERROR collecting qutip/tests/test_steadystate.py _______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_me.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/test_stochastic_se.py ______________; qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined. During handling of the above exception, another exception occurred:; /miniconda3/lib/python3.7/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ______________ ERROR collecting qutip/tests/te",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/963#issuecomment-514146533:24338,test,tests,24338,https://qutip.org,https://github.com/qutip/qutip/issues/963#issuecomment-514146533,1,['test'],['tests']
Testability,"E ValueError: Invalid preconditioning method. /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip/steadystate.py:1109: ValueError; ====================================================================================== short test summary info ======================================================================================; FAILED tests/test_countstat.py::test_dqd_current - AssertionError: ; FAILED tests/test_scheduler.py::test_scheduling_gates3[circuit2 ALAP no shuffle] - assert 4 == 5; FAILED tests/test_steadystate.py::test_driven_cavity[power-gmres] - ValueError: Invalid preconditioning method.; FAILED tests/test_steadystate.py::test_driven_cavity[power-bicgstab] - ValueError: Invalid preconditioning method.; ======================================================== 4 failed, 2845 passed, 120 skipped, 67 deselected, 4 warnings in 130.89s (0:02:10) =========================================================; ```. ### Expected Behaviour. Tests should succeed. ### Your Environment. ```shell; QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman and Simon Cross.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A. Grimsmo.; Currently developed through wide collaboration. See https://github.com/qutip for details. QuTiP Version: 4.7.0.dev0+3ff3f42; Numpy Version: 1.20.3; Scipy Version: 1.7.3; Cython Version: None; Matplotlib Version: None; Python Version: 3.9.9; Number of CPUs: 10; BLAS Info: Generic; OPENMP Installed: False; INTEL MKL Ext: False; Platform Info: Darwin (arm64); Installation path: /opt/homebrew/Caskroom/miniforge/base/envs/qutip_test/lib/python3.9/site-packages/qutip; ================================",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1755:17234,Test,Tests,17234,https://qutip.org,https://github.com/qutip/qutip/issues/1755,1,['Test'],['Tests']
Testability,ED [ 41%]; qutip/tests/test_qobjevo.py::test_QobjEvo_to_list PASSED [ 44%]; qutip/tests/test_qobjevo.py::test_QobjEvo_math_arithmetic PASSED [ 47%]; qutip/tests/test_qobjevo.py::test_QobjEvo_unitary PASSED [ 50%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup PASSED [ 52%]; qutip/tests/test_qobjevo.py::test_QobjEvo_compress PASSED [ 55%]; qutip/tests/test_qobjevo.py::test_QobjEvo_shift PASSED [ 58%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply PASSED [ 61%]; qutip/tests/test_qobjevo.py::test_QobjEvo_apply_decorator PASSED [ 63%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec FAILED [ 66%]; qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat FAILED [ 69%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi FAILED [ 72%]; qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho FAILED [ 75%]; qutip/tests/test_qobjevo.py::test_QobjEvo_with_state FAILED [ 77%]; qutip/tests/test_qobjevo.py::test_QobjEvo_pickle FAILED [ 80%]; qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle FAILED [ 83%]; qutip/tests/test_qobjevo.py::test_QobjEvo_superoperator PASSED [ 86%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1] PASSED [ 88%]; qutip/tests/test_qobjevo.py::test_QobjEvo_tidyup_default[1e-15] PASSED [ 91%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H FAILED [ 94%]; qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H FAILED [ 97%]; qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str FAILED [100%]. ======================================================================================================================================== FAILURES ========================================================================================================================================; __________________________________________________________________________________________________________________________ test_time_dependent_spline_in_c_ops ________________________________________,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:7539,test,tests,7539,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'm",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1968,test,tests,1968,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMED",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1722,test,tests,1722,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ED qutip/tests/test_mesolve.py::TestMESolverConstDecay::testMEDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveTDDecay::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveSuperInit::testMETDDecayAsStrList; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_coeff; FAILED qutip/tests/test_mesolve.py::TestMESolveStepFuncCoeff::test_array_str_py_coeff; FAILED qutip/tests/test_openmp.py::test_openmp_mesolve_td - Exception: Could ...; FAILED qutip/tests/test_propagator.py::testPropHOStrTd - Exception: Could not...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call - Exception: Could not ...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_call_args - Exception: Could...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_vec - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_mul_mat - Exception: Could n...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_psi - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:1640,test,tests,1640,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['tests']
Testability,"ELEASE`; the only effect right now is to suppress the local identifier on the version information, replacing the old `ISRELEASED` boolean flag in the code. ### Notes on the wheels. Currently I build only for CPython. I haven't tried to build pypy wheels, but we _may_ support it - Cython does in theory, but I think complex numbers and raw pointers aren't handled completely smoothly, and we make heavy use of both. We get `manylinux1` builds for Linux, which is the oldest `manylinux` spec. This can be updated in the future, but I'm not sure I see a need; all our heavy mathematical lifting is either done by custom code (which is mostly immune) or BLAS/LAPACK (which we link to dynamically), so I don't think there's much to be gained. I don't know if the macOS images will run on the new M1 chips, but if not, there's not much that can be done there until GitHub Actions adds the necessary cross-compilation headers and libraries to their CI. ### Examples. You can see the result of this upload on the testing PyPI server: https://test.pypi.org/project/qutip-jakelishman (version 5.0.0a1 failed to upload due to previous testing, and 5.0.0a2 has a broken OpenMP configuration so won't run). I ran the CI action from my fork, with a temporary commit that changed the server to the testing archive (and the package name). Here's a screenshot of what the deployment screen will look like:. <img width=""1440"" alt=""GitHub Actions screen when triggering the build and deploy action"" src=""https://user-images.githubusercontent.com/5968590/106396051-8e49a980-63fd-11eb-867d-48a5ff2527f9.png"">. ### Further action needed. The GitHub Action won't become available until this is merged, _and_ `dev.major` is merged into `master`. This is because GitHub only makes workflows on the default branch available. ~We also need to generate a PyPI secret token with write access to the `qutip` package, and add it to the qutip/qutip repository secrets with the name `PYPI_TOKEN` (as defined in `.github/workflows/bu",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1429:3708,test,testing,3708,https://qutip.org,https://github.com/qutip/qutip/pull/1429,2,['test'],"['test', 'testing']"
Testability,ENH: Anaconda travis tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/300,1,['test'],['tests']
Testability,ENH: Remove CXVPY logger warning in metrics,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/465:18,log,logger,18,https://qutip.org,https://github.com/qutip/qutip/pull/465,1,['log'],['logger']
Testability,ENH: Use anaconda instead of wheels in travis testing,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/299:46,test,testing,46,https://qutip.org,https://github.com/qutip/qutip/pull/299,1,['test'],['testing']
Testability,ENH: contributors update Change log with merged PR,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1055:32,log,log,32,https://qutip.org,https://github.com/qutip/qutip/issues/1055,1,['log'],['log']
Testability,ERROR ../tests/test_expect.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_fastsparse.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_fileio.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_floquet.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_gates.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_graph.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_heom_solver.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_interpolate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_lattice.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mcsolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_metrics.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mkl.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_noise.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_openmp.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_operators.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - Att,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:52789,test,tests,52789,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,ERROR ../tests/test_interpolate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_lattice.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mcsolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_metrics.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_mkl.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_noise.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_openmp.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_operators.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py - AttributeError: module 'qutip' has n...; ERROR ../tests/test_qubitcircuit.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_qubits.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rand.py - Att,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:53363,test,tests,53363,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,ERROR ../tests/test_mkl.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_noise.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_openmp.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_operators.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py - AttributeError: module 'qutip' has n...; ERROR ../tests/test_qubitcircuit.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_qubits.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rand.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py -,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:53773,test,tests,53773,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,ERROR ../tests/test_noise.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_openmp.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_operators.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py - AttributeError: module 'qutip' has n...; ERROR ../tests/test_qubitcircuit.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_qubits.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rand.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sparse.py - A,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:53855,test,tests,53855,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,ERROR ../tests/test_operators.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_optpulseprocessor.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_parallel.py - AttributeError: module 'qutip' has no attri...; ERROR ../tests/test_partial_transpose.py - AttributeError: module 'qutip' has...; ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py - AttributeError: module 'qutip' has n...; ERROR ../tests/test_qubitcircuit.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_qubits.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rand.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sparse.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_spinchain.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_spmath.py - ,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:54019,test,tests,54019,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,ERROR ../tests/test_piqs.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_processor.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_propagator.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_ptrace.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_pulse.py - AttributeError: module 'qutip' has no attribut...; ERROR ../tests/test_qft.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qobj.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_qobjevo.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_qpt.py - AttributeError: module 'qutip' has no attribute ...; ERROR ../tests/test_qubit_evolution.py - AttributeError: module 'qutip' has n...; ERROR ../tests/test_qubitcircuit.py - AttributeError: module 'qutip' has no a...; ERROR ../tests/test_qubits.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rand.py - AttributeError: module 'qutip' has no attribute...; ERROR ../tests/test_random.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_rhs_reuse.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_scattering.py - AttributeError: module 'qutip' has no att...; ERROR ../tests/test_sesolve.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sp_eigs.py - AttributeError: module 'qutip' has no attrib...; ERROR ../tests/test_sparse.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_spinchain.py - AttributeError: module 'qutip' has no attr...; ERROR ../tests/test_spmath.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_states.py - AttributeError: module 'qutip' has no attribu...; ERROR ../tests/test_steadystate.py - AttributeError: module 'qutip' has no at...; ERROR ../tests/test_stochastic_me.py - AttributeError: module 'qutip' has no ...; ERROR ../tests/test_stochastic_se,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:54347,test,tests,54347,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['tests']
Testability,Enforce a CI test with scipy<1.5,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1302:13,test,test,13,https://qutip.org,https://github.com/qutip/qutip/pull/1302,1,['test'],['test']
Testability,"Enhance: Division by zero caught in stats.calculate; New: test out files directory can now be specified using optimconfig.test_out_subdir; Enhance: makedirs used to create test_out_dir, so nested directories can be used; Enhance: missing config sections now caught and reported as warnings; New: pulsegen parameters can now be read from config file; Enhance: iter, fid_err, fid_err_grad test_out_files now appended to rather than held open",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/301:58,test,test,58,https://qutip.org,https://github.com/qutip/qutip/pull/301,1,['test'],['test']
Testability,Ensure tests can pass without ipython and matplotlib,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2311:7,test,tests,7,https://qutip.org,https://github.com/qutip/qutip/pull/2311,1,['test'],['tests']
Testability,"Error while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_stochastic_se.py:3: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _____________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_subsys_apply.py:2: in <module>; from numpy.testing import assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); _______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py _______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_superoper.py'.; Hint: make sure your test modules/packages have valid Python names.; ",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:23965,test,tests,23965,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,"Error while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_tensor.py:3: in <module>; from numpy.testing import assert_equal, assert_, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ______________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py ______________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/importlib/__init__.py:127: in import_module; return _bootstrap._gcd_import(name[level:], package, level); Library/Python/3.9/lib/python/site-packages/qutip/tests/test_three_level.py:2: in <module>; from numpy.testing import assert_, assert_equal, run_module_suite; E ImportError: cannot import name 'run_module_suite' from 'numpy.testing' (/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/numpy/testing/__init__.py); ________________________________ ERROR collecting Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py _________________________________; ImportError while importing test module '/Users/guglielmo2/Library/Python/3.9/lib/python/site-packages/qutip/tests/test_wigner.py'.; Hint: make sure your test modules/packages have valid Pytho",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:27571,test,tests,27571,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['tests']
Testability,Errors when running qutip.testing.run() on Mac M1,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2180:26,test,testing,26,https://qutip.org,https://github.com/qutip/qutip/issues/2180,1,['test'],['testing']
Testability,"Every `Qobj` created by qutip have `dims[0]` and `dims[1]` being list. `dims=[2, 2]` is an error that we should catch. The main issue is that there is no clear documentation or tests that clearly says what is a valid dims format. . There are some strange dimension that are produced by our function that would raise an error with `np.stack` like; `tensor(operator_to_vector(oper), oper)` but I don't think we should accept these kind of `Qobj` in the first place, so I am fine failing there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366:177,test,tests,177,https://qutip.org,https://github.com/qutip/qutip/pull/1783#issuecomment-1028044366,1,['test'],['tests']
Testability,"Everyone: (@ajgpitch, @BoxiLi, @Ericgig, @nathanshammah). Apologies for bumping this again. It would be good to get a strategy in place to handle a review for this. Would it be easier if I close this PR and then make a whole series of new PRs with (say) 5 files in at a time?. I'm particularly keen to get the `test_gates.py` refactor merged in, because there's seemingly quite a lot of movement in the `qip` module. If I do split the PR, then I'll rebase onto `master` so that the new tests added in #1224 are included without a merge resolution.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1181#issuecomment-609702252:486,test,tests,486,https://qutip.org,https://github.com/qutip/qutip/pull/1181#issuecomment-609702252,1,['test'],['tests']
Testability,"Excellent, thank you! I'll wait and see what happens with the travis tests.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/85#issuecomment-36420410:69,test,tests,69,https://qutip.org,https://github.com/qutip/qutip/pull/85#issuecomment-36420410,1,['test'],['tests']
Testability,Explicitly define matplotlib backend for Windows tests (v5).,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2022:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/2022,1,['test'],['tests']
Testability,Explicitly define matplotlib backend for Windows tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2013:49,test,tests,49,https://qutip.org,https://github.com/qutip/qutip/pull/2013,1,['test'],['tests']
Testability,Expm and project tests.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1630:17,test,tests,17,https://qutip.org,https://github.com/qutip/qutip/pull/1630,1,['test'],['tests']
Testability,"FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_expect_rho - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_with_state - Exception: Coul...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_pickle - Exception: Could no...; FAILED qutip/tests/test_qobjevo.py::test_QobjEvo_safepickle - Exception: Coul...; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_1_state_with_list_str_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_04_2_unitary_with_list_func_H; FAILED qutip/tests/test_sesolve.py::TestSESolve::test_06_4_compare_state_and_unitary_list_str; = 23 failed, 3077 passed, 101 skipped, 68 deselected, 1387 warnings in 1058.36s (0:17:38) =; ```. #1084 notes that a major overhaul of qobjevo has been done for qutip v5. Perhaps the issue is fixed. On the hand it could be an issue with python 3.12 that still needs to be addressed in v5, so I though I should mention in. ### Code to Reproduce the Bug. ```shell; python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])""; ```. ### Code Output. ```shell; $ python3.12 -c ""import qutip.testing; qutip.testing.run(pytest_options=[['-k', 'mesolve_td or test_varying_coefficient_hamiltonian_2ls or testMEDecayAsStrList or test_array_str or test_qobjevo or test_04 or test_06_4_compare_state_and_unitary_list_str or testPropHOStrTd']])"". QuTiP: Quantum Toolbox in Python; ================================; Copyright (c) QuTiP team 2011 and later.; Current admin team: Alexander Pitchford, Nathan Shammah, Shahnawaz Ahmed, Neill Lambert, Eric Giguère, Boxi Li, Jake Lishman, Simon Cross and Asier Galicia.; Board members: Daniel Burgarth, Robert Johansson, Anton F. Kockum, Franco Nori and Will Zeng.; Original developers: R. J. Johansson & P. D. Nation.; Previous lead developers: Chris Granade & A.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2293:2623,test,testing,2623,https://qutip.org,https://github.com/qutip/qutip/issues/2293,1,['test'],['testing']
Testability,"Failed to break down the line. ```; f.write(""# Generated by QuTiP: %dx%d %s matrix in %s format ['%s' separated values].\n"" % (M, N, numtype, numformat, sep)); ```. to less then 80 chars without breaking the unit tests. Needs to be done later.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/7:213,test,tests,213,https://qutip.org,https://github.com/qutip/qutip/issues/7,1,['test'],['tests']
Testability,Failing unit tests in Sparse,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/73:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/issues/73,1,['test'],['tests']
Testability,Failing unit tests in test_subsystem_apply,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/30:13,test,tests,13,https://qutip.org,https://github.com/qutip/qutip/issues/30,1,['test'],['tests']
Testability,"Failing windows tests are related to mkl, not this PR.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2526#issuecomment-2334653751:16,test,tests,16,https://qutip.org,https://github.com/qutip/qutip/pull/2526#issuecomment-2334653751,1,['test'],['tests']
Testability,Failure in Correlation unittest when running tests twice,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/269:45,test,tests,45,https://qutip.org,https://github.com/qutip/qutip/issues/269,1,['test'],['tests']
Testability,"False test failure again - we really have too many tests which fail probabilistically! This particular one should have been smoothed out by #1250, since the current test is rather convoluted and there's several imprecise floating-point literals in use.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1264#issuecomment-628910011:6,test,test,6,https://qutip.org,https://github.com/qutip/qutip/pull/1264#issuecomment-628910011,3,['test'],"['test', 'tests']"
Testability,"False; E AttributeError: module 'qutip' has no attribute 'settings'; ____________________ ERROR collecting tests/test_wigner.py _____________________; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:46: in <module>; __IPYTHON__; E NameError: name '__IPYTHON__' is not defined; During handling of the above exception, another exception occurred:; ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/py/_path/local.py:701: in pyimport; __import__(modname); ../../../../miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py:49: in <module>; qutip.settings.ipython = False; E AttributeError: module 'qutip' has no attribute 'settings'; ---------- coverage: platform linux, python 3.6.10-final-0 -----------; Name Stmts Miss Cover; --------------------------------------------------------------------------------------------------------------------------------------------------------------------------; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/__init__.py 150 97 35%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/__init__.py 3 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/_mkl/utilities.py 39 16 59%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/__init__.py 1 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/openmp/__init__.py 0 0 100%; /home/travis/miniconda/envs/test-environment/lib/python3.6/site-packages/qutip-4.5.1.dev1+0ffec37-py3.6-linux-x86_64.egg/qutip/cy/pyxbuilder.py 18 ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997:48991,test,test-environment,48991,https://qutip.org,https://github.com/qutip/qutip/pull/1232#issuecomment-619398997,1,['test'],['test-environment']
Testability,Faster automated test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217:17,test,test,17,https://qutip.org,https://github.com/qutip/qutip/issues/1217,1,['test'],['test']
Testability,Faster correlation test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1885:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1885,1,['test'],['test']
Testability,Fastsparse tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/586:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/pull/586,1,['test'],['tests']
Testability,Feature: unit tests to check superrep metadata preservation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/99:14,test,tests,14,https://qutip.org,https://github.com/qutip/qutip/pull/99,1,['test'],['tests']
Testability,"Finally I settled on 5 tests sets: 3 linux and 2 MacOS. ; The test on python 3.6 use no-cython and openblas.; mkl and openmp run together on python 3.7 and python 3.8 use conda's default.; On Mac, tests use openblas, no openmp and cython, repeated for python 3.7 and 3.8.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1214#issuecomment-610534948:23,test,tests,23,https://qutip.org,https://github.com/qutip/qutip/pull/1214#issuecomment-610534948,3,['test'],"['test', 'tests']"
Testability,"Finally, `Qobj` can use any backing data store. This fairly small and simple PR is effectively the culmination of all the work on `dev.major` over the last few months, and effectively is just like flicking a switch to turn on all the capabilities that we've built up through #1282, #1296, #1332, #1338 and #1341. There is still a lot of work to be done, but I'm trying to transition to smaller, easier-to-check PRs to make review easier. Possibly incomplete to do list:; - write a proper `data.create`; - possibly add the dispatchers in as `data.Data` mathematical methods (e.g. `__matmul__`); - add options for controlling default output types from the dispatchers; - tests for `Qobj` with both types; - tests for creation and property routines of the data layer; - tests for the dispatch operation; - tests for conversion operations; - more specialisations to be written for `Dense` and `CSR`/`Dense`; - more ergonomic selection of _method_, not just output type (for example, you should be able to specify you want the `Dense` specialisation of `eigs` even if you pass it a `CSR`); - more ergonomic dispatchers for matrix creation (e.g. how exactly will `qutip.basis` function, and how will users add specialisations?); - documentation, both user-facing and developer-facing; - fix algorithms in `add_csr` and `matmul_csr` to use `csr.Accumulator` (should provide a speedup and remove some sorts); - fix `isherm_csr` (see #1350 - `isherm_csr` uses the same algorithm, so has the same problem)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1351:669,test,tests,669,https://qutip.org,https://github.com/qutip/qutip/pull/1351,4,['test'],['tests']
Testability,"First of all I'm glad you could get it to run under OSX. Which OpenCL environment are you using?; - Is the failure of `test_mcsolve_cl_time_dep_h` reproducible?; - You can probably ignore the compiler warning. I assume it is related to the pragma statement. Some OpenCL implementations refuse to work without it, others give you a warning that it is unnecessary. Maybe we can omit the statement based on the platform version and hide some warning, but that would require more testing (on different platforms). At the moment there is a lot of debug information to ease testing.; - The AttributeError you get is something I have not encountered yet. If you do consider merging this branch, it is a good idea to get more people involved in testing. The code has not been reviewed and probably contains some bugs. The questions you raised concerning the maintainability are all valid. On top of that setting up OpenCL is somewhat troublesome, which makes `mcsolve_cl` a kind of experimental feature. Ultimately it is up to the maintainers of qutip to decide whether such a feature should be included. The advantage `mcsolve_cl` has over `mcsolve_f90` is that it supports some time-dependence and introduces no build dependencies. If, for some reason `mcsolve_cl` does not work, the user can always fall back to `mcsolve`. By the way, is it wise to rebase this branch all the time or only when necessary?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/554#issuecomment-260134503:476,test,testing,476,https://qutip.org,https://github.com/qutip/qutip/pull/554#issuecomment-260134503,3,['test'],['testing']
Testability,"Fix a couple of incorrect attribute accesses in `_isherm_csr_full`, which were incorrectly merged up from `master` - they refer to the old SciPy names for the fields, rather than the new `CSR` type names. This wasn't caught at the time because the tests hadn't been merged up yet, so I've written those as well. **Changelog**; - Fix typos in `isherm_csr`; - Add tests of `isherm` for all data types.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1614:248,test,tests,248,https://qutip.org,https://github.com/qutip/qutip/pull/1614,2,['test'],['tests']
Testability,"Fix a testing set-up regression made in #1348 - the version of SciPy was meant to be constrained to <1.5 to test compatibility with the older version of the sparse matrices, but the version constraint got omitted when I rewrote the `.travis.yml` file. The specific bugs that that test is meant to catch (errors handling `scipy.sparse.csr_matrix` matrix multiplication) can't be present in this branch anyway, because the new data types don't use scipy internals. Still, it's good to test against older versions of scipy as well - in 1.5 they changed some numerics in the eigenvalue solvers, which caused a whole bunch of our tests to break because we relied on the gauge and order of the vectors returned remaining constant.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1363:6,test,testing,6,https://qutip.org,https://github.com/qutip/qutip/pull/1363,5,['test'],"['test', 'testing', 'tests']"
Testability,Fix add_1q_gates + test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1211:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1211,1,['test'],['test']
Testability,Fix brtools zheevr test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1301:19,test,test,19,https://qutip.org,https://github.com/qutip/qutip/pull/1301,1,['test'],['test']
Testability,Fix bugs in QobjEvo's args depending on state and added solver tests using them.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1127:63,test,tests,63,https://qutip.org,https://github.com/qutip/qutip/pull/1127,1,['test'],['tests']
Testability,"Fix bugs in spin_q_function and spin_wigner, add test cases",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1632:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/1632,1,['test'],['test']
Testability,Fix consumable iterator in test parametrisation,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1430:27,test,test,27,https://qutip.org,https://github.com/qutip/qutip/pull/1430,1,['test'],['test']
Testability,Fix deprecated call to NumPy linspace in mesolve test.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/708:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/pull/708,1,['test'],['test']
Testability,Fix diag_liou_mult tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1474:19,test,tests,19,https://qutip.org,https://github.com/qutip/qutip/pull/1474,1,['test'],['tests']
Testability,Fix failing `svd_csr` test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2361:22,test,test,22,https://qutip.org,https://github.com/qutip/qutip/pull/2361,1,['test'],['test']
Testability,Fix failing steadystate tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1694:24,test,tests,24,https://qutip.org,https://github.com/qutip/qutip/pull/1694,1,['test'],['tests']
Testability,Fix failing test with mkl windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2529:12,test,test,12,https://qutip.org,https://github.com/qutip/qutip/pull/2529,1,['test'],['test']
Testability,Fix fileio tests on Windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1312:11,test,tests,11,https://qutip.org,https://github.com/qutip/qutip/pull/1312,1,['test'],['tests']
Testability,Fix for Liouville test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/420:18,test,test,18,https://qutip.org,https://github.com/qutip/qutip/pull/420,1,['test'],['test']
Testability,Fix for scipy 1.11.; `cvxpy` does not work yet with the latest scipy version. I changed one of the test to run with the latest scipy but no `cvxpy` to confirm the fix is working. Close #2182 . (Nothing to fix for v5),MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2183:99,test,test,99,https://qutip.org,https://github.com/qutip/qutip/pull/2183,1,['test'],['test']
Testability,Fix for scipy 1.12 in tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2301:22,test,tests,22,https://qutip.org,https://github.com/qutip/qutip/pull/2301,1,['test'],['tests']
Testability,Fix groundstate and add test,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1938:24,test,test,24,https://qutip.org,https://github.com/qutip/qutip/pull/1938,1,['test'],['test']
Testability,Fix logging,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/379:4,log,logging,4,https://qutip.org,https://github.com/qutip/qutip/pull/379,1,['log'],['logging']
Testability,Fix logic error in shape check,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2349:4,log,logic,4,https://qutip.org,https://github.com/qutip/qutip/pull/2349,1,['log'],['logic']
Testability,Fix logic finding blas libraries,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2072:4,log,logic,4,https://qutip.org,https://github.com/qutip/qutip/pull/2072,1,['log'],['logic']
Testability,Fix some warnings in tests,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1882:21,test,tests,21,https://qutip.org,https://github.com/qutip/qutip/pull/1882,1,['test'],['tests']
Testability,Fix test coverage on `dev.major`,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1348:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/1348,1,['test'],['test']
Testability,Fix test of qutip.fortran in TravisCI,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/80:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/issues/80,1,['test'],['test']
Testability,Fix test requirement,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2095:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/2095,1,['test'],['test']
Testability,Fix test warnings,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1506:4,test,test,4,https://qutip.org,https://github.com/qutip/qutip/pull/1506,1,['test'],['test']
Testability,Fix the failing test with numpy 2.1 on windows,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2516:16,test,test,16,https://qutip.org,https://github.com/qutip/qutip/pull/2516,1,['test'],['test']
Testability,"Fix the test breaking dev.major by adding the tolerance in the test itself.; This is an alternative to #1656, merge only one.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1658:8,test,test,8,https://qutip.org,https://github.com/qutip/qutip/pull/1658,2,['test'],['test']
Testability,"Fixed basis transform in to_chi, added unit tests for regression.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/337:44,test,tests,44,https://qutip.org,https://github.com/qutip/qutip/pull/337,1,['test'],['tests']
Testability,Fixed logging in SS module,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/261:6,log,logging,6,https://qutip.org,https://github.com/qutip/qutip/pull/261,1,['log'],['logging']
Testability,"Fixed some causes of travis tests not succeeding. In particular e303b0e fixes use of `round` in the function `_td_wrap_array_str` in rhs_generate.py. This function uses `round` to get an integer number that is then passed as an array index. Since `round` returns a float, this causes the deprecation warning ""DeprecationWarning: using a non-integer number instead of an integer will result in an error in the future"". I therefore wrapped the call to `round` with a call to `int`. The travis tests now pass succesfully for this pull request.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/404#issuecomment-162598230:28,test,tests,28,https://qutip.org,https://github.com/qutip/qutip/pull/404#issuecomment-162598230,2,['test'],['tests']
Testability,Fixed typo in tests/test_basis_transformation.py on line 84.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/107:14,test,tests,14,https://qutip.org,https://github.com/qutip/qutip/pull/107,1,['test'],['tests']
Testability,Fixes the wrong vector ordering in the conversion between fock and eigen bases. Essentially gave rise to transpose error. Added tests to verify fix. Also added @cython.cdivision(True) to both BR and ME codegens so that any string with division do not call back to Python.,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/712:128,test,tests,128,https://qutip.org,https://github.com/qutip/qutip/pull/712,1,['test'],['tests']
Testability,"For 3 I meant to point that `c_ops` can be complex time-dependent systems by using 3 layers of list in its definition. We only test for list in this situation, but having the last layer as a tuple should work in `mesolve`. Tuple are not tested for nested time dependent system anywhere. If they give a different result, it's probably the wrong one.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/2065#issuecomment-1410542360:127,test,test,127,https://qutip.org,https://github.com/qutip/qutip/issues/2065#issuecomment-1410542360,2,['test'],"['test', 'tested']"
Testability,"For consideration. For backwards compatibility I think steady should be kept, and the old liouvillian unit test should also be kept in my opinion.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/173:107,test,test,107,https://qutip.org,https://github.com/qutip/qutip/pull/173,1,['test'],['test']
Testability,"For large matrices (`dim > ~500`), the dense matrix dot product is still a pretty large cost, but you're still saving a fair amount. That said, at that kind of dimension, the analytical formula may do you well enough. If you want derivatives wrt alpha, you should be able to get analytic ones from my method - there's no ""black box"" numerical work that goes on in `__call__`, everything is just matrix multiplication. Given that it appears non-linearly in a possibly large multiplication, though, and I would imagine the derivatives are pretty smooth, you may well just be faster just numerically approximating it with finite differences (I don't know anything about autodifferentiation). If you're so inclined, you can sacrifice some speed for higher accuracy in the eigenvector calculations, as we can find the eigenvalues semi-analytically. There are a few places in numpy and scipy that can find the roots of the Hermite polynomials for you (i.e. get the eigenvalues), which will be found exactly wrt double precision (I believe). You can then call out to the LAPACK routine `dstein` to get the eigenvectors from the eigenvalues. `dstein` is slower than `dstemr`/`dsteqr` (which is what scipy uses, I think), but it allows us to supply the eigenvalues, removing some numerical error. I didn't test that very thoroughly though.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1293#issuecomment-646100632:1297,test,test,1297,https://qutip.org,https://github.com/qutip/qutip/issues/1293#issuecomment-646100632,1,['test'],['test']
Testability,"For point 2: adding marks right now will cause conflicts, but if #1181 gets merged then it'll be much simpler. The main issue is that a lot of the testing structure has changed for tests up to `test_mcsolve.py` alphabetically, and so in general the tests are just not the same. The principle is pretty straightforwards - just like #1181 introduces a `requires_cython` mark, we would add `uses_cython`, `uses_mkl` and `uses_openmp` marks. These would be even simpler to add than `requires_cython` because unlike it, they don't require any test-generation logic at all. The change would simply be to add them to `pytest.ini`, mark the requisite functions and then change the pytest invocation of the specialised test to `pytest -m ""uses_cython""` or whatever. As far as I'm aware, the only parts of their codebase which modify their behaviour based on whether `Cython` is available is `QobjEvo`. The other parts (like `brmesolve`) just don't work if Cython isn't there. The MKL tests would become very short; by my reckoning, MKL is only used by `steadystate` and `countstat`. OpenMP is much more pervasive, as `sesolve`, `mesolve` and `brmesolve` all use it, and parts which depend on those are generally the slowest tests. The short tests could just become `pytest -m ""not slow""`? That's not super speedy, but it takes about half the time, maybe. If you want more, then a good starting point is `pytest --durations=0` which will tell us which tests are the slowest (perhaps that was what you already did when marking the slow ones?).",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776:147,test,testing,147,https://qutip.org,https://github.com/qutip/qutip/issues/1217#issuecomment-604011776,10,"['log', 'test']","['logic', 'test', 'test-generation', 'testing', 'tests']"
Testability,"For the record, the combination of conda and Python 3.7 (instead of 3.8) works:; ~~~; = 629 passed, 11 skipped, 61 deselected, 2 xfailed, 906 warnings in 590.30s (0:09:50) =; ~~~; If mcsolve uses multiprocessing internally, it's possible the hanging test is related to the changes in Python 3.8 to use ""spawn"" instead of ""fork"" for multiprocessing on macOS (see also https://github.com/qutip/qutip-notebooks/issues/100). For the pip installation, the segfault occurs with both Python 3.7 and Python 3.8",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1197#issuecomment-596676557:250,test,test,250,https://qutip.org,https://github.com/qutip/qutip/issues/1197#issuecomment-596676557,1,['test'],['test']
Testability,For the tests I added I followed the naming convention already used in `tests/test_mesolve.py`. I guess we should try to change the naming convention in all the test modules then. Probably better to do this in another pull request though.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/405#issuecomment-165445058:8,test,tests,8,https://qutip.org,https://github.com/qutip/qutip/pull/405#issuecomment-165445058,3,['test'],"['test', 'tests']"
Testability,For want of another idea I restarted the tests,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/428#issuecomment-184068338:41,test,tests,41,https://qutip.org,https://github.com/qutip/qutip/pull/428#issuecomment-184068338,1,['test'],['tests']
Testability,Fortran module is not tested in Travis so i'm merging this before travis tests finish.,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/197#issuecomment-49156618:22,test,tested,22,https://qutip.org,https://github.com/qutip/qutip/pull/197#issuecomment-49156618,2,['test'],"['tested', 'tests']"
Testability,"From my perspective this is now ready to merge. ; fhenneke has fixed a bug in the gradient and a typo in a class name.; It seems like the last commit overwrote the previous one, and so some of the comments here have disappeared, however the queries to the code have been addressed.; I will look to add some unit tests (including the grad_check) over the Easter holiday, i.e. over the next few weeks.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/325#issuecomment-82987952:312,test,tests,312,https://qutip.org,https://github.com/qutip/qutip/pull/325#issuecomment-82987952,1,['test'],['tests']
Testability,"From what I understand, on intel, brmesolve seems to work correctly, but not on M1.; This look like an issue with the eigensolver. Could you run the test suite to see if it fails the eigen and bloch redfield related tests: `pytest path_to_qutip/qutip/tests`. (Tests can take >30min). Also could you look at the tensor directly:; ```; R, H_eigenvector = bloch_redfield_tensor(sigmax(), a_ops=[[sigmax(), psd]]); ```; If the tensor is wrong on M1, this would explain the error.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1965#issuecomment-1203272586:149,test,test,149,https://qutip.org,https://github.com/qutip/qutip/issues/1965#issuecomment-1203272586,4,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"Functions run, tests ok on my machine (darwin). Can you add a test for `molmer_sorensen` if appropriate?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1028#issuecomment-505092850:15,test,tests,15,https://qutip.org,https://github.com/qutip/qutip/pull/1028#issuecomment-505092850,2,['test'],"['test', 'tests']"
Testability,"Glad to be of service! I've been using a MATLAB-based library for most of my open-systems work, and I'm really excited to be able to move more things over to Python, thanks to QuTiP. Anyway, I can confirm that the test cases above now work as expected, and that `E_psi` correctly is identified as an `operator-bra`. As for code review, I'd be happy to help. It's a little late here, but I'll get to it soon.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/96#issuecomment-39052803:214,test,test,214,https://qutip.org,https://github.com/qutip/qutip/issues/96#issuecomment-39052803,1,['test'],['test']
Testability,Good addition @abhisekupadhyaya. The failing test is recurring in MacOS #963 and we can ignore it now and go ahead and merge this PR @nathanshammah,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/979#issuecomment-491755332:45,test,test,45,https://qutip.org,https://github.com/qutip/qutip/pull/979#issuecomment-491755332,1,['test'],['test']
Testability,"Good points. I suggest to simply remove the comment in `test_qobj`, and change to pytest in the `setup.py`. Something like what's [here](https://doc.pytest.org/en/3.0.4/goodpractices.html#integrating-with-setuptools-python-setup-py-test-pytest-runner) should work (basically changing `nose` with `pytest`). It seems however that testing it's a thorny [issue](https://github.com/pypa/setuptools/issues/1684), but these changes for the time being make the whole package at least consistent.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587:232,test,test-pytest-runner,232,https://qutip.org,https://github.com/qutip/qutip/pull/1161#issuecomment-576003587,2,['test'],"['test-pytest-runner', 'testing']"
Testability,"Great feedback @hodgestar. Let me add this: It would be nice to clarify explicitly benchmarks from the beginning. ; A bit like you did when mentioning the 14 qubit cap for QFT gate simulation. ; For example, goals of this would be:; - For qutip/qutip: Faster `mesolve` (add details of a typical example with current times/bottlenecks); - - For qutip/qutip: More qubits simulated in `mesolve` and `steadystate` ; - For qutip/qutip-qip: Capability to simulate more qubits (add current example with benchmark + code). For all examples we could add details of a typical example with current times/bottlenecks (we could use gists). This can be of very wide interest, but finding physical examples of interests and use cases would be helpful. For example, qubit space nevertheless explodes exponentially. But adding even a bit more qubits in `steadystate` can impact state of the art simulation of dissipative phase transitions in many-body systems. I also think that having a sort of code design template could help. This is a more general point triggered by this issue. This may be a QuTiP idea but looks at some point more technical.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489:83,benchmark,benchmarks,83,https://qutip.org,https://github.com/qutip/qutip/issues/1671#issuecomment-927913489,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Great for the PR. . Somehow `nose` was not picking this error. ; It would be nice to investigate and fix. ; The problem seems to be at test 03 there,; ```; AttributeError: 'TestPulseOptim' object has no attribute 'tmp_dirs'; ```; Indeed, TestPulseOptim seems to have this attribute where `tmp_dirs`; are defined, ; ```; def setUp(self):; # list of file paths to be removed after test; self.tmp_files = []; # list of folder paths to be removed after test; self.tmp_dirs = []; ```; Investigating this locally (running the pytest only for this module) would be great.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1131#issuecomment-560236003:135,test,test,135,https://qutip.org,https://github.com/qutip/qutip/pull/1131#issuecomment-560236003,5,"['Test', 'test']","['TestPulseOptim', 'test']"
Testability,"Great, thanks for fixing this. Will merge when the test finish.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/300#issuecomment-68425743:51,test,test,51,https://qutip.org,https://github.com/qutip/qutip/pull/300#issuecomment-68425743,1,['test'],['test']
Testability,"Guess you can merge it now, unless you want me to add more test cases.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/145#issuecomment-45207270:59,test,test,59,https://qutip.org,https://github.com/qutip/qutip/pull/145#issuecomment-45207270,1,['test'],['test']
Testability,"HI @Titanosaurus , have submitted a PR, you will have your fix when it gets merged. :). Usage would be as follows:; ```b = Bloch(); b.save(""test"", dpsi=500); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1103#issuecomment-541321578:140,test,test,140,https://qutip.org,https://github.com/qutip/qutip/issues/1103#issuecomment-541321578,1,['test'],['test']
Testability,"HI Jake than you for the response.; I'll open a separate PR with just the update for the failing test and the changes in `__init__.py` if you are ok with it.; With respect to the check in OpenBLAS with SciPy 1.4, yes I can try it on a linux and a macOS env just in case.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1491#issuecomment-819063126:97,test,test,97,https://qutip.org,https://github.com/qutip/qutip/pull/1491#issuecomment-819063126,1,['test'],['test']
Testability,"Haha, it's no problem - I didn't spot it was a problem in that PR either. I'm marginally worried that the test suite was even able to generate 68,000 warnings - it seems like the code was hit an excessive number of times. I'm fairly sure that `correlation.py` hasn't been meaningfully touched in years (there are 8-year-old deprecation warnings in it...), but it might be time for one of us to review it.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1505#issuecomment-824433411:106,test,test,106,https://qutip.org,https://github.com/qutip/qutip/pull/1505#issuecomment-824433411,1,['test'],['test']
Testability,"Happy to create a notebook with some examples. Should it live at https://github.com/qutip/qutip-notebooks/tree/master/docs/guide ? If so, I'll make a PR there. For documentation, do I add them at https://github.com/qutip/qutip-doc/blob/master/apidoc/functions.rst?. Re measurement and teleportation -- that sounds like ordinary quantum teleportation, and probably would be a fun test to write once we get there.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310:379,test,test,379,https://qutip.org,https://github.com/qutip/qutip/pull/1090#issuecomment-547162310,1,['test'],['test']
Testability,"Hardcoded matrix will cause problem in later modification of the code. (Or if numpy update it's random number generator, etc.); Keeping the present tests, I would add something like this:; ```; O1 = rand_herm(..., seed=seed); O2 = rand_herm(..., seed=None); O3 = rand_herm(..., seed=seed); assert(O1!=O2); assert(O1==O3); ```; You check that random Qobj are reproducible using a seed and work as expected when not.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/917#issuecomment-427319374:148,test,tests,148,https://qutip.org,https://github.com/qutip/qutip/pull/917#issuecomment-427319374,3,"['assert', 'test']","['assert', 'tests']"
Testability,"Hardware info is only used to get the number of cpus... It may hve been used for benchmark in the past, it also fetch the cpu frequency and memsize... I would be for simply removing it in the next version.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709:81,benchmark,benchmark,81,https://qutip.org,https://github.com/qutip/qutip/issues/1395#issuecomment-736660709,1,['benchmark'],['benchmark']
Testability,"Have you tried running the qutip tests? Do those fail? Again, I cannot reproduce the issue.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/508#issuecomment-237683040:33,test,tests,33,https://qutip.org,https://github.com/qutip/qutip/issues/508#issuecomment-237683040,1,['test'],['tests']
Testability,"Having any callable as a time-dependent components is good but the way here breaks the tests.; Moving the callable check after the check for `Cublic_Spline`, should fix the problem. `Cublic_Spline` is callable but not treated as a function.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1107#issuecomment-543197728:87,test,tests,87,https://qutip.org,https://github.com/qutip/qutip/pull/1107#issuecomment-543197728,1,['test'],['tests']
Testability,"Hello @BoxiLi , @jakelishman . I implemented the issue forms for Bug Reports, Feature Requests and Other Issues.; Please check them out!. You can test them if you want over here: [test issue forms](https://github.com/Chasmiccoder/Algos-for-Amigos/issues/new/choose)",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1728#issuecomment-981885178:146,test,test,146,https://qutip.org,https://github.com/qutip/qutip/pull/1728#issuecomment-981885178,2,['test'],['test']
Testability,"Hello @Ericgig, thanks a lot for your comments, it has been very instructive for me. I've solved most of the things, and I'm working with the tests your proposed and any other that comes to mind. . I have a question. When trying a test with <code>sesolve</code> and <code>e_ops=[lambda t, psi: qutip.expect(qutip.num(dim), psi)]</code> I get an <code>AttributeError</code> (krylovsolve seems to be working fine, however). It works if its not a list. This error comes from sesolve check of <code>op.isherm</code>:. ```python; elif isinstance(e_ops, list):; n_expt_op = len(e_ops); expt_callback = False; output.num_expect = n_expt_op; if n_expt_op == 0:; # fallback on storing states; opt.store_states = True; else:; for op in e_ops:; if op.isherm:; AttributeError: 'function' object has no attribute 'isherm'; ```. Im using qutip 4.6.3. Should I not compare to qutip solvers for this functionality?. Here is a running example:. ```python; from qutip import rand_herm, rand_ket, sesolve, expect, num, jmat, krylovsolve; import numpy as np. dim = 100; psi0 = rand_ket(dim); H = rand_herm(dim); tlist = np.linspace(0, 1, 100). e_op = lambda t, psi: expect(num(dim), psi). try:; out = sesolve(H, psi0, tlist, e_ops=e_op); except AttributeError:; print(""first one didn't work""); try:; out2 = sesolve(H, psi0, tlist, e_ops=[e_op]); except AttributeError:; print(""second one didn't work""); ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1043000945:142,test,tests,142,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1043000945,2,['test'],"['test', 'tests']"
Testability,Hello @Ericgig. I'm participating in the unitary hack. This looks like a good issue to start in qutip. Is necessary to add tests for `correalation.py ` once the function ` correlation_me_2t` has been changed? . Thanks!,MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1808#issuecomment-1146815109:123,test,tests,123,https://qutip.org,https://github.com/qutip/qutip/issues/1808#issuecomment-1146815109,1,['test'],['tests']
Testability,"Hello @hodgestar, we missed your last comment, but Nathan just notified us. We will get it all sorted out by wednesday at most. I leave a todolist to keep track of everything that @Ericgig mentioned. To-do. * [x] Include some tests like test_sesolve.py --> **Included tests with random Hamiltonian, ising transverse field and SHO. Both for states and expectation values. Lacking a testing example for callable e_ops**. * [x] Why <code>krylov_dim=30?</code> ? --> **There was a subtle physical reason, but we conclude its better to leave it as a free input without a predefined variable.**. * [x] <code>tolerance</code>, <code>store_states</code> and <code>store_final_state</code> --> **Changed as an Options qutip class, now tolerance is <code>Options.atol</code> property**. * [x] <code>e_ops</code> should also take a callable or list of mixed function and <code>Qobj</code> --> **Added support**. * [x] Remove support for <code>np.ndarray</code> --> **Removed for qutip cleanliness**. * [x] Assertion errors to specififc errors --> **Modified.**. * [x] Check that psi0 is a ket --> **Added**. * [x] If both <code>store_states</code> and <code>store_final_state</code> are True there is a small bug --> **Fixed the store twice problem**. * [x] Infinite loop at stagnant =0 --> **Added a raise ValueError if its <0.**. * [x] __all__ should be defined to filter functions seen by the user --> **set to =<code>krylovsolve</code> and <code>lanczos_algorithm</code>**. * [x] Why not call <code>_make_partitions</code> directly instead of having this method --> **Removed when deprecating <code>KSolve</code> class**. * [x] tlist is already stored, are those needed? (lines 152-155) --> **Removed when deprecating <code>KSolve</code> class**; * [x] The Result has a tag to the solver that created it --> **Added**; * [x] If tlist is empty, you can just return the empty results. --> **Now it returns an empty <code>Results()</code> instance.**; * [x] Can you use the <code>eigh</code> in <code>qutip.spar",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650:226,test,tests,226,https://qutip.org,https://github.com/qutip/qutip/pull/1739#issuecomment-1039192650,3,['test'],"['testing', 'tests']"
Testability,"Hello Eric,; I could have a look at it and add a test with the `scipy.special.sph_harm` .; Could you explain in more detail what errors you got?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1839#issuecomment-1079270356:49,test,test,49,https://qutip.org,https://github.com/qutip/qutip/issues/1839#issuecomment-1079270356,1,['test'],['test']
Testability,"Hello Harsh,. Thank for your interest in qutip. The most efficient way for us to interact with code is through Github.; Please attempt a draft PR for this. There are many test functions in our; project that you can use as a template. Assuming that you are interested in GSoC, when assessing candidates, an; ability to work independently is a key criteria. All the best with it, we look forward to reviewing your PR. Alex. On Tue, 21 Mar 2023, 18:06 Harsh Khilawala, ***@***.***>; wrote:. > @Ericgig <https://github.com/Ericgig> Thanks for getting back to me. I; > will refer to pytest tutorials on web but I found some code lines like; > following:; >; > @pytest.mark.parametrize; > @check_pngs_equal; > @pytest.fixture; > @pytest.mark.repeat(10)...; >; > Can you please let me know when and why were these used? Is there a; > resource also for this one?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/qutip/qutip/pull/2127#issuecomment-1478364599>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACGFP3MUPPBWDTOQGGBNOTLW5HU2ZANCNFSM6AAAAAAV7J6OKU>; > .; > You are receiving this because you are subscribed to this thread.Message; > ID: ***@***.***>; >",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2127#issuecomment-1478682804:171,test,test,171,https://qutip.org,https://github.com/qutip/qutip/pull/2127#issuecomment-1478682804,1,['test'],['test']
Testability,"Hello! Thank you for reporting the bug. This looks like it is the same bug posted to the mailing list, so let's combine discussion here. Running the same conda install and Python commands works for me, so we will need to dig a bit more. If you're using MKL and numpy 1.21.X it's possible that you're encountering this numpy bug https://github.com/numpy/numpy/issues/20356. It only occurs on certain Intel CPUs (those with AVX512 CPU extensions). I believe it is fixed in numpy 1.22, but I haven't had a chance to confirm that yet. If so, a quick solution is to try ""conda install nomkl qutip"" and confirm that that installs a no-MKL Blas and that the tests pass afterwards. If not, could you post the output of `qutip.abut()` in a comment here and I can try make some more suggestions.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1750#issuecomment-1005689691:651,test,tests,651,https://qutip.org,https://github.com/qutip/qutip/issues/1750#issuecomment-1005689691,1,['test'],['tests']
Testability,"Hello! This is the first of hopefully a few PRs to add measurement functions to qutip. This PR adds a new module named `qutip.measurement` that contains two functions:. * `measure(op, state)` that performs a classic quantum measurement as described in most introductory texts (measurement collapses a state to an eigenvector of an hermitian operator and the result is the corresponding eigenvalue). It is intended to simulate a simple measurement that could be performed in a real experiment. * `measurement_statistics(op, state)` returns information that is not available via a real experiment, but is nevertheless often useful in simulator (the eigenvalues and vectors or projection operators for the measurement operator and the probabilities of each measurement result). Both functions support either kets or density matrices and return sensible results based on the kind of input. Not currently supported:. * Partial measurements of a system.; * Destructive measurements (aka von Neumann measurements of the second kind); * Density matrix ensembles (applying the measurement probabilities to the density matrix rather than making a specific measurement); * Any custom support for qubit measurement (my plan is to add those to a `qutip.qip.measurements` module once we have the basics of this module agreed on). Questions / things I'd like feedback on:. * Do the inputs and outputs of the current functions seem intuitive / sensible?; * What are the most important other features to support?; * I don't want to have too many functions, but I also don't necessarily want to cram all possible kinds of measurements into one function. Any thoughts on how to split these up?; * What other unit tests should I be writing?; * I haven't given any thought to performance yet. Anything egregious I should fix now or any important cases to optimize for?. General stylistic feedback welcomed too.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/1090:1694,test,tests,1694,https://qutip.org,https://github.com/qutip/qutip/pull/1090,1,['test'],['tests']
Testability,Hello!!!. I installed python using anaconda on my mac and then installed qutip. When I run the installation test I always get. Fortran mcsolver: False. How can I install the Fortran compiler needed. Thanks. Regards!!. Sebastian,MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/391:108,test,test,108,https://qutip.org,https://github.com/qutip/qutip/issues/391,1,['test'],['test']
Testability,"Hello, i discovered an error in the implementation of the QFT. Namely when i want to obtain the gate sequence. The is when tha code runs this . if swapping is True:; for i in range(N // 2):; qc.add_gate(r""SWAP"", targets=[i], controls=[N - 1 - i, i]). it gives an error because the swap gate needs two targets and it is only passing one. Here is a test code. qft.qft_gate_sequence(N=2)",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/688:347,test,test,347,https://qutip.org,https://github.com/qutip/qutip/issues/688,1,['test'],['test']
Testability,"Hello,. I have some suggestions for improvements in some functions in `metrics.py`. I'd be happy to put together a PR. The current implementation of `average_gate_fidelity` is based on the Kraus representation of the input quantum channel. If the input is a superoperator, it is first converted to its Kraus representation (involving diagonalization) before computing the average gate fidelity, which sacrifices performance and accuracy. There is a direct formula starting from a superoperator, see, e.g., https://qiskit.org/documentation/stubs/qiskit.quantum_info.average_gate_fidelity.html relating the average gate fidelity to the process fidelity, and https://qiskit.org/documentation/stubs/qiskit.quantum_info.process_fidelity.html#qiskit.quantum_info.process_fidelity to compute that from a superoperator. I think it would be better to use that direct formula if the input is not already in Kraus form!. There is also a function `process_fidelity` in Qutip, but I'm having a hard time understanding what it's intended for. It doesn't seem to be the process fidelity explained in the Qiskit docs above. The arguments of Qutip's `process_fidelity` are called `U1` and `U2` suggesting they are expected to be unitary, but this is not checked. It is computed as `(U1 * U2).tr()`, which is not between 0 and 1, and doesn't give 1 as I'd expect if `U1==U2`. Does someone know the intended use of that function? If not, I'd implement the process fidelity as described in the Qiskit docs here, with several version depending on whether the input is Kraus, a superoperator, and maybe a chi matrix. Lastly, there is an issue with the tests - the lines; ```; class Test_dnorm:; # Skip dnorm tests if we don't have cvxpy or cvxopt available, since it; # depends on them.; cvxpy = pytest.importorskip(""cvxpy""); cvxopt = pytest.importorskip(""cvxopt""); ```; actually skip all the tests in the file if cvxpy is not available, not just the ones in the `Test_dnorm` class. The test output, if `cvxpy` is not insta",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1703:539,stub,stubs,539,https://qutip.org,https://github.com/qutip/qutip/issues/1703,2,['stub'],['stubs']
Testability,"Hello,. I'm using qutip alongside another library, which does something like this:; ```py; import logging; logger = logging.getLogger(); logger.setLevel(logging.DEBUG); ```; Im not entirely sure why it does so, but nevertheless debug messages don't show up anywhere, since the root logger doesn't print anything without it being configured. If you run the above code in Ipython but add `import qutip` before it, `logging.debug(""foo"")` prints to the stderr (without qutip it doesn't). So when I started using the library with qutip, suddenly all debug messages started getting printed to stderr. Apparently, this is somewhat on purpose, by looking at the code [here](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/logging_utils.py#L99). I'm not entirely sure what tho think about that, because as shown above this causes something unexpected. Nevertheless, I thought I could work around this by setting `log_handler = ""null""` in my settings file, but that in turn causes qutip to crash, because the rc loader [expects](https://github.com/qutip/qutip/blob/eff1c3a606cad64b8d16f3232181b0463d65d746/qutip/configrc.py#L97) `log_handler` to be a boolean for some reason. Also, it took me a while to find this, since the `log_handler` option is [not documented](http://qutip.org/docs/latest/guide/guide-settings.html?highlight=log). I'm using python 3.7.4 and QuTiP 4.4.1 installed with pip.",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1156:98,log,logging,98,https://qutip.org,https://github.com/qutip/qutip/issues/1156,8,['log'],"['log', 'logger', 'logging']"
Testability,"Hello. I'm working on a qutrit system (spin 1). Eventually need to do some pulse optimization but for testing I tried to propagate using a very simple Hamiltonian, namely just Sz^2 with D=2000. ; Units are µs for time (so MHz for frequency). . versions used:; ```python; matplotlib.pylab 1.16.4; qutip 4.4.1; matplotlib 3.1.1; numpy 1.16.4; scipy 1.3.1; CPython 3.7.3; IPython 7.5.0; ```. I solve with sesolve or mesolve with (|+. 1> + |0>)/sqrt(2) as initial state.; **expected:** quite trivially, population should stay 1/2 for any t for |+1> and |0>, 0 for |-1>; **result:** population of |+1> goes down linearly and |0> goes up ; a few observations: ; - if I make the coefficient of Sz^2 smaller, the population diverges less ; - with less time steps but same overall propagation time, I see the divergence less obviously because I see the beginning of it; - I am aware one can somehow optimize the number of time steps but this is about the convenient settings for the next steps for me; - I was thinking of increasing floating point precision or something like that but wasn't able to find a simple way to do that in the docs. it does not seem like having a coefficient on the order of 10000 or 10^5 time steps is that unreasonable, does it ?; anyway, this is about the right, convenient choice of unit for us here. any idea what's wrong ?. ```python; %load_ext watermark; import numpy as np; import scipy; import matplotlib; import matplotlib.pylab as plt; import qutip; %watermark -v --iversions; %matplotlib qt. #Spin 1 operators; S1_x = 1/np.sqrt(2)*qutip.Qobj([[0,1.,0],; [1.,0,1.],; [0,1.,0]]). S1_y = 1.j/np.sqrt(2)*qutip.Qobj([[0,-1.,0],; [1.,0,-1.],; [0,1.,0]]). S1_z = qutip.qdiags([1.,0,-1.], 0). #canonical basis with corresponding projectors; canon_100 = qutip.basis(3,0) #ket |+1>; canon_010 = qutip.basis(3,1) #ket |0>; canon_001 = qutip.basis(3,2) #ket |-1>. proj100 = qutip.ket2dm(canon_100); proj010 = qutip.ket2dm(canon_010); proj001 = qutip.ket2dm(canon_001). #Hamiltonian pa",MatchSource.ISSUE,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1085:102,test,testing,102,https://qutip.org,https://github.com/qutip/qutip/issues/1085,1,['test'],['testing']
Testability,"Here is another:; ```; ======================================================================; FAIL: Superoperator: Convert superoperator to Choi matrix and back.; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/home/travis/miniconda/envs/test-environment/lib/python3.5/site-packages/nose/case.py"", line 198, in runTest; self.test(*self.arg); File ""/home/travis/miniconda/envs/test-environment/lib/python3.5/site-packages/qutip-4.0.3-py3.5-linux-x86_64.egg/qutip/tests/test_superop_reps.py"", line 111, in test_ChoiKrausChoi; assert_((test_choi - choi_matrix).norm() < tol); File ""/home/travis/miniconda/envs/test-environment/lib/python3.5/site-packages/numpy/testing/utils.py"", line 77, in assert_; raise AssertionError(smsg); AssertionError; ```",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/621#issuecomment-270850810:306,test,test-environment,306,https://qutip.org,https://github.com/qutip/qutip/issues/621#issuecomment-270850810,8,"['Assert', 'test']","['AssertionError', 'test', 'test-environment', 'testing', 'tests']"
Testability,"Here is the method for getting OPENMP on OSX using homebrew:. brew install gcc --without-multilib (takes a couple of hours to build). after which you can install QuTiP using:. CC=gcc-6 python setup.py install. The tests run without any ABI incompatibilities so, with this method, all platforms should be able to use OPENMP and parallel tools.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/438#issuecomment-277468035:214,test,tests,214,https://qutip.org,https://github.com/qutip/qutip/issues/438#issuecomment-277468035,1,['test'],['tests']
Testability,"Hey @AGaliciaMartinez !. Thanks a lot for the reply. I tried it again on windows, but it didn't work.; In the end I just redid the whole thing with WSL and the tests ran like the wind (12 minutes).; All tests have passed, so that's great. Also, thanks for the tip (running tests on the changed files). That will help a lot. [ Will close this issue now ]",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1711#issuecomment-975751156:160,test,tests,160,https://qutip.org,https://github.com/qutip/qutip/issues/1711#issuecomment-975751156,3,['test'],['tests']
Testability,"Hey @Ericgig, if I understand correctly, you want to remove TestPyPi in this PR. Is that correct?",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2477#issuecomment-2199701824:60,Test,TestPyPi,60,https://qutip.org,https://github.com/qutip/qutip/pull/2477#issuecomment-2199701824,1,['Test'],['TestPyPi']
Testability,"Hey Simon and Eric,. - I've gone through and fixed (I hope!) the formatting and code issues due to the bad merge I did last week; - I've added in flimesolve_test.py as a test script for flimesolve; - I've tried to format everything according to PEP8, although there are likely some issues here. I've not had any formal training on PEP8 formatting (and python in general, to be honest), such that even with the help of the PEP8 style guide and Spyder's auto-formatting tool for PEP8, I'm sure there are some small fixes that need to be made; - I'm not entirely sure what Eric meant about separating out the physics from the data container, etc. I moved anything having to do with the precalculation of the Floquet states into its own function, but to kill this precalculation off entirely would severely hinder the speed of flimesolve, as an large advantage of Floquet theory comes from being able to accurately create the basis states at any time once you have the initial basis states. If this is still an issue (or if I've misinterpreted Eric's comment entirely and need to change something else in this regard), please let me know. Maybe we could have a live discussion over the issue, if that would work better. Thanks for your help!",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778:170,test,test,170,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1624220778,1,['test'],['test']
Testability,"Hey Simon,. I've been working on a few issues this last week that Eric pointed out. I actually did end up going back and just copying the master branch to my; local and copying in my changes, so hopefully that won't be an issue going; forward. I'll likely do it a second time before submitting another request; just to be sure there wasn't anything I changed that I've forgotten about. I've also been working on adding in a few tests. I'm mostly working on; mirroring the floquet_test test file as best I can, although it looks like; there are some slight changes I need to make that I've been working on. Beyond that, I've been working on adding a third system to this paper I'm; working on that describes FLiME. This third system should be able to show; changes based on the time_sense argument that aren't shown with the other; two systems, as those systems are so dominated by their primary frequency; that relaxing the secular approximation doesn't seem to change much in; terms of the results. The happy side effect is that I've had to fix some; issues with dimensionality that Eric mentioned, such that it ended up being; good bug testing for FLiMESolve as well. I'm hoping to have another pull request ready for review by the end of this; week or early next week, but I'm trying to really put everything under a; magnifying glass to the best of my ability, such that I don't leave Eric; wading through a bunch of formatting and code issues again. On Wed, Jul 5, 2023 at 3:33 PM Simon Cross ***@***.***> wrote:. > @magnamancer <https://github.com/magnamancer> I think part of the issue; > was that you merged qutip-5.0.X into master but that shouldn't have been; > done because master now contains the latest 5.X qutip code.; >; > Sorry to be a pain, but could you open a new new PR with just your; > changes? No need to be fancy -- just create a new branch from master, copy; > across the files you want to change, create PR.; >; > The VERSION file should not be changed.; >; > How hard would ",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/2186#issuecomment-1622617036:428,test,tests,428,https://qutip.org,https://github.com/qutip/qutip/pull/2186#issuecomment-1622617036,2,['test'],"['test', 'tests']"
Testability,"Hey guys, thanks for the feedback (this is the first time I have logged in to github in about a year!).. Just some replies to Paul's comments. The method is basically general, under certain assumptions about the bath spectrum density and bath temperature, so the 'system' can, in principle, be anything. I will also do so minor tweaking so it can deal with multiple baths and correlated baths. We will add some notebooks showing different examples and explaining when its valid later. . > Why is it not possible to directly calculate expectation values other than the coupling term?. Yeah there was a list of expectation values at some point, but it disappeared while we were making edits. Thanks for the reminder. Thanks for the other points, we will fix the various issues.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/pull/341#issuecomment-103750029:65,log,logged,65,https://qutip.org,https://github.com/qutip/qutip/pull/341#issuecomment-103750029,1,['log'],['logged']
Testability,"Hey, I tired solving this issue. I changed the add_vectors method such that it takes in an optional argument called 'color'. I created a dictionary called vector_color_specified which stores the vector-index and color as key-value pair. Then when plot_vectors is called, the color is taken from the dictionary if mentioned, otherwise the default value is used based on the cyclic color list which is already present. I tested my code and it works as you have mentioned above. So, is my approach right? Any advice would be helpful. This is the first open-source issue that I have taken up.",MatchSource.ISSUE_COMMENT,qutip,qutip,v5.0.4,https://github.com/qutip/qutip/issues/1292#issuecomment-654410345:419,test,tested,419,https://qutip.org,https://github.com/qutip/qutip/issues/1292#issuecomment-654410345,1,['test'],['tested']
