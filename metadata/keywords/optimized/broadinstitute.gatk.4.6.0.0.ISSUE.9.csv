quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"6](https://github.com/broadinstitute/gsa-unstable/issues/1508). ## Bug Report. ### Affected tool(s); HaplotypeCaller. ### Affected version(s); - [x] Latest public release version -- at least back to 3.1; - [x] Latest development/master branch as of Nov. 10, 2016; ### Description ; Addition of a rare SNP to a common deletion changes the representation of the deletion.; ![image](https://cloud.githubusercontent.com/assets/6578548/20180442/825d4a14-a728-11e6-9caa-bfad9e20378d.png); Top bam is the BWA-aligned bam for the sample with deletion and SNP, middle bam is the BWA-aligned bam for the sample with just the deletion, bottom bam is the bamout from calling the two together (artificial haplotypes in the top readgroup). The haplotype with the 9bp deletion stays the same, but the haplotype with the SNP turns into two separate deletions -- one of 1bp and one of 8bp. #### Steps to reproduce; Data where this was reported is sensitive, but I added a unit test that reproduces the problem using the haplotype sequences from the data (SWPairwiseAlignmentUnitTest::testLongHapDeletionNearSNP in the branch ldg_SWparamExamples). #### Expected behavior; CIGARs for the deletion haplotype sequences with and without the SNP should be the same. #### Actual behavior; CIGARs for the deletion haplotype sequences with and without the SNP have different deletions. Specifically, in this case, the SNP causes the deletion to be represented as two separate deletions seemingly to avoid the mismatch penalty. ---. @ldgauthier commented on [Thu Nov 10 2016](https://github.com/broadinstitute/gsa-unstable/issues/1508#issuecomment-259727960). I did find that using SWParameterSet.STANDARD_NGS as the parameters instead of CigarUtils.NEW_SW_PARAMETERS will resolve this particular case, but a more comprehensive analysis would be required before we make the change since this will impact a lot of other events too. ---. @ldgauthier commented on [Thu Nov 10 2016](https://github.com/broadinstitute/gsa-unstable/is",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2498:1000,test,test,1000,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2498,2,['test'],"['test', 'testLongHapDeletionNearSNP']"
Testability,"7.554 INFO GenomicsDBImport - Callset Map JSON file will be written to CDL-164-04P-1_0_249250621_genomicsdb/callset.json; 10:24:57.554 INFO GenomicsDBImport - Complete VCF Header will be written to CDL-164-04P-1_0_249250621_genomicsdb/vcfheader.vcf; 10:24:57.554 INFO GenomicsDBImport - Importing to array - CDL-164-04P-1_0_249250621_genomicsdb/genomicsdb_array; 10:24:57.554 INFO ProgressMeter - Starting traversal; 10:24:57.554 INFO ProgressMeter - Current Locus Elapsed Minutes Batches Processed Batches/Minute; 10:24:57.971 INFO GenomicsDBImport - Importing batch 1 with 1 samples; Buffer resized from 22726bytes to 32529; Buffer resized from 32529bytes to 32693; Buffer resized from 32693bytes to 32738; Buffer resized from 32738bytes to 32741; Buffer resized from 32741bytes to 32756; Buffer resized from 32756bytes to 32768; Buffer resized from 32768bytes to 32769; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f7288295359, pid=68672, tid=0x00007f72dc187700; #; # JRE version: OpenJDK Runtime Environment (8.0_171-b10) (build 1.8.0_171-b10); # Java VM: OpenJDK 64-Bit Server VM (25.171-b10 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C [libtiledbgenomicsdb8064358042335455262.so+0x155359] BufferVariantCell::set_cell(void const*)+0x99; #; # Core dump written. Default location: /mnt/isilon/cbmi/variome/rathik/mendelian_rnaseq/gatk_output/CDL-164-04P/core or core.68672; #; # An error report file with more information is saved as:; # /mnt/isilon/cbmi/variome/rathik/mendelian_rnaseq/gatk_output/CDL-164-04P/hs_err_pid68672.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #. ```. And here is the `hs_err_pid68672.log` file: ; [hs_err_pid68672.log](https://github.com/broadinstitute/gatk/files/2219689/hs_err_pid68672.log)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5045:11493,log,log,11493,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5045,4,['log'],['log']
Testability,"70%............80%...........90%............100%. Welcome to Gradle 7.5.1!. Here are the highlights of this release:; - Support for Java 18; - Support for building with Groovy 4; - Much more responsive continuous builds; - Improved diagnostics for dependency resolution. For more details see https://docs.gradle.org/7.5.1/release-notes.html. Starting a Gradle Daemon (subsequent builds will be faster). > Configure project :; Executing: git lfs pull --include src/main/resources/large. FAILURE: Build failed with an exception. * Where:; Build file '/build/gatk/src/gatk/build.gradle' line: 104. * What went wrong:; A problem occurred evaluating root project 'gatk'.; > Execution of ""git lfs pull --include src/main/resources/large"" failed with exit code: 2. git-lfs is required to build GATK but may not be installed. See https://github.com/broadinstitute/gatk#building for information on how to build GATK. * Try:; > Run with --stacktrace option to get the stack trace.; > Run with --info or --debug option to get more log output.; > Run with --scan to get full insights. * Get more help at https://help.gradle.org. BUILD FAILED in 17s; ```; However, I already install git-lfs; ```; git-lfs usr/; git-lfs usr/bin/; git-lfs usr/bin/git-lfs; git-lfs usr/share/; git-lfs usr/share/licenses/; git-lfs usr/share/licenses/git-lfs/; git-lfs usr/share/licenses/git-lfs/LICENSE; git-lfs usr/share/man/; git-lfs usr/share/man/man1/; git-lfs usr/share/man/man1/git-lfs-checkout.1.gz; git-lfs usr/share/man/man1/git-lfs-clean.1.gz; git-lfs usr/share/man/man1/git-lfs-clone.1.gz; git-lfs usr/share/man/man1/git-lfs-dedup.1.gz; git-lfs usr/share/man/man1/git-lfs-env.1.gz; git-lfs usr/share/man/man1/git-lfs-ext.1.gz; git-lfs usr/share/man/man1/git-lfs-fetch.1.gz; git-lfs usr/share/man/man1/git-lfs-filter-process.1.gz; git-lfs usr/share/man/man1/git-lfs-fsck.1.gz; git-lfs usr/share/man/man1/git-lfs-install.1.gz; git-lfs usr/share/man/man1/git-lfs-lock.1.gz; git-lfs usr/share/man/man1/git-lfs-locks.1.gz; git-l",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8320:1371,log,log,1371,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8320,1,['log'],['log']
Testability,70-3-3.tab; src/test/resources/org/broadinstitute/hellbender/tools/exome/dummy_cov_profile.txt; src/test/resources/org/broadinstitute/hellbender/tools/exome/dupReadsMini.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-calls.vcf; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-calls.vcf.gz; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-calls.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-targets.tsv; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-truth.vcf.gz; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-truth.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/gs-calls.vcf.gz; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-average-depth.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-average-fragment-depth.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-fragment-counts.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-base-calls.tsv; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-intervals_dups.bed; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-max-of-9.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-min-MQ-30.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-NA12778.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-NA12872.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-NA12878.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-NA12878.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-counts-no-intervals.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-read-count,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:32155,test,test,32155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"7077:7077; volumes:; - /data0/reference/hg19-ucsc/:/reference/hg19-ucsc/; - /data0/fastq/:/fastq/; - /data0/NGS-SparkGATK/NGS-SparkGATK/:/NGS-SparkGATK/; - /data/ngs/:/ngs/; - /data0/output/:/output/; spark-worker:; image: bde2020/spark-worker:2.2.0-hadoop2.8-hive-java8; networks:; - workbench; environment:; - SPARK_MASTER=spark://spark-master:7077; deploy:; mode: global; restart_policy:; condition: on-failure; labels:; traefik.docker.network: workbench; traefik.port: 8081. env_file:; - ./hadoop.env; volumes:; - reference-image:/reference_image. reference:; image: vzzarr/reference:hg19_img; networks:; - workbench; deploy:; mode: global; restart_policy:; condition: on-failure; tty: true #keeps the container alive; volumes:; - reference-image:/reference_image. volumes:; reference-image:. networks:; workbench:; external: true; ```; - Hadoop:; ```; version: '3'; services:; namenode:; image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8; networks:; - workbench; volumes:; - namenode:/hadoop/dfs/name; environment:; - CLUSTER_NAME=test; env_file:; - ./hadoop.env; deploy:; mode: replicated; replicas: 1; restart_policy:; condition: on-failure; labels:; traefik.docker.network: workbench; traefik.port: 50070; ports:; - 8334:50070; volumes:; - /data0/reference/hg19-ucsc/:/reference/hg19-ucsc/; - /data0/output/:/output/; - /data/ngs/:/ngs/; datanode:; image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8; networks:; - workbench; volumes:; - datanode:/hadoop/dfs/data; environment:; SERVICE_PRECONDITION: ""namenode:50070""; # depends_on:; # - namenode; env_file:; - ./hadoop.env; deploy:; mode: global; restart_policy:; condition: on-failure; labels:; traefik.docker.network: workbench; traefik.port: 50075. volumes:; datanode:; namenode:. networks:; workbench:; external: true; ```; the datanodes and namenode and spark master and workers are all working.; My hardware resources are:; 16 core and 1Tb memory ssd and 56Gb ram for 3 machines. I have this problem when I launch the version(GA",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4820:2517,test,test,2517,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4820,1,['test'],['test']
Testability,"756355.tsv --contig_ploidy_prior_table=contig_ploidy_priort_hg38.tsv `--output_model_path=cohort_output/normal_cohort-model`. `Stdout:`; `Stderr: Traceback (most recent call last):; File ""/tmp/cohort_determine_ploidy_and_depth.8087328354193956874.py"", line 67, in <module>; ""--caller_update_convergence_threshold"": 1e-3; File ""/home/grayl/.local/lib/python3.6/site-packages/gcnvkernel/tasks/inference_task_base.py"", line 638, in expose_args ""arguments; possible choices are: {1}"".format(override_default_arg, valid_args); AssertionError: Initializer argument of which the default is to be overridden --num_thermal_advi_iters is not a valid initializer arguments; possible choices are: {'--track_model_params_every', '--learning_rate', '--disable_annealing', '--random_seed', '--adamax_beta2', '--convergence_snr_trigger_threshold', '--track_model_params', '--sampler_smoothing_window', '--param_tracker_config', '--caller_update_convergence_threshold', '--caller_summary_statistics_reducer', '--caller_admixing_rate', '--initial_temperature', '--self', '--convergence_snr_averaging_window', '--max_advi_iter_first_epoch', '--num_thermal_epochs', '--disable_sampler', '--min_training_epochs', '--max_calling_iters', '--max_advi_iter_subsequent_epochs', '--adamax_beta1', '--log_emission_sampling_median_rel_error', '--total_grad_norm_constraint', '--convergence_snr_countdown_window', '--log_emission_samples_per_round', '--max_training_epochs', '--log_emission_sampling_rounds', '--disable_caller', '--obj_n_mc'} at org.broadinstitute.hellbender.utils.python.PythonExecutorBase.getScriptException(PythonExecutorBase.java:75) at org.broadinstitute.hellbender.utils.runtime.ScriptExecutor.executeCuratedArgs(ScriptExecutor.java:126) at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeArgs(PythonScriptExecutor.java:170) at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeScript(PythonScriptExecutor.java:151)`. #### Steps to reproduce; `gatk DetermineGerml",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5738:1990,Assert,AssertionError,1990,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5738,1,['Assert'],['AssertionError']
Testability,78.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/calculatetargetcoverage/test_reference.dict; src/test/resources/org/broadinstitute/hellbender/tools/exome/calculatetargetcoverage/test_reference.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/exome/conversion/allelicbalancecaller/cell_line_full-sim-final.seg; src/test/resources/org/broadinstitute/hellbender/tools/exome/create-pon-some-targets.bed; src/test/resources/org/broadinstitute/hellbender/tools/exome/detectcoveragedropout; src/test/resources/org/broadinstitute/hellbender/tools/exome/detectcoveragedropout/HCC1143T-100_27M_37M.seg; src/test/resources/org/broadinstitute/hellbender/tools/exome/detectcoveragedropout/test.tn.HCC1143T-100_27M_37M.tsv; src/test/resources/org/broadinstitute/hellbender/tools/exome/discover-germline-input-to-xhmm-zscores.pl; src/test/resources/org/broadinstitute/hellbender/tools/exome/discover-germline-xhmm-output-4-6-70-3-3.tab; src/test/resources/org/broadinstitute/hellbender/tools/exome/dummy_cov_profile.txt; src/test/resources/org/broadinstitute/hellbender/tools/exome/dupReadsMini.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-calls.vcf; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-calls.vcf.gz; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-calls.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-targets.tsv; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-truth.vcf.gz; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/eval-truth.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/exome/eval/gs-calls.vcf.gz; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-average-depth.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-average-fragment-depth.output; src/test/resources/org/broadinstitute/hellbender/tools/exome/exome-fragment-counts.out,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:31204,test,test,31204,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,8.395 DEBUG ConfigFactory - annotation_packages = [org.broadinstitute.hellbender.tools.walkers.annotator]; 21:05:38.395 DEBUG ConfigFactory - cloudPrefetchBuffer = 40; 21:05:38.395 DEBUG ConfigFactory - cloudIndexPrefetchBuffer = -1; 21:05:38.395 DEBUG ConfigFactory - createOutputBamIndex = true; 21:05:38.396 INFO GermlineCNVCaller - Deflater: IntelDeflater; 21:05:38.396 INFO GermlineCNVCaller - Inflater: IntelInflater; 21:05:38.396 INFO GermlineCNVCaller - GCS max retries/reopens: 20; 21:05:38.396 INFO GermlineCNVCaller - Requester pays: disabled; 21:05:38.396 INFO GermlineCNVCaller - Initializing engine; 21:05:38.399 DEBUG ScriptExecutor - Executing:; 21:05:38.399 DEBUG ScriptExecutor - python; 21:05:38.399 DEBUG ScriptExecutor - -c; 21:05:38.399 DEBUG ScriptExecutor - import gcnvkernel; 21:06:10.792 DEBUG ScriptExecutor - Result: 0; 21:06:10.792 INFO GermlineCNVCaller - Done initializing engine; 21:06:10.826 INFO GermlineCNVCaller - Intervals specified...; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 21:06:12.479 INFO FeatureManager - Using codec IntervalListCodec to read file file:///paedyl01/disk1/louisshe/work/NGS/wdl/test_workflow_cnv/germline/cromwell-executions/CNVGuts/-947966988/Homo_sapiens_assembly38.bed.preprocessed.filtered.scattered.0154.interval_list; 21:06:12.640 DEBUG FeatureDataSource - Cache statistics for FeatureInput /paedyl01/disk1/louisshe/work/NGS/wdl/test_workflow_cnv/germline/cromwell-executions/CNVGermlineCohort8/Homo_sapiens_assembly38.bed.preprocessed.filtered.scattered.0154.interval_list:/paedyl01/disk1/louisshe/work/NGS/wdl/test_workflow_cnv/germline/cromwell-executions/CNVGermli947966988/Homo_sapiens_assembly38.bed.preprocessed.filtered.scattered.0154.interval_list:; 21:06:12.640 DEBUG FeatureCache - Cache hit rate was 0.00% (0 out of 0 total queries),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8952:5494,log,logger,5494,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8952,1,['log'],['logger']
Testability,"82 contains a task of very large size (119 KB). The maximum recommended task size is 100 KB. 18:03:07.612 WARN TaskSetManager:70 - Stage 182 contains a task of very large size (119 KB). The maximum recommended task size is 100 KB.; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000000010a5a9401, pid=2425, tid=8963; #; # JRE version: Java(TM) SE Runtime Environment (8.0_91-b14) (build 1.8.0_91-b14); # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.91-b14 mixed mode bsd-amd64 compressed oops); # Problematic frame:; # V [libjvm.dylib+0x1a9401]; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /Users/louisb/Workspace/gatk-protected/hs_err_pid2425.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #; ```. [hs_err_pid2425.log.txt](https://github.com/broadinstitute/gatk-protected/files/448383/hs_err_pid2425.log.txt). @yfarjoun Is this similar to the crash you saw a while back?. ---. @yfarjoun commented on [Wed Aug 31 2016](https://github.com/broadinstitute/gatk-protected/issues/659#issuecomment-243946864). no. this is different. On Wed, Aug 31, 2016 at 3:27 PM, Louis Bergelson notifications@github.com; wrote:. > I got a segfault while running CreatePanelOfNormalsIntegrationTest.; > Subsequent runs were unable to reproduce it.; > ; > 18:03:07.573 WARN TaskSetManager:70 - Stage 181 contains a task of very large size (119 KB). The maximum recommended task size is 100 KB.; > Test: Test method testAllTargetsHDF5PoNCreationSpark[0](null, src/test/resources/org/broadinstitute/hellbender/tools/exome/create-pon-control-full.pcov)(org.broadinstitute.hellbender.tools.exome.CreatePanelOfNormalsIntegrationTest) produced standard out/err: 18:03:07.612 WARN TaskSetManager:70 - Stage 182 contains a task of very large size",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2883:1664,log,log,1664,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2883,1,['log'],['log']
Testability,"84 --num_samples_copy_ratio_approx=200; 23:44:54.590 INFO GermlineCNVCaller - Shutting down engine; [August 3, 2024 at 11:44:54 PM CST] org.broadinstitute.hellbender.tools.copynumber.GermlineCNVCaller done. Elapsed time: 1.04 minutes.; Runtime.totalMemory()=2147483648; org.broadinstitute.hellbender.utils.python.PythonScriptExecutorException: ; python exited with 2; Command Line: python /tmp/cohort_denoising_calling.6786136740079319091.py --ploidy_calls_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/ploidy/ploidy-calls --output_calls_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/cohort_all/cohort_30-calls --output_tracking_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/cohort_all/cohort_30-tracking --random_seed=1984 --modeling_interval_list=/tmp/intervals15539986661449841065.tsv --output_model_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/cohort_all/cohort_30-model --enable_explicit_gc_bias_modeling=True --read_count_tsv_files /tmp/V300033254_96.rc5147399438960401577.tsv /tmp/V300033256_95.rc16057077786486760637.tsv /tmp/V300033254_97.rc18322117796550461836.tsv --psi_s_scale=1.000000e-04 --mapping_error_rate=1.000000e-02 --depth_correction_tau=1.000000e+04 --q_c_expectation_mode=hybrid --num_samples_copy_ratio_approx=200 --max_bias_factors=5 --psi_t_scale=1.000000e-03 --log_mean_bias_std=1.000000e-01 --init_ard_rel_unexplained_variance=1.000000e-01 --num_gc_bins=20 --gc_curve_sd=1.000000e+00 --active_class_padding_hybrid_mode=50000 --enable_bias_factors=True --disable_bias_factors_in_active_class=False --p_alt=1.000000e-06 --cnv_coherence_length=1.000000e+04 --max_copy_number=5 --p_active=0.010000 --class_coherence_length=10000.000000 --learning_rate=1.000000e-02 --adamax_beta1=9.000000e-01 --adamax_beta2=9.900000e-01 --log_emission_samples_per_round=50 --log_emission_sampling_rounds=10 --log_emission_sampling_median_rel_er",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8938:40957,test,test,40957,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8938,1,['test'],['test']
Testability,85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:773); 	at org.testng.TestRunner.run(TestRunner.java:623); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); 	at org.testng.SuiteRunner.run(SuiteRunner.java:259); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); 	at org.testng.TestNG.run(TestNG.java:1018); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingI,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349:5216,Test,TestNG,5216,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349,1,['Test'],['TestNG']
Testability,86 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	... 58 more; 22:05:55.986 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] ; 22:05:55.986 [LIFECYCLE] [org.gradle.internal.buildevents.BuildResultLogger] ; 22:05:55.986 [LIFECYCLE] [org.gradle.internal.buildevents.BuildResultLogger] BUILD FAILED; 22:05:55.986 [LIFECYCLE] [org.gradle.internal.buildevents.BuildResultLogger] ; 22:05:55.987 [LIFECYCLE] [org.gradle.internal.buildevents.BuildResultLogger] Total time: 29.153 secs; ```. ```; root# su - portage; portage$ cd /scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999/; portage$ git lfs pull --include src/main/resources/large; No default remote. Errors logged to /scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999/.git/lfs/objects/logs/20180420T221032.955218097.log; Use `git lfs logs last` to view the log.; portage$ cat /scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999/.git/lfs/objects/logs/20180420T221032.955218097.log; git-lfs/2.3.4 (GitHub; linux amd64; go 1.10); git version 2.16.3. $ git-lfs pull --include src/main/resources/large; No default remote. No remotes defined. Current time in UTC: ; 2018-04-20 20:10:32. ENV:; LocalWorkingDir=/scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999; LocalGitDir=/scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999/.git; LocalGitStorageDir=/scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999/.git; LocalMediaDir=/scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999/.git/lfs/objects; LocalReferenceDir=; TempDir=/scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-9999/.git/lfs/tmp; ConcurrentTransfers=3; TusTransfers=false; BasicTransfersOnly=false; SkipDownloadErrors=false; FetchRecentAlways=false; FetchRecentRefsDays=7; FetchRecentCommitsDays=0; FetchRecentRefsIncludeRemotes=true; PruneOffsetDays=3; PruneVerifyRemoteAlways=false; PruneRemoteName=origin; LfsStorageDir=/scratch/var/tmp/portage/sci-biology/gatk-9999/work/gatk-999,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4687:15328,log,log,15328,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4687,1,['log'],['log']
Testability,878.snippet_with_unmapped.bam.bai; src/test/resources/org/broadinstitute/hellbender/engine/CEUTrio.HiSeq.WGS.b37.NA12878.snippet_with_unmapped.cram.crai; src/test/resources/org/broadinstitute/hellbender/engine/cramtestWrongRef.dict; src/test/resources/org/broadinstitute/hellbender/engine/cramtestWrongRef.fasta.fai; src/test/resources/org/broadinstitute/hellbender/engine/cram_with_bai_index.cram.bai; src/test/resources/org/broadinstitute/hellbender/engine/cram_with_crai_index.cram.crai; src/test/resources/org/broadinstitute/hellbender/engine/example_features.bed.idx; src/test/resources/org/broadinstitute/hellbender/engine/example_variants_noSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/example_variants_withSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test_gvcf.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test_withSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithIndex.vcf; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithOutIndex.vcf; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_multiple_intervals.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_multiple_intervals_with_unmapped.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_single_interval.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_unmapped_only.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:9261,test,test,9261,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"9 18:31:06 INFO storage.BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy; 18/01/09 18:31:06 INFO storage.BlockManagerMaster: Registering BlockManager BlockManagerId(driver, 192.168.1.4, 44190, None); 18/01/09 18:31:06 INFO storage.BlockManagerMasterEndpoint: Registering block manager 192.168.1.4:44190 with 2004.6 MB RAM, BlockManagerId(driver, 192.168.1.4, 44190, None); 18/01/09 18:31:06 INFO storage.BlockManagerMaster: Registered BlockManager BlockManagerId(driver, 192.168.1.4, 44190, None); 18/01/09 18:31:06 INFO storage.BlockManager: external shuffle service port = 7337; 18/01/09 18:31:06 INFO storage.BlockManager: Initialized BlockManager: BlockManagerId(driver, 192.168.1.4, 44190, None); 18/01/09 18:31:06 INFO handler.ContextHandler: Started o.s.j.s.ServletContextHandler@60c8909a{/metrics/json,null,AVAILABLE,@Spark}; 18/01/09 18:31:06 INFO scheduler.EventLoggingListener: Logging events to hdfs://tele-1:8020/user/spark/spark2ApplicationHistory/application_1515493209401_0001; 18/01/09 18:31:09 WARN cluster.YarnSchedulerBackend$YarnSchedulerEndpoint: Container marked as failed: container_1515493209401_0001_01_000002 on host: tele-6. Exit status: 1. Diagnostics: Exception from container-launch.; Container id: container_1515493209401_0001_01_000002; Exit code: 1; Stack trace: ExitCodeException exitCode=1: ; 	at org.apache.hadoop.util.Shell.runCommand(Shell.java:601); 	at org.apache.hadoop.util.Shell.run(Shell.java:504); 	at org.apache.hadoop.util.Shell$ShellCommandExecutor.execute(Shell.java:786); 	at org.apache.hadoop.yarn.server.nodemanager.DefaultContainerExecutor.launchContainer(DefaultContainerExecutor.java:213); 	at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:302); 	at org.apache.hadoop.yarn.server.nodemanager.containermanager.launcher.ContainerLaunch.call(ContainerLaunch.java:82); 	at java.util.concurrent.FutureTask.run(FutureTask.java:262);",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4112:15832,Log,Logging,15832,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4112,1,['Log'],['Logging']
Testability,9 bp); 23:44:43.167 DEBUG GenomeLocParser - chrUn_GL000216v2 (176608 bp); 23:44:43.167 DEBUG GenomeLocParser - chrUn_GL000218v1 (161147 bp); 23:44:43.167 DEBUG GenomeLocParser - chrEBV (171823 bp); 23:44:43.173 INFO GermlineCNVCaller - Aggregating read-count file /gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/counts/V300033254_96.tsv (1 / 3); 23:44:43.345 INFO GermlineCNVCaller - Aggregating read-count file /gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/counts/V300033256_95.tsv (2 / 3); 23:44:43.521 INFO GermlineCNVCaller - Aggregating read-count file /gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/counts/V300033254_97.tsv (3 / 3); 23:44:43.683 DEBUG ScriptExecutor - Executing:; 23:44:43.683 DEBUG ScriptExecutor - python; 23:44:43.683 DEBUG ScriptExecutor - /tmp/cohort_denoising_calling.6786136740079319091.py; 23:44:43.683 DEBUG ScriptExecutor - --ploidy_calls_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/ploidy/ploidy-calls; 23:44:43.683 DEBUG ScriptExecutor - --output_calls_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/cohort_all/cohort_30-calls; 23:44:43.683 DEBUG ScriptExecutor - --output_tracking_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/cohort_all/cohort_30-tracking; 23:44:43.683 DEBUG ScriptExecutor - --random_seed=1984; 23:44:43.683 DEBUG ScriptExecutor - --modeling_interval_list=/tmp/intervals15539986661449841065.tsv; 23:44:43.684 DEBUG ScriptExecutor - --output_model_path=/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/cohort_all/cohort_30-model; 23:44:43.684 DEBUG ScriptExecutor - --enable_explicit_gc_bias_modeling=True; 23:44:43.684 DEBUG ScriptExecutor - --read_count_tsv_files; 23:44:43.684 DEBUG ScriptExecutor - /tmp/V300033254_96.rc5147399438960401577.tsv; 23:44:43.684 DEBUG ScriptExecutor - /tmp/V300033256_95.rc1605707,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8938:34086,test,test,34086,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8938,1,['test'],['test']
Testability,9.raw.fastq; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.merged.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.merged.rmdup-contigs.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.merged.rmdup.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.fq; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/utils/SVContext.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/splitNCigarReadsSnippet.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.bam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.cram; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.dict; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.bam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.cram; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.dict; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.sam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.sam; src/test/resources/org/broadinstitute/hellbender/tools/validation/marked.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam; src/test/resources/org/broadinstitute/hellbender/tools/validation/picard.marked.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:44696,test,test,44696,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"91ec:/app#; ; ; Ran to write on FSx for luster mount on ec2:; ; [root@ip-10-76-63-158 genomicsdb]# dd if=/dev/zero of=/gfb-dev-sv-fsx-results-us-east-2/cromwell-execution/GATKSVPipelineBatch/087bd722-5f51-43eb-a89e-70846a1da89f/call-GATKSVPipelinePhase1/GATKSVPipelinePhase1/38595c13-b874-4753-a554-81c09f6449f8/call-GatherBatchEvidence/GatherBatchEvidence/c8120761-6d9f-4bd3-b450-f528b7be817c/call-BAFFromGVCFs/BAFFromGVCFs/d5032666-9c09-4857-a8d7-41042927cf89/call-ImportGVCFs/shard-389/genomicsdb/test.img bs=1G count=5 oflag=dsync; 5+0 records in; 5+0 records out; 5368709120 bytes (5.4 GB) copied, 23.5143 s, 228 MB/s; [root@ip-10-76-63-158 genomicsdb]#. We also ran the jobs with strace enabled and we found that there are millions of FUTEX_WAIT_PRIVATE processes while we run the jobs for fsx writing as compared to just 26 when we write to EBS. # Local EBS writing strace log (Ran around 3.5 hrs); [root@ip-10-76-62-193 importvcf-job]# egrep ""FUTEX_WAIT_PRIVATE, 0, NULL"" ./local-write-logs/strace_local_writing.log | wc -l; 26. # FSx strace logs; # --reader-threads 5 (Ran around 7 hours); [root@ip-10-76-62-193 importvcf-job]# egrep ""FUTEX_WAIT_PRIVATE, 0, NULL"" ./fsx-write-logs/strace_fsx_writing.log | wc -l; 24378265. # --reader-threads 1; [root@ip-10-76-62-193 importvcf-job]# egrep ""FUTEX_WAIT_PRIVATE, 0, NULL"" ./strace_thread_1_fsx.txt | wc -l; 8745113. #--reader-threads 2; [root@ip-10-76-62-193 importvcf-job]# egrep ""FUTEX_WAIT_PRIVATE, 0, NULL"" ./strace_thread_2_fsx.txt | wc -l; 13946622. #--reader-threads 10; [root@ip-10-76-62-193 importvcf-job]# egrep ""FUTEX_WAIT_PRIVATE, 0, NULL"" ./strace_thread_10_fsx.txt | wc -l; 13535883; [root@ip-10-76-62-193 importvcf-job]#. The last 3 i.e. tests for thread 1, 2 and 10 were only executed for 20 mins and in those 20 minutes it only loaded around 220 MBs to the genomicsdb. Note that the above executions were done on different EC2 instances with 4 CPU and 30 GB memory (each running 1 job only at a given time). FSx executions were ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7646:3606,log,logs,3606,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7646,1,['log'],['logs']
Testability,92.AS.MateRankSum.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12892.AS.MateRankSum.chr20snippet.withoutIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/VariantAnnotatorEngine/one_entry_source.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/combine-gvcf-wrong-ref-input1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/combine-gvcf-wrong-ref-input2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/convertToBasePairResolution.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/gvcf.basepairResolution.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/gvcfExample1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/gvcfExample2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/IntervalTest.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/NA12878.AS.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/NA12892.AS.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.1.copy.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.1.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.2.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDeletionRestrictToStartExpected.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.many.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.many.haploid.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:49431,test,test,49431,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"931-Combine-GVCF-generate-java-lang-NullPointerException. Command:; time ""$gatk"" CombineGVCFs \; -G StandardAnnotation \; -G AS_StandardAnnotation \; -R ""$ref_gen""/ucsc.hg19.fasta \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/A200272.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/A200273.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/A200274.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/A200313.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/A200314.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/A200315.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/PID20-006.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/8_samples_20200819/gvcfs/PID20-007.HC.g.vcf.gz \; -V /paedwy/disk1/yangyxt/wes/backup_gvcfs/all_wes_samples.g.vcf \; -O /paedwy/disk1/yangyxt/wes/backup_gvcfs/all_wes_samples_plus_${sample_batch}.g.vcf.gz && echo ""Combine_gvcfs done"". Error Log:; ```; 12:01:36.798 WARN GATKAnnotationPluginDescriptor - Redundant enabled annotation group (StandardAnnotation) is enabled for this tool by default; 12:01:36.824 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/yangyxt/software/gatk-4.1.8.1/gatk-package-4.1.8.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; Aug 24, 2020 12:01:37 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 12:01:37.108 INFO CombineGVCFs - ------------------------------------------------------------; 12:01:37.108 INFO CombineGVCFs - The Genome Analysis Toolkit (GATK) v4.1.8.1; 12:01:37.108 INFO CombineGVCFs - For support and documentation go to https://software.broadinstitute.org/gatk/; 12:01:37.108 INFO CombineGVCFs - Executing as yangyxt@paedyl01 on Linux v3.10.0-1062.18.1.el7.x86_64 amd64; 12:01:37.108 INFO CombineGVCFs - Java runtime: Java HotSpot(TM) 64-Bit Serve",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6766:1508,Log,Log,1508,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6766,1,['Log'],['Log']
Testability,"951765478004985534.so+0x132d] smithWatermanBackTrack(dnaSeqPair*, int, int, int, int, int*, int)+0x1bd; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /home/gatk/hs_err_pid849.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #; ```. **RELEVANT FILES**; [hs_err_pid100.log](https://github.com/broadinstitute/gatk/files/6203288/hs_err_pid100.log); [hs_err_pid164.log](https://github.com/broadinstitute/gatk/files/6203289/hs_err_pid164.log); [hs_err_pid274.log](https://github.com/broadinstitute/gatk/files/6203290/hs_err_pid274.log); [hs_err_pid400.log](https://github.com/broadinstitute/gatk/files/6203291/hs_err_pid400.log); [hs_err_pid482.log](https://github.com/broadinstitute/gatk/files/6203292/hs_err_pid482.log); [hs_err_pid711.log](https://github.com/broadinstitute/gatk/files/6203293/hs_err_pid711.log); [hs_err_pid735.log](https://github.com/broadinstitute/gatk/files/6203294/hs_err_pid735.log); [hs_err_pid801.log](https://github.com/broadinstitute/gatk/files/6203295/hs_err_pid801.log); [hs_err_pid825.log](https://github.com/broadinstitute/gatk/files/6203296/hs_err_pid825.log); [hs_err_pid849.log](https://github.com/broadinstitute/gatk/files/6203297/hs_err_pid849.log); [otherFiles.zip](https://github.com/broadinstitute/gatk/files/6203305/otherFiles.zip); [in2510-8.orientationFilter.vcf.txt](https://github.com/broadinstitute/gatk/files/6203356/in2510-8.orientationFilter.vcf.txt); *VCF extension appended with .txt to satisfy GitHub's upload requirements*. #### Expected behavior; Worked on 7 other files generated with the same pipeline. . #### Actual behavior; Unsure why this last one is causing a segfault. The VCF included is not",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7162:6854,log,log,6854,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7162,1,['log'],['log']
Testability,": Bucket is requester pays bucket but no user project provided.; at com.google.cloud.storage.spi.v1.HttpStorageRpc.translate(HttpStorageRpc.java:229); at com.google.cloud.storage.spi.v1.HttpStorageRpc.get(HttpStorageRpc.java:439); at com.google.cloud.storage.StorageImpl$5.call(StorageImpl.java:242); at com.google.cloud.storage.StorageImpl$5.call(StorageImpl.java:239); at shaded.cloud_nio.com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:105); at shaded.cloud_nio.com.google.cloud.RetryHelper.run(RetryHelper.java:76); at shaded.cloud_nio.com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); at com.google.cloud.storage.StorageImpl.get(StorageImpl.java:238); at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.checkAccess(CloudStorageFileSystemProvider.java:736); at java.nio.file.Files.exists(Files.java:2385); at htsjdk.samtools.util.IOUtil.assertFileIsReadable(IOUtil.java:497); at htsjdk.samtools.util.IOUtil.assertPathsAreReadable(IOUtil.java:525); at picard.fingerprint.CrosscheckFingerprints.doWork(CrosscheckFingerprints.java:449); at picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:305); at org.broadinstitute.hellbender.cmdline.PicardCommandLineProgramExecutor.instanceMain(PicardCommandLineProgramExecutor.java:25); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:163); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:206); at org.broadinstitute.hellbender.Main.main(Main.java:292); Caused by: shaded.cloud_nio.com.google.api.client.googleapis.json.GoogleJsonResponseException: 400 Bad Request; {; ""code"" : 400,; ""errors"" : [ {; ""domain"" : ""global"",; ""message"" : ""Bucket is requester pays bucket but no user project provided."",; ""reason"" : ""required""; } ],; ""message"" : ""Bucket is requester pays bucket but no user project provided.""; }; at shaded.cloud_nio.com.google.api.client.googleapis.json.GoogleJsonResponseException.from(GoogleJsonResponseException.java:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7489:1341,assert,assertPathsAreReadable,1341,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7489,1,['assert'],['assertPathsAreReadable']
Testability,": could not create Vfs.Dir from url. ignoring the exception and continuing; org.reflections.ReflectionsException: could not create Vfs.Dir from url, no matching UrlType was found [file:/Library/KeyAccess/KeyAccess.app/Contents/SharedFrameworks/KeyAccess.framework/KeyAccess]; either use fromURL(final URL url, final List<UrlType> urlTypes) or use the static setDefaultURLTypes(final List<UrlType> urlTypes) or addDefaultURLTypes(UrlType urlType) with your specialized UrlType.; at org.reflections.vfs.Vfs.fromURL(Vfs.java:109); at org.reflections.vfs.Vfs.fromURL(Vfs.java:91); at org.reflections.Reflections.scan(Reflections.java:237); at org.reflections.Reflections.scan(Reflections.java:204); at org.reflections.Reflections.<init>(Reflections.java:129); at com.google.cloud.genomics.dataflow.utils.DataflowWorkarounds.registerGenomicsCoders(DataflowWorkarounds.java:90); at org.broadinstitute.hellbender.tools.dataflow.transforms.InsertSizeMetricsTransformUnitTest.testInsertSizeMetricsTransform(InsertSizeMetricsTransformUnitTest.java:49); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:659); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:845); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1153); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:771); at org.testng.TestRunner.run(TestRunner.java:621); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/609:1348,test,testInsertSizeMetricsTransform,1348,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/609,1,['test'],['testInsertSizeMetricsTransform']
Testability,: htsjdk.tribble.TribbleException: Exception encountered in worker thread.; at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:153); at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:126); at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:108); at org.broadinstitute.hellbender.tools.walkers.filters.VariantFiltrationIntegrationTest.testClusteredSnps(VariantFiltrationIntegrationTest.java:36); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runT,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1638:1508,test,testng,1508,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1638,1,['test'],['testng']
Testability,"://github.com/broadinstitute/gatk/blob/master/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleFeatureWalkerIntegrationTest.java):. ```java; ...; @Test; public void testExampleFeatureWalkerWithIntervals() throws IOException {; IntegrationTestSpec testSpec = new IntegrationTestSpec(; "" -R "" + hg19MiniReference +; "" -I "" + TEST_DATA_DIRECTORY + ""reads_data_source_test1.bam"" +; "" -F "" + TEST_DATA_DIRECTORY + ""example_features.bed"" +; "" -L 1 "" +; "" -auxiliaryVariants "" + TEST_DATA_DIRECTORY + ""feature_data_source_test.vcf"" +; "" -O %s"",; Arrays.asList(TEST_OUTPUT_DIRECTORY + ""expected_ExampleFeatureWalkerIntegrationTestWithIntervals_output.txt""); );; testSpec.executeTest(""testExampleIntervalWalker"", this);; }; ```. Where `expected_ExampleFeatureWalkerIntegrationTestWithIntervals_output.txt` is just the first feature from the [`expected_ExampleFeatureWalkerIntegrationTest_output.txt`](https://github.com/broadinstitute/gatk/blob/master/src/test/resources/org/broadinstitute/hellbender/tools/examples/expected_ExampleFeatureWalkerIntegrationTest_output.txt):. ```; Current feature: htsjdk.tribble.bed.FullBEDFeature:1:11-300; 	Overlapping reference bases: NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN. 	Overlapping read at 1:200-275; 	Overlapping read at 1:205-280; 	Overlapping read at 1:210-285. 	Overlapping variant at 1:100-100. Ref: G* Alt(s): [A]; 	Overlapping variant at 1:199-200. Ref: GG* Alt(s): [G]; 	Overlapping variant at 1:200-200. Ref: G* Alt(s): [A]; 	Overlapping variant at 1:203-206. Ref: GGGG* Alt(s): [G]; 	Overlapping variant at 1:280-280. Ref: G* Alt(s): [A]; 	Overlapping variant at 1:284-286. Ref: GGG* Alt(s): [G]; 	Overlapping variant at 1:285-285. Ref: G* Alt(s): [A]; 	Overlapping variant at 1:286-286. ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2310:1057,test,test,1057,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2310,1,['test'],['test']
Testability,:121); 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.initStorage(CloudStorageFileSystemProvider.java:153); 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.getPath(CloudStorageFileSystemProvider.java:208); 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.getPath(CloudStorageFileSystemProvider.java:85); 	at java.nio.file.Paths.get(Paths.java:143); 	at org.broadinstitute.hellbender.utils.gcs.BucketUtilsTest.testNoIllegalArgumentException(BucketUtilsTest.java:38); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2707:1766,test,testng,1766,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2707,1,['test'],['testng']
Testability,:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94); 	at com.sun.proxy.$Proxy2.stop(Unknown Source); 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.jav,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:3749,test,testng,3749,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,2,['test'],['testng']
Testability,":241815307_C_T:286:53,44:47,41:1082; chr2 241815308 . A G 50 PASS platforms=3;platformnames=Illumina,CG,10X;datasets=4;datasetnames=HiSeqPE100x,CGnormal,10XChromium,HiSeqMatePair;callsets=6;callsetnames=HiSeqPE100xSentieon,CGnormal,HiSeqPE100xfreebayes,10XSentieonhaplo,HiSeqMatePairSentieon,HiSeqMatePairfreebayes;callable=CS_HiSeqPE100xSentieon_callable,CS_CGnormal_callable,CS_HiSeqPE100xfreebayes_callable,CS_10XSentieonhaplo_callable;filt=CS_CGnormal_filt GT:PS:DP:ADALL:AD:GQ 1|1:241815307_C_T:287:0,98:0,89:1; ```; </details>. while the test callset has the following single record:. <details>; <summary> Test callset </summary>. ```; chr2 241815307 . CA TG 1756.77 PASS AC=1;AF=0.5;AN=2;BaseQRankSum=-0.802;ClippingRankSum=0.521;DP=85;ExcessHet=3.0103;FS=2.902;MLEAC=1;MLEAF=0.5;MQ=60.0;MQRankSum=0.0;QD=20.67;ReadPosRankSum=-1.858;SOR=0.571 GT:AD:DP:F1R2:F2R1:GQ:PL 0/1:37,48:85:16,25,0:21,23,0:99:1785,0,1406; ```; </details>. Next, I looked at the reads from the haplotype assembly BAM supporting each of the three possible alleles in the test callset:. | Allele | # of reads |; | --- | --- |; | ref (`CA`) | 1 read |; | alt1 (`CG`) | 36 reads |; | alt 2 (`TG`) | 48 reads |. You can see the sum of the count of reads in the table is equal to the depth and sum of allelic depths in the VCF record. It is clear from the haplotype assembly BAM that the call should be `1/2` (`CG/TG`), but the finall call is `0/2` (`CA/TG`). . I then re-ran `HaplotypeCaller` without the `--max-mnp-distance 5` argument and got the variant call I expected, which matches the GIAB variant call:. <details>; <summary> Test callset without `--max-mnp-distance 5` </summary>. ```; chr2 241815307 . C T,<NON_REF> 1717.77 . BaseQRankSum=-1.137;ClippingRankSum=1.185;DP=83;ExcessHet=3.0103;MLEAC=1,0;MLEAF=0.500,0.00;MQRankSum=0.000;RAW_MQandDP=298800,83;ReadPosRankSum=-1.967 GT:AD:DP:F1R2:F2R1:GQ:PGT:PID:PL:PS:SB 0|1:36,47,0:83:15,24,0:21,23,0:99:0|1:241815307_C_T:1746,0,1375,1855,1516,3371:241815307:15,21,24,2",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5696:2110,test,test,2110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5696,1,['test'],['test']
Testability,:246); at org.apache.spark.broadcast.TorrentBroadcast$$anonfun$8.apply(TorrentBroadcast.scala:293); at org.apache.spark.util.Utils$.tryWithSafeFinally(Utils.scala:1337); at org.apache.spark.broadcast.TorrentBroadcast$.unBlockifyObject(TorrentBroadcast.scala:294); at org.apache.spark.broadcast.TorrentBroadcast$$anonfun$readBroadcastBlock$1.apply(TorrentBroadcast.scala:226); at org.apache.spark.util.Utils$.tryOrIOException(Utils.scala:1303); ... 30 more; Caused by: java.lang.ClassNotFoundException: htsjdk.samtools.reference.AbstractFastaSequenceFile$$Lambda$85/2028177366; at java.lang.Class.forName0(Native Method); at java.lang.Class.forName(Class.java:348); at com.esotericsoftware.kryo.util.DefaultClassResolver.readName(DefaultClassResolver.java:154); ... 50 more; 19/12/16 07:06:57 Thread-2 INFO ShutdownHookManager: Shutdown hook called; ```. I can reproduce a similar error locally:. ```; gatk HaplotypeCallerSpark \; -R src/test/resources/large/human_g1k_v37.20.21.fasta \; -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam \; --emit-ref-confidence GVCF \; -O out.vcf \; -- \; --spark-runner SPARK \; --spark-master spark://wm419-830:7077; ```; ```; Caused by: com.esotericsoftware.kryo.KryoException: java.lang.IndexOutOfBoundsException: Index -2 out of bounds for length 299; Serialization trace:; positionLock (sun.nio.ch.FileChannelImpl); channel (htsjdk.samtools.reference.IndexedFastaSequenceFile); sequenceFile (org.broadinstitute.hellbender.utils.fasta.CachingIndexedFastaSequenceFile); val$taskReferenceSequenceFile (org.broadinstitute.hellbender.tools.HaplotypeCallerSpark$1); 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:144); 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:543); 	at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:731); 	at com.esotericsoftware.kryo.serializers.ObjectField.read(ObjectField.java:125); 	at com.esotericsoftware.kryo.serializers.FieldSerializer.read(Fiel,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6341:3434,test,test,3434,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6341,1,['test'],['test']
Testability,:29); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateRun(TestRunner.java:773); 	at org.testng.TestRunner.run(TestRunner.java:623); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); 	at org.testng.SuiteRunner.run(SuiteRunner.java:259); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); 	at org.testng.TestNG.run(TestNG.java:1018); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.refle,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349:4827,test,testng,4827,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349,1,['test'],['testng']
Testability,:362); at java.security.AccessController.doPrivileged(Native Method); at java.net.URLClassLoader.findClass(URLClassLoader.java:361); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349); at java.lang.ClassLoader.loadClass(ClassLoader.java:411); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at org.apache.logging.log4j.core.config.plugins.util.PluginRegistry.decodeCacheFiles(PluginRegistry.java:181); at org.apache.logging.log4j.core.config.plugins.util.PluginRegistry.loadFromMainClassLoader(PluginRegistry.java:119); at org.apache.logging.log4j.core.config.plugins.util.PluginManager.collectPlugins(PluginManager.java:132); at org.apache.logging.log4j.core.pattern.PatternParser.<init>(PatternParser.java:131); at org.apache.logging.log4j.core.pattern.PatternParser.<init>(PatternParser.java:112); at org.apache.logging.log4j.core.layout.PatternLayout.createPatternParser(PatternLayout.java:220); at org.apache.logging.log4j.core.layout.PatternLayout.<init>(PatternLayout.java:138); at org.apache.logging.log4j.core.layout.PatternLayout.<init>(PatternLayout.java:57); at org.apache.logging.log4j.core.layout.PatternLayout$Builder.build(PatternLayout.java:446); at org.apache.logging.log4j.core.config.AbstractConfiguration.setToDefault(AbstractConfiguration.java:518); at org.apache.logging.log4j.core.config.DefaultConfiguration.<init>(DefaultConfiguration.java:49); at org.apache.logging.log4j.core.LoggerContext.<init>(LoggerContext.java:75); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.createContext(ClassLoaderContextSelector.java:171); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.locateContext(ClassLoaderContextSelector.java:145); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.getContext(ClassLoaderContextSelector.java:70); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.getContext(ClassLoaderContextSelector.jav,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5126:3884,log,logging,3884,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5126,1,['log'],['logging']
Testability,:42:41.991 INFO GenomicsDBImport - HTSJDK Version: 2.18.1; 23:42:41.991 INFO GenomicsDBImport - Picard Version: 2.18.16; 23:42:41.992 INFO GenomicsDBImport - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 23:42:41.992 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 23:42:41.992 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 23:42:41.992 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 23:42:41.992 INFO GenomicsDBImport - Deflater: IntelDeflater; 23:42:41.992 INFO GenomicsDBImport - Inflater: IntelInflater; 23:42:41.992 INFO GenomicsDBImport - GCS max retries/reopens: 20; 23:42:41.992 INFO GenomicsDBImport - Requester pays: disabled; 23:42:41.992 INFO GenomicsDBImport - Initializing engine; 23:42:44.099 INFO IntervalArgumentCollection - Processing 115639695 bp from intervals; 23:42:44.102 INFO GenomicsDBImport - Done initializing engine; 23:42:44.276 INFO GenomicsDBImport - Vid Map JSON file will be written to /home/WangBS/Analyses/vcf/test/chr02/vidmap.json; 23:42:44.276 INFO GenomicsDBImport - Callset Map JSON file will be written to /home/WangBS/Analyses/vcf/test/chr02/callset.json; 23:42:44.276 INFO GenomicsDBImport - Complete VCF Header will be written to /home/WangBS/Analyses/vcf/test/chr02/vcfheader.vcf; 23:42:44.276 INFO GenomicsDBImport - Importing to array - /home/WangBS/Analyses/vcf/test/chr02/genomicsdb_array; 23:42:44.276 INFO ProgressMeter - Starting traversal; 23:42:44.276 INFO ProgressMeter - Current Locus Elapsed Minutes Batches Processed Batches/Minute; 23:42:45.830 INFO GenomicsDBImport - Importing batch 1 with 63 samples; Buffer resized from 37294 bytes to 65464; Buffer resized from 37294 bytes to 65511; Buffer resized from 37293 bytes to 65539; Buffer resized from 37294 bytes to 65447; .....; .....; Buffer resized from 65538 bytes to 65539; Buffer resized from 65538 bytes to 65539; Buffer resized from 65538 bytes to 65539; 06:50:14.219 INFO ProgressMeter - Qrob,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5865:2884,test,test,2884,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5865,1,['test'],['test']
Testability,:446); at org.apache.logging.log4j.core.config.AbstractConfiguration.setToDefault(AbstractConfiguration.java:518); at org.apache.logging.log4j.core.config.DefaultConfiguration.<init>(DefaultConfiguration.java:49); at org.apache.logging.log4j.core.LoggerContext.<init>(LoggerContext.java:75); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.createContext(ClassLoaderContextSelector.java:171); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.locateContext(ClassLoaderContextSelector.java:145); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.getContext(ClassLoaderContextSelector.java:70); at org.apache.logging.log4j.core.selector.ClassLoaderContextSelector.getContext(ClassLoaderContextSelector.java:57); at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:140); at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:41); at org.apache.logging.log4j.LogManager.getContext(LogManager.java:182); at org.apache.logging.log4j.LogManager.getLogger(LogManager.java:455); at org.broadinstitute.hellbender.utils.Utils.<clinit>(Utils.java:77); at org.broadinstitute.hellbender.Main.<clinit>(Main.java:45); at java.lang.Class.forName0(Native Method); at java.lang.Class.forName(Class.java:348); at org.apache.spark.util.Utils$.classForName(Utils.scala:230); at org.apache.spark.deploy.SparkSubmit$.org$apache$spark$deploy$SparkSubmit$$runMain(SparkSubmit.scala:739); at org.apache.spark.deploy.SparkSubmit$.doRunMain$1(SparkSubmit.scala:180); at org.apache.spark.deploy.SparkSubmit$.submit(SparkSubmit.scala:205); at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:119); at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala); Caused by: java.lang.ClassNotFoundException: org.apache.logging.log4j.core.appender.AbstractAppender; at java.net.URLClassLoader.findClass(URLClassLoader.java:381); at java.lang.ClassLoader.loadClass(ClassLoader.java:42,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5126:5122,Log,LogManager,5122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5126,1,['Log'],['LogManager']
Testability,":44:1:689:1:1; chr22	19895477	CNV_chr22_19895477_19901476	N	<DUP>	2.39	.	END=19901476	GT:CN:NP:QA:QS:QSE:QSS	./.:3:6:1:2:1:0; chr22	19901477	CNV_chr22_19901477_19946476	N	<DEL>	114.12	.	END=19946476	GT:CN:NP:QA:QS:QSE:QSS	1/1:0:45:0:114:1:1; chr22	19946477	CNV_chr22_19946477_19971476	N	<DUP>	4.69	.	END=19971476	GT:CN:NP:QA:QS:QSE:QSS	./.:3:25:0:5:2:0; chr22	19971477	CNV_chr22_19971477_20003000	N	<DEL>	96.55	.	END=20003000	GT:CN:NP:QA:QS:QSE:QSS	1/1:0:32:0:97:2:2. ```. #### Actual behavior. - `gatkgermlinecnvcaller_genotyped-intervals-COHORT_0.woTimestamp.vcf` (`##contig` cut from header and only first 5 chr22 CNVs present). ```; ##fileformat=VCFv4.2; ##FORMAT=<ID=CN,Number=1,Type=Integer,Description=""Copy number maximum a posteriori value"">; ##FORMAT=<ID=CNLP,Number=.,Type=Integer,Description=""Copy number log posterior (in Phred-scale) rounded down"">; ##FORMAT=<ID=CNQ,Number=1,Type=Integer,Description=""Genotype call quality as the difference between the best and second best phred-scaled log posterior scores"">; ##FORMAT=<ID=GT,Number=1,Type=Integer,Description=""Genotype"">; ##INFO=<ID=END,Number=1,Type=Integer,Description=""End coordinate of the variant"">; ##contig=<ID=chr1,length=248956422,assembly=GRCh38.d1.vd1>; ...; ##contig=<ID=HPV-mSD2,length=7300,assembly=GRCh38.d1.vd1>; ##source=PostprocessGermlineCNVCalls; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	E07002_normal; chr1	10000	CNV_chr1_10000_10999	N	<DEL>,<DUP>	.	.	END=10999	GT:CN:CNLP:CNQ	0:2:30,32,0,33,33,33:30; chr1	11000	CNV_chr1_11000_11999	N	<DEL>,<DUP>	.	.	END=11999	GT:CN:CNLP:CNQ	0:2:30,32,0,33,33,33:30; chr1	12000	CNV_chr1_12000_12999	N	<DEL>,<DUP>	.	.	END=12999	GT:CN:CNLP:CNQ	0:2:30,32,0,33,33,33:30; chr1	13000	CNV_chr1_13000_13999	N	<DEL>,<DUP>	.	.	END=13999	GT:CN:CNLP:CNQ	0:2:30,32,0,33,33,33:30; chr1	14000	CNV_chr1_14000_14999	N	<DEL>,<DUP>	.	.	END=14999	GT:CN:CNLP:CNQ	0:2:29,32,0,33,33,33:29; chr1	15000	CNV_chr1_15000_15999	N	<DEL>,<DUP>	.	.	END=15999	GT:CN:CNLP:CNQ	0:2:29,32,0,33,33,33:29; chr1	1",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8628:19622,log,log,19622,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8628,2,['log'],['log']
Testability,":46:08.946 INFO PostprocessGermlineCNVCalls - Analyzing shard 2 / 8...; 23:46:09.725 INFO PostprocessGermlineCNVCalls - Analyzing shard 3 / 8...; 23:46:10.380 INFO PostprocessGermlineCNVCalls - Analyzing shard 4 / 8...; 23:46:11.132 INFO PostprocessGermlineCNVCalls - Analyzing shard 5 / 8...; 23:46:11.901 INFO PostprocessGermlineCNVCalls - Analyzing shard 6 / 8...; 23:46:12.730 INFO PostprocessGermlineCNVCalls - Analyzing shard 7 / 8...; 23:46:14.288 INFO PostprocessGermlineCNVCalls - Analyzing shard 8 / 8...; 23:46:15.617 INFO PostprocessGermlineCNVCalls - Generating segments...; 01:48:30.792 INFO PostprocessGermlineCNVCalls - Parsing Python output...; 01:48:30.875 INFO PostprocessGermlineCNVCalls - Writing segments VCF file to /srv/scratch/testardqu/CNV_Hyperexome/segments_joint/genotyped-segments-SAMPLE_6.vcf.gz...; 01:48:46.860 INFO PostprocessGermlineCNVCalls - Generating denoised copy ratios...; 01:48:47.487 INFO PostprocessGermlineCNVCalls - Writing denoised copy ratios to /srv/scratch/testardqu/CNV_Hyperexome/ratios_joint/denoised-copy-ratios-SAMPLE_6.tsv...; 01:48:47.773 INFO PostprocessGermlineCNVCalls - PostprocessGermlineCNVCalls complete.; 01:48:47.773 INFO PostprocessGermlineCNVCalls - Shutting down engine; [December 6, 2022 1:48:47 AM GMT] org.broadinstitute.hellbender.tools.copynumber.PostprocessGermlineCNVCalls done. Elapsed time: 123.29 minutes.; Runtime.totalMemory()=7257194496; Using GATK jar /gatk/gatk-package-4.3.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xms4g -Djava.io.tmpdir=/srv/scratch/testardqu/CNV_Hyperexome/tmp/ -jar /gatk/gatk-package-4.3.0.0-local.jar PostprocessGermlineCNVCalls --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_1_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_2_of_8-model/ --mod",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8183:10911,test,testardqu,10911,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8183,1,['test'],['testardqu']
Testability,:56:25.355 INFO GermlineCNVCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 10:56:25.356 INFO GermlineCNVCaller - Deflater: IntelDeflater; 10:56:25.357 INFO GermlineCNVCaller - Inflater: IntelInflater; 10:56:25.358 INFO GermlineCNVCaller - GCS max retries/reopens: 20; 10:56:25.358 INFO GermlineCNVCaller - Using google-cloud-java patch 6d11bef1c81f885c26b2b56c8616b7a705171e4f from https://github.com/droazen/google-cloud-java/tree/dr_all_nio_fixes; 10:56:25.360 WARN GermlineCNVCaller -. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!. Warning: GermlineCNVCaller is a BETA tool and is not yet ready for use in production. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!. 10:56:25.361 INFO GermlineCNVCaller - Initializing engine; 10:56:54.347 INFO GermlineCNVCaller - Done initializing engine; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 10:56:55.287 INFO GermlineCNVCaller - Retrieving intervals from first read-count file (hdf5/grexome0426.hdf5)...; 10:56:55.384 INFO GermlineCNVCaller - No GC-content annotations for intervals found; explicit GC-bias correction will not be performed...; 10:56:55.482 INFO GermlineCNVCaller - Running the tool in the COHORT mode...; 10:56:55.485 INFO GermlineCNVCaller - Validating and aggregating data from input read-count files...; 10:56:55.511 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0426.hdf5 (1 / 387); 10:56:55.812 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0342.hdf5 (2 / 387); 10:56:56.274 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0316.hdf5 (3 / 387); 10:56:56.635 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0338.hdf5 (4 / 387); 10:56:57.092 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0360.hdf5 (5 / 387); 1,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5053:3028,log,logging,3028,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5053,1,['log'],['logging']
Testability,":65); at java.lang.Long.parseLong(Long.java:589); at java.lang.Long.valueOf(Long.java:803); at org.broadinstitute.hellbender.utils.codecs.gtf.GencodeGtfFeature.<init>(GencodeGtfFeature.java:224); at org.broadinstitute.hellbender.utils.codecs.gtf.GencodeGtfExonFeature.<init>(GencodeGtfExonFeature.java:19); at org.broadinstitute.hellbender.utils.codecs.gtf.GencodeGtfExonFeature.create(GencodeGtfExonFeature.java:23); at org.broadinstitute.hellbender.utils.codecs.gtf.GencodeGtfFeature$FeatureType$4.create(GencodeGtfFeature.java:777); at org.broadinstitute.hellbender.utils.codecs.gtf.GencodeGtfFeature.create(GencodeGtfFeature.java:320); at org.broadinstitute.hellbender.utils.codecs.gtf.AbstractGtfCodec.decode(AbstractGtfCodec.java:138); at org.broadinstitute.hellbender.utils.codecs.gtf.AbstractGtfCodec.decode(AbstractGtfCodec.java:23); at htsjdk.tribble.TribbleIndexedFeatureReader$QueryIterator.readNextRecord(TribbleIndexedFeatureReader.java:501); ... 43 more; `; #### Steps to reproduce. [test.somatic.vcf.gz](https://github.com/broadinstitute/gatk/files/5094900/test.somatic.vcf.gz). I upload my VCF file here. The reference is hg19 downloaded from UCSC. The data sources is downloaded from funcotator official website (somatic). You can simply run this command to reproduce this error:; `gatk Funcotator --variant test.somatic.vcf --reference ucsc.hg19.fasta --ref-version hg19 --data-sources-path funcotator_dataSources.v1.7.20200521s --output test.maf --output-file-format MAF; `; #### Expected behavior; Successfully run and output a MAF file. #### Actual behavior; Throw out an error and an MAF file with only header; ----. ## Feature request. ### Tool(s) or class(es) involved; _Tool/class name(s), special parameters?_. ### Description; _Specify whether you want a modification of an existing behavior or addition of a new capability._; _Provide **examples**, **screenshots**, where appropriate._. ----. ## Documentation request. ### Tool(s) or class(es) involved; _Tool/class name(s",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6758:26032,test,test,26032,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6758,1,['test'],['test']
Testability,:72); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.util.Swapper.swap(Swapper.java:38); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionRepor,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2802:11772,Log,LogToClient,11772,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2802,1,['Log'],['LogToClient']
Testability,:72); 22:05:55.980 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.util.Swapper.swap(Swapper.java:38); 22:05:55.980 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72); 22:05:55.981 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.BuildExceptionRepor,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4687:10514,Log,LogToClient,10514,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4687,1,['Log'],['LogToClient']
Testability,:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93); 	at com.sun.proxy.$Proxy,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2797:2428,Test,TestNGTestClassProcessor,2428,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2797,3,['Test'],['TestNGTestClassProcessor']
Testability,":; ```; Running Test: Test method loadIndex(org.broadinstitute.hellbender.BwaMemIntegrationTest). Gradle suite > Gradle test > org.broadinstitute.hellbender.BwaMemIntegrationTest > loadIndex FAILED; java.lang.UnsatisfiedLinkError: 'boolean org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createReferenceIndex(java.lang.String, java.lang.String, java.lang.String)'; at org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createReferenceIndex(Native Method); at org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createIndexImageFromFastaFile(BwaMemIndex.java:227); at org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createIndexImageFromFastaFile(BwaMemIndex.java:196); at org.broadinstitute.hellbender.BwaMemIntegrationTest.loadIndex(BwaMemIntegrationTest.java:49); Running Test: Test method testChimericUnpairedMapping(org.broadinstitute.hellbender.BwaMemIntegrationTest). Gradle suite > Gradle test > org.broadinstitute.hellbender.BwaMemIntegrationTest > testChimericUnpairedMapping SKIPPED; Running Test: Test method testPerfectUnpairedMapping(org.broadinstitute.hellbender.BwaMemIntegrationTest). Gradle suite > Gradle test > org.broadinstitute.hellbender.BwaMemIntegrationTest > testPerfectUnpairedMapping SKIPPED; ```. This test fails because some JAR wasn't built:; ```; Running Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest); Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest) produced standard out/err: No local jar was found, please build one by running. Gradle suite > Gradle test > org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest > testPipeForPicardTools STANDARD_ERROR; No local jar was found, please build one by running; Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest) produced standard out/err:. Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engin",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8940:2921,test,testChimericUnpairedMapping,2921,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8940,4,"['Test', 'test']","['Test', 'testChimericUnpairedMapping', 'testPerfectUnpairedMapping']"
Testability,":AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068168 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068169 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068170 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068171 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068172 . G *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068173 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068174 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; ```. GenomicsDBImport run like this:. ```; ./gatk GenomicsDBImport -R src/test/resources/large/human_g1k_v37.20.21.fasta -L 20 -V src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk4.g.vcf -genomicsdb-workspace-path spanDelWorkspace; ./gatk SelectVariants -V gendb://spanDelWorkspace -R src/test/resources/large/human_g1k_v37.20.21.fasta -O test.g.vcf -L 20; ```. Returns the following output:. ```; 20 10068158 . GTGTATATATATA G,<NON_REF> . . BaseQRankSum=-6.520e-01;ClippingRankSum=0.00;DP=29;ExcessHet=3.01;MQRankSum=0.328;RAW_MQ=93364.00;ReadPosRankSum=-2.530e-0; 1 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068159 . T *,<NON_REF> . . DP=29 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068160 . GTATATATATATGTA G,*,<NON_REF> . . DP=28;ExcessHet=3.01;RAW_MQ=87005.00 GT:AD:DP:GQ:PL:SB ./.:0,2,4,0:6:53:735,162,131,102,0,53,507,174,108,472:0,0,; 2,4; 20 10068161 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:53:735,162,131,507,174,472:0,0,2,4; 20 10068162 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:53:735,162,131,507,174,472:0,0,2,4; 20 10068163 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5160:3340,test,testGVCFMode,3340,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5160,1,['test'],['testGVCFMode']
Testability,; 	at org.apache.spark.scheduler.Task.run(Task.scala:86); 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); 	at java.lang.Thread.run(Thread.java:745). **This is the stack I get when the test completes but fails (note that the expected line count appears to not match the line count of the expected output file in the repo): **. java.lang.AssertionError: line counts expected [2629] but found [507]; 	at org.testng.Assert.fail(Assert.java:94); 	at org.testng.Assert.failNotEquals(Assert.java:496); 	at org.testng.Assert.assertEquals(Assert.java:125); 	at org.testng.Assert.assertEquals(Assert.java:372); 	at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.assertEqualTextFiles(IntegrationTestSpec.java:211); 	at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.assertEqualTextFiles(IntegrationTestSpec.java:190); 	at org.broadinstitute.hellbender.tools.examples.ExampleAssemblyRegionWalkerSparkIntegrationTest.testExampleAssemblyRegionWalker(ExampleAssemblyRegionWalkerSparkIntegrationTest.java:29); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); 	at org.testng.TestRunner.privateR,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349:3597,assert,assertEqualTextFiles,3597,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349,1,['assert'],['assertEqualTextFiles']
Testability,; 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:520); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1035); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.Te,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6522:3676,test,testng,3676,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6522,1,['test'],['testng']
Testability,; 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:521); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1104); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.Te,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2088,test,testng,2088,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,1,['test'],['testng']
Testability,; 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterService.waitForPreviousBatchCompletion(AsynchronousStreamWriterService.java:96); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.dispatchABatch(AsynchronousStreamWriterServiceUnitTest.java:79); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.testAsyncWriteInBatches(AsynchronousStreamWriterServiceUnitTest.java:35); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4024:1163,test,testng,1163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4024,1,['test'],['testng']
Testability,; 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); 	at org.gradle.int,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2797:2315,Test,TestNG,2315,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2797,3,['Test'],['TestNG']
Testability,"; 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: com.intel.genomicsdb.GenomicsDBException: Could not load genomicsdb native library; 	at com.intel.genomicsdb.GenomicsDBImporter.<clinit>(GenomicsDBImporter.java:72); 	... 37 more; ```. if you dig into it more you get down to the following error:; ```; /private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dylib: dlopen(/private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dylib, 1): ; Library not loaded: /opt/local/lib/libuuid.16.dylib; Referenced from: /private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dylib; Reason: image not found; ```. It seems like there is a dylib included correctly in the jar, but it's looking for libuuid.16.dylib at runtime. libu",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4062:2806,Test,TestNG,2806,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4062,1,['Test'],['TestNG']
Testability,"; 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); ```. #### Steps to reproduce; These are the arguments I used (the input bam is on the file system):. ```; final String[] args = {; ""-I"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/Filtering/IGV/198489_vs_811158/sorted.mt.1.bam"",; ""-"" + M2ArgumentCollection.TUMOR_SAMPLE_SHORT_NAME, ""198489"",; ""-R"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/MitochondriaOnlyFastas/Homo_sapiens_assembly38.mt_only.fasta"",; ""-O"", outputVcf.getAbsolutePath(),; ""--max-reads-per-alignment-start"", ""0"",; ""-default-af"", ""0"",; ""--initial-tumor-lod"", ""0"",; ""--tumor-lod-to-emit"", ""0"",; ""--min-pruning"", ""10"",; ""--annotation"", ""StrandBiasBySample"",; //""--ignore-itr-artifacts"", ""true"",; };; ```. I tried it with and without `--ignore-itr-artifacts` but got the same error both times. @davidbenjamin A",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5036:4534,Test,TestNG,4534,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5036,1,['Test'],['TestNG']
Testability,"; - 317 remove excess header values in VCF extract (#7786); - correct auth in split intervals (#7790); - Add code to (optionally) zero pad the vcf filename. (#7783); - LoadData `maxRetries` parameterized, default increased [VS-383] (#7791); - Update to latest version of ah_var_store gatk override jar (#7793); - GvsUnified WDL to wrap the 6 core GVS WDLs [VS-382] (#7789); - Pinned typing_extensions python package to 4.1.1 to fix conda environment. (#7802); - WeightedSplitInterval fixes [VS-384] [VS-332] (#7795); - Replace Travis with GithubActions (#7754); - Docker build only lfs pulls main/src/resources/large (#7727); - Clean up gatk jars -- looks like we are not passing them properly in the extract (#7788); - Fix typo that broke git lfs pull (#7806); - Document AoU SOP (up to the VAT) [VS-63] (#7807); - Incident VS 365 clinvar classification fix (#7769); - VS-390. Add precision and sensitivity wdl (#7813); - Quickstart based integration test [VS-357] (#7812); - 365 vat python testing additions (#7756); - VS 396 clinvar grabs too many values (#7823); - Added a test to validate WDLs in the scripts directory. (#7826) (#7829); - VAT Performance / Reliability Improvements (#7828); - VAT naming conventions [VS-410] (#7827); - Rc remove ad from vat (#7832); - bugfix, we were trying to grep a binary file (#7837); - Cleanup scripts/variantstore [VS-414] (#7834); - Merge VAT TSV files into single bgzipped file [VS-304] (#7848); - Handle fully and partially loaded samples [VS-262] [VS-258] (#7843); - Ingest Error Handling Fixes [VS-261] (#7841); - First cut at a python notebook to validate inputs. (#7845); - Compute filter scatter [VS-392] (#7852); - remove withdrawn req (#7844); - Improve import error message [VS-437] (#7855); - Fix Input Validation python notebook (#7853); - Add VAT Validation check that aa_change and exon_number are consistently set. (#7850); - Ingest 10K [VS-344] (#7860); - X/Y chromosome reweighting for better extract shard runtime balance [VS-389] (#7868",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8248:23809,test,test,23809,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8248,6,['test'],"['test', 'testing']"
Testability,"; 11:15:57.329 INFO FilterMutectCalls - Requester pays: disabled; 11:15:57.329 INFO FilterMutectCalls - Initializing engine; 11:15:57.537 INFO FeatureManager - Using codec VCFCodec to read file file:///tmp/tmp.8lRGFREUhm/MT.vcf.gz; 11:15:57.553 INFO FilterMutectCalls - Done initializing engine; 11:15:57.599 INFO ProgressMeter - Starting traversal; 11:15:57.599 INFO ProgressMeter - Current Locus Elapsed Minutes Variants Processed Variants/Minute; 11:15:57.599 INFO FilterMutectCalls - Starting pass 0 through the variants; 11:15:57.637 INFO FilterMutectCalls - Finished pass 0 through the variants; 11:15:57.657 INFO FilterMutectCalls - Shutting down engine; [November 7, 2019 11:15:57 AM CET] org.broadinstitute.hellbender.tools.walkers.mutect.filtering.FilterMutectCalls done. Elapsed time: 0.01 minutes.; Runtime.totalMemory()=2148007936; java.lang.IllegalArgumentException: log10 p: Values must be non-infinite and non-NAN; 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.logSumExp(NaturalLogUtils.java:84); 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.normalizeLog(NaturalLogUtils.java:51); 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.clusterProbabilities(SomaticClusteringModel.java:203); 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.learnAndClearAccumulatedData(SomaticClusteringModel.java:122); 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.Mutect2FilteringEngine.learnParameters(Mutect2FilteringEngine.java:156); 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.FilterMutectCalls.afterNthPass(FilterMutectCalls.java:157); 	at org.broadinstitute.hellbender.engine.MultiplePassVariantWalker.traverse(MultiplePassVariantWalker.java:44); 	at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:1048); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:139); 	at org.broadinstitute.hellbender.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6255:3464,log,logSumExp,3464,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6255,1,['log'],['logSumExp']
Testability,; 23:45:26.826 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 23:45:26.826 INFO GenomicsDBImport - Deflater: IntelDeflater; 23:45:26.827 INFO GenomicsDBImport - Inflater: IntelInflater; 23:45:26.827 INFO GenomicsDBImport - GCS max retries/reopens: 20; 23:45:26.827 INFO GenomicsDBImport - Requester pays: disabled; 23:45:26.827 INFO GenomicsDBImport - Initializing engine; 23:45:46.550 INFO FeatureManager - Using codec IntervalListCodec to read file file:///gpfs/gpfs_de6000/home/dalegre/projects/1000-Genomes/jointcalling-test/goast_workflows/JointCalling/test_samples-1000.1.4/results/germline/interval/temp_0882_of_2000/scattered.interval_list; 23:45:46.584 INFO IntervalArgumentCollection - Processing 1086188 bp from intervals; 23:45:46.586 INFO GenomicsDBImport - Done initializing engine; 23:45:47.489 INFO GenomicsDBLibLoader - GenomicsDB native library version : 1.4.4-ce4e1b9; 23:45:47.491 INFO GenomicsDBImport - Vid Map JSON file will be written to /gpfs/gpfs_de6000/home/dalegre/projects/1000-Genomes/jointcalling-test/goast_workflows/JointCalling/test_samples-1000.1.4/results/jointcalling/genomicsDB/temp_0882_of_2000_DB/vidmap.json; 23:45:47.491 INFO GenomicsDBImport - Callset Map JSON file will be written to /gpfs/gpfs_de6000/home/dalegre/projects/1000-Genomes/jointcalling-test/goast_workflows/JointCalling/test_samples-1000.1.4/results/jointcalling/genomicsDB/temp_0882_of_2000_DB/callset.json; 23:45:47.491 INFO GenomicsDBImport - Complete VCF Header will be written to /gpfs/gpfs_de6000/home/dalegre/projects/1000-Genomes/jointcalling-test/goast_workflows/JointCalling/test_samples-1000.1.4/results/jointcalling/genomicsDB/temp_0882_of_2000_DB/vcfheader.vcf; 23:45:47.491 INFO GenomicsDBImport - Importing to workspace - /gpfs/gpfs_de6000/home/dalegre/projects/1000-Genomes/jointcalling-test/goast_workflows/JointCalling/test_samples-1000.1.4/results/jointcalling/genomicsDB/temp_0882_of_2000_DB; malloc(): unaligned tcache chunk detected; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8683:4715,test,test,4715,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8683,4,['test'],['test']
Testability,"; File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/pymc3/model.py"", line 197, in __call__; instance.__init__(*args, **kwargs); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/gcnvkernel/models/model_denoising_calling.py"", line 851, in __init__; observed=shared_workspace.n_st); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/pymc3/distributions/distribution.py"", line 39, in __new__; return model.Var(name, dist, data, total_size); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/pymc3/model.py"", line 545, in Var; total_size=total_size, model=self); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/pymc3/model.py"", line 970, in __init__; self.logp_elemwiset = distribution.logp(data); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/gcnvkernel/models/model_denoising_calling.py"", line 844, in _copy_number_emission_logp; return pm.math.logsumexp(shared_workspace.log_q_c_stc + _log_copy_number_emission_stc, axis=2); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/pymc3/math.py"", line 32, in logsumexp; return tt.log(tt.sum(tt.exp(x - x_max), axis=axis, keepdims=True)) + x_max; File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/theano/gof/op.py"", line 670, in __call__; no_recycling=[]); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/theano/gof/op.py"", line 935, in make_thunk; no_recycling); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/theano/gof/op.py"", line 839, in make_c_thunk; output_storage=node_output_storage); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/theano/gof/cc.py"", line 1190, in make_thunk; keep_lock=keep_lock); File ""/home/tintest/miniconda2/envs/aurexome/lib/python3.6/site-packages/theano/gof/cc.py"", line 1131, in __compile__; keep_lock=keep_lock); File ""/home/tintest/miniconda2/envs/aurexom",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5053:64611,log,logsumexp,64611,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5053,1,['log'],['logsumexp']
Testability,"; This is due to how these fields are generated from the reference; sequence. - Fixed a bug (insertions on - strand):; Insertions on the - strand would have incorrect reference; sequences/alleles.; Now they are handled as a special case when computing the aligned; reference allele. - Fixed a bug in transcript selection for GencodeFuncotationFactory:; The LocusLevel / Curation Level was being incorrectly pulled from the; GENE features, rather than the TRANSCRIPT features that contain each; variant. As a result, the order in which representative transcripts; were chosen was wrong. The TRANSCRIPT feature is now being used to; determine the Locus/Curation Level. - `TranscriptType` now determined by transcript annotation, not gene annotation; - Start/stop codon overlapping now corrected for preceding indel bases (is now correct for more cases).; - Changed algorithm for how 5'UTRs are determined. - Refactored how frameshift indels have codon change strings created. - Added in helper some scripts for testing funcotator. - Fixed how codon change strings are rendered to be consistent and more; correct. - Fixed Protein Change strings to be consistent and more; correct. - Implemented tests for CreateProteinChangeInfo; - Implemented tests for RenderProteinChangeString; - Implemented tests for IsIndelBetweenCodons; - Implemented tests for GetCodonChangeString. - Added a unit test for; testCreateGencodeFuncotationBuilderWithTrivialFieldsPopulated. - Fixed a bug when variant ref allele doesn't match reference genome. - Fixed test cases for - strand indel cdna strings:; There is a bug in oncotator that was fixed in Funcotator involving cdna; strings for - strand indels. In Oncotator the positions reported are off by 1 (they; should be one less) and the base reported is also wrong.; This is now fixed. - Removed some old code that had been taken out of the main codepath. - Fixed a bug in how the gencode reference contexts are created.; - Fixed a bug in how the end points for the genco",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5302:2376,test,testing,2376,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5302,1,['test'],['testing']
Testability,; at org.broadinstitute.hellbender.Main.main(Main.java:292); Using GATK jar BCBIO/v1.2.0_updated/anaconda/share/gatk4-4.1.6.0-0/gatk-package-4.1.6.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xms4g -Xmx13g -XX:+UseSerialGC -Djava.io.tmpdir=test-bcbio-1.2.0-wgs-hapmap/scratch/bcbiotx/tmpnhcoi74c -jar BCBIO/v1.2.0_updated/anaconda/share/gatk4-4.1.6.0-0/gatk-package-4.1.6.0-local.jar HaplotypeCaller -R BCBIO/v1.2.0_updated/genomes/Hsapiens/hg38/seq/hg38.fa --annotation MappingQualityRankSumTest --annotation MappingQualityZero --annotation QualByDepth --annotation ReadPosRankSumTest --annotation RMSMappingQuality --annotation BaseQualityRankSumTest --annotation FisherStrand --annotation MappingQuality --annotation DepthPerAlleleBySample --annotation Coverage -I test-bcbio-1.2.0-wgs-hapmap/scratch/align/HAPMAP_S5_L005/HAPMAP_S5_L005-sort-recal.bam -L test-bcbio-1.2.0-wgs-hapmap/scratch/gatk-haplotype/chrY/HAPMAP_S5_L005-joint-chrY_0_16134738-regions.bed --interval-set-rule INTERSECTION --annotation ClippingRankSumTest --annotation DepthPerSampleHC --native-pair-hmm-threads 1 --emit-ref-confidence GVCF -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 60 -GQB 80 -ploidy 1 --output test-bcbio-1.2.0-wgs-hapmap/scratch/bcbiotx/tmpnhcoi74c/HAPMAP_S5_L005-joint-chrY_0_16134738.vcf.gz. #### Command i used. gatk --java-options '-Xms4g -Xmx13g -XX:+UseSerialGC -Djava.io.tmpdir=test-bcbio-1.2.0-wgs-hapmap/scratch/bcbiotx/tmpv1ztgr87' HaplotypeCaller -R BCBIO/v1.2.0_updated/genomes/Hsapiens/hg38/seq/hg38.fa --annotation MappingQualityRankSumTest --annotation MappingQualityZero --annotation QualByDepth --annotation ReadPosRankSumTest --annotation RMSMappingQuality --annotation BaseQualityRankSumTest --annotation FisherStrand --annotation MappingQuality --annotation DepthPerAlleleBySample --annotation Coverage -I test-bcbio-1.2.0-wgs-hapmap/scratch/align/HAPMA,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6552:3189,test,test-bcbio-,3189,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6552,1,['test'],['test-bcbio-']
Testability,; at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:210); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:163); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:206); at org.broadinstitute.hellbender.Main.main(Main.java:292); Using GATK jar BCBIO/v1.2.0_updated/anaconda/share/gatk4-4.1.6.0-0/gatk-package-4.1.6.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xms4g -Xmx13g -XX:+UseSerialGC -Djava.io.tmpdir=test-bcbio-1.2.0-wgs-hapmap/scratch/bcbiotx/tmpnhcoi74c -jar BCBIO/v1.2.0_updated/anaconda/share/gatk4-4.1.6.0-0/gatk-package-4.1.6.0-local.jar HaplotypeCaller -R BCBIO/v1.2.0_updated/genomes/Hsapiens/hg38/seq/hg38.fa --annotation MappingQualityRankSumTest --annotation MappingQualityZero --annotation QualByDepth --annotation ReadPosRankSumTest --annotation RMSMappingQuality --annotation BaseQualityRankSumTest --annotation FisherStrand --annotation MappingQuality --annotation DepthPerAlleleBySample --annotation Coverage -I test-bcbio-1.2.0-wgs-hapmap/scratch/align/HAPMAP_S5_L005/HAPMAP_S5_L005-sort-recal.bam -L test-bcbio-1.2.0-wgs-hapmap/scratch/gatk-haplotype/chrY/HAPMAP_S5_L005-joint-chrY_0_16134738-regions.bed --interval-set-rule INTERSECTION --annotation ClippingRankSumTest --annotation DepthPerSampleHC --native-pair-hmm-threads 1 --emit-ref-confidence GVCF -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 60 -GQB 80 -ploidy 1 --output test-bcbio-1.2.0-wgs-hapmap/scratch/bcbiotx/tmpnhcoi74c/HAPMAP_S5_L005-joint-chrY_0_16134738.vcf.gz. #### Command i used. gatk --java-options '-Xms4g -Xmx13g -XX:+UseSerialGC -Djava.io.tmpdir=test-bcbio-1.2.0-wgs-hapmap/scratch/bcbiotx/tmpv1ztgr87' HaplotypeCaller -R BCBIO/v1.2.0_updated/genomes/Hsapiens/hg38/seq/hg38.fa --annotation MappingQualityRankSumTest --annotation MappingQualityZero --annotation QualByDepth --annotation ReadP,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6552:3099,test,test-bcbio-,3099,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6552,1,['test'],['test-bcbio-']
Testability,; at org.broadinstitute.hellbender.tools.dataflow.transforms.InsertSizeMetricsTransformUnitTest.testInsertSizeMetricsTransform(InsertSizeMetricsTransformUnitTest.java:49); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:659); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:845); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1153); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:771); at org.testng.TestRunner.run(TestRunner.java:621); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199); at org.testng.TestNG.runSuitesLocally(TestNG.java:1124); at org.testng.TestNG.run(TestNG.java:1032); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorIm,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/609:2249,Test,TestRunner,2249,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/609,1,['Test'],['TestRunner']
Testability,; at org.broadinstitute.hellbender.utils.test.testers.AbstractMarkDuplicatesCommandLineProgramTest.testBulkFragmentsNoDuplicates(AbstractMarkDuplicatesCommandLineProgramTest.java:460); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:133); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:83); at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1768:3241,Test,TestRunner,3241,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1768,1,['Test'],['TestRunner']
Testability,; at org.broadinstitute.hellbender.utils.test.testers.SamFileTester.runTest(SamFileTester.java:263); at org.broadinstitute.hellbender.utils.test.testers.AbstractMarkDuplicatesCommandLineProgramTest.testBulkFragmentsNoDuplicates(AbstractMarkDuplicatesCommandLineProgramTest.java:460); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:133); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:83); at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); at s,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1768:3141,Test,TestMethodWorker,3141,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1768,1,['Test'],['TestMethodWorker']
Testability,; at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:133); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:83); at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32); ,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1638:2341,test,testng,2341,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1638,2,['test'],['testng']
Testability,; at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140); Caused by: java.lang.RuntimeException: java.lang.NoSuchMethodError: com.google.common.base.Stopwatch.createStarted()Lcom/google/common/base/Stopwatch;; at com.google.cloud.dataflow.sdk.Pipeline.run(Pipeline.java:166); at org.broadinstitute.hellbender.engine.dataflow.DataflowCommandLi,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:2126,test,testng,2126,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,1,['test'],['testng']
Testability,"; at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:659); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:845); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1153); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:771); at org.testng.TestRunner.run(TestRunner.java:621); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199); at org.testng.TestNG.runSuitesLocally(TestNG.java:1124); at org.testng.TestNG.run(TestNG.java:1032); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140). Jul 01, 2015 2:33:37 PM org.reflections.Reflections scan; ```. The fact that it doesn't show up for some users means its likely to be an environmental difference, possibly an underspecified dependency. @davidaadams I understand that you never see this warning, could you confirm/deny ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/609:2708,test,testng,2708,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/609,1,['test'],['testng']
Testability,"; if [[ $rcode -ne 0 ]]; then echo $ff; fi; done. Note I didn't search in all branches, but I figure we can always recommit those files. Also, any index files, etc. should be retained if necessary. CNV team will delete their files, but I'll leave it up to engine and the other teams about how much we want to remove. src/test/resources/dbsnp_132.b36.excluding_sites_after_129.chr1_1k.vcf.idx; src/test/resources/empty.vcf.idx; src/test/resources/exampleFASTA.fasta.fai; src/test/resources/fastaWithoutDict.fasta.fai; src/test/resources/fastaWithoutFai.dict; src/test/resources/hg19micro.dict; src/test/resources/hg19micro.fasta.fai; src/test/resources/hg19mini.dict; src/test/resources/hg19mini.fasta.fai; src/test/resources/Homo_sapiens_assembly19_chr1_1M.dict; src/test/resources/Homo_sapiens_assembly19_chr1_1M.fasta.fai; src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf.idx; src/test/resources/HSA19.dbsnp135.chr1_1M.exome_intervals.modified.vcf.idx; src/test/resources/human_g1k_v37.chr17_1Mb.dict; src/test/resources/human_g1k_v37.chr17_1Mb.fasta.fai; src/test/resources/iupacFASTA.dict; src/test/resources/iupacFASTA.fasta.fai; src/test/resources/joint_calling.chr1_1M.1kg_samples.10samples.noINFO.vcf.idx; src/test/resources/large/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.idx; src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/bias_covariates_ARD_coefficients.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_matrix.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_norm2.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_mean_log_bias.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_unexplained_varian",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:1251,test,test,1251,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectBaseDistributionByCycle/first5000a.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectBaseDistributionByCycle/originalQuals.chr1.1-1K.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectBaseDistributionByCycle/unmapped.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectBaseDistributionByCycle/valid.cram.crai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectBaseDistributionByCycle/valid.dict; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectBaseDistributionByCycle/valid.fasta.fai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectQualityYieldMetrics/collect_quality_yield_metrics.bam; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectQualityYieldMetrics/collect_quality_yield_metrics.cram; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectQualityYieldMetrics/valid.cram.crai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectQualityYieldMetrics/valid.dict; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/CollectQualityYieldMetrics/valid.fasta.fai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/MeanQualityByCycle/example_pfFail_reads.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/MeanQualityByCycle/first5000a.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/MeanQualityByCycle/unmapped.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/QualityScoreDistribution/example_pfFail_reads.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/QualityScoreDistribution/first5000a.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/QualityScoreDistribution/originalQuals.chr1.1-1K.bam.bai; src/test/resources/org/broadinstitute/hellbender/me,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:15062,test,test,15062,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,; src/test/resources/org/broadinstitute/hellbender/tools/count_reads_sorted.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/count_variants.blockgz.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/count_variants_withSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/calling_combined_copy_number.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/calling_combined_read_counts.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/calling_sample_bias_latent.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/calling_sample_read_depth.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/calling_sample_sex_genotypes.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/learning_combined_copy_number.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/learning_combined_read_counts.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/learning_sample_bias_latent.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/learning_sample_read_depth.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/learning_sample_sex_genotypes.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/sim_contig_anots.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/sim_HMM_priors_table.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/sim_model; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/sim_model/mean_bias_covariates_matrix.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/sim_model/target_specific_mean_log_bias.tsv; src/test/resources/org/broadinstitute/hellbender/tools/coveragemodel/sim_model/target_specific_unexplained_variance.tsv; src/test/resources/org/,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:27843,test,test,27843,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,; src/test/resources/org/broadinstitute/hellbender/tools/genome/HCC1143_chr22_27M_37M.tiny.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/genome/HCC1143_chr3_1K_11K.tiny.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting1.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting2.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.3.8-4-g7b0250253f.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.alleleSpecific.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.alleleSpecific.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/pretendTobeTetraPloidTetraAllelicSite.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.empty.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.noSG.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg1.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg2.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg3.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:37449,test,testVCFMode,37449,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['testVCFMode']
Testability,; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.bam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.cram; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.dict; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.sam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.sam; src/test/resources/org/broadinstitute/hellbender/tools/validation/marked.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam; src/test/resources/org/broadinstitute/hellbender/tools/validation/picard.marked.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam; src/test/resources/org/broadinstitute/hellbender/tools/validation/single.read.bai; src/test/resources/org/broadinstitute/hellbender/tools/valid.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/valid.dict; src/test/resources/org/broadinstitute/hellbender/tools/valid.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.indels.recal.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.input.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.postSNPinput.HACKEDhg38header.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.postSNPinput.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.snps.recal.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.mixedTest.input.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.mixedTest.recal.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/CombineGVCFs.output.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/CombineGVCFs.output.withoutIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:45963,test,test,45963,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.dict; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.sam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.sam; src/test/resources/org/broadinstitute/hellbender/tools/validation/marked.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam; src/test/resources/org/broadinstitute/hellbender/tools/validation/picard.marked.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam; src/test/resources/org/broadinstitute/hellbender/tools/validation/single.read.bai; src/test/resources/org/broadinstitute/hellbender/tools/valid.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/valid.dict; src/test/resources/org/broadinstitute/hellbender/tools/valid.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.indels.recal.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.input.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.postSNPinput.HACKEDhg38header.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.postSNPinput.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.AStest.snps.recal.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.mixedTest.input.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/VQSR/VQSR.mixedTest.recal.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/CombineGVCFs.output.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/CombineGVCFs.output.withoutIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/GenotypeGVCFs.output.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/HCOutputWi,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:46129,test,test,46129,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/combine-gvcf-wrong-ref-input2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/convertToBasePairResolution.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/gvcf.basepairResolution.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/gvcfExample1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/gvcfExample2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/IntervalTest.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/NA12878.AS.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/NA12892.AS.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.1.copy.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.1.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.2.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDeletionRestrictToStartExpected.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.many.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.many.haploid.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/spanningDel.many.tetraploid.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/testAlleleSpecificAnnotationsNoGroup.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/testAlleleSpecificAnnotations.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/testBasepairResolutionInput.vcf.idx; src/test/resources/org/broadinstit,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:49855,test,test,49855,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,";MPOS=16,15,7;MQ=59.98;MQ0=0;MQRankSum=0.000;NALOD=0.569,1.49,1.49;NCC=0;NCount=0;NLOD=27.80,30.51,30.97;OCM=0;POPAF=6.00,6.00,6.00;REF\_BASES=GAACTTGCTTCTTTTTTTTGC;RPA=8,9,10,11;RU=T;ReadPosRankSum=5.751;SOR=1.152;STR;Samples=TCGA-NJ-A55R-01A-11R-A262-07;TLOD=284.47,51.82,3.50 GT:AD:AF:DP:F1R2:F2R1:SB 0/1/2/3:819,166,35,14:0.161,0.034,0.014:1034:365,76,17,4:440,87,17,8:16,803,6,209 0/0:103,1,0,0:0.017,8.250e-03,8.221e-03:104:50,1,0,0:52,0,0,0:26,77,0,1. The error log that FilterMutectCalls emited was listed below:. Using GATK jar /home/lqh/software/GATK-4.2.0.0/gatk-package-4.2.0.0-local.jar ; ; Running: ; ; java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -jar /home/lqh/software/GATK-4.2.0.0/gatk-package-4.2.0.0-local.jar FilterMutectCalls -R /public1/data/resources/ref\_genome/GRCh38/GRCh38.d1.vd1.fa -V somatic\_mutation/Mutect2/test.vcf.gz -O somatic\_mutation/FilterMutectCalls/test.vcf.gz ; ; 11:03:39.517 INFO NativeLibraryLoader - Loading libgkl\_compression.so from jar:file:/home/lqh/software/GATK-4.2.0.0/gatk-package-4.2.0.0-local.jar!/com/intel/gkl/native/libgkl\_compression.so ; ; Jun 04, 2021 11:03:49 AM shaded.cloud\_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine ; ; INFO: Failed to detect whether we are running on Google Compute Engine. ; ; 11:03:49.968 INFO FilterMutectCalls - ------------------------------------------------------------ ; ; 11:03:49.969 INFO FilterMutectCalls - The Genome Analysis Toolkit (GATK) v4.2.0.0 ; ; 11:03:49.969 INFO FilterMutectCalls - For support and documentation go to [https://software.broadinstitute.org/gatk/](https://software.broadinstitute.org/gatk/) ; ; 11:03:49.969 INFO FilterMutectCalls - Executing as lqh@master on Linux v5.6.14-1.el7.elrepo.x86\_64 amd64 ; ; 11:03:49.969 INFO FilterMutectCalls - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0\_152-b16 ; ; 11:03",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7298:2919,test,test,2919,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7298,1,['test'],['test']
Testability,"> Gradle test org.broadinstitute.hellbender.transformers.MisencodedBaseQualityReadTransformerUnitTest.testFixBadQuals FAILED; > ; > ```; > java.lang.AssertionError: arrays differ firstly at element [0]; expected value is <28> but was <-3>. ; > at org.testng.Assert.fail(Assert.java:94); > at org.testng.Assert.assertEquals(Assert.java:772); > at org.testng.Assert.assertEquals(Assert.java:746); > at org.broadinstitute.hellbender.transformers.MisencodedBaseQualityReadTransformerUnitTest.testFixBadQuals(MisencodedBaseQualityReadTransformerUnitTest.java:73); > ```; > ; > 180309 tests completed, 1 failed; > :test FAILED; > ; > FAILURE: Build failed with an exception. This was running on the current master without parallelism. . @droazen Is this the same failure you saw before?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/311:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/311,17,"['Assert', 'assert', 'test']","['Assert', 'AssertionError', 'assertEquals', 'test', 'testFixBadQuals', 'testng', 'tests']"
Testability,"> org.broadinstitute.hellbender.BwaMemIntegrationTest > loadIndex FAILED; java.lang.UnsatisfiedLinkError: 'boolean org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createReferenceIndex(java.lang.String, java.lang.String, java.lang.String)'; at org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createReferenceIndex(Native Method); at org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createIndexImageFromFastaFile(BwaMemIndex.java:227); at org.broadinstitute.hellbender.utils.bwa.BwaMemIndex.createIndexImageFromFastaFile(BwaMemIndex.java:196); at org.broadinstitute.hellbender.BwaMemIntegrationTest.loadIndex(BwaMemIntegrationTest.java:49); Running Test: Test method testChimericUnpairedMapping(org.broadinstitute.hellbender.BwaMemIntegrationTest). Gradle suite > Gradle test > org.broadinstitute.hellbender.BwaMemIntegrationTest > testChimericUnpairedMapping SKIPPED; Running Test: Test method testPerfectUnpairedMapping(org.broadinstitute.hellbender.BwaMemIntegrationTest). Gradle suite > Gradle test > org.broadinstitute.hellbender.BwaMemIntegrationTest > testPerfectUnpairedMapping SKIPPED; ```. This test fails because some JAR wasn't built:; ```; Running Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest); Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest) produced standard out/err: No local jar was found, please build one by running. Gradle suite > Gradle test > org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest > testPipeForPicardTools STANDARD_ERROR; No local jar was found, please build one by running; Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest) produced standard out/err:. Test: Test method testPipeForPicardTools(org.broadinstitute.hellbender.engine.PipelineSupportIntegrationTest) produced standard out/err: /disk-samsung/ports/biology/gatk/work/gatk-4.6.0.0/gradlew local",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8940:3087,test,test,3087,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8940,1,['test'],['test']
Testability,@LeeTL1220 Can I assign the review to you once automatic tests are back?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3172:57,test,tests,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3172,1,['test'],['tests']
Testability,@LeeTL1220 Can you review? This fixes your bug. I'm not putting in a regression test yet because i the upcoming filtering refactoring it will become much easier to unit test for bugs like this. @madduran Yours too.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5595:80,test,test,80,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5595,2,['test'],['test']
Testability,"@LeeTL1220 Fixed PathSeq test BAMs so that all reads have read groups with an SM tag. This will make them pass the WellFormedReadFilter. To be thorough, I made sure they also check out with ValidateSameFile. The BAMs are now properly sorted, and also I made a small fix so that unmapped mate flags are set properly in the filter tool.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3206:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3206,1,['test'],['test']
Testability,"@LeeTL1220 For all PathSeq test BAMs, all reads have read groups with an SM tag. This will make them pass the WellFormedReadFilter. . Also the BAMs are now properly sorted and made a small fix so the flags are set properly for filter tool output.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3204:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3204,1,['test'],['test']
Testability,@LeeTL1220 For you if tests pass,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4877:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4877,1,['test'],['tests']
Testability,@LeeTL1220 I have tested this on:. * 5 FFPE bams from Chip that were having problems before; * mixtures of HCC1143 with NA12878 from contamination of 0 to 15%; * mixtures of HCC1143 with NA12891 and NA12892 from total contamination of 0 to 15%; * NA12878 ice; * NA12878 PCR-free wgs samples with high and low coverage; * synthetic LoH data. It is working very nicely on everything.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4001:18,test,tested,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4001,1,['test'],['tested']
Testability,@LeeTL1220 Ready for review. I will concurrently test in Firecloud.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4710:49,test,test,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4710,1,['test'],['test']
Testability,@LeeTL1220 Tested. Works.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3386:11,Test,Tested,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3386,1,['Test'],['Tested']
Testability,@LeeTL1220 This fixes the bug preventing Beri from updating to 4.0.8.0. I will put in an integration test but could you start looking at it now?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5121:101,test,test,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5121,1,['test'],['test']
Testability,"@LeeTL1220 This fixes the issue. I tested it on SGE and the M2 integration tests now have a DREAM bam where I switched the sample to ""tumor sample"".",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4360:35,test,tested,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4360,2,['test'],"['tested', 'tests']"
Testability,"@LeeTL1220 This should fail earlier in situations like the one you ran into with the low coverage test data. I don't *think* there should be any unintended side effects. I'm fine if this doesn't make it in before the point release if you want to run some sanity checks on real data with it (since users should be able to figure out what is going on relatively quickly if they run into the issue), but I'll leave it up to you.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4292:98,test,test,98,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4292,1,['test'],['test']
Testability,@LeeTL1220 can you review this if tests pass?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3326:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3326,1,['test'],['tests']
Testability,"@LeeTL1220 commented on [Fri Jan 15 2016](https://github.com/broadinstitute/gatk-protected/issues/308). This may be as simple as adding a `ctx.close()` statement after the spark calculations are complete.; - [ ] Confirmed on our spark cluster that this is fixed... ---. @LeeTL1220 commented on [Tue Jan 26 2016](https://github.com/broadinstitute/gatk-protected/issues/308#issuecomment-175139853). Cannot close without the unit tests falling over. Putting this off for a later release. ---. @lbergelson commented on [Tue Jan 26 2016](https://github.com/broadinstitute/gatk-protected/issues/308#issuecomment-175154352). Possible solutions involve running `SparkContext.KillExecutors()` but I haven't looked into how it works exactly... ---. @samuelklee commented on [Thu May 11 2017](https://github.com/broadinstitute/gatk-protected/issues/308#issuecomment-300793994). @LeeTL1220 should I keep this open?. ---. @LeeTL1220 commented on [Thu May 11 2017](https://github.com/broadinstitute/gatk-protected/issues/308#issuecomment-300797579). I think this should be kept open, but low priority. On Thu, May 11, 2017 at 9:46 AM, samuelklee <notifications@github.com>; wrote:. > @LeeTL1220 <https://github.com/LeeTL1220> should I keep this open?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/broadinstitute/gatk-protected/issues/308#issuecomment-300793994>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ACDXk06fX-Z26myWvz9Shn_c5e4I0xHqks5r4xEigaJpZM4HGA9T>; > .; >. -- ; Lee Lichtenstein; Broad Institute; 75 Ames Street, Room 7003EB; Cambridge, MA 02142; 617 714 8632",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2833:427,test,tests,427,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2833,1,['test'],['tests']
Testability,"@LeeTL1220 commented on [Tue Feb 21 2017](https://github.com/broadinstitute/gatk-protected/issues/915). This will be obviated by #884 anyway, but in case that takes a while to deliver. The testing was slowed by https://github.com/broadinstitute/cromwell/issues/2011",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2948:189,test,testing,189,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2948,1,['test'],['testing']
Testability,"@LeeTL1220 commented on [Wed Mar 29 2017](https://github.com/broadinstitute/gatk-protected/issues/961). ---. @LeeTL1220 commented on [Wed Mar 29 2017](https://github.com/broadinstitute/gatk-protected/issues/961#issuecomment-290092153). Currently, the tests do not use docker. The M2 WDL does use docker.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2963:251,test,tests,251,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2963,1,['test'],['tests']
Testability,@SHuang-Broad We still have these SGA tests that always skip. Has the need for that been replaced by Fermilite and BWA? Can we delete that code / remove those tests?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3612:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3612,2,['test'],['tests']
Testability,"@SHuang-Broad reports having problems running spark tests when his machine is connected to the broad vpn. Errors seem to occur with any tests that start a spark context. They all seem to be caused by `java.net.BindException`. ```; 23:59:49.200 ERROR NettyTransport:65 - failed to bind to /10.1.2.144:0, shutting down Netty transport; 23:59:49.200 WARN Utils:71 - Service 'sparkDriver' could not bind on port 0. Attempting port 1.; 23:59:49.200 ERROR Remoting:65 - Remoting system has been terminated abrubtly. Attempting to shut down transports; 23:59:49.206 ERROR NettyTransport:65 - failed to bind to /10.1.2.144:0, shutting down Netty transport; 23:59:49.206 ERROR SparkContext:96 - Error initializing SparkContext.; java.net.BindException: Failed to bind to: /10.1.2.144:0: Service 'sparkDriver' failed after 16 retries!; at org.jboss.netty.bootstrap.ServerBootstrap.bind(ServerBootstrap.java:272); at akka.remote.transport.netty.NettyTransport$$anonfun$listen$1.apply(NettyTransport.scala:393); at akka.remote.transport.netty.NettyTransport$$anonfun$listen$1.apply(NettyTransport.scala:389); at scala.util.Success$$anonfun$map$1.apply(Try.scala:206); at scala.util.Try$.apply(Try.scala:161); at scala.util.Success.map(Try.scala:206); at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235); at scala.concurrent.Future$$anonfun$map$1.apply(Future.scala:235); at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:32); at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55); at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply$mcV$sp(BatchingExecutor.scala:91); at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91); at akka.dispatch.BatchingExecutor$BlockableBatch$$anonfun$run$1.apply(BatchingExecutor.scala:91); at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:72); at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:90); at akka.dispatch.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1534:52,test,tests,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1534,2,['test'],['tests']
Testability,"@achevali commented on [Wed Feb 15 2017](https://github.com/broadinstitute/gatk-protected/issues/902). It should state that the wrong file was given instead of trying to use it. ```12:11:34.836 INFO IntelGKLUtils - Trying to load Intel GKL library from:; 	jar:file:/dsde/working/aaronc/testing/LUAD/HMM_eval/gatk-protected/build/libs/gatk-protected-all-c17c8ed-SNAPSHOT-spark_standalone.jar!/com/intel/gkl/native/libIntelGKL.so; 12:11:34.894 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; [February 15, 2017 12:11:34 PM EST] org.broadinstitute.hellbender.tools.exome.plotting.PlotACNVResults --hets /dsde/working/aaronc/testing/LUAD/wgs/pulldown/TCGA-55-6972-01A-11D-1945-08.hets.tsv --tangentNormalized /dsde/working/aaronc/testing/LUAD/wgs/tumor_pcov/TCGA-55-6972-01A-11D-1945-08-gc-corrected.tn.tsv --segments out/wes/TCGA-55-6972-01A-11D-1945-08.seg --sequenceDictionaryFile /seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta --outputPrefix HMM_eval.TCGA-55-6972-01A-11D-1945-08. --output out/wgs/ --minimumContigLength 1000000 --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false; [February 15, 2017 12:11:34 PM EST] Executing as aaronc@gsa5.broadinstitute.org on Linux 2.6.32-642.11.1.el6.x86_64 amd64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_121-b13; Version: Version:c17c8ed-SNAPSHOT; 12:11:34.899 INFO PlotACNVResults - Defaults.BUFFER_SIZE : 131072; 12:11:34.899 INFO PlotACNVResults - Defaults.COMPRESSION_LEVEL : 5; 12:11:34.899 INFO PlotACNVResults - Defaults.CREATE_INDEX : false; 12:11:34.899 INFO PlotACNVResults - Defaults.CREATE_MD5 : false; 12:11:34.899 INFO PlotACNVResults - Defaults.CUSTOM_READER_FACTORY : ; 12:11:34.899 INFO PlotACNVResults - Defaults.EBI_REFERENCE_SERVICE_URL_MASK : http://www.ebi.ac.uk/ena/cram/md5/%s; 12:11:34.899 INFO PlotACNVResults - Defaults.NON_ZERO_BUFFER_SIZE : 131072; 12:11:34.899 INFO PlotACNVResults - Defaults.REFERENCE_FASTA : null; 12:11:34.899 INFO PlotACNVResults - Def",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2941:286,test,testing,286,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2941,3,['test'],['testing']
Testability,@ahaessly Could you please take a look at this? I'd appreciate it if you would also look at the expected output and make sure those intervals make sense since I don't think that aspect of the code was previously tested and I want to be sure there are no off by one style errors.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8070:212,test,tested,212,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8070,1,['test'],['tested']
Testability,"@akiezun @lbergelson Changed the Spark context configuration from ""local[*]"" to ""local[N]"", where N is specified by a environmental variable. Ran gradle test with ""--tests _SparkIntegration_"". Out of 203 tests, one failed: "" testBulkFragmentsNoDuplicates"", the rest passed. Here is the snippet of code change. Any suggestions?. ```; private static JavaSparkContext createTestSparkContext(Map<String, String> overridingProperties) {; determineSparkMaster();; final SparkConf sparkConf = setupSparkConf(""TestContext"", DEFAULT_SPARK_MASTER, DEFAULT_TEST_PROPERTIES, overridingProperties);; return new JavaSparkContext(sparkConf);; }. /**; * Determine the number of cores Spark master should use. Only used in Spark Test; * Read the specification from the environmental variable GATK_TEST_SPARK_CORES; * If the value is a valid positive integer, use it; * If the value is bogus (strings, etc), or the env. var. is not set, use all available cores, as in ""local[*]""; */. private static void determineSparkMaster() {; int foo = 0;; try {; foo = Integer.parseInt( System.getenv(""GATK_TEST_SPARK_CORES"") );; } catch ( NumberFormatException e ) {}; String numSparkCores;; if ( foo > 0 ) {; numSparkCores = String.format(""[%d]"", foo);; } else {; numSparkCores = ""[*]"";; }; DEFAULT_SPARK_MASTER = ""local"" + numSparkCores;; }. ```. Error messages:. ```; java.lang.NullPointerException at org.broadinstitute.hellbender.engine.spark.SparkContextFactory.getSparkContext(SparkContextFactory.java:77); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:36); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:102); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:155); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:174); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:67); at org.broadinstitute.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1768:153,test,test,153,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1768,6,"['Test', 'test']","['Test', 'TestContext', 'test', 'testBulkFragmentsNoDuplicates', 'tests']"
Testability,@akiezun This should fix it so that it prints the stacktraces of the failing tests on travis in a readable way.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/117:77,test,tests,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/117,1,['test'],['tests']
Testability,"@akiezun commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/463). using commit 39c988c2dc7f669306d246a2191d16af50496640. (using our test resources). ```; ./gatk-launch HaplotypeCaller -I ~/IdeaProjects/gatk/src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -L 20:1-11000000 -R ~/IdeaProjects/gatk/src/test/resources/large/human_g1k_v37.20.21.fasta -O testa.g.vcf -ERC GVCF --bamOutput testa.outHC.bam; ```. compare to gatk3.4.46. ```; java -jar /Users/akiezun/projects/GATK3.4-46/GenomeAnalysisTK.jar -T HaplotypeCaller -I ~/IdeaProjects/gatk/src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -L 20:1-11000000 -R ~/IdeaProjects/gatk/src/test/resources/large/human_g1k_v37.20.21.fasta -ERC GVCF --bamOutput testa.gatk3.outHC.bam --out testa.gatk3.g.vcf; ```. see the first line in the output:. ```; 20 1 . N <NON_REF> . . END=9999901 GT:DP:GQ:MIN_DP:PL 0/0:0:0:0:0,0,0; ```. it's missing from GATK4 output. ---. @droazen commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/463#issuecomment-215182886). This is probably because there is no coverage at all in the interval 1-9999901. ---. @akiezun commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/463#issuecomment-215183626). why is it different and is it OK?. ---. @droazen commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/463#issuecomment-215184942). I'll need to have a look at `GenotypeGVCFs` to determine whether it's ok, but certainly we are not losing any information by leaving out this block (since it's backed by zero reads).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2848:168,test,test,168,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2848,9,['test'],"['test', 'testa']"
Testability,@akiezun commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/466). tag 39c988c2dc7f669306d246a2191d16af50496640; ```./gatk-launch HaplotypeCaller -I ~/IdeaProjects/gatk/src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -L 20:1-11000000 -R ~/IdeaProjects/gatk/src/test/resources/large/human_g1k_v37.20.21.fasta -O testa.g.vcf -ERC GVCF --bamOutput testa.outHC.bam. ```. the created bam file does not have an index created; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2849:208,test,test,208,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2849,4,['test'],"['test', 'testa']"
Testability,"@akiezun commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/467). tag 39c988c2dc7f669306d246a2191d16af50496640; 1. Make a cram file like this (in our src/test/resources/large):; `samtools view -C -T human_g1k_v37.20.21.fasta -o CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam`; `samtools index CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram`; 2. run HC on it and compare with BAM:. ```; ./gatk-launch HaplotypeCaller -I ~/IdeaProjects/gatk/src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram -L 20:1-11000000 -R ~/IdeaProjects/gatk/src/test/resources/large/human_g1k_v37.20.21.fasta -O testa.cram.g.vcf -ERC GVCF --bamOutput testa.cram.outHC.bam; ```. time BAM : 0.7 minutes; time CRAM: 3.81 minutes. ---. @droazen commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/467#issuecomment-215194800). What if you run without `--bamOutput`? Is it still slow?. ---. @droazen commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/467#issuecomment-215202513). In addition to testing without `--bamOutput`, you should also try it with a `.bai` index on the cram, as @cmnbroad has identified issues with the current `.crai` support in htsjdk. ---. @akiezun commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/467#issuecomment-215214737). yes, still super slow without `--bamOutput`. ---. @akiezun commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/467#issuecomment-215216639). Should we blow up on crai and say it's unsupported for now? (better that than produce bogus results). Also, how do i make a bai file for a cram file?. ---. @droazen commented on [Wed Apr 27 2016](https://github.com/broadinstitute/gatk-protected/issues/467#issuecomment-215219095). @akiezun I defer to @cmnbroad on whether the issues with `crai` are bad enough to warrant such an approach. . You should be able to make a",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2850:190,test,test,190,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2850,5,['test'],"['test', 'testa']"
Testability,"@asmirnov239 commented on [Thu May 18 2017](https://github.com/broadinstitute/gatk-protected/issues/1065). ---. @asmirnov239 commented on [Thu May 18 2017](https://github.com/broadinstitute/gatk-protected/issues/1065#issuecomment-302528347). @mbabadi could you do it?. ---. @sooheelee commented on [Thu May 18 2017](https://github.com/broadinstitute/gatk-protected/issues/1065#issuecomment-302564888). Is the test <src/test/java/org/broadinstitute/hellbender/tools/coveragemodel/germline/GermlineCNVCallerIntegrationTest.java> not the integration test?. ---. @asmirnov239 commented on [Thu May 18 2017](https://github.com/broadinstitute/gatk-protected/issues/1065#issuecomment-302565368). @sooheelee It's a collection of different tests, but it's missing some use cases. ---. @mbabadi commented on [Mon May 22 2017](https://github.com/broadinstitute/gatk-protected/issues/1065#issuecomment-303249272). @asmirnov239 it covers PoN creation and calling (from the created PoN, and from the ""exact"" PoN). It certainly does not cover all combination of all advanced arguments, and we do not intend to do that either. Perhaps we should extend the test to include w/ and w/o ARD, and w/ and w/o bias covariates. I'm open to suggestions. ---. @asmirnov239 commented on [Wed May 24 2017](https://github.com/broadinstitute/gatk-protected/issues/1065#issuecomment-303858968). @mbabadi What I meant is to write an extra test for a use case of calling events on a single sample (as it is a requirement for our workflows). Just a single test with most generic arguments should suffice I think.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3002:409,test,test,409,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3002,7,['test'],"['test', 'tests']"
Testability,@asmirnov239 commented on [Thu Sep 29 2016](https://github.com/broadinstitute/gatk-protected/issues/727). Here is the stack trace:. ```; java.lang.IllegalArgumentException: the 'to' index must be between 'from' and the length of the data/position sequence; at org.broadinstitute.hellbender.utils.Utils.validateArg(Utils.java:609); at org.broadinstitute.hellbender.utils.param.ParamUtils.inRange(ParamUtils.java:80); at org.broadinstitute.hellbender.utils.hmm.ForwardBackwardAlgorithm$Result.logProbability(ForwardBackwardAlgorithm.java:141); at org.broadinstitute.hellbender.tools.exome.germlinehmm.GenotypeCopyNumberTriStateSegments.lambda$calculateLog10GP$6(GenotypeCopyNumberTriStateSegments.java:197); at java.util.stream.ReferencePipeline$6$1.accept(ReferencePipeline.java:244); at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948); at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481); at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471); at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:545); at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:260); at java.util.stream.DoublePipeline.toArray(DoublePipeline.java:506); at org.broadinstitute.hellbender.tools.exome.germlinehmm.GenotypeCopyNumberTriStateSegments.calculateLog10GP(GenotypeCopyNumberTriStateSegments.java:198); at org.broadinstitute.hellbender.tools.exome.germlinehmm.GenotypeCopyNumberTriStateSegments.lambda$composeVariantContext$0(GenotypeCopyNumberTriStateSegments.java:125); at java.util.stream.IntPipeline$4$1.accept(IntPipeline.java:250); at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110); at java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:693); at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481); at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471); at java.util.stream.ReduceOps$ReduceOp.evaluateSeq,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2898:491,log,logProbability,491,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2898,1,['log'],['logProbability']
Testability,@bbimber I've added a test to your pr https://github.com/broadinstitute/gatk/pull/8750. Should be good to merge if tests pass.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8752:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8752,2,['test'],"['test', 'tests']"
Testability,"@cmnbroad @droazen Didn't realize that I accidentally omitted the `fullName` when specifying the sequence-dictionary argument for PlotModeledSegments:. @Argument(; doc = PlottingUtils.SEQUENCE_DICTIONARY_DOC_STRING,; shortName = StandardArgumentDefinitions.SEQUENCE_DICTIONARY_NAME; ); private File inputSequenceDictionaryFile;. This works when called in WDL tests using the fullName `--sequenceDictionary` (which is why it slipped by me--I would've thought this should fail):. java -Xmx${command_mem}m -jar $GATK_JAR PlotModeledSegments \; --denoised-copy-ratios ${denoised_copy_ratios} \; --allelic-counts ${het_allelic_counts} \; --segments ${modeled_segments} \; --sequence-dictionary ${ref_fasta_dict} \; --minimum-contig-length ${default=""1000000"" minimum_contig_length} \; --output ${output_dir_} \; --output-prefix ${entity_id}. However, the argument names appear in the documentation as:. --inputSequenceDictionaryFile,-sequence-dictionary:File. And if the argument is not specified, this gives the error message:. A USER ERROR has occurred: Argument inputSequenceDictionaryFile was missing: Argument 'inputSequenceDictionaryFile' is required. Is this intended behavior? If so, please close, but it seems a little unexpected to me.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4049:359,test,tests,359,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4049,1,['test'],['tests']
Testability,"@cmnbroad Could you look into it, if necessary?. ````; org.broadinstitute.hellbender.exceptions.GATKException: Timeout waiting for background stream write to complete; 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterService.waitForPreviousBatchCompletion(AsynchronousStreamWriterService.java:96); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.dispatchABatch(AsynchronousStreamWriterServiceUnitTest.java:79); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.testAsyncWriteInBatches(AsynchronousStreamWriterServiceUnitTest.java:35); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.te",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4024:562,test,testAsyncWriteInBatches,562,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4024,2,['test'],"['testAsyncWriteInBatches', 'testng']"
Testability,@cmnbroad I left some of the AnnoationManager code in VariantAnnotatorEngine because there were tests for VariantAnnotatorEngine which required `ofSelectedMinusExcluded` and it seemed clunky to achieve the same thing through the creation and execution of an abstract plugin. I can change it if you would like. Fixes #3287,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4674:96,test,tests,96,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4674,1,['test'],['tests']
Testability,"@cmnbroad I updated VariantQC and identified one minor difference in behavior associated with VariantEvalEngine. Contig stratification assigns level based on all the contigs. If user-supplied contigs are given, it should defer to these. This PR addresses this, and adds a test case. Note: I put the getContigNames() method into VariantEvalEngine, but it would also be possible to keep this in Config, but expose a getter for userSuppliedIntervals. It seemed marginally better to keep that private.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7238:272,test,test,272,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7238,1,['test'],['test']
Testability,"@cmnbroad and I have both observed that the `SortSamSparkIntegrationTest.testSortBAMsSharded` tests fail locally on our machines despite the tests apparently working on travis. The tests fail because the comparator detects the files are out of their reported sort order. When I went digging into the failing tests it appears that the files are getting correctly sorted and written out correctly into 2 shards with proper names (`filename-0000` and `filename-0001`). After reading the sharded directory as input, it appears that the two files are read out of order. That is to say that calling `readsRDD.collect()` clearly places all of the `filename-0001` reads before the `filename-0000` reads. . After digging around it appears the problem might lie in Disq somewhere as it appears everything is working as expected until the `abstractSamSource.getReads()` line is encountered in `HtsjdkReadsRddStorage`. I suspect something is going awry with the filesystem mechanism for ordering the input files on our Macs that travis is sidestepping. . Out of curiosity @tomwhite I thought that the sharded output wrote headerless bam chunks, but that appears not to be the case at all? Was I wrong in that assumption or did that change when we switched to Disq.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5881:73,test,testSortBAMsSharded,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5881,5,['test'],"['testSortBAMsSharded', 'tests']"
Testability,@cmnbroad please review. very small test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/881:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/881,1,['test'],['test']
Testability,@cmnbroad reports that he's seeing out-of-memory errors when running the test suite locally. He says it could be a recently-introduced regression -- we should narrow it down to a single commit.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2484:73,test,test,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2484,1,['test'],['test']
Testability,"@cwhelan @tedsharpe please review. There are two tools here:. 1) PathSeqKmerSpark - builds kmer library as a hopscotch set from a given reference (done); 2) PathSeqFilterSpark - preprocessing / human read filtering tool (work in progress, currently has read preprocessing steps implemented). Made modifications to the SV kmer classes: . 1) SVKmerSmall class uses only 1 long (up to 31 bases), largely copied from SVKmer; 2) SVKmer and SVKmerSmall are both derived from SVKmerBase; 3) SVKmerizer uses generics so it can work with either type, moved some static functions to SVUtils. There are a bunch of new read filters and transformers for the filtering steps, including symmetric DUST. Unit tests included.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2237:693,test,tests,693,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2237,1,['test'],['tests']
Testability,"@d-cameron noticed a weird bad alignment coming out of the GKL SmithWaterman implementation, but our java version produces the same thing. . See https://github.com/Intel-HLS/GKL/issues/104. The following test produces the alignment `11S1M` when it seems like it should be producing `6S6M`. Running with different SWOverhangStrategys changes the results. . ```; @Test; public void should_return_maximal_alignment_match() {; try(final SmithWatermanAligner aligner = getAligner()) {; final SmithWatermanAlignment alignment = aligner.align(; ""GGGGGGTTTTTT"".getBytes(),; ""AAACCCTTTTTT"".getBytes(),; // BWA alignment scoring matrix; new SWParameters(1, -4, -6, -1), SWOverhangStrategy.SOFTCLIP);; Assert.assertEquals(alignment.getCigar().toString(), ""6S6M"");; Assert.assertEquals(alignment.getAlignmentOffset(), 6);; }; }; ```. These are what get computed with the current implementation.; | Strategy | Result |; | --------- | ------ |; | SOFTCLIP | 11S1M |; | INDEL | 6D6I6M |; | LEADING_INDEL | 6D6I6M |; | IGNORE | 12M |. The other strategies seem to be doing what I'd expect, but SOFTCLIP seems wrong.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6576:204,test,test,204,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6576,6,"['Assert', 'Test', 'assert', 'test']","['Assert', 'Test', 'assertEquals', 'test']"
Testability,"@davidbenjamin @ldgauthier: in #6263 you added --force-output-intervals to GenotypeGVCFs, which forces the tool to output variants based on a whitelist of sites. I believe this exposed a pre-existing, not related bug. GenotypeGVCFsEngine.removeNonRefAlleles() currently assumes the input has only one alternate allele. If the gVCF has a site with 3 or more alleles, GenotypeGVCFsEngine.removeNonRefAlleles() isnt going to work as intended. If any NON_REF is found, it *should* remove ALT allele header lines and return the new VC with NON_REF removed. It currently only does this if ""newAlleles.size() == 1"", which I assume is a proxy for not having alternates. That assumes the input had only 2 alleles, which isnt safe. This PR includes a fix for this. When I started investigating this I made a repro case (the attached VCF) and test case in GenotypeGVCFsIntegration test that uses --force-output-intervals to illustrate this. Now that the actual problem is clearer, I could understand if you dont want to add more test data to GATK. . I tried to write a unit test for removeNonRefAlleles(), but it didnt seem like it was going to be easy to make a new instance of GenotypeGVCFsEngine.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6406:832,test,test,832,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6406,4,['test'],['test']
Testability,"@davidbenjamin commented on [Thu Apr 20 2017](https://github.com/broadinstitute/gatk-protected/issues/995). We have a Q script for in silico mixing, which we should port to wdl, and we have haploid exomes and genomes. We should use this to make great truth data for testing Mutect.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2974:266,test,testing,266,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2974,1,['test'],['testing']
Testability,"@davidbenjamin commented on [Tue Jun 07 2016](https://github.com/broadinstitute/gatk-protected/issues/542). Calculating log gammas is an expensive part of the allele fraction model. We could speed this with negligible loss of accuracy by caching a few tens of thousands of values from 0 to 100 or 1000 and using linear interpolation. This issue can be closed by implementing such caching or by showing that it doesn't significantly improve performance. ---. @davidbenjamin commented on [Tue Jun 07 2016](https://github.com/broadinstitute/gatk-protected/issues/542#issuecomment-224329788). The JVM running on my laptop does 10 million log gammas per second, which is about three times as expensive as logarithms. The allele fraction model needs to calculate 4 log gammas per het, so if you have 25,000 hets all the log gammas in the model likelihood take 1/100 of a second. . To get MLEs for each parameter (minor allele fractions, outlier probability etc) might require 100 evaluations each, so we're probably dealing with 10 seconds of log gammas per iteration to find the posterior mode. Getting a few hundred MCMC samples is probably more expensive but roughly comparable. These numbers are manageable but get expensive when we relearn the model at every iteration of segment merging. In my opinion it makes sense to come back to this issue after we have a new segmentation strategy. We'll see how pressing it is then. ---. @samuelklee commented on [Wed Jun 08 2016](https://github.com/broadinstitute/gatk-protected/issues/542#issuecomment-224786950). To clarify, I think this is primarily an issue for WGS, where we have ~1.5 million hets. From the logs in /dsde/working/lichtens/wgs/out_case_chip_wgs/acnv/*out it looks like finding the MLE takes ~10 minutes (which is roughly consistent with your estimate), but 200 MCMC iterations takes ~1 hr. Naive profiling of the AlleleFractionModeller tests suggests that around ~60% CPU is going toward log gammas, so if we can improve on this I think it ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2860:120,log,log,120,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2860,6,['log'],"['log', 'logarithms']"
Testability,"@davidbenjamin commented on [Tue Mar 22 2016](https://github.com/broadinstitute/gatk-protected/issues/413). We used to have a concordance test with XHMM, but we can't use that anymore.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2841:138,test,test,138,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2841,1,['test'],['test']
Testability,"@davidbenjamin has requested that we look into whether there are `PairHMM` optimizations we could do that would benefit Mutect2 specifically -- the performance profile may be different than for the `HaplotypeCaller`. . Intel has agreed to have a look, but they'll need a Mutect2 test case that they can run. @davidbenjamin would you be able to provide one?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2562:279,test,test,279,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2562,1,['test'],['test']
Testability,@droazen @lbergelson - Need test input gVCF files and golden output for the GenomicsDB importer test code,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2462:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2462,2,['test'],['test']
Testability,@droazen Can you review this once tests pass?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4980:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4980,1,['test'],['tests']
Testability,@droazen Here are a couple of unit tests for some heavily-uses and previously untested methods.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4843:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4843,1,['test'],['tests']
Testability,@droazen Here's the other test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6861:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6861,1,['test'],['test']
Testability,@droazen I plugged this into the `HaplotypeCaller` integration tests and it looks really good. The concordance tests fail due to a handful of false positives but these are _all_ obvious true positive multiallelics that the old qual model behaves stupidly on. I'm not sure who the right reviewer for this is but I'm guessing it's @ldgauthier and/or @vruano.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2098:63,test,tests,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2098,2,['test'],['tests']
Testability,"@droazen Two .vcf files used for testing prevented cloning the GATK on my home laptop. Supposedly ecryptfs is okay up to 143 characters, but I think that might be _typical_ behavior rather than guaranteed safe. It seems like knocking 10-20 characters off the names should make them totally safe. I don't know how important it is for the files to have metadata in their names. **length 142:**; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.CEUTrio.HiSeq.WGS.b37.NA12878.CONTAMINATED.WITH.HCC1143.NORMALS.AT.15PERCENT.calls.20.10100000-10150000.gatk3.8-1-1-gdde23f56a6.g.vcf; **length 140:**; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.CEUTrio.HiSeq.WGS.b37.NA12878.CONTAMINATED.WITH.HCC1143.NORMALS.AT.15PERCENT.calls.20.10100000-10150000.gatk3.8-1-1-gdde23f56a6.vcf",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4718:33,test,testing,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4718,3,['test'],"['test', 'testing']"
Testability,"@droazen commented on [Wed Apr 05 2017](https://github.com/broadinstitute/gatk-protected/issues/977). The docker tests take about 40 minutes in travis, while the next-slowest travis task takes about 30 minutes. We should try to reduce the runtime of the docker tests to <= 30 minutes. ---. @droazen commented on [Wed Apr 05 2017](https://github.com/broadinstitute/gatk-protected/issues/977#issuecomment-292032382). For @LeeTL1220 . ---. @LeeTL1220 commented on [Wed Apr 05 2017](https://github.com/broadinstitute/gatk-protected/issues/977#issuecomment-292032644). I thought we were going to address this with a GATK base image... what is; target time? (Within reason). On Apr 5, 2017 20:08, ""droazen"" <notifications@github.com> wrote:. For @LeeTL1220 <https://github.com/LeeTL1220>. —; You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub; <https://github.com/broadinstitute/gatk-protected/issues/977#issuecomment-292032382>,; or mute the thread; <https://github.com/notifications/unsubscribe-auth/ACDXk_R_mkaEcEJlOt3lJntscqeum3-lks5rtC0SgaJpZM4M09tE>; . ---. @droazen commented on [Wed Apr 05 2017](https://github.com/broadinstitute/gatk-protected/issues/977#issuecomment-292033277). That is tracked at https://github.com/broadinstitute/gatk/issues/2457 and slated for beta (mid-May). This ticket in protected can be considered as blocked until https://github.com/broadinstitute/gatk/issues/2457 is done.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2965:113,test,tests,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2965,2,['test'],['tests']
Testability,"@droazen easy one for you... we do have test for both of these. In fact, I think we ONLY have tests that enable these... Inspired by #2549",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2550:40,test,test,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2550,2,['test'],"['test', 'tests']"
Testability,"@ilyasoifer I noticed this method wasn't doing anything, it looks like it should have a return here. . Also, I made the logger static because it's probably expensive to allocate one for every read and you don't need to.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8576:120,log,logger,120,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8576,1,['log'],['logger']
Testability,"@jamesemery Could you review this? I think you may appreciate it. It took several tries, but I was finally able to write a stripped-down version of the code that actually slightly outperforms the old version. What I realized after a lot of profiling the old code and various failed rewrites was that cache-friendliness is the critical thing here. It turns out that this can be achieved without too many buffers, without precomputing the log frequencies, and without storing 2D and 3D arrays as flattened 1D arrays.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6351:437,log,log,437,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6351,1,['log'],['log']
Testability,"@jamesemery The fun begins. No change in output yet, but a non-trivial change in implementation. Instead of making preliminary event groups according to overlap, then merging them according to mutually excluded events, this PR does it all in one step while automatically handling transitivity by treating as a matter of finding connected components of a graph whose vertices are events and whose edges are reasons (overlap and mutex) for events to be in the same event group. All the failures are from WDL tests. I assume those are not related.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8366:506,test,tests,506,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8366,1,['test'],['tests']
Testability,"@jamesemery This fixes the case you found, hopefully bringing us closer to turning on linked de Bruijn graphs. I will start testing M2. If you test in HC, continue to keep in mind that adaptive pruning is not default. This change will be most important for rare complex graphs and in combination with junction trees but I did see modest improvements to indel sensitivity even with the old assembly.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6520:124,test,testing,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6520,2,['test'],"['test', 'testing']"
Testability,@jean-philippe-martin I think this might be a slightly better approach then merging the cloud tests into the main tests. This just adds another build to the matrix so we have 1 for mandatory cloud tests and 1 for todo cloud tests. That way we don't dramatically increase the build time by mashing the cloud tests into the main ones.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/823:94,test,tests,94,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/823,5,['test'],['tests']
Testability,"@jean-philippe-martin reported a null pointer running the following. ```; BaseRecalibrator -I src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.bam -R hs37d5.fa --RECAL_TABLE_FILE output.table -knownSites src/test/resources/empty.vcf; ```. or . ```; BaseRecalibrator -I src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.bam -R hs37d5.fa --RECAL_TABLE_FILE output.table -knownSites src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf; ```. > Exception in thread ""main"" java.lang.NullPointerException; > at org.broadinstitute.hellbender.utils.fasta.CachingIndexedFastaSequenceFile.getSubsequenceAt(CachingIndexedFastaSequenceFile.java:286); > (...)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/355:98,test,test,98,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/355,4,['test'],['test']
Testability,"@jonn-smith Quick one when you get a chance - this fixes some things I noticed on my GATK branch when testing my new htsjdk `VCFHeader` code. The `Funcotator.checkIfAlreadyAnnotated `code was checking for a header line that was never generated by `Funcotator` AFAICT, and this also ties together the `Funcotator` engine and test code to use the same constants. More could probably be done here but it would require a bigger refactoring.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7555:102,test,testing,102,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7555,2,['test'],"['test', 'testing']"
Testability,@kachulis I hope you find this entertaining. Closes #150. Closes #4919. . Also fixes a bug we didn't know about where `LeftAlignAndTrimVariants` didn't do anything when `--dont-trim` was set. Also fixes a bug where `LeftAlignAndTrimVariants` couldn't left align an indel past a SNP. Also fixes a bug where `LeftAlignAndTrimVariants` didn't left align multiallelic variants when splitting was turned off. Probably fixes a few other bugs since the old code failed a bunch of my unit tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6427:481,test,tests,481,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6427,1,['test'],['tests']
Testability,"@kcibul reports that if the CNNScoreVariants python code throws an exception during async batch processing, the GATK tool hangs (specifically, it was happening when GATK was sending a . for a missing annotation, and the python code was trying to interpret that as a number and blowing up). It looks like this happens because `StreamingPythonScriptExecutor::waitForPreviousBatchCompletion` waits for the async write thread `Future` to complete first, before checking the fifo for an `ACK`/`NCK` (which is when the exception would be propagated). If the async write thread is blocked because the fifo is full because the python code isn't retrieving data because an exception was thrown, the java side will hang waiting for the `Future` complete. The solution is to reverse the order of the `waitForPreviousBatchCompletion` checking (ack first, then validate that the async write `Future` completes). There is a [branch]( https://github.com/broadinstitute/gatk/tree/cn_async_python_exception) with a test and a fix for the StreamingPythonExecutor, and a [separate branch](https://github.com/broadinstitute/gatk/tree/cn_cnn_exception) with a test for CNNScoreVariants that also has the executor fix. I need to verify that the CNNSCoreVariants test actually fails without the fix, and then this can be turned into a PR, which I'll do when I return from vacation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7401:998,test,test,998,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7401,3,['test'],['test']
Testability,"@kdatta @kgururaj It seems like we're losing rsID's in the input gvcf when we load them into genomics db. Is this deliberate to save space? Is it a bug? Is it a configuration option that isn't exposed by `GenomicsDBImport`? . I don't think it's important for production because they pass in a dbSNP at genotyping time so that can be recomputed, but it's causing issues in some of my tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2636:383,test,tests,383,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2636,1,['test'],['tests']
Testability,"@kgururaj We got this issue report in the forum, could you please look into it? Thanks!. https://gatkforums.broadinstitute.org/gatk/discussion/12388/how-to-use-multi-interval-in-genomicsdbimport-with-gatk-4-0-6-0. ----. I used the GenomicsDBImport with a interval list file and got a error like below.; So what is the correct way to use Multi-interval in GenomicsDBImport?. gatk version: 4.0.6.0. Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx4g -Xms4g -jar /mnt/gatk/gatk-4.0.6.0/gatk-package-4.0.6.0-local.jar GenomicsDBImport -L test.intervals --genomicsdb-workspace-path ../RAW_VCF/my_database -V file1 -V file2 -V file3. 02:57:15.591 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/mnt/workshop/xinchen.pan/test/gatk/gatk-4.0.6.0/gatk-package-4.0.6.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 02:57:15.772 INFO GenomicsDBImport - ------------------------------------------------------------; 02:57:15.772 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.0.6.0; 02:57:15.772 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 02:57:15.772 INFO GenomicsDBImport - Executing as on Linux v3.10.0-514.6.1.el7.x86_64 amd64; 02:57:15.772 INFO GenomicsDBImport - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_121-b13; 02:57:15.773 INFO GenomicsDBImport - Start Date/Time: July 10, 2018 2:57:15 AM EDT; 02:57:15.773 INFO GenomicsDBImport - ------------------------------------------------------------; 02:57:15.773 INFO GenomicsDBImport - ------------------------------------------------------------; 02:57:15.773 INFO GenomicsDBImport - HTSJDK Version: 2.16.0; 02:57:15.773 INFO GenomicsDBImport - Picard Version: 2.18.7; 02:57:15.773 INFO GenomicsDBImport - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 02:57:15.773 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_S",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4994:660,test,test,660,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4994,2,['test'],['test']
Testability,"@lbergelson @droazen I'm trying to remove the shroud of enigma from this important class, starting by adding a few modest tests and chiseling away unused methods. Ultimately I want to document and write bulletproof tests for the merge methods, but that's for another day. I'm assuming you want PRs like this to go through the engine team. Feel free to send it back without further review if it needs more tests!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4190:122,test,tests,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4190,3,['test'],['tests']
Testability,"@lbergelson @jamesemery I'm on vacation, but saw #7800 and #7801 go by in the gatk4-github Slack channel. Just curious to see if this will work on Travis and/or Github Actions---can you take it from here, if needed?. I've confirmed that this branch works locally in my Ubuntu environment and that `import gcnvkernel` and `import sklearn` both work in the resulting environment (whereas these imports failed in master, although the environment built successfully---this seems to mirror what is happening on test infrastructure in #7800). In contrast, the approach in #7801 doesn't seem to work for me locally, and we've seen that including conda build strings is a bit restrictive. See e.g. https://github.com/broadinstitute/gatk/pull/5026#issuecomment-628860774. . Closes #7800.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7802:506,test,test,506,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7802,1,['test'],['test']
Testability,"@lbergelson Would you mind looking at this one? This branch started when I was working on our assembly and genotyping windows and ran into dead ends because the clipping code was indecipherable. i.e. as Laura put it it's fighting dragons and not fighting windmills. The diff looks intimidating but I took great pains to make the commit history reviewer-friendly. Every commit is self-contained. Also, only three commits are particularly demanding: CigarBuilder class, greatly simplified hard and soft clipping methods in ClippingOp, and sped a very wasteful test util for generating many cigar permutations. Most of the other commits are rubber-stampable.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6403:558,test,test,558,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6403,1,['test'],['test']
Testability,@lbergelson commented on [Mon Apr 11 2016](https://github.com/broadinstitute/gatk-protected/issues/443). I recently broke the ability to create a spark/shadow jar and only discovered it when I went to create one later. We should add simple tests for the generated jar to be sure it can be created / executed.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2844:240,test,tests,240,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2844,1,['test'],['tests']
Testability,@lbergelson commented on [Mon Nov 14 2016](https://github.com/broadinstitute/gatk-protected/issues/763). Update to the current version of public. This requires an update to spark 2.0 which means it needs some extra testing before merging. . @LeeTL1220 would like to run some wdl's to check that things are still working.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2911:215,test,testing,215,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2911,1,['test'],['testing']
Testability,"@lbergelson commented on [Wed Aug 31 2016](https://github.com/broadinstitute/gatk-protected/issues/659). I got a segfault while running CreatePanelOfNormalsIntegrationTest. Subsequent runs were unable to reproduce it. ```; 18:03:07.573 WARN TaskSetManager:70 - Stage 181 contains a task of very large size (119 KB). The maximum recommended task size is 100 KB.; Test: Test method testAllTargetsHDF5PoNCreationSpark[0](null, src/test/resources/org/broadinstitute/hellbender/tools/exome/create-pon-control-full.pcov)(org.broadinstitute.hellbender.tools.exome.CreatePanelOfNormalsIntegrationTest) produced standard out/err: 18:03:07.612 WARN TaskSetManager:70 - Stage 182 contains a task of very large size (119 KB). The maximum recommended task size is 100 KB. 18:03:07.612 WARN TaskSetManager:70 - Stage 182 contains a task of very large size (119 KB). The maximum recommended task size is 100 KB.; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000000010a5a9401, pid=2425, tid=8963; #; # JRE version: Java(TM) SE Runtime Environment (8.0_91-b14) (build 1.8.0_91-b14); # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.91-b14 mixed mode bsd-amd64 compressed oops); # Problematic frame:; # V [libjvm.dylib+0x1a9401]; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /Users/louisb/Workspace/gatk-protected/hs_err_pid2425.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #; ```. [hs_err_pid2425.log.txt](https://github.com/broadinstitute/gatk-protected/files/448383/hs_err_pid2425.log.txt). @yfarjoun Is this similar to the crash you saw a while back?. ---. @yfarjoun commented on [Wed Aug 31 2016](https://github.com/broadinstitute/gatk-protected/issues/659#issuecomment-243946864). no. this is different. On Wed, Aug 31, 2016 at 3",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2883:362,Test,Test,362,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2883,3,"['Test', 'test']","['Test', 'test']"
Testability,"@ldgauthier this finishes what we started in #4858 and is necessary for the pileup-calls-on-bamouts MC3 validation. The cause is the same, in that Pair-HMM has a tiny bias in favor of shorter haplotypes and thus it prefers deletion haplotypes when reads end inside STRs. In #4858 we broke near-ties in favor of the reference; this PR fixes the case where two alt haplotypes share a SNV and one of them has a spurious deletion. One important sanity check was that when I set `cigarTerm` to zero in `AssemblyBasedCallerUtils.java` no tests broke. This means that the refactoring needed to set up the change didn't affect behavior. I looked at most of the sites where `PL`s and/or `DP`s changed in the integration test vcfs and in every case the difference was from a fake deletion that this PR fixed. I also went through the diff of the bamouts in IGV and found the same thing. Finally, the changes to test vcfs in `GenotypeGVCFsIntegrationTest` and `GenomicsDBImporterIntegrationTest` are a consequence of changes to the `HaplotypeCallerIntegrationTest` vcfs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5359:532,test,tests,532,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5359,3,['test'],"['test', 'tests']"
Testability,@magicDGS here you go. All unit tests in SV package now.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3789:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3789,1,['test'],['tests']
Testability,"@mbabadi commented on [Thu Jan 05 2017](https://github.com/broadinstitute/gatk-protected/issues/843). - [ ] sinusoidal test data in `FourierLinearOperatorNDArrayUnitTest`; - [ ] case-sample calling on rearranged targets in `GermlineCNVCallerIntegrationTest`; - [ ] concordance on parameter estimation in `GermlineCNVCallerIntegrationTest`; - [ ] test Spark results match local results in `GermlineCNVCallerIntegrationTest`; - [ ] report statistics on max likelihood copy ratio as well in `GermlineCNVCallerIntegrationTest`; - [ ] report statistics on local copy ratio posteriors as well in `GermlineCNVCallerIntegrationTest`; - [ ] unit tests for `ComputableGraphStructure`; - [ ] unit tests for `ImmutableComputableGraph`; - [ ] unit tests for ensuring that ICG nodes are treated as immutable and not modified by mistake; - [ ] unit tests for `CoverageModelEMWorkspaceMathUtils`; - [ ] unit tests for `CoverageModelParameters` (reading/writing); - [ ] unit tests for `CoverageModelSparkUtils`; - [ ] the issue with Spark tests and custom serializers (gCNV Spark tests are currently disabled). **Discussion about gCNV ICG unit tests (May 1st, 2017):**; It is possible to automate the test for ComputableNodeFunctions. One initializes the parents to random values, calls the function, and checks whether it has had any side effects on the parents. One must make a random-data-provider-of-some-sort for each parent node because the parent INDArrays have different shapes. For other functions in CoverageModelEMComputeBlock and CoverageModelEMWorkspace that query ICG nodes -- one needs to create a firewall. One can elevate all such functions to classes that essentially behave functionally, (ICGNodeProvider, List<NodeKey>, extra arguments) -> output, as opposed to writing vanilla member functions such as CoverageModelEMComputeBlock.getBiasLatentPosteriorDataUnregularized, etc. Then we can write automated unit tests for these classes. Another approach is to write a thin ImmutableNDArray interface ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2929:119,test,test,119,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2929,10,['test'],"['test', 'tests']"
Testability,@mbabadi commented on [Thu Jan 12 2017](https://github.com/broadinstitute/gatk-protected/issues/853). - [ ] thread capping in `SynchronizedUnivariateSolver`; - [ ] faster calculation of prior copy number contribution to log likelihood in `IntegerCopyNumberExpectationsCalculator`; - [ ] optimize `CoverageModelEMWorkspace.replaceMaskedEntries` using Nd4j native ops,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2931:220,log,log,220,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2931,1,['log'],['log']
Testability,"@mbabadi commented on [Thu May 18 2017](https://github.com/broadinstitute/gatk-protected/issues/1058). - [ ] good choice of default parameters; - [ ] double-check assertion coverage in `CoverageModelArgumentCollection.validate()`; - [ ] if a model is provided, ARD and number of PCs must be overridden (currently, an exception is thrown if there is a discrepancy between model parameters and arguments). Relevant discussion:; **Mehrtash**: We may be able to get rid of a number of these parameters. Though, generally speaking, I'd rather expose more than less, with good default values and bold advanced disclaimers w/ proper documentation as you suggested. This is the case with sophisticated tools like HaplotypeCaller, StarAligner, etc. Soon enough, we will get strange errors from various users many of which can be resolved by changing a certain advanced parameter. Without exposing them, we will have to create patches for them and/or build custom jars.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2995:163,assert,assertion,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2995,1,['assert'],['assertion']
Testability,@mbabadi commented on [Thu May 18 2017](https://github.com/broadinstitute/gatk-protected/issues/1059). We have to learn the upcoming Nd4j _workspaces_ and use it to reduce the memory footprint of gCNV. It is already merged but the latest Nd4j release (0.8.0) doesn't have it yet. API:; https://github.com/deeplearning4j/nd4j/blob/master/nd4j-buffer/src/main/java/org/nd4j/linalg/api/memory/conf/WorkspaceConfiguration.java; https://github.com/deeplearning4j/nd4j/blob/master/nd4j-buffer/src/main/java/org/nd4j/linalg/api/memory/MemoryWorkspaceManager.java; https://github.com/deeplearning4j/nd4j/blob/master/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/memory/abstracts/Nd4jWorkspace.java; https://github.com/deeplearning4j/nd4j/blob/master/nd4j-buffer/src/main/java/org/nd4j/linalg/api/memory/MemoryWorkspace.java. Tests:; https://github.com/deeplearning4j/nd4j/blob/master/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/workspace/BasicWorkspaceTests.java; https://github.com/deeplearning4j/nd4j/blob/master/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/workspace/EndlessWorkspaceTests.java; https://github.com/deeplearning4j/nd4j/blob/master/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/workspace/SpecialWorkspaceTests.java,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2996:840,Test,Tests,840,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2996,7,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,@mbabadi commented on [Tue May 02 2017](https://github.com/broadinstitute/gatk-protected/issues/1021). - [ ] factor I/O methods out of `CoverageModelEMWorkspace` and to a new class; - [ ] shrink the exposed API; - [ ] rename/refactor `CopyRatioCallingMetadata` appropriately; - [ ] rename/move `MathObjectAsserts` to test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2979:317,test,test,317,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2979,1,['test'],['test']
Testability,@mbabadi commented on [Wed Apr 19 2017](https://github.com/broadinstitute/gatk-protected/issues/990). `RobustBrentSolver` is a univariate solver developed as a part of GATK coverage model. It has a Brent solver at the core but tries to avoid spurious non-bracketing conditions by creating a collection of refined sub-brackets. The implementation needs to be made more flexible:; - Allow the user to specify how sub-brackets are generated. The default grid is a logarithmic grid concentrated about the leftmost endpoint followed by uniform refinement of each grid element.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2971:461,log,logarithmic,461,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2971,1,['log'],['logarithmic']
Testability,"@mbabadi commented on [Wed Oct 19 2016](https://github.com/broadinstitute/gatk-protected/issues/745). The PoN must:. - [x] Contain as much non-trivial information as possible:; \* Model parameters (W, \Psi, m; also, ordered norms of W); \* Sample names used to make the PoN; \* Posterior expectations (\gamma, z, d, total remove variance, total unexplained variance); \* Useful distributions (bootstrapped distribution of log likelihoods and sample-specific variances); \* Command-line used to make the PoN (add a log file to the HDF5 bundle in the end). - [x] Be human-readable ideally. Binary dumps are fast but are difficult to work with in debugging.; - [ ] Encapsulated and easily shared, perhaps via HDF5 bundles. ---. @mbabadi commented on [Thu May 18 2017](https://github.com/broadinstitute/gatk-protected/issues/745#issuecomment-302465665). This is partially addressed in PR https://github.com/broadinstitute/gatk-protected/pull/857. We must, however, decide whether or not we want to bundle models into HDF5 blobs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2905:422,log,log,422,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2905,2,['log'],['log']
Testability,"@meganshand This fixes the Sarah's recent bug, and just makes sense in general. I am not adding a regression test because our work on linked de Bruijn graphs is going to moot stuff like this soon.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5960:109,test,test,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5960,1,['test'],['test']
Testability,"@meganshand commented on [Thu Feb 16 2017](https://github.com/broadinstitute/gatk-protected/issues/907). Using a tiny bam file that I typically use for testing while running the CNV wdl on the cloud, I got the following errors (the tiny file is here: `gs://broad-dsde-methods/takuto/test_files/small_NA12878_hg19.bam`):. 1. The output tsv from TumorNormalizeSomaticReadCounts contained NaNs; 2. TumorPerformSeg threw the following error:. ```; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp; [February 16, 2017 3:23:02 PM UTC] org.broadinstitute.hellbender.tools.exome.PerformSegmentation --tangentNormalized /cromwell_root/broad-dsde-methods/cromwell-execution-24/TumorOnly/f30dd8c6-eec3-45ba-b7f2-f845d308d59d/call-TumorNormalizeSomaticReadCounts/small_NA12878.tn.tsv --output small_NA12878.seg --log2Input true --alpha 0.01 --nperm 10000 --pmethod hybrid --minWidth 2 --kmax 25 --nmin 200 --eta 0.05 --trim 0.025 --undoSplits none --undoPrune 0.05 --undoSD 3 --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false; [February 16, 2017 3:23:02 PM UTC] Executing as root@3addd2d7b373 on Linux 3.16.0-0.bpo.4-amd64 amd64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_121-b13; Version: Version:c17c8ed-SNAPSHOT; [February 16, 2017 3:23:04 PM UTC] org.broadinstitute.hellbender.tools.exome.PerformSegmentation done. Elapsed time: 0.04 minutes.; Runtime.totalMemory()=185597952; org.broadinstitute.hellbender.utils.R.RScriptExecutorException: ; Rscript exited with 1; Command Line: Rscript -e tempLibDir = '/cromwell_root/tmp/root/Rlib.5210694187065743072';source('/cromwell_root/tmp/root/CBS.8616708738798684646.R'); --args --sample_name=NA12878 --targets_file=/cromwell_root/broad-dsde-methods/cromwell-execution-24/TumorOnly/f30dd8c6-eec3-45ba-b7f2-f845d308d59d/call-TumorNormalizeSomaticReadCounts/small_NA12878.tn.tsv --output_file=small_NA12878.seg --log2_input=TRUE --min_width=2 --alpha=0.01 --nperm=10000 --pmethod=hybrid --kmax=25 --nmin=200 --eta=0.05 --t",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2944:152,test,testing,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2944,1,['test'],['testing']
Testability,"@nalinigans @droazen @mlathara I posted a while ago about an odd difference between data aggregated using CombineGVCFs and data aggregated using GenomicsDBImport. We created a minimal repro case to illustrate it. The basic idea is this:. - Run either CombineGVCFs or GenomicsDBImport on a set of gVCFs; - Run SelectVariants on the output. The data processed using GenomicsDBImport will contain a bunch of lines like these, with ambiguous REF alleles:. 19	75166	.	N	*,<NON_REF>	.	.	DP=3	GT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB	./.:.:2:6:2:.:.:0,6,57,6,57,57	.|.:0,1,0:1:3:.:0|1:75165_AGCGGAGGGGAGCGGCGCGGAGGGGCGCGGAGGGGC_A:45,3,0,45,3,45:75165:0,0,1,0	./.:.:0:0:0:.:.:0,0,0,0,0,0	./.:.:0:0:0:.:.:0,0,0,0,0,0. the data processed through CombineGVCFs shows the proper REF:. 19	75166	.	G	*,<NON_REF>	.	.	DP=3	GT:AD:DP:GQ:MIN_DP:PGT:PID:PL:PS:SB	./.:.:2:6:2:.:.:0,6,57,6,57,57	.|.:0,1,0:1:3:.:0|1:75165_AGCGGAGGGGAGCGGCGCGGAGGGGCGCGGAGGGGC_A:45,3,0,45,3,45:75165:0,0,1,0	./.:.:0:0:0:.:.:0,0,0,0,0,0	./.:.:0:0:0:.:.:0,0,0,0,0,0. I dont fully understand the data format in a GenomicsDB Workspace, but it would suggest either a) it's storing the wrong REF, or b) the codec is somehow not properly re-adding the REF at read time. Here is a public, downloadable set of repro data. It's large mostly b/c it has our reference genome. The included bash script takes just a few minutes to run, should you want to repro the whole thing. I bundled our actual GATK JAR as well. You can view/download through the browser here:. https://prime-seq.ohsu.edu/project/Labs/Bimber/Collaborations/GATK/begin.view?. or download on the command line:. wget https://prime-seq.ohsu.edu/_webdav/Labs/Bimber/Collaborations/GATK/%40files/ambigRefRepro.tar.gz. Please let me know if there's anything we can check locally. We have a test case set up in intellij if there's something useful we could try through there. . These incorrect REF alleles become a problem downstream when genotyping. Thanks for any help.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7089:1794,test,test,1794,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7089,1,['test'],['test']
Testability,"@nalinigans I have some very long-running jobs that I'm trying to track, but my stderr is choked with buffer resize outputs. Would it be possible to turn those off by default or add a flag to turn them off? It makes for huge log files and it's hard to track if the log is still being updated for jobs that run >24hrs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5568:225,log,log,225,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5568,2,['log'],['log']
Testability,"@ronlevine commented on [Fri Jul 15 2016](https://github.com/broadinstitute/gsa-unstable/issues/1438). ### Instructions. Follow up to #1432.; Remove the following code from `IntervalUtils. intervalFileToList()` when a new exome, correctly converted interval list (with no -1 length intervals) is released :. ```; if (interval.getStart() - interval.getEnd() == 1 ) { ; logger.warn(""Possible incorrectly converted length 1 interval : "" + interval);; }; ```. ---; ## Feature request; ### Tool(s) involved. Any tool using `IntervalUtils. intervalFileToList()` ; ### Description. Once this change is made, -1 length intervals will be validated and an exception will be thrown. ---. ---. @vdauwera commented on [Mon Nov 14 2016](https://github.com/broadinstitute/gsa-unstable/issues/1438#issuecomment-260495927). From what I understand of the referenced thread, the ""incorrect"" interval list may always be around, so we may never be able to just blow up on it. Would it perhaps be more viable to add an option to toggle the level of stringency, ie choose in the command line whether to blow up or skip on these invalid intervals? . ---. @vdauwera commented on [Mon Nov 14 2016](https://github.com/broadinstitute/gsa-unstable/issues/1438#issuecomment-260496001). @yfarjoun will want to opine on this, I think. . ---. @yfarjoun commented on [Mon Nov 14 2016](https://github.com/broadinstitute/gsa-unstable/issues/1438#issuecomment-260513266). I hope that when we move exomes to hg38 we will correct this silly thing; and a few decades later we will no need this code (hehe). Y. On Mon, Nov 14, 2016 at 6:19 PM, Geraldine Van der Auwera <; notifications@github.com> wrote:. > From what I understand of the referenced thread, the ""incorrect"" interval; > list may always be around, so we may never be able to just blow up on it.; > Would it perhaps be more viable to add an option to toggle the level of; > stringency, ie choose in the command line whether to blow up or skip on; > these invalid intervals?; > ; ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2520:368,log,logger,368,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2520,1,['log'],['logger']
Testability,@ronlevine commented on [Thu Sep 29 2016](https://github.com/broadinstitute/gatk-protected/issues/725). @ronlevine commented on [Tue Jul 19 2016](https://github.com/broadinstitute/gatk/issues/2017). Port https://github.com/broadinstitute/gsa-unstable/pull/1417. ---. @ronlevine commented on [Wed Jul 20 2016](https://github.com/broadinstitute/gatk/issues/2017#issuecomment-233990695). Need to port `GenotypeGVCFs` before testing the proposed changes in `GenotypingEngine.java`. ---. @ronlevine commented on [Thu Sep 29 2016](https://github.com/broadinstitute/gatk/issues/2017#issuecomment-250468170). @droazen Should this be a gatk-protected ticket instead since it depends on GenotypeGVCFs?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2193:421,test,testing,421,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2193,1,['test'],['testing']
Testability,"@samuelklee @asmirnov239 @mbabadi I tried to run a 30-sample cohort through gCNV on all canonical chromosomes with 250bp bins sharded in 10k-interval blocks, but PostprocessGermlineCNVCalls gave the following error:. ```...; 19:26:14.967 INFO PostprocessGermlineCNVCalls - Analyzing shard 223...; 19:26:15.107 INFO PostprocessGermlineCNVCalls - Analyzing shard 224...; 19:26:15.259 INFO PostprocessGermlineCNVCalls - Analyzing shard 225...; 19:26:15.260 INFO PostprocessGermlineCNVCalls - Shutting down engine; [May 29, 2018 7:26:15 PM UTC] org.broadinstitute.hellbender.tools.copynumber.PostprocessGermlineCNVCalls done. Elapsed time: 3.34 minutes.; Runtime.totalMemory()=39753089024; ***********************************************************************. A USER ERROR has occurred: Bad input: Validation error occurred on line %d of the posterior file: Posterior probabilities for at at least one posterior record do not sum up to one.; ```. After inspecting the output from shard 225, it seems that the model starts producing nan values after ~1600 warmup iterations (looking at the ELBO log). This shard corresponds to a pericentromeric region chr3:91540501-94090250. . It would be nice to have the option to bypass this error in PostprocessGermlineCNVCalls. Here is the model config for the shard:. ```""p_alt"": 1e-06,; ""p_active"": 0.01,; ""cnv_coherence_length"": 10000.0,; ""class_coherence_length"": 10000.0,; ""max_copy_number"": 5,; ""num_calling_processes"": 1,; ""num_copy_number_states"": 6,; ""num_copy_number_classes"": 2; ""max_bias_factors"": 5,; ""mapping_error_rate"": 0.01,; ""psi_t_scale"": 0.001,; ""psi_s_scale"": 0.0001,; ""depth_correction_tau"": 10000.0,; ""log_mean_bias_std"": 0.1,; ""init_ard_rel_unexplained_variance"": 0.1,; ""num_gc_bins"": 20,; ""gc_curve_sd"": 1.0,; ""q_c_expectation_mode"": ""hybrid"",; ""active_class_padding_hybrid_mode"": 50000,; ""enable_bias_factors"": false,; ""enable_explicit_gc_bias_modeling"": false,; ""disable_bias_factors_in_active_class"": false; ""version"": ""0.7""; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4824:1093,log,log,1093,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4824,1,['log'],['log']
Testability,"@samuelklee commented on [Tue Aug 09 2016](https://github.com/broadinstitute/gatk-protected/issues/640). This combined with an unset random seed was causing `AlleleFractionSegmenter.testChromosomesOnDifferentSegments` to fail intermittently in #633. @davidbenjamin could you take a look when you get back? This could be fixed easily by a `Math.min` in the right place, but I don't know if the fact that the memory length seems to blow up is something generic that happens when we collapse to a single state that needs to be addressed more carefully. ---. @samuelklee commented on [Wed Aug 17 2016](https://github.com/broadinstitute/gatk-protected/issues/640#issuecomment-240523360). @davidbenjamin can you take a quick look? I think it's probably a quick fix. ---. @davidbenjamin commented on [Wed Aug 17 2016](https://github.com/broadinstitute/gatk-protected/issues/640#issuecomment-240530369). Sure.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2877:182,test,testChromosomesOnDifferentSegments,182,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2877,1,['test'],['testChromosomesOnDifferentSegments']
Testability,"@samuelklee commented on [Wed Oct 19 2016](https://github.com/broadinstitute/gatk-protected/issues/750). Tool for inferring mixture of CNV subclones from ACNV output.; - [x] Develop resources for simulating tumor phylogenies/mixtures; - Wrote python code for simulating phylogenies and generating corresponding truth tables for CN profiles, ACNV segment files (with varying noise---i.e., CR and MAF credible-interval sizes---and purity levels), and plots.; - [x] Design basic algorithm; - Gibbs sampling MCMC of Dirichlet mixture of CNV subclones, to start. Graphical model is written down.; - [x] Implement basic algorithm; - CLI roughly implemented in sl_purity_ploidy_mcmc branch. Could stand some refactoring and code cleanup before it is PR ready and needs tests.; - [x] Algorithm improvements; - Currently, the model is initialized assuming a 50-50 normal-tumor split and only a clonal population. This is run for ~100 MCMC iterations, and the result is used to initialize a second run that expands the number of populations. This tends to work reasonably well, but there are situations where the model can get stuck in incorrect, degenerate solutions. Going to try adding some MH steps that will swap populations to see if these can help get the model unstuck.; - Need to add outlier absorption to the model, which appears to be critical for inference of subclonal populations from real data (i.e., ACNV output), which may have spurious segments, oversegmentation, etc. Simple clonal models appear to work reasonably well without this, though.; - [x] Evaluate algorithm on simulated data.; - Implemented simple Queue pipeline for running CLI on simulated ACNV segment files. Takes <2 minutes for ~1000 iterations for each sample, can run 100s of samples in parallel on the gsa clusters.; - Need to write up some scripts to automatically calculate and plot metrics.; - [x] Evaluate algorithm on real data; - Some initial runs on HCC1143 purity series show reasonable results for the clonal model",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2909:762,test,tests,762,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2909,1,['test'],['tests']
Testability,"@sooheelee commented on [Fri Feb 17 2017](https://github.com/broadinstitute/gatk-protected/issues/911). A fix was implemented for HaplotypeCaller but not ported to GenotypeGVCFs nor CombineGVCFs nor CombineVariants. Although user is using v3.7-0-gcfedb67, my understanding is that these types of fixes will only be worked on in GATK4. - Previous discussion of HaplotypeCaller fix; https://github.com/broadinstitute/gsa-unstable/issues/855#issuecomment-278478318. ---; ### Test data submitted by user can be found at; /humgen/gsa-scr1/pub/incoming/bugrep_jgeibel_1.tar.gz. This includes chicken reference files. . ---; ### The command the user uses to generate the error is very long because we have many vcfs:; ```; Program Args: -T GenotypeGVCFs -R /usr/users/geibel/chicken/chickenrefgen/galGal5_Dec2015/galGal5.fa --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72631_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72632_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72633_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72634_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72635_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72636_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72637_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72638_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72639_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72640_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72641_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_sequence_nov2016/data/gVCF/i_WL_72642_chr26.raw.g.vcf --variant /usr/users/geibel/chicken/pool_seq",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2946:472,Test,Test,472,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2946,1,['Test'],['Test']
Testability,"@spikebike will follow up with HPC specifics and logs). . #### Steps to reproduce; ```; Using GATK jar /share/apps/gatk-4.1.4.1/gatk-package-4.1.4.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx60g -Xms60g -jar /share/apps/gatk-4.1.4.1/gatk-package-4.1.4.1-local.jar GenomicsDBImport --genomicsdb-workspace-path data/interim/combined_database_bpres/0004 --batch-size 50 --reader-threads 6 --sample-name-map data/processed/sample_map --intervals data/processed/scattered_intervals/0004-scattered.intervals --tmp-dir /scratch/sdturner/genomicsdbimport/0004; ```. #### Expected behavior; My understanding is that it may be more efficient to use a small buffer and write the final database in full. . #### Actual behavior; Again my (limited) understanding is that the tool is writing output multiple times and throwing out all but the last write. Here is an example of a log for a 2.6 Mb region and 295 samples: ; ; ```; 07:24:39.198 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/share/apps/gatk-4.1.4.1/gatk-package-4.1.4.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; Feb 28, 2020 7:24:39 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 07:24:39.616 INFO GenomicsDBImport - ------------------------------------------------------------; 07:24:39.617 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.1.4.1; 07:24:39.617 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 07:24:39.617 INFO GenomicsDBImport - Executing as sdturner@c6-74 on Linux v4.15.0-65-generic amd64; 07:24:39.617 INFO GenomicsDBImport - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_20-b26; 07:24:39.617 INFO GenomicsDBImport - Start Date/Time: February 28, 2020 7:24",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6487:1288,log,log,1288,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6487,1,['log'],['log']
Testability,@takutosato Here it is. The failure has nothing to do with this branch -- every branch is failing in the same way currently. I have tested and debugged this thoroughly and I am deliberately not writing unit tests for now because we're too busy with MC3 and the M2 paper. I intend to come back to these later.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4998:132,test,tested,132,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4998,2,['test'],"['tested', 'tests']"
Testability,@takutosato Here's another bug fix. After the big filtering refactor M2 filters will be unit-testable and these things will be easier to prevent. This fixes the last edge case mentioned by @byoo in the discussion of #5563.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5578:93,test,testable,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5578,1,['test'],['testable']
Testability,"@takutosato In addition to the bug fix, an integration test I should have written long ago.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6137:55,test,test,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6137,1,['test'],['test']
Testability,"@takutosato Most of the files changed are just due to a change in method signature. Any significant block of ""new"" code is just your code moved to a different class. This PR does a few things:. * Move logic from the orientation bias annotation into the filter.; * Package F1R2 counts and learned orientation bias models in .tar.gz files to simplify command lines and accomodate multiple samples.; * Make all orientation bias tools fully multi-sample.; *Extract a backend for CollectF1R2Counts and use this backend inside Mutect2. I have tested the new pipeline on Firecloud. Do you have time to review this before the release tomorrow? If not, I can ask Lee.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5840:201,log,logic,201,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5840,2,"['log', 'test']","['logic', 'tested']"
Testability,"@takutosato Since this is an unsupported script that I have already tested to make sure results are the same, don't spend much time on it. Here's the summary:. * Put sub-sampling of hapmap (the most expensive part and a one-time cost because the samples are the same every time) into its own wdl.; * Put the rest of generating the truth into the same wdl as the sensitivity validation. This will make things simpler for the TAG team.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3379:68,test,tested,68,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3379,1,['test'],['tested']
Testability,@takutosato Taking advantage of WDL 1.0. @meganshand Your changes in #6108 are now tested in Terra.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6144:83,test,tested,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6144,1,['test'],['tested']
Testability,"@takutosato This corrects the math error you pointed out in your code review of the docs. While we're at it, it also outputs the error bars according to the formula given in the docs. I have tested it on an in silico contamination series and it improves results slightly.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3385:191,test,tested,191,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3385,1,['test'],['tested']
Testability,@takutosato Two quick edge cases and new unit tests. These were exposed when fixing other bugs.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6518:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6518,1,['test'],['tests']
Testability,@takutosato Unfortunately we still have to maintain two wdls. Just a few weeks more. I tested this on FC.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5580:87,test,tested,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5580,1,['test'],['tested']
Testability,"@tedsharpe @cwhelan please review. - Adds MarkDuplicatesReadFilter (to replace MarkedOpticalDuplicateReadFilter). MarkedOpticalDuplicateReadFilter will be removed in a subsequent PR because the Filter tool currently uses it.; - Changed some types (short to int, float to double) in the DUST algorithm; - Adds HostAlignmentReadFilter for filtering sufficiently well-mapped host reads. The helper function is there to run the test on supplementary alignments. I chose not to expose this as a GATK filter because the definitions of coverage and identity used here could be different than what some users would expect. @lbergelson Addressed your comments from the other branch:; - Added docstring to AmbiguousBaseReadFilter argument; - Made filterOpticalOnly an argument; - Argument variables changed from uppercase to lowercase; - See above regarding the duplicates filters",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2665:424,test,test,424,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2665,1,['test'],['test']
Testability,"@tomwhite @droazen This fixes the problem I was seeing, but it's insanely slow for some reason. A 30gb file on a heavy duty cluster was taking between 30-50 minutes depending on how I sharded it. Most of that time is spent on the merging step where the master concatenates the chunks. . I think the refactoring of the writing that I've done isn't a bad thing to have. I added some extra log statements that it much easier to understand what's going on when it's slow.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2333:387,log,log,387,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2333,1,['log'],['log']
Testability,"@tomwhite and @lbergelson ; I've been testing the 4.0.0.0 release with the bgzip output fix for HaplotypeCallerSpark (#3725). Thanks again for the work on that bug. I'm now hitting a similar issue with empty output VCFs. It will correctly output bgzipped VCFs when there are variants in the region, but if we call in a region with no variants we end up with plain text output. Here is a self contained test case that demonstrates the issue:. https://s3.amazonaws.com/chapmanb/testcases/gatk/gatk4_haplotypecallerspark_plain.tar.gz. The first example command line produces plain text because it includes no variants, while the second is correct:; ```; gatk-launch --java-options '-Xms1g -Xmx2g' HaplotypeCallerSpark --reference hg19.2bit -I Test1-sort-recal.bam -L chrM:1-70 --spark-master local[1] --output plain_text.vcf.gz; gatk-launch --java-options '-Xms1g -Xmx2g' HaplotypeCallerSpark --reference hg19.2bit -I Test1-sort-recal.bam -L chrM:1-75 --spark-master local[1] --output correct_gzip.vcf.gz; ```; Thank you again for all the help.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4197:38,test,testing,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4197,3,['test'],"['test', 'testcases', 'testing']"
Testability,"@tomwhite can you review? We have CHD 5.7 running now and 1.6 is available on the cloud so no reason to not upgrade AFAIK. For some reason, the lists returned from `.collect` are no longer mutable so i have to make copies in 1 test",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1834:227,test,test,227,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1834,1,['test'],['test']
Testability,"@tomwhite found performance issues with large (eg., exome target) interval lists on Spark in the course of our quarterly Spark evaluation. Specifically this test case was very slow:. ```; ./gatk-launch CountReadsSpark ; -I hdfs:///WGS-G94982-NA12878.bam ; -L Broad.human.exome.b37.interval_list; -- --sparkRunner GCS --cluster YOUR_CLUSTER --num-executors NUM_EXECUTORS --executor-cores 4 --executor-memory 16g; ```. Where the bam was `gs://hellbender/q4_spark_eval/WGS-G94982-NA12878.bam` pre-staged into HDFS and the interval list was a localized copy of `gs://hellbender/q4_spark_eval/Broad.human.exome.b37.interval_list`. A proposed fix is https://github.com/HadoopGenomics/Hadoop-BAM/pull/121",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2313:157,test,test,157,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2313,1,['test'],['test']
Testability,@tomwhite wrote code to read in the reference from hdfs. We need to move that logic into htsjdk (to avoid the two getting out of sync). Assigning to @droazen for now.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/831:78,log,logic,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/831,1,['log'],['logic']
Testability,"@vdauwera commented on [Mon Mar 20 2017](https://github.com/broadinstitute/gatk-protected/issues/942). @vdauwera commented on [Sat Mar 07 2015](https://github.com/broadinstitute/gsa-unstable/issues/855). #### Issue description / case details. Users who are dealing with large ploidies (typically for pooled experiments) run into limitations where the combination of the ploidy and numbers of alleles in the high teens and above produces too many possible genotypes for GenotypeGVCFs to handle under its current architecture. . For example, in the case reported here, the ploidy is 19 and the number of alternate alleles is 21, so GenotypeGVCFs cannot handle the large number of possible genotypes that result from all the possible combinations. A reasonable way to deal with this would be to cull the possible combinations dynamically at runtime to eliminate the most unlikely combinations up front. ; #### Test data. Has been provided by the user ; #### [Original forum post](http://gatkforums.broadinstitute.org/discussion/4954/combination-of-ploidy-and-number-of-alleles-error-when-running-genotypegvcfs/p1). ---. @vruano commented on [Tue Mar 10 2015](https://github.com/broadinstitute/gsa-unstable/issues/855#issuecomment-77993425). The error message explain the reason well ... a possibility to actually address this issue is to dynamically reduce the number of alt alleles loosing the less likely ones base on a maximum number of possible genotypes. So the user does not indicate the maximum number of alternative but the maximum number of genotypes. Which alt. alleles make it could be decided by taking a look in the corresponding hom. alt genotype likelihood dropping those alternatives with the worst hom. PLs. ---. @vdauwera commented on [Tue Mar 10 2015](https://github.com/broadinstitute/gsa-unstable/issues/855#issuecomment-78122186). @vruano What you propose sounds great. How much work would it take to implement this? . ---. @vruano commented on [Mon Mar 23 2015](https://github.com/",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2955:907,Test,Test,907,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2955,1,['Test'],['Test']
Testability,"@vdauwera reported this here #950 :. > Can't seem to do git clone https://github.com/broadinstitute/hellbender/. ```; wmd16-c9e:codespace vdauwera$ git clone http://github.com/broadinstitute/hellbender/; Cloning into 'hellbender'...; remote: Counting objects: 22221, done.; remote: Compressing objects: 100% (142/142), done.; remote: Total 22221 (delta 47), reused 4 (delta 4), pack-reused 22046; Receiving objects: 100% (22221/22221), 36.63 MiB | 3.58 MiB/s, done.; Resolving deltas: 100% (9903/9903), done.; Checking connectivity... done.; Downloading src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam (76.16 MB); Username for 'http://github.com': vdauwera; Password for 'http://vdauwera@github.com': ; Error accessing media: src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam (6b1304800e60c0ac0358df137bdad48b7857a36465b04fef3fbbb09380f04746). Errors logged to /Users/vdauwera/codespace/hellbender/.git/lfs/objects/logs/20151005T220016.510795175.log.; Use `git lfs logs last` to view the log.; Downloading src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam.bai (11.25 KB); Username for 'http://github.com': ; ```. > Looks like I'm failing to download large test files. Do I need to be on VPN for this to work? Or is it expected and I should ignore it?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/952:558,test,test,558,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/952,9,"['log', 'test']","['log', 'logged', 'logs', 'test']"
Testability,"@vdauwera reports getting this error when running `GenomicsDBImport` with a large interval list as the `-L` input:. ```; java.util.concurrent.CompletionException: org.broadinstitute.hellbender.exceptions.GATKException: Cannot call query with different interval, expected:1:29867-31003 queried with: 1:68590-70510; ```. Looking at the code that produces this error, this seems like a ""should never happen"" type of error that would likely only be produced by a race condition of some kind. Full stderr log follows:. ```; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.876625c8; 04:37:28.801 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/gatk/gatk-package-4.0.9.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 04:37:29.319 INFO GenomicsDBImport - ------------------------------------------------------------; 04:37:29.319 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.0.9.0; 04:37:29.320 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 04:37:29.320 INFO GenomicsDBImport - Executing as root@7a7880aef99b on Linux v4.9.0-0.bpo.6-amd64 amd64; 04:37:29.321 INFO GenomicsDBImport - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_171-8u171-b11-0ubuntu0.16.04.1-b11; 04:37:29.321 INFO GenomicsDBImport - Start Date/Time: October 8, 2018 4:37:28 AM UTC; 04:37:29.321 INFO GenomicsDBImport - ------------------------------------------------------------; 04:37:29.322 INFO GenomicsDBImport - ------------------------------------------------------------; 04:37:29.322 INFO GenomicsDBImport - HTSJDK Version: 2.16.1; 04:37:29.323 INFO GenomicsDBImport - Picard Version: 2.18.13; 04:37:29.323 INFO GenomicsDBImport - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 04:37:29.323 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 04:37:29.324 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 04:37:29.324 INFO GenomicsDBImport - HTSJDK Defaults.US",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5300:500,log,log,500,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5300,1,['log'],['log']
Testability,"@vdauwera reports that the following `ApplyBQSRSpark` command fails with an NIO-related error on dataproc:. ```; time ./gatk-launch ApplyBQSRSpark \; -I gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.bam \; -R gs://gatk-legacy-bundles/b37/human_g1k_v37.2bit \; -O gs://gatk-demo/TEST/gatk4-spark/recalibrated.bam \; -bqsr gs://gatk-demo/TEST/gatk4-spark/recalibration.table \; -apiKey $APIKEY_ORTMP \; -- \; --sparkRunner GCS \; --cluster gvda-test-bqsr \; --num-executors 40 \; --executor-cores 4 \; --executor-memory 20g; ```. ```; java.nio.file.FileSystemNotFoundException: Provider ""gs"" not installed; at java.nio.file.Paths.get(Paths.java:147); at org.seqdoop.hadoop_bam.util.NIOFileUtil.asPath(NIOFileUtil.java:30); at org.seqdoop.hadoop_bam.util.SAMFileMerger.mergeParts(SAMFileMerger.java:51); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.writeReadsSingle(ReadsSparkSink.java:231); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.writeReads(ReadsSparkSink.java:153); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.writeReads(GATKSparkTool.java:247); at org.broadinstitute.hellbender.tools.spark.ApplyBQSRSpark.runTool(ApplyBQSRSpark.java:49); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:348); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:109); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:167); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:186); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:76); at org.broadinstitute.hellbender.Main.main(Main.java:92); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2287:169,test,test,169,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2287,5,"['TEST', 'benchmark', 'test']","['TEST', 'benchmark', 'test', 'test-bqsr']"
Testability,"@vruano ; Since there's some a major change of implementation following your suggestions (single class instead of abstract-base-and-sole-inheritor, remove over-classing), I'm issuing this PR to replace #5117, so the comments you made there are easier to be kept track of. Basically, ; * the first commit is trivial; * the second commit is to address some comments you have about various utils classes; * the third commit is what's contained in #5117 ; * the fourth commit is the re-implementation, which replaces the two old classes with a new class so it's easier to read; * the fifth commit is a simple integration test for this new tool. Thanks!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5164:617,test,test,617,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5164,1,['test'],['test']
Testability,A PR into a branch for myself to check test coverage (cannot be into the master because of the Spark bug).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2285:39,test,test,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2285,1,['test'],['test']
Testability,"A few interrelated issues:. -The install_R_packages.R script is copied and installed in the base Docker image. However, it is currently also copied (but not installed) in the non-base Docker image for some reason. @jamesemery may be able to comment (#4251).; -Different R packages are installed in that script in different ways. Some are pegged to older versions sourced from http://cran.r-project.org/src/contrib/Archive URLs; this is to prevent the http://cran.r-project.org/src/contrib URLs for the most recent versions from breaking out under us, which has happened frequently in the past. Other packages are simply installed using `dependencies = ...`; -We should perhaps consider moving the R dependencies into the conda environment, see discussion in #4209.; -R dependencies are cached in a `site-library` folder in the Travis build to avoid intermittent connection issues with the aforementioned URLs. This can cause tests to break after the fact if the cache is not cleared every time a dependency is removed. If we decide to cache pip installs similarly, we will also run into this issue.; -Requiring the base Docker image to be updated every time an R dependency is changed is also fragile. If it is accidentally not updated when dependencies are removed, tests can continue to pass.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4250:925,test,tests,925,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4250,2,['test'],['tests']
Testability,"A few things worth mentioning. 1) This skeleton is mostly a direct port of the existing Dataflow pipeline.; 2) I had to modify some test data because there is a (masked) bug in the Dataflow code, see #795.; 3) Serialization was a slight pain and I had to bump the kryo version to the latest 2.x, as well as add two custom Serializers. If there's a cleaner way to handle any of that I'm all ears.; 4) I'm using Hadoop-bam for reading and writing reads and variants.; 5) There are unit tests for all code except for the skeleton itself. I've run it on a cluster on my machine successfully, but haven't written the tests (which will take a little while to design and get right).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/850:132,test,test,132,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/850,3,['test'],"['test', 'tests']"
Testability,"A forum topic asked whether we can have a behavior to keep original contig names in FastaAlternateReferenceMaker tool. . A new parameter `--keep-contig-names` is added. . New optional behavior is to set contig names as ; `>originalcontigname description`. Here is my small local test and its result. **VCF**; ```; ##fileformat=VCFv4.2; ##FILTER=<ID=PASS,Description=""All filters passed"">; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""GT"">; ##contig=<ID=chr17,length=83257441>; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	Sample; chr17	1	.	N	A	100	PASS	.	GT	1/1; ```; **Original Fasta**; ```; >chr```. **New Fasta with new optional behavior**; ```; >chr17 chr```. **Sequence dictionary created for the new Fasta.**. ```; @HD	VN:1.0	SO:unsorted; @SQ	SN:chr17	LN:83257441	M5:8127f7ddcacb7afb1a6277cdd629fdcd	UR:file:///path/to/chr17_mod2.fasta; ```. Default valu",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8865:279,test,test,279,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8865,1,['test'],['test']
Testability,A handful of simple optimizations for VariantRecalibrator:; - Preallocate arrays when the size is known; - Eliminate unnecessary boxing of doubles; - Lift some loop invariants with unnecessary allocations (this eliminates millions of array allocations on the full SNP test used by GATK3). The current GATK4 (multi-variant walker) implementation is about 3% faster than GATK3 without these; these bring it to about 6% faster.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2186:268,test,test,268,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2186,1,['test'],['test']
Testability,A number of the cloud and bucket tests are failing on google dataflow. These need to be fixed. ; #750 is a pre-requisite. Once the tests are fixed we should make these tests mandatory.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/751:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/751,3,['test'],['tests']
Testability,"A quick patch to help out the Variants team, which is struggling with a problematic callset. Note that a similar regularization to the effective number per component probably should have been applied to solve the issue in https://github.com/broadinstitute/gatk/pull/6425. I'm not sure if the lack of this regularization will still lead to convergence issues, but I would hope that the fix that was implemented instead (treating vanishing components as a special case and skipping computation) suffices. As discussed there, we may also want to eventually remove the idiosyncratic finalize step; it’s likely this is the source of issues here, since the correct Bayesian M step is already regularized by the prior. The covariance regularization term added here is standard (c.f. e.g. https://github.com/scikit-learn/scikit-learn/blob/7e1e6d09bcc2eaeba98f7e737aac2ac782f0e5f1/sklearn/mixture/_gaussian_mixture.py#L154), but it may result in non-negligible changes to VQSLODs. As just discussed with the Variants team, we can probably use the WARP validation to convince ourselves that results are functionally equivalent. I updated the exact-match tests without much close examination (by simply forcing IntegrationTestSpec.assertEqualTextFiles to overwrite the old expected files), so someone may want to sanity check them. There were also a few more interactions between the integration tests for different tools than I anticipated. Some tests use output generated by an upstream tool as input and break encapsulation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7709:1144,test,tests,1144,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7709,4,"['assert', 'test']","['assertEqualTextFiles', 'tests']"
Testability,"A seemingly large change PR, but most changes are trivial.; The non-trivial part:. * a new tool `StructuralVariantionDiscoveryPipelineSpark` to run the whole process of SV discovery, by delegating works to `FindBreakpointEvidenceSpark` and `DiscoverVariantsFromContigAlignmentsSAMSpark`, both of which are refactored to accommodate the new tool;; * class `AlignmentRegion` is effectively moved into a new class `AlignedAssembly` (named quite close to the existing class `AlignedAssemblyOrExcuse` but will be moved into a different sub-package in a sequential PR).; * integration tests (local mode and on MiniClusters/hdfs) for all 5 major tools `FindBreakpointEvidenceSpark`, `DiscoverVariantsFromContigAlignmentsSAMSpark`, `StructuralVariantionDiscoveryPipelineSpark`, `AlignAssembledContigsSpark` and `DiscoverVariantsFromContigAlignmentsSGASpark`; a draw back is these integration tests do not test correctness of results but simple tests if these tools run.; * various unit tests. The two paths involving use of Fermi-lite are tested to be running and generating compatible results. The path involves using SGA as the assembler is also running but generates significantly less variants. (see attached run logs).; [differentVersions.txt](https://github.com/broadinstitute/gatk/files/956271/differentVersions.txt). The access levels of the various classes and methods are not optimal now because a serial PR that simply repackaging these classes (hence access levels must be changed) is expected to be generated immediately after this PR is approved.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2621:579,test,tests,579,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2621,7,"['log', 'test']","['logs', 'test', 'tested', 'tests']"
Testability,"A shortcut in the code returns empty values if there are no reads supporting the reference, but if an alt has no reads then the rank sum test from Apache Math returns NaN. Output for invalid rank sum test Z-scores should return null/empty rather than NaN. (Pipe-delimited raw annotations don't have to follow the VCF spec using `.` for missing.) This will involve updating a lot of exact match integration test results.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7512:137,test,test,137,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7512,3,['test'],['test']
Testability,"A user gets an issue with the HDF5 library when running DenoiseReadCounts on an arm64 processor. We would like to create a fallback solution for this tool, since in this case the tool is not working with HDF5 files. This request was created from a contribution made by dbpiero on June 01, 2021 10:22 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360078197412-Error-running-DenoiseReadCounts-on-arm64-processor](https://gatk.broadinstitute.org/hc/en-us/community/posts/360078197412-Error-running-DenoiseReadCounts-on-arm64-processor). \--. If you are seeing an error, please provide(REQUIRED) : ; ; a) GATK version used: 4.2.0.0. b) Exact command used: gatk DenoiseReadCounts -I sample.counts.tsv --annotated-intervals annotated\_intervals.tsv --standardized-copy-ratios sample.standardizedCR.tsv --denoised-copy-ratios sample.denoisedCR.tsv. c) Entire error log: A USER ERROR has occurred: Cannot load the required HDF5 library. HDF5 is currently supported on x86-64 architecture and Linux or OSX systems. Dear Administrators,. I try to run DenoiseReadCounts on new apple silicon chip (M1) with arm64 architecture, but I got this error: A USER ERROR has occurred: Cannot load the required HDF5 library. HDF5 is currently supported on x86-64 architecture and Linux or OSX systems. I created a docker with ubuntu 20.04 to launch gatk and I have already installed libhdf5-103:arm64 library and hdf5-tools inside but launching DenoiseReadCounts i get the same error. Is there a way to solve this issue?. Thanks<br><br><i>(created from <a href='https://broadinstitute.zendesk.com/agent/tickets/161375'>Zendesk ticket #161375</a>)<br>gz#161375</i>",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7297:881,log,log,881,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7297,1,['log'],['log']
Testability,"A user running GenotypeGVCFs with a GenomicsDB ran into a new issue with 4.2.4.1. They were previously running 4.1.9.0. . Their complete program log is below: . This request was created from a contribution made by Andrius Jonas Dagilis on January 06, 2022 16:24 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360073212811-GenotypeGVCFs-stalls-while-using-all-sites#community\_comment\_4414746059419](https://gatk.broadinstitute.org/hc/en-us/community/posts/360073212811-GenotypeGVCFs-stalls-while-using-all-sites#community_comment_4414746059419). ```; Using GATK jar /nas/longleaf/apps/gatk/4.2.4.1/gatk-4.2.4.1/gatk-package-4.2.4.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx190g -jar /nas/longleaf/apps/gatk/4.2.4.1/gatk-4.2.4.1/gatk-package-4.2.4.1-local.jar GenotypeGVCFs -R /proj/matutelb/projects/drosophila/melanogaster/dmel6_ref.fasta -V gendb://all_mels_chr2L -L chr2L -O all_mels_chr2L.vcf.gz; 19:40:48.803 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/nas/longleaf/apps/gatk/4.2.4.1/gatk-4.2.4.1/gatk-package-4.2.4.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; Jan 13, 2022 7:40:50 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 19:40:50.088 INFO GenotypeGVCFs - ------------------------------------------------------------; 19:40:50.089 INFO GenotypeGVCFs - The Genome Analysis Toolkit (GATK) v4.2.4.1; 19:40:50.090 INFO GenotypeGVCFs - For support and documentation go to https://software.broadinstitute.org/gatk/; 19:40:50.102 INFO GenotypeGVCFs - Executing as adagilis@t0601.ll.unc.edu on Linux v3.10.0-1160.2.2.el7.x86_64 amd64; 19:40:50.103 INFO GenotypeGVCFs - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_292-b10; 19:40:50.103 INFO GenotypeGVCFs - Start Date/Tim",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7639:145,log,log,145,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7639,1,['log'],['log']
Testability,"A utility class to go from Read to SAMRecord, with an initial simple test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/493:69,test,test,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/493,1,['test'],['test']
Testability,"AAGAACACATAGATGCATTTGGAAGCCAGTGTGGACGCCATGTGATCTGTGCCCACATATCACATGGCCGCTTTGGGATAGGGCCTGTCTGCCCATACTGGCTTCCAAACGCCTCTGTGTGTTCCTGTATGTGGGTGTGCACGTACCTGTCACATGTGTATGCACAGACCACAGGATGTCCACACTGGCTTCCAAATGCGTCTCTGTGTTCCTGTCTGTGAGTTCCAAATGTGTGCACACCTACAGACAGGAACATGGAAACACATTTGGAAGCCAGTGTGGACACCCTGTGATCTGTGCGTACACATGTGACACGTGCATGCACACCCACAGACAGGAACACAGAGACACATTTGGAAGCCAGTGTGGACGCCCTGTGATCTGTGCCCACACACATCACACGTGCATACACACCCACAGACAGGAACACAGAGACACATTTGGAAGCCAGTGTGGATGCCCTGTGATCTGTGTGTACACGTGACACGTGCGTACACACCCACATACAGGAACACAGCCACATTTGGAAGCCAGTGCAGACGCCCTGTGATCTGTGTGTACACATGTGACACGTGCGTGCACACTCACAGACAGGAACACAGAGACGCATTTGGAAGCCAGTGTGGACATCCTGTGGTCTGCGCGTACACATGTGACAGGTACGTGCACGCCCACATACAGGAACACACAGAGGCCTTTGGAAGCCAGCATGGGCAGACAGGCCCTATCCCAAAGCGGCC;SVLEN=1454;SVTYPE=CPX;TOTAL_MAPPINGS=1; ```. So the strategy taken in this branch is; * for the first two cases, re-interpretation is easy and done in this ""post-processing"" tool, and bare-bone annotated simple variants are given , annotated with `EVENT` that links the simple variants back to the complex variant; * for the last case, ; * re-collect the contigs that induced the CPX call, preprocess its alignment, then send the contig to the current pair-iteration algorithm for re-interpretation, the returned simple variants will be checked for consistency with the CPX variant that was induced by the same contig, and dropped if it is inconsistent (the two types of variants `<DEL>` and `<INV>`, are main concerns as they could easily stem from mis-interpretations of small dispersed duplications); then, ; * the CPX variants who have rejected re-interpreted simple variants will be analyzed one last time, to extract `<DEL>` and `<INV>`; ; * these variants will also be annotated with `EVENT` to link back to the CPX variants. Based on manual review, this salvages ~600 variants that would be dropped by evaluation scripts that would simply ignore the CPX variants. ---; Tests will be added if this strategy is given the green light (so no merging yet).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4602:4805,Test,Tests,4805,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4602,1,['Test'],['Tests']
Testability,"AC:. While in a Notebook, I can run Hail 120 and I can specifically run the new vcf_combiner code; merge_alleles() works in the 120; and we must use array_elements_required=False in import_VCF to get around the missing data issue Dan pointed out; ![image](https://github.com/broadinstitute/gatk/assets/6863459/3da27122-8b6b-4bec-b785-55846e671cff). Hail version 120 has been pinned in the Integration test -- pinned!. Integration test with above pin has succeeded.; https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/a1c5e4c4-2058-4dad-8261-87b23c8bb0f3",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8502:401,test,test,401,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8502,2,['test'],['test']
Testability,ADAM ReadsSparkSinkUnitTest.loadReadsADAM test fails on NA12878.chr17_69k_70k.dictFix.bam,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1267:42,test,test,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1267,1,['test'],['test']
Testability,ADAM test fails on CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam and NA12878.chr17_69k_70k.dictFix.bam,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1254:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1254,1,['test'],['test']
Testability,"AD_FOR_SAMTOOLS : false; 10:19:39.337 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 10:19:39.337 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 10:19:39.337 INFO GenomicsDBImport - Deflater: IntelDeflater; 10:19:39.337 INFO GenomicsDBImport - Inflater: IntelInflater; 10:19:39.337 INFO GenomicsDBImport - GCS max retries/reopens: 20; 10:19:39.338 INFO GenomicsDBImport - Requester pays: disabled; 10:19:39.338 INFO GenomicsDBImport - Initializing engine; 10:19:39.489 INFO IntervalArgumentCollection - Processing 100 bp from intervals; 10:19:39.490 INFO GenomicsDBImport - Done initializing engine; 10:19:39.948 INFO GenomicsDBLibLoader - GenomicsDB native library version : 1.4.4-ce4e1b9; 10:19:39.951 INFO GenomicsDBImport - Vid Map JSON file will be written to /home/test/Software/gatk-4.4.0.0/test/./02/vidmap.json; 10:19:39.951 INFO GenomicsDBImport - Callset Map JSON file will be written to /home/test/Software/gatk-4.4.0.0/test/./02/callset.json; 10:19:39.951 INFO GenomicsDBImport - Complete VCF Header will be written to /home/test/Software/gatk-4.4.0.0/test/./02/vcfheader.vcf; 10:19:39.951 INFO GenomicsDBImport - Importing to workspace - /home/test/Software/gatk-4.4.0.0/test/./02; 10:19:40.060 INFO GenomicsDBImport - Importing batch 1 with 2 samples; 10:19:40.075 INFO GenomicsDBImport - Shutting down engine; org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport done. Elapsed time: 0.01 minutes.; Runtime.totalMemory()=285212672; java.lang.NumberFormatException: For input string: ""G""; 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67); 	at java.base/java.lang.Integer.parseInt(Integer.java:668); 	at java.base/java.lang.Integer.parseInt(Integer.java:786); 	at htsjdk.tribble.readers.TabixReader.getIntv(TabixReader.java:337); 	at htsjdk.tribble.readers.TabixReader.access$500(TabixReader.java:48); 	at htsjdk.tribble.readers.TabixReader$IteratorImpl.next(TabixRea",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8517:2648,test,test,2648,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8517,1,['test'],['test']
Testability,"AFPriorProviderUnitTest.java:37 compared doubles by strict equality which is not the right way. It should use the `TOLERANCE` (equal to `0.0001`) eg change . ```; Assert.assertEquals(priors[j], Math.log10(het) - Math.log10(j)); ```. to. ```; Assert.assertEquals(priors[j], Math.log10(het) - Math.log10(j), TOLERANCE); ```. @frank-y-liu can you make this change and see it if fixed your problem? If yes, can you contribute a fix?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1536:163,Assert,Assert,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1536,4,"['Assert', 'assert']","['Assert', 'assertEquals']"
Testability,ASAnnotation.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12878.AS.chr20snippet.g.unindexed.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12878.AS.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12878.AS.InsertSizeRankSum.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12878.AS.MateRankSum.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12878.AS.MateRankSum.chr20snippet.withoutIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12891.AS.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12892.AS.chr20snippet.g.unsorted.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12892.AS.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12892.AS.InsertSizeRankSum.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12892.AS.MateRankSum.chr20snippet.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/allelespecific/NA12892.AS.MateRankSum.chr20snippet.withoutIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/annotator/VariantAnnotatorEngine/one_entry_source.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/combine-gvcf-wrong-ref-input1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/combine-gvcf-wrong-ref-input2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/convertToBasePairResolution.vcf.idx; src/test/resources/org/broadinstitut,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:48116,test,test,48116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"ATION_STRINGENCY STRICT --COMPRESSION_LEVEL 2 --MAX_RECORDS_IN_RAM 500000 --CREATE_INDEX false --CREATE_MD5_FILE false --GA4GH_CLIENT_SECRETS client_secrets.json --help false --version false --showHidden false --USE_JDK_DEFLATER false --USE_JDK_INFLATER false; Aug 10, 2023 12:49:43 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; [Thu Aug 10 12:49:43 UTC 2023] Executing as root@34684eaa046e on Linux 4.15.0-208-generic amd64; OpenJDK 64-Bit Server VM 1.8.0_191-8u191-b12-0ubuntu0.16.04.1-b12; Deflater: Intel; Inflater: Intel; Provider GCS is available; Picard version: Version:4.1.3.0; [Thu Aug 10 12:49:43 UTC 2023] picard.analysis.artifacts.CollectSequencingArtifactMetrics done. Elapsed time: 0.03 minutes.; Runtime.totalMemory()=2076049408; To get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp; htsjdk.samtools.SAMException: Cannot read non-existent file: file:///gatk/data/Continuum/WES/vcf/NG-27280_CLTSS_LTS_001A_lib506241_7636_2_MarkedDup.bam; at htsjdk.samtools.util.IOUtil.assertFileIsReadable(IOUtil.java:483); at htsjdk.samtools.util.IOUtil.assertFileIsReadable(IOUtil.java:470); at picard.analysis.SinglePassSamProgram.makeItSo(SinglePassSamProgram.java:95); at picard.analysis.SinglePassSamProgram.doWork(SinglePassSamProgram.java:84); at picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:305); at org.broadinstitute.hellbender.cmdline.PicardCommandLineProgramExecutor.instanceMain(PicardCommandLineProgramExecutor.java:25); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:162); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:205); at org.broadinstitute.hellbender.Main.main(Main.java:291); (gatk) root@34684eaa046e:/gatk/data/Continuum/WES/vcf# ls; GCA_000001405.15_GRCh38_no_alt_analysis_set.fna.gz; (gatk) root@34684eaa046e:/gatk/data/Continuum/WES/vcf# ; ```; Please help me; Thanks",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8462:2329,assert,assertFileIsReadable,2329,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8462,2,['assert'],['assertFileIsReadable']
Testability,Abandon SamFileTester in favor of ArtificialSAMUtils for unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/211:62,test,tests,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/211,1,['test'],['tests']
Testability,"About 3% of our GATK 4.0.0.0 GenotypeGVCFs runs (with a GenomicsDB as input) are failing with a `__pthread_tpp_change_priority` error and exiting with status -6. The stderr of such a run ends like this:; ```; 2018-03-10T07:14:27.165578644Z GENOMICSDB_TIMER,GenomicsDB iterator next() timer,Wall-clock time(s),74.01474455399772,Cpu time(s),62.96424693700022; 2018-03-10T07:14:27.168329699Z java: tpp.c:84: __pthread_tpp_change_priority: Assertion `new_prio == -1 || (new_prio >= fifo_min_prio && new_prio <= fifo_max_prio)' failed.; ```. Stdout from the same run:; ```; 2018-03-09T13:13:41.095913747Z 13:13:41.095 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/gatk/gatk.jar!/com/intel/gkl/native/libgkl_compression.so; 2018-03-09T13:13:41.329888610Z 13:13:41.327 INFO GenotypeGVCFs - ------------------------------------------------------------; 2018-03-09T13:13:41.329934964Z 13:13:41.327 INFO GenotypeGVCFs - The Genome Analysis Toolkit (GATK) v4.0.0.0; 2018-03-09T13:13:41.329942970Z 13:13:41.327 INFO GenotypeGVCFs - For support and documentation go to https://software.broadinstitute.org/gatk/; 2018-03-09T13:13:41.329952404Z 13:13:41.328 INFO GenotypeGVCFs - Executing as root@localhost on Linux v4.4.0-112-generic amd64; 2018-03-09T13:13:41.329960555Z 13:13:41.328 INFO GenotypeGVCFs - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_151-8u151-b12-1~deb9u1-b12; 2018-03-09T13:13:41.329988865Z 13:13:41.328 INFO GenotypeGVCFs - Start Date/Time: March 9, 2018 1:13:41 PM UTC; 2018-03-09T13:13:41.329995417Z 13:13:41.328 INFO GenotypeGVCFs - ------------------------------------------------------------; 2018-03-09T13:13:41.330000910Z 13:13:41.328 INFO GenotypeGVCFs - ------------------------------------------------------------; 2018-03-09T13:13:41.330011002Z 13:13:41.328 INFO GenotypeGVCFs - HTSJDK Version: 2.13.2; 2018-03-09T13:13:41.330022980Z 13:13:41.328 INFO GenotypeGVCFs - Picard Version: 2.17.2; 2018-03-09T13:13:41.330030226Z 13:13:41.329 INFO GenotypeGVCFs - ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4518:436,Assert,Assertion,436,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4518,1,['Assert'],['Assertion']
Testability,"AccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:497); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); ```. #### Steps to reproduce; These are the arguments I used (the input bam is on the file system):. ```; final String[] args = {; ""-I"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/Filtering/IGV/198489_vs_811158/sorted.mt.1.bam"",; ""-"" + M2ArgumentCollection.TUMOR_SAMPLE_SHORT_NAME, ""198489"",; ""-R"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/MitochondriaOnlyFastas/Homo_sapiens_assembly38.mt_only.fasta"",; ""-O"", outputVcf.getAbsolutePath(),; ""--max-reads-per-alignment-start"", ""0"",; ""-default-af"", ""0"",; ""--initial-tumor-lod"", ""0"",; ""--tumor-lod-to-emit"", ""0"",; ""--min-p",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5036:4324,test,testng,4324,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5036,1,['test'],['testng']
Testability,AccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 	at org.g,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2797:2105,test,testng,2105,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2797,3,['test'],['testng']
Testability,"AccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: com.intel.genomicsdb.GenomicsDBException: Could not load genomicsdb native library; 	at com.intel.genomicsdb.GenomicsDBImporter.<clinit>(GenomicsDBImporter.java:72); 	... 37 more; ```. if you dig into it more you get down to the following error:; ```; /private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dylib: dlopen(/private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dylib, 1): ; Library not loaded: /opt/local/lib/libuuid.16.dylib; Referenced from: /private/var/folders/xt/vq7wz8955r1401mv8w0f",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4062:2596,test,testng,2596,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4062,1,['test'],['testng']
Testability,Accidentally turned off 3 Gnarly tests that didn't get run since #8741,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8892:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8892,1,['test'],['tests']
Testability,Adam moved the code for SplitNCigarReads and all supporting utils over.; I've updated the tests so that they all use a small snippet of the reference instead of the entire hg19 (hg19mini.fasta),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/91:90,test,tests,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/91,1,['test'],['tests']
Testability,Add CARROT GitHub Action to support running CARROT tests from PRs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6916:51,test,tests,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6916,1,['test'],['tests']
Testability,Add CRAM integration tests for HaplotypeCaller.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3681:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3681,1,['test'],['tests']
Testability,Add ExampleReadWalkerWithVariantsSpark.java and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5289:48,test,tests,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5289,1,['test'],['tests']
Testability,Add GATKTool unit test for picard interval lists.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3827:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3827,1,['test'],['test']
Testability,Add GCS-NIO basic unit test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1662:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1662,1,['test'],['test']
Testability,Add HC/Mutect2 integration tests for --min-base-quality-score,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4136:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4136,1,['test'],['tests']
Testability,Add NIO test that accesses public GCS data while not being authenticated,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5340:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5340,1,['test'],['test']
Testability,Add PathLineIterator and test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3801:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3801,1,['test'],['test']
Testability,Add PrintReadsSpark tests that write to a GCS bucket,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3097:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3097,1,['test'],['tests']
Testability,Add R group to integration tests that use R.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/752:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/752,2,['test'],['tests']
Testability,Add Spark tests to travis matrix,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/551:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/551,1,['test'],['tests']
Testability,Add Spark tests to travis matrix. Addresses #551.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/596:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/596,1,['test'],['tests']
Testability,Add a GCS and Hadoop test to ReadsDataflowSourceTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/686:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/686,1,['test'],['test']
Testability,Add a GCS and Hadoop tests to ReadsDataflowSourceTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/666:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/666,1,['test'],['tests']
Testability,Add a RefAPISource test for a query on an interval that starts on the contig and runs off of it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/698:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/698,1,['test'],['test']
Testability,Add a VQSR multi-tranche test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2286:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2286,1,['test'],['test']
Testability,Add a VQSR test that includes user-specified tranches (inspired by https://github.com/broadinstitute/gatk/issues/2276).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2286:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2286,1,['test'],['test']
Testability,Add a dependency to the official NIO jar and include tests for gcloud-java-nio. This is based on the earlier NIO example. Now that NIO support is official we can move this test to our main branch. CC: @lbergelson @droazen,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1994:53,test,tests,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1994,2,['test'],"['test', 'tests']"
Testability,Add a dependency to the official NIO jar and include tests for gcloud-java-nio. This is based on the earlier NIO example. Now that NIO support is official we can move this test to our main branch. I'm resubmitting this as a branch from broadinstitute/ directly so (hopefully) the Travis cloud tests will run. CC: @lbergelson @droazen,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2013:53,test,tests,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2013,3,['test'],"['test', 'tests']"
Testability,Add a few more tests to ModelSegments pipeline.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3916:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3916,1,['test'],['tests']
Testability,Add a github bot to post link to the TestNG test reports in PRs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6234:37,Test,TestNG,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6234,2,"['Test', 'test']","['TestNG', 'test']"
Testability,Add a method BaseTest.getAuthenticatedPipelineOptions() useful for bucket-based unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/742:85,test,tests,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/742,1,['test'],['tests']
Testability,Add a read/write roundtrip Spark integration test for a CRAM and reference on HDFS.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6618:45,test,test,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6618,1,['test'],['test']
Testability,"Add a test that validates than an ambiguous interval query can be disambiguated by the user by providing the interval in a bed file; changes the error message to recommend this alternative; fixes an issue where the error message was displaying the entire interval query multiple times, rather than the specific contigs which make the query ambiguous.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4183:6,test,test,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4183,1,['test'],['test']
Testability,Add a test to validate WDLs in the scripts directory.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7826:6,test,test,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7826,1,['test'],['test']
Testability,"Add a version of `createSAMWriter` that takes in a `Path` so we can work with NIO for output. This allows PrintReads to write its output to a cloud bucket. Tested like this:; ```; $ ./gatk-launch PrintReads -I gs://$MYBUCKET/CEUTrio.HiSeq.WEx.b37.NA12892.bam -L 10:1000000-2000000 -O gs://$MYBUCKET/pr.bam; $ gsutil cp gs//$MYBUCKET/pr.bam .; $ samtools view pr.bam | md5sum; c7f41be91031bea6d28d59d40b54f304 -; ```. This MD5 matches the expected output for this command. Once we agree this is the correct way forward, I should go ahead and change all of the other tools similarly. This PR is part of addressing #2422",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2558:156,Test,Tested,156,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2558,1,['Test'],['Tested']
Testability,Add ability to log to file,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2751:15,log,log,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2751,1,['log'],['log']
Testability,Add ability to use the is_loaded column to get the samples for training.; log job id; break up vet to vet_new queries; [VS-165]; [VS-166]; [VS-167]. [VS-165]: https://broadworkbench.atlassian.net/browse/VS-165; [VS-166]: https://broadworkbench.atlassian.net/browse/VS-166; [VS-167]: https://broadworkbench.atlassian.net/browse/VS-167,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7434:74,log,log,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7434,1,['log'],['log']
Testability,"Add additional integration tests for BaseRecalibratorSpark that use --joinStrategy BROADCAST, now that it's going to be the default",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1140:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1140,1,['test'],['tests']
Testability,"Add additional validation around duplicated rows in the VAT; <img width=""1418"" alt=""duplicate_AN_or_AC_values"" src=""https://user-images.githubusercontent.com/6863459/220667710-a416ab64-4f9b-475b-9268-ef7b86bfa81e.png"">. This has a successful run (except for one failure that is because it's being run on way less data); https://job-manager.dsde-prod.broadinstitute.org/jobs/07ddde58-ac0d-4229-9f96-d093f5c11682; The failed test is:; SpotCheckForAAChangeAndExonNumberConsistency. Perhaps we want to update this to not run this test if there are less than 10k samples?; Yes we do:; Here's the ticket for that:; https://broadworkbench.atlassian.net/browse/VS-878",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8175:423,test,test,423,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8175,2,['test'],['test']
Testability,Add an ADAM-formatted file for testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1067:31,test,testing,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1067,1,['test'],['testing']
Testability,Add an initial stub end-to-end integration test for the ReadsPreProcessingPipeline,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/772:15,stub,stub,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/772,2,"['stub', 'test']","['stub', 'test']"
Testability,Add argument to log to file that captures logging output from all dependencies,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3587:16,log,log,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3587,2,['log'],"['log', 'logging']"
Testability,Add benchmark exome run details [VS-1005],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8532:4,benchmark,benchmark,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8532,1,['benchmark'],['benchmark']
Testability,Add better integration tests to HaplotypeCaller for less-common arguments,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7632:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7632,1,['test'],['tests']
Testability,Add better tests and re-evaluate Pileup-Caller support for Mutect2,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8242:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8242,1,['test'],['tests']
Testability,"Add better tests for the Spark ""walker"" classes",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5276:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5276,1,['test'],['tests']
Testability,Add default tool header information to the output of PostprocessGermlineCNVCalls and update the integration test accordingly,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4267:108,test,test,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4267,1,['test'],['test']
Testability,Add full-sized B37 and HG38 references to our large test data,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5309:52,test,test,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5309,1,['test'],['test']
Testability,Add gcs-connector for Spark unit tests running locally,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3159:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3159,1,['test'],['tests']
Testability,Add good integration test for GCS -L and -R support,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4102:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4102,1,['test'],['test']
Testability,Add good integration tests for BwaSpark,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2523:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2523,1,['test'],['tests']
Testability,Add hap.py/som.py benchmarking results to docs for each release,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/9019:18,benchmark,benchmarking,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/9019,1,['benchmark'],['benchmarking']
Testability,Add integration test for BGE samples [VS-1225],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8920:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8920,1,['test'],['test']
Testability,Add integration test that checks filtering for CreatePanelOfNormals for rounding.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3181:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3181,1,['test'],['test']
Testability,Add integration test using -maxNumPLValues for GenotypeGVCFs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1895:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1895,1,['test'],['test']
Testability,Add integration tests for GCS support in VariantWalkers,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2396:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2396,2,['test'],['tests']
Testability,Add integration tests for correctness for DetermineGermlineContigPloidy and GermlineCNVCaller.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4375:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4375,1,['test'],['tests']
Testability,Add integration tests in Funcotator for out of bounds variants,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7523:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7523,1,['test'],['tests']
Testability,Add integration tests showing that bai-indexed traversal by intervals on cram files works,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/860:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/860,1,['test'],['tests']
Testability,Add is_loaded column to sample_info and logic to populate after ingest [VS-158],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7389:40,log,logic,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7389,1,['log'],['logic']
Testability,"Add large files for testing, tracked using git-lfs",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/839:20,test,testing,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/839,1,['test'],['testing']
Testability,Add logging export to VDS creation VS 1139,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8583:4,log,logging,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8583,1,['log'],['logging']
Testability,Add malaria spanning deletion exception regression test with fix,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8802:51,test,test,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8802,1,['test'],['test']
Testability,Add more sensitive tests to HaplotypeCallerSpark,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4302:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4302,1,['test'],['tests']
Testability,"Add more test cases for the errors seen in issue #6289 . Specifically we should add both more unit tests and integration tests. One variant that should be added in integration tests is the following:; ```; ##fileformat=VCFv4.1; ##contig=<ID=chr9,length=138394717>; ##FORMAT=<ID=GT,Number=1,Type=String,Description=""Genotype"">; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	Sample; chr9	67726241	.	TCA	TCACACA,TCACACACA	182	PASS	.	GT	./.; ```. The issue with adding more tests is that we don't have the full Funcotator datasources in our `git-lfs` repo because of size concerns. To add tests we'll need to add more intervals to our datasources to support the variants' loci, or create variants in the regions we already cover.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7523:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7523,6,['test'],"['test', 'tests']"
Testability,Add more testing for create_genes_bqloadjson_from_annotations and create_vt_bqloadjson_from_annotations,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8137:9,test,testing,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8137,1,['test'],['testing']
Testability,"Add new scripts to gatk/scripts/sv/ folder, and alter action (but not; passed parameters) of older scripts to make running sv spark jobs; more convenient.; Added:; -copy_sv_results.sh: copy files to time and git-stamped folder on; google cloud storage; -> results folder on cluster; -> command line arguments to SV discover pipeline; -> console log file (if present). -manage_sv_pipeline.sh: create cluster, run job, copy results, and; delete cluster. Manage cluster naming, time and git-stamping,; and log file production. Altered:; -create_cluster.sh: control GCS zone and numbers of workers via; environmental variables. Defaults to previous hard-coded values. -runWholePipeline.sh: accept command-line arguments for sv; discovery pipeline, work with clusters having NUM_WORKERS != 10",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3370:345,log,log,345,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3370,2,['log'],['log']
Testability,Add official nio and test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1994:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1994,1,['test'],['test']
Testability,Add official nio and test (with Travis test this time hopefully),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2013:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2013,2,['test'],['test']
Testability,Add option to run Spark tests only,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3377:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3377,1,['test'],['tests']
Testability,"Add path support, and test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4424:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4424,1,['test'],['test']
Testability,Add smoke tests for sparkJar / shadowJar,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2844:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2844,1,['test'],['tests']
Testability,Add table size check to quickstart integration test [VS-501],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7970:47,test,test,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7970,1,['test'],['test']
Testability,Add test coverage requirements for hellbender tools to README,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/382:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/382,1,['test'],['test']
Testability,Add test covering --missingValuesInExpressionsShouldEvaluateAsFailing in VariantFiltration,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2303:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2303,1,['test'],['test']
Testability,Add test for DataProvider failures,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3619:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3619,1,['test'],['test']
Testability,Add test for index query on CRAM from Path.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4916:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4916,1,['test'],['test']
Testability,Add test illustrating GenotypeGVCFs/forceoutput N issue,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7018:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7018,1,['test'],['test']
Testability,Add test of Java 11 shadow jar.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7346:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7346,1,['test'],['test']
Testability,Add tests for AlleleSubsettingUtils,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2158:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2158,1,['test'],['tests']
Testability,Add tests for CollectGcBiasMetrics,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1133:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1133,1,['test'],['tests']
Testability,Add tests for Funcotator indel protein change strings consistency with MAF and VCF,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3842:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3842,1,['test'],['tests']
Testability,Add tests for SortSam,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/210:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/210,1,['test'],['tests']
Testability,Add tests for all branches in WellformedReadFilter,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/271:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/271,1,['test'],['tests']
Testability,Add tests for different dup scoring strategies to AbstractMarkDuplicatesCommandLineProgramTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1245:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1245,1,['test'],['tests']
Testability,Add tests for the Dataflow Mark Duplicates by running the existing Mark Duplicates tests on the Dataflow code.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/798:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/798,2,['test'],['tests']
Testability,Add tests to CPX variants in SV pipeline and fixing bugs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4330:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4330,1,['test'],['tests']
Testability,Add tests to GermlineCNVCallerIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6893:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6893,1,['test'],['tests']
Testability,Add the ability to log to file,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2728:19,log,log,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2728,1,['log'],['log']
Testability,"Add the ability to tag (assign logical names to) inputs (eg., -I:tumor tumor.bam). Needed by https://github.com/broadinstitute/hellbender/issues/93",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/94:31,log,logical,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/94,1,['log'],['logical']
Testability,"Add the gcs-connector as a GATK dependency, and write a test showing that GCS access with the Spark local runner works",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3125:56,test,test,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3125,1,['test'],['test']
Testability,Add unit tests for AddOrReplaceReadGroups,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/198:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/198,1,['test'],['tests']
Testability,Add unit tests for BamIndexStats,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/199:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/199,1,['test'],['tests']
Testability,Add unit tests for BuildBamIndex,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/200:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/200,1,['test'],['tests']
Testability,Add unit tests for CalculateReadGroupChecksum,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/201:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/201,1,['test'],['tests']
Testability,Add unit tests for CheckTerminatorBlock,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/202:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/202,1,['test'],['tests']
Testability,Add unit tests for CopyNumberArgumentValidationUtils.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5749:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5749,1,['test'],['tests']
Testability,Add unit tests for DownsampleSam,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/203:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/203,1,['test'],['tests']
Testability,Add unit tests for EstimateLibraryComplexity,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/204:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/204,1,['test'],['tests']
Testability,Add unit tests for FilterReads,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/205:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/205,1,['test'],['tests']
Testability,Add unit tests for FixMateInformation,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/206:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/206,1,['test'],['tests']
Testability,Add unit tests for ReorderSam,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/207:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/207,1,['test'],['tests']
Testability,Add unit tests for ReplaceSamHeader,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/208:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/208,1,['test'],['tests']
Testability,Add unit tests for RevertOriginalBaseQualitiesAndAddMateCigar,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/209:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/209,1,['test'],['tests']
Testability,AddCommentsToBam needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1225:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1225,1,['test'],['tests']
Testability,"Addded abstract class MachineLearningUtils to provide an interface and; handle common tasks. These include loading data, splitting data into; training and test sets, cross-validation, and optimizing classifier; hyperparameters. Also added XGBoostUtils which provides a concrete implemention of; MachineLearningUtils (by wrapping xgboost4j) and serves as an example; of how to provide access to a 3rd-party machine learning library. Finally, added an example tool: ExampleTrainXGBoostClassifier. This; demonstrates a typical training use case of loading data, training a; classifier, assessing accuracy, and saving the classifier. It also; demonstrates a typical filtering use case of loading a saved classifer,; and using it to calculate probabilities or class labels. This is working towards issue 4922 by providing the tools necessary to; train classifiers in general, but does not provide tools to train a; BreakpointEvidence filter, so does not resolve it. Additionally, this; framework should eventually be extended to provide a bayesian; hyperparameter optimizer. One outstanding problem with these changes is that xgboost4j threading; does not appear to work on OSX, resulting in slower training. However,; it does work on linux.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5146:155,test,test,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5146,1,['test'],['test']
Testability,Added CRAM input to CNV WDL and tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4257:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4257,1,['test'],['tests']
Testability,Added Gencode's GeneTranscriptType as an annotation field in GencodeFunctotation. Updated unit tests after adding new annotation field. resolves #4408,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7343:95,test,tests,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7343,1,['test'],['tests']
Testability,Added Utils::split (and tests). Added performance test for string splitting.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3776:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3776,2,['test'],"['test', 'tests']"
Testability,"Added XGBoostEvidenceFilter, an alternative BreakpointEvidence filter; based on XGBoost classifier.; - Default is still BreakpointDensityFilter. Switch by passing; ""--sv-evidence-filter-type XGBOOST"" instead of ""DENSITY"".; - Decisions based on evidence overlap or coherence are now scaled based; on coverage depth (in both filter types).; - Multiple avenues for supplying saved classifier binary file,; including built-in resource, local file, and google cloud storage.; - BreakpointEvidence updated to carry information necessary for; classifier. Unit tests were correspondingly updated.; - Data from genome tracts used for some classifier features. From the; hg38 genome: gaps, centromeres, and umap s100. Additional changes to convenience scripts; - Updated sanity_checks.sh to return error signal when exiting; - Bugfixes to manage_sv_pipeline.sh for linux compatibility; - Update run_whole_pipeline.sh to detect preemptible workers and; thus set NUM_EXECUTORS correctly",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4769:553,test,tests,553,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4769,1,['test'],['tests']
Testability,Added a few of the remaining useful features to MarkDuplicatesSpark and associated tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5377:83,test,tests,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5377,1,['test'],['tests']
Testability,"Added a new WEX test bam to src/test/resources/large, with a companion target interval list",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4756:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4756,2,['test'],['test']
Testability,"Added a new catch block in `PathLineIterator` for character encoding; errors, along with a new error message to be given to the user for such; cases. Added unit test for malformed xsv locatable files. Fixes #4006",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5124:161,test,test,161,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5124,1,['test'],['test']
Testability,Added a quick-and-dirty temporary port of RepeatLengthCovariate; to test this functionality. Resolves #4568,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4688:68,test,test,68,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4688,1,['test'],['test']
Testability,Added a test to validate WDLs in the scripts directory. (#7826),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7829:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7829,1,['test'],['test']
Testability,"Added a test to verify that https://github.com/broadinstitute/gatk/issues/3154 is fixed now that we've upgraded htsjdk (though we should keep that ticket open until @sooheelee can verify her particular incarnation of this issue). Also note that while the CRAM MD5 slice calculation is fixed, GATK users can still have problem reading CRAMs made from references containing ambiguity codes if the .dict accompanying the reference was generated with samtools. This is tracked by https://github.com/broadinstitute/gatk/issues/3306, but is really a samtools issue. The simple workaround is to recreate the .dict using CreateSequenceDictionary, which is what I've done to create the test in this PR.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3430:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3430,2,['test'],['test']
Testability,Added a unit test to verify that GATKReads are being coded correctly; regardless of backing implementation.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/642:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/642,1,['test'],['test']
Testability,"Added a workflow file for enabling the GitHub Action which processes PR comments to determine if they are meant to trigger and CARROT test, and then processes them if they are formatted in that way. BIG IMPORTANT NOTE: Before this is merged, we need to set two secrets for this repo:; - `CARROT_TOPIC_NAME`, which is the name of the Google Cloud PubSub topic that messages will be sent to if a comment should trigger a run, and; - `CARROT_SA_KEY`, which is the service account key JSON for the service account that has write access to the PubSub topic.; If this is merged before those are set, I'm fairly confident we're just gonna get an email saying the action failed each time someone posts a PR comment (CARROT or otherwise), which would be less than ideal. Closes #6916",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6917:134,test,test,134,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6917,1,['test'],['test']
Testability,Added ability for user to override to annotate again. Wrote unit and integration tests for new feature and override ability. resolves #5679,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7349:81,test,tests,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7349,1,['test'],['tests']
Testability,"Added ability to call gatk tools to collect variant calling metrics.; It is optional, and defaulted to not collect. Passing Extract run with metrics collected [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/97411a89-bd75-48dd-8dba-00d6af5373e7).; Passing Extract run where we don't (default) collect metrics [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/dfe6a72f-f2e0-4999-a7c9-f8243e0f1586).; Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/b11f03a9-16ef-4b1e-9b1c-c281f41b43a1)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8968:504,test,test,504,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8968,1,['test'],['test']
Testability,Added an ExampleAssemblyRegionWalker to provide a full integration test in public for assembly region traversal,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2179:67,test,test,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2179,1,['test'],['test']
Testability,"Added contig name overrides for hg19 VS B37; Added in code to convert VCF INDEL positions to MAF INDEL positions.; Added start/stop positions for IGRs.; Added argument to ignore filtered variants at the front of processing to save time.; Added a script to fully retrieve the COSMIC data sources. Fixed how the MafOutputRenderer handles mapping fields to values.; Fixed a bug in LocatableXsv and COSMIC parsers (was missing name and; version).; In Gencode: Now TumorSeqAllele1 is the refAllele, not the AltAllele.; Fixed some problems with VCF output.; Updated VCF outputs to have better header info.; Refactored header output for OutputRenderers.; Changed the logic for creating alt protein sequences.; Fixed a bug in the LocatableXsvFuncotationFactory that caused annotations to be incorrectly associated with a factory.; Fixed several bugs in the GencodeFuncotationFactory.; Fixed bugx in the handling of UTR variants.; Fixed the Transcript Selection Mode ordering.; Fixed an issue with splice sites. Minor speed fix to GencodeFuncotationFactory. Now CosmicFuncotationFactory opens the database in read-only mode. Bugfix - now LocatableXsvFuncotationFactories use overrides. Now the reference should properly align with ALL indels regardless of; length. ReferenceContext now always rendered on + strand. Now will create funcotations for transcripts without fasta sequences. Minor changes to FuncotatorIntegrationTest. - Added in more integration test files. These are as yet unused - must; refactor the files themselves to actually reflect what should be correct; as far as produced funcotations. - Updated LocatableXsvFuncotationFactoryUnitTest.java and SimpleKeyXsvFuncotationFactoryUnitTest.java; to reflect the change to funcotation factories to always produce the; expected funcotations (rather than only producing funcotations when; there are data that match the target variant). Fixed an issue with the new VariantClassification code. Fixed issue #4410. Fixed #4022. Fixed #4420. Fixed #3922",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4472:1553,test,test,1553,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4472,1,['test'],['test']
Testability,Added functionality for travis tests to upload reports from a docker image,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3353:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3353,1,['test'],['tests']
Testability,Added gCNV integration test to detect numerical differences in the outputs.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7889:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7889,1,['test'],['test']
Testability,"Added handling of interval to count reads.; Additional tests are ported from the dataflow side: CountReadsDataflowIntegrationTest; Note that the semantics of no specifying any -L is to count **all** reads, aligned and unaligned.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/932:55,test,tests,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/932,1,['test'],['tests']
Testability,Added in a script to pull down the latest Gencode data source.; Fixed an issue in 5' UTR processing that would cause variant alleles with length > 1 to throw an exception (issue 4712).; Added three test cases to prevent regression of issue 4712.; Updated Gencode codec to be compatible with latest Gencode release (v28).; Fixed a bug in the version detection for Funcotator data sources that would prevent newer data source versions from being detected as compatible (date comparison error).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4770:198,test,test,198,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4770,1,['test'],['test']
Testability,"Added in argument for MAF out.; Added more ""required"" MAF fields.; Added Funcotation::getDataSourceName; Added contig name overrides for hg19 VS B37; Added in code to convert VCF INDEL positions to MAF INDEL positions.; Added start/stop positions for IGRs.; Added argument to ignore filtered variants at the front of processing to save time.; Added a script to fully retrieve the COSMIC data sources. Fixed how the MafOutputRenderer handles mapping fields to values.; Fixed a bug in LocatableXsv and COSMIC parsers (was missing name and; version).; In Gencode: Now TumorSeqAllele1 is the refAllele, not the AltAllele.; Fixed some problems with VCF output.; Updated VCF outputs to have better header info.; Refactored header output for OutputRenderers.; Changed the logic for creating alt protein sequences.; Fixed a bug in the LocatableXsvFuncotationFactory that caused annotations to be incorrectly associated with a factory.; Fixed several bugs in the GencodeFuncotationFactory.; Fixed bugx in the handling of UTR variants.; Fixed the Transcript Selection Mode ordering.; Fixed an issue with splice sites. Minor speed fix to GencodeFuncotationFactory. Now CosmicFuncotationFactory opens the database in read-only mode. Bugfix - now LocatableXsvFuncotationFactories use overrides. Now the reference should properly align with ALL indels regardless of; length. ReferenceContext now always rendered on + strand. Now will create funcotations for transcripts without fasta sequences. Minor changes to FuncotatorIntegrationTest. - Added in more integration test files. These are as yet unused - must; refactor the files themselves to actually reflect what should be correct; as far as produced funcotations. - Updated LocatableXsvFuncotationFactoryUnitTest.java and SimpleKeyXsvFuncotationFactoryUnitTest.java; to reflect the change to funcotation factories to always produce the; expected funcotations (rather than only producing funcotations when; there are data that match the target variant). Fixed an",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4472:765,log,logic,765,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4472,1,['log'],['logic']
Testability,Added in new data sources for funcotator testing.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5296:41,test,testing,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5296,1,['test'],['testing']
Testability,Added in regression tests and fixes for correctness of many annotations,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5302:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5302,1,['test'],['tests']
Testability,"Added in test condition for AD field with only 1 value in MAF mode. This isn't really a bug, but an error mode that needed more explicit; feedback.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5860:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5860,1,['test'],['test']
Testability,Added in test files for funcotator data sources in the test resources (in git LFS). Also added a feature to the XSV parser to allow for too many / too few columns in each row of an XSV data set. Fixes #3906,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3908:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3908,2,['test'],['test']
Testability,"Added log warning for when total size of PL arrays for a VC will likely exceed 100,000",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6334:6,log,log,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6334,1,['log'],['log']
Testability,Added logging statements to b37 conversion process.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7760:6,log,logging,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7760,1,['log'],['logging']
Testability,Added logic for generating a simplified read filter output in the case of multiple filters joined by AND. Fixes #3520,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6315:6,log,logic,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6315,1,['log'],['logic']
Testability,"Added more logging functionality to better inform users. Fixed NullPointerException when onTraversalStart throws.; Now logs version number information for data sources.; Now checks minimum data sources version and requires that the user; upgrade if the version is too old. Fixes #4521 in a roundabout way - data sources need to be re-released for this version to run at all, but these new data sources contain a fix for the HG38 issue.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4563:11,log,logging,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4563,2,['log'],"['logging', 'logs']"
Testability,Added new VariantContext comparison functionality for testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7021:54,test,testing,54,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7021,1,['test'],['testing']
Testability,Added numerical-stability tests and updated test data for all ModelSegments single-sample and multiple-sample modes.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7652:26,test,tests,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7652,2,['test'],"['test', 'tests']"
Testability,Added several test files from GATK3 and made sweeping bugfixes for the finalizeRawAnnotations() code for many of the reducible annotation classes. . Fixes #3544,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3722:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3722,1,['test'],['test']
Testability,Added tests for allele-specific annotation support to GenotypeGVCFs.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3722:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3722,1,['test'],['tests']
Testability,Added tests to GenomicsDBImport testing for non-diploid genotyping,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4000:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4000,2,['test'],"['testing', 'tests']"
Testability,Added the new VariantContext comparison functionality from #6417 but without yet integrating it into any existing tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7021:114,test,tests,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7021,1,['test'],['tests']
Testability,"Added two new optional flags to `SplitIntervals`, and their corresponding tests. 1. `--prefix` for adding a prefix to the created interval files; 2. `--digits` for configuring the number of digits used to enumerate the interval files. This modifications were requested by a community user (#7157)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7488:74,test,tests,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7488,1,['test'],['tests']
Testability,Added unit tests for XsvLocatableTableCodecUnitTest and XsvTableFeature. Fixes #3972,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3997:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3997,1,['test'],['tests']
Testability,Added validateSampleNameMap command line parameter; Added a unit test; Updated genomicsdb version to 0.6.3,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2733:65,test,test,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2733,1,['test'],['test']
Testability,"Added:. - service account support for SitesOnly task, added GATK flag to not output a timestamp info VCF to help Call Caching; - switch to SSD, increased size and moved to pre-emptibles for Annotate task; - service account support for BQ Loading; - service account support for BQ Smoke Test",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7345:286,Test,Test,286,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7345,1,['Test'],['Test']
Testability,Adding AD for scale testing VS 225 add AD,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7713:20,test,testing,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7713,1,['test'],['testing']
Testability,Adding CRAM integration tests for CountReads.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/870:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/870,1,['test'],['tests']
Testability,Adding `FuncotateSegments` as an option to the Somatic CNV WDL.; - Added automated WDL test to find obvious failures.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5967:87,test,test,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5967,1,['test'],['test']
Testability,Adding a circle.yml file; Adding the autogenerated gradle wrappers because CircleCI uses them to figure out how to gradle properly; Removing parallel tests once again because the CircleCI containers crash due to 2 jvms consuming too much memory.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/520:150,test,tests,150,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/520,1,['test'],['tests']
Testability,Adding a cloud test for java 11.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6210:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6210,1,['test'],['test']
Testability,Adding a gradle testAll task to run all the tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/760:16,test,testAll,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/760,2,['test'],"['testAll', 'tests']"
Testability,Adding a new `Utils.nonNull` which is a fluent style assert to throw `IllegalArgumentException` on nulls.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/475:53,assert,assert,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/475,1,['assert'],['assert']
Testability,Adding a note to developers that if they change the install_R_scripts script they must rebuild gatkbase and test with clean caches.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4289:108,test,test,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4289,1,['test'],['test']
Testability,Adding a second contig to Dataflow tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/747:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/747,1,['test'],['tests']
Testability,Adding a test and small features to var store branch,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6761:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6761,1,['test'],['test']
Testability,Adding a test to capture an expected edge case in Reblocking,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8928:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8928,1,['test'],['test']
Testability,Adding cloud tests on java 11,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6210:13,test,tests,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6210,1,['test'],['tests']
Testability,Adding cram test to UnmarkDuplicatesIntergrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2174:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2174,1,['test'],['test']
Testability,Adding documentation as a way to test the process.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/386:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/386,1,['test'],['test']
Testability,"Adding in a parser that handles text files that are delimited with some known separator (i.e. commas, tabs, words). The new class is called `SimpleKeyXsvFuncotationFactory` and it is usable with the rest of `Funcotator` using new command-line arguments. Added new integration tests that include this new data source factory. Fixes #3757",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3897:276,test,tests,276,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3897,1,['test'],['tests']
Testability,"Adding in the option for using a compressed representation of our reference data. The flag use_compressed_references needs to be passed into ingest and also export, and doing so causes us to use a different internal schema for the ref_ranges table that can save ~40% on space. On the VCF path, the packed data is expanded while we populate the prepare tables before extract. On the VDS path, the packed data is expanded while we extract from the tables to create the Avro files. I updated integration tests to take use_compressed_refs as an option, and saw what I needed. Integrations tests for the VCF and VDS paths go to completion and fail, but in the expected way. AssertIdenticalOutputs, the important part, passes. AssertTableSizesAreExpected fails because the ref_ranges table is so much smaller (255884464 vs 431805033 expected) and AssertCostIsTrackedAndExpected fails because the PrepareRangesCallsetTask.GvsPrepareRanges.BigQuery Query Scanned is similarly smaller (340787200 vs 515899392). Given the nature of the change and the fact that it is an optional flag that defaults to zero, updating the integration tests to cover this path did not seem sound at this time. But using them to verify that the _content_ of the final vcfs wasn't affected by the change makes more sense. VCF integration run: https://job-manager.dsde-prod.broadinstitute.org/jobs/e9896786-9d3f-48b9-ab6f-9a76d9fafafe; Hail integration run: https://job-manager.dsde-prod.broadinstitute.org/jobs/dbdd0934-50c3-4477-a191-3282341eacd3. another post-merge integration run with same results: identical outputs, failure due to lower table sizes and query scan costs; https://job-manager.dsde-prod.broadinstitute.org/jobs/edabdac3-1856-4e2a-aadc-3bcd4c353956",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8543:501,test,tests,501,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8543,6,"['Assert', 'test']","['AssertCostIsTrackedAndExpected', 'AssertIdenticalOutputs', 'AssertTableSizesAreExpected', 'tests']"
Testability,Adding names and logging,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/753:17,log,logging,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/753,1,['log'],['logging']
Testability,Adding scripts related to setting up haplotypecaller carrot regression tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7726:71,test,tests,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7726,1,['test'],['tests']
Testability,Adding tests and doc to ReadsSource,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/480:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/480,1,['test'],['tests']
Testability,Adding tests on openJDK since it seems like we're going to have to support it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2695:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2695,1,['test'],['tests']
Testability,"Adding the errorOnOutOfDateIndex option, which will cause a; UserException to be thrown when an index file is opened that is out of; date with respect to its data file. This option defaults to false to; preserve baseline behavior. Split tests apart and added a method to change the last modified time of a file. Fixes #1683",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3063:237,test,tests,237,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3063,1,['test'],['tests']
Testability,Adding the uber_monitor.py script to GvsUtils.wdl; Threaded it into GvsCreateFilterSet; Included a unit test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8268:104,test,test,104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8268,1,['test'],['test']
Testability,Additionally got rid of the unit test for `ExpandingArrayList`,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6069:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6069,1,['test'],['test']
Testability,"Addresses #4397 and #5054. Restructured gCNV WDLs to pass data more efficiently to postprocessing tasks, and added a wrapper workflow for gCNV case WDL that scatters samples in multiple blocks. Also cleaned up some of the unused cromwell travis tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5176:245,test,tests,245,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5176,1,['test'],['tests']
Testability,"Addresses #6157 . (Very minor tests are failing, which I will fix ASAP.)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6168:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6168,1,['test'],['tests']
Testability,"Addresses #6242. Current behavior: when all the reads in a read group are filtered in the base recalibration step, the read group is not logged in the recal table. Then ApplyBQSR encounters these reads, can't find the read group in the recal table, and throws an error. New behavior: if `--allow-read-group` flag is set to true, then ApplyBQSR outputs the original quantities (after quantizing). . I avoided the alternative approach of collapsing (marginalizing) across the read groups, mostly because it would require a complete overhaul of the code. I also think that using recal data from other read groups might not be a good idea. In any case, using OQ should be good enough; I assume that these ""missing"" read groups are low enough quality to be filtered out and are likely to be thrown out by downstream tools. I also refactored the BQSR code, mostly to update the variable and class names to be more accurate and descriptive. For instance:. ReadCovariates.java -> PerReadCovariateMatrix.java; EstimatedQReported -> ReportedQuality",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/9020:137,log,logged,137,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/9020,1,['log'],['logged']
Testability,"Addresses. https://github.com/broadinstitute/dsp-spec-ops/issues/280. Analysis has been done and delivered, this is primarily documentation of how to do it in the future. If someone wants to test-drive the instructions, there is a GVS VCF at. ```; gs://broad-dsp-spec-ops/scratch/bigquery-jointcalling/comparison-v3/gvs.chr20.vcf.gz*; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7237:191,test,test-drive,191,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7237,1,['test'],['test-drive']
Testability,"Adds a WDL that replaces the ""serial"" SnpThenIndel joint filtering workflow added in #7932. This simplified replacement only runs one iteration of the extract-train-score toolchain, rather than running one iteration for SNPs followed by another for INDELs. The original SnpThenIndel workflow (used for Ultima) will be updated and moved to the WARP repo. (EDIT: I was originally confused here, the WDL that was replaced in this PR simply ran SNPs and indels separately, rather than serially. Curious that things still tied out, but I’m not sure it’s worth looking into at this point.). Test files have also been subset to chr21-22 and slimmed down. A test for the positive-negative was also added, as well as tests of an empty shard. The first commit contains the original workflow (JointVcfFilteringOriginal.wdl), as well as a reimplementation (JointVcfFilteringSnpThenIndel.wdl) that calls the simplified workflow (JointVcfFiltering.wdl). I've verified that both the original and reimplemented SnpThenIndel workflows tie out on the original test data. The second commit then removes the original and the reimplementation, leaving only the simplified workflow. It may thus be easier to review the first commit, second commit, or the overall changes, depending on what you are looking at. @meganshand can you take a look and let me know if there's any missing functionality, or if this otherwise won't work for Ultima and/or importing in WARP? Apologies for the delay!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8074:585,Test,Test,585,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8074,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"Adds a couple warnings in case the user can write to the configured tmp-dir but can't set the files as executable or execute them, with the assumption in the latter case that the cause is likely that the directory is mounted using the ""noexec"" mount option. I'm not sure if a test makes sense for this, because it would probably require mounting a directory for testing, and the user running the tests may not have permissions to do that. I think only root can mount with options in Ubuntu? Do we require root for other tests?. Fixes #8453",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8951:276,test,test,276,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8951,4,['test'],"['test', 'testing', 'tests']"
Testability,"Adds a new ReadWalker tool, `RealignSoftClippedReads`, that realigns soft-clipped fragments using BWA. This tool is motivated by a specific artifact produced by Illumina DRAGEN v3.7.8 in which reads containing small indels are erroneously soft-clipped, often within mobile element contexts (LINE, SINE, ALU, SVA, etc). This is particularly problematic for mobile element insertion callers such as [Scramble](https://github.com/GeneDx/scramble) that rely on soft-clips for identifying potential insertion sites but do not perform a local assembly. In some cases, these soft-clipped reads are aligned to the incorrect region (confirmed by BLAT query and comparison to BWA alignments). An example of a false positive site produced by Scramble is shown below. <img width=""1008"" alt=""Screenshot 2023-11-16 at 2 09 45 PM"" src=""https://github.com/broadinstitute/gatk/assets/5686877/9d2c1dfd-9673-49f0-9372-c4c9cf6ffd9f"">. This PR includes the new tool and unit/integration tests and some minor refactoring to expose non-Spark BWA read mapping. This tool should be considered experimental until thorough benchmarking and analysis can be performed.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8588:966,test,tests,966,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8588,2,"['benchmark', 'test']","['benchmarking', 'tests']"
Testability,Adds a simple test to test a cram in UnmarkDuplicatesIntergrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2174:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2174,2,['test'],['test']
Testability,"Adds a tool for calling SVs using various SV evidence (BNDs, SV pipeline DEL calls, discordant read pairs, split reads) and copy number calls from gCNV. Possible haplotypes are enumerated using a traversal of the sequence graph supported by the SV evidence. The copy number posteriors are integrated to call likely events associated with the possible genotypes. Unit and integration tests forthcoming.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5161:383,test,tests,383,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5161,1,['test'],['tests']
Testability,"Adds an R entry to the travis matrix. Note that some R tests were already in the ""R"" test group.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6454:55,test,tests,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6454,2,['test'],"['test', 'tests']"
Testability,"Adds some flexibility to the allowed split-read strand annotations on SV records:. - Allow INS -+ strands; - Allow INV null strands; - When clustering, only require that strands match for INV/BND records. The changes affecting INS variants are commensurate with changing going into gatk-sv (see https://github.com/broadinstitute/gatk-sv/pull/553). Added tests for the new functionality and improved some unit test coverage for a few related cases.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8378:354,test,tests,354,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8378,2,['test'],"['test', 'tests']"
Testability,Adds wdl that tests joint VCF filtering tools,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7932:14,test,tests,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7932,1,['test'],['tests']
Testability,Adjusted logic for filtering zero-coverage samples and intervals in CreateReadCountPanelOfNormals.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6624:9,log,logic,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6624,1,['log'],['logic']
Testability,"After #5688 we need to adjust some of the default values when in mitochondria mode. I tested these parameters with the mixture samples and it looked good. In particular note that the TLOD divided by depth filter is no longer needed, so the default would now be 0. Again, would love to get this in before the release on Tuesday (fyi @droazen). @ldgauthier @davidbenjamin @jsotobroad",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5827:86,test,tested,86,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5827,1,['test'],['tested']
Testability,"After discussion in #3084, I offer myself to port the indel realignment pipeline. After exploring the GATK3 implementation, I will split the port in the following independent tasks:. - [ ] Port `RealignerTargetCreator` (require test data after run with GATK3); - [ ] Port `ConstrainedMateFixingManager`; - [ ] Port `NWaySAMFileWriter` (requires some change in the engine to get the ID for the inputs). The previous port will be integrated in the `IndelRealigner` tool implementation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3104:228,test,test,228,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3104,1,['test'],['test']
Testability,"After extensive QC, Ryan Collins with the Talkowski lab has a set of ~20 samples that he believes to have sex chromosome genotypes that are not XX or XY. It would be great to run our tool on them and see what it predicts. Normals could probably come from any of the same projects: G100345, G68758, G81032, G94818, etc.; Case data has already been copied to gs: //broad-dsde-methods/testdata/aneuploidy_samples/",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4371:382,test,testdata,382,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4371,1,['test'],['testdata']
Testability,"After running `./gradlew clean jacocoTestReport` (or just `./gradlew clearn test`), there are some test files appearing as ""untracked"" in the git repository:. * `likelihoods.txt`; * `src/test/resources/snpSampledModel.report`; * `src/test/resources/vqsr_model.report`. I think that this should be test files in a temp directory and should be clean after the test suite finishes (or after the single test runs).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4206:76,test,test,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4206,7,['test'],['test']
Testability,"After running unit tests during docker build, delete the large test files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2719:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2719,2,['test'],"['test', 'tests']"
Testability,"After the merger with gatk-protected, the docker integration tests are intermittently (but frequently) hitting the hard travis time limit of 50 minutes. We need to fix this ASAP!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2808:61,test,tests,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2808,1,['test'],['tests']
Testability,"After the updates to the python environment made in #8561, the CNN tools are no longer functional and were deprecated. However, we may want to provide a separate environment in which some of these tools can still be used, perhaps in conjunction with NVScoreVariants. If so, we should also re-enable the relevant integration and WDL tests and provide appropriate documentation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8907:332,test,tests,332,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8907,1,['test'],['tests']
Testability,Align the Funcotator checkIfAlreadyAnnotated test with the Funcotator engine code.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7555:45,test,test,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7555,1,['test'],['test']
Testability,All ReadFilters should have a flag to invert their tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6005:51,test,tests,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6005,1,['test'],['tests']
Testability,"All of our tests use contig ""1"". This is fragile, we should add tests that include two contigs. This is not currently possible with ArtificialReadUtils (issue #688).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/689:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/689,2,['test'],['tests']
Testability,"All right - sorry for the grief with this. This is a new pull request for these changes, squashed and rebased on Hellbender master, including changes for the code review comments for 3 files:; src/main/java/org/broadinstitute/hellbender/tools/picard/sam/FilterReads.java:; src/test/java/org/broadinstitute/hellbender/tools/exome/ExomeReadCountIntegrationTest.java:; src/test/java/org/broadinstitute/hellbender/tools/picard/vcf/AbstractVcfMergingClpTester.java:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/583:277,test,test,277,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/583,2,['test'],['test']
Testability,All subclasses do the same. This involves updating all callers to pass a `Path` instead of a `File`. Added a test in `TableUtilsUnitTest` that writes a table to an in-memory `Path` to demonstrate we're not using files underneath (it works). Added a similar test in `TableReaderUnitTest` that reads from an in-memory `Path`. Fixes #5747,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5785:109,test,test,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5785,2,['test'],['test']
Testability,"All ways of reading reference sequences are hidden behind a common interface,; ReferenceDataflowSource. See https://github.com/broadinstitute/hellbender/pull/804 for initial discussion of the design, and https://github.com/broadinstitute/hellbender/issues/567 for the issue that this solves. This change adds some HTSJDK extensions to work with Hadoop, these should eventually be added to HTSJDK in some form. I was able to run BQSR on a Spark cluster using this code, by using the following:. ``` bash; # Copy BAM into HDFS; hadoop fs -put ./src/test/resources/org/broadinstitute/hellbender/tools/BQSR/NA12878.chr17_69k_70k.dictFix.bam bam/NA12878.chr17_69k_70k.dictFix.bam. # Copy FASTA (reference) into HDFS; hadoop fs -mkdir fasta ; hadoop fs -put ./src/test/resources/human_g1k_v37.chr17_1Mb.fasta fasta/human_g1k_v37.chr17_1Mb.fasta; hadoop fs -put ./src/test/resources/human_g1k_v37.chr17_1Mb.dict fasta/human_g1k_v37.chr17_1Mb.dict; hadoop fs -put ./src/test/resources/human_g1k_v37.chr17_1Mb.fasta.fai fasta/human_g1k_v37.chr17_1Mb.fasta.fai. spark-submit \; --master $SPARK_MASTER \; --conf spark.driver.userClassPathFirst=true \; --conf spark.executor.userClassPathFirst=true \; --conf spark.io.compression.codec=lzf \; build/libs/hellbender-all-*-spark.jar ApplyWholeBQSRDataflow \; --reference hdfs://$NAMENODE/user/$USER/fasta/human_g1k_v37.chr17_1Mb.fasta \; --input hdfs://$NAMENODE/user/$USER/bam/NA12878.chr17_69k_70k.dictFix.bam \; --output hdfs://$NAMENODE/user/$USER/out/bqsr \; --knownSites $HELLBENDER_HOME/src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b37.excluding_sites_after_129.chr17_69k_70k.vcf \; --RECAL_TABLE_FILE /dev/stdout \; --runner SPARK \; --sparkMaster $SPARK_MASTER ; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/827:547,test,test,547,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/827,5,['test'],['test']
Testability,Allele-specific annotations and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1825:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1825,1,['test'],['tests']
Testability,AlleleSubsettingUtils.calculateMostLikelyAlleles was incorrectly removing all alleles if the best alleles were tied and numAltAllelesToKeep=1; fixes #2157. move tests into AlleleSubsettingUtilsUnitTest from GATKVariantContextUtilsUnitTest as part of #2158; a few typo fixes that I noticed,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2170:161,test,tests,161,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2170,1,['test'],['tests']
Testability,"Allow CH to create custom cohorts with a subset of samples. Tested with sample_id=1 (sample name = ERS4367795). Imported:; <img width=""851"" alt=""Screen Shot 2022-05-13 at 4 13 15 PM"" src=""https://user-images.githubusercontent.com/6863459/168382823-abcfad4a-e641-43eb-a806-6556c49b9a8b.png"">. In the alt-allele; <img width=""1213"" alt=""Screen Shot 2022-05-17 at 6 52 30 PM"" src=""https://user-images.githubusercontent.com/6863459/168925071-dc889fa8-0875-4dcf-b318-330f0f3a27ae.png"">. In the filter:; <img width=""1186"" alt=""Screen Shot 2022-05-17 at 6 51 43 PM"" src=""https://user-images.githubusercontent.com/6863459/168924994-3ceb693e-9223-49b4-adca-50dfaff18c9a.png"">. In the prepare:; <img width=""589"" alt=""Screen Shot 2022-05-17 at 2 47 32 PM"" src=""https://user-images.githubusercontent.com/6863459/168887752-5897a0b9-2a6d-4393-9e3b-450a64c649c7.png"">. In the extract:; <img width=""1780"" alt=""Screen Shot 2022-05-17 at 6 48 17 PM"" src=""https://user-images.githubusercontent.com/6863459/168924703-ad863dee-19c9-4b6e-90b3-696781e86c93.png"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7844:60,Test,Tested,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7844,1,['Test'],['Tested']
Testability,Allow Spark UI to run during tests by setting the gatk.spark.debug system property,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1193:29,test,tests,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1193,1,['test'],['tests']
Testability,Allow VQSR Classic Memory overrides to be passed from GvsJointVariantCalling.wdl to GvsCreateFilterSet.wdl.; Increase memory overhead on a couple of tasks in GvsVQSRClassic.wdl. @RoriCremer is running the integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/8a8b5553-d9d4-47f5-80fb-ec5992172143).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8452:217,test,test,217,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8452,1,['test'],['test']
Testability,Allow programmatic setting of log4j logging level.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/787:36,log,logging,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/787,1,['log'],['logging']
Testability,Allow tests to fail gracefully if HELLBENDER_TEST_INPUTS isn't set.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2404:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2404,1,['test'],['tests']
Testability,Allow use of SparkPipelineRunner for dataflow tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/546:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/546,1,['test'],['tests']
Testability,Allow user to set log4j logging level.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/603:24,log,logging,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/603,1,['log'],['logging']
Testability,Also added a (Deactivated) test for moving a genomicsDB. fixes #3342 ; fixes #3345 ; fixes #3411,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4000:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4000,1,['test'],['test']
Testability,Also fix an issue with git lfs and some tabix indices in src/test/resources/large/gvcfs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2612:61,test,test,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2612,1,['test'],['test']
Testability,"Also fixed some minor style issues in argument variable names and the WDL. This should help recover some deletions and might possibly clear up some issues with MAF estimation when the number of hets is small. @LeeTL1220 can you run on some test cases to check the effect? (Note that the changes to fix estimation of the posterior widths, which will in turn affect similar-segment smoothing, are in another branch; we should test those changes as well.). Note that the default threshold of zero for the tumor in matched-normal mode should ensure that the sites genotyped as het should always match in the tumor and the normal. (This will ultimately make multisample segmentation, as enabled by #5524, more straightforward.) There was previously a check for this condition in the integration test; however, it wasn't actually activated by the test data. I could modify the test data to add a proper regression test, but since these test files are generated by running another tool on a test BAM in the repo, this could be misleading. I'm OK with punting in this case. @jonn-smith do you mind reviewing, since this resulted from your turn as liaison? Should be super quick. Thanks again for raising the issue!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5556:240,test,test,240,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5556,8,['test'],['test']
Testability,Also improved the existing tests for FragmentLengthReadFilter. Resolves #5884,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5886:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5886,1,['test'],['tests']
Testability,Also reduced the overall number of tests to execute by eliminating non-docker unit and integration tests from the travis.yml. I would suggest checking that the docker tests in this travis execution actually uploaded to where it says they do on gcloud.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3353:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3353,3,['test'],['tests']
Testability,"Also some minor alphabetization of the gCNV test jsons. @davidbenjamin @LeeTL1220 @droazen I assume `gatk` is in the `PATH` for all backends and use `gatk` to launch. (EDIT: Actually, let me see if this actually works correctly...I originally got it working by launching with `/gatk/gatk`, but this won't work outside of the Docker. EDIT#2: See comment below.). Note that I did not change the unsupported M2 WDLs to use the gatk launch script. Please feel free to add commits directly. Closes #4025.; Closes #3967.; Closes #3968.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4071:44,test,test,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4071,1,['test'],['test']
Testability,Also uncomment getAuthenticatedGcs test and update; code to new way of setting retry params.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2581:35,test,test,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2581,1,['test'],['test']
Testability,"Also updated code and documentation to indicate how to properly run this; test. Sadly it has to be done manually because I don't know of a; reasonable way to disable default credentials. Nevertheless it's good that the test is there even for automated runs,; so we can check that loading the explicit credentials does not break; anything.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2879:74,test,test,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2879,2,['test'],['test']
Testability,"Also, any index files, etc. should be retained if necessary. CNV team will delete their files, but I'll leave it up to engine and the other teams about how much we want to remove. src/test/resources/dbsnp_132.b36.excluding_sites_after_129.chr1_1k.vcf.idx; src/test/resources/empty.vcf.idx; src/test/resources/exampleFASTA.fasta.fai; src/test/resources/fastaWithoutDict.fasta.fai; src/test/resources/fastaWithoutFai.dict; src/test/resources/hg19micro.dict; src/test/resources/hg19micro.fasta.fai; src/test/resources/hg19mini.dict; src/test/resources/hg19mini.fasta.fai; src/test/resources/Homo_sapiens_assembly19_chr1_1M.dict; src/test/resources/Homo_sapiens_assembly19_chr1_1M.fasta.fai; src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf.idx; src/test/resources/HSA19.dbsnp135.chr1_1M.exome_intervals.modified.vcf.idx; src/test/resources/human_g1k_v37.chr17_1Mb.dict; src/test/resources/human_g1k_v37.chr17_1Mb.fasta.fai; src/test/resources/iupacFASTA.dict; src/test/resources/iupacFASTA.fasta.fai; src/test/resources/joint_calling.chr1_1M.1kg_samples.10samples.noINFO.vcf.idx; src/test/resources/large/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.idx; src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/bias_covariates_ARD_coefficients.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_matrix.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_norm2.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_mean_log_bias.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_unexplained_variance.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/posteriors_final/bias_covariates_ARD_coefficients_histo",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:1390,test,test,1390,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"Also, update code to use Hellbender's IOUtils instead of htsjdk's IOUtil; for these checks. We have both, presumably there's a reason Hellbender has their own and we should use them (for example, we can only add the hinting in our own). Sample error now:. A USER ERROR has occurred: Couldn't read file gs://foo/sam/m54113_160913_184949.scraps.beginning.sam. Error was: Error 403: jp-testing@redacted.iam.gserviceaccount.com does not have storage.objects.get access to foo/sam/m54113_160913_184949.scraps.beginning.sam. Potential cause: incorrect Google Cloud configuration; see instructions in the README. Fixes: #5468",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5477:383,test,testing,383,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5477,1,['test'],['testing']
Testability,Also:; - Cleaned up headers in some test resources.; - Made sequence-dictionary checking more uniform across all CNV tools.; - Fixed an NPE bug in PlotModeledSegments input validation.; - Improved documentation regarding sex chromosomes in the ModelSegments pipeline.; - Miscellaneous boy-scout activities. Closes #3916.; Closes #3951.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4268:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4268,1,['test'],['test']
Testability,Always login to docker on travis instead of qualifying it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7256:7,log,login,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7256,1,['log'],['login']
Testability,An experiment related to failed tests in #6042,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6046:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6046,1,['test'],['tests']
Testability,"And probably other kinds of files too. The stack below results from handing it a .ADAM file in the MeanQualityByCycleSparkIntegrationTest.test_ADAM test. The ReadSparkSource code is currently delegating to Hadoop-BAM, which is in turn delegating to promiscuous htsjdk code that says anything that doesn't look like known file type [must be a SAM file](https://github.com/samtools/htsjdk/blob/bd92747fd3672635de96473fea6d4b38e8635c8e/src/java/htsjdk/samtools/SAMFileReader.java#L754). It then happily creates a bogus SAMFileHeader from the .ADAM stream. All 3 layers should probably be more discriminating. This currently doesn't break any tests. I discovered it when running the HB tests against a local version of htsjdk with a strict setHeader implementation that attempts to resolve all reference names on every setHeader call. That code caused this test to fail because its using the bogus header. ""main@1"" prio=5 tid=0x1 nid=NA runnable; java.lang.Thread.State: RUNNABLE; at htsjdk.samtools.SAMTextHeaderCodec.decode(SAMTextHeaderCodec.java:113); at htsjdk.samtools.SAMTextReader.readHeader(SAMTextReader.java:200); at htsjdk.samtools.SAMTextReader.<init>(SAMTextReader.java:63); at htsjdk.samtools.SAMTextReader.<init>(SAMTextReader.java:73); at htsjdk.samtools.SAMFileReader.init(SAMFileReader.java:684); at htsjdk.samtools.SAMFileReader.<init>(SAMFileReader.java:148); at org.seqdoop.hadoop_bam.util.SAMHeaderReader.readSAMHeaderFrom(SAMHeaderReader.java:66); at org.seqdoop.hadoop_bam.util.SAMHeaderReader.readSAMHeaderFrom(SAMHeaderReader.java:47); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:195); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReads(GATKSparkTool.java:284); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeToolInputs(GATKSparkTool.java:264); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:255); at org.broadinstitute.hel",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1280:148,test,test,148,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1280,4,['test'],"['test', 'tests']"
Testability,AndFailureCallbacks(Utils.scala:1348); 	at org.apache.spark.rdd.PairRDDFunctions$$anonfun$saveAsHadoopDataset$1$$anonfun$13.apply(PairRDDFunctions.scala:1211); 	at org.apache.spark.rdd.PairRDDFunctions$$anonfun$saveAsHadoopDataset$1$$anonfun$13.apply(PairRDDFunctions.scala:1190); 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70); 	at org.apache.spark.scheduler.Task.run(Task.scala:86); 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); 	at java.lang.Thread.run(Thread.java:745). **This is the stack I get when the test completes but fails (note that the expected line count appears to not match the line count of the expected output file in the repo): **. java.lang.AssertionError: line counts expected [2629] but found [507]; 	at org.testng.Assert.fail(Assert.java:94); 	at org.testng.Assert.failNotEquals(Assert.java:496); 	at org.testng.Assert.assertEquals(Assert.java:125); 	at org.testng.Assert.assertEquals(Assert.java:372); 	at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.assertEqualTextFiles(IntegrationTestSpec.java:211); 	at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.assertEqualTextFiles(IntegrationTestSpec.java:190); 	at org.broadinstitute.hellbender.tools.examples.ExampleAssemblyRegionWalkerSparkIntegrationTest.testExampleAssemblyRegionWalker(ExampleAssemblyRegionWalkerSparkIntegrationTest.java:29); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349:3263,test,testng,3263,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349,1,['test'],['testng']
Testability,AndPass.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/filteredSamples.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/filteringDepthInFormat.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/filteringZInFormatWithMissing.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/goodMask.bed.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/twoDeletions.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/unfilteredForFiltering.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/variantFiltrationInfoField.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/vcfexample2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/vcfMask.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/ad-bug-input.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/CEUTrio.20.21.missingIndel.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/chr21.bad.pl.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/combined_genotype_gvcf_exception.nocall.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/combined_genotype_gvcf_exception.original.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/combine.single.sample.pipeline.1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/combine.single.sample.pipeline.2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/GenotypeGVCFs/combine.single.sample.pipeline.3.vcf.idx; src/test/resou,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:56198,test,test,56198,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,AnnotatePairOrientation needs more testing before it can be taken out of experimental status,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3623:35,test,testing,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3623,1,['test'],['testing']
Testability,AnnotatedIntervalCodec has not been tested with NIO,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4579:36,test,tested,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4579,1,['test'],['tested']
Testability,"Annotation will not be calculated, genotype is not called or alleleLikelihoodMap is null; ```. I have a theory about what's going on, and I'm hoping someone who is more knowledgable can tell me if my theory is sensible or impossible, and if there's anything I can do to confirm it. My theory is this: that a) the one bad job got run on a compute instance that has a hardware issue that intermittently affects only AVX operations, b) that the Intel native PairHMM doesn't handle that situation gracefully but instead returns an empty likelihoods map and c) that's causing the warnings I'm seeing the discrepancies in the gVCFs. I'm at a bit of a loss for what to do here since I've tried multiple times to reproduce the issue and cannot. And therefore also can't try running with different GATK versions or options etc. But at the same time if it's possible for a hardware issue to cause these problems without crashing the GATK that's very scary. The following is the logging prior to traversal so you can see which versions of various things are in use:. ```; 03:15:01.986 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:conda/share/gatk4-4.1.4.1-1/gatk-package-4.1.4.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; Oct 09, 2020 3:15:02 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 03:15:02.169 INFO HaplotypeCaller - ------------------------------------------------------------; 03:15:02.170 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.1.4.1; 03:15:02.170 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 03:15:02.170 INFO HaplotypeCaller - Executing as <redacted> on Linux v4.4.0-1114-aws amd64; 03:15:02.170 INFO HaplotypeCaller - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_144-b01; 03:15:02.170 INFO HaplotypeCaller - Start Date/Time: October <redacted>; 03:15:02.170 INF",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6889:2664,log,logging,2664,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6889,1,['log'],['logging']
Testability,"Another issue that came up on the URI migration branch. The implementation of this method declares that only the `ReferenceTwoBitSparkSource` implementation of `ReferenceSparkSource` is broadcastable, but the method is unused, and there are tools with tests (`CpxVariantReInterpreterSparkIntegrationTest`) that broadcast both the File and Hadoop implementations. So we should either take this, or fix the callers to be more discriminating.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6523:252,test,tests,252,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6523,1,['test'],['tests']
Testability,Another test for BigQueryUtils,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6861:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6861,1,['test'],['test']
Testability,Any test that tries to access a bucket seems to stall indefinitely. I think this has to do with gcloud not accepting our credentials file on travis. I suspect it's trying to open a web browser. I suspect it may need to be reconfigured with a service account key and an explicit authorization step before the build.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/444:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/444,1,['test'],['test']
Testability,Apply a fix that Miguel made here: https://github.com/broadinstitute/gatk/pull/8785 but did not merge (yet - because he didn't want to disrupt the VAT that at time was under construction). This fixes a bug in the partioning logic used in creating Hail VAT inputs.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8911:224,log,logic,224,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8911,1,['log'],['logic']
Testability,Apply latest test changes to echo callset,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8807:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8807,1,['test'],['test']
Testability,ApplyBQSR CRAM tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1564:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1564,1,['test'],['tests']
Testability,ApplyBQSR: cloud tests that pass,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/595:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/595,1,['test'],['tests']
Testability,"ApplyBQSRDataflow, with passing tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/835:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/835,1,['test'],['tests']
Testability,ApplyBQSRIntegrationTest needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1226:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1226,1,['test'],['tests']
Testability,"Are some of the FASTA test files misnamed? For example, src/test/resources/large/human_g1k_v37.20.21.fasta seems to only include chr20, but the associated dict and fai include chr21 as well. Is this intentional?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3904:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3904,2,['test'],['test']
Testability,ArgumentsBuilder in Mutect2 pipeline tool tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6219:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6219,1,['test'],['tests']
Testability,ArtificallyContaminatedBams/contamination.case.4.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.5.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.6.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.7.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.8.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.1.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.2.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.3.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.4.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.5.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.fakeSitesForTesting.b37.chr17.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.fakeSitesForTesting.b37.chr20.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.manyObservations.full.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.manyObservations.piece.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.noMD.noBQSR.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.noMD.noBQSR.cram.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.noMD.noBQSR.md.bqsr.bam.bai; src/test/resources/org/broadinstit,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:17554,test,test,17554,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"As a compromise fix, I have added a check to the validation code that asserts the dictionaries actually exist to save ourselves the potential null-pointer exceptions. @droazen . Fixes #6142",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6147:70,assert,asserts,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6147,1,['assert'],['asserts']
Testability,"As a stopgap solution to allow `gs://` access on Spark with the local runner, let's add the `gcs-connector` as a project dependency, and craft a test case the runs a simple Spark tool like `PrintReadsSpark` using the local runner with GCS inputs and outputs. I've already started this in the branch https://github.com/broadinstitute/gatk/compare/dr_fix_gcs_spark_writing, but it's not working yet since the gcs-connector requires some extra authentication-related setup.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3125:145,test,test,145,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3125,1,['test'],['test']
Testability,"As an example, the following test is failing in [`ExampleFeatureWalkerIntegrationTest`](https://github.com/broadinstitute/gatk/blob/master/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleFeatureWalkerIntegrationTest.java):. ```java; ...; @Test; public void testExampleFeatureWalkerWithIntervals() throws IOException {; IntegrationTestSpec testSpec = new IntegrationTestSpec(; "" -R "" + hg19MiniReference +; "" -I "" + TEST_DATA_DIRECTORY + ""reads_data_source_test1.bam"" +; "" -F "" + TEST_DATA_DIRECTORY + ""example_features.bed"" +; "" -L 1 "" +; "" -auxiliaryVariants "" + TEST_DATA_DIRECTORY + ""feature_data_source_test.vcf"" +; "" -O %s"",; Arrays.asList(TEST_OUTPUT_DIRECTORY + ""expected_ExampleFeatureWalkerIntegrationTestWithIntervals_output.txt""); );; testSpec.executeTest(""testExampleIntervalWalker"", this);; }; ```. Where `expected_ExampleFeatureWalkerIntegrationTestWithIntervals_output.txt` is just the first feature from the [`expected_ExampleFeatureWalkerIntegrationTest_output.txt`](https://github.com/broadinstitute/gatk/blob/master/src/test/resources/org/broadinstitute/hellbender/tools/examples/expected_ExampleFeatureWalkerIntegrationTest_output.txt):. ```; Current feature: htsjdk.tribble.bed.FullBEDFeature:1:11-300; 	Overlapping reference bases: NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN. 	Overlapping read at 1:200-275; 	Overlapping read at 1:205-280; 	Overlapping read at 1:210-285. 	Overlapping variant at 1:100-100. Ref: G* Alt(s): [A]; 	Overlapping variant at 1:199-200. Ref: GG* Alt(s): [G]; 	Overlapping variant at 1:200-200. Ref: G* Alt(s): [A]; 	Overlapping variant at 1:203-206. Ref: GGGG* Alt(s): [G]; 	Overlapping variant at 1:280-280. Ref: G* Alt(s): [A]; 	Overlapping variant at 1:284-286. Ref: GGG* Alt(s): [G];",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2310:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2310,7,"['Test', 'test']","['Test', 'test', 'testExampleFeatureWalkerWithIntervals', 'testExampleIntervalWalker', 'testSpec']"
Testability,"As discussed at the GATK Office Hours meeting, the --genotype-germline-sites should no longer be labeled as experimental. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360077847071-Mutect-genotype-germline-sites-status](https://gatk.broadinstitute.org/hc/en-us/community/posts/360077847071-Mutect-genotype-germline-sites-status). \--. If not an error, choose a category for your question(REQUIRED): ; ; e) Will Mutect2's \[--genotype-germline-sites\](/hc/en-us/articles/360037593851-Mutect2#--genotype-germline-sites) be in future releases?. I notice that this flag is still set to `EXPERIMENTAL` in the Mutect2 docs.  Is there a way I can track the status of this feature?  It is important for the functionality of the pipeline I have built (i.e. we want to be able to see all of the germline variants that Mutect wants to call -- doesn't have to perfect per sé, but those calls are important), so we want to ensure it stays in the picture because it seems to be working for our needs (even after a lot of pressure testing).<br><br><i>(created from <a href='https://broadinstitute.zendesk.com/agent/tickets/149087'>Zendesk ticket #149087</a>)<br>gz#149087</i>",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7318:1034,test,testing,1034,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7318,1,['test'],['testing']
Testability,"As discussed briefly on Slack, this would encourage stability of these dependencies and would cut down on Travis build time. (However, we might still want to test the build regularly.). One possible approach would be to use a base yml containing the non-GATK python packages to establish the conda enviroment in the base Docker, and then separately add the lines to pip install the GATK python package for users that might want to use the resulting yml outside of Docker. Note that we may want to clean up dependencies for e.g. VCF processing and perhaps consolidate on a common ML framework at some point in the near future.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6535:158,test,test,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6535,1,['test'],['test']
Testability,"As discussed in #5608 with @nalinigans. . ## Software version. GATK v4.1.0.0-32-g213f99c-SNAPSHOT. ## OS/Platform. ```; $ uname -a; Linux hnpv-fargenCompute01 4.4.0-101-generic #124-Ubuntu SMP Fri Nov 10 18:29:59 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux. $ lsb_release -a; No LSB modules are available.; Distributor ID: Ubuntu; Description: Ubuntu 16.04.3 LTS; Release: 16.04; Codename: xenial; ```. ## Command . ```; TILEDB_DISABLE_FILE_LOCKING=1. gatk --java-options ""-Xmx4g -Xms4g"" GenomicsDBImport \; -V [GVCF file] \; -V [GVCF file] \; --genomicsdb-workspace-path data/genomicsdb/run1 \; --tmp-dir=tmp \; -L [target BED file]; ```. ## CIFS configuration. /etc/fstab:; ```; /[servername]/[mountame] /mnt/[mountname] cifs credentials=/root/.smbcredentials,iocharset=utf8,uid=1004,gid=1005,file_mode=0770,dir_mode=0770,noperm,mfsymlinks 0 0; ```. ## Log. Using GATK wrapper script /mnt/fargen/experiments/joint_call/gatk_27-02-2019_213f99c/gatk/build/install/gatk/bin/gatk; Running:; /mnt/fargen/experiments/joint_call/gatk_27-02-2019_213f99c/gatk/build/install/gatk/bin/gatk GenomicsDBImport -V data/gvcf/FN000009.g.vcf.gz -V old_data/FN000010.g.vcf.gz --genomicsdb-workspace-path data/genomicsdb/run1 --tmp-dir=tmp -L /mnt/fargen/resources/sureselect_human_all_exon_v6_utr_grch38/S07604624_Padded.bed; 12:52:35.654 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/mnt/fargen/experiments/joint_call/gatk_27-02-2019_213f99c/gatk/build/install/gatk/lib/gkl-0.8.6.jar!/com/intel/gkl/native/libgkl_compression.so; 12:52:37.520 INFO GenomicsDBImport - ------------------------------------------------------------; 12:52:37.521 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.1.0.0-32-g213f99c-SNAPSHOT; 12:52:37.521 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 12:52:37.521 INFO GenomicsDBImport - Executing as olavur@hnpv-fargenCompute01.heilsunet.fo on Linux v4.4.0-101-generic amd64; 12:52:37.521 INFO Geno",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5740:851,Log,Log,851,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5740,1,['Log'],['Log']
Testability,"As discussed in GATK office hours, this issue was reported by a user with HaplotypeCaller Spark. The entire stack trace is included below. This request was created from a contribution made by stanedav on August 03, 2020 10:07 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360072104512-HaplotypeCallerSpark-error](https://gatk.broadinstitute.org/hc/en-us/community/posts/360072104512-HaplotypeCallerSpark-error). \--. Hello, I am testing HaplotypeCallerSpark algorithm on my local machine for speeding up the variant calling. I tried to apply algorithm on my BQSR bam but I am getting this error (full log below):. ERROR Executor: Exception in task 15.0 in stage 5.0 (TID 1324) ; ; java.util.ConcurrentModificationException ... (more in log). Version of GATK: 4.1.7.0. Command I used:. $gatk --java-options ""-Xmx48g -Xms32g"" HaplotypeCallerSpark \\ ; ; \-R hg19.fasta \\ ; ; \-I remdup\_recal.bam \\ ; ; \-O output.g.vcf \\ ; ; \-L wes.bed \\ ; ; \-ERC GVCF \\ ; ; \--dont-use-soft-clipped-bases. Full log:. [https://www.dropbox.com/s/iez0zixclsh86zp/hc.log?dl=0](https://www.dropbox.com/s/iez0zixclsh86zp/hc.log?dl=0)<br><br><i>(created from <a href='https://broadinstitute.zendesk.com/agent/tickets/6546'>Zendesk ticket #6546</a>)<br>gz#6546</i>",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6738:452,test,testing,452,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6738,6,"['log', 'test']","['log', 'testing']"
Testability,"As explain in the documentation. for logging GATK is using `org.apache.logging.log4j.Logger`. Nevertheless, because I would like to use GATK4 as a framework, I think that API users could benefit from using [SLF4J](http://www.slf4j.org/) as a plugin system for allow users to decide which system use. Because it exists a wrapper for log4j, I think that this could be done easily without changing any behaviour or configuration. In addition, I believe that the usage of SLF4J is similar as the one used in log4j.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2176:37,log,logging,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2176,3,"['Log', 'log']","['Logger', 'logging']"
Testability,"As of https://github.com/broadinstitute/gatk/pull/1424, `VariantWalker` prefers the sequence dictionary from the driving variants in `getBestAvailableSequenceDictionary()` over other sequence dictionaries, as it should. However, if the driving variants input does not have a declared sequence dictionary, but does have an index file, we end up creating an incomplete sequence dictionary from the index with no contig lengths and using it as the ""best available"" dictionary, even if better dictionaries from the reference or reads are available. This is discussed in https://github.com/broadinstitute/gatk/pull/1424#discussion_r70674157, and is replicated in the test `ExampleVariantWalkerIntegrationTest.testExampleVariantWalker_UndefinedContigLengthsInDictionary`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1999:662,test,test,662,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1999,1,['test'],['test']
Testability,"As part of #8083 we are drastically rewriting the entire Pileup-Caller infrastructure for DRAGEN-GATK. In doing so we have largely neglected its original functionality in Mutect2 and some of the changes (namely the re-factoring of that code to now happen after trimming like in with the GGA code) are going to impact the overall results for pileupcalling. It seems that we never added a real test of this functionality and its unclear to me currently what the meterics are that we want to assure ourselves that its working as intended. In #8083 I have checked that the code is hooked up manually, but its not clear to me what a proper test looks like for mutect without re-hashing the test samples that were being used in the bacterial project. I'm a little skeptical about adding a test that just asserts ""these results were different somehow"" and yet thats essentially the sort of test i would like and that would have saved me here. I would really like to have something better in place, especially if we are going to keep sharing the pileup-calling code between HC and M2 going forward.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8242:392,test,test,392,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8242,6,"['assert', 'test']","['asserts', 'test']"
Testability,As part of #8083 we have added yet another heterogenous way of spitting out detailed debugging logs from yet another part of the HaplotypeCaller (namely in this case a toggle that prints to Stdout). This is in contrast to the existing (mostly assembly region position information) `--verbosity DEBUG` debug arguments and the various debug output stream arguments like `--debug-assembly-region-state`. These debug modes have proliferated and it has become difficult/confusing to know which ones are relevant if you are developing the code. . At some point it might be worth creating some sort of static debug manager class that manages the various specific output streams and saves us from having to pass debugger state to all of the various subclasses/utility methods of the HaplotypeCallerEngine. Importantly using `DEBUG` to stderr is not entirely useful as it jumbles all of the various debugger outputs into one output which quickly becomes large and difficult to read. We must support optionally splitting the output streams by functionality to files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8246:95,log,logs,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8246,1,['log'],['logs']
Testability,"As part of my work in the Pipeline Dev team, I created 2 GATK images to address issue discussed [here](https://github.com/broadinstitute/gatk/issues/8684) (ie. having too many docker layers, we hit ACR limits very quickly). The images are in terrapublic, a premium-tier ACR and is publicly accessible. I made two images, one is squashed to just 1 layer, the other is reduced to just 12 layers (from the original 45). With these changes and the fact that terrapublic is on [premium](https://learn.microsoft.com/en-us/azure/container-registry/container-registry-skus#registry-throughput-and-throttling) tier, the maximum docker pulls per minute becomes 833 (ie. 10k readOps / 12 layers) for the reduced-layers image and 10,000 for the squashed one. We have yet to test these in our pipelines but I anticipate the squashed version to be slower since it won’t be able to take advantage of any parallel pulls or caching, hence the two versions to allow pipeline devs to decide which one is better for their use-case.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8808:762,test,test,762,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8808,1,['test'],['test']
Testability,"As part of the effort to use linked de Bruijn graphs in assembly, we should eliminate the hacks that we use to mitigate the problems with cycles. Eventually this should become the only thing we ever do, but for now let's create a command line option in which we assemble a true de Bruijn graph where each kmer corresponds to exactly one vertex. This ought not to break anything although until we finish the linked de Bruijn epic it will hurt precision a bit. A lot of work for this ticket will be new unit tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5922:506,test,tests,506,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5922,1,['test'],['tests']
Testability,"As reported by @jkobject testing our latest gatk-nightly image, certain non-requester-pays accesses fail with the latest google-cloud-nio version (0.123.23) when `--gcs-project-for-requester-pays` is specified. . The specific issue appears to be checks for the existence of non-existent files in non-requester-pays buckets when `--gcs-project-for-requester-pays` is set, resulting in a ""User project specified in the request is invalid"" error:. ```; code: 400; message: User project specified in the request is invalid.; reason: invalid; location: null; retryable: false; com.google.cloud.storage.StorageException: User project specified in the request is invalid.; 	at com.google.cloud.storage.spi.v1.HttpStorageRpc.translate(HttpStorageRpc.java:233); 	at com.google.cloud.storage.spi.v1.HttpStorageRpc.list(HttpStorageRpc.java:376); 	at com.google.cloud.storage.StorageImpl.lambda$listBlobs$11(StorageImpl.java:391); 	at com.google.api.gax.retrying.DirectRetryingExecutor.submit(DirectRetryingExecutor.java:105); 	at com.google.cloud.RetryHelper.run(RetryHelper.java:76); 	at com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:50); 	at com.google.cloud.storage.Retrying.run(Retrying.java:51); 	at com.google.cloud.storage.StorageImpl.listBlobs(StorageImpl.java:388); 	at com.google.cloud.storage.StorageImpl.list(StorageImpl.java:359); 	at com.google.cloud.storage.contrib.nio.CloudStoragePath.seemsLikeADirectoryAndUsePseudoDirectories(CloudStoragePath.java:118); 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.checkAccess(CloudStorageFileSystemProvider.java:743); 	at java.nio.file.Files.exists(Files.java:2385); 	at htsjdk.tribble.util.ParsingUtils.resourceExists(ParsingUtils.java:418); 	at htsjdk.tribble.TribbleIndexedFeatureReader.loadIndex(TribbleIndexedFeatureReader.java:162); 	at htsjdk.tribble.TribbleIndexedFeatureReader.hasIndex(TribbleIndexedFeatureReader.java:228); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSourc",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7716:25,test,testing,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7716,1,['test'],['testing']
Testability,"As reported by @kachulis and confirmed by @epiercehoffman :. I run PrintReads over and over again, on the same input data, not doing anything, just read in, write out, ie gatk PrintRead -I input.bam -O output.bam. Mostly, I just get an identical 9GB bam over and over again (as confirmed by md5). However, sometimes (~10% of the time it seems), I get a MUCH larger “bam”, more like ~45GB. In runs where I get these larger output files, they are not always the same size, sometimes 45GB, sometimes 47GB (still always with the same input file, same commandline, same wdl task, etc). The runs that produce these larger bam also take much longer, with slower “reads per minute rate). They report exactly the same number of reads processed in the logs as the “normal” runs. Looking inside the large output “bams” with gsutil cat, I see the header suddenly transitioning from compressed looking jibberish to a plaintext header, and then after a bit back to compressed looking jibberish again. Additionally, if I run these large bams through samtools view to get samtools to write them as a bam (ie samtools view big.bam -o samtools_out.bam) the resulting bam is much smaller ~6GB. It kind of seems like sometimes gatk will just stop compressing the output, and then start back up again, seemingly randomly??. I suspect this may be an issue with all gatk tools, I first encountered this recently with PostProcessReadsForRSEM, and then confirmed the behavior in PrintReads as a minimal example. Maybe it’s something to do with google hardware, I’ve only seen this in Terra so far (not that I’ve tried to reproduce it anywhere else).; seeing this in 4.2.6.0. Summary of investigative results:; * reproducible on very small files (at about same rate of ~10%); * appears to be related to intel deflater. when running with jdk deflater (--use-jdk-deflater) all 100/100 runs result in same sized bam. I’ve run a version sweep, and it looks like the behavior begins in 4.2.1.0, but does not occur in earlier version",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8141:742,log,logs,742,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8141,1,['log'],['logs']
Testability,"As reported in https://github.com/broadinstitute/gatk/issues/4133 piped commands that work in Picard, don't work when running with GATK. The immediate culprit is the line:; ```; 15:29:29.595 INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Users/louisb/Workspace/gatk/build/install/gatk/lib/gkl-0.8.2.jar!/com/intel/gkl/native/libgkl_compression.dylib; ```; Which is emitted to stdout in GATK, a similar warning is instead output to STDERR in picard. . There are likely other problematic logging lines.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4135:514,log,logging,514,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4135,1,['log'],['logging']
Testability,"As scientists we must strive to standardize to the most rational units of measurement, including our measurement of the passage of time. That is why we, the GATK authors, would like to announce that we are updating the GATK display time to display the current system time stamped according to the French Revolutionary Calendar. Here is an example of the new logging outputs:. ```; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO NativeLibraryLoader - Loading libgkl_compression.dylib from jar:file:/Users/emeryj/hellbender/gatk/build/libs/gatk-package-4.5.0.0-20-g105b63e-SNAPSHOT-local.jar!/com/intel/gkl/native/libgkl_compression.dylib; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - ------------------------------------------------------------; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - The Genome Analysis Toolkit (GATK) v4.5.0.0-20-g105b63e-SNAPSHOT; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - For support and documentation go to https://software.broadinstitute.org/gatk/; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - Executing as emeryj@wm85b-6ec on Mac OS X v13.2.1 x86_64; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - Java runtime: OpenJDK 64-Bit Server VM v17.0.6+10; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - Start Date/Time: March 29, 2024 at 2:35:42 PM EDT; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - ------------------------------------------------------------; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - ------------------------------------------------------------; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - HTSJDK Version: 4.1.0; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - Picard Version: 3.1.1; Décadi, 10-Germinal-232, 7:74:79, L’outil:Couvoir INFO CountReads - Built for Spark Version: 3.5.0; Décadi, 10-Germinal-232, 7:74:79, L’ou",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8756:358,log,logging,358,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8756,1,['log'],['logging']
Testability,"As stated in the title. I tried the new gatk version 4.2.1.0 to update the GENCODE data for Funcotator. Log:; /home/robby/Tools/NGS/gatk-4.2.1.0/gatk IndexFeatureFile -I /home/robby/Tools/NGS/gencode/hg19/gencode.v38lift37.annotation.REORDERED.gtf; Using GATK jar /home/robby/Tools/NGS/gatk-4.2.1.0/gatk-package-4.2.1.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /home/robby/Tools/NGS/gatk-4.2.1.0/gatk-package-4.2.1.0-local.jar IndexFeatureFile -I /home/robby/Tools/NGS/gencode/hg19/gencode.v38lift37.annotation.REORDERED.gtf; 14:34:51.448 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/robby/Tools/NGS/gatk-4.2.1.0/gatk-package-4.2.1.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Aug 02, 2021 2:34:51 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 14:34:51.566 INFO IndexFeatureFile - ------------------------------------------------------------; 14:34:51.566 INFO IndexFeatureFile - The Genome Analysis Toolkit (GATK) v4.2.1.0; 14:34:51.566 INFO IndexFeatureFile - For support and documentation go to https://software.broadinstitute.org/gatk/; 14:34:51.572 INFO IndexFeatureFile - Initializing engine; 14:34:51.572 INFO IndexFeatureFile - Done initializing engine; 14:34:51.674 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 34) (given: 38): ##description: evidence-based annotation of the human genome (GRCh38), version 38 (Ensembl 104), mapped to GRCh37 with gencode-backmap Continuing, but errors may occur.; 14:34:51.676 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 34) (given: 38): ##description: evidence-based annotation of the human genome (GRCh38), version 38",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7385:104,Log,Log,104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7385,1,['Log'],['Log']
Testability,"As we have finished implementing the updated logic for how variants are interpreted and location inferred by studying local assembly contig alignment signatures, it is time to clean up the corresponding package in the pipeline and make the switch to the updated implementation, which now outputs not only insertion, deletion, small tandem duplication, and inversions, but also novel adjacencies (BND records whose meanings cannot be fully resolved solely from assembly alignment signatures) as well as complex variants that theoretically could be arbitrarily complex (`<CPX>`, as long as we have assembled across the full event). . ## Planed organization. the `discovery` package could be divided roughly now into. ### interface. `SvDiscoveryDataBundle`, `SvDiscoverFromLocalAssemblyContigAlignmentsSpark`, `SvType`, `AnnotatedVariantProducer`. ### alignment prep (sub package). `AlignmentInterval`, `AlignedContig` (refactor `AssemblyContigWithFineTunedAlignments` into `AlignedContig`), `AlignedContigGenerator`, `AlignedAssembly`, `ContigAlignmentsModifier` (refactor `AlnModType` into it), `GappedAlignmentSplitter`, `StrandSwitch`, `FilterLongReadAlignmentsSAMSpark` (factor out the major methods in the new alignment filter by score into a 1st level class). ### type & location inference (sub package). * imprecise: refactor out methods from to-be-deprecated `DiscoverVariantsFromContigAlignmentsSAMSpark`. * alignment classification: `ChimericAlignment` and `NovelAdjacencyReferenceLocations` (very tricky to decouple the functionalities because both have over 50 uses), `AssemblyContigAlignmentSignatureClassifier`, `VariantDetectorFromLocalAssemblyContigAlignments`. * simple: `SimpleSVType`, `SvTypeInference`, `InsDelVariantDetector`, `BreakpointComplications` (rename to `BreakpointComplicationsForSimpleTypes`). * complex: `BreakEndVariantType`, `SuspectedTransLocDetector`, `SimpleStrandSwitchVariantDetector`. ### deprecated. `DiscoverVariantsFromContigAlignmentsSAMSpark` . It currentl",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4111:45,log,logic,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4111,1,['log'],['logic']
Testability,As well as some tests to the test suite.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3254:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3254,2,['test'],"['test', 'tests']"
Testability,Assert that ELBO did not become NaN during each step of inference,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6186:0,Assert,Assert,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6186,1,['Assert'],['Assert']
Testability,AssertionError: The optimization step for ELBO update returned a NaN while running DetermineGermlineContigPloidy,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6573:0,Assert,AssertionError,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6573,1,['Assert'],['AssertionError']
Testability,"At one point the README says:; > [...] large files used to build GATK, and test files required to run the test suite [...]. Does this mean that all production builds should contain large files?; Are they used by some gatk commands?. The README is just not clear about this.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8912:75,test,test,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8912,2,['test'],['test']
Testability,"At some positions (such as 20:10001430 in src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk4.g.vcf) reads with mismatches or indels in the BWA-aligned pileup get realigned during local assembly (where they will get evaluated as variants in the active region). However, the flanking regions adjacent to the active region are evaluated using the original alignments. This can lead to het calls outside the active region that get capped to GQ0 homRef calls. The solution is not entirely trivial since we hard clip reads after we trim the active region and compute the likelihoods used for their realignments based on this clipped sequence. One relatively easy hack that would be a partial improvement would be to omit reads that had been realigned from the pileup in the flanking regions.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5171:46,test,test,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5171,2,['test'],"['test', 'testGVCFMode']"
Testability,"At the moment, all tests share a global Spark context. Once the test context is created, subsequent calls to `getTestSparkContext(Map<String, String> overridingProperties)` or `getSparkContext(...)` return the existing context and `overridingProperties` is ignored. This results in failure of integration tests of tools that need to override certain Spark configs (e.g. to register custom serializers). To make life a bit easier for gatk-protected devs, it is (at least) desirable to take a global set of overriding Spark config key-value pairs from within the gradle build script, and considering them when instantiating the global test Spark context. In particular, I would like to add a few comma-separated extra registrators to `spark.kryo.registrator`. Perhaps this feature is already present?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2337:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2337,4,['test'],"['test', 'tests']"
Testability,Attempt to eliminate lines in vcf with only * as ALT when using SelectVariants (change to SelectVariants). Also includes addition of new tests in SelectVariantsIntegrationTest to ensure this is true over many variations of arguments / assignments.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5129:137,test,tests,137,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5129,1,['test'],['tests']
Testability,"Attempting to get wgs coverage with 10000 bp bin size on; /seq/picard_aggregation/D4491/HCC1143/v1/HCC1143.bam; produces the following stacktrace (see first line for command line). ```; ERROR 14:06:46,283 FunctionEdge - Error: java -Xmx16g -jar /dsde/working/slee/acnv-eval/resources/gatk-protected-536b94e-create-apon.jar SparkGenomeReadCounts -o /dsde/working/aaronc/testing/case/HCC1143/cov/HCC1143-coverage.tsv -I /seq/picard_aggregation/D4491/HCC1143/v1/HCC1143.bam -bins 10000 -R /seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta --sparkMaster local[1] ; ERROR 14:06:46,288 FunctionEdge - Contents of /dsde/working/aaronc/testing/case/HCC1143/cov/HCC1143-coverage.tsv.out:; 16/08/24 14:06:09 INFO MemoryStore: Block broadcast_0_piece0 stored as bytes in memory (estimated size 23.2 KB, free 284.6 KB); 16/08/24 14:06:09 INFO BlockManagerInfo: Added broadcast_0_piece0 in memory on localhost:56998 (size: 23.2 KB, free: 10.4 GB); 16/08/24 14:06:09 INFO SparkContext: Created broadcast 0 from newAPIHadoopFile at ReadsSparkSource.java:105; 16/08/24 14:06:10 INFO FileInputFormat: Total input paths to process : 1; 16/08/24 14:06:21 INFO SparkUI: Stopped Spark web UI at http://10.200.98.30:4040; 16/08/24 14:06:21 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!; 16/08/24 14:06:21 INFO MemoryStore: MemoryStore cleared; 16/08/24 14:06:21 INFO BlockManager: BlockManager stopped; 16/08/24 14:06:21 INFO BlockManagerMaster: BlockManagerMaster stopped; 16/08/24 14:06:21 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!; 16/08/24 14:06:21 INFO SparkContext: Successfully stopped SparkContext; 14:06:21.109 INFO SparkGenomeReadCounts - Shutting down engine; [August 24, 2016 2:06:21 PM EDT] org.broadinstitute.hellbender.tools.genome.SparkGenomeReadCounts done. Elapsed time: 0.36 minutes.; Runtime.totalMemory()=3192389632; java.lang.IndexOutOfBoundsException; at java.nio.ByteBuffer.wrap(ByteBuffer.ja",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2113:369,test,testing,369,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2113,2,['test'],['testing']
Testability,Attempts to fix https://github.com/broadinstitute/gatk/issues/5685. I don't have test data from the users who reported the bug but it seemed like it was likely due to this issue.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5864:81,test,test,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5864,1,['test'],['test']
Testability,Audit tools with tests with suspicious FeatureCache misses,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5895:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5895,1,['test'],['tests']
Testability,Authenticate with dockerhub when running tests on travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7102:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7102,1,['test'],['tests']
Testability,Automate performance testing (including Spark),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1609:21,test,testing,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1609,1,['test'],['testing']
Testability,Automated testing of docker image in travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2697:10,test,testing,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2697,1,['test'],['testing']
Testability,Automatically run cloud tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/656:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/656,1,['test'],['tests']
Testability,Avro test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7192:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7192,1,['test'],['test']
Testability,"Awaiting the Barclay snapshot with broadinstitute/barclay#33, which is ready, but I'll sanity check again in AM before I merge. NOTE: All of the GATK tests have passed locally with this branch. However, I had to make one temporary change because SelectVariants has a feature that clashes with the collection list file feature in https://github.com/broadinstitute/barclay/pull/28. SelectVariants currently has two arguments that are defined as `List<File>`, that are each intended to take a list of file names, each of which in turn contains a list of sample names. SelectVariants manually loads all of the samples from all of the files in the list, and creates a list of unique sample names. With the https://github.com/broadinstitute/barclay/pull/28, the CLP now loads the list directly, and hands SelectVariants a list of sample names rather than the list of file names, which breaks one test. I think both features are working as intended, but collide when a .list file is used. I temporarily renamed the test file to not have a .list extension (so it won't trigger the CLP file loading), but we'll have to decide how to properly reconcile these two features.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2388:150,test,tests,150,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2388,3,['test'],"['test', 'tests']"
Testability,"BImport - Done importing batch 1/1; 06:50:14.221 INFO ProgressMeter - Qrob_Chr02:1 427.5 1 0.0; 06:50:14.229 INFO ProgressMeter - Traversal complete. Processed 1 total batches in 427.5 minutes.; 06:50:14.236 INFO GenomicsDBImport - Import completed!; 06:50:14.236 INFO GenomicsDBImport - Shutting down engine; [January 27, 2019 6:50:14 AM CST] org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport done. Elapsed time: 428.57 minutes.; Runtime.totalMemory()=8988393472; Tool returned:; true; Using GATK jar /home/WangBS/software/GATK/gatk/build/libs/gatk-package-4.0.11.0-56-g2c0e9b0-SNAPSHOT-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx24g -jar /home/WangBS/software/GATK/gatk/build/libs/gatk-package-4.0.11.0-56-g2c0e9b0-SNAPSHOT-local.jar GenotypeGVCFs -R /home/WangBS/Reference/Qrobur/Qrob_PM1N.fa -V gendb:///home/WangBS/Analyses/vcf/test/chr02 -all-sites -O /home/WangBS/Analyses/vcf/test/chr02.vcf; 06:50:19.236 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/WangBS/software/GATK/gatk/build/libs/gatk-package-4.0.11.0-56-g2c0e9b0-SNAPSHOT-local.jar!/com/intel/gkl/native/libgkl_compression.so; 06:51:21.116 INFO GenotypeGVCFs - ------------------------------------------------------------; 06:51:21.116 INFO GenotypeGVCFs - The Genome Analysis Toolkit (GATK) v4.0.11.0-56-g2c0e9b0-SNAPSHOT; 06:51:21.116 INFO GenotypeGVCFs - For support and documentation go to https://software.broadinstitute.org/gatk/; 06:51:21.117 INFO GenotypeGVCFs - Executing as WangBS@cu53 on Linux v3.10.0-693.el7.x86_64 amd64; 06:51:21.117 INFO GenotypeGVCFs - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_131-b12; 06:51:21.117 INFO GenotypeGVCFs - Start Date/Time: January 27, 2019 6:50:19 AM CST; 06:51:21.117 INFO GenotypeGVCFs - ------------------------------------------------------------; 06:51:21.117 INFO GenotypeGVCFs - --------",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5865:4886,test,test,4886,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5865,2,['test'],['test']
Testability,BQSR Spark integration tests use incorrect list of variants,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1017:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1017,1,['test'],['tests']
Testability,BQSR pipeline without saving + fixed tests for BQSR on spark,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1031:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1031,1,['test'],['tests']
Testability,"BQSR tests in spark use a bam file and dbSNP file that are non-corresponding (coming from different chromosomes). . ""CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam"";; ""dbsnp_132.b37.excluding_sites_after_129.chr17_69k_70k.vcf"";. the same tests in non-spark use properly matched bam and vcf file",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1017:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1017,2,['test'],['tests']
Testability,BQSRGatherer and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1543:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1543,1,['test'],['tests']
Testability,Bad sequence dictionaries in gCNV test data,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6957:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6957,1,['test'],['test']
Testability,"Barclay can't currently handle immutable collections in `@Argument` values due to; https://github.com/broadinstitute/gatk/issues/4702. Tests for these arguments are coming in a separate, larger branch, but I; wanted to get the fixes in first since it's such a simple fix.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4703:135,Test,Tests,135,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4703,1,['Test'],['Tests']
Testability,Base 10 logarithms are ugly.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/778:8,log,logarithms,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/778,1,['log'],['logarithms']
Testability,"BaseRecalibrator can take multiple feature files as known sites (the --knownSites argument). But BaseRecalibratorSpark can't and so BQSRPipelineSpark can't and ReadsPipelineSpark can't. Once this is fixed, relevant tests should be reenabled",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1085:215,test,tests,215,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1085,1,['test'],['tests']
Testability,"BaseRecalibrator made to fit the skeleton, including local and cloud tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/812:69,test,tests,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/812,1,['test'],['tests']
Testability,"BaseRecalibratorIntegrationTest ; `{new BQSRTest(GRCh37Ref_chr2021, trickyBam_chr20, dbSNPb37_chr20, ""-indelBQSR "", getResourceDir() + ""expected.CEUTrio.HiSeq.WGS.b37.ch20.4379150-4379157.recal.txt"")},`. the bam file and the vcf file have no overlap which makes this test less useful than it should be",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1843:267,test,test,267,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1843,1,['test'],['test']
Testability,BaseRecalibratorSparkOptimizedIntegrationTest.testBQSRLocal fails once we started doing stringent checks of results. It needs to be fixed. It may have something to do with masking of variants,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1119:46,test,testBQSRLocal,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1119,1,['test'],['testBQSRLocal']
Testability,BaseTest instantiates a GenomeLocParser that uses one of our test references. This causes BaseTest to be unusable by external projects that don't have the file included. We should either package the reference file in the jar or we should remove the GenomeLocParser from BaseTest and instantiate it in the classes that actually use it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2125:61,test,test,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2125,1,['test'],['test']
Testability,"Based on a GATK test run using a locally built htsjdk, the following are prerequisites to upgrading to the next htsjdk release (post-2.19.0):. - https://github.com/broadinstitute/gatk/issues/5839; - Fix CountReads and CountReadsSpark tests. These are failing because they specify `src/test/resources/org/broadinstitute/hellbender/tools/chr7_1_20.interval_list` as an interval argument. Since there is now a tribble codec that handles that extension, the file is treated as a picard interval list and parsed by the codec, but the file is not in picard interval list format.; - A release of Disq upgraded to the new htsjdk version (due to CRAM changes - Container.offset renamed to Container.byteOffset); - Fix failing SortSamSparkIntegration.testSortBAMsSharded tests. Under investigation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5877:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5877,5,['test'],"['test', 'testSortBAMsSharded', 'tests']"
Testability,"Based on the TODO that was in ReadsDataSource.java, I exposed a SamReaderFactory parameter for ReadsDataSource rather than limit it to just validation stringency. Whats the right protocol for adding a test that uses a test file from another package (I'm reaching into the picard test data for a data file for an engine test). Alternatively, is there a better way to test this change ?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/565:201,test,test,201,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/565,5,['test'],['test']
Testability,"Based on timing results (see below), we should do two things:; 	1) Switch to the HTSJDK `ParsingUtils::split` method for all; 	 cases where we split a string using a single character.; 	2) Switch to the `Utils::split` method for all cases where; 	 we split a string by another string of length > 1. A quick stopgap that will reduce splitting time by ~1/2 is to just; replace all calls to Java's `String::split` with `Utils::split` (since; they both take two Strings as arguments, it should be very easy). Also, I have disabled the test so that it doesn't slow down testing cycles. Fixes #3759. | Method | Benchmark | Total Time (ns) | Total Time (ms) | Time Per Split Operation (ns) | Time Per Split Operation (ms) | ; | --- | --- | --- | --- | --- | --- |; | Java String::split | Split on Words | 131867865203 | 131867.865203 | 6048.98464233945 | 0.00604898464233945 |; | Java String::split | Split on Chars | 12917243085 | 12917.243085 | 3004.010019767442 | 0.003004010019767442 |; | HTSJDK ParsingUtils::split | Split on Words | N/A | N/A | N/A | N/A | ; | HTSJDK ParsingUtils::split | Split on Chars | 5882790859 | 5882.790859 | 1368.0908974418605 | 0.0013680908974418606 | ; | GATK Utils::split | Split on Words | 38734463275 | 38734.463275 | 1776.8102419724771 | 0.0017768102419724772 |; | GATK Utils::split | Split on Chars | 7120052467 | 7120.052467 | 1655.826155116279 | 0.0016558261551162792 |",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3776:531,test,test,531,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3776,3,"['Benchmark', 'test']","['Benchmark', 'test', 'testing']"
Testability,Basic testing of mutect2-replicate-validation.wdl still incomplete,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2948:6,test,testing,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2948,1,['test'],['testing']
Testability,"Because the filename doesn't occur at the beginning of a word when you use a logical name:. --arg aname:~/dir1/... the ~ doesn't get expanded by the shell, so the command fails, and the resulting error message is confusing because we call file.getAbsolutePath() on the file object to create the exception, which prepends the current directory onto the (unexpanded, nonexistent) filename (see https://github.com/broadinstitute/gatk/issues/2199). If we can't fix the underlying problem we should try to improve the error message.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2200:77,log,logical,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2200,1,['log'],['logical']
Testability,Beef up tests and delete unused code in GATKVariantContextUtils,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4190:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4190,1,['test'],['tests']
Testability,"Before our cromwell/WDL tests even start to build the docker image, we could run womtool to validate the WDL. This will catch some obvious errors in much less time.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4802:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4802,1,['test'],['tests']
Testability,"Before this change you can run tests only once before gradle decides that the task is ""UP-TO-DATE"". I want to be able to rerun tests multiple times (bonus: guess what I'm testing) and so this caching got in the way. With this change, tasks are always rerunnable. Test it by running this twice:. ```; ./gradlew test --tests *VariantFiltrationIntegrationTest*; ```. @lbergelson can you review?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1719:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1719,6,"['Test', 'test']","['Test', 'test', 'testing', 'tests']"
Testability,"Below are the contents of my reference folder. The index is there, but I don't know why the tool can't recognize it. Please help, thanks!; kh3@rgcaahauva08091 ~/Resources/genome_b37 $> ls -l genome.*; -rw-rw---- 1 kh3 kh3 784809415 Sep 16 10:16 genome.2bit; -rw-rw---- 1 kh3 kh3 3168829906 Feb 4 2014 genome.fa; -rw-r----- 1 kh3 kh3 106669 Sep 16 11:32 genome.fa.amb; -rw-r----- 1 kh3 kh3 3276 Sep 16 11:32 genome.fa.ann; -rw-r----- 1 kh3 kh3 3137454592 Sep 16 11:31 genome.fa.bwt; -rw-rw---- 1 kh3 kh3 2984 Feb 4 2014 genome.fa.fai; -rw-rw---- 1 kh3 kh3 2984 Sep 16 13:18 genome.fai; -rw-r----- 1 kh3 kh3 784363628 Sep 16 11:32 genome.fa.pac; -rw-r----- 1 kh3 kh3 1568727304 Sep 16 11:44 genome.fa.sa. Using GATK wrapper script /home/kh3/Softwares/gatk/build/install/gatk/bin/gatk; Running:; /home/kh3/Softwares/gatk/build/install/gatk/bin/gatk BwaAndMarkDuplicatesPipelineSpark -I /home/kh3/data/Illumina/GATK4/Platinum/TEST/test.spark.bam -R /home/kh3/Resources/genome_b37/ge; nome.2bit --disableSequenceDictionaryValidation true -t 16 -O /home/kh3/data/Illumina/GATK4/Platinum/TEST/test.spark.aligned.bam; 15:47:28.760 INFO IntelGKLUtils - Trying to load Intel GKL library from:; jar:file:/home/kh3/Softwares/gatk/build/install/gatk/lib/gkl-0.1.2.jar!/com/intel/gkl/native/libIntelGKL.so; 15:47:28.809 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; [September 16, 2016 3:47:28 PM EDT] org.broadinstitute.hellbender.tools.spark.pipelines.BwaAndMarkDuplicatesPipelineSpark --threads 16 --output /home/kh3/data/Illumina/GATK4/Platinum/TEST/test.spark; .aligned.bam --reference /home/kh3/Resources/genome_b37/genome.2bit --input /home/kh3/data/Illumina/GATK4/Platinum/TEST/test.spark.bam --disableSequenceDictionaryValidation true --fixedChunkSiz; e 100000 --duplicates_scoring_strategy SUM_OF_BASE_QUALITIES --readValidationStringency SILENT --interval_set_rule UNION --interval_padding 0 --interval_exclusion_padding 0 --bamPartitionSize 0 --shardedO; utput false --numReducers 0 --s",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2171:922,TEST,TEST,922,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2171,2,"['TEST', 'test']","['TEST', 'test']"
Testability,"Below is probably too specific but I am not sure if this is desired (unlikely IMO) or actually another edge-case bug. Summary: `InsertSizeMetics.WIDTH_OF_99_PERCENT` potentially get larger than `InsertSizeMetrics.MAX_INSERT_SIZE - InserSizeMetrics.MIN_INSERT_SIZE`. Details:; Using the non-empty bam file, fragment length values of valid reads (13 reads) are; {36,36,36,38,38,40,41,41,41,41,44,44,45}, with median value 41.; However, the `CollectInsertSizeMetricsTest.java` unit test is yielding 11 as the value for `InsertSizeMetics.WIDTH_OF_99_PERCENT`, which is greater than 10 (that is, max-min+1).; Debugging step-by-step shows that the problem lies in function . `public void InsertSizeMetricsCollector::addMetricsToFile(final MetricsFile<InsertSizeMetrics,Integer>)` . In short, the logic in the implementation for finding the bin widths is to have two variables, `low` and `high`, that starts from `InsertSizeMetics.MEDIAN_INSERT_SIZE` and incremented and decremented by 1 gradually. The actual widths are calculated by `distance = (max - min)+1`.; In this particular edge case, during the last iteration, `max` was increased from the previous iteration to an out of bound value--46 (that is greater than 45, the actual max in the data). The increment and decrement of `low` and `high` are done at the bottom of the `while` block spanning form line 138 to line 162 in the function. This causes the culprit. In hypothetical scenario, when the distribution under investigation is extremely biased (max-median >> median-min, or the other way around), the `WIDTH_OF_99_PERCENT` could end up much higher than max-min. @akiezun @cwhelan please check. If this is not the intended result, fix should be easy.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1519:479,test,test,479,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1519,2,"['log', 'test']","['logic', 'test']"
Testability,Benchmark Disq-enabled GATK Spark tools vs. pre-Disq versions,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5275:0,Benchmark,Benchmark,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5275,1,['Benchmark'],['Benchmark']
Testability,Benchmark ReadsPipelineSpark against running its component Spark tools individually,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3395:0,Benchmark,Benchmark,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3395,1,['Benchmark'],['Benchmark']
Testability,Benchmark ReadsPipelineSpark on queryname sorted BAMs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1559:0,Benchmark,Benchmark,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1559,1,['Benchmark'],['Benchmark']
Testability,"Benchmark alternate JDKs such as OpenJ9, which show promise of an across-the-board 10-20% speedup",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5279:0,Benchmark,Benchmark,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5279,1,['Benchmark'],['Benchmark']
Testability,Benchmark bam conversion vs. reading directly from crams in single-sample pipeline,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5208:0,Benchmark,Benchmark,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5208,1,['Benchmark'],['Benchmark']
Testability,"Benchmark level 2 compression with latest GKL, consider making it the default",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4491:0,Benchmark,Benchmark,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4491,1,['Benchmark'],['Benchmark']
Testability,Bernick Test Commit for Jenkins,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2005:8,Test,Test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2005,2,['Test'],['Test']
Testability,Bigger Permutect tensors and Permutect test datasets can be annotated with truth VCF,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8836:39,test,test,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8836,1,['test'],['test']
Testability,"Both Travis and Github actions are failing all of the conda tests at the moment. [Example Log](https://api.travis-ci.com/v3/job/567253185/log.txt) . There seems to be a problem with the conda environment.; ```; java.lang.RuntimeException: A required Python package (""gcnvkernel"") could not be imported into the Python environment. This tool requires that the GATK Python environment is properly established and activated. Please refer to GATK README.md file for instructions on setting up the GATK Python environment.; ```; ```; java.lang.AssertionError: The installed version of sklearn does not match the 0.23.1 version that was requested. Check the build log to see the actual version that was resolved by conda.; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7800:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7800,5,"['Assert', 'Log', 'log', 'test']","['AssertionError', 'Log', 'log', 'tests']"
Testability,Bug report recieved via email: . I am testing GATK4 walker version. I tried the following command. ./gatk-launch BaseRecalibrator -R human_g1k_v37_decoy.fasta -I NA12878.md.bam -O NA12878.br.table --knownSites 1000G_phase1.indels.b37.vcf **-L Broad.human.exome.b37.interval_list -jdk_inflater=true**. It will fail with the following error message `htsjdk.samtools.SAMFormatException: Invalid GZIP header`. If I run ; ./gatk-launch BaseRecalibrator -R human_g1k_v37_decoy.fasta -I NA12878.md.bam -O NA12878.br.table --knownSites 1000G_phase1.indels.b37.vcf **-L Broad.human.exome.b37.interval_list**. or . ./gatk-launch BaseRecalibrator -R human_g1k_v37_decoy.fasta -I NA12878.md.bam -O NA12878.br.table --knownSites 1000G_phase1.indels.b37.vcf **-jdk_inflater=true**. or . ./gatk-launch BaseRecalibrator -R human_g1k_v37_decoy.fasta -I NA12878.md.bam -O NA12878.br.table --knownSites 1000G_phase1.indels.b37.vcf. all three will run with no problem. However when combined **-L and -jdk_inflater=true** it will fail with error. This problem is on both Intel system and Power system. It feels like an easy fix. Would you please look into that? Thanks!,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2722:38,test,testing,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2722,1,['test'],['testing']
Testability,Build and test on Java 11,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6119:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6119,1,['test'],['test']
Testability,Build test Script to evaluate HaplotypeCallerSpark automatically against default mode,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5396:6,test,test,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5396,1,['test'],['test']
Testability,BuilderOnSpark/4.raw.pp.ec.filter.pass.merged.rmdup-contigs.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/4.raw.pp.ec.filter.pass.merged.rmdup.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/4.raw.pp.fq; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.fastq; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.merged.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.merged.rmdup-contigs.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.ec.filter.pass.merged.rmdup.fa; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/sga/RunSGAViaProcessBuilderOnSpark/9.raw.pp.fq; src/test/resources/org/broadinstitute/hellbender/tools/spark/sv/utils/SVContext.vcf.gz.tbi; src/test/resources/org/broadinstitute/hellbender/tools/splitNCigarReadsSnippet.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.bam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.cram; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.dict; src/test/resources/org/broadinstitute/hellbender/tools/split_reads.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.bam; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.cram; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_missing_lib.dict; src/test/resources/org/broadinstitute/hellbender/tools/split_reads_,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:44264,test,test,44264,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Bump test coverage for SV utils package,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5139:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5139,1,['test'],['test']
Testability,"Bumps [com.google.protobuf:protobuf-java](https://github.com/protocolbuffers/protobuf) from 3.23.4 to 3.25.5.; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/9d0ec0f92b5b5fdeeda11f9dcecc1872ff378014""><code>9d0ec0f</code></a> Updating version.json and repo version numbers to: 25.5</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/4a197e78ad2430e22e992c5a7727b61ae220f727""><code>4a197e7</code></a> Merge pull request <a href=""https://redirect.github.com/protocolbuffers/protobuf/issues/18387"">#18387</a> from protocolbuffers/cp-lp-25</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/b5a7cf7cf4b7e39f6b02205e45afe2104a7faf81""><code>b5a7cf7</code></a> Remove RecursiveGroup test case which doesn't exist in 25.x pre-Editions</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/f000b7e18fd6921ca02ea4b87608e8cadcb7b64f""><code>f000b7e</code></a> Fix merge conflict by adding optional label to proto2 unittest_lite.proto</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/4728531c162f2f9e8c2ca1add713cfee2db6be3b""><code>4728531</code></a> Add recursion check when parsing unknown fields in Java.</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/850fcce9176e2c9070614dab53537760498c926b""><code>850fcce</code></a> Internal change</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/b7044987de77f1dc368fee558636d0b56d7e75e1""><code>b704498</code></a> Internal change</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/e67347986eaf7d777a6ee34367fa99f4912423ab""><code>e673479</code></a> Fix cord handling in DynamicMessage and oneofs. (<a href=""https://redirect.github.com/protocolbuffers/protobuf/issues/18375"">#18375</a>)</li>; <li><a href=""https://github.com/protocolbuffers/protobuf/commit/8a60b6527a976cfd0028153da3ad8e4ed280e0de""><code>8a60b65</code></a> Merge pull request <a href=""https://redirect.github.c",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/9004:775,test,test,775,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/9004,1,['test'],['test']
Testability,Bundle the whole HG19 and HG38 reference in git lfs for tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5111:56,test,tests,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5111,1,['test'],['tests']
Testability,BwaMemIntegrationTest fails on gsa5 and crashes the test suite. . Bwa produces ```[bwt_restore_sa] SA-BWT inconsistency: seq_len is not the same. Abort!``` and then exits which kills the test suite in a gross way. @SHuang-Broad points out that this often indicates that the version of bwa that was used to generate the index has a difference from the version that is used to load the index. It's unclear what's happening here because that same test with the same files passes on travis and on mac.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2451:52,test,test,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2451,3,['test'],['test']
Testability,BwaSpark needs good integration tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2523:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2523,1,['test'],['tests']
Testability,BwaSpark too verbose logging coming from jbwa,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2054:21,log,logging,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2054,1,['log'],['logging']
Testability,CFs/testWrongReferenceBaseBugFix.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/tetraploid-gvcf-1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/tetraploid-gvcf-2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/CombineGVCFs/tetraploid-gvcf-3.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testClusteredSnps.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testDeletions.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilter1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilter2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringDPfromFORMATAndFailMissing.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringDPfromFORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringDPfromINFO.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringZfromFORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilterWithSeparateNames.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters2,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:52363,test,test,52363,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,CI test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5799:3,test,test,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5799,1,['test'],['test']
Testability,CNNPipelineIntegration tests needs expected results validation,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4537:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4537,1,['test'],['tests']
Testability,"CNNVariantScore has a 2d integration test but the vcf and bam inputs have no overlapping genomic territory, so no reads data is ever transmitted to the python code",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4536:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4536,1,['test'],['test']
Testability,CNNVariantScore needs 2d test with overlapping reads,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4536:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4536,1,['test'],['test']
Testability,"CNVCalls - Writing segments VCF file to /srv/scratch/testardqu/CNV_Hyperexome/segments_joint/genotyped-segments-SAMPLE_6.vcf.gz...; 01:48:46.860 INFO PostprocessGermlineCNVCalls - Generating denoised copy ratios...; 01:48:47.487 INFO PostprocessGermlineCNVCalls - Writing denoised copy ratios to /srv/scratch/testardqu/CNV_Hyperexome/ratios_joint/denoised-copy-ratios-SAMPLE_6.tsv...; 01:48:47.773 INFO PostprocessGermlineCNVCalls - PostprocessGermlineCNVCalls complete.; 01:48:47.773 INFO PostprocessGermlineCNVCalls - Shutting down engine; [December 6, 2022 1:48:47 AM GMT] org.broadinstitute.hellbender.tools.copynumber.PostprocessGermlineCNVCalls done. Elapsed time: 123.29 minutes.; Runtime.totalMemory()=7257194496; Using GATK jar /gatk/gatk-package-4.3.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xms4g -Djava.io.tmpdir=/srv/scratch/testardqu/CNV_Hyperexome/tmp/ -jar /gatk/gatk-package-4.3.0.0-local.jar PostprocessGermlineCNVCalls --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_1_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_2_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_3_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_4_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_5_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_6_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_7_of_8-model/ --model-shard-path /srv/scratch/testardqu/CNV_Hyperexome/GermlineCNVCaller/GermlineCNVCaller_8_of_8-model/ --calls-shard-path /srv/scratch/testardqu/CNV_Hyperexome/Germl",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8183:11584,test,testardqu,11584,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8183,1,['test'],['testardqu']
Testability,"CPU usage was high. ```; %CPU WallTime Time Lim RSS mem memlim cpus; hugemem-ex; 105958574 R ds6924 hm82 getpileu 99 07:23:01 16:00:00 1120GB 1120GB 1400GB 37; ```. However, it never proceeds past the first interval. ```; 08:21:42.921 INFO GetPileupSummaries - The Genome Analysis Toolkit (GATK) v4.4.0.0; 08:21:42.921 INFO GetPileupSummaries - Start Date/Time: January 12, 2024 at 8:21:42 AM GMT+10:00; 08:21:42.927 INFO GetPileupSummaries - Initializing engine; 08:55:35.361 INFO IntervalArgumentCollection - Processing 326649654 bp from intervals; 08:57:45.036 INFO GetPileupSummaries - Done initializing engine; 08:57:45.101 INFO ProgressMeter - Starting traversal; 08:57:45.106 INFO ProgressMeter - Current Locus Elapsed Minutes Loci Processed Loci/Minute; (END); ```. There is a memory error in some log files but only after many hours and no intervals processed. ```; 08:34:26.243 INFO ProgressMeter - Starting traversal; 08:34:26.244 INFO ProgressMeter - Current Locus Elapsed Minutes Loci Processed Loci/Minute; 15:35:01.977 INFO GetPileupSummaries - Shutting down engine; [January 12, 2024 at 3:35:02 PM GMT+10:00] org.broadinstitute.hellbender.tools.walkers.contamination.GetPileupSummaries done. Elapsed time: 433.32 minutes.; Runtime.totalMemory()=31136546816; Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8654:806,log,log,806,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8654,1,['log'],['log']
Testability,CRAM Tests for CompareBaseQualities.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1574:5,Test,Tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1574,1,['Test'],['Tests']
Testability,CRAM integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/784:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/784,1,['test'],['tests']
Testability,CRAM test to verify proper stream management with multiple queries on remote files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7066:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7066,1,['test'],['test']
Testability,"CRAMInputFormat doesn't support several of the new features in BAMInputFormat, specifically:; - interval filtering https://github.com/HadoopGenomics/Hadoop-BAM/pull/59; - keep read pairs together (should test queryname sorted CRAM in Hadoop-BAM) https://github.com/HadoopGenomics/Hadoop-BAM/pull/49; - we should also test this issue on CRAM https://github.com/HadoopGenomics/Hadoop-BAM/pull/80",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1777:204,test,test,204,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1777,2,['test'],['test']
Testability,CSTests/expected_VariantWalkerGCSSupportIntegrationTest_vcf_wholefile.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/GenomicsDBIntegration/tiny.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/minimal_bcf_file.bcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/minimal_bed_file.bed.idx; src/test/resources/org/broadinstitute/hellbender/engine/minimal_vcf3_file.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/minimal_vcf4_file.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantDataSource/baseVariants.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantDataSource/interleavedVariants_1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantDataSource/interleavedVariants_1_WithOverlap.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantDataSource/interleavedVariants_2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantDataSource/interleavedVariants_2_WithOverlap.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantDataSource/splitVariants_1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantDataSource/splitVariants_2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/MultiVariantWalkerGroupedOnStart/gvcfExample1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/reads_data_source_test1_with_unmapped.bam.bai; src/test/resources/org/broadinstitute/hellbender/engine/reads_data_source_test3.bam.bai; src/test/resources/org/broadinstitute/hellbender/engine/spark/datasources/ReadsSparkSink/directoryWithNoPartFiles; src/test/resources/org/broadinstitute/hellbender/engine/spark/datasources/ReadsSparkSink/directoryWithNoPartFiles/_SUCCESS; src/test/resources/org/broadinstitute/hellbender/engine/spark/datasources/ReadsSparkSink/fragments_test; src/test/resources/org/broadinstitute/hellbender/engine/spark/datasources/Rea,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:11613,test,test,11613,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"CTTTCTTTCTTTCTTTCTT,CTCTTTCTTTCTTTCTT,CTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTT,TTCTTTCTTTCTTTCTTTCTT,CTTCTTTCTTTCTTTCTTTCTTTCTT,CTTTCTTTCTCTTTCTTTCTTTCTTTCTTTCTT,CTTTCTTTCTTTCTTTCTTTCTTTCTTTCTT,CTTTCTCTTTCTTTCTTTCTTTCTTTCTTTCTT,*,CTTTCTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTT,CTCTT,CTTTCTTTCTCTTTCTTTCTTTCTTTCTTTCTTTCTT,CTTCTTTCTTTCTTTCTT,CTTCTTTCTTTCTTTCTTTCTT,CTTTCTTTCTTTCTTTCTCTTTCTTTCTTTCTTTCTTTCTT,CTTTCTTTCTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTT,CTTTCTTTCTTTCTCTTTCTTTCTTTCTTTCTTTCTT,CTCTTTCTTTCTTTCTTTCCTTCTTTCTTTCTTTCTTTCTT,CTTCTTTCTTTCTTTCTTTCTTTCTTTCTT,CTTTCTTCTTTCTTTCTTTCTTTCTT	174463.40	.	AC=187,86,161,58,27,33,4,150,57,56,18,99,1,14,2,20,87,7,2,8,1,1,1,3,9,2,1,1;AF=0.042,0.019,0.036,0.013,6.054e-03,7.399e-03,8.969e-04,0.034,0.013,0.013,4.036e-03,0.022,2.242e-04,3.139e-03,4.484e-04,4.484e-03,0.020,1.570e-03,4.484e-04,1.794e-03,2.242e-04,2.242e-04,2.242e-04,6.726e-04,2.018e-03,4.484e-04,2.242e-04,2.242e-04;AN=4460;BaseQRankSum=0.358;ClippingRankSum=0.198;DP=46213;ExcessHet=0.0000;FS=6.806;InbreedingCoeff=0.2453;MLEAC=60,92,186,69,34,35,4,159,68,72,16,119,1,16,3,25,119,8,3,10,1,1,1,4,9,3,1,1;MLEAF=0.013,0.021,0.042,0.015,7.623e-03,7.848e-03,8.969e-04,0.036,0.015,0.016,3.587e-03,0.027,2.242e-04,3.587e-03,6.726e-04,5.605e-03,0.027,1.794e-03,6.726e-04,2.242e-03,2.242e-04,2.242e-04,2.242e-04,8.969e-04,2.018e-03,6.726e-04,2.242e-04,2.242e-04;MQ=67.44;MQRankSum=-6.960e-01;QD=26.22;ReadPosRankSum=0.804;SOR=1.593; ```. GATK4 output:; ```; chr5	43198207	.	CTCTTTCTTTCTTTCTTTCTT	CTCTTTCTTTCTT,CTCTTTCTT,CTTTCTTTCTTTCTTTCTTTCTT,CTCTTTCTTTCTTTCTTTCTTTCTT,TTCTTTCTTTCTTTCTTTCTT,*	148098.81	.	AC=341,97,161,163,100,87;AF=0.077,0.022,0.036,0.037,0.022,0.020;AN=4450;BaseQRankSum=0.358;ClippingRankSum=0.198;DP=46213;ExcessHet=0.0000;FS=6.806;InbreedingCoeff=0.2868;MLEAC=86,125,234,200,160,174;MLEAF=0.019,0.028,0.053,0.045,0.036,0.039;MQ=68.92;MQRankSum=-6.960e-01;QD=31.22;ReadPosRankSum=0.804;SOR=1.602; ```. I'm happy to provide more test data if needed and I have the input that generated this site.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2674:2469,test,test,2469,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2674,1,['test'],['test']
Testability,"CTX events have CTX_PP/QQ or CTX_PQ/QP as CPX_TYPE values in GATK-SV VCFs. However, slashes are not allowed as part of enum values, so these are represented in the ComplexVariantSubtype enum as CTX_PP_QQ and CTX_PQ_QP. This caused the CTX subtypes to not be recognized and to be dropped during SVConcordance (https://github.com/broadinstitute/gatk-sv/issues/664). This representation may merit further discussion, as it's not ideal that the ComplexVariantSubtype values are not a 1:1 match with the VCF values. But as one possible solution without altering the VCF, I've implemented a workaround that replaces the slash with an underscore during getComplexSubtype. I've also updated SVAnnotate to use this method, in the hopes that we can use it across all of the SV tools for more consistent behavior. I added a unit test for getComplexSubtype with one regular CPX_TYPE, one CTX subtype, and one non-CPX event. The test suites for SVCallRecord, SVCallRecordUtils, SVAnnotate, and SVConcordance all ran successfully on my branch.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8885:818,test,test,818,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8885,2,['test'],['test']
Testability,CalculateGenotypePostiors minor updates to javadoc and logger type,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5601:55,log,logger,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5601,1,['log'],['logger']
Testability,CallSetSampleOrdering/badlySorted1000-batch-size13.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/flag_stat.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/flag_stat.fasta; src/test/resources/org/broadinstitute/hellbender/tools/genome/HCC1143_chr22_27M_37M.tiny.bam; src/test/resources/org/broadinstitute/hellbender/tools/genome/HCC1143_chr22_27M_37M.tiny.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/genome/HCC1143_chr3_1K_11K.tiny.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting1.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting2.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.3.8-4-g7b0250253f.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.alleleSpecific.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.alleleSpecific.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/pretendTobeTetraPloidTetraAllelicSite.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.empty.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.noSG.table.gz; src/test/resource,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:37124,test,test,37124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Caller - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 10:56:25.354 INFO GermlineCNVCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 10:56:25.355 INFO GermlineCNVCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 10:56:25.356 INFO GermlineCNVCaller - Deflater: IntelDeflater; 10:56:25.357 INFO GermlineCNVCaller - Inflater: IntelInflater; 10:56:25.358 INFO GermlineCNVCaller - GCS max retries/reopens: 20; 10:56:25.358 INFO GermlineCNVCaller - Using google-cloud-java patch 6d11bef1c81f885c26b2b56c8616b7a705171e4f from https://github.com/droazen/google-cloud-java/tree/dr_all_nio_fixes; 10:56:25.360 WARN GermlineCNVCaller -. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!. Warning: GermlineCNVCaller is a BETA tool and is not yet ready for use in production. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!. 10:56:25.361 INFO GermlineCNVCaller - Initializing engine; 10:56:54.347 INFO GermlineCNVCaller - Done initializing engine; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 10:56:55.287 INFO GermlineCNVCaller - Retrieving intervals from first read-count file (hdf5/grexome0426.hdf5)...; 10:56:55.384 INFO GermlineCNVCaller - No GC-content annotations for intervals found; explicit GC-bias correction will not be performed...; 10:56:55.482 INFO GermlineCNVCaller - Running the tool in the COHORT mode...; 10:56:55.485 INFO GermlineCNVCaller - Validating and aggregating data from input read-count files...; 10:56:55.511 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0426.hdf5 (1 / 387); 10:56:55.812 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0342.hdf5 (2 / 387); 10:56:56.274 INFO GermlineCNVCaller - Aggregating read-count file hdf5/grexome0316.hdf5 (3 / 387); 10:56:56.635 INFO GermlineCNVCaller - ,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5053:2902,log,logger,2902,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5053,1,['log'],['logger']
Testability,Can handle .tsv and .tsv.gz input and output files. ; In theory NIO ready. ; @Header lines are preserved.; No test added so far but you should be able to test it out on a given file(s) or bucket url(s) like so:. `./gatk CondenseReadCounts --input input.100bp.tsv -O output.1000bp.tsv.gz -f 10 --out-bin-length 1000`. The last argument ```--out-bin-length 1000``` is optional and make sure that only those bins with exactly 1000 bases are output.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5707:110,test,test,110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5707,2,['test'],['test']
Testability,Cannot read indices on BGZF files created by IndexFeatureFile when they are written using the default .tbi extension. see discussion in https://github.com/broadinstitute/gatk/pull/985; See the disabled test `IndexFeatureFileIntegrationTest.testVCFGZIndex_inferredName`,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1187:202,test,test,202,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1187,1,['test'],['test']
Testability,Capture excessive log output regressions in the test suite,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7368:18,log,log,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7368,2,"['log', 'test']","['log', 'test']"
Testability,"Census_Table_1_full_2012-03-15.txt -> file:///home/shiyang/softwares/funcotator_dataSources/funcotator_dataSources.v1.7.20200521s/cancer_gene_census/hg19/CancerGeneCensus_Table_1_full_2012-03-15.txt; 15:41:51.073 INFO DataSourceUtils - Resolved data source file path: file:///home/shiyang/softwares/gatk-4.1.8.1/Cosmic.db -> file:///home/shiyang/softwares/funcotator_dataSources/funcotator_dataSources.v1.7.20200521s/cosmic/hg19/Cosmic.db; 15:41:51.190 INFO DataSourceUtils - Resolved data source file path: file:///home/shiyang/softwares/gatk-4.1.8.1/gencode.v34lift37.annotation.REORDERED.gtf -> file:///home/shiyang/softwares/funcotator_dataSources/funcotator_dataSources.v1.7.20200521s/gencode/hg19/gencode.v34lift37.annotation.REORDERED.gtf; 15:41:51.190 INFO DataSourceUtils - Setting lookahead cache for data source: Gencode : 100000; 15:41:51.191 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100), mapped to GRCh37 with gencode-backmap Continuing, but errors may occur.; 15:41:51.192 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100), mapped to GRCh37 with gencode-backmap Continuing, but errors may occur.; 15:41:51.192 INFO FeatureManager - Using codec GencodeGtfCodec to read file file:///home/shiyang/softwares/funcotator_dataSources/funcotator_dataSources.v1.7.20200521s/gencode/hg19/gencode.v34lift37.annotation.REORDERED.gtf; 15:41:51.193 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100), mapped to GRCh37 with gencode-backmap Continuing, but errors may occur.; 15:4",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6758:17854,test,tested,17854,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6758,1,['test'],['tested']
Testability,"CentOS Linux release 7.8.2003 (Core); JAVA: openjdk/14.0.1; GATK: 4.1.8.1. ---. I was running this following command:. intervals=$(echo ""$(seq 1 22) X Y"" | tr "" "" ""\n"" | sed 's/^/-L /' | xargs); ref_fasta=""/data1/GenomicDatabases/Human/GATK/b37/human_g1k_v37_decoy.fasta""; gvcfs=$(find hapcall -maxdepth 1 -name ""*_hapcall.g.vcf.gz"" -type f | xargs ls | sed 's/^/-V /' | xargs); /data1/software/gatk/4.1.8.1/gatk --java-options ""-XX:ParallelGCThreads=30 -Xms100g -Xmx100g -Djava.io.tmpdir=tmp"" CombineGVCFs -R ${ref_fasta} -O combine/human_combine.g.vcf.gz ${gvcfs} ${intervals} -G StandardAnnotation -G AS_StandardAnnotation --create-output-variant-index true > combine/human_combine.log 2>&1. ---. Here the log:; [human_combine.log](https://github.com/broadinstitute/gatk/files/5165640/human_combine.log). 09:10:26.647 INFO IntervalArgumentCollection - Processing 3095677412 bp from intervals; 09:10:26.694 INFO CombineGVCFs - Done initializing engine; 09:10:26.713 INFO ProgressMeter - Starting traversal; 09:10:26.714 INFO ProgressMeter - Current Locus Elapsed Minutes Variants Processed Variants/Minute; 09:10:30.685 WARN ReferenceConfidenceVariantContextMerger - Detected invalid annotations: When trying to merge variant contexts at location 1:13021 the annotation MLEAC=[1, 0] was not a numerical value and was ignored; 09:10:39.543 INFO ProgressMeter - 1:232994 0.2 1000 4676.9; 09:10:51.253 INFO ProgressMeter - 1:688469 0.4 2000 4890.4; 09:11:01.889 INFO ProgressMeter - 1:809005 0.6 3000 5117.3; 09:11:13.838 INFO ProgressMeter - 1:818424 0.8 5000 6366.2; 09:11:16.811 INFO CombineGVCFs - Shutting down engine; [September 3, 2020 at 9:11:16 AM CST] org.broadinstitute.hellbender.tools.walkers.CombineGVCFs done. Elapsed time: 1.20 minutes.; Runtime.totalMemory()=107374182400; java.lang.NullPointerException; 	at org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific.StrandBiasUtils.encode(StrandBiasUtils.java:52); 	at java.base/java.util.stream.ReferencePipeline$3$1.accep",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6790:685,log,log,685,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6790,4,['log'],['log']
Testability,Change extract so that when we filter at the genotype level (with FT) the VCF header has the filter definition in the comment/unstructured fields of the VCF Header.; Also minor renaming of ExtractCohort argument. Passing Integration Test (all chromosomes) [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/8e240d47-a75e-46b6-88f4-e95e7c1cf4e8); Passing Integration Test (chr20 and friends) [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/17ce6f1d-932d-4f4f-a2c8-f5f044bb1a67),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8773:233,Test,Test,233,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8773,2,['Test'],['Test']
Testability,Change large test files from PR 8741 to lfs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8769:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8769,1,['test'],['test']
Testability,Change root logging level to INFO,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/328:12,log,logging,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/328,1,['log'],['logging']
Testability,Change tests to not clobber GCS files being used by other tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3810:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3810,2,['test'],['tests']
Testability,Change travis WDL test jobs to always retain the cromwell logs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5098:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5098,2,"['log', 'test']","['logs', 'test']"
Testability,Changed SelectVariants so that it can handle multiple rsIDs separated by ';' in a VCF file.; The corresponding entry gets removed if any of those rsIDs has been set by the user to be deleted.; I also changed testExcludeSelectionIDFromFile() in SelectVariantsIntegrationTest to check this case.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5464:208,test,testExcludeSelectionIDFromFile,208,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5464,1,['test'],['testExcludeSelectionIDFromFile']
Testability,Changed exact-match tests for ModelSegments to allow for numerical differences due to Java version.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8111:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8111,1,['test'],['tests']
Testability,Changed logging output to stderr,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4167:8,log,logging,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4167,1,['log'],['logging']
Testability,Changed the build_docker.sh to run git LFS dependent tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3323:53,test,tests,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3323,1,['test'],['tests']
Testability,"Changes to enable multi-threaded native AVX PairHMM using OpenMP. Also includes a performance improvement in the native C++ `Context` class. `VectorLoglessPairHMM.java` is hardcoded to set the maximum number of PairHMM threads (`maxNumberOfThreads`) to 100. This is the maximum number of threads **allowed** by GATK, not the number of threads **requested**. C code in the native library will query OpenMP for the number of threads available on the platform, and use min(OpenMP threads available, `maxNumberOfThreads`) threads. **Measured Speedup**; Command. ```; ./gatk-launch HaplotypeCaller -R src/test/resources/large/human_g1k_v37.20.21.fasta -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -O out.g.vcf -ERC GVCF; ```. 1 thread; INFO PairHMM - Total compute time in PairHMM computeLogLikelihoods() : 36.882098080000006; 2 threads; INFO PairHMM - Total compute time in PairHMM computeLogLikelihoods() : 18.160468659000003; 3 threads; INFO PairHMM - Total compute time in PairHMM computeLogLikelihoods() : 12.541517043; 4 threads; INFO PairHMM - Total compute time in PairHMM computeLogLikelihoods() : 9.727374342000001. **Potential issues**; - The target platform running GATK must have OpenMP installed; - The code has not been tested on Mac. **Todo**; - New Java code to allow the user to specify `maxNumberOfThreads` variable in `VectorLoglessPairHMM.java`.; - Move `maxNumberOfThreads` to the native `initialize` function, once we migrate to the new native library.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1813:600,test,test,600,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1813,3,['test'],"['test', 'tested']"
Testability,"Changes to the testing framework to remove references to the test resources, keeping them into the src/test package. This changes include:. * Factor out a `GATKBaseTest` for separate test resources from test utilities in `BaseTest`; * Remove duplicated `CleanSamIntegrationTest`; * Repackage `CommandLineProgramTest` to be in the test sources, and use it's interface in testers; * Move some testers to the src/test package because they are tool-specific (added TODO to other ones that aren't that clear); * Refactor `TargetsToolsTestUtils` to use a provided reference. Closes #3029; Closes #2125",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3475:15,test,testing,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3475,9,['test'],"['test', 'testers', 'testing']"
Testability,Changing Funcotator large test boolean back to false where it belongs.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5521:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5521,1,['test'],['test']
Testability,Check in an ADAM Parquet file for testing purposes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/896:34,test,testing,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/896,1,['test'],['testing']
Testability,Check in an example sharded BAM for testing purposes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/895:36,test,testing,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/895,1,['test'],['testing']
Testability,"Checked all the CRAM test files to make sure they're actually CRAM format; two of these files are not valid but are unused, and one was a BAM file masquerading as a CRAM file that I think was made with Picard.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1368:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1368,1,['test'],['test']
Testability,Cherry pick of commits to fix GATK tests from master,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7183:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7183,1,['test'],['tests']
Testability,Clarified testing and code review policy,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/837:10,test,testing,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/837,1,['test'],['testing']
Testability,Clean untracket test files,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4217:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4217,1,['test'],['test']
Testability,Cleanup unused test files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,ClientInput.java:72); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.util.Swapper.swap(Swapper.java:38); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.Bui,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2802:11752,Log,LogToClient,11752,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2802,1,['Log'],['LogToClient']
Testability,ClientInput.java:72); 22:05:55.980 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.util.Swapper.swap(Swapper.java:38); 22:05:55.980 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72); 22:05:55.981 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 22:05:55.982 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120); 22:05:55.983 [ERROR] [org.gradle.internal.buildevents.Bui,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4687:10494,Log,LogToClient,10494,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4687,1,['Log'],['LogToClient']
Testability,ClipReads CRAM tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1573:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1573,1,['test'],['tests']
Testability,ClipReads needs CRAM test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1228:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1228,1,['test'],['test']
Testability,ClipReads plus integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/160:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/160,1,['test'],['tests']
Testability,"Closes #4188. @sooheelee This wraps up the wish list in #4188. @takutosato Although funcotator is off in the Travis test, I *did* test it locally. Also, I have tested with and without compressed vcf output. The funcotator command is simply copied from @jonn-smith's funcotator.wdl. Subworkflows are a pain in Firecloud, which is why I don't `import` it.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4271:116,test,test,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4271,3,['test'],"['test', 'tested']"
Testability,Closes #4285. @LeeTL1220 Here you go. Note the additional changes besides those mentioned in #4285. I'm going to head out before finding out whether tests pass. If they fail I will try to address tonight.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4297:149,test,tests,149,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4297,1,['test'],['tests']
Testability,Closes #4550 . @jonn-smith You seem to be the godfather of this ticket. All the integration test files changed are just the consequence of renaming; the only substance is the changes to ArgumentsBuilder.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6474:92,test,test,92,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6474,1,['test'],['test']
Testability,"Closes #4596. @TedBrookings Could you review this PR for an issue we saw earlier today, once tests pass?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4639:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4639,1,['test'],['tests']
Testability,"Closes #4782 ; Closes #5959. We should discuss a few issues, and modify/cleanup if necessary, before this goes in (if it does at all). In particular, I'd like to understand the original intent behind using the /root directory (e.g., in all of our WDLs) and make sure we don't break typical downstream uses by instead using /gatk; we could even consider ""deprecating"" this over a few releases. I think it's also worth discussing whether we want to continue to release a rootful image, but perhaps parameterize the Docker build script to easily allow the building of an image with a non-root user. I must admit that I don't have good visibility on the various use cases of our Dockers (outside of our typical use with Terra/Cromwell), so if any users would like to chime in, that would certainly be appreciated. In particular, users may still have to do some work on their end to remap user namespaces. In any case, this is at least a proof-of-principle that mounting resources is possible within our test framework with the option for a non-root user. So unless we have other good reasons for requiring a root user, it seems worthwhile to at least allow this option, even if we don't make that the new default. (EDIT: Just to clarify, at some point I was told by another developer that the need to mount testing resources within Travis was at least one reason why we needed a root user---turns out this isn't the case.)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6525:999,test,test,999,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6525,2,['test'],"['test', 'testing']"
Testability,"Closes #4824 (at least for underflow of overdispersion); Closes #6226 ; Closes #6227. Along with some other minor fixes. I've done some manual testing and this change is most likely harmless, but ideally we'd have some better automated testing to cover this sort of minor model change... Extremely conscientious users might want to rebuild models just to be safe, which we can mention in the release notes.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6245:143,test,testing,143,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6245,2,['test'],['testing']
Testability,"Closes #4867. @takutosato Here it is. I'm not quite ready to make it the M2 default, but it looks really good. @meganshand I have tested it on every mixture in your workspace and results look very similar to the previous hand-tuned pruning results. I'm hoping it's good enough to become best practices for mitochondria and would appreciate if you gave it a shot. You have the right to review if you wish but there's no pressure to do so. @ldgauthier HaplotypeCaller might also benefit from this. In particular, I wonder about #3697. I'll test it out.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5473:130,test,tested,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5473,2,['test'],"['test', 'tested']"
Testability,"Closes #4893. Closes #5086. Closes #5684. Closes #4500. Makes #4933, #4958, and #5085 possible. @takutosato Failing tests are superficial. You can begin reviewing. . This is a big PR:. * Refactor of all M2 filtering. Each filter has its own class, and the filtering engine ties it all together.; * Learn allele fraction clustering and somatic SNV and indel priors.; * More probabilistic filters.; * All filters have a common probabilistic threshold.; * M2 determines threshold automatically.; * Rewrite of all M2 documentation.; * Several filters, including strand bias and normal artifact, learn their own parameters. @LeeTL1220 M2 validations look really, really good. @meganshand Once this goes in mitochondria best practices will need to be tweaked again. We can merge the dangling tails homoplasmic fix before merging this.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5688:116,test,tests,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5688,1,['test'],['tests']
Testability,"Closes #5217. @vruano, I've verified that cohort and scattered-case mode WDLs run correctly on FC (to be precise, I tested the WDLs from my sl_filter branch rebased on this branch, but this branch alone should be fine as well). However, #4397 should still be addressed at some point in the future. This can wait until we have v1 of the FC evaluation in place.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5225:116,test,tested,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5225,1,['test'],['tested']
Testability,"Closes #5885. @ldgauthier Fortunately the change in output is tiny, as you can see in the changed integration test VCFs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6401:110,test,test,110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6401,1,['test'],['test']
Testability,"Closes #6220 . Fixed homRef GTs with PGTs. Clarified PGT definition. I intended to use the word ""local"" in the way that @lbergelson has been implementing the ""local alleles"" representation. Tests will probably need fixing, but I'm going to let Travis run them for me.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6432:190,Test,Tests,190,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6432,1,['Test'],['Tests']
Testability,Closes #6490 . @jamesemery can you review this once tests pass?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6498:52,test,tests,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6498,1,['test'],['tests']
Testability,"Closes #7884. The bug was caused by two position-only checks that should have been contig+position checks. I added a minimal regression test that uses a 2-record snippet of the test data discussed in the first post of the issue. Also discussed there is expected behavior that this fix does not induce. It seems the expectation is that a QUAL = 0 variant block should be turned into a GQ0 reference block. However, I wonder if this is not actually representative of the current (pre-fix) behavior of the tool. For example, if the test data is run only over chr13 using master, the position is not dropped (since then the position-only checks are valid). In that case, we do not see a GQ0 reference block; we instead see a GQ40 reference block, since the original record had GQ61. With the fix, we reproduce this reference block. So although we do not induce the expected GQ0 behavior, I would say the bug is fixed. Whether or not we should issue an additional fix to induce the expected GQ0 behavior is another question entirely. I'm not completely sure what the expected behavior should be from the tool or code documentation alone. Someone more familiar with this tool (@droazen perhaps you can suggest?) may have to chime in. They should probably also check that the contig+position checks are all that need to be added to address the original bug; I'm not 100% sure about behavior there either, but at least all other integration tests seem to still pass.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8028:136,test,test,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8028,4,['test'],"['test', 'tests']"
Testability,"Cloud tests are failing due to ""Error while looking up reference set EOSsjdnTicvzwAE"".",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4163:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4163,1,['test'],['tests']
Testability,Cloud tests for CompareReferences and CheckReferenceCompatibility tools,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7973:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7973,1,['test'],['tests']
Testability,"Cloud tests on Travis run against Google dataflow. This could, in principle, be accomplished for Spark using Amazon EMR. There may be version compatibility issues.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/885:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/885,1,['test'],['tests']
Testability,"Code refactoring for better testability as part of the spanning deletions work that is being shelved. . **Refactoring Changes**; One of the challenges with this PR was testing as the work is really done in the lower-level methods and it would be nice to have this as a unit test rather than an integration/end-to-end test. This motivated the following changes:. - don't write to VCF directly, instead have take a Consumer to emit VariantContexts. This lets us provide a different consumer in unit tests to collect our result.; - we previously had a chain of calls createVariantsFromSortedRanges -> processSampleRecordsForLocation -> finalizeCurrentVariant that returned void and as a side effect wrote to VCF. These deeper methods now return a VariantContext and the writing (via consumer) is done higher up in the call stack; - made some private methods package-private so we could call them from tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7946:28,test,testability,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7946,6,['test'],"['test', 'testability', 'testing', 'tests']"
Testability,Codecov indicates that this new method is not covered by tests -- needs a test in IOUtilsUnitTes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7956:57,test,tests,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7956,2,['test'],"['test', 'tests']"
Testability,"Codecov seems to be including test files in its coverage calculation, which is probably not ideal because obviously there are no tests for our tests. This change should exclude them.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8744:30,test,test,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8744,3,['test'],"['test', 'tests']"
Testability,CollectBaseDistributionByCycle in Spark + tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1013:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1013,1,['test'],['tests']
Testability,CollectJumpingLibraryMetrics needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1216:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1216,1,['test'],['tests']
Testability,"CollectPerBaseCounts falls under the umbrella of allelic analysis along; with CollectAllelicCounts. The important differences between these tools; are that CollectPerBaseCounts reports the counts of all nucleotides {A,; C, G, T, N} and only reports a maximum of one count per template.; CollectAllelicCounts, on the other hand, reports only the two most; commons nucleotides and counts bases from both reads of the same; fragment. The overall implementation and testing is very similar to; CollectAllelicCounts.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6543:462,test,testing,462,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6543,1,['test'],['testing']
Testability,CollectQualityYieldMetrics in Spark and tests for it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1010:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1010,1,['test'],['tests']
Testability,CollectRnaSeqMetricsTest needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1217:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1217,1,['test'],['tests']
Testability,CollectRrbsMetricsTest needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1218:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1218,1,['test'],['tests']
Testability,CollectSequencingArtifactMetrics needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1219:44,test,tests,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1219,1,['test'],['tests']
Testability,CollectTargetedPcrMetrics needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1220:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1220,1,['test'],['tests']
Testability,CollectWgsMetrics needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1221:29,test,tests,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1221,1,['test'],['tests']
Testability,"Coming from https://gatkforums.broadinstitute.org/gatk/discussion/9358/gatk-runtime-error-read-max-length-must-be-0-but-got-0-with-1000g-bam#latest. There seems to be a bug somewhere in the implementation of pair hmm, which multiple users have run into. The most recent user reported running Mutect2 on two different machines with the same inputs, and same versions of GATK. One run was successful, while the other failed with ; ``` ; java.lang.IllegalArgumentException: readMaxLength must be > 0 but got 0; 	at org.broadinstitute.hellbender.utils.Utils.validateArg(Utils.java:730); 	at org.broadinstitute.hellbender.utils.pairhmm.PairHMM.initialize(PairHMM.java:152); 	at org.broadinstitute.hellbender.utils.pairhmm.N2MemoryPairHMM.initialize(N2MemoryPairHMM.java:28); 	at org.broadinstitute.hellbender.utils.pairhmm.LoglessPairHMM.initialize(LoglessPairHMM.java:7); 	at org.broadinstitute.hellbender.utils.pairhmm.PairHMM.initialize(PairHMM.java:177); 	at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.PairHMMLikelihoodCalculationEngine.initializePairHMM(PairHMMLikelihoodCalculationEngine.java:242); 	at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.PairHMMLikelihoodCalculationEngine.computeReadLikelihoods(PairHMMLikelihoodCalculationEngine.java:177); 	at org.broadinstitute.hellbender.tools.walkers.mutect.Mutect2Engine.callRegion(Mutect2Engine.java:207); 	at org.broadinstitute.hellbender.tools.walkers.mutect.Mutect2.apply(Mutect2.java:212); 	at org.broadinstitute.hellbender.engine.AssemblyRegionWalker.processReadShard(AssemblyRegionWalker.java:291); 	at org.broadinstitute.hellbender.engine.AssemblyRegionWalker.traverse(AssemblyRegionWalker.java:267); 	at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:979); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:137); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:182); 	at org.broadins",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5543:818,Log,LoglessPairHMM,818,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5543,2,['Log'],['LoglessPairHMM']
Testability,Command line from a gatk-protected jar file:. ```; /dsde/working/lichtens/wgs$ gatk-protected/gatk-launch Pileup -R /seq/references/Homo_sapiens_assembly19/v1/Homo_sapiens_assembly19.fasta \; -I /seq/picard_aggregation/G23062/TCGA-BA-4077-01B-01D-2268-08/current/TCGA-BA-4077-01B-01D-2268-08.bam \; -L gatk_intervals_allchr.1kg.phase3.v5a.snp.maf10.biallelic.recode.fixed.prune5.interval_list \; -O test.txt; ```. Uses `'org.broadinstitute:gatk:4.alpha.1-104-g213595d-20160606.150121-2'`,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1920:399,test,test,399,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1920,1,['test'],['test']
Testability,"Command:; `java -Djava.io.tmpdir=/work/TMP \ ; -Xmx40g -jar ~/bin/gatk-4.0.8.1/gatk-package-4.0.8.1-local.jar \ ; GenomicsDBImport \ ; -V /work/Analysis/III_3P_RG_DupMark.raw.snps.indels.g.vcf \ ; -V /work/Analysis/IV_11N_RG_DupMark.raw.snps.indels.g.vcf \; -V /work/Analysis/IV_8N_RG_DupMark.raw.snps.indels.g.vcf \; -V /work/Analysis/IV_10P_RG_DupMark.raw.snps.indels.g.vcf \; -V /work/Analysis/IV_20P_RG_DupMark.raw.snps.indels.g.vcf \; --genomicsdb-workspace-path /work/Analysis/wang_chr19_re \; --intervals chr19`. **Error Log**. 15:00:35.770 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/wang/bin/gatk-4.0.8.1/gatk-package-4.0.8.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; 15:00:35.944 INFO GenomicsDBImport - ------------------------------------------------------------; 15:00:35.944 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.0.8.1; 15:00:35.945 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 15:00:35.945 INFO GenomicsDBImport - Executing as wang@Ubuntu1604 on Linux v3.16.0-43-generic amd64; 15:00:35.945 INFO GenomicsDBImport - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_171-8u171-b11-2~14.04-b11; 15:00:35.945 INFO GenomicsDBImport - Start Date/Time: October 2, 2018 3:00:35 PM JST; 15:00:35.945 INFO GenomicsDBImport - ------------------------------------------------------------; 15:00:35.945 INFO GenomicsDBImport - ------------------------------------------------------------; 15:00:35.946 INFO GenomicsDBImport - HTSJDK Version: 2.16.0; 15:00:35.946 INFO GenomicsDBImport - Picard Version: 2.18.7; 15:00:35.946 INFO GenomicsDBImport - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 15:00:35.946 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 15:00:35.946 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 15:00:35.946 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 15:00:35.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5342:528,Log,Log,528,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5342,1,['Log'],['Log']
Testability,"CommandLineProgram should include only functionality common to all command-line programs, such as argument parsing and logging. Functionality specific to particular file formats should be moved into a subclass (PicardCommandLineProgram?).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/83:119,log,logging,119,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/83,1,['log'],['logging']
Testability,CommandLineProgram.instanceMain(CommandLineProgram.java:210); 	at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:162); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:148); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:189); 	at org.broadinstitute.hellbender.CommandLineProgramTest.runCommandLine(CommandLineProgramTest.java:27); 	at org.broadinstitute.hellbender.tools.spark.pipelines.ReadsPipelineSparkIntegrationTest.testReadsPipelineSpark(ReadsPipelineSparkIntegrationTest.java:125); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.grad,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5680:8269,test,testng,8269,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5680,1,['test'],['testng']
Testability,CommandLineProgramTester.runCommandLine(CommandLineProgramTester.java:92); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.writeToGenomicsDB(GenomicsDBImportIntegrationTest.java:180); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testCommandIncludedInOutputHeader(GenomicsDBImportIntegrationTest.java:422); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: com.intel.genomicsdb.Genom,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4062:2032,Test,TestMethodWorker,2032,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4062,1,['Test'],['TestMethodWorker']
Testability,"Commit 558160ea5bfde8be3b6e4bdd5283c529fb905fca, which upgrades gkl to 0.3.1 fails on PowerPC. The reason is in gkl-0.3.1, the following code block in IntelGKLUtils.java:. try {; // try to extract from classpath; String resourcePath = ""native/"" + System.mapLibraryName(libFileName);; URL inputUrl = IntelGKLUtils.class.getResource(resourcePath);; if (inputUrl == null) {; logger.warn(""Unable to find Intel GKL library: "" + resourcePath);; return false;; }. logger.info(String.format(""Trying to load Intel GKL library from:\n\t%s"", inputUrl.toString()));. File temp = File.createTempFile(FilenameUtils.getBaseName(resourcePath),; ""."" + FilenameUtils.getExtension(resourcePath), tempDir);; FileUtils.copyURLToFile(inputUrl, temp);; temp.deleteOnExit();; logger.debug(String.format(""Extracted Intel GKL to %s\n"", temp.getAbsolutePath()));. System.load(temp.getAbsolutePath());; logger.info(""Intel GKL library loaded from classpath."");; } catch (IOException ioe) {; // not supported; logger.warn(""Unable to load Intel GKL library."");; return false;; }. does not check machine architecture, nor catches any exception from `System.load()` function. On PowerPC, the dynamic library (.so file) still exists, but it's in illegal format. Hence the crash.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2302:372,log,logger,372,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2302,5,['log'],['logger']
Testability,Common spark integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5723:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5723,1,['test'],['tests']
Testability,CompareSAMs does not compare properly - not suitable for use in tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1073:64,test,tests,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1073,1,['test'],['tests']
Testability,"CompareSAMs ignores validation stringency. Running this. ```; build/install/hellbender/bin/hellbender CompareSAMs src/test/resources/org/broadinstitute/hellbender/tools/BQSR/NA12878.chr17_69k_70k.dictFix.bam src/test/resources/org/broadinstitute/hellbender/tools/BQSR/NA12878.chr17_69k_70k.dictFix.bam --VALIDATION_STRINGENCY SILENT; ```. results in this. ```; htsjdk.samtools.SAMFormatException: SAM validation error: ERROR: Record 130, Read name 809R9ABXX101220:5:6:17918:145992, Mate Alignment start should be 0 because reference name = *.; at htsjdk.samtools.SAMUtils.processValidationErrors(SAMUtils.java:439); at htsjdk.samtools.BAMFileReader$BAMFileIterator.advance(BAMFileReader.java:643); at htsjdk.samtools.BAMFileReader$BAMFileIterator.next(BAMFileReader.java:628); at htsjdk.samtools.BAMFileReader$BAMFileIterator.next(BAMFileReader.java:598); at htsjdk.samtools.SamReader$AssertingIterator.next(SamReader.java:544); at htsjdk.samtools.SamReader$AssertingIterator.next(SamReader.java:518); at htsjdk.samtools.util.PeekIterator.peek(PeekIterator.java:67); at htsjdk.samtools.SecondaryOrSupplementarySkippingIterator.skipAnyNotprimary(SecondaryOrSupplementarySkippingIterator.java:36); at htsjdk.samtools.SecondaryOrSupplementarySkippingIterator.advance(SecondaryOrSupplementarySkippingIterator.java:31); at org.broadinstitute.hellbender.utils.read.SamComparison.compareCoordinateSortedAlignments(SamComparison.java:111); at org.broadinstitute.hellbender.utils.read.SamComparison.compareAlignments(SamComparison.java:68); at org.broadinstitute.hellbender.utils.read.SamComparison.<init>(SamComparison.java:44); at org.broadinstitute.hellbender.tools.picard.sam.CompareSAMs.doWork(CompareSAMs.java:34); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:94); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:144); at org.broadinstitute.hellbender.cmdline.PicardCommandLineProgram.instanceMain(PicardComm",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/419:118,test,test,118,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/419,4,"['Assert', 'test']","['AssertingIterator', 'test']"
Testability,CompareSAMs needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1229:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1229,1,['test'],['tests']
Testability,"CompareSam ignores actual content of the reads (bases, qualities, attributes etc). We need this functionality to use CompareSam in tests. . This issue may be fixed by creating a new facility to compare bam/sam files that takes those into account.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1073:131,test,tests,131,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1073,1,['test'],['tests']
Testability,Completed integration test and added two test files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/857:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/857,2,['test'],['test']
Testability,Completed integration test. Thanks to @akiezun.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/858:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/858,1,['test'],['test']
Testability,"Completed tests with three options including MINIMUM_MAPPING_QUALITY=39, TAIL_LIMIT=25000, and CHIMERA_KB_MIN=200000. However, throws an error when using ""null"". Needless to say, so does Picard.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/884:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/884,1,['test'],['tests']
Testability,"Comprises the commits after 7992f64. The only commit with real substance is `Updated metadata and abstract collection classes.`. The rest of the commits simply update calling code, related tests, and test files. These updates were slightly less trivial for the plotting classes, so these are also split off into separate commits. Again, probably could be engineered better (there are two parallel class hierarchies for metadata and collection classes, which is kind of gross), but we can refactor later if needed. @asmirnov239 please review. Again, lower priority than gCNV VCF, but the sooner this is in master the easier it will be to get things into FireCloud. Let's try for early next week. I'll start doc updates concurrently.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3914:189,test,tests,189,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3914,2,['test'],"['test', 'tests']"
Testability,"Comprises the last ~~6 commits~~ 7 commits. (Had to fix a test file dependency. From now on, I'd like to request more encapsulation of test resources. Certainly we should have a common pool of general, rarely changed resources, but sharing of specific resources across packages breaks encapsulation.). @lbergelson I removed a few R dependencies. We should update the base Docker image accordingly and make sure I didn't break anything.; @davidbenjamin I had to change one use of HashedListTargetCollection in CalculateContamination. Also note that FilterByOrientationBias is the sole survivor in the exome package, so you may want to move it somewhere else.; @LeeTL1220 @vruano This removes a lot of your code. Please speak up if there are any utility classes, etc. that you'd like to keep. (For example, I kept the HMM code.) I removed the Target codec and associated classes.; @sooheelee I will update the list of tools for doc updates accordingly.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3935:58,test,test,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3935,2,['test'],['test']
Testability,"Conceptually -- two things happen in this PR. . 1. Removed ""arrays"" code; 2. Refactored package names into. ...gvs; |- ingest; |- filtering; |- extract; \- common. All tests pass (can be run with `./gradlew test --tests ""org.broadinstitute.hellbender.tools.gvs*""`). I will run a full workflow in Terra (import, train, extract) and verify. BEFORE we merge, we'll the existing ""ah_var_store"" to indicate this is where array code lives",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7260:168,test,tests,168,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7260,3,['test'],"['test', 'tests']"
Testability,Concordance testing against GATK3 annotations for HaplotypeCaller (with a configurable tolerance before failure),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1732:12,test,testing,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1732,1,['test'],['testing']
Testability,Conditional logic in CNV workflows should use explicit arguments,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3657:12,log,logic,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3657,1,['log'],['logic']
Testability,Confusing error from GenomicsDBImport:. ```; $ ./gatk-launch GenomicsDBImport --genomicsDBWorkspace /tmp/gendb --intervals chr20:1-64444167 --batchSize 300 --genomicsDBSegmentSize 1048576 --overwriteExistingGenomicsDBWorkspace true --cloudPrefetchBuffer 2 --cloudIndexPrefetchBuffer 2 --variant gs://hellbender/test/resources/large/gvcfs/NA19625.g.vcf.gz; (...); [TileDB::Fragment] Error: Cannot rename fragment directory; Directory not empty.; ```. /tmp/gendb is empty before my call to GenomicsDBImport.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2743:311,test,test,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2743,1,['test'],['test']
Testability,Consider running Travis Spark tests against EMR Spark,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/885:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/885,1,['test'],['tests']
Testability,"Contains mostly very simple utility methods, but could stand some testing.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5749:66,test,testing,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5749,1,['test'],['testing']
Testability,"Continues discussion in https://github.com/broadinstitute/gatk/issues/3853.; We need to generate GATK forum docs for [Picard metrics](http://broadinstitute.github.io/picard/picard-metric-definitions.html). We will classify the group as a utility, like we do `Read Filters` and `Variant Annotations`. Given GATK also has some metrics collection tools, the group name should be generic e.g. `Metrics`. ## @cmnbroad @magicDGS, What do I need to for each metric to show up in a metric doc as a table (like below)? ; ![screenshot 2017-12-12 11 12 29](https://user-images.githubusercontent.com/11543866/33894997-63927c1a-df2d-11e7-8fd2-9c74809b7773.png). ---. ### A test branch is `shl_doc_picardmetrics` in the Picard repo. ; Test is with HelpConstants.java and AlignmentSummaryMetrics.java.; - There is already a Picard program group `Metrics` (that should go to the wayside with the new categories in #3853) that should really be used for explaining the metrics. Metrics collecting tools go under the DiagnosticsAndQCProgramGroup.java.; - Given GATK has a number of metrics collection tools, the name is generic and currently, a placeholder: . ![screenshot 2017-12-12 11 03 43](https://user-images.githubusercontent.com/11543866/33894915-28340904-df2d-11e7-8363-72aabc76a490.png). ---; ### Only the summary shows up:. ![screenshot 2017-12-12 11 03 57](https://user-images.githubusercontent.com/11543866/33894921-2d7cbfa0-df2d-11e7-9c33-2cc8eb7a1e49.png). ---; ### Here are the corresponding code elements:. ![screenshot 2017-12-12 11 04 51](https://user-images.githubusercontent.com/11543866/33894926-3134e938-df2d-11e7-9690-bb2cd3f5408f.png)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3947:660,test,test,660,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3947,2,"['Test', 'test']","['Test', 'test']"
Testability,"Copying over some discussion from Slack, with some slight modifications:. > I took a quick stab at updating the environment for gCNV. Even taking out TensorFlow (assuming that the CNN will not be supported by this environment), it's a difficult task:; > 1. The goal is to update Python from 3.6 to 3.10+, since Terra now requires the latter for officially supported images.; > 2. However, gCNV relies on the PyMC3 package. PyMC3 3.1 is currently used in GATK master. 3.1 was released in 2017, not long before our release of gCNV in 2018, but it's very old now.; > 3. The latest version of Python that is supported by PyMC3 3.1 in conda is Python 3.6.; > 4. @asmirnov239 has a draft PR (#8094) that updates PyMC3 to 3.5 and Python to 3.7, which clearly still falls short of Python 3.10+. This PR also updated some gCNV code to make it compatible with PyMC3 3.5. (It also removed TensorFlow and added PyTorch.); > 5. @asmirnov239 also merged a PR that added tests for numerical reproducibility of GermlineCNVCaller in cohort mode in #7889.; > 6. The earliest version of PyMC that supports Python 3.10+ is PyMC 4, released in 2022.; > 7. However, PyMC 4 introduces API changes, which will also require additional gCNV code changes and numerical testing.; > 8. These API changes are because the underlying computational backend for PyMC was updated from Theano (think of this as an old alternative to TensorFlow) to Aesara.; > 9. Since then, PyMC 5.9 has been released and the underlying backend has been updated again, from Aesara to PyTensor.; > 10. So if we are going to update the environment to support Python 3.10+, it probably makes sense to go all the way to PyMC 5.9. I've made some strides in this PR; as of [6b08f3a](https://github.com/broadinstitute/gatk/pull/8561/commits/6b08f3af205cb9af1f5c63a0786f9a5a52cd78c1), I've made enough updates to accommodate API changes so that cohort-mode inference for both GermlineCNVCaller and DetermineGermlineContigPloidy runs successfully under Python 3.1",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8561:956,test,tests,956,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8561,1,['test'],['tests']
Testability,Could it be possible to move the locale setup and picard-parser config to the first method in `mainEntry` (or another place that can be overrided and/or picked by the tests/downstream toolkits)?. https://github.com/broadinstitute/gatk/blob/51273676b20d25cacf238d1c0429ebc79b321a85/src/main/java/org/broadinstitute/hellbender/Main.java#L38-L50,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5014:167,test,tests,167,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5014,1,['test'],['tests']
Testability,"Could it be possible to set all these properties and configurations in a method annotated with `@BeforeSuite`?. https://github.com/broadinstitute/gatk/blob/3c960c9d7174785a82d272fe9cd33076ae7ed271/src/main/java/org/broadinstitute/hellbender/utils/test/BaseTest.java#L35-L42. Downstream toolkits using the testing framework provided by GATK (and thus, extending `BaseTest`) might benefit for that change - currently they are kept unset if not explicitly defined by the implementation. If it is not possible because it is not correctly handled by TestNG, feel free to close the issue.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5013:247,test,test,247,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5013,3,"['Test', 'test']","['TestNG', 'test', 'testing']"
Testability,CountReads . CRAM is 17x slower here! (in user time) . using interval list from `ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/2.8/b37/Broad.human.exome.b37.interval_list.gz`. ```; time ./gatk-launch CountReads -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram -L Broad.human.exome.b37.interval_list -R src/test/resources/large/human_g1k_v37.20.21.fasta; real 1m12.498s; user 1m23.140s; ```. ```; time ./gatk-launch CountReads -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -L Broad.human.exome.b37.interval_list; real 0m2.178s; user 0m4.853s; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1787:228,test,test,228,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1787,3,['test'],['test']
Testability,"CountVariants and SelectVariants both read the same file successfully. gatk-launch SortVcf --input /humgen/test.filtered.maf_annotated.vcf --output sortvcf.vcf. htsjdk.tribble.TribbleException$MalformedFeatureFile: Unable to parse header with error: Your input file has a malformed header: This codec is strictly for VCFv4; please use the VCF3 codec for VCFv3.3, for input source: /humgen/test.filtered.maf_annotated.vcf; at htsjdk.tribble.TribbleIndexedFeatureReader.readHeader(TribbleIndexedFeatureReader.java:226); at htsjdk.tribble.TribbleIndexedFeatureReader.<init>(TribbleIndexedFeatureReader.java:92); at htsjdk.tribble.TribbleIndexedFeatureReader.<init>(TribbleIndexedFeatureReader.java:103); at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:89); at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:66); at htsjdk.variant.vcf.VCFFileReader.<init>(VCFFileReader.java:58); at org.broadinstitute.hellbender.tools.picard.vcf.SortVcf.collectFileReadersAndHeaders(SortVcf.java:92); at org.broadinstitute.hellbender.tools.picard.vcf.SortVcf.doWork(SortVcf.java:76); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:98); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:146); at org.broadinstitute.hellbender.cmdline.PicardCommandLineProgram.instanceMain(PicardCommandLineProgram.java:61); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:66); at org.broadinstitute.hellbender.Main.main(Main.java:81); Caused by: htsjdk.tribble.TribbleException$InvalidHeader: Your input file has a malformed header: This codec is strictly for VCFv4; please use the VCF3 codec for VCFv3.3; at htsjdk.variant.vcf.VCFCodec.readActualHeader(VCFCodec.java:100); at htsjdk.tribble.AsciiFeatureCodec.readHeader(AsciiFeatureCodec.java:88); at htsjdk.tribble.AsciiFeatureCodec.readHeader(AsciiFeatureCodec.java:41); at htsjdk.tribble.TribbleIn",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1304:107,test,test,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1304,2,['test'],['test']
Testability,Coverage analysis indicates that the new --assembly-complexity-reference-mode argument is not covered by tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7955:105,test,tests,105,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7955,1,['test'],['tests']
Testability,Create TestResources for GATK-specific file constants and GenomeLocParser,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3176:7,Test,TestResources,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3176,1,['Test'],['TestResources']
Testability,Create WDL to validate VAT and add first test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7352:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7352,1,['test'],['test']
Testability,Create a large scale test that verifies that the `GenomicsDBImport` sampleMap argument can handle renaming with a large number of files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3861:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3861,1,['test'],['test']
Testability,Create a separate artifact for gatk test framework classes.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3567:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3567,1,['test'],['test']
Testability,Create a set of Carrot tests for FlowBasedGATK,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7982:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7982,1,['test'],['tests']
Testability,Create a unit test to compare various String.split methods in the GATK,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3759:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3759,1,['test'],['test']
Testability,Create framework for intelligent comparison of annotation values (with tolerance) in the test suite,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3275:89,test,test,89,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3275,1,['test'],['test']
Testability,Create tests data for and write tests for `testCohortWithAnnotatedIntervals` and `testCohortWithInputModel` tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6893:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6893,5,['test'],"['testCohortWithAnnotatedIntervals', 'testCohortWithInputModel', 'tests']"
Testability,Create unit tests for Picard tools,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/144:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/144,1,['test'],['tests']
Testability,"Created ""variantcalling"" test group and split them off from the rest of the integration tests for runtime purposes",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4984:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4984,2,['test'],"['test', 'tests']"
Testability,Created new branch (old one was problematic). Integration test was successful. Let me know if additional parameters should be tested.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/996:58,test,test,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/996,2,['test'],"['test', 'tested']"
Testability,"Creates integration testing datasets so the tables within them auto-delete at 2 weeks. See the tables in `gvs-internal.quickit_2023_10_24_vs_1049_tables_are_not_forever_265f343_beta` for an example, integration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/72e3c830-b4ba-4e52-a264-07acb81a9b5b).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8563:20,test,testing,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8563,1,['test'],['testing']
Testability,"Creating test files by hand is tedious, error-prone, and bloats the repo. When writing new tests, we should try to generate test data in-memory where possible. Picard has SamFileTester, which is a wrapper around HTSJDK's SAMRecordSetBuilder. GATK has ArtificialSAMUtils. SamFileTester/SAMRecordSetBuilder is only used in a few places (e.g. MarkDuplicates), whereas ArtificialSAMUtils is heavily used, so I would say stick with the latter.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/211:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/211,3,['test'],"['test', 'tests']"
Testability,Currently Funcotator has an issue where it will only annotate with Locatable Funcotation Factories. This is because of some logic in `DataSourceFuncotationFactory` around whether the `featureList` is compatible.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5773:124,log,logic,124,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5773,1,['log'],['logic']
Testability,"Currently GATK4 walker mode won't recognize altivec-based libVectorLoglessPairHMM.so only AVX based library. On POWER it will Falling back to the MUCH slower LOGLESS_CACHING implementation. To avoid performance degradation on POWER for Haplotyecaller, please include support for Altivec based pairhmm library libVectorLoglessPairHMM.so; Two possible ways to do it:; 1. integrate support by using ""grep -i altivec /proc/cpuinfo"" to identify availability of Altivec support and then integrate the library; 2. We can setup Java path or other options that will look for any libVectorLoglessPairHMM.so available and test compatibility. We would do all necessary works to get this done, but would appreciate your direction on which way to peruse. Thanks!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3180:611,test,test,611,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3180,1,['test'],['test']
Testability,"Currently GenotypeGVCFs only supports one allele specific annotation. Once the allele specific annotations port is finalized (#3527) then the functionality needs to be added to genotypeGVCFs. In order to be sure that the annotations are working properly, they should be tested against the gatk3 version of genotypeGVCFs allele specific annotations.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3544:270,test,tested,270,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3544,1,['test'],['tested']
Testability,Currently I'm unable to spin up a dataproc cluster succesfully in the broad-gatk-test project. Talking with google about it here: https://groups.google.com/forum/#!topic/cloud-dataproc-discuss/Oi4VKt9RwdU,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1611:81,test,test,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1611,1,['test'],['test']
Testability,Currently `GenotypingEngine` is mostly tested indirectly via the `HaplotypeCaller` tests in protected. It would be good to expand `GenotypingEngineUnitTest` to include more comprehensive direct tests for this crucial class.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2522:39,test,tested,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2522,3,['test'],"['tested', 'tests']"
Testability,"Currently `ReferenceConfidenceVariantContextMerger.merge()` does not pass in the remapped alleles to `GATKVariantContextUtils.makeGenotypeCall()` for the `originalGT` argument, which seems problematic and could cause the code to incorrectly fall back on reference calls in some cases. The GVS team has found it necessary to use the remapped alleles when genotyping in order to get correct genotypes out of the merge -- we should make this behavior the default. . Currently, making it the default causes failures in the tests for the `--include-non-variant-sites` argument in `GenotypeGVCFs` (see https://github.com/broadinstitute/gatk/pull/8288#issuecomment-1509295869). This appears related to the current implementation incorrectly calculating the reference allele when we are at some non-zero offset from the start of a GVCF reference block.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8317:519,test,tests,519,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8317,1,['test'],['tests']
Testability,"Currently `SamAssertionUtils.assertSamsEqual` fails with `""SAM file output differs from expected output""`. It uses `SamComparison`, which prints a lot of helpful information about how the files differ to stdout. This output is often hidden when running it in a test suite though. It's also a bit strange to print error messages to stdout. `SamComparison` should capture this information and provide an accessor to retrieve it instead of dumping it to stdout.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/375:29,assert,assertSamsEqual,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/375,2,"['assert', 'test']","['assertSamsEqual', 'test']"
Testability,Currently build_docker will run for a long time and then fail at the end if you are not authenticated to gcloud. We should have an upfront test for it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5353:139,test,test,139,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5353,1,['test'],['test']
Testability,"Currently if a site has too many alleles GenomicsDB doesn't output PLs for diploid samples at that site. At sites where all samples are diploid this site is successfully skipped. If the site has a mix of haploid and diploid calls (for example chrX with the latest versions of dragen on WGS data), then the site wasn't being skipped correctly and an error would be thrown by GenotypeGVCFs at the annotation step. Now the site will be skipped if any of the called sites don't have PLs excluding no calls and hom ref genotypes. If the site is all no-calls or hom-ref then it retains the current behavior by only skipping sites where all the genotypes are missing PLs. I'm not sure if this happens frequently in the wild, but it is a common edge case in our tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8862:754,test,tests,754,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8862,1,['test'],['tests']
Testability,Currently if the number of headers do not match the number of rows it manifests as:`AssertionError: Some contigs do not have ploidy priors`. It would be good if the error message could more explicitly state how the ploidy prior file is malformed. In the event where it's actually the case it might also be worth explicitly stating which contig was found not to have a ploidy prior.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4486:84,Assert,AssertionError,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4486,1,['Assert'],['AssertionError']
Testability,"Currently in `GenomicsDBImportIntegrationTest` we have the following:. ```; BaseTest.assertCondition(actualVcs, expectedVcs, (a, e) -> {; // TODO: Temporary hacks to make this test pass. Must be removed later; if ( // allele order; e.getStart() != 17967343 && e.getStart() != 17966384 &&; // split block; e.getEnd() != 17981447; ) {; VariantContextTestUtils.assertVariantContextsAreEqual(a, e, Collections.emptyList());; }; });; ```. We should remove these exclusions once we're able to compare without regard to allele ordering.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2638:85,assert,assertCondition,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2638,3,"['assert', 'test']","['assertCondition', 'assertVariantContextsAreEqual', 'test']"
Testability,Currently it seems like the pull request build on travis is running the wrong commit's tests in docker. The docker build script takes a commit hash as part of it's inputs and then performs a checkout of that when building the docker. This is failing for the PR builds because the .travis.yml is currently getting the hash from calling rev-parse on the current branch which gives the commit number of master. It should be using $TRAVIS_COMMIT as the hash.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3216:87,test,tests,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3216,1,['test'],['tests']
Testability,"Currently most of the integration tests for BQSR run with BAQ and indel qualities on, which is no longer the default. We should make most of the tests run with the default settings of no BAQ and no indel qualities.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2563:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2563,2,['test'],['tests']
Testability,Currently the `HaplotypeCallerIntegrationTests` cover most of the common use cases for our best practices HaplotypeCaller pipeline but are deficient in covering a few important less-used arguments. A non-exhaustive list of un-tested modes for the HaplotypeCaller that are significant enough to warrant better long term integration tests to ensure they aren't broken in the future are as follows:; - Multisample Calling Mode; - `--emit-all-sites`; - Genotype Given Alleles Mode. To complete this task would mean simply adding some new tests and possibly uploading to our LFS storage some data that appropriately covers the use case to make sure we don't accidentally break these functionalities in embarrassing ways going forwards. Some discretion might be necessary to decide what HC arguments are important enough to warrant new tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7632:226,test,tested,226,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7632,4,['test'],"['tested', 'tests']"
Testability,"Currently the best way to select a subset of reads overlapping an interval is to provide a list of -L reader interval arguments. Unfortunately, this requires that the bam be sorted and indexed, which can often be a pain point when trying to perform quick tests, as a sort is often slow and requires copying the bam a second time. To alleviate this, it would be nice to add a ReadFilter level interval argument, for example an `IntervalOverlapReadFilter` or some such which can take similarly formatted arguments to -L. This would allow one to use `PrintReads` to select an interval over unsorted/unindexed bams more easily.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4860:255,test,tests,255,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4860,1,['test'],['tests']
Testability,"Currently the interval arguments are ignored in `FeatureWalker` (#2310) because the initialization of intervals is done after the ones for features. This PR includes the following changes:; - Failing test (as described in #2310); - Fix by moving the code for set the intervals for traversal to `onStartup()`, as in the case of the reads in `ReadWalker`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2467:200,test,test,200,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2467,1,['test'],['test']
Testability,"Currently the script fails when configured to run tests, since it doesn't have access to the large files in the docker image. These need to be downloaded and mounted for the tests to pass, as we do in the docker tests on travis.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3191:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3191,3,['test'],['tests']
Testability,"Currently the travis CI integration test task is the longest running task, which currently clocks in uncomfortably close to 70 minute hard limit on task runtime. One solution to this would be to split off a second job encompassing some of the longest running integration tests, namely a `VariantCallingIntegrationTests` tag. If we wanted to split the integration tests further then we could also consider splitting off the spark integration tests, which also take some time.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4983:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4983,4,['test'],"['test', 'tests']"
Testability,"Currently there is a bug in MarkDuplicatesSpark where for non queryname sorted bams the index is incorrectly assumed to be sufficient for reads groups, which wis guaranteed to be adequate for queryname sorted bams. This means that under some circumstances reads can be inconsistently marked as duplicates when its mate is a non-duplicate if they were spread across multiple partitions. . There is a disabled `MarkDuplicatesSparkUtilsUnitTests` test in #4656 that should hopefully demonstrate this issue.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4701:444,test,test,444,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4701,1,['test'],['test']
Testability,Currently there is no way to specify where the bam parts get written to before being combined into a single sorted bam. Being able to specify this directory is important for supporting google compute engine LOCAL disks which currently can't be stitched into a logical volume.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4636:260,log,logical,260,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4636,1,['log'],['logical']
Testability,"Currently they leave out values that have all 0's. The formatting is different, and the sorting is different. ```; picard MarkDuplicates INPUT=src/test/resources/org/broadinstitute/hellbender/tools/picard/sam/MarkDuplicates/example.chr1.1-1K.unmarkedDups.bam METRICS_FILE=expected_duplicate_metrics.txt.picard OUTPUT=out.bam.picard; ```. produces. ```; ## htsjdk.samtools.metrics.StringHeader; # picard.sam.markduplicates.MarkDuplicates INPUT=[src/test/resources/org/broadinstitute/hellbender/tools/picard/sam/MarkDuplicates/example.chr1.1-1K.unmarkedDups.bam] OUTPUT=out.bam.picard METRICS_FILE=expected_duplicate_metrics.txt.picard MAX_SEQUENCES_FOR_DISK_READ_ENDS_MAP=50000 MAX_FILE_HANDLES_FOR_READ_ENDS_MAP=8000 SORTING_COLLECTION_SIZE_RATIO=0.25 PROGRAM_RECORD_ID=MarkDuplicates PROGRAM_GROUP_NAME=MarkDuplicates REMOVE_DUPLICATES=false ASSUME_SORTED=false DUPLICATE_SCORING_STRATEGY=SUM_OF_BASE_QUALITIES READ_NAME_REGEX=[a-zA-Z0-9]+:[0-9]:([0-9]+):([0-9]+):([0-9]+).* OPTICAL_DUPLICATE_PIXEL_DISTANCE=100 VERBOSITY=INFO QUIET=false VALIDATION_STRINGENCY=STRICT COMPRESSION_LEVEL=5 MAX_RECORDS_IN_RAM=500000 CREATE_INDEX=false CREATE_MD5_FILE=false GA4GH_CLIENT_SECRETS=client_secrets.json; ## htsjdk.samtools.metrics.StringHeader; # Started on: Thu Oct 22 16:45:11 EDT 2015. ## METRICS CLASS picard.sam.DuplicationMetrics; LIBRARY UNPAIRED_READS_EXAMINED READ_PAIRS_EXAMINED UNMAPPED_READS UNPAIRED_READ_DUPLICATES READ_PAIR_DUPLICATES READ_PAIR_OPTICAL_DUPLICATES PERCENT_DUPLICATION ESTIMATED_LIBRARY_SIZE; Solexa-16399 0 0 0 0 0 0 ?; Solexa-16421 0 0 0 0 0 0 ?; Solexa-16410 0 0 0 0 0 0 ?; Solexa-16398 0 0 0 0 0 0 ?; Solexa-16420 0 0 0 0 0 0 ?; Solexa-16419 4 4 4 0 0 0 0; Solexa-16408 0 0 0 0 0 0 ?; Solexa-16416 2 2 2 0 0 0 0; Solexa-16426 0 0 0 0 0 0 ?; Solexa-16415 0 0 0 0 0 0 ?; Solexa-16404 3 9 3 0 2 0 0.190476 17; Solexa-16418 0 0 0 0 0 0 ?; Solexa-16407 0 0 0 0 0 0 ?; Solexa-16406 1 10 1 0 0 0 0; Solexa-16412 3 6 3 0 1 0 0.133333 15; Solexa-16423 0 0 0 0 0 0 ?; Solexa-16411 0 ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1045:147,test,test,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1045,2,['test'],['test']
Testability,"Currently this implementation could probably use more substantial testing, especially of the core functionality. It is also missing the following features from gatk3:; - Depth of coverage by fragments; - Rtable output format. The following important differences exist from gatk3:; - Fixed numerous bugs with output line ordering, now we necessarily associate the right sample with the right data in the output tables. We also sort the output samples lexicographically consistently so the order of the output columns is deterministic.; - Now gene outputs no longer rely on having exactly matching interval overlaps. Instead they are treated as intervals themselves with coverage information being collected for every exon base covered by the gene. There is an argument to demand that a gene must be completely covered by provided intervals to be in the result table. (Perhaps excising introns from coverage could be toggled?); - Intervals are no longer merged when reported in to the interval tables. . The following (new) features have been pushed into future branches:; - Diagnose targets evaluation field (need to decide what partitioning to attach it to, perhaps sample partitioning info?); - Replacement for `.refseq` format for gene lists. ; - Optional output partitioning based a provided list of read filters. . Depends on #5887 ; Resolves #19",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5913:66,test,testing,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5913,1,['test'],['testing']
Testability,"Currently we dump all htsjdk properties in `Defaults` to the logger, even though only a few are applicable to GATK:. ```; 16:30:25.790 INFO GenomicsDBImport - Defaults.BUFFER_SIZE : 131072; 16:30:25.790 INFO GenomicsDBImport - Defaults.COMPRESSION_LEVEL : 1; 16:30:25.790 INFO GenomicsDBImport - Defaults.CREATE_INDEX : false; 16:30:25.791 INFO GenomicsDBImport - Defaults.CREATE_MD5 : false; 16:30:25.791 INFO GenomicsDBImport - Defaults.CUSTOM_READER_FACTORY : ; 16:30:25.791 INFO GenomicsDBImport - Defaults.EBI_REFERENCE_SERVICE_URL_MASK : http://www.ebi.ac.uk/ena/cram/md5/%s; 16:30:25.791 INFO GenomicsDBImport - Defaults.NON_ZERO_BUFFER_SIZE : 131072; 16:30:25.791 INFO GenomicsDBImport - Defaults.REFERENCE_FASTA : null; 16:30:25.791 INFO GenomicsDBImport - Defaults.SAM_FLAG_FIELD_FORMAT : DECIMAL; 16:30:25.791 INFO GenomicsDBImport - Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 16:30:25.792 INFO GenomicsDBImport - Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : false; 16:30:25.792 INFO GenomicsDBImport - Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 16:30:25.792 INFO GenomicsDBImport - Defaults.USE_CRAM_REF_DOWNLOAD : false; ```. We should subset these down to only the relevant ones.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2691:61,log,logger,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2691,1,['log'],['logger']
Testability,"Currently we have Spark performance tests on gatk-jenkins which fail intermittently due to normal variance in runtimes. As a result, we don't always closely look into failures. We need Spark correctness tests in jenkins that are separate from the performance tests and that fail only when there's an actual regression -- and when these fail, it should always trigger a timely investigation by an engineer into what's gone wrong.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2288:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2288,3,['test'],['tests']
Testability,"Currently we have a dependency on having gcloud and gsutil installed and configured in a certain way, but we don't have any documentation about it. . We're getting authentication partially from gcloud auth login, which is being propagated in a way I don't fully understand through the dataflow pipeline options. . We need to understand exactly what's happening and then write an explanation of what a user needs to do to have it work.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1051:206,log,login,206,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1051,1,['log'],['login']
Testability,"Currently we have to convert from `List` to array in `RankSumTest` when calling into `MannWhitneyU`:. ```; final MannWhitneyU.Result result = mannWhitneyU.test(Doubles.toArray(altQuals), Doubles.toArray(refQuals), MannWhitneyU.TestType.FIRST_DOMINATES);; ```. Ideally we should avoid this wasteful conversion.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2625:155,test,test,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2625,2,"['Test', 'test']","['TestType', 'test']"
Testability,"Currently when running a spark tool we spam the console with lots of useless garbage. Let's suppress this at the default logging level, and instead output a link to the spark monitoring console and/or a progress meter.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/962:121,log,logging,121,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/962,1,['log'],['logging']
Testability,"Currently, all GATK tools use log4j and all Picard tools use HTSJDK's Log. We should decide on one of these and use it for everything.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/146:70,Log,Log,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/146,1,['Log'],['Log']
Testability,"Currently, if `ReadsDataSource` comes from several files, the `getHeader()` method is always returning a coordinate sorted header. Thus, it is difficult to assume that the input is pre-sorted or not for other sorting orders. This PR implements a method to obtain the consensus between the files (ignoring the unknown sort order), and if there is no consensus falls back in the previous behavior (coordinate). In addition, it logs a warning with the current assumptions.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3213:425,log,logs,425,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3213,1,['log'],['logs']
Testability,Currently:. // TODO NOTE this test is disabled. That is because currently it is difficult to generate ArtificialFlowBasedReads from scratch...; @Test (enabled = false),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7957:30,test,test,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7957,2,"['Test', 'test']","['Test', 'test']"
Testability,Custom Spark configuration in tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2337:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2337,1,['test'],['tests']
Testability,"D; [INFO] GATK Aggregator Protected .......................... SKIPPED; [INFO] GATK Tools Private ................................. SKIPPED; [INFO] GATK Package Internal .............................. SKIPPED; [INFO] NA12878 KB Utilities ............................... SKIPPED; [INFO] GATK Queue Private ................................. SKIPPED; [INFO] GATK Queue Extensions Internal ..................... SKIPPED; [INFO] GATK Queue Package Internal ........................ SKIPPED; [INFO] GATK Aggregator Private ............................ SKIPPED; [INFO] ------------------------------------------------------------------------; [INFO] BUILD FAILURE; [INFO] ------------------------------------------------------------------------; [INFO] Total time: 01:23 min; [INFO] Finished at: 2018-04-20T20:52:19+02:00; [INFO] Final Memory: 67M/922M; [INFO] ------------------------------------------------------------------------; [ERROR] Failed to execute goal on project external-example: Could not resolve dependencies for project org.mycompany.app:external-example:jar:1.0-SNAPSHOT: The following artifacts could not be resolved: org.broadinstitute.gatk:gatk-tools-public:jar:3.8-SNAPSHOT, org.broadinstitute.gatk:gatk-utils:jar:tests:3.8-SNAPSHOT, org.broadinstitute.gatk:gatk-engine:jar:tests:3.8-SNAPSHOT: Could not find artifact org.broadinstitute.gatk:gatk-tools-public:jar:3.8-SNAPSHOT in gatk.public.repo.local (file:../../public/repo) -> [Help 1]; [ERROR] ; [ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.; [ERROR] Re-run Maven using the -X switch to enable full debug logging.; [ERROR] ; [ERROR] For more information about the errors and possible solutions, please read the following articles:; [ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException; [ERROR] ; [ERROR] After correcting the problems, you can resume the build with the command; [ERROR] mvn <goals> -rf :external-example; ```. it could be the cause.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4686:2849,test,tests,2849,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4686,3,"['log', 'test']","['logging', 'tests']"
Testability,"DArrayUnitTest`; - [ ] case-sample calling on rearranged targets in `GermlineCNVCallerIntegrationTest`; - [ ] concordance on parameter estimation in `GermlineCNVCallerIntegrationTest`; - [ ] test Spark results match local results in `GermlineCNVCallerIntegrationTest`; - [ ] report statistics on max likelihood copy ratio as well in `GermlineCNVCallerIntegrationTest`; - [ ] report statistics on local copy ratio posteriors as well in `GermlineCNVCallerIntegrationTest`; - [ ] unit tests for `ComputableGraphStructure`; - [ ] unit tests for `ImmutableComputableGraph`; - [ ] unit tests for ensuring that ICG nodes are treated as immutable and not modified by mistake; - [ ] unit tests for `CoverageModelEMWorkspaceMathUtils`; - [ ] unit tests for `CoverageModelParameters` (reading/writing); - [ ] unit tests for `CoverageModelSparkUtils`; - [ ] the issue with Spark tests and custom serializers (gCNV Spark tests are currently disabled). **Discussion about gCNV ICG unit tests (May 1st, 2017):**; It is possible to automate the test for ComputableNodeFunctions. One initializes the parents to random values, calls the function, and checks whether it has had any side effects on the parents. One must make a random-data-provider-of-some-sort for each parent node because the parent INDArrays have different shapes. For other functions in CoverageModelEMComputeBlock and CoverageModelEMWorkspace that query ICG nodes -- one needs to create a firewall. One can elevate all such functions to classes that essentially behave functionally, (ICGNodeProvider, List<NodeKey>, extra arguments) -> output, as opposed to writing vanilla member functions such as CoverageModelEMComputeBlock.getBiasLatentPosteriorDataUnregularized, etc. Then we can write automated unit tests for these classes. Another approach is to write a thin ImmutableNDArray interface that blocks access to all mutators and returns instances of ImmutableNDArray when a matrix view is extracted (e.g. via INDArray.get(...)). This is also qu",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2929:1127,test,tests,1127,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2929,2,['test'],"['test', 'tests']"
Testability,"DEBUG ScriptExecutor - --initial_temperature=1.500000e+00; 23:44:43.684 DEBUG ScriptExecutor - --num_thermal_advi_iters=2500; 23:44:43.684 DEBUG ScriptExecutor - --convergence_snr_averaging_window=500; 23:44:43.684 DEBUG ScriptExecutor - --convergence_snr_trigger_threshold=1.000000e-01; 23:44:43.684 DEBUG ScriptExecutor - --convergence_snr_countdown_window=10; 23:44:43.685 DEBUG ScriptExecutor - --max_calling_iters=10; 23:44:43.685 DEBUG ScriptExecutor - --caller_update_convergence_threshold=1.000000e-03; 23:44:43.685 DEBUG ScriptExecutor - --caller_internal_admixing_rate=7.500000e-01; 23:44:43.685 DEBUG ScriptExecutor - --caller_external_admixing_rate=1.000000e+00; 23:44:43.685 DEBUG ScriptExecutor - --disable_caller=false; 23:44:43.685 DEBUG ScriptExecutor - --disable_sampler=false; 23:44:43.685 DEBUG ScriptExecutor - --disable_annealing=false; usage: cohort_denoising_calling.6786136740079319091.py [-h]; [--console_log_level {INFO,WARNING,DEBUG}]; [--logfile_log_level {INFO,WARNING,DEBUG}]; [--logfile str]; --modeling_interval_list; str; --read_count_tsv_files; str [str ...]; --ploidy_calls_path str; --output_model_path str; --output_calls_path str; --output_tracking_path; str; [--output_opt_path str]; [--input_model_path str]; [--input_calls_path str]; [--input_opt_path str]; [--max_bias_factors int]; [--mapping_error_rate float]; [--psi_t_scale float]; [--psi_s_scale float]; [--depth_correction_tau float]; [--log_mean_bias_std float]; [--init_ard_rel_unexplained_variance float]; [--num_gc_bins int]; [--gc_curve_sd float]; [--q_c_expectation_mode {map,exact,hybrid}]; [--active_class_padding_hybrid_mode int]; [--enable_bias_factors str_to_bool]; [--enable_explicit_gc_bias_modeling str_to_bool]; [--disable_bias_factors_in_active_class str_to_bool]; [--p_alt float]; [--p_active float]; [--cnv_coherence_length float]; [--class_coherence_length float]; [--max_copy_number int]; [--num_calling_processes int]; [--learning_rate float]; [--adamax_beta1 float]; [--adamax_bet",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8938:38194,log,logfile,38194,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8938,1,['log'],['logfile']
Testability,DFunctions$$anonfun$saveAsHadoopDataset$1$$anonfun$13.apply(PairRDDFunctions.scala:1190); 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:70); 	at org.apache.spark.scheduler.Task.run(Task.scala:86); 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:274); 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142); 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617); 	at java.lang.Thread.run(Thread.java:745). **This is the stack I get when the test completes but fails (note that the expected line count appears to not match the line count of the expected output file in the repo): **. java.lang.AssertionError: line counts expected [2629] but found [507]; 	at org.testng.Assert.fail(Assert.java:94); 	at org.testng.Assert.failNotEquals(Assert.java:496); 	at org.testng.Assert.assertEquals(Assert.java:125); 	at org.testng.Assert.assertEquals(Assert.java:372); 	at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.assertEqualTextFiles(IntegrationTestSpec.java:211); 	at org.broadinstitute.hellbender.utils.test.IntegrationTestSpec.assertEqualTextFiles(IntegrationTestSpec.java:190); 	at org.broadinstitute.hellbender.tools.examples.ExampleAssemblyRegionWalkerSparkIntegrationTest.testExampleAssemblyRegionWalker(ExampleAssemblyRegionWalkerSparkIntegrationTest.java:29); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); 	at org.testng.internal.TestMethod,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2349:3455,test,test,3455,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2349,1,['test'],['test']
Testability,DRAFT - SMOKE TEST. Add in all the GVS code with some questionable conflict resolution of 95b154810f0614214b4a0fdea809a7eeaa8b2b70,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8263:14,TEST,TEST,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8263,1,['TEST'],['TEST']
Testability,DRAFT GVS on master smoke test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8263:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8263,1,['test'],['test']
Testability,"DataSourceUtils - Resolved data source file path: file:///data/nws/WES/LMM_Path_LP_VUS5-variants-6-12-18.sorted_liftover_b38.corrected.vcf -> file:///data/nws/WES/reference/funcotator_dataSources.v1.7.20200521g/lmm_known/hg38/LMM_Path_LP_VUS5-variants-6-12-18.sorted_liftover_b38.corrected.vcf; 06:42:41.652 INFO FeatureManager - Using codec VCFCodec to read file file:///data/nws/WES/reference/funcotator_dataSources.v1.7.20200521g/lmm_known/hg38/LMM_Path_LP_VUS5-variants-6-12-18.sorted_liftover_b38.corrected.vcf; 06:42:41.663 INFO DataSourceUtils - Resolved data source file path: file:///data/nws/WES/gencode.v34.annotation.REORDERED.gtf -> file:///data/nws/WES/reference/funcotator_dataSources.v1.7.20200521g/gencode/hg38/gencode.v34.annotation.REORDERED.gtf; 06:42:41.663 INFO DataSourceUtils - Setting lookahead cache for data source: Gencode : 100000; 06:42:41.665 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; 06:42:41.665 INFO FeatureManager - Using codec GencodeGtfCodec to read file file:///data/nws/WES/reference/funcotator_dataSources.v1.7.20200521g/gencode/hg38/gencode.v34.annotation.REORDERED.gtf; 06:42:41.666 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; 06:42:41.691 INFO DataSourceUtils - Resolved data source file path: file:///data/nws/WES/gencode.v34.pc_transcripts.fa -> file:///data/nws/WES/reference/funcotator_dataSources.v1.7.20200521g/gencode/hg38/gencode.v34.pc_transcripts.fa; 06:42:46.805 INFO DataSourceUtils - Resolved data source file path: file:///data/nws/WES/clinvar_20180429_hg38.vcf -> file:///data/nws/WES/reference/funcotator_dataSo",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7090:6536,test,tested,6536,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7090,1,['test'],['tested']
Testability,"Dataflow BaseRecalibrator, local and cloud (with tests)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/529:49,test,tests,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/529,1,['test'],['tests']
Testability,"Dataflow and spark both wrap thrown exceptions in their own exceptions before transmitting them back to the client. Spark doesn't maintain the cause field for the new exception, which makes it difficult to unwrap and retrieve the original exception type. . The ability to do this is important because we want to present error's differently to the user depending on if they have a known `UserException` or some other type of exception. It also makes our testing much more robust if we can test for specific failure conditions rather than the error prone `RuntimeException`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/575:453,test,testing,453,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/575,2,['test'],"['test', 'testing']"
Testability,"Dataflow merge of RecalibrationTables, and corresponding test",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/522:57,test,test,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/522,1,['test'],['test']
Testability,"DataflowUtils#getReadsFromLocalBams will return unmapped reads if they have a start position that overlaps an interval, but the Hadoop version will filter them out. This change fixes this inconsistency, and makes the MarkDuplicates dataflow tests use the Spark Dataflow runner if it's specified on the command line (it used to ignore the setting). The change to the MarkDuplicates test also uncovered another problem where some tests failed with ""Mate unmapped flag should not be set for unpaired read"". I fixed this by moving from `com.google.cloud.genomics.utils.ReadUtils.makeRead` and `GoogleGenomicsReadToGATKReadAdapter` (which are lossy, and presumably caused the failures) to `SAMRecordToGATKReadAdapter`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/880:241,test,tests,241,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/880,3,['test'],"['test', 'tests']"
Testability,DataflowWorkarounds.registerGenomicsCoders(DataflowWorkarounds.java:90); at org.broadinstitute.hellbender.tools.dataflow.transforms.InsertSizeMetricsTransformUnitTest.testInsertSizeMetricsTransform(InsertSizeMetricsTransformUnitTest.java:49); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:659); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:845); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1153); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:771); at org.testng.TestRunner.run(TestRunner.java:621); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199); at org.testng.TestNG.runSuitesLocally(TestNG.java:1124); at org.testng.TestNG.run(TestNG.java:1032); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(Nativ,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/609:2176,Test,TestRunner,2176,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/609,1,['Test'],['TestRunner']
Testability,"Dealing with case when two alignment blocks contain each other in their ref span, indicating duplication.; Instead of outputting CIGARs for the duplicated units like we did for duplication records now in master pipeline, we output alt haplotype sequence from the evidence contigs we assembled, since we did an experiment work with inverted duplications. Some performance evaluation based on the logs. ```; master.vcf. 10:28:46.262 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - Discovered 6324 variants.; 10:28:46.277 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - INV: 237; 10:28:46.277 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - DEL: 3680; 10:28:46.277 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - DUP: 1141; 10:28:46.277 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - INS: 1266; 10:28:46.483 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - Shutting down engine; [October 4, 2017 10:28:46 AM EDT] org.broadinstitute.hellbender.tools.spark.sv.discovery.DiscoverVariantsFromContigAlignmentsSAMSpark done. Elapsed time: 0.53 minutes.; Runtime.totalMemory()=3954180096. ==============. feature.vcf. 13:51:48.490 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - Discovered 6543 variants.; 13:51:48.502 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - INV: 229; 13:51:48.502 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - DEL: 3679; 13:51:48.502 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - DUP: 1365; 13:51:48.502 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - INS: 1270; 13:51:48.770 INFO DiscoverVariantsFromContigAlignmentsSAMSpark - Shutting down engine; [October 5, 2017 1:51:48 PM EDT] org.broadinstitute.hellbender.tools.spark.sv.discovery.DiscoverVariantsFromContigAlignmentsSAMSpark done. Elapsed time: 0.49 minutes.; Runtime.totalMemory()=4026531840; ```. No variants that were dropped are simple variants, and they are expected to be brought back with the correct interpretation once complex sv PR series are fully coded. __Two known i",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3668:395,log,logs,395,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3668,1,['log'],['logs']
Testability,"Dear *,; I just tested the Docker Container 4.4.0.0 (upgrade from 4.3.0.0) and my pipeline tried to execute BaseRecalibrator and ApplyBQSR. It crashed with a message:; `/usr/bin/env: 'python': No such file or directory`. A simple test with a python script, using ""/usr/bin/python"" in shebang revealed that is truly not available in this path.; A test with the 4.3.0.0 Container worked. I solved the issue by typing ; `ln -s /usr/bin/python3 /usr/bin/python`. Kind regards,; Daniel",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8402:16,test,tested,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8402,3,['test'],"['test', 'tested']"
Testability,"Dear GATK developers,. Thank you very much for the tool! I recently encountered an issue while running GATK gCNV, specifically with the step GermlineCNVCaller in cohort mode. I ran the workflow using WDL and the GATK v4.3.0.0 docker image. I am not sure how the error should be interpreted and thus would like to seek your advice on debugging. Since the entire cohort contains 75 samples, I omitted some verbose debug messages in the error log below. ```; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/paedyl01/disk1/louisshe/work/NGS/wdl/test_workflow_cnv/germline/cromwell-executions/CNVGermlineCohortWorkflow/d53c0a12-6b07-4f74-acb; 21:05:38.275 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/gatk/gatk-package-4.3.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 21:05:38.297 DEBUG NativeLibraryLoader - Extracting libgkl_compression.so to /paedyl01/disk1/louisshe/tmp/gatk/libgkl_compression8230524266824482022.so; 21:05:38.388 INFO GermlineCNVCaller - ------------------------------------------------------------; 21:05:38.388 INFO GermlineCNVCaller - The Genome Analysis Toolkit (GATK) v4.3.0.0; 21:05:38.388 INFO GermlineCNVCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 21:05:38.388 INFO GermlineCNVCaller - Executing as louisshe@paedyl02 on Linux v3.10.0-1160.11.1.el7.x86_64 amd64; 21:05:38.389 INFO GermlineCNVCaller - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_242-8u242-b08-0ubuntu3~18.04-b08; 21:05:38.389 INFO GermlineCNVCaller - Start Date/Time: August 13, 2024 9:05:38 PM GMT; 21:05:38.389 INFO GermlineCNVCaller - ------------------------------------------------------------; 21:05:38.389 INFO GermlineCNVCaller - ------------------------------------------------------------; 21:05:38.390 INFO GermlineCNVCaller - HTSJDK Version: 3.0.1; 21:05:38.390 INFO GermlineCNVCaller - Picard Version: 2.27.5; 21:05:38.390 INFO GermlineCNVCaller - Built for Spark Version: 2.4.5; 21:05:38.391 INFO GermlineCNVCaller -",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8952:440,log,log,440,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8952,1,['log'],['log']
Testability,"Dear GATK team,. I am getting errors with haplotyper of GATK 4.1.6.0 when i run gatk-variant pipeline from bcbio on one WGS sample. I am getting same error when i run using same version of GATK installed on my machine. ### Error log. [April 15, 2020 8:14:35 AM GMT] org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCaller done. Elapsed time: 0.80 minutes.; Runtime.totalMemory()=4151902208; java.lang.ArrayIndexOutOfBoundsException: 6; at org.broadinstitute.hellbender.utils.GenotypeUtils.computeDiploidGenotypeCounts(GenotypeUtils.java:70); at org.broadinstitute.hellbender.tools.walkers.annotator.ExcessHet.calculateEH(ExcessHet.java:86); at org.broadinstitute.hellbender.tools.walkers.annotator.ExcessHet.annotate(ExcessHet.java:74); at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngine.annotateContext(VariantAnnotatorEngine.java:293); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerGenotypingEngine.makeAnnotatedCall(HaplotypeCallerGenotypingEngine.java:365); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerGenotypingEngine.assignGenotypeLikelihoods(HaplotypeCallerGenotypingEngine.java:189); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerEngine.callRegion(HaplotypeCallerEngine.java:608); at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCaller.apply(HaplotypeCaller.java:212); at org.broadinstitute.hellbender.engine.AssemblyRegionWalker.processReadShard(AssemblyRegionWalker.java:200); at org.broadinstitute.hellbender.engine.AssemblyRegionWalker.traverse(AssemblyRegionWalker.java:173); at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:1048); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:139); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:191); at org.broadinstitute.hellbender.cmdline.CommandLi",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6552:229,log,log,229,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6552,1,['log'],['log']
Testability,"Dear GATK4 deveopers,. Thanks for developing this software. I'm trying to call SNVs from a BAM file using Mutect2. The BAM file is fairly small (~30MB), containing ~400,000 75bp paired-end reads mapped to mouse mitochondrial genome. Below is the command and the log:; ```; Using GATK jar /home/user/bin/GATK/4.2.0.0/gatk-package-4.2.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /home/user/bin/GATK/4.2.0.0/gatk-package-4.2.0.0-local.jar Mutect2 --input unique.bam --output unique.mutect2.g.vcf --reference chrM.fa --use-jdk-inflater true --use-jdk-deflater true --mitochondria-mode --emit-ref-confidence GVCF --disable-read-filter ReadLengthReadFilter --disable-read-filter NotDuplicateReadFilter --disable-read-filter MappingQualityAvailableReadFilter --read-filter null --dont-use-soft-clipped-bases true --max-reads-per-alignment-start 0 --min-base-quality-score 0 --soft-clip-low-quality-ends false --verbosity DEBUG; Picked up _JAVA_OPTIONS: -Xmx128g; 11:35:39.890 WARN GATKReadFilterPluginDescriptor - Values were supplied for (ReadLengthReadFilter) that is also disabled; May 31, 2021 11:35:40 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 11:35:40.175 INFO Mutect2 - ------------------------------------------------------------; 11:35:40.176 INFO Mutect2 - The Genome Analysis Toolkit (GATK) v4.2.0.0; 11:35:40.176 INFO Mutect2 - For support and documentation go to https://software.broadinstitute.org/gatk/; 11:35:40.177 INFO Mutect2 - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_144-b01; 11:35:40.177 INFO Mutect2 - Start Date/Time: May 31, 2021 11:35:39 AM EDT; 11:35:40.177 INFO Mutect2 - ------------------------------------------------------------; 11:35:40.177 INFO Mutect2 - -----------------------------------",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7281:262,log,log,262,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7281,1,['log'],['log']
Testability,"Dear Sir or Madame, . I am testing the germline CNV tools (GATK version 4.0.3.0). I know it is still in beta but maybe you can tell me what this error is about. . ```; 13:16:06.332 INFO gcnvkernel.tasks.inference_task_base - (sampling epoch 1): 0%| | 0/100 [00:00<?, ?it/s]; 13:16:08.494 INFO gcnvkernel.tasks.inference_task_base - (sampling epoch 1) relative error: 1.0000 +/- 0.0000: 1%|1 | 1/100 [00:02<03:33, 2.16s/it]; 13:16:10.652 INFO gcnvkernel.tasks.inference_task_base -; Stderr: Traceback (most recent call last):; File ""/tmp/die9s/cohort_determine_ploidy_and_depth.861556744637254264.py"", line 106, in <module>; gcnvkernel.io_ploidy.PloidyModelWriter(ploidy_config, ploidy_workspace,; AttributeError: module 'gcnvkernel.io.io_ploidy' has no attribute 'PloidyModelWriter'. at org.broadinstitute.hellbender.utils.python.PythonExecutorBase.getScriptException(PythonExecutorBase.java:75); at org.broadinstitute.hellbender.utils.runtime.ScriptExecutor.executeCuratedArgs(ScriptExecutor.java:126); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeArgs(PythonScriptExecutor.java:170); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeScript(PythonScriptExecutor.java:151); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeScript(PythonScriptExecutor.java:121); at org.broadinstitute.hellbender.tools.copynumber.DetermineGermlineContigPloidy.executeDeterminePloidyAndDepthPythonScript(DetermineGermlineContigPloidy.java:365); at org.broadinstitute.hellbender.tools.copynumber.DetermineGermlineContigPloidy.doWork(DetermineGermlineContigPloidy.java:263); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:134); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:179); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:198); at org.broadinstitute.hellbender.Main.runCommandLin",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4679:27,test,testing,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4679,1,['test'],['testing']
Testability,"Dear developer,. We have finished the annotation of gCNV events identified by GATK Germline Copy Number Variation calling pipeline. And we got very exciting results to find several potential susceptibility genes with published literature evidence. But another cooperative team cannot find the same results or similar frequency from the same data, based on the combination algorithm of log R Ratio and B Allele Frequency. It seems that the GATK germline CNV calling pipeline did not use log R Ratio or B Allele Frequency method from SNP data, right? We have discussions about this, and my collogues think that potential CNV events should be supported by the log R Ratio and B Allele Frequency evidence, even though they seem look good in IGV with BAM file. Or they may be not accepted by others. What do you think about this? Dose GATK algorithm have some advantages to ignore LRR or BAF method. Do you have some method or explanation to solve my collogues’ concerning?. Best regards.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6407:385,log,log,385,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6407,3,['log'],['log']
Testability,"Dear developer:; We installed the gatk4.4 and we want to used the GenomicsDBImport. However, we encountered a problem that made me feel very confused and could not be solved. We had not encountered this problem before, because I was relatively familiar with GATK.; Best day!. Code:; /home/test/Software/gatk-4.4.0.0/gatk GenomicsDBImport \; > -V /home/test/Software/gatk-4.4.0.0/test/SRR11306995.gvcf.gz \; > -V /home/test/Software/gatk-4.4.0.0/test/SRR11306996.gvcf.gz \; > --intervals NC_010443.5 \; > --genomicsdb-workspace-path /home/test/Software/gatk-4.4.0.0/test/02. Erro:; 10:19:39.332 INFO GenomicsDBImport - ------------------------------------------------------------; 10:19:39.334 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.4.0.0; 10:19:39.335 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 10:19:39.335 INFO GenomicsDBImport - Executing as test@yang301 on Linux v5.15.0-71-generic amd64; 10:19:39.335 INFO GenomicsDBImport - Java runtime: OpenJDK 64-Bit Server VM v17.0.3+7; 10:19:39.335 INFO GenomicsDBImport - Start Date/Time: ; 10:19:39.335 INFO GenomicsDBImport - ------------------------------------------------------------; 10:19:39.335 INFO GenomicsDBImport - ------------------------------------------------------------; 10:19:39.336 INFO GenomicsDBImport - HTSJDK Version: 3.0.5; 10:19:39.336 INFO GenomicsDBImport - Picard Version: 3.0.0; 10:19:39.336 INFO GenomicsDBImport - Built for Spark Version: 3.3.1; 10:19:39.336 INFO GenomicsDBImport - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 10:19:39.337 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 10:19:39.337 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 10:19:39.337 INFO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 10:19:39.337 INFO GenomicsDBImport - Deflater: IntelDeflater; 10:19:39.337 INFO GenomicsDBImport - Inflater: IntelInflater; 10:19:39.337 INF",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8517:289,test,test,289,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8517,8,['test'],['test']
Testability,"Dear developers,; At present, I am using GATK's CombineGVCFs module in AWS platform to merge gvcf of 30 samples respectively according to different chromosomes. This species has 10 chromosomes, so a total of 10 CombineGVCFs tasks are carried out in parallel (10 EC2 virtual machines are opened respectively). The input gvcf file is stored in S3 and mounted to the EC2 VM. In this process, java.io.IOException occurs after some samples are analyzed: The Transport endpoint is not connected, but the merged gvcf file and its index are still produced. I did not find any feedback about GATK relation on the Internet, so I would like to know the reason for the error and why some staining machines reported errors. Some will not report errors, in addition, will the gvcf file generated after the ""Transport endpoint is not connected"" prompt be used? At present, I have tried gatk4.5, 4.4, 4.2 and other versions, and this has happened. Paste the run log as follows:. 06:26:14.775 INFO  NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/gatk/gatk-package-4.5.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 06:26:14.867 INFO  CombineGVCFs - ------------------------------------------------------------; 06:26:14.869 INFO  CombineGVCFs - The Genome Analysis Toolkit (GATK) v4.5.0.0; 06:26:14.869 INFO  CombineGVCFs - For support and documentation go to https://software.broadinstitute.org/gatk/; 06:26:14.869 INFO  CombineGVCFs - Executing as root@ip-10-1-156-254.cn-northwest-1.compute.internal on Linux v4.14.334-252.552.amzn2.x86_64 amd64; 06:26:14.869 INFO  CombineGVCFs - Java runtime: OpenJDK 64-Bit Server VM v17.0.9+9-Ubuntu-122.04; 06:26:14.869 INFO  CombineGVCFs - Start Date/Time: March 13, 2024 at 6:26:14 AM GMT; 06:26:14.869 INFO  CombineGVCFs - ------------------------------------------------------------; 06:26:14.869 INFO  CombineGVCFs - ------------------------------------------------------------; 06:26:14.870 INFO  CombineGVCFs - HTSJDK Version: 4.1.0; 06:2",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8735:946,log,log,946,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8735,1,['log'],['log']
Testability,Debug Genomicsdb cloud tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5216:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5216,1,['test'],['tests']
Testability,Decrease epsilon so production exome JG tests pass,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6534:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6534,1,['test'],['tests']
Testability,Default is previous behavior. Added testing. Note that this change may need to be made in picard as well.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3250:36,test,testing,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3250,1,['test'],['testing']
Testability,Defaulting to WGS.; Note that I had to thread the weighted bed file through (and a flag to use it). As this will also be needed to run exomes. Passing (finally!) Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/199f2e66-4b4b-478c-9370-47a760d3fab2).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8429:174,Test,Test,174,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8429,1,['Test'],['Test']
Testability,Defaulting to WGS.; Note that I had to thread the weighted bed file through (and a flag to use it). As this will also be needed to run exomes. Successful Joint Calling run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/32d9dfcc-a5c8-4f95-9a5f-f0fbf7294bcf).; Successful Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/65973408-77d4-41a4-9277-6697efdc88fc),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8426:327,test,test,327,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8426,1,['test'],['test']
Testability,"Defaults.CUSTOM_READER_FACTORY :; 17:43:53.163 INFO ValidateVariants - Defaults.EBI_REFERENCE_SERVICE_URL_MASK : http://www.ebi.ac.uk/ena/cram/md5/%s; 17:43:53.163 INFO ValidateVariants - Defaults.NON_ZERO_BUFFER_SIZE : 131072; 17:43:53.163 INFO ValidateVariants - Defaults.REFERENCE_FASTA : null; 17:43:53.163 INFO ValidateVariants - Defaults.SAM_FLAG_FIELD_FORMAT : DECIMAL; 17:43:53.163 INFO ValidateVariants - Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 17:43:53.163 INFO ValidateVariants - Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 17:43:53.163 INFO ValidateVariants - Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 17:43:53.163 INFO ValidateVariants - Defaults.USE_CRAM_REF_DOWNLOAD : false; 17:43:53.163 INFO ValidateVariants - Deflater IntelDeflater; 17:43:53.163 INFO ValidateVariants - Inflater IntelInflater; 17:43:53.163 INFO ValidateVariants - Initializing engine; 17:43:53.270 INFO FeatureManager - Using codec VCFCodec to read file file:///Users/louisb/Workspace/gatk/src/test/resources/org/broadinstitute/hellbender/tools/walkers/ValidateVariants/validationExampleGood.vcf; 17:43:53.287 INFO FeatureManager - Using codec VCFCodec to read file file:///Users/louisb/Workspace/gatk/src/test/resources/org/broadinstitute/hellbender/tools/walkers/ValidateVariants/validationExampleGood.vcf; 17:43:53.291 WARN IndexUtils - Feature file ""/Users/louisb/Workspace/gatk/src/test/resources/org/broadinstitute/hellbender/tools/walkers/ValidateVariants/validationExampleGood.vcf"" appears to contain no sequence dictionary. Attempting to retrieve a sequence dictionary from the associated index file; 17:43:53.293 INFO ValidateVariants - Done initializing engine; 17:43:53.294 INFO ProgressMeter - Starting traversal; 17:43:53.294 INFO ProgressMeter - Current Locus Elapsed Minutes Records Processed Records/Minute; 17:43:53.302 INFO ValidateVariants - Shutting down engine; [March 21, 2017 5:43:53 PM EDT] org.broadinstitute.hellbender.tools.walkers.variantutils.ValidateVariants don",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2509:3270,test,test,3270,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2509,1,['test'],['test']
Testability,Dek rename sample in vcf test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/858:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/858,1,['test'],['test']
Testability,DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140); Caused by: java.lang.RuntimeException: java.lang.NoSuchMethodError: com.google.common.base.Stopwatch.createStarted()Lcom/google/common/base/Stopwatch;; at com,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:2000,test,testng,2000,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,1,['test'],['testng']
Testability,DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:133); at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:83); at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(Reflectio,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1638:2215,test,testng,2215,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1638,2,['test'],['testng']
Testability,"DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:659); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:845); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1153); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:771); at org.testng.TestRunner.run(TestRunner.java:621); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1199); at org.testng.TestNG.runSuitesLocally(TestNG.java:1124); at org.testng.TestNG.run(TestNG.java:1032); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140). Jul 01, 2015 2:33:37 PM org.reflections.Reflections scan; ```. The fact that it doesn't show up for some users means its likely to be an environmental differe",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/609:2582,test,testng,2582,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/609,1,['test'],['testng']
Testability,Delete unused CNV test resources.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3902:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3902,1,['test'],['test']
Testability,Deleted unused CNV test files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3907:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3907,1,['test'],['test']
Testability,"DenoiseReadCounts - HTSJDK Defaults.COMPRESSION_LEVEL : 1; 20:08:45.223 INFO DenoiseReadCounts - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 20:08:45.223 INFO DenoiseReadCounts - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 20:08:45.223 INFO DenoiseReadCounts - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 20:08:45.223 INFO DenoiseReadCounts - Deflater: IntelDeflater; 20:08:45.223 INFO DenoiseReadCounts - Inflater: IntelInflater; 20:08:45.223 INFO DenoiseReadCounts - GCS max retries/reopens: 20; 20:08:45.223 INFO DenoiseReadCounts - Using google-cloud-java patch 6d11bef1c81f885c26b2b56c8616b7a705171e4f from https://github.com/droazen/google-cloud-java/tree/dr_all_nio_fixes; 20:08:45.223 INFO DenoiseReadCounts - Initializing engine; 20:08:45.223 INFO DenoiseReadCounts - Done initializing engine; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 20:08:45.300 INFO DenoiseReadCounts - Reading read-counts file (BT1813.counts.hdf5)...; HDF5-DIAG: Error detected in HDF5 (1.8.14) thread 0:; #000: /mnt/scr1/abyrne/HDFJava-platypus-2.11/native/HDF5-prefix/src/HDF5/src/H5F.c line 604 in H5Fopen(): unable to open file; major: File accessibilty; minor: Unable to open file; #001: /mnt/scr1/abyrne/HDFJava-platypus-2.11/native/HDF5-prefix/src/HDF5/src/H5Fint.c line 1085 in H5F_open(): unable to read superblock; major: File accessibilty; minor: Read failed; #002: /mnt/scr1/abyrne/HDFJava-platypus-2.11/native/HDF5-prefix/src/HDF5/src/H5Fsuper.c line 277 in H5F_super_read(): file signature not found; major: File accessibilty; minor: Not an HDF5 file; 20:08:49.800 INFO DenoiseReadCounts - Shutting down engine; [May 18, 2021 8:08:49 PM EDT] org.broadinstitute.hellbender.tools.copynumber.DenoiseReadCounts done. Elapsed time: 0.08 minutes.; Runtime.totalMemory()=1789919232; org",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7258:3760,log,logging,3760,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7258,1,['log'],['logging']
Testability,"Dependent on HTSJDK release after https://github.com/samtools/htsjdk/pull/1544. Fixes #7111 . - Added optional argument `--ignore-non-ref-in-types` to support correct handling of VariantContexts that contain a NON_REF allele; - Default behavior does not change; - Note that this only enables correct handling of GVCF input. The filtered output files are VCF (not GVCF) files, since reference blocks are not extended when a variant is filtered out; - Added integration test",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7193:468,test,test,468,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7193,1,['test'],['test']
Testability,DepthOfCoverage logger,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6621:16,log,logger,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6621,1,['log'],['logger']
Testability,"Despite much development work in the past year to iron the bugs out of htsjdk's cram implementation, there is still a need for much better, more robust tests, as we keep running into new issues. In particular, we need roundtrip bam -> cram -> bam tests on non-trivially-sized inputs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1661:152,test,tests,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1661,2,['test'],['tests']
Testability,Determine how to manage test data in the gs://hellbender bucket,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/739:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/739,1,['test'],['test']
Testability,Determine why FTZ gets unset during integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1771:48,test,tests,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1771,1,['test'],['tests']
Testability,DetermineContigPloidy BETA AssertionError CNV WDL,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5738:27,Assert,AssertionError,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5738,1,['Assert'],['AssertionError']
Testability,Develop test(s) to ensure consistency between MarkDuplicatesSpark and MarkDuplicates,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5610:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5610,1,['test'],['test']
Testability,Different tests store their test data in different places. Some still have common files dumped into the base test resources folder. I think we should standardize all the test data paths. I propose `src/test/resources/<package name>/<class being tested>/` as the base path for all test files for a specific class. . What do others think?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/445:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/445,7,['test'],"['test', 'tested', 'tests']"
Testability,Disable CNNVariantPipelineTest.testTrainingReadModel until failures are resolved.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6331:31,test,testTrainingReadModel,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6331,1,['test'],['testTrainingReadModel']
Testability,Disable SortSamSparkIntegrationTest.testSortBAMsSharded(),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6635:36,test,testSortBAMsSharded,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6635,1,['test'],['testSortBAMsSharded']
Testability,Disable non-docker unit/integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3294:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3294,1,['test'],['tests']
Testability,Disable test suite parallelism,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/307:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/307,1,['test'],['test']
Testability,"Disable the red ""X"" from failing codeCov builds and delay the posting of coverage information to complete test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7817:106,test,test,106,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7817,1,['test'],['test']
Testability,Disabling some spark dataproc tests because of dependency issues.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7170:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7170,1,['test'],['tests']
Testability,DiscordanceNoSampleSpecified.vcf; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/expected/testSelectVariants_FileWithoutInfoLineInHeaderWithOverride.vcf; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/expected/testSelectVariants_SelectMultiAllelicExcludeNonVar.vcf; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/filteringDepthInFormat.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/haploid-multisample.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/selectVariantsInfoField.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/test.dup.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/tetra-diploid.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/tetraploid-multisample-sac.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/tetraploid-multisample.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/vcfexample2DiscordanceConcordance.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/vcfexample2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionary/exampleBAM.sam; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/UpdateVCFSequenceDictionary/exampleFASTA.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/VariantsToTable/expected.soap_gatk_annotated.AMD.table; src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/VariantsToTable/multiallelic_gt.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:64994,test,test,64994,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Discovered by running the autogenerated tests for autogenerated WDL.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6700:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6700,1,['test'],['tests']
Testability,Distribution/unmapped.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/add_comments_to_bam.bam; src/test/resources/org/broadinstitute/hellbender/tools/add_comments_to_bam.sam; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.2.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.3.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.4.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.5.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.6.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.7.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.8.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.1.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.2.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.3.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.4.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.5.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.fakeSitesForTesting.b37.chr17.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.fakeSitesForTesting.b37.chr20.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.manyObservations.full.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/bqsr.manyObservations.piece.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEU,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:17090,test,test,17090,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Do the equivalent of https://github.com/broadinstitute/gatk/issues/2818 for the unit tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2819:85,test,tests,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2819,1,['test'],['tests']
Testability,"Docker image added---I think we'll want to implement whatever we are doing for the jars for the docker images in parallel. I'm planning to add an additional python test to this and then I want to dig into how to make sure they run during docker build. outside the scope for this specific round of python testing, but it will be worth reaching out the the coworker who spotted both previous clinvar issues to ask for additional spot testing cases",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7756:164,test,test,164,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7756,3,['test'],"['test', 'testing']"
Testability,Docker images do not need to be tested w/ OpenJDK vs. OracleJDK,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2748:32,test,tested,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2748,1,['test'],['tested']
Testability,Docker integration tests intermittently hit hard travis limit of 50 minutes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2808:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2808,1,['test'],['tests']
Testability,Docker tests increased wall-clock time of the test suite by 30%+,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2965:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2965,2,['test'],"['test', 'tests']"
Testability,Docker tests should upload TestNG report to bucket,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2817:7,test,tests,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2817,2,"['Test', 'test']","['TestNG', 'tests']"
Testability,"Does:. * utils class cleanups; * removing SGA-related phantom test files (not sure why they were not removed previously); * integration test for new interpretation tool (precursor of #5077 ). Note: ; * to fully resolve #5077, we need to deal with #5111 first.; * the large number of files and lines change is mostly due to removing SGA-related phantom test files. @TedBrookings tagging you as the victim for reviewing.; Please feel free to reassign.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5116:62,test,test,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5116,3,['test'],['test']
Testability,Doing some empirical data testing I found some instance of reads that have no single based aligned with the reference. E.g. CIGAR: 50I2S so insertion followed by soft-clip. That causes ReadWalker to crash when trying to create SimpleInterval on the read with a IAE. I guess the solution is to add additional Wellformed filter.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/373:26,test,testing,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/373,1,['test'],['testing']
Testability,"Don't print the very long and misleading ""The following contigs are present in b37 and missing in the input VCF sequence dictionary"" log message when we're not even doing b37/hg19 conversion. Users are getting log messages like this even when they have an hg38 dictionary:. 16:21:32.764 INFO FuncotatorUtils - The following contigs are present in b37 and missing in the input VCF sequence dictionary:; 16:21:32.767 INFO FuncotatorUtils - 1 (len=249250621,assembly=GRCh37); 16:21:32.767 INFO FuncotatorUtils - 2 (len=243199373,assembly=GRCh37); 16:21:32.767 INFO FuncotatorUtils - 3 (len=198022430,assembly=GRCh37); 16:21:32.767 INFO FuncotatorUtils - 4 (len=191154276,assembly=GRCh37); 16:21:32.767 INFO FuncotatorUtils - 5 (len=180915260,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 6 (len=171115067,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 7 (len=159138663,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 8 (len=146364022,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 9 (len=141213431,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 10 (len=135534747,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 11 (len=135006516,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 12 (len=133851895,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 13 (len=115169878,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 14 (len=107349540,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 15 (len=102531392,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 16 (len=90354753,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 17 (len=81195210,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 18 (len=78077248,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 19 (len=59128983,assembly=GRCh37); 16:21:32.768 INFO FuncotatorUtils - 20 (len=63025520,assembly=GRCh37); 16:21:32.769 INFO FuncotatorUtils - 21 (len=48129895,assembly=GRCh37); 16:21:32.769 INFO FuncotatorUtils - 22 (len=51304566,assembly=GRCh37); .....",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8758:133,log,log,133,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8758,2,['log'],['log']
Testability,"Dont just use the default of 6--pass a param for the value instead (in the wdl and gatk tool). I ran a smoke test and the filtering completed successfully, but I'm not totally sure how to make sure it used the passed in param over the default. How can I check this?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7221:109,test,test,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7221,1,['test'],['test']
Testability,Double-check validation test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/557:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/557,1,['test'],['test']
Testability,During the discussion in fixing a bug in the GenotypeQuality score #7120 it came to light that when using posteriors for genotyping that the calculation in getGQLog10FromPosteriors() for computing the GQ is doing something a little different from the other codepath for calculating the GQ score. Specifically it is calculating the GQ as the difference in score between the first (selected) genotype and the second best genotype (after normalization for both) plus the log math addition of the other scores in the array. What this means in practice is that the score will be less than the first minus the second calculation especially if there were other marginal options with similar scores to the calls. This approach was implemented for the DRAGEN-GATK pipleine and currently will only change the scores there. Its worth discussing if we need this extra step or can rely on the old GQ calculation. See #7120 for more discussion.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7235:468,log,log,468,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7235,1,['log'],['log']
Testability,"EDIT: Parameters are now exposed as individual arguments, so the following quoted text is outdated; see below for more details. > Adds the parameters `--dangling-end-smith-waterman-parameters-table <GATKPath>`, `--haplotype-to-reference-smith-waterman-parameters-table <GATKPath>`, and `--read-to-haplotype-smith-waterman-parameters-table <GATKPath>` to HaplotypeCaller and Mutect2. This allows for input via a TSV containing the column headers `MATCH_VALUE\tMISMATCH_PENALTY\tGAP_OPEN_PENALTY\tGAP_EXTEND_PENALTY` and one row of integers. Enables investigation of #2498 and #5564. Closes #6863 . Just opening this in case anyone wants to play around with it. I'll do some further testing on human and malaria data, but we have already found some cases in the latter for which changing some of the quizzical values to more reasonable ones yields immediate benefits. If anyone has any suggestions for possible evaluations, I'm all ears!. A few notes:. - I still need to add doc strings for the new arguments.; - Per https://github.com/broadinstitute/gatk/issues/6863#issuecomment-705081291, we can wait until after the DRAGEN-GATK dust settles to review/reevaluate/merge.; - At that time, I'll add a few simple integration tests to check that I've properly bubbled up each set of parameters.; - The reviewer might find the diagram at https://github.com/broadinstitute/gatk/issues/6863#issuecomment-707919816 useful.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6885:681,test,testing,681,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6885,2,['test'],"['testing', 'tests']"
Testability,"EMR - 5.13.0; Spark - 2.3.0. Running on m5.2xlarge 1 Master and 2 Worker nodes.; While running Haplotype Caller Spark on EMR, running into the stack overflow error. ; `[hadoop@ip-xx.xx.xx.xx gatk]$ ./gatk HaplotypeCallerSpark -I hdfs:///user/hadoop/testdata/TestData.cram -R hdfs:///user/hadoop/reference/hg38.fasta -O hdfs:///user/hadoop/output/testgatkvcf.vcf \; > -- \; > --spark-runner SPARK --spark-master yarn; Using GATK jar /home/hadoop/gatk/build/libs/gatk-spark.jar; Running:; /usr/lib/spark/bin/spark-submit --master yarn --conf spark.driver.userClassPathFirst=false --conf spark.io.compression.codec=lzf --conf spark.driver.maxResultSize=0 --conf spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.kryoserializer.buffer.max=512m --conf spark.yarn.executor.memoryOverhead=600 /home/hadoop/gatk/build/libs/gatk-spark.jar HaplotypeCallerSpark -I hdfs:///user/hadoop/testdata/TestData -R hdfs:///user/hadoop/reference/hg38.fasta -O hdfs:///user/hadoop/output/testgatkvcf.vcf --spark-master yarn; 19/04/08 19:01:40 WARN SparkConf: The configuration key 'spark.yarn.executor.memoryOverhead' has been deprecated as of Spark 2.3 and may be removed in the future. Please use the new key 'spark.executor.memoryOverhead' instead.; 19:01:43.413 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 19:01:43.565 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/hadoop/gatk/build/libs/gatk-spark.jar!/com/intel/gkl/na",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5869:249,test,testdata,249,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5869,3,"['Test', 'test']","['TestData', 'testdata', 'testgatkvcf']"
Testability,EN they do something different that we had to replicate to achieve concordance. Dragen still performs equivalent modifications for steps 1-3 as they apply to the reads but rather than performing step 4 and using those reads for genotype assignment it instead for genotyping reaches back for each read (that has survived filtering) to its original BAM alignment (before being unclipped/hardclipped) and uses those reads for FRD/BQD calling. When running GATK with the new argument `--use-original-alignments-for-genotyping-overlap` this is what happens as well (step 4 is skipped entirely in addition). The results were somewhat surprising (listed below): . ![RealignmentPlotIndels](https://user-images.githubusercontent.com/16102845/87588690-13fc4680-c6b2-11ea-98e9-4c69259c2869.png); ![RealignmentPlotSNPs](https://user-images.githubusercontent.com/16102845/87588692-1494dd00-c6b2-11ea-96dc-ba06f45357c2.png). This says that running GATK in DRAGEN mode without realigning reads performs slightly better for low complexity region SNPs than it does with realignment. This could perhaps be a side effect of the BQD algorithm as it cares about the specific bases that are applied for SNPs. I have theorized that perhaps the explanation for this behavior has to do with the fact that the reads at stage 4 have undergone 2 different rounds of clipping (at stages 1 and 2) and could in actuality be as short as 11 bases long by this stage. If this is indeed the problem then realigning the reads (without anchoring information from the rest of the read that might have resulted in more accurate placement) might well result in significant noise as to where reads actually get placed after realignment. A necessary step to completing this ticket would have to be evaluating what sites account for the lost sensitivity and understanding why the realignment is responsible and evaluating if there is not a better way to perform the realignment that can handle these short stubs if indeed they are the problem.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6706:3757,stub,stubs,3757,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6706,1,['stub'],['stubs']
Testability,"ERROR The class ""org.apache.log4j.Appender"" was loaded by ; log4j:ERROR [sun.misc.Launcher$AppClassLoader@7506e922] whereas object of type ; log4j:ERROR ""org.apache.log4j.FileAppender"" was loaded by [org.apache.spark.util.ChildFirstURLClassLoader@28c4711c].; log4j:ERROR Could not instantiate appender named ""file"".; log4j:ERROR A ""org.apache.log4j.ConsoleAppender"" object is not assignable to a ""org.apache.log4j.Appender"" variable.; log4j:ERROR The class ""org.apache.log4j.Appender"" was loaded by ; log4j:ERROR [sun.misc.Launcher$AppClassLoader@7506e922] whereas object of type ; log4j:ERROR ""org.apache.log4j.ConsoleAppender"" was loaded by [org.apache.spark.util.ChildFirstURLClassLoader@28c4711c].; log4j:ERROR Could not instantiate appender named ""console"".; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; log4j:WARN No appenders could be found for logger (org.apache.spark.SparkContext).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; ```. By backtracking, the problem goes away at commit d827adc81266c788482c9cb4f119f2e3c1e152b8. Since spark-submmit was broken after 8af8bcc920ee5f393562e3e632d9ccd4acd9a638, the bug could be anywhere between commit 8af8bcc920ee5f393562e3e632d9ccd4acd9a638 and d25894b3bc80e450210cf8a9124c4171e65f3717. The log4j.property file is below:; ```; # Set everything to be logged to the console; log4j.rootCategory=WARN,console; log4j.appender.console=org.apache.log4j.ConsoleAppender; log4j.appender.console.target=System.out; log4j.appender.console.layout=org.apache.log4j.PatternLayout; log4j.appender.console.layout.ConversionPattern=%d{yy/MM/dd HH:mm:ss} %p %c{1}: %m%n. log4j.appender.file=org.apache.log4j.FileAppender; log4j.appender.file.file=/tmp/logs/spark/log4j-block_manager-output.txt; log4j.appender.file.layout=org.apache.log4j.PatternLayout; log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %p %c{1}: %m%n. # S",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2734:1705,log,logging,1705,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2734,1,['log'],['logging']
Testability,ES_50/cnv_calling/GATK_gCNV/infos/cohort_all/cohort_40-calls --calls-shard-path /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/cohort_all/cohort_41-calls --calls-shard-path /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/cohort_all/cohort_42-calls --calls-shard-path /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/cohort_all/cohort_43-calls --calls-shard-path /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/cohort_all/cohort_44-calls --calls-shard-path /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/cohort_all/cohort_45-calls --contig-ploidy-calls /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/ploidy/ploidy-calls --allosomal-contig chrX --allosomal-contig chrY --sample-index 0 --output-genotyped-intervals /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/output/R18002110LU01-XG3351_combined_cohort.vcf --output-genotyped-segments /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/output/R18002110LU01-XG3351_combined_segment_cohort.vcf --output-denoised-copy-ratios /data/xiangxd/project/test/PD_WES_50/cnv_calling/GATK_gCNV/infos/output/R18002110LU01-XG3351_combined_ratio.txt; 03:15:18.730 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/data/xiangxd/project/software/callers/gatk_4.4/gatk-package-4.4.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 03:15:18.952 INFO PostprocessGermlineCNVCalls - ------------------------------------------------------------; 03:15:18.959 INFO PostprocessGermlineCNVCalls - The Genome Analysis Toolkit (GATK) v4.4.0.0; 03:15:18.959 INFO PostprocessGermlineCNVCalls - For support and documentation go to https://software.broadinstitute.org/gatk/; 03:15:18.960 INFO PostprocessGermlineCNVCalls - Executing as xiangxd@cu07 on Linux v3.10.0-327.el7.x86_64 amd64; 03:15:18.961 INFO PostprocessGermlineCNVCalls - Java runtime: Java HotSpot(TM) 64-Bit Server VM v20.0.2+9-78; 03:15:18.962 INFO ,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8776:18518,test,test,18518,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8776,1,['test'],['test']
Testability,EUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.noMD.noBQSR.md.bqsr.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.ch20.4379150-4379157.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.10m-10m100.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.10m-10m100.cram.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b36.excluding_sites_after_129.chr1_1k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b37.excluding_sites_after_129.chr17_69k_70k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.20.10m-10m100.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.21.10m-10m100.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.excluding_sites_after_129.ch20.1m-1m1k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.noMD.noBQSR.md.bqsr.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.postRecalibrated.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.recalibrated.DIQ.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.2inputs.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.indels_context_size_4.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.low_quality_tail_5.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.mismatches_context_size_4.recal.txt; src/test/resources/org/broadinstitute/hellbender,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:19463,test,test,19463,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Each(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94); 	at com.sun.proxy.$Proxy2.stop(Unknown Source); 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:132); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAcces,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:3855,test,testing,3855,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,2,['test'],['testing']
Testability,Each(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36); 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33); 	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94); 	at com.sun.proxy.$Proxy5.stop(Unknown Source); 	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:132); 	at java.base/jdk.internal.refl,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:3438,test,testing,3438,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['test'],['testing']
Testability,Echo Scale Test VDS Updates [VS-1095] [VS-1112],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8602:11,Test,Test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8602,1,['Test'],['Test']
Testability,Echo log file after failed travis run.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7020:5,log,log,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7020,1,['log'],['log']
Testability,Eliminate error message in travis logs by creating the srcdir before copying to it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5878:34,log,logs,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5878,1,['log'],['logs']
Testability,"Empirical testing has shown that this tool performs best at scale with cloud buffering; disabled. With cloud buffering on and thousands of concurrent GenomicsDBImport tasks,; we do too many simultaneous GCS accesses (since the prefetcher spawns a new thread for each; reader upon a query) and start seeing intermittent failures, even with aggressive retries.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3110:10,test,testing,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3110,1,['test'],['testing']
Testability,Enable previously broken and disabled CRAM index query test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1962:55,test,test,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1962,1,['test'],['test']
Testability,Enable running of Funcotator in the M2 WDL tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4807:43,test,tests,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4807,1,['test'],['tests']
Testability,Enable working cloud tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/824:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/824,1,['test'],['tests']
Testability,Enabling MD tests that now pass.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1041:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1041,1,['test'],['tests']
Testability,Enabling the first cloud test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/820:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/820,1,['test'],['test']
Testability,"Ensure CRAM test data in HTSJDK is valid and up-to-date, and large enough to be meaningful in tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5211:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5211,2,['test'],"['test', 'tests']"
Testability,"Error Message from VariantAnnotator is a NullPointerException. The user found the issue, but the error message could be improved. The issue involves the sample names from the VCF not existing in the BAM file. . This request was created from a contribution made by Wout Megchelenbrink on October 21, 2020 12:29 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360073989631-VariantAnnotator-returns-NullPointerException](https://gatk.broadinstitute.org/hc/en-us/community/posts/360073989631-VariantAnnotator-returns-NullPointerException). \--. If you are seeing an error, please provide(REQUIRED) : ; ; **a) GATK version used:**. 4.1.8.1. **b) Exact command used:**. gatk VariantAnnotator -V WES.vcf.gz -I WES.bam --output WES\_VA.vcf -A Coverage. **c) Entire error log:**. java.lang.NullPointerException ; ; at org.broadinstitute.hellbender.tools.walkers.haplotypecaller.AssemblyBasedCallerUtils.splitReadsBySample(AssemblyBasedCallerUtils.java:162) ; ; at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotator.makeLikelihoods(VariantAnnotator.java:244) ; ; at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotator.apply(VariantAnnotator.java:234) ; ; at org.broadinstitute.hellbender.engine.VariantWalker.lambda$traverse$0(VariantWalker.java:104) ; ; at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183) ; ; at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195) ; ; at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177) ; ; at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195) ; ; at java.base/java.util.Iterator.forEachRemaining(Iterator.java:133) ; ; at java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801) ; ; at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484) ; ; at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPip",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6915:784,log,log,784,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6915,1,['log'],['log']
Testability,Error; 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.overwriteOrCreateWorkspace(GenomicsDBImport.java:644); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.onTraversalStart(GenomicsDBImport.java:386); 	at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:873); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:128); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:185); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:204); 	at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:156); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:142); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:183); 	at org.broadinstitute.hellbender.CommandLineProgramTest.runCommandLine(CommandLineProgramTest.java:32); 	at org.broadinstitute.hellbender.utils.test.CommandLineProgramTester.runCommandLine(CommandLineProgramTester.java:92); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.writeToGenomicsDB(GenomicsDBImportIntegrationTest.java:180); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testCommandIncludedInOutputHeader(GenomicsDBImportIntegrationTest.java:422); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMe,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4062:1035,test,test,1035,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4062,1,['test'],['test']
Testability,Errors in spark tests when connected to Broad VPN,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1534:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1534,1,['test'],['tests']
Testability,"Even though the Fisher Exact Test here is based on the R implementation, there was an edge case when the hypergeometric distribution we're getting the probabilities from only has one possible value. The difference in resulting p-value was coming from the fact that the apache Math3 HypergeometricDistribution behaves differently at this edge case than dhyper in R. . Adresses #2292",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2307:29,Test,Test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2307,1,['Test'],['Test']
Testability,"Every overlapping read pair in HaplotypeCaller and Mutect2 ; goes through `FragmentUtils.adjustQualsOfOverlappingPairedFragments`, which has the following *hard-coded* logic:. ```; if ( firstReadBase == secondReadBase ) {; firstReadQuals[firstReadIndex] = Math.min(firstReadQuals[firstReadIndex], HALF_OF_DEFAULT_PCR_ERROR_QUAL);; secondReadQuals[i] = Math.min(secondReadQuals[i], HALF_OF_DEFAULT_PCR_ERROR_QUAL);; } else {; firstReadQuals[firstReadIndex] = 0;; secondReadQuals[i] = 0;; }; ```. This makes sense -- we modify the quals to reflect that sequencing errors are independent but PCR errors are not. However, `HALF_OF_DEFAULT_PCR_ERROR_QUAL` is 20, so if we start out with high-quality UMI reads we basically kill the quality and with it our SNV sensitivity. Note that in the very important application of cfDNA basically every base is an overlap. What's worse is that Mutect2 later throws out one of the reads, so that we could start out with two BQ = 60 reads and end up with one BQ = 20 read!. @fleharty @yfarjoun This is a problem. I could just make the PCR error quality an adjustable parameter, but can you think of anything else?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4958:168,log,logic,168,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4958,1,['log'],['logic']
Testability,Every travis build will upload it's test results to gs://hellbender/test/build_reports/<somepath>. The end of the build log shows the publicly accessible url for the test results.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/704:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/704,4,"['log', 'test']","['log', 'test']"
Testability,"Example tools are not documented features, and are provided for being examples for developers to build their own traversals and for testing purposes. Thus, it is unnecessary to show them in the command line help, which already contains a huge list of tools (GATK, Picard, etc). Although they can still be run from the command line if you know its existence, they won't be shown after #3486.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3696:132,test,testing,132,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3696,1,['test'],['testing']
Testability,ExcessHet + tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1487:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1487,1,['test'],['tests']
Testability,Exclude test folder from codecov scanning,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8744:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8744,1,['test'],['test']
Testability,"Exclude the field AS_YNG from VCFs extracted from GVS.; This is the merge into EchoCallset; Integration tests (run on the branch into ah_var_store) [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/ffed3910-761e-487f-98b3-c0582acc13e8); Note that I had to update the truth data (since the contents of the VCFs had changed, and that there is one failure, but it's due to a slight cost difference - which is presumably in the noise.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8734:104,test,tests,104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8734,1,['test'],['tests']
Testability,"Exclude the field AS_YNG from VCFs extracted from GVS.; This is the merge into ah_var_store to match the one into EchoCallset; Integration tests [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/5b513630-203f-4e4c-a14c-7423f300645e) - one failure for unrelated reasons.; Note that I had to update the truth data (since the contents of the VCFs had changed, and that there is one failure, but it's due to a slight cost difference - which is presumably in the noise.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8738:139,test,tests,139,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8738,1,['test'],['tests']
Testability,ExecException: Process 'Gradle Test Executor 1' finished with non-zero exit value 134; 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.process.internal.DefaultExecHandle$ExecResultImpl.assertNormalExitValue(DefaultExecHandle.java:369); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.process.internal.worker.DefaultWorkerProcess.waitForStop(DefaultWorkerProcess.java:190); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.process.internal.worker.DefaultWorkerProcessBuilder$MemoryRequestingWorkerProcess.waitForStop(DefaultWorkerProcessBuilder.java:228); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.api.internal.tasks.testing.worker.ForkingTestClassProcessor.stop(ForkingTestClassProcessor.java:122); 11:54:40.436 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.api.internal.tasks.testing.processors.RestartEveryNTestClassProcessor.endBatch(RestartEveryNTestClassProcessor.java:63); 11:54:40.437 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.api.internal.tasks.testing.processors.RestartEveryNTestClassProcessor.stop(RestartEveryNTestClassProcessor.java:57); 11:54:40.437 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35); 11:54:40.437 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24); 11:54:40.437 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.internal.dispatch.FailureHandlingDispatch.dispatch(FailureHandlingDispatch.java:29); 11:54:40.437 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] 	at org.gradle.internal.dispatch.AsyncDispatch.dispatchMessages(AsyncDispatch.java:132); 11:54:40.43,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2802:14545,test,testing,14545,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2802,1,['test'],['testing']
Testability,Execution failed for task ':gatkDoc'.; > Javadoc generation failed. ### Affected tool(s) or class(es); GATK. ### Affected version(s); 4.1.4.1; ### Description ; when trying to compile with .gradlew bundle get the error above. * What went wrong:; Execution failed for task ':gatkDoc'.; > Javadoc generation failed. Generated Javadoc options file (useful for troubleshooting): '/usr/bin/gatk/build/tmp/gatkDoc/javadoc.options'. * Try:; Run with --info or --debug option to get more log output. Run with --scan to get full insights. * Exception is:; org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':gatkDoc'.; at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.accept(ExecuteActionsTaskExecuter.java:166); at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$3.accept(ExecuteActionsTaskExecuter.java:163); at org.gradle.internal.Try$Failure.ifSuccessfulOrElse(Try.java:191); at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:156); at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:62); at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:108); at org.gradle.api.internal.tasks.execution.ResolveBeforeExecutionOutputsTaskExecuter.execute(ResolveBeforeExecutionOutputsTaskExecuter.java:67); at org.gradle.api.internal.tasks.execution.ResolveAfterPreviousExecutionStateTaskExecuter.execute(ResolveAfterPreviousExecutionStateTaskExecuter.java:46); at org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:94); at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46); at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:95); at org.gradle.api.internal.tasks.execution.SkipTa,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6466:480,log,log,480,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6466,1,['log'],['log']
Testability,Exome integration test. Passing integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/894d12a1-35b8-4a9b-850e-a11dca4b4257),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8448:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8448,2,['test'],['test']
Testability,Expand ReadsPreprocessingPipelineTestData with multi-contig tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/689:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/689,1,['test'],['tests']
Testability,Expand integration test cases in StructuralVariationDiscoveryPipelineSparkIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5077:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5077,1,['test'],['test']
Testability,Expected(GenomicsDBImportIntegrationTest.java:520); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1035); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6522:3780,Test,TestInvoker,3780,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6522,1,['Test'],['TestInvoker']
Testability,Expected(GenomicsDBImportIntegrationTest.java:521); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1104); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2192,Test,TestInvoker,2192,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,1,['Test'],['TestInvoker']
Testability,Explore whether we can use a mock for GCS,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2486:29,mock,mock,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2486,1,['mock'],['mock']
Testability,Extract testing pattern in GATKReadCoderUnitTest.testGATKReadCoding() into a canonical utility,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/644:8,test,testing,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/644,2,['test'],"['testGATKReadCoding', 'testing']"
Testability,Extract tests from PrintReadsIntegrationTest to share with Spark version,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5689:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5689,1,['test'],['tests']
Testability,"FO --QUIET false --VALIDATION_STRINGENCY STRICT --COMPRESSION_LEVEL 2 --MAX_RECORDS_IN_RAM 500000 --CREATE_INDEX true --CREATE_MD5_FILE false --GA4GH_CLIENT_SECRETS client_secrets.json --help false --version false --showHidden false --USE_JDK_DEFLATER false --USE_JDK_INFLATER false; Jun 16, 2020 11:25:05 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; [Tue Jun 16 23:25:05 CDT 2020] Executing as xxxx on Linux 3.10.0-693.11.1.el7.x86_64 amd64; OpenJDK 64-Bit Server VM 1.8.0_152-release-1056-b12; Deflater: Intel; Inflater: Intel; Provider GCS is available; Picard version: Version:4.1.7.0; [Tue Jun 16 23:25:05 CDT 2020] picard.vcf.MergeVcfs done. Elapsed time: 0.01 minutes.; Runtime.totalMemory()=605028352; To get help, see http://broadinstitute.github.io/picard/index.html#GettingHelp; htsjdk.tribble.TribbleException$MalformedFeatureFile: Unable to create BasicFeatureReader using feature file , for input source: file:///tmp/test%20a/data/calling/a.vcf.gz; at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:124); at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:81); at htsjdk.variant.vcf.VCFFileReader.<init>(VCFFileReader.java:148); at htsjdk.variant.vcf.VCFFileReader.<init>(VCFFileReader.java:98); at picard.vcf.MergeVcfs.doWork(MergeVcfs.java:174); at picard.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:305); at org.broadinstitute.hellbender.cmdline.PicardCommandLineProgramExecutor.instanceMain(PicardCommandLineProgramExecutor.java:25); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:163); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:206); at org.broadinstitute.hellbender.Main.main(Main.java:292); Caused by: java.io.FileNotFoundException: /tmp/test%20a/data/calling/a.vcf.gz (No such file or directory); at java.io.RandomAccessFile.open0(N",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6664:2735,test,test,2735,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6664,1,['test'],['test']
Testability,FO Funcotator - ------------------------------------------------------------; 14:24:33.843 INFO Funcotator - ------------------------------------------------------------; 14:24:33.844 INFO Funcotator - HTSJDK Version: 2.23.0; 14:24:33.844 INFO Funcotator - Picard Version: 2.23.3; 14:24:33.844 INFO Funcotator - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 14:24:33.844 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 14:24:33.844 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 14:24:33.844 INFO Funcotator - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 14:24:33.844 INFO Funcotator - Deflater: IntelDeflater; 14:24:33.844 INFO Funcotator - Inflater: IntelInflater; 14:24:33.844 INFO Funcotator - GCS max retries/reopens: 20; 14:24:33.844 INFO Funcotator - Requester pays: disabled; 14:24:33.844 INFO Funcotator - Initializing engine; 14:24:34.321 INFO FeatureManager - Using codec VCFCodec to read file file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/cohort.vcf.gz; 14:24:34.510 INFO Funcotator - Done initializing engine; 14:24:34.511 INFO Funcotator - Validating sequence dictionaries...; 14:24:34.550 INFO Funcotator - Processing user transcripts/defaults/overrides...; 14:24:34.551 INFO Funcotator - Initializing data sources...; 14:24:34.554 INFO DataSourceUtils - Initializing data sources from directory: funcotator_dataSources.v1.7.20200521g; 14:24:34.560 INFO DataSourceUtils - Data sources version: 1.7.2020521g; 14:24:34.560 INFO DataSourceUtils - Data sources source: ftp://gsapubftp-anonymous@ftp.broadinstitute.org/bundle/funcotator/funcotator_dataSources.v1.7.20200521g.tar.gz; 14:24:34.561 INFO DataSourceUtils - Data sources alternate source: gs://broad-public-datasets/funcotator/funcotator_dataSources.v1.7.20200521.tar.gz; 14:24:34.587 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinfor,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6926:3669,test,test,3669,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6926,1,['test'],['test']
Testability,"FO GenomicsDBImport - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 10:19:39.337 INFO GenomicsDBImport - Deflater: IntelDeflater; 10:19:39.337 INFO GenomicsDBImport - Inflater: IntelInflater; 10:19:39.337 INFO GenomicsDBImport - GCS max retries/reopens: 20; 10:19:39.338 INFO GenomicsDBImport - Requester pays: disabled; 10:19:39.338 INFO GenomicsDBImport - Initializing engine; 10:19:39.489 INFO IntervalArgumentCollection - Processing 100 bp from intervals; 10:19:39.490 INFO GenomicsDBImport - Done initializing engine; 10:19:39.948 INFO GenomicsDBLibLoader - GenomicsDB native library version : 1.4.4-ce4e1b9; 10:19:39.951 INFO GenomicsDBImport - Vid Map JSON file will be written to /home/test/Software/gatk-4.4.0.0/test/./02/vidmap.json; 10:19:39.951 INFO GenomicsDBImport - Callset Map JSON file will be written to /home/test/Software/gatk-4.4.0.0/test/./02/callset.json; 10:19:39.951 INFO GenomicsDBImport - Complete VCF Header will be written to /home/test/Software/gatk-4.4.0.0/test/./02/vcfheader.vcf; 10:19:39.951 INFO GenomicsDBImport - Importing to workspace - /home/test/Software/gatk-4.4.0.0/test/./02; 10:19:40.060 INFO GenomicsDBImport - Importing batch 1 with 2 samples; 10:19:40.075 INFO GenomicsDBImport - Shutting down engine; org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport done. Elapsed time: 0.01 minutes.; Runtime.totalMemory()=285212672; java.lang.NumberFormatException: For input string: ""G""; 	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67); 	at java.base/java.lang.Integer.parseInt(Integer.java:668); 	at java.base/java.lang.Integer.parseInt(Integer.java:786); 	at htsjdk.tribble.readers.TabixReader.getIntv(TabixReader.java:337); 	at htsjdk.tribble.readers.TabixReader.access$500(TabixReader.java:48); 	at htsjdk.tribble.readers.TabixReader$IteratorImpl.next(TabixReader.java:438); 	at htsjdk.tribble.readers.TabixIteratorLineReader.readLine(TabixIteratorLineReader.java:46); 	at htsjdk.tribble.Tabix",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8517:2781,test,test,2781,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8517,1,['test'],['test']
Testability,Factor out a GATKBaseTest for separate test resources from test utilities in BaseTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3475:39,test,test,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3475,2,['test'],['test']
Testability,Factor out a generalized VCF comparison utility for test code,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3811:52,test,test,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3811,1,['test'],['test']
Testability,Factory - read_filter_packages = [org.broadinstitute.hellbender.engine.filters]; 23:37:00.983 DEBUG ConfigFactory - annotation_packages = [org.broadinstitute.hellbender.tools.walkers.annotator]; 23:37:00.983 DEBUG ConfigFactory - cloudPrefetchBuffer = 40; 23:37:00.983 DEBUG ConfigFactory - cloudIndexPrefetchBuffer = -1; 23:37:00.983 DEBUG ConfigFactory - createOutputBamIndex = true; 23:37:00.984 INFO GermlineCNVCaller - Deflater: IntelDeflater; 23:37:00.984 INFO GermlineCNVCaller - Inflater: IntelInflater; 23:37:00.984 INFO GermlineCNVCaller - GCS max retries/reopens: 20; 23:37:00.984 INFO GermlineCNVCaller - Requester pays: disabled; 23:37:00.984 INFO GermlineCNVCaller - Initializing engine; 23:37:00.990 DEBUG ScriptExecutor - Executing:; 23:37:00.991 DEBUG ScriptExecutor - python; 23:37:00.991 DEBUG ScriptExecutor - -c; 23:37:00.991 DEBUG ScriptExecutor - import gcnvkernel. 23:38:13.336 DEBUG ScriptExecutor - Result: 0; 23:38:13.341 INFO GermlineCNVCaller - Done initializing engine; log4j:WARN No appenders could be found for logger (org.broadinstitute.hdf5.HDF5Library).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 23:38:14.588 INFO GermlineCNVCaller - Intervals specified...; 23:38:14.590 DEBUG GenomeLocParser - Prepared reference sequence contig dictionary; 23:38:14.591 DEBUG GenomeLocParser - 1 (249250621 bp); 23:38:14.591 DEBUG GenomeLocParser - 2 (243199373 bp); 23:38:14.591 DEBUG GenomeLocParser - 3 (198022430 bp); 23:38:14.591 DEBUG GenomeLocParser - 4 (191154276 bp); 23:38:14.591 DEBUG GenomeLocParser - 5 (180915260 bp); 23:38:14.592 DEBUG GenomeLocParser - 6 (171115067 bp); 23:38:14.592 DEBUG GenomeLocParser - 7 (159138663 bp); 23:38:14.592 DEBUG GenomeLocParser - 8 (146364022 bp); 23:38:14.592 DEBUG GenomeLocParser - 9 (141213431 bp); 23:38:14.592 DEBUG GenomeLocParser - 10 (135534747 bp); 23:38:14.592 DEBUG GenomeLocParser - 11 (135006516 bp); 23:38:14.592 DE,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5714:5992,log,logger,5992,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5714,1,['log'],['logger']
Testability,Fail_reads.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/MeanQualityByCycle/first5000a.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/MeanQualityByCycle/unmapped.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/QualityScoreDistribution/example_pfFail_reads.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/QualityScoreDistribution/first5000a.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/QualityScoreDistribution/originalQuals.chr1.1-1K.bam.bai; src/test/resources/org/broadinstitute/hellbender/metrics/analysis/QualityScoreDistribution/unmapped.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/add_comments_to_bam.bam; src/test/resources/org/broadinstitute/hellbender/tools/add_comments_to_bam.sam; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.2.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.3.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.4.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.5.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.6.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.7.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.8.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.1.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.2.txt; src/test/resources/org/broadinstitute/hellbender/tools/ArtificallyContaminatedBams/contamination.case.broken.3.txt; src/test/resources/org/broadinstitute/hellbe,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:16436,test,test,16436,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Fast log gammas,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2860:5,log,log,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2860,1,['log'],['log']
Testability,FastqToSam needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1222:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1222,1,['test'],['tests']
Testability,FeatureDataSource: output cache hit rate to logger.debug() upon close,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1109:44,log,logger,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1109,1,['log'],['logger']
Testability,FeatureInputs with logical names thwart shell expansion of ~,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2200:19,log,logical,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2200,1,['log'],['logical']
Testability,FeatureManager.getCodecForFile(FeatureManager.java:455); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.getCodecForFeatureInput(FeatureDataSource.java:354); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.getFeatureReader(FeatureDataSource.java:334); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:282); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:238); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:206); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:193); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:156); 	at org.broadinstitute.hellbender.testutils.VariantContextTestUtils.readEntireVCFIntoMemory(VariantContextTestUtils.java:67); 	at org.broadinstitute.hellbender.tools.funcotator.vcfOutput.VcfOutputRendererUnitTest.testExclusionListOverridesManualDefaultAnnotations(VcfOutputRendererUnitTest.java:40); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.Arra,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:1811,test,testExclusionListOverridesManualDefaultAnnotations,1811,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,1,['test'],['testExclusionListOverridesManualDefaultAnnotations']
Testability,Figure out a way to keep spark and non spark integration tests in synch,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/468:57,test,tests,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/468,1,['test'],['tests']
Testability,Figure out azure authentication in tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8612:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8612,1,['test'],['tests']
Testability,Figure out why the travis tests are running slower in the new configuration,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4989:26,test,tests,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4989,1,['test'],['tests']
Testability,FileSystemProvider.java:208); 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.getPath(CloudStorageFileSystemProvider.java:85); 	at java.nio.file.Paths.get(Paths.java:143); 	at org.broadinstitute.hellbender.utils.gcs.BucketUtilsTest.testNoIllegalArgumentException(BucketUtilsTest.java:38); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:127); ```. This should be a safe method to call. We should either refactor this method or we change NIO to no,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2707:1991,test,testng,1991,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2707,1,['test'],['testng']
Testability,Filter out SRA readers in SplitReads tests in prep for htsjdk upgrade.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1241:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1241,1,['test'],['tests']
Testability,FilterReads integration tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/876:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/876,1,['test'],['tests']
Testability,Filtration_testInvertGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask3.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMaskReversed.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testNoAction.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testSetFilteredGtoNocall.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testSetVcfFilteredGtoNocall.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testUnfilteredBecomesFilteredAndPass.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/filteredSamples.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/filteringDepthInFormat.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/filteringZInFormatWithMissing.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFilt,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:54642,test,test,54642,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"Finish porting https://github.com/broadinstitute/gsa-unstable/pull/1440.; * Changed the last band from [lastValue, Integer.MAX_VALUE) to [lastValue, MAX_GENOTYPE_QUAL) .; * Changed the expected test data and compare against the output partition (value) rather than the input (key).; * Changed GVCFBlock in a test gvcf file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2659:194,test,test,194,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2659,2,['test'],['test']
Testability,"Finish testing GCS NIO provider, and add an example unit test for it to GATK4",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1656:7,test,testing,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1656,2,['test'],"['test', 'testing']"
Testability,"First commit:; -Added CreateReadCountPanelOfNormals tool. This is an update of CreatePanelOfNormals. Related code is written from scratch.; -Added DenoiseReadCounts tool. This is an update of NormalizeSomaticReadCounts. Related code is written from scratch.; -Added AnnotateIntervals tool. This is an update of AnnotateTargets. Related code (e.g., GCBiasCorrector) is mostly ported and does not have to be closely re-reviewed. I naively introduced RecordCollection and LocatableCollection classes that are analogous to SampleRecordCollection and SampleLocatableCollection, respectively, for collections that are not tied to a sample (e.g., GC-content annotations); we can go back and refactor these classes later.; -SVDDenoisingUtils contains many package-private helper methods for filtering and denoising without unit tests. This is intentional. I have verified that this code exactly reproduces the old PoN results down to the 1E-16 level (with the discrepancy coming from the removal of redundant pseudoinverse operations). Rather than writing or porting unit tests for this code, I think it is best if we simply do not reuse this code or make non-trivial changes to it going forward. We can add unit tests later if we have extra time on our hands...; -SparkGenomeReadCounts now outputs TSV and HDF5.; -Added some tests for SimpleCountCollection, HDF5SimpleCountCollection, and some disabled tests for HDF5Utils.; -Miscellaneous cleanup and boy scout activities. Second commit:; -Updated coverage collection in germline and legacy somatic CNV WDLs to use only integer read counts and account for changes to SparkGenomeReadCounts.; -Added tasks for PreprocessIntevals, AnnotateIntervals, and CollectFragmentCounts.; -Renamed and moved some files. Closes #3570.; Closes #3356.; Closes #3349.; Closes #3246.; Closes #3153.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3820:820,test,tests,820,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3820,5,['test'],['tests']
Testability,First cut of BQSR. No integration tests yet because of the file size issue. Will add another ticked. The pull req is mostly for the utils etc.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/119:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/119,1,['test'],['tests']
Testability,"First version of Funcotator, a GATK Oncotator analog. ; Fixes #3283. Includes functionality to create annotations from GENCODE for HG19 and; HG38 for MNPs and INDELs in all regions of the genome. NOTE: There are still some INDEL issues, and some INDEL tests are still; commented out. This is very much a work in progress and should still be considered a; BETA tool. Added required test files for Funcotator unit and integration tests to; git lfs. Rebased on master, now tests are GATKBaseTests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3779:252,test,tests,252,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3779,4,['test'],"['test', 'tests']"
Testability,"First with a flag in the tool that allows user to choose which code path to use, the existing version or the prototyping version. But the test coverage is still low and should be improved.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3890:138,test,test,138,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3890,1,['test'],['test']
Testability,"First, question: what must we do to convince ourselves to pull the plug on the old QUAL? In every test so far, the new model performs equally well on biallelics and better on multiallelics. We will eliminate about 6000 lines of code, many future bugs, and GATK workshop slides that nobody wants to present. Assuming that we are soon convinced, the ticket is pretty simple: delete every implementation of `AFCalculator` and replace anything that calls for an abstract `AFCalculator` with the concrete class `AlleleFrequencyCalculator`. Then clean up hacky parts of `AlleleFrequencyCalculator` that were put in to implement `AFCalculator`. Finally, delete all the ancillary classes like `StateTracker` that comprised the `AFCalculator`'s military-industrial complex.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2255:98,test,test,98,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2255,1,['test'],['test']
Testability,Fisher Exact Test Edge Case,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2292:13,Test,Test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2292,1,['Test'],['Test']
Testability,"Fisher's Exact Test fails for the following two unit tests (that should be added to the data provider in `FisherExactTestUnitTest.java`):. ```; tests.add(new Object[]{0, 0, 0, 3, 1.0});; tests.add(new Object[]{9, 0, 0, 0, 1.0});; ```. R's implementation results in 1.0 for both of these tables, but the current GATK implementation results in 0.0 for both of them. They are examples of an edge case when the observed table is the only possibility given the marginal distributions (so the p-value should be 1).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2292:15,Test,Test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2292,4,"['Test', 'test']","['Test', 'tests']"
Testability,Fix BQSR Dataflow test that was failing due to lack of sequence dictionary validation,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/668:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/668,1,['test'],['test']
Testability,Fix DirichletAlleleDepthAndFraction test to not modify it's expected results.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7563:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7563,1,['test'],['test']
Testability,Fix Dockerfile I/O redirection - test WIP.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7997:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7997,1,['test'],['test']
Testability,"Fix GenomicsDB URL handling/utils (move isGenomicsDB to GATKPathSpecifier); - [ ] GATKSparkTool still uses `String` in many method signatures; - [ ] Update remaining IOUtils methods; - [ ] Update remaining BucketUtils methods (i.e., remove remaining BucketUtils.isHadoopURL overloads(File, Path, String), etc.); - [ ] Update RevertSAMSpark String/File assumptions and intervconversions; - [ ] Add ReferenceFileSource(`GATKPath`) constructor, remove remaining CachingIndexedFastaSequenceFile/overloads; - [ ] Update tools in the pathseq package (PathSeqBwaSpark, PathSeqScoreSpark) that do directory manipulation. [Edit] Somewhat tangentially, PathSeqBwaSpark currently rejects read inputs specified through `--inputs` and uses separate args to allow the user to identify inputs as paired or unpaired. Once this is using `GATKPathSpecifier` this could be changed to use ""--inputs"" annotated with tags instead. Might be a problem for WDL gen though (which doesn't support tags).; - [ ] Test utilities (createTempFile/Dir, etc. that return GATKPath); - [ ] Add a `toHadoopPath` method to `GATKPath` that returns a `org.apache.hadoop.fs.Path`.; - [ ] Change tools that generate multiple output files using a stem (SplitReads, etc) to use the `resolve` methods listed above once they're available.; - [ ] All usages of `PrintStream` should be replaced with `OutputStreamWriter` (code that requires printf-style formatting can use `write` with `String.format` instead of the `printf` methods). `PrintStream` doesn't propagate IOExceptions and instead requires calls to `checkError`, but almost all usages of `PrintStream` don't call it.; - [ ] Update `org.broadinstitute.hellbender.utils.report` (`GATKReport` and friends) to eliminate `File` references and `PrintStream` usages.; - [ ] Update `org.broadinstitute.hellbender.utils.recalibration` (`RecalUtils` and friends) to eliminate `File` references and `PrintStream` usages.; - [ ] Fix cases where we have a tool with a `File` that needs to be accessi",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6610:1281,Test,Test,1281,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6610,1,['Test'],['Test']
Testability,Fix Jenkins blowup caused by hacking tests involving external programs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1804:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1804,1,['test'],['tests']
Testability,Fix NPE from unintialized logger in GenotypingEngine,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8159:26,log,logger,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8159,1,['log'],['logger']
Testability,Fix RefAPISource test and improve performance,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/825:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/825,1,['test'],['test']
Testability,Fix Spark tests on gatk-jenkins,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2289:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2289,1,['test'],['tests']
Testability,Fix Travis WDL tests silently failing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3558:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3558,1,['test'],['tests']
Testability,Fix a bug where ExtractCohortToPgen does not write to the cost_observability table. - Successful run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/df2420f5-0da3-4801-baa7-d651ce3d6910); - Successful integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/13865dd1-f561-49a2-8581-87343bf79069),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8958:257,test,test,257,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8958,1,['test'],['test']
Testability,Fix accidentally broken travis tests that travis neglected to warn about...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6782:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6782,1,['test'],['tests']
Testability,Fix all dataflow tests and make them mandatory.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/751:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/751,1,['test'],['tests']
Testability,Fix and reenable testGetInvalidPCollectionLocal(),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/774:17,test,testGetInvalidPCollectionLocal,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/774,1,['test'],['testGetInvalidPCollectionLocal']
Testability,Fix and test for calculating CombineGVCFs intermediate band interval start locations.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4681:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4681,1,['test'],['test']
Testability,Fix argument parsing test [VS-995],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8389:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8389,1,['test'],['test']
Testability,"Fix botched squash, clarify test asserts. Fixes #5650",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5844:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5844,2,"['assert', 'test']","['asserts', 'test']"
Testability,Fix broken test input: NA12878.chr17_69k_70k.dictFix.bam,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/568:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/568,1,['test'],['test']
Testability,Fix bug and reduce excessive logging from VariantAnnotatorEngine and JumboGenotypes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7612:29,log,logging,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7612,1,['log'],['logging']
Testability,Fix cancer_gene_census test data source in the funcotator test datasources in large,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5243:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5243,2,['test'],['test']
Testability,Fix cloud tests timing out on travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/750:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/750,1,['test'],['tests']
Testability,Fix compile error in test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6483:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6483,1,['test'],['test']
Testability,Fix dataproc failures in broad-gatk-test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1611:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1611,1,['test'],['test']
Testability,Fix erroneous warning about GCS test configuration,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5987:32,test,test,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5987,1,['test'],['test']
Testability,"Fix for https://github.com/broadinstitute/gatk/issues/5511, intermittent LeftAlignAndTrimVariants unit tests failures.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5519:103,test,tests,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5519,1,['test'],['tests']
Testability,Fix for randomly failing XHMM-related tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3140:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3140,1,['test'],['tests']
Testability,Fix for test-breaking typo,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/769:8,test,test-breaking,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/769,1,['test'],['test-breaking']
Testability,Fix https://github.com/broadinstitute/gatk/issues/5559. Adds companion cram/bam for most of the existing tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6641:105,test,tests,105,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6641,1,['test'],['tests']
Testability,Fix ignored test in GATKReadAdaptersUnitTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6471:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6471,1,['test'],['test']
Testability,Fix integration tests [VS-1374],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8833:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8833,1,['test'],['tests']
Testability,Fix issue in GenomicsDBImportIntegrationTest where GCS test cases were not marked with correct test group,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2612:55,test,test,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2612,2,['test'],['test']
Testability,Fix jexl logging and update VariantFiltration doc.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5422:9,log,logging,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5422,1,['log'],['logging']
Testability,Fix log4j logging which was broken due to multiple copies being prese…,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3652:10,log,logging,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3652,1,['log'],['logging']
Testability,Fix logger message in SortReadFileSpark,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3096:4,log,logger,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3096,1,['log'],['logger']
Testability,Fix logging for classes that use OpticalDuplicateFinder,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4759:4,log,logging,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4759,1,['log'],['logging']
Testability,Fix potential bug in VCF Integration test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8316:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8316,1,['test'],['test']
Testability,Fix several bugs in CompareSAMs. Add unit tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/183:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/183,1,['test'],['tests']
Testability,Fix skipped CigarConversionUtilsUnitTest.testHandleInvalidCigarElement,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3733:41,test,testHandleInvalidCigarElement,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3733,1,['test'],['testHandleInvalidCigarElement']
Testability,Fix tab completion tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6647:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6647,1,['test'],['tests']
Testability,Fix test assertion that fails on newer versions of testNG.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2611:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2611,3,"['assert', 'test']","['assertion', 'test', 'testNG']"
Testability,Fix test errors in PathSeqScoreIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3910:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3910,1,['test'],['test']
Testability,Fix test in BQSRSparkIntegrationTest.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1590:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1590,1,['test'],['test']
Testability,Fix tests in ValidateVariantsIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/659:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/659,1,['test'],['tests']
Testability,Fix tests that are currently being ignored by accident,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5339:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5339,1,['test'],['tests']
Testability,Fix the log spam from FastqToSam tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/134:8,log,log,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/134,2,"['log', 'test']","['log', 'tests']"
Testability,Fix three remaining broken optical duplicate tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1042:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1042,1,['test'],['tests']
Testability,Fix two bugs in multiple alignment assembly contig classification:; 1. arguments passed in wrong order leading to wrong contigs being filtered out and wrong contigs being sent to call variants; 2. copy-paste error in detecting reference order switch between head/tail alignments (predicate essentially always return true). Added tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3871:329,test,tests,329,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3871,1,['test'],['tests']
Testability,Fix typo in log message.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6636:12,log,log,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6636,1,['log'],['log']
Testability,FixMisencodedBaseQualityReads needs tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1230:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1230,1,['test'],['tests']
Testability,Fixed #1841 for tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1850:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1850,1,['test'],['tests']
Testability,Fixed ClippingOP.getNewAlignmentStartOffset() to handle N cases properly and added unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2057:88,test,tests,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2057,1,['test'],['tests']
Testability,Fixed Travis issue where test reports were not being uploaded,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3350:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3350,1,['test'],['test']
Testability,Fixed broken WDL tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4016:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4016,1,['test'],['tests']
Testability,Fixed debug log severity for read threading messages.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8419:12,log,log,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8419,1,['log'],['log']
Testability,Fixed error in FilterIntervals logic when filtering on annotations with -XL.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7046:31,log,logic,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7046,1,['log'],['logic']
Testability,Fixed incorrect logger in CollectAllelicCounts and RecalibrationReport.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3606:16,log,logger,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3606,1,['log'],['logger']
Testability,Fixed issue were the travis script would fail to upload test reports because gsutils was not being found.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3350:56,test,test,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3350,1,['test'],['test']
Testability,Fixed logging in Funcotator.java; Added a method to the VcfOutputRenderer to fix indel boundaries.; Now VCF and MAF files are compared in an integration test.; Fixed a bug in how data from multiple alleles are parsed into funcotation maps. Fixes #4378,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5131:6,log,logging,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5131,2,"['log', 'test']","['logging', 'test']"
Testability,Fixed regression where HaplotypeCaller logs were getting flooded with bogus warnings,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7358:39,log,logs,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7358,1,['log'],['logs']
Testability,Fixed shard index in PostprocessGermlineCNVCalls log message.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6312:49,log,log,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6312,2,['log'],['log']
Testability,Fixed the NPE from #273 and added a test for it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/602:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/602,1,['test'],['test']
Testability,Fixed the broken test in DirichletAlleleDepthAndFractionIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7963:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7963,1,['test'],['test']
Testability,Fixed warnings in long read tools that were pulled in. <Test PR>,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8799:56,Test,Test,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8799,1,['Test'],['Test']
Testability,"Fixes #1027 . This follows google java style guide. Not sure why `pf_read_only` and `aligned_reads_only` are not; camel-cased, but I'm all for that style of casing. ---. The following test passes:. > gradle test --tests org.broadinstitute.hellbender.tools.spark.pipelines.metrics.MeanQualityByCycleSparkIntegrationTest. It seems that there is no need for a unit test here, but please let me; know if you would prefer one. I have a skeleton test class to verify; that GatkReadFilter blocks secondary alignment reads,; blocks supplementary alignment reads, can restrict to passing filter; reads only, and can restrict to aligned reads only.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1053:184,test,test,184,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1053,5,['test'],"['test', 'tests']"
Testability,"Fixes #1731 . **Summary of changes**; - SelectVariants.java; - createVCFHeaderLineList() - ensure allele count INFO annotations (AC, AN, AF) are in the output VCF header if --setFilteredGtToNocall ; - setFilteredGenotypeToNocall() - recompute AC, AN and AF if filtered genotypes are set to no-call, add them to the genotype builder.; - VariantFiltration.java; - initializeVcfWriter() - ensure allele count INFO annotations (AC, AN, AF) are in the output VCF header if --setFilteredGtToNocall ; - makeGenotypes() - recompute AC, AN and AF if filtered genotypes are set to no-call, add them to the genotype builder.; - GATKVariantContextUtils.java; - incrementChromosomeCountsInfo() - count the total and alternate alleles for a genotype; - updateChromosomeCountsInfo() - update AC, AN and AF with the computed count of total and alternate alleles; - selectVariantsInfoField.vcf\* and variantFiltrationInfoField.vcf*; - User data from https://github.com/broadinstitute/gsa-unstable/issues/1325; - VariantFiltrationIntegrationTest.java; - Tests that show the fix for https://github.com/broadinstitute/gsa-unstable/issues/1325; - SelectVariantsIntegrationTest.java; - MD5 changed in testSetFilteredGtoNocall() because AC, AN and AF are always in the VCF if --setFilteredGtToNocall; - GATKVariantContextUtilsUnitTest.java; - Test new GATKVariantContextUtils methods",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1871:1036,Test,Tests,1036,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1871,3,"['Test', 'test']","['Test', 'Tests', 'testSetFilteredGtoNocall']"
Testability,Fixes #3956. Now gencode data sources have names preserved from config files.; Updated MafOutputRenderer to put a space and delimiter between the date and first funcotation factory information.; Updated some test cases to be correct with the new Gencode name preservation and MAF renderer update.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4823:208,test,test,208,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4823,1,['test'],['test']
Testability,"Fixes #3983 . - Added two tumor-only tests to the CNV WDL test. I did not add all four possible combinations, since I did not see the value. I just wanted to make sure that the WGS and WES cases were covered.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4414:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4414,2,['test'],"['test', 'tests']"
Testability,Fixes #4581. Had to change a configuration method to allow Funcotator tests to work. Currently funcotator will not use the config cache - it will always; create a new configuration on startup. This should be fine for now.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4960:70,test,tests,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4960,1,['test'],['tests']
Testability,"Fixes #4661. I managed to run `genome_reads-pipeline_hdfs.sh` with this change, whereas before it was failing (see details in #4661). No unit test since it is very difficult to write a test for the effect of adding synchronization.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5071:142,test,test,142,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5071,2,['test'],['test']
Testability,"Fixes #4739; Refactored UTR VariantClassification handling.; Added warning statement when a transcript in the UTR has no sequence info (now is the same behavior as in protein coding regions).; Added tests to prevent regression on data source date comparison bug.; Now can run on large data.; Fixed DNA Repair Genes getter script.; Fixed an issue in COSMIC to make it robust to bad COSMIC data.; Gencode no longer crashes when given an indel that starts just before an exon.; Fixed the SimpleKeyXsvFuncotationFactory to allow any characters to work as delimiters (including characters used in regular expressions, such as pipes).; Modified several methods to allow for negative start positions in; preparation for allowing indels that start outside exons.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4817:199,test,tests,199,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4817,1,['test'],['tests']
Testability,Fixes #5476. This change requires #5437 to work properly. Not sure how to test this yet.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5508:74,test,test,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5508,1,['test'],['test']
Testability,"Fixes #5751 and #4591. Longer term we'll still want to do package version-checking/verification per https://github.com/broadinstitute/gatk/issues/4995 as well. @jamesemery I included tests for this change, but I need the tests to only run when the conda env is NOT activated. Unit tests are always run on the docker image, so thats out. Integration tests are run on both the docker and the travis image, so I throw a skip exception on the docker, which I detect using the ""CI"" env variable. But that seems fragile and confusing. Is there a better way to do this ?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5819:183,test,tests,183,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5819,4,['test'],['tests']
Testability,"Fixes #7068 . - When adding AC, AF, AN, DP header lines, SelectVariants now checks if these lines are in the original header already and if so, overwrites these lines with the respective standard lines; - Without this check, an issue in htsjdk causes duplicate header lines with the same ID if the description differs. This should be fixed there but this fix provides a downstream workaround; - Modified the integration test validation files, which have been invalid VCF files with duplicate header lines; - Removed addition of AC, AF, AN if `--set-filtered-gt-to-nocall` is set, because these lines will be added later anyway",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7069:420,test,test,420,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7069,1,['test'],['test']
Testability,Fixes #7916. Data providers and unit tests for the various overloads of Utils.concat(),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7918:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7918,1,['test'],['tests']
Testability,Fixes #802. Unit tests fixed/added.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/813:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/813,1,['test'],['tests']
Testability,Fixes #906. This will be useful for benchmarking. Can you have a look when you have time @davidadamsphd?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/910:36,benchmark,benchmarking,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/910,1,['benchmark'],['benchmarking']
Testability,"Fixes a bug that I inadvertently introduced long ago in #5408. A method there originally assumed that the intervals to be filtered coincide with the annotated intervals when filtering on annotations, but this assumption can be violated when e.g. using `-XL` to further exclude intervals. This breaks the annotation-based filtering and will result in incorrectly retained/dropped intervals. Unfortunately, the integration test cases were not quite complete enough to catch this. Fortunately, for typical data and parameters, the number of affected intervals is typically a very small percentage, especially in human (e.g., the default GC filters of [0.1, 0.9] affect <0.1% of 250bp bins); I only caught this when running on malaria data, since GC filtering has more impact there. I would also expect count-based filters to mitigate some of the effects (e.g., a bin with extreme GC that was erroneously retained when filtering on annotations might later be filtered because it has poor coverage). Downstream results are also all correct---they're just given for a slightly different set of intervals than would be expected. This bug would affect users that made use of the `blacklist_intervals_for_filter_intervals` option in the gCNV WDLs, but my feeling is this functionality is not used that frequently. @droazen I think this is a relatively minor bug, but it might be good to mention it in the release notes.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7046:421,test,test,421,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7046,1,['test'],['test']
Testability,Fixes and reverts some test-breaking changes made in #3985. Closes #4012.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4016:23,test,test-breaking,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4016,1,['test'],['test-breaking']
Testability,"Fixes for FOB being too generous, broken FOB summary table, oncotator MAF override values, and updating tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3347:104,test,tests,104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3347,1,['test'],['tests']
Testability,Fixes for HG38 exception and better logging.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4563:36,log,logging,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4563,1,['log'],['logging']
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/1073. note expected.HiSeq.1mb.1RG.2k_lines.bqsr.DIQ.alternate.bam is modified because the previous version was bogus and did not remove indel quals (ie included BD and BI tags, incorrectly). Note: as discovered by these new stringent tests, cram writing is broken (https://github.com/samtools/htsjdk/issues/364) so we make that comparison lenient for now. Note: Spark tools lose order of reads from the input and so comparison is done after sorting the output files (an alternative would have been to write the stringent sam comparison in a way that can ignore order or equivalent reads, but sorting is easier to do).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1079:286,test,tests,286,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1079,1,['test'],['tests']
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/1226. We should resolve whether or not we want to invest in fixing the issues with IntegrationTestSpec (see https://github.com/broadinstitute/gatk/issues/1562) before we do any more of these, since now that we can write CRAMs on SPARK we can also add CRAM tests to ApplyBQSRSpark as well, we just need to decide which way to write the tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1564:308,test,tests,308,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1564,2,['test'],['tests']
Testability,Fixes https://github.com/broadinstitute/gatk/issues/1321. Also added some CRAM tests. I started to fix https://github.com/broadinstitute/gatk/issues/1593 as part of this but there are several code paths that need to change so I'll do a separate PR.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1595:79,test,tests,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1595,1,['test'],['tests']
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/2865. To match GATK without sacrificing performance for existing GenotypeGVCF modes, this adds a new traversal type `VariantWalkerGroupedByLocus` which can process variants one-at-a-time, or optionally grouped by Locus. GenotypeGVCFs itself then has to further filter the variants to emulate the ""prioritize start location"" behavior in GATK3. If we keep this traversal, I'll add some unit tests, and we should find a better name. In order to match GATK3 output for sites where the only alt allele is a spanning deletion, I had to use `OutputMode.EMIT_ALL_SITES` when emitting nonvariant sites only (GATK3 uses `OutputMode.EMIT_ALL_CONFIDENT_SITES` in that case). Specifically, its necessary to to prevent GenotypingEngine from entering [this](https://github.com/broadinstitute/gatk/blob/33af6de5fb990f4642245b7a80b76d251371ef09/src/main/java/org/broadinstitute/hellbender/tools/walkers/genotyper/GenotypingEngine.java#L285) recently added code block, and short circuiting out. @ldgauthier Any opinion on whether this is too permissive ? Another option would be to special-case this, perhaps by adding another OutputMode state.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5219:441,test,tests,441,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5219,1,['test'],['tests']
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/4014. This test uses python to test the controller, and was not properly synchronizing on all commands before asserting the results, leading to intermittent timing-dependent failures.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4015:63,test,test,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4015,3,"['assert', 'test']","['asserting', 'test']"
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/4024. The timeout for this test was relatively short, and we hit it once in travis, so lengthen it a lot to ensure we don't get random failures. Also removed a couple of unreferenced lines of code.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4028:79,test,test,79,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4028,1,['test'],['test']
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/4387. Tested manually. Before (no default read filters in doc):. <img width=""714"" alt=""screen shot 2019-01-14 at 10 38 26 am"" src=""https://user-images.githubusercontent.com/10062863/51122884-e26a9c80-17e8-11e9-82ef-e9105d2fb808.png"">. After (read filters included):. <img width=""682"" alt=""screen shot 2019-01-14 at 10 41 05 am"" src=""https://user-images.githubusercontent.com/10062863/51123000-2493de00-17e9-11e9-86e0-1d7fefa14ab4.png"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5576:58,Test,Tested,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5576,1,['Test'],['Tested']
Testability,Fixes https://github.com/broadinstitute/gatk/issues/4875. The newly added test fails without this change. Also opportunistically removed some dead code.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4876:74,test,test,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4876,1,['test'],['test']
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/5065. This test verifies that we receive output written to Python's stderr, but it fails occasionally due to an inherent race condition in the assert (occasionally the assert executes before the data is received and the test fails). I added a Python statement that explicitly flushes stderr first, and ran the test 1000 times and it still failed once for the same reason. Since I don't see any way to have a reliable test condition (that doesn't involve polling inside a loop and a long timeout), I'm just removing the test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5097:63,test,test,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5097,7,"['assert', 'test']","['assert', 'test']"
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/5362 and https://github.com/broadinstitute/gatk/issues/4637. Log messages from JEXL were being dropped because of https://github.com/broadinstitute/gatk/issues/4637, making the behavior described by https://github.com/broadinstitute/gatk/issues/5362 even more subtle to discern. Now, instead of seeing:. > log4j:WARN No appenders could be found for logger (org.apache.commons.jexl2.JexlEngine).; > log4j:WARN Please initialize the log4j system properly.; > log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. the user will see:. > 11:51:06.321 WARN JexlEngine - ![51,60]: 'QD < 2.0 || MQ < 40.0 || FS > 60.0 || SOR > 3.0 || MQRankSum < -12.5 || ReadPosRankSum < -8.0 || ExcessHet > 54.69;' undefined variable MQRankSum",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5422:113,Log,Log,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5422,3,"['Log', 'log']","['Log', 'logger', 'logging']"
Testability,Fixes https://github.com/broadinstitute/gatk/issues/5550. Tested manually.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5552:58,Test,Tested,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5552,1,['Test'],['Tested']
Testability,Fixes https://github.com/broadinstitute/gatk/issues/5674. All the tests are written using `IntegrationTestSpec` which creates the output files before running the test. Verified manually.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5681:66,test,tests,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5681,2,['test'],"['test', 'tests']"
Testability,"Fixes https://github.com/broadinstitute/gatk/issues/6173. I added a single line test that shows the problem, and regenerated the other test files. I didn't write a specific unit test that proves it's solved. Feel free to do so if you think it's necessary.; I validated the output by adding the field name to the output value and checking it by eye against the header lines. This could fairly simply made into a unit test if desired. I'm not sure if there are other large files that need to be regenerated. I had initially said this bug only affects vcf but I think it happens to Maf output as well. I removed a weakly typed method that allowed this bug to occur.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6178:80,test,test,80,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6178,4,['test'],['test']
Testability,Fixes https://github.com/broadinstitute/gatk/issues/6480. Note that xbyak issue is unchanged and still exists with this upgrade. This also contains a test for some of the key python packages to verify that they are resolved by Conda to the version of the package requested in the .yml file.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6494:150,test,test,150,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6494,1,['test'],['test']
Testability,Fixes issue #816 and improves performance. Marking those tests as mandatory since they pass now.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/821:57,test,tests,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/821,2,['test'],['tests']
Testability,Fixes the Python part of https://github.com/broadinstitute/gatk/issues/4209. Also updated the README with more specific instructions based on previous feedback from another user. This was tested manually.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4233:188,test,tested,188,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4233,1,['test'],['tested']
Testability,"Fixing a bug I noticed while spot checking sites. We should eventually add some tests that check expected outputs, but I'll save that for another day. We were accidentally applying filters to alleles in the filtering table that didn't exist in the cohort that was pulled out. Now we're only looking at VQSLODs in the filter table for alleles that are present in the output VCF.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6976:80,test,tests,80,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6976,1,['test'],['tests']
Testability,Fixing an issue in the indexing of locatable XSVs and adding test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6224:61,test,test,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6224,1,['test'],['test']
Testability,Fixing an issue where AVX tests would fail if AVX was supported by the computer but the library hadn't been built for some reason. . Fixes #1575,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1577:26,test,tests,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1577,1,['test'],['tests']
Testability,Fixing the path reported by the gatkbot when there are test failures,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8069:55,test,test,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8069,1,['test'],['test']
Testability,FlagStat on spark + tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/934:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/934,1,['test'],['tests']
Testability,FlagStatDataflow and tests should be easy to port and a useful tool that requires a non-trivial reduce,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/933:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/933,1,['test'],['tests']
Testability,FlowBasedReadUtils.getMarkDupReadEnd and similar methods lacking test coverage,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7958:65,test,test,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7958,1,['test'],['test']
Testability,"Follow up to https://github.com/broadinstitute/gatk/pull/2010.; Remove the following code from `IntervalUtils. intervalFileToList()` when a new exome, correctly converted interval list (with no -1 length intervals) is released :. ```; if (interval.getStart() - interval.getEnd() == 1 ) { ; logger.warn(""Possible incorrectly converted length 1 interval : "" + interval);; }; ```. Remove corresponding test `IntervalUtilsUnitTest.testIntervalFileToListNegativeOneLength`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2089:290,log,logger,290,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2089,3,"['log', 'test']","['logger', 'test', 'testIntervalFileToListNegativeOneLength']"
Testability,Follow up to https://github.com/broadinstitute/gatk/pull/4097.; This implements 2D CNN model inference. Update to using semantics json file for model serialization.; Still very slow on CPU. Needs more tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4245:201,test,tests,201,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4245,1,['test'],['tests']
Testability,Follow up with necessary tests for cpx SV PR series,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3431:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3431,1,['test'],['tests']
Testability,"Following the instructions to build from the main readme, `./gradlew bundle` and `./gradlew clean` ends with these error messages:; ```; ...; Download https://repo1.maven.org/maven2/commons-codec/commons-codec/1.6/commons-codec-1.6.jar; Executing: git lfs pull --include src/main/resources/large. FAILURE: Build failed with an exception. * Where:; Build file '/gatk/build.gradle' line: 105. * What went wrong:; A problem occurred evaluating root project 'gatk'.; > Execution of ""git lfs pull --include src/main/resources/large"" failed with exit code: 1. git-lfs is required to build GATK but may not be installed. See https://github.com/broadinstitute/gatk#building for information on how to build GATK. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.; ```. The build is being attempted in a docker container in a 64-bit ubuntu VM on a Win10 host. What am I doing wrong?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6019:811,log,log,811,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6019,1,['log'],['log']
Testability,"Following the same implementation as `CountingReadFilter`, this is a way of counting the `VariantContext` that were filtered. This is useful for report the status of `VariantFilter`s. There are not tests yet because I would like to have the ok on this before spending time on implement them. I think that the community could benefit from using this, and even some tools from the GATK itself.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2195:198,test,tests,198,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2195,1,['test'],['tests']
Testability,"For @jamesemery, per their request, the researcher has submitted test data that I will slack you the location of. They have also provided additional information that will interest you in the forum thread that is not represented below. ---; @shlee ; I uploaded the file to a fileshare folder of the University Mainz and send you a PM with the link and login data. ; One other small thing I found out is, that MDSpark does not take comma in filenames although I quoted the filepath. Is there any way to allow comma in filepath or do I have to avoid using them?. @mack812 ; I tested MDSpark with an unsorted SAM file as input and you are right, it works and the output is a sorted BAM file. So I can skip the SortSam tool wich will save me about 15-20 min in processing time. So MDSpark in total is faster than SortSam+MD +Indexing. ; Thanks for that hint!. This Issue was generated from your [forums] ; [forums]: https://gatkforums.broadinstitute.org/gatk/discussion/comment/56337#Comment_56337",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5670:65,test,test,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5670,3,"['log', 'test']","['login', 'test', 'tested']"
Testability,"For GVS Feature Extract, ~Cohort Extract~ and Prepare Callset we should add a bq labels to indicate the query and tool being. gvs_tool_name (e.g. feature-extract); gvs_query_name (e.g. read-sample-table). Python Prepare Callset:. <img width=""334"" alt=""Screen Shot 2021-05-19 at 9 31 04 AM"" src=""https://user-images.githubusercontent.com/6863459/118821262-1193eb80-b885-11eb-8456-71225b40192b.png"">. Java GVS Feature Extract:; <img width=""346"" alt=""Screen Shot 2021-05-19 at 9 31 25 AM"" src=""https://user-images.githubusercontent.com/6863459/118821247-0e006480-b885-11eb-9d95-99441c6dbebd.png"">. for Feature Extract; update the wdl to take in a query_labels optional string; update the GATK tool to take in a query_labels param; update the GATK tool to validate labels; update the GATK tool to add constant kv labels: ""gvs_tool_name"", ""extract-features"" and ""gvs_query_name"", ""extract-features"" (is there a way to get more explicit in the queries? isn't it just one query?); test that this works with and without a label param passed in. for Prepare Callset; update the wdl to take in a query_labels optional string; update the python script to take in a query_labels param; update the python scrip to validate passed in labels; update the python script to add constant kv labels for ever single query individually and as a default; test that this works with and without a label param passed in. <img width=""717"" alt=""Screen Shot 2021-05-05 at 2 40 30 PM"" src=""https://user-images.githubusercontent.com/6863459/117192554-dd61fa80-adaf-11eb-8996-be1dc266dcc2.png"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7233:974,test,test,974,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7233,2,['test'],['test']
Testability,"For INDELs, ReferenceContext is rendered with too many bases. This is because of how the VCF format stores INDELs (vs the MAF format). The logic for creating the ReferenceContext base string needs to be updated to account for the extra bases in the VCF format.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4407:139,log,logic,139,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4407,1,['log'],['logic']
Testability,For TAG team after release. This will mostly involve checking that cost-optimizations don't break. Should add corresponding WDL tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3940:128,test,tests,128,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3940,1,['test'],['tests']
Testability,"For `byte[]` attributes, the `GATKSAMRecordToGATKReadAdapter.getAttributesAsString()` uses the default `Object.toString()` (className@hashCode). This is something unexpected for my point of view, because the following code may fail:. ```java; public void testGATKReadGetAttributeAsString(final GATKRead read) {; read.setAttribute(""BC"", new byte[]{'A', 'C', 'T', 'G'});; // this will fail with the current implementation; Assert.assertEquals(read.getAttributesAsString(""BC"").getBytes(Charset.forName(""UTF-8"")),; read.getAttributeAsByteArray(""BC""));; }; ```. This PR fixes the issue by identifying `byte[]` attributes and converting them to Strings by using the default GATKRead charset (UTF-8).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3223:255,test,testGATKReadGetAttributeAsString,255,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3223,3,"['Assert', 'assert', 'test']","['Assert', 'assertEquals', 'testGATKReadGetAttributeAsString']"
Testability,"For an unknown reason master snapshots are failing. They're trying to upload with the version ""unspecified-SNAPSHOT"". I don't know why they're not setting the version properly. . The last good build was ; f3cd74 [travis-log](https://travis-ci.org/broadinstitute/gatk/jobs/143069453); the next build has nothing suspicious in it as far as I can tell; 69a0f89 [travis-log](https://travis-ci.org/broadinstitute/gatk/jobs/143174237). I suspect it may have something to do with the shallow clone that travis does. I suspect that with the clone being shallow, the last tag was lost and git describe is unable to describe. I'm not sure why it occurred on 203 though, since the clone is 50 deep. In any case, using the clone command from github results in a clone that reports an undefined version. . `git clone --depth=50 --branch=master https://github.com/broadinstitute/gatk.git broadinstitute/gatk`. Not sure what the best solution is, but the easiest is to just set the version manually.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1993:220,log,log,220,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1993,2,['log'],['log']
Testability,"For each hellbender ReadWalker, write at least 1 integration test that uses CRAM input",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/676:61,test,test,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/676,1,['test'],['test']
Testability,"For projects built on GATK framework, automated testing is broken",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3029:48,test,testing,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3029,1,['test'],['testing']
Testability,For the tests to work we must define:; HELLBENDER_TEST_PROJECT : Google Project to use; HELLBENDER_JSON_SERVICE_ACCOUNT_KEY : path to a JSON file with service; account credentials. (I've updated the README accordingly). (We've used both before so they should already be configured). This fixes issue #3125,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3159:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3159,1,['test'],['tests']
Testability,Force log level to strictest setting for unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/147:6,log,log,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/147,2,"['log', 'test']","['log', 'tests']"
Testability,Found in https://github.com/broadinstitute/gatk/pull/2195:. * `getSummaryLineForLevel` fix for indentLevel = 0 (including tests); * `resetFilterCount` now is propagated to lhs/rhs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2343:122,test,tests,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2343,1,['test'],['tests']
Testability,FoundError: org/apache/logging/log4j/core/appender/AbstractAppender; at java.lang.ClassLoader.defineClass1(Native Method); at java.lang.ClassLoader.defineClass(ClassLoader.java:763); at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); at java.net.URLClassLoader.defineClass(URLClassLoader.java:467); at java.net.URLClassLoader.access$100(URLClassLoader.java:73); at java.net.URLClassLoader$1.run(URLClassLoader.java:368); at java.net.URLClassLoader$1.run(URLClassLoader.java:362); at java.security.AccessController.doPrivileged(Native Method); at java.net.URLClassLoader.findClass(URLClassLoader.java:361); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349); at java.lang.ClassLoader.loadClass(ClassLoader.java:411); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at org.apache.logging.log4j.core.config.plugins.util.PluginRegistry.decodeCacheFiles(PluginRegistry.java:181); at org.apache.logging.log4j.core.config.plugins.util.PluginRegistry.loadFromMainClassLoader(PluginRegistry.java:119); at org.apache.logging.log4j.core.config.plugins.util.PluginManager.collectPlugins(PluginManager.java:132); at org.apache.logging.log4j.core.pattern.PatternParser.<init>(PatternParser.java:131); at org.apache.logging.log4j.core.pattern.PatternParser.<init>(PatternParser.java:112); at org.apache.logging.log4j.core.layout.PatternLayout.createPatternParser(PatternLayout.java:220); at org.apache.logging.log4j.core.layout.PatternLayout.<init>(PatternLayout.java:138); at org.apache.logging.log4j.core.layout.PatternLayout.<init>(PatternLayout.java:57); at org.apache.logging.log4j.core.layout.PatternLayout$Builder.build(PatternLayout.java:446); at org.apache.logging.log4j.core.config.AbstractConfiguration.setToDefault(AbstractConfiguration.java:518); at org.apache.logging.log4j.core.config.DefaultConfiguration.<init>(DefaultConfiguration.java:49); at org.apache.logging.log4j.core.LoggerContext.<i,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5126:3386,log,logging,3386,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5126,1,['log'],['logging']
Testability,"From @cmnbroad:. The write side for non-coordinate sorted CRAMs works now, but there is still a problem with reading queryname sorted input crams with unmapped reads. There is an existing test in GATK for this case that is already enabled and has been passing, but only because there is another bug in the test code that is masking the failure because it uses the value ""outputExtension"", which results in a BAM file being created. When I went to fix that as part of re-enabling the disabled CRAM tests, the verification of the queryname test output now fails. The test itself runs, but the samsEqualStringent verification fails reading the output. So the write-side issues with the presorted flag are fixed with samtools/htsjdk#368, but there is still a limitation in htsjdk for reading crams with unmapped reads that are not coordinate sorted that we need to fix/understand. See also:; https://github.com/broadinstitute/gatk/issues/777; https://github.com/samtools/htsjdk/issues/404",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1259:188,test,test,188,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1259,5,['test'],"['test', 'tests']"
Testability,"From @droazen on https://github.com/broadinstitute/gatk/pull/2350. > Would be good to add test cases with: 1. secondary alignments in addition to primary alignments 2. supplementary alignments in addition to primary alignments, and possibly 3. the case of more than two reads in a fragment (in which case both ""first of pair"" and ""second of pair"" can be set).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2418:90,test,test,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2418,1,['test'],['test']
Testability,"From @tomwhite:. I noticed that the test with ""-knownSites"" from BaseRecalibratorIntegrationTest (i.e. the non-dataflow version) fails with both the Direct and Spark runners. I had a look at the file output and there are a few discrepancies (see diff below). . ```; diff /var/folders/d1/8f5_j4hx04z72w6wgqxkb2l40000gn/T/walktest.tmp_param.02172067147450353519.tmp src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.NA12878.chr17_69k_70k.2inputs.txt; 60c60; < 34 3051 34. ---; > 34 3050 34; 71c71; < 45 46942 45. ---; > 45 46940 45; 124,126c124,126; < 809R9ABXX101220.5 D 45.0000 45.0000 23471 0.00; < 809R9ABXX101220.5 I 45.0000 45.0000 23471 0.00; < 809R9ABXX101220.5 M 27.0000 27.0494 23471 49.13. ---; > 809R9ABXX101220.5 D 45.0000 45.0000 23470 0.00; > 809R9ABXX101220.5 I 45.0000 45.0000 23470 0.00; > 809R9ABXX101220.5 M 27.0000 27.0493 23470 49.13; 155c155; < 809R9ABXX101220.5 34 M 34.0000 3051 2.96. ---; > 809R9ABXX101220.5 34 M 34.0000 3050 2.96; 161,162c161,162; < 809R9ABXX101220.5 45 D 45.0000 23471 0.00; < 809R9ABXX101220.5 45 I 45.0000 23471 0.00. ---; > 809R9ABXX101220.5 45 D 45.0000 23470 0.00; > 809R9ABXX101220.5 45 I 45.0000 23470 0.00; 2714c2714; < 809R9ABXX101220.5 34 29 Cycle M 34.0000 20 0.00. ---; > 809R9ABXX101220.5 34 29 Cycle M 34.0000 19 0.00; 2773c2773; < 809R9ABXX101220.5 34 CA Context M 34.0000 506 0.00. ---; > 809R9ABXX101220.5 34 CA Context M 34.0000 505 0.00; 3464,3465c3464,3465; < 809R9ABXX101220.5 45 29 Cycle D 45.0000 180 0.00; < 809R9ABXX101220.5 45 29 Cycle I 45.0000 180 0.00. ---; > 809R9ABXX101220.5 45 29 Cycle D 45.0000 179 0.00; > 809R9ABXX101220.5 45 29 Cycle I 45.0000 179 0.00; 3634,3635c3634,3635; < 809R9ABXX101220.5 45 GCA Context D 45.0000 278 0.00; < 809R9ABXX101220.5 45 GCA Context I 45.0000 278 0.00. ---; > 809R9ABXX101220.5 45 GCA Context D 45.0000 277 0.00; > 809R9ABXX101220.5 45 GCA Context I 45.0000 277 0.00; ```. The relevant test is this one from `BaseRecalibratorDataflowIntegrationTest`. ```; new BQSRTest(",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/883:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/883,2,['test'],['test']
Testability,"From @tomwhite:. What we can do though is take another look at why we need such a small split size and see if we can increase it (by better tuning etc). Even if we can't we know that some for some classes of jobs (e.g. metrics) we can use the default split size without an issue, so we could add logic to choose an appropriate split size based on the type of job. Thinking about this a bit more, we're actually quite close to a solution. In the existing Spark Mark Duplicates implementation, for example, you can set the parallelism (with -P). By default it is the same as the number of input partitions, but if the partitions are too large then each reducer has too much data to deal with and the job fails. This is why we made the number of partitions large by reducing the split size to 10MB. However, by increasing the number of reducers (by setting -P to be input data size/10MB), the input split size can be increased to its default of 128MB without causing a problem. So I think the work here is to work out a good set of defaults and the smallest number of knobs to override them. For example, I think we could always use the default split size, have some heuristics to choose a good value for the parallelism, and allow it to be overridden with -P. We should also decouple the parallelism and whether the output is a single file. For ReadsPipelineSpark we have -shardedOutput, but not for MarkDuplicatesSpark (where it's signalled by -P 1), so we should make this consistent.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1403:296,log,logic,296,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1403,1,['log'],['logic']
Testability,"From an analysis by @jean-philippe-martin:. **The Problem**. Doing a preliminary performance analysis of Hellbender, I found that ReadBAM did not scale with the number of workers. ![image](https://cloud.githubusercontent.com/assets/798637/8913030/757d9552-3464-11e5-8244-46931fed8383.png). Logs indicated it was running on a single worker, regardless of how many were specified for the job. **The Cause**. The underlying cause is a combination of ReadBAM's design and Dataflow's own perhaps over-eager optimization. ReadBAM is implemented as a series of transforms. It could also have been implemented as a Dataflow BoundedSource, but the latter is much more complicated. The transforms are as follows:; Start with a collection of filenames and a collection of contigs.; Transform 1 -- input: filenames, side input: contigs. Generates a list of regions to read (""BAMShard""); Transform 2 -- input: `PCollection<BAMShard>`, output: `PCollection<Read>`. Each worker reads from the BAM file, using the index to find where to read from. Dataflow sees that transform 2 takes as input transform 1's output, and so these two can be run in sequence on the same machines, skipping a serialization/deserialization step. This optimization is called ""fusing"" and it's generally a very good thing. However in this case, the input PCollection has a single element (the file we want to read), so only one worker is involved. Because of the fusion, that same worker then ends up doing all of the reading work, ruining our day. **The Solutions**. There are multiple ways to solve this problem. ; 1. change transform 1 to have the contig collection as a primary input in the hope that we always have more than one contig. ; This solution's very brittle (our benchmark, for example, reads a single chromosome so the contig list has effectively only one element). I did not pursue it.; 2. Insert a groupby step between the two transforms.; pro: this gets all the workers involved again; con: the groupby itself takes some ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/756:290,Log,Logs,290,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/756,1,['Log'],['Logs']
Testability,"From the comments in the code:. ```; // TODO: Test with multiallelics; // TODO: Test with multiallelics and symbolic at the same time; // TODO: Test with symbolic; // TODO: Test with information missing from the VCF and make sure appropriate exception is thrown.; // TODO: Test with more cutoff variables; // TODO: Once above five TODOs are done (at least), AnnotatePairOrientation can be taken out of Experimental status.; ```; We can raise the priority if this tool gains traction. That seems unlikely since this is still a bit of a niche tool.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3623:46,Test,Test,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3623,5,['Test'],['Test']
Testability,Funcotator - Add regression test against known output (truth set),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4344:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4344,1,['test'],['test']
Testability,Funcotator - Benchmark it and compare to Oncotator,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3857:13,Benchmark,Benchmark,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3857,1,['Benchmark'],['Benchmark']
Testability,Funcotator - add in data source files to test data,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3908:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3908,1,['test'],['test']
Testability,Funcotator - annotations without variant classification generated by new VariantClassification logic,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4410:95,log,logic,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4410,1,['log'],['logic']
Testability,Funcotator - integrate WDL into M2 WDL & automate testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4088:50,test,testing,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4088,1,['test'],['testing']
Testability,Funcotator - logic error for large deletions overlapping 5'UTR,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6345:13,log,logic,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6345,1,['log'],['logic']
Testability,Funcotator Indels need more test cases for HG19,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3841:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3841,1,['test'],['test']
Testability,Funcotator Indels need test cases for HG38,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5223:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5223,1,['test'],['test']
Testability,Funcotator flanks feature needs test cases for multiple genes and all transcripts mode,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5417:32,test,test,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5417,1,['test'],['test']
Testability,Funcotator logic bug,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6289:11,log,logic,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6289,1,['log'],['logic']
Testability,"Funcotator needs a way to read in a locatable XSV but also have it match alleles before adding an annotation (in the same way that VCF data sources require matching alleles). This would allow transformation of large VCF data sources (such as gnomAD) into more easily compressed and read XSV files. . After implementation this needs to be benchmarked for gnomAD 2.1 Alelle Frequency VCFs and if the XSVs are faster, the VCFs should be transformed into XSV files and uploaded to the Funcotator data source bucket. The current speed of gnomAD annotation on the canonical hg19 file is ~2500 variants / minute after the first couple of minutes. Full stats (as pulled from the `ProgressMeter` output):; MIN: 1674.8; MAX: 2996.8; MEAN: 2459.4; MEDIAN: 2344.3; STDEV: 217.057; NUM DATA POINTS: 573. For the same file, Oncotator performs at ~12000 variants/minute with all the same data sources except gnomAD. . Even with gnomAD there is no reason Funcotator should be slower than Oncotator.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5605:338,benchmark,benchmarked,338,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5605,1,['benchmark'],['benchmarked']
Testability,"Funcotator needs more / better HG38 tests (MNP, SNP, ...)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4317:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4317,1,['test'],['tests']
Testability,Funcotator needs more complete integration tests. These tests should better verify that the produced results are correct.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4344:43,test,tests,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4344,2,['test'],['tests']
Testability,"Funcotator needs test coverage for ""all transcripts"" mode",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5295:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5295,1,['test'],['test']
Testability,"Funcotator produces MAF files in accordance with `TCGA MAF Spec v2.4.1` ([TCGA_MAF_SPEC_2_4_1.tar.gz](https://github.com/broadinstitute/gatk/files/7008573/TCGA_MAF_SPEC_2_4_1.tar.gz)). The current public MAF format is [`GDC MAF v1.0.0`](https://docs.gdc.cancer.gov/Data/File_Formats/MAF_Format/). . All our documentation must be updated to reflect this. Worse, the TCGA MAF 2.4.1 Spec is now locked behind a login screen and may not be available at all. When I sent an email about this, I was told it would change soon. That was over 2 years ago.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7424:408,log,login,408,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7424,1,['log'],['login']
Testability,Funcotator reference compatibility logging,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7757:35,log,logging,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7757,1,['log'],['logging']
Testability,"Funcotator: add 5'/3' flank support, with tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5403:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5403,1,['test'],['tests']
Testability,Funcotator: suppress a log message about b37 contigs when not doing b37/hg19 conversion,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8758:23,log,log,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8758,1,['log'],['log']
Testability,FuncotatorDataSourceBundlerUtilsUnitTest - Add tests for invalid kingdoms / species,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7578:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7578,1,['test'],['tests']
Testability,Funncotator - Need some built-in / packaged test datasources,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3906:44,test,test,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3906,1,['test'],['test']
Testability,Fyl test null pointer,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5190:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5190,1,['test'],['test']
Testability,G GenomeLocParser - chrUn_KI270749v1 (158759 bp); 23:44:42.544 DEBUG GenomeLocParser - chrUn_KI270750v1 (148850 bp); 23:44:42.544 DEBUG GenomeLocParser - chrUn_KI270751v1 (150742 bp); 23:44:42.544 DEBUG GenomeLocParser - chrUn_KI270752v1 (27745 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_KI270753v1 (62944 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_KI270754v1 (40191 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_KI270755v1 (36723 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_KI270756v1 (79590 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_KI270757v1 (71251 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_GL000214v1 (137718 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_KI270742v1 (186739 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_GL000216v2 (176608 bp); 23:44:42.545 DEBUG GenomeLocParser - chrUn_GL000218v1 (161147 bp); 23:44:42.545 DEBUG GenomeLocParser - chrEBV (171823 bp); 23:44:42.632 INFO FeatureManager - Using codec IntervalListCodec to read file file:///gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/scatter/scatter_30.interval_list; 23:44:42.739 DEBUG FeatureDataSource - Cache statistics for FeatureInput /gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/scatter/scatter_30.interval_list:/gpfs/hpc/home/lijc/xiangxud/project/test/NGS_WES_test/4_tools_vcf/gatk4/info/scatter/scatter_30.interval_list:; 23:44:42.740 DEBUG FeatureCache - Cache hit rate was 0.00% (0 out of 0 total queries); 23:44:42.743 INFO IntervalArgumentCollection - Processing 1022379 bp from intervals; 23:44:42.756 INFO GermlineCNVCaller - Reading and validating annotated intervals...; 23:44:43.119 INFO GermlineCNVCaller - GC-content annotations for intervals found; explicit GC-bias correction will be performed...; 23:44:43.160 INFO GermlineCNVCaller - Running the tool in COHORT mode...; 23:44:43.160 INFO GermlineCNVCaller - Validating and aggregating data from input read-count files...; 23:44:43.160 DEBUG GenomeLocParser - ,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8938:19371,test,test,19371,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8938,1,['test'],['test']
Testability,GATK CNV/ACNV automated WDL tests should use docker,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2963:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2963,1,['test'],['tests']
Testability,GATK Funcotator [SQLITE_IOERR_LOCK] I/O error in the advisory file locking logic (disk I/O error),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7474:75,log,logic,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7474,1,['log'],['logic']
Testability,"GATK Version: 4.0.9.0. The issue: ; The previously available ""beta"" tool MarkDuplicatesGATK introduced reliable support for CRAM formatted files into the GATK tool chain. . Since that was removed again, I noticed that the default/picard-derived MarkDuplicates does not work reliably on CRAM formatted files. I am getting:. java.lang.IllegalStateException: A valid CRAM reference was not supplied and one cannot be acquired via the property settings reference_fasta or use_cram_ref_download. using this call:; gatk MarkDuplicates -I Sample_AS-230151.clean.cram -O test.cram -M metrics -R /ifs/data/nfs_share/ikmb_repository/references/gatk/bundle/2.8/b37/human_g1k_v37.clean.fasta. Files in folder: Sample_AS-230151.clean.cram Sample_AS-230151.clean.cram.bai Sample_AS-230151.clean.cram.crai. Since CRAM provides a *significant* storage saving over BAM, we would very much like use CRAM exclusively. But this still seems to be an issue, despite reports over at the Picard-side of things dating back to 2016 and beyond. . Any chance of this ever getting fixed?. Cheers,; Marc",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5218:563,test,test,563,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5218,1,['test'],['test']
Testability,"GATK doesn't seem to be working on Windows any longer, at least HaploTypeCaller crashes with the following. Tested with GATK 4.0.9.0, 4.0.11.0 and 4.1.0.0. ```; java.exe -jar gatk-package-4.1.0.0-local.jar HaplotypeCaller -R refa.fa -I refa.bam -O bam_chramma.vcf; java.nio.file.InvalidPathException: Illegal char <:> at index 2: /C:/Users/Teemu/AppData/Local/Temp/; at sun.nio.fs.WindowsPathParser.normalize(Unknown Source); at sun.nio.fs.WindowsPathParser.parse(Unknown Source); at sun.nio.fs.WindowsPathParser.parse(Unknown Source); at sun.nio.fs.WindowsPath.parse(Unknown Source); at sun.nio.fs.WindowsFileSystem.getPath(Unknown Source); at java.nio.file.Paths.get(Unknown Source); at org.broadinstitute.hellbender.utils.io.IOUtils.getPath(IOUtils.java:759); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:161); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:211); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:160); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:203); at org.broadinstitute.hellbender.Main.main(Main.java:289). ```. The last version I have tested where this still works is 4.0.8.1. It is caused most likely because of the forward slash before C:. There are several examples of the error that can be googled. Here's one:. https://bugs.eclipse.org/bugs/show_bug.cgi?id=518079",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5805:108,Test,Tested,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5805,2,"['Test', 'test']","['Tested', 'tested']"
Testability,GATK launch has a fairly complex set of error conditions it can handle. Since it's in python it's very easy to break it without realizing. We need tests for it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1694:147,test,tests,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1694,1,['test'],['tests']
Testability,GATK public doesn't have any example of an `AssemblyRegionWalker` and no integration tests. This makes it easy to accidentally break the haplotype caller without realizing it. We should have an ExampleAssemblyRegionWalker and integration tests for it to prevent this.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2172:85,test,tests,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2172,2,['test'],['tests']
Testability,GATK shouldn't dump all htsjdk properties to the logger,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2691:49,log,logger,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2691,1,['log'],['logger']
Testability,"GATK tools still run to completion, but the error message is disruptive. ; ```; $> docker run --rm --network none broadinstitute/gatk gatk -version. 2022-08-03 20:37:23,349 main ERROR Could not determine local host name java.net.UnknownHostException: de2c81c88ddc: de2c81c88ddc: Temporary failure in name resolution; at java.net.InetAddress.getLocalHost(InetAddress.java:1506); at org.apache.logging.log4j.core.util.NetUtils.getLocalHostname(NetUtils.java:54); at org.apache.logging.log4j.core.LoggerContext.lambda$setConfiguration$0(LoggerContext.java:620); at java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1660); at org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:620); at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:699); at org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:716); at org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:270); at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:155); at org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:47); at org.apache.logging.log4j.LogManager.getContext(LogManager.java:196); at org.apache.logging.log4j.LogManager.getLogger(LogManager.java:599); at org.broadinstitute.hellbender.utils.Utils.<clinit>(Utils.java:72); at org.broadinstitute.hellbender.Main.<clinit>(Main.java:45); Caused by: java.net.UnknownHostException: de2c81c88ddc: Temporary failure in name resolution; at java.net.Inet4AddressImpl.lookupAllHostAddr(Native Method); at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:929); at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1324); at java.net.InetAddress.getLocalHost(InetAddress.java:1501); ...13 more. The Genome Analysis Toolkit (GATK) v4.2.6.1; HTSJDK Version: 2.24.1; Picard Version: 2.27.1; Using GATK jar /gatk/gatk-package-4.2.6.1-local.jar; Running:; java -Dsamjdk.u",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7983:1089,log,logging,1089,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7983,1,['log'],['logging']
Testability,"GATK3 has such a test, we should either port it or write a new one.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2303:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2303,1,['test'],['test']
Testability,"GATK4 depends on a beta release of Protocol Buffer 3.0.0, specifically ""3.0.0-beta-1"" because other versions break the tests depending on hadoop.dfs.minicluster.utils. Eventually, we must move up to a stable version of protocol buffers i.e. either .3.0.0 or higher.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2437:119,test,tests,119,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2437,1,['test'],['tests']
Testability,"GATK4 in some cases outputs the first and last tranches twice in its tranche file and this leads to an extra line in the output file as well. This was reported as part of the tieout, i.e. for this test case:. gatk-launch VariantRecalibrator \; --variant /seq/dax/ExAc2/Exome/v2/sites_only_combined/chr1.sites_only.unfiltered.vcf.gz \; --resource mills,known=false,training=true,truth=true,prior=12:/seq/references/Homo_sapiens_assembly19/; --resource axiom,known=false,training=true,truth=false,prior=10:/seq/references/Homo_sapiens_assembly19; --resource dbsnp138,known=true,training=false,truth=false,prior=2:/seq/references/Homo_sapiens_assembly; -an QD -an MQRankSum -an ReadPosRankSum -an FS -an SOR \; -tranche 100.0 -tranche 99.95 -tranche 99.9 -tranche 99.8 -tranche 99.6 -tranche 99.5 -tranche 99.4 -tr; -trustAllPolymorphic \; --output results/recal4_indel_exome.vcf \; -mode INDEL \; -tranchesFile results/recal4_indel_exome.txt \; --gatk3Compatibility",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2276:197,test,test,197,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2276,1,['test'],['test']
Testability,"GATK4 needs to work on cram files. We need to add tests to check that we can process CRAM files and get results equivalent to BAM. At the minimum, this needs to cover adding tests for:; - [x] MarkDuplicates; - [x] BQSR; - [x] PrintReads; - [x] CountReads ; - [x] CountBases; - [x] MeanQualityByCycle; - [x] QualityScoreDistribution; - [ ] CalculateHsMetrics; - [ ] CollectGCBiasMetrics; - [x] CollectBaseDistributionByCycle; - [x] CollectQualityYieldMetrics; - [x] CollectInsertSizeMetrics; - [x] CollectAlignmentSummaryMetrics; - [ ] all picard tools in the sam package. Ideally also unit/integration tests for :; - [ ] HaplotypeCaller; - [ ] CNV coverage collection. (Make sure to use non-lossy settings when converting our BAMs to CRAM)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/590:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/590,3,['test'],['tests']
Testability,"GATK4 should alert developers if a change in a pull request has broken the docker image. Functionality should be similar to TEST_DOCKER in the travis yml of gatk-protected. In other words, one of the entries in the test matrix should build the gatk4 docker image (does not have to rebuild the gatk4 base image) and then run the unit tests in the image. ``build_docker.sh`` will include the steps to build the GATK4 docker image (without rebuilding gatkbase docker image) and run unit tests inside it. This functionality is trivially copied from gatk-protected repo. This issue requires #2457 to be completed before it can be started. And this description has been written as if issue #2457 has already been completed.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2697:215,test,test,215,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2697,3,['test'],"['test', 'tests']"
Testability,"GATK: https://gatk.broadinstitute.org/hc/en-us/categories/360002310591; However, when running the Determine Germline Contig Ploidy step, I stumble upon this error. Please guide me to solve this problem. ### Affected tool(s) or class(es); ```; gatk DetermineGermlineContigPloidy \; -L /home/nguyen/RB1/RB1.cohort.gc.filtered.interval_list \; --interval-merging-rule OVERLAPPING_ONLY \; -I ... (63 tsv files output from CollectReadCounts); ```. ### Affected version(s); - GATK 4.1.6.1; ### Description ; Full error log:; ```; Traceback (most recent call last):; File ""/tmp/cohort_determine_ploidy_and_depth.380621677219090732.py"", line 119, in <module>; ploidy_task.engage(); File ""/home/nguyen/anaconda3/envs/gatk/lib/python3.6/site-packages/gcnvkernel/tasks/inference_task_base.py"", line 339, in engage; converged_continuous = self._update_continuous_posteriors(); File ""/home/nguyen/anaconda3/envs/gatk/lib/python3.6/site-packages/gcnvkernel/tasks/inference_task_base.py"", line 395, in _update_continuous_posteriors; assert not np.isnan(loss), ""The optimization step for ELBO update returned a NaN""; AssertionError: The optimization step for ELBO update returned a NaN; 11:09:59.446 DEBUG ScriptExecutor - Result: 1; 11:09:59.447 INFO DetermineGermlineContigPloidy - Shutting down engine; [April 28, 2020 11:09:59 AM ICT] org.broadinstitute.hellbender.tools.copynumber.DetermineGermlineContigPloidy done. Elapsed time: 0.17 minutes.; Runtime.totalMemory()=623902720; org.broadinstitute.hellbender.utils.python.PythonScriptExecutorException: ; python exited with 1; Command Line: python /tmp/cohort_determine_ploidy_and_depth.380621677219090732.py --sample_coverage_metadata=/tmp/samples-by-coverage-per-contig8606344533091962323.tsv --output_calls_path=/home/nguyen/Exec/gatk-4.1.6.0/ploidy-calls --mapping_error_rate=1.000000e-02 --psi_s_scale=1.000000e-04 --mean_bias_sd=1.000000e-02 --psi_j_scale=1.000000e-03 --learning_rate=5.000000e-02 --adamax_beta1=9.000000e-01 --adamax_beta2=9.990000e-01 --",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6573:1086,assert,assert,1086,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6573,1,['assert'],['assert']
Testability,GATKTool.getHeaderForFeatures needs tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/452:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/452,1,['test'],['tests']
Testability,GATKTool.getHeaderForFeatures needs unit tests to check the behavior,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/452:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/452,1,['test'],['tests']
Testability,"GCNV: AssertionError: Loaded mean for ""log_mean_bias_t"" has an unexpected shape; loaded: (11903,), expected: (11901,)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8740:6,Assert,AssertionError,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8740,1,['Assert'],['AssertionError']
Testability,GDB feature request: silence buffer resize logging,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5568:43,log,logging,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5568,1,['log'],['logging']
Testability,"GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068169 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068170 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068171 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068172 . G *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068173 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; 20 10068174 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,4,0:6:53:735,102,53,507,108,472:0,0,2,4; ```. GenomicsDBImport run like this:. ```; ./gatk GenomicsDBImport -R src/test/resources/large/human_g1k_v37.20.21.fasta -L 20 -V src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk4.g.vcf -genomicsdb-workspace-path spanDelWorkspace; ./gatk SelectVariants -V gendb://spanDelWorkspace -R src/test/resources/large/human_g1k_v37.20.21.fasta -O test.g.vcf -L 20; ```. Returns the following output:. ```; 20 10068158 . GTGTATATATATA G,<NON_REF> . . BaseQRankSum=-6.520e-01;ClippingRankSum=0.00;DP=29;ExcessHet=3.01;MQRankSum=0.328;RAW_MQ=93364.00;ReadPosRankSum=-2.530e-0; 1 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068159 . T *,<NON_REF> . . DP=29 GT:AD:DP:GQ:PL:SB ./.:3,4,0:7:57:104,0,57,114,69,183:0,3,2,2; 20 10068160 . GTATATATATATGTA G,*,<NON_REF> . . DP=28;ExcessHet=3.01;RAW_MQ=87005.00 GT:AD:DP:GQ:PL:SB ./.:0,2,4,0:6:53:735,162,131,102,0,53,507,174,108,472:0,0,; 2,4; 20 10068161 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:53:735,162,131,507,174,472:0,0,2,4; 20 10068162 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:53:735,162,131,507,174,472:0,0,2,4; 20 10068163 . T *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:53:735,162,131,507,174,472:0,0,2,4; 20 10068164 . A *,<NON_REF> . . DP=28 GT:AD:DP:GQ:PL:SB ./.:0,2,0:6:5",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5160:3467,test,test,3467,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5160,1,['test'],['test']
Testability,"GRCh38.d1.vd1.fa -L /outputs/gatk_intervals.interval_list --interval-merging-rule OVERLAPPING_ONLY -O /outputs/E07002_tumor_alignment.bam.counts.hdf5. /soft/gatk-4.3.0.0/gatk DetermineGermlineContigPloidy -L /outputs/gatk_intervals.interval_list --interval-merging-rule OVERLAPPING_ONLY --contig-ploidy-priors /outputs/a_valid_ploidy_priors_table.tsv.copy.tsv --output /outputs/COHORT_runDir --output-prefix COHORT --input /outputs/E07002_normal_alignment.bam.counts.hdf5 --input /outputs/E07002_tumor_alignment.bam.counts.hdf5. /soft/gatk-4.3.0.0/gatk GermlineCNVCaller --run-mode COHORT -L /outputs/gatk_intervals.interval_list --interval-merging-rule OVERLAPPING_ONLY --annotated-intervals /outputs/gatk_intervals.interval_list.annotated.tsv --contig-ploidy-calls /outputs/COHORT_runDir/COHORT-calls --input /outputs/E07002_normal_alignment.bam.counts.hdf5 --input /outputs/E07002_tumor_alignment.bam.counts.hdf5 --output /outputs/COHORT_runDir --output-prefix COHORT; ```. We used data from `PRJNA399748` project to test. #### Expected behavior. - `test_gatkgermlinecnvcaller_genotyped-intervals-cohort_0.woTimestamp.vcf` (`##contig` cut from header and only first 5 `chr22` CNVs present). ```; ##fileformat=VCFv4.2; ##FORMAT=<ID=CN,Number=1,Type=Integer,Description=""Copy number maximum a posteriori value"">; ##FORMAT=<ID=CNLP,Number=.,Type=Integer,Description=""Copy number log posterior (in Phred-scale) rounded down"">; ##FORMAT=<ID=CNQ,Number=1,Type=Integer,Description=""Genotype call quality as the difference between the best and second best phred-scaled log posterior scores"">; ##FORMAT=<ID=GT,Number=1,Type=Integer,Description=""Genotype"">; ##INFO=<ID=END,Number=1,Type=Integer,Description=""End coordinate of the variant"">; ##contig=<ID=chr1,length=248956422,assembly=GRCh38.d1.vd1>; ...; ##contig=<ID=HPV-mSD2,length=7300,assembly=GRCh38.d1.vd1>; ##source=PostprocessGermlineCNVCalls; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	E07002_normal; chr1	10000	CNV_chr1_10000_10999	N	<DEL>,<DUP",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8619:2316,test,test,2316,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8619,1,['test'],['test']
Testability,GVCF extension was whimsically wrong in a few places. Will probably require updating some tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2163:90,test,tests,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2163,1,['test'],['tests']
Testability,GVS / Hail VDS integration test [VS-639],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8086:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8086,1,['test'],['test']
Testability,Gather test data sets for SV caller testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1101:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1101,2,['test'],"['test', 'testing']"
Testability,"GatherVcfsIntegrationTest.testBlockGather() passes locally, but runs out of memory and gets killed on travis",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3208:26,test,testBlockGather,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3208,1,['test'],['testBlockGather']
Testability,GencodeFuncotationFactoryUnitTest::testCreateFuncotations needs to be fixed for b37/hg19 compliance,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5356:35,test,testCreateFuncotations,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5356,1,['test'],['testCreateFuncotations']
Testability,Generate new resources for CNV WDL tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4007:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4007,1,['test'],['tests']
Testability,"GenomicsDB 1.1.2 is missing the Mac version of the GDB native library (`libtiledbgenomicsdb.dylib`). This PR reverts the two recent GDB PRs (https://github.com/broadinstitute/gatk/pull/6190 and https://github.com/broadinstitute/gatk/pull/6188), and takes us back to the previous release of GenomicsDB, which didn't have this problem. I've asked @nalinigans to submit a fresh PR once there's a GenomicsDB release that fixes this issue, and also to add a GATK test that asserts the `.dylib` is present on the classpath.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6204:458,test,test,458,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6204,2,"['assert', 'test']","['asserts', 'test']"
Testability,"GenomicsDB excessive logging ""[E::faidx_adjust_position] The sequence ""chrX"" was not found""",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7751:21,log,logging,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7751,1,['log'],['logging']
Testability,"GenomicsDB sometimes returns a 64 bit type as a result of computations. This type is not supported by BCF2Codec while decoding resulting in NPEs - see #6548 and #6667. The initial reservation against using VCFCodec as the default was performance related, benchmarks show the BCF2Codec to be about 10-15% faster than VCF2Codec, but VCFCodec handles all the types correctly. This PR makes VCFCodec the default and the argument `--genomicsdb-use-vcf-codec` has been replaced by `--genomicsdb-use-bcf-codec`. Also, included in this PR are some argument documentation fixes and one bug fix where a com.google.cloud.storage.StorageException was being thrown if a -V argument pointing to a genomicsdb GCS workspace(e.g. gendb.gs://mybucket/myworkspace) did not end in a slash.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6675:255,benchmark,benchmarks,255,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6675,1,['benchmark'],['benchmarks']
Testability,GenomicsDB unit test fix,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4293:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4293,1,['test'],['test']
Testability,GenomicsDB(GenomicsDBImportIntegrationTest.java:180); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testCommandIncludedInOutputHeader(GenomicsDBImportIntegrationTest.java:422); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: com.intel.genomicsdb.GenomicsDBException: Could not load genomicsdb native library; 	at com.intel.genomicsdb.GenomicsDBImporter.<clinit>(GenomicsDBImporter.java:72); 	... 37 more; ```. if yo,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4062:2205,Test,TestRunner,2205,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4062,1,['Test'],['TestRunner']
Testability,GenomicsDBFeatureReader(GenomicsDBImportIntegrationTest.java:926); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:550); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:520); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1035); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunn,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6522:3454,test,testng,3454,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6522,1,['test'],['testng']
Testability,GenomicsDBFeatureReader(GenomicsDBImportIntegrationTest.java:927); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:551); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:521); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1104); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunn,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:1866,test,testng,1866,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,1,['test'],['testng']
Testability,GenomicsDBImport crash without error reported in log file,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7218:49,log,log,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7218,1,['log'],['log']
Testability,GenomicsDBImport/testHeaderContigLineSorting2.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.3.8-4-g7b0250253f.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.alleleSpecific.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.alleleSpecific.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/pretendTobeTetraPloidTetraAllelicSite.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.empty.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.noSG.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg1.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg2.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg3.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg4.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg5.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly18.10k_lines.dict; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly18.10k_lines.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/mutect/dream,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:37812,test,testVCFMode,37812,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['testVCFMode']
Testability,"GenotypeAlleleCount's toString function was broken, leading to a misleading debugging information showing up in the debugger. This PR fixes the bug and adds tests for toString output.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6376:157,test,tests,157,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6376,1,['test'],['tests']
Testability,GenotypingEngine needs more/better direct unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2522:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2522,1,['test'],['tests']
Testability,GermlineCNVCaller and tests only work when run from gradle.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3552:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3552,1,['test'],['tests']
Testability,GermlineCNVCaller error when testing for nf-core modules,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8097:29,test,testing,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8097,1,['test'],['testing']
Testability,GermlineCNVCaller: Odd behavior of the log dumped ELBO values vs the real tracked ELBO values in tracker-tar,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5376:39,log,log,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5376,1,['log'],['log']
Testability,Get gCNV in case mode to run under 30 cents per sample in the dsde-sv-pipe benchmark.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5288:75,benchmark,benchmark,75,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5288,1,['benchmark'],['benchmark']
Testability,Get tests to pass for Issue 5397,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5581:4,test,tests,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5581,1,['test'],['tests']
Testability,"GetCodonChangeString. - Added a unit test for; testCreateGencodeFuncotationBuilderWithTrivialFieldsPopulated. - Fixed a bug when variant ref allele doesn't match reference genome. - Fixed test cases for - strand indel cdna strings:; There is a bug in oncotator that was fixed in Funcotator involving cdna; strings for - strand indels. In Oncotator the positions reported are off by 1 (they; should be one less) and the base reported is also wrong.; This is now fixed. - Removed some old code that had been taken out of the main codepath. - Fixed a bug in how the gencode reference contexts are created.; - Fixed a bug in how the end points for the gencode annotations are; created. - Ref context field is now consistent for indels.; The reference context will give WINDOW bases before and after the; logical reference allele for a variant. This is NOT the allele in the; input VCF, but rather the allele that actually has changed. For; insertions, the logical allele is the SPACE BETWEEN TWO BASES (and; therefore the resulting string will always be 2xWINDOW bases long).; For deletions, the logical allele is the given ref allele without the; required preceding base. For MNPs the logical allele is the given ref; allele.; Updated some tests and test data to reflect this change. - Added a small HG38 regression test set. - Fixed a boundary bug with codon strings.; Now codon change strings have an alternate (correct) form for insertions; that involve the start codon on the - strand, and the stop codon on the; + strand. This form eliminates any overrun/out of bounds exceptions. - Fixed an issue involving variants that overrun the end of the coding sequence. - Added in additional required files for regression test gencode data source. - Added a helpful script and modified test data set to be correct. - Updated part of Gencode to prepare for fixing the exon boundary issue. - Updated FuncotatorIntegrationTests to use environment-variable paths; more safely. - Updated `FuncotatorUtils::getCod",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5302:3667,log,logical,3667,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5302,1,['log'],['logical']
Testability,"Given a list of samples for a callset, withdraw samples from GVS that are not included by marking them as 'withdrawn' in the sample_info table with a passed in timestamp. Test run here: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/568919e6-3c51-4ce9-978c-75ffc5ff9997",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8009:171,Test,Test,171,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8009,1,['Test'],['Test']
Testability,"Given the pending merging of #5913 and the issue #19 there are still a number of improvements that need to be made to the DepthOfCoverage for it to be considered a non-beta tool. In the future we may want to pull each of these issues into its own ticket but for now this list will live on in one place. We may choose to only implement some of these features, but we should complete whichever ones we want from this list before we take the tool out of Beta. Here is a compiled list of some of the things we would want to fix so that we don't forget:; - [ ] Added support for outputting RTables (which GATK3 supported); - [ ] Add support for fragment based DepthofCovarge (GATK3 feature). New Features that were requested:. - [ ] **Priority** Port the DiagnoseTargets tool logic in order to attach evaluations ( PASS, COVERAGE_GAPS, LOW_COVERAGE) to the output of this DepthOfCoverage tool. This was one of the requested new features and the primary blocker would be deciding which output table it is most prudently applied to (if not all of them).; - [ ] **Priority** Decide on a new format for inputting gene lists other than the `.refseq` format. There are more standard formats for inputting gene lists that would need support besides this feature. ; - [ ] Think about allowing gene coverage metrics to be reported on a per-transcript basis (This might already be done given that overlapping genes are already handled correctly by the new tool but somebody should evaluate that the results are satisfactory) ; - [ ] Evaluate gene list overlap with traversal lists. Currently if any bases of a gene in the gene list are covered by the traversal intervals then it gets included for whatever bases there are, perhaps adding an option restrict to only completely covered genes would be useful. ; - [ ] Add functionality for partitioning based on read filtering status given a provided list of partitioning read filters.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6491:771,log,logic,771,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6491,1,['log'],['logic']
Testability,GnarlyGenotyperIntegrationTest.testUsingGenomicsDB skipped on Travis.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6657:31,test,testUsingGenomicsDB,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6657,1,['test'],['testUsingGenomicsDB']
Testability,Gonna merge WDLs one at a time as they get changed then tested,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8023:56,test,tested,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8023,1,['test'],['tested']
Testability,GoodCigarFilter + tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/380:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/380,1,['test'],['tests']
Testability,"GvsCreateFilterSet.wdl failed recently for Morgan because of this bug. When run in a brand new project, filter model creation fails because we expect the project to have a hard coded dataset named ""temp_tables"" which is likely does not have. The workaround is simply to manually create one. This ticket removes the need for this dataset altogether. This is removed, and instead, the default dataset is used (that the many other tables created in this pipeline use as the default). able to reproduce with a dummy dataset name:; <img width=""1278"" alt=""Screen Shot 2022-03-03 at 10 44 39 PM"" src=""https://user-images.githubusercontent.com/6863459/156822409-a99d7068-169c-48a2-83ff-5bcc81cdbd2e.png"">. tested here:; https://app.terra.bio/#workspaces/broad-dsp-spec-ops-fc/gvs_testing_ingest/job_history/1dd27d90-82c4-44e6-8172-15c10c8a9c7f",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7704:698,test,tested,698,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7704,1,['test'],['tested']
Testability,"HC priors will let us reduce the WEx GVCF footprint. As a consequence, CalculateGenotypePosteriors now supports indels. I fixed a bug and changed the args for CGP. We didn't have great tests, but CGP results will be fixed/improved in some cases.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4793:185,test,tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4793,1,['test'],['tests']
Testability,HDF5Library uses incorrect logger.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3763:27,log,logger,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3763,1,['log'],['logger']
Testability,"HI, ; the following commands were included at my bash script .; after I ran them, I got a log file with ""Tool returned:; 6785087"", I am not sure why the return code is 6785087 , not 0 ???. Anything wrong with my commands ?; Thanks ! . gatk-4.1.2.0/gatk BaseRecalibrator -R $fasta -I $tumor_bam --known-sites a.vcf --known-sites b.vcf ; --intervals t.bed --interval-padding 50 --read-validation-stringency SILENT -O recal_data.table . gatk-4.1.2.0/gatk ApplyBQSR -R $fasta -I $tumor_bam --bqsr-recal-file recal_data.table ; --intervals t.bed --interval-padding 50 --read-validation-stringency SILENT -O recal_data.bam",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6056:90,log,log,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6056,1,['log'],['log']
Testability,HTSJDK Defaults.COMPRESSION\_LEVEL : 2 ; ; 23:01:23.929 INFO  SelectVariants - HTSJDK Defaults.USE\_ASYNC\_IO\_READ\_FOR\_SAMTOOLS : false ; ; 23:01:23.929 INFO  SelectVariants - HTSJDK Defaults.USE\_ASYNC\_IO\_WRITE\_FOR\_SAMTOOLS : true ; ; 23:01:23.929 INFO  SelectVariants - HTSJDK Defaults.USE\_ASYNC\_IO\_WRITE\_FOR\_TRIBBLE : false ; ; 23:01:23.930 INFO  SelectVariants - Deflater: IntelDeflater ; ; 23:01:23.930 INFO  SelectVariants - Inflater: IntelInflater ; ; 23:01:23.930 INFO  SelectVariants - GCS max retries/reopens: 20 ; ; 23:01:23.930 INFO  SelectVariants - Requester pays: disabled ; ; 23:01:23.930 INFO  SelectVariants - Initializing engine ; ; 23:01:25.939 INFO  GenomicsDBLibLoader - GenomicsDB native library version : 1.3.2-e18fa63 ; ; log4j:WARN No appenders could be found for logger (org.apache.hadoop.metrics2.lib.MutableMetricsFactory). ; ; log4j:WARN Please initialize the log4j system properly. ; ; log4j:WARN See [http://logging.apache.org/log4j/1.2/faq.html#noconfig](http://logging.apache.org/log4j/1.2/faq.html#noconfig) for more info. ; ; 23:01:39.847 info  NativeGenomicsDB - pid=4376 tid=4377 No valid combination operation found for INFO field AS\_InbreedingCoeff  - the field will NOT be part of INFO fields in the g ; ; enerated VCF records ; ; 23:01:39.847 info  NativeGenomicsDB - pid=4376 tid=4377 No valid combination operation found for INFO field AS\_QD  - the field will NOT be part of INFO fields in the generated VCF ; ; records ; ; 23:01:39.848 info  NativeGenomicsDB - pid=4376 tid=4377 No valid combination operation found for INFO field DS  - the field will NOT be part of INFO fields in the generated VCF rec ; ; ords ; ; 23:01:39.848 info  NativeGenomicsDB - pid=4376 tid=4377 No valid combination operation found for INFO field InbreedingCoeff  - the field will NOT be part of INFO fields in the gene ; ; rated VCF records ; ; 23:01:39.848 info  NativeGenomicsDB - pid=4376 tid=4377 No valid combination operation found for INFO field MLEAC  - ,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7070:3767,log,logging,3767,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7070,1,['log'],['logging']
Testability,Handles edge case of Fisher Exact Test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2307:34,Test,Test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2307,1,['Test'],['Test']
Testability,"Haplotype caller crashing with NULL pointer exception.; gatk version 4.1.4.0; Steps followed:; 1. bwa alignment; 2. Sorting; 3. Mark duplicate; 4. BaseRecalibrator; 5. ApplyBQSR; 6. HaplotypeCaller. Here is the haplotype caller log. Using GATK jar /home/administrator/IGIB/gatk-4.1.4.0/gatk-package-4.1.4.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /home/administrator/IGIB/gatk-4.1.4.0/gatk-package-4.1.4.0-local.jar HaplotypeCaller -R /home/administrator/IGIB/samples/Homo_sapiens_assembly38.fasta -I data_gatk/aligned.sort.dup.rg.recal.bam -O data_gatk/aligned.sort.dup.rg.recal.bam.vcf; 02:07:46.602 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/administrator/IGIB/gatk-4.1.4.0/gatk-package-4.1.4.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Nov 28, 2019 2:07:51 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 02:07:51.772 INFO HaplotypeCaller - ------------------------------------------------------------; 02:07:51.773 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.1.4.0; 02:07:51.773 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 02:07:51.773 INFO HaplotypeCaller - Executing as mvasimud@uarch-compression on Linux v4.4.0-142-generic amd64; 02:07:51.773 INFO HaplotypeCaller - Java runtime: OpenJDK 64-Bit Server VM v9-internal+0-2016-04-14-195246.buildd.src; 02:07:51.773 INFO HaplotypeCaller - Start Date/Time: 28 November 2019 at 2:07:46 AM IST; 02:07:51.773 INFO HaplotypeCaller - ------------------------------------------------------------; 02:07:51.773 INFO HaplotypeCaller - ------------------------------------------------------------; 02:07:51.774 INFO HaplotypeCaller - HTSJDK Version: 2.20.3; 02:07:51.774 ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6292:228,log,log,228,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6292,1,['log'],['log']
Testability,"HaplotypeCaller and Mutect2:. ![screen shot 2018-05-30 at 2 36 58 pm](https://user-images.githubusercontent.com/8438890/40759148-b860a5da-645e-11e8-8f94-21534ed9ab48.png). Notice how all of the reads that appear to support a single-base deletion actually do not because they do not span the poly-T homopolymer. This makes the bamout harder to interpret. In this particular case (of a false positive M2 insertion) it is a red herring because it suggests that the multiallelicness of the site is relevant to the false positive deletion. One could ask what in the GATK engine is responsible. * The assembly engine, perhaps? No, it is the assembly engine's job to propose possible haplotypes, not to call them. In any case, there *is* one spanning read with the deletion above the reads shown, so it is a valid path in the graph.; * Pair-HMM? This one confused me for a while, but no. The engine is *not* saying that these reads' best alignment to the reference has a deletion, which would be false because there is a gap opening penalty. Rather, it says that they align equally well (with no deletions) to the ref haplotype and to the deletion haplotype. The deletion shown in IGV is the deletion of the alt haplotype relative to the reference, not of the reads relative to their best haplotype.; * The bamout writer? Nope, that code is really straightforward and does the right thing. So what's the issue? Well, the bamout writer gets its read alignments from the `readLikelihoods` after the reads have been realigned to their best haplotype. In these cases, it turns out that the alignment of the reads to their best haplotype, the deletion has a log likelihood better than the alignment to the ref haplotype by about 0.00001. The simplest solution would be to give an extremely modest prior in favor of the reference and break these near-ties in favor of the reference. @droazen @ldgauthier @yfarjoun if you think this is a good idea I can fix it for both HC and M2. Otherwise I'll do an M2-only fix.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4829:1696,log,log,1696,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4829,1,['log'],['log']
Testability,HaplotypeCaller should have (better) tests for multi-sample calling,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6581:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6581,1,['test'],['tests']
Testability,HaplotypeCaller: add a good integration test for the --max-alternate-alleles argument,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4497:40,test,test,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4497,1,['test'],['test']
Testability,HaplotypeCaller: add test coverage for arguments not covered by tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4338:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4338,2,['test'],"['test', 'tests']"
Testability,"HaplotypeCaller: bug fix for GENOTYPE_GIVEN_ALLELES mode, plus tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4038:63,test,tests,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4038,1,['test'],['tests']
Testability,"HaplotypeCaller: fix -contamination argument, and add tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4455:54,test,tests,54,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4455,1,['test'],['tests']
Testability,HaplotypeCallerIntegrationTest: add a boolean toggle to update the expected outputs for all exact-match-based tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5324:110,test,tests,110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5324,1,['test'],['tests']
Testability,HaplotypeCallerIntegrationTest: migrate away from GATK3 concordance tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5532:68,test,tests,68,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5532,1,['test'],['tests']
Testability,"Have been having the following issue running StructuralVariationDiscoveryPipeline on previous and the newest release of GATK(4.1.0.0). Currently attempting to use on a computing cluster without spark enabled. . Command line used:; gatk/gatk-4.1.0.0/gatk StructuralVariationDiscoveryPipelineSpark \; -I $CRAM \; -R $Hg38 \; --aligner-index-image reference.fasta.Hg38.img \; --kmers-to-ignore kmers_to_ignore_hg38.txt \; --contig-sam-file aligned_contigs.sam \; -O ${base}_GATK_SV_output.vcf . **Error Log**:; 19/02/01 21:28:27 INFO TaskSetManager: Starting task 700.0 in stage 5.0 (TID 4405, localhost, executor driver, partition 700, PROCESS_LOCAL, 4940 bytes); 19/02/01 21:28:27 INFO Executor: Running task 700.0 in stage 5.0 (TID 4405); 19/02/01 21:28:27 INFO TaskSetManager: Finished task 668.0 in stage 5.0 (TID 4373) in 37331 ms on localhost (executor driver) (669/741); 19/02/01 21:28:27 INFO BlockManagerInfo: Removed taskresult_4373 on 10.120.16.54:34926 in memory (size: 1645.1 KB, free: 15.8 GB); 19/02/01 21:28:27 INFO NewHadoopRDD: Input split: file: /cram8/1-00004__CG0000-1789.GMKF2.cram:23488102400+33554432; 19/02/01 21:28:28 ERROR Executor: Exception in task 698.0 in stage 5.0 (TID 4403); **java.lang.IllegalArgumentException: provided start is negative: -24**; at org.broadinstitute.hellbender.tools.spark.sv.utils.SVInterval$SVIntervalConstructorArgsValidator.lambda$static$3(SVInterval.java:76); at org.broadinstitute.hellbender.tools.spark.sv.utils.SVInterval$SVIntervalConstructorArgsValidator.lambda$andThen$0(SVInterval.java:61); at org.broadinstitute.hellbender.tools.spark.sv.utils.SVInterval.<init>(SVInterval.java:86); at org.broadinstitute.hellbender.tools.spark.sv.utils.SVInterval.<init>(SVInterval.java:51); at org.broadinstitute.hellbender.tools.spark.sv.evidence.QNameFinder.apply(QNameFinder.java:48); at org.broadinstitute.hellbender.tools.spark.sv.evidence.QNameFinder.apply(QNameFinder.java:16); at org.broadinstitute.hellbender.tools.spark.utils.FlatMapGluer.ha",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5647:500,Log,Log,500,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5647,1,['Log'],['Log']
Testability,Heap Space error in PopulateFilterSetInfo. Passing Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/50d867c5-3f6f-405b-8e7b-a714ab7e806f).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8575:63,Test,Test,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8575,1,['Test'],['Test']
Testability,Hellbender should export unit/integration testing utils as a maven artifact.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/525:42,test,testing,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/525,1,['test'],['testing']
Testability,"Hello there,. ## Documentation request. It would be awesome if each major/minor release of GATK contained benchmarking results run against a truth set. For calling short germline variants, you could evaluate precision and recall using one of the NIST samples (i.e. HG002) and for calling short somatic variants you could use the SEQC2 tumor-normal pair. . I would like to see how new releases of GATK and how your recommendations/best practices impact precision and recall against a known truth set. This transparency would help anyone using your tools decide if it's worth upgrading to a new release of GATK, or if their implementation of your recommended set of best practices is performing as expected. . If this information could be added to the best practices pages, a relevant tutorial, or a new section of the documentation (containing hap.py/som.py benchmarking information and run times for a set of tested tools and/or workflows), that would be great!. Please let me know what you think, and if you have any questions. Best regards,; @skchronicles",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/9019:106,benchmark,benchmarking,106,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/9019,3,"['benchmark', 'test']","['benchmarking', 'tested']"
Testability,"Hello!. When I try running gatk 4.0.7.0 on spark 2.2 Microsoft Azure hdinsight cluster (using data from here https://gatkforums.broadinstitute.org/gatk/discussion/6484/how-to-generate-an-unmapped-bam-from-fastq-or-aligned-bam#optionA) I get ""java.lang.NoClassDefFoundError: org/apache/logging/log4j/core/appender/AbstractAppender"" error like the one below. The thing that gatk-package-4.0.7.0-spark.jar has that class as can be verified by ; $jar tvf gatk-package-4.0.7.0-spark.jar; but nonetheless it seems like it does not load it correctly somehow. $java -version; openjdk version ""1.8.0_171""; OpenJDK Runtime Environment (build 1.8.0_171-8u171-b11-0ubuntu0.16.04.1-b11); OpenJDK 64-Bit Server VM (build 25.171-b11, mixed mode). What would be the possible fix for it?. $./gatk PrintReadsSpark -I ../6484_snippet.bam -O ../output.bam -- --spark-runner SPARK --spark-master spark://10.0.0.21:7077; Using GATK jar /root/gatk-4.0.7.0/gatk-package-4.0.7.0-spark.jar; Running:; /usr/hdp/current/spark2-client/bin/spark-submit --master spark://10.0.0.21:7077 --conf spark.driver.userClassPathFirst=false --conf spark.io.compression.codec=lzf --conf spark.driver.maxResultSize=0 --conf spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.kryoserializer.buffer.max=512m --conf spark.yarn.executor.memoryOverhead=600 /root/gatk-4.0.7.0/gatk-package-4.0.7.0-spark.jar PrintReadsSpark -I ../6484_snippet.bam -O ../output.bam --spark-master spark://10.0.0.21:7077; SLF4J: Class path contains multiple SLF4J bindings.; SLF4J: Found binding in [jar:file:/usr/hdp/2.6.3.40-13/spark2/jars/sl",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5126:285,log,logging,285,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5126,1,['log'],['logging']
Testability,"Hello, ; I was trying to create a candidates SNP list for **GATK4 BaseRecalibrator** to recalibrate the alignment for SNP calling. And I met a problem with the indexing of the my vcf file of candidates SNPs. ; The indexing step and recalibrating step ran without any error, but only very small amount of SNPs (~2900) were detected from a genome **~15Gbp** size, which is definitely not correct as compared with other methods when **~million SNPs** were detected. ; I tracked down the problem is at the indexing step for the candidates vcf file (**925751 SNPs, through HaplotypeCaller**). The problem looks like only the **last chromosome** was indexed.; This is my log file in which the Google engine related part was omitted as I did not use it: ; ```; $ cat ${LOGDIR}/index_candidates.log. (09:28:38.902 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/storage/ppl/yifang/download-software/anaconda3/envs/exome/share/gatk4-4.1.0.0-0/gatk-package-4.1.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; May 06, 2019 9:28:39 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; WARNING: Failed to detect whether we are running on Google Compute Engine.; java.net.ConnectException: Connection refused; 	at java.net.PlainSocketImpl.socketConnect(Native Method). ...... May 06, 2019 9:28:39 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; WARNING: Failed to detect whether we are running on Google Compute Engine.; java.net.ConnectException: Connection refused; 	at java.net.PlainSocketImpl.socketConnect(Native Method); 	; May 06, 2019 9:28:39 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; WARNING: Failed to detect whether we are running on Google Compute Engine.; java.net.ConnectException: Connection refused. ...... 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:205); 	at org.broadinstitute.hellbender.Main.main(Main.java:291).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5917:665,log,log,665,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5917,3,"['LOG', 'log']","['LOGDIR', 'log']"
Testability,"Hello, I made a PoN with my samples and created an hdf5 PoN. This was made using . ##Preprocess; ``; gatk PreprocessIntervals -R ref/hs37d5.fa --bin-length 10000 --padding 0 -O preprocessed_intervals.interval_list; ``. ##annotate; ``; gatk AnnotateIntervals -R ref/hs37d5.fa -L preprocessed_intervals.interval_list --interval-merging-rule OVERLAPPING_ONLY -O annotated_intervals.tsv; ``. ##PoN; ``; gatk --java-options ""-Xmx6500m"" CreateReadCountPanelOfNormals -I MD0078B1.counts.hdf5 -I MD1341B1.counts.hdf5 --minimum-interval-median-percentile 5.0 -O sandbox/cnvponC.pon.hdf5; ``. When I use DenoiseReadCounts on the .counts.hdf5 for the tumour samples, I get an error.; This is the command I used: ; ``; gatk DenoiseReadCounts -I BT1813.counts.hdf5 --count-panel-of-normals cnvponC2.pon.hdf5 --standardized-copy-ratios BT1813.standardizedCR.tsv --denoised-copy-ratios BT1813.denoisedCR.tsv; ``. I know that some of these errors are expected but I don't see any other errors and I'm not sure why it stopped running. Any help would be appreciated thank you!. ##Affected Version: gatk/4.0.1.2. ##Bug Report. Using GATK jar /hpf/tools/centos6/gatk/4.0.1.2/gatk-package-4.0.1.2-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -jar /hpf/tools/centos6/gatk/4.0.1.2/gatk-package-4.0.1.2-local.jar DenoiseReadCounts -I BT1813.counts.hdf5 --count-panel-of-normals cnvponC2.pon.hdf5 --standardized-copy-ratios BT1813.standardizedCR.tsv --denoised-copy-ratios BT1813.denoisedCR.tsv; 20:08:44.839 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/hpf/tools/centos6/gatk/4.0.1.2/gatk-package-4.0.1.2-local.jar!/com/intel/gkl/native/libgkl_compression.so; 20:08:45.222 INFO DenoiseReadCounts - ------------------------------------------------------------; 20:08:45.222 INFO DenoiseReadCounts - The Genome Analysis Toolkit (GATK) v4.0.1.2; 20:08:45.222 INFO D",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7258:553,sandbox,sandbox,553,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7258,1,['sandbox'],['sandbox']
Testability,"Hello, When I implement ""HaplotypeCaller"" commands, the reference genome is about 15G , every chromosome is more then 600M, I get some errors, could you give me some advice?; the commands; ```; # the step is after marked duplication ; samtools index -c markdup.bam.gz; gatk --java-options ""-Xmx100G -Djava.io.tmpdir=./"" HaplotypeCaller -R Triticum_aestivum.IWGSC.dna.toplevel.fa -I rmarkdup.bam.gz -O SRR9851087.gvcf.gz -ERC GVCF -OVI >3gvcf.log 2>&1; ```; the bug:; ```; Using GATK jar /home/ywt/anaconda3/share/gatk4-4.3.0.0-0/gatk-package-4.3.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx100G -Djava.io.tmpdir=./ -jar /home/ywt/anaconda3/share/gatk4-4.3.0.0-0/gatk-package-4.3.0.0-local.jar HaplotypeCaller -R Triticum_aestivum.IWGSC.dna.; toplevel.fa -I rmarkdup.bam.gz -O SRR9851087.gvcf.gz -ERC GVCF -OVI; 09:01:25.845 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/ywt/anaconda3/share/gatk4-4.3.0.0-0/gatk-package-4.3.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 09:01:25.950 INFO HaplotypeCaller - ------------------------------------------------------------; 09:01:25.950 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.3.0.0; 09:01:25.950 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 09:01:25.950 INFO HaplotypeCaller - Executing as ywt@ywt-Precision-5820-Tower on Linux v5.15.0-41-generic amd64; 09:01:25.950 INFO HaplotypeCaller - Java runtime: OpenJDK 64-Bit Server VM v17.0.5+8-Ubuntu-2ubuntu122.04; 09:01:25.950 INFO HaplotypeCaller - Start Date/Time: February 8, 2023 at 9:01:25 AM CST; 09:01:25.950 INFO HaplotypeCaller - ------------------------------------------------------------; 09:01:25.950 INFO HaplotypeCaller - ------------------------------------------------------------; 09:01:25.951 INFO HaplotypeCaller - HTSJDK V",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8192:442,log,log,442,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8192,1,['log'],['log']
Testability,"Hello,. Could you help me with this? I ran this code:; ```; prg=/home/user1/Programs/gatk-4.5.0.0; log_dir=/home/user1/Programs/logs; java -Xmx64g -XX:ParallelGCThreads=2 -DGATK_STACKTRACE_ON_USER_EXCEPTION=true \; -jar ${prg}/gatk-package-4.5.0.0-local.jar IndexFeatureFile -I ${dir}/snp_allsamples.vcf.gz \; --output snp_allsamples.vcf.tbi \; 2>${log_dir}/snp_allsamples_gvcf_index.err. ```; and I received the following error message. ```; 09:36:35.254 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/user1/Programs/gatk-4.5.0.0/gatk-package-4.5.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 09:36:35.386 INFO IndexFeatureFile - ------------------------------------------------------------; 09:36:35.389 INFO IndexFeatureFile - The Genome Analysis Toolkit (GATK) v4.5.0.0; 09:36:35.389 INFO IndexFeatureFile - For support and documentation go to https://software.broadinstitute.org/gatk/; 09:36:35.389 INFO IndexFeatureFile - Executing as user1@xxx.xx on Linux v5.4.0-150-generic amd64; 09:36:35.389 INFO IndexFeatureFile - Java runtime: OpenJDK 64-Bit Server VM v17.0.3-internal+0-adhoc..src; 09:36:35.389 INFO IndexFeatureFile - Start Date/Time: March 21, 2024 at 9:36:35 a.m. CST; 09:36:35.390 INFO IndexFeatureFile - ------------------------------------------------------------; 09:36:35.390 INFO IndexFeatureFile - ------------------------------------------------------------; 09:36:35.390 INFO IndexFeatureFile - HTSJDK Version: 4.1.0; 09:36:35.391 INFO IndexFeatureFile - Picard Version: 3.1.1; 09:36:35.391 INFO IndexFeatureFile - Built for Spark Version: 3.5.0; 09:36:35.391 INFO IndexFeatureFile - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 09:36:35.391 INFO IndexFeatureFile - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 09:36:35.392 INFO IndexFeatureFile - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 09:36:35.392 INFO IndexFeatureFile - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 09:36:35.392 INFO IndexFeature",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8747:128,log,logs,128,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8747,1,['log'],['logs']
Testability,"Hello,. I use GATK(4.2.0.0) HaplotypeCaller call SNPs and CombineGVCFs combining the .g.vcf files. everything goes well.; However, when I use GenotypeGVCFs, I encounter an error [htsjdk.samtools.SAMFormatException: Did not inflate expected amount]. And I see the same Error in [#7582](https://github.com/broadinstitute/gatk/issues/7582), I try to add two parameters --use-jdk-deflater & --use-jdk-inflater, but I get the new Error [java.util.zip.DataFormatException: invalid code lengths set]. ----. ### Version and Tools; GATK 4.2.0.0 GenotypeGVCFs. ### The commend ; java -Xmx10g -jar /home/software/gatk-4.2.0.0/gatk-package-4.2.0.0-local.jar GenotypeGVCFs --use-jdk-inflater true --use-jdk-deflater true -R ref.rename.fa -V test.vcf.gz -O test_geno.vcf.gz. ### Error log 1. 21:12:43.028 INFO GenotypeGVCFs - Shutting down engine; [2021年12月20日 下午09时12分43秒] org.broadinstitute.hellbender.tools.walkers.GenotypeGVCFs done. Elapsed time: 6.12 minutes.; Runtime.totalMemory()=4856479744; htsjdk.samtools.SAMFormatException: Did not inflate expected amount; 	at htsjdk.samtools.util.BlockGunzipper.unzipBlock(BlockGunzipper.java:147); 	at htsjdk.samtools.util.BlockGunzipper.unzipBlock(BlockGunzipper.java:96); 	at htsjdk.samtools.util.BlockCompressedInputStream.inflateBlock(BlockCompressedInputStream.java:550); 	at htsjdk.samtools.util.BlockCompressedInputStream.processNextBlock(BlockCompressedInputStream.java:532); 	at htsjdk.samtools.util.BlockCompressedInputStream.nextBlock(BlockCompressedInputStream.java:468); 	at htsjdk.samtools.util.BlockCompressedInputStream.readBlock(BlockCompressedInputStream.java:458); 	at htsjdk.samtools.util.BlockCompressedInputStream.available(BlockCompressedInputStream.java:196); 	at htsjdk.samtools.util.BlockCompressedInputStream.read(BlockCompressedInputStream.java:331); 	at htsjdk.samtools.util.BlockCompressedInputStream.read(BlockCompressedInputStream.java:257); 	at htsjdk.tribble.readers.PositionalBufferedStream.fill(PositionalBufferedStream.java:132);",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7614:728,test,test,728,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7614,2,"['log', 'test']","['log', 'test']"
Testability,"Hello,. I'm running into issues with joint genotyping on 2500 (small) GVCF files. I'm running GATK4 from bcbio-nextgen on an SGE cluster and `GenomicsDBImport` runs into: `OSError: [Errno 7] Argument list too long: '/bin/bash'`. I've checked bcbio's logs and it looks like GenomicsDBImport is being executed on all the 2500 samples simultaneously, with the option `--batch-size 50`, which doesn't seem to help in my case:. ```; [2020-01-30T06:56Z] haswell-wn29.grid.pub.ro: unset JAVA_HOME && export PATH=/export/home/ncit/external/a.mizeranschi/bcbio_nextgen/anaconda/bin:""$PATH"" && gatk --java-options '-Xms800m -Xmx11466m -XX:+UseSerialGC -Djava.io.tmpdir=/export/home/ncit/external/a.mizeranschi/automated-VC-test/testingVC/work/joint/gatk-haplotype-joint/testingVC/chr7/bcbiotx/tmp2bu4nmgf' GenomicsDBImport --reader-threads 4 --genomicsdb-workspace-path testingVC-chr7_0_141973873_genomicsdb -L chr7:1-141973873 --variant /export/home/ncit/external/a.mizeranschi/automated-VC-test/testingVC/work/precalled/HG00096-joint-gatk-haplotype-annotated-precalled.vcf.gz --variant /export/home/ncit/external/a.mizeranschi/automated-VC-test/testingVC/work/precalled/HG00097-joint-gatk-haplotype-annotated-precalled.vcf.gz --variant /export/home/ncit/external/a.mizeranschi/automated-VC-test/testingVC/work/precalled/HG00099-joint-gatk-haplotype-annotated-precalled.vcf.gz [...] --batch-size 50; ```. Is there a way I can things running with the 2500 samples?. For more details, including the full stack trace, please see: https://github.com/bcbio/bcbio-nextgen/issues/3074.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6428:250,log,logs,250,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6428,11,"['log', 'test']","['logs', 'test', 'testingVC', 'testingVC-']"
Testability,"Hello,. I'm testing gatk4.3 against 3 WES samples. For less time comsuption, I scattered the bed file into 45 small interval list. But an error prompted out in the GermlineCNVCaller step with the err below:. ```; 23:43:52.386 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/gpfs/hpc/home/lijc/xiangxud/software/miniconda3/envs/gatk4/share/gatk4-4.3.0.0-0/gatk-package-4.3.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 23:43:52.401 DEBUG NativeLibraryLoader - Extracting libgkl_compression.so to /tmp/libgkl_compression16416313594950485777.so; 23:43:52.469 INFO GermlineCNVCaller - ------------------------------------------------------------; 23:43:52.469 INFO GermlineCNVCaller - The Genome Analysis Toolkit (GATK) v4.3.0.0; 23:43:52.469 INFO GermlineCNVCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 23:43:52.470 INFO GermlineCNVCaller - Executing as xiangxud@cu22 on Linux v3.10.0-1160.el7.x86_64 amd64; 23:43:52.470 INFO GermlineCNVCaller - Java runtime: OpenJDK 64-Bit Server VM v11.0.8-internal+0-adhoc..src; 23:43:52.470 INFO GermlineCNVCaller - Start Date/Time: August 3, 2024 at 11:43:52 PM CST; 23:43:52.470 INFO GermlineCNVCaller - ------------------------------------------------------------; 23:43:52.470 INFO GermlineCNVCaller - ------------------------------------------------------------; 23:43:52.470 INFO GermlineCNVCaller - HTSJDK Version: 3.0.1; 23:43:52.470 INFO GermlineCNVCaller - Picard Version: 2.27.5; 23:43:52.470 INFO GermlineCNVCaller - Built for Spark Version: 2.4.5; 23:43:52.471 INFO GermlineCNVCaller - HTSJDK Defaults.BUFFER_SIZE : 131072; 23:43:52.471 INFO GermlineCNVCaller - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 23:43:52.471 INFO GermlineCNVCaller - HTSJDK Defaults.CREATE_INDEX : false; 23:43:52.471 INFO GermlineCNVCaller - HTSJDK Defaults.CREATE_MD5 : false; 23:43:52.471 INFO GermlineCNVCaller - HTSJDK Defaults.CUSTOM_READER_FACTORY : ; 23:43:52.471 INFO GermlineCNVCaller - HTSJ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8938:12,test,testing,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8938,1,['test'],['testing']
Testability,"Hello,. I'm using the latest docker image to test GATK4 pipeline (v 4.0.1.2) and I'm struggling to get it done. Apparently it has to do with the task manager service, please find attached the full log of one of my runs.; [65670_gatk_hc.log](https://github.com/broadinstitute/gatk/files/1717363/65670_gatk_hc.log). Best,; Pedro",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4393:45,test,test,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4393,4,"['log', 'test']","['log', 'test']"
Testability,"Hello,. It seems the parameter `--sequence-dictionary` does not change the dictionary looked by **HaplotypeCaller**. ```; averdier@bioinfo:~/test/dna-seq-pipeline$ ./dna-seq-pipeline.pl -1 CACTTCGA-ACACGACC_S156_L003_R1_001.fastq.gz -2 CACTTCGA-ACACGACC_S156_L003_R2_001.fastq.gz -r Triticum_aestivum_Claire_EIv1.1.fa.gz -s ClaireTest --nb_threads 30; --mem_limit 100; Mapping; Mark Duplicates; Variants Calling; 09:54:54.531 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/opt/gatk/gatk-package-4.1.7.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Sep 11, 2020 9:54:54 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 09:54:54.730 INFO HaplotypeCaller - ------------------------------------------------------------; 09:54:54.731 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.1.7.0; 09:54:54.731 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 09:54:54.731 INFO HaplotypeCaller - Executing as averdier@bioinfo on Linux v4.4.0-178-generic amd64; 09:54:54.731 INFO HaplotypeCaller - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_265-8u265-b01-0ubuntu2~18.04-b01; 09:54:54.731 INFO HaplotypeCaller - Start Date/Time: September 11, 2020 9:54:54 AM CEST; 09:54:54.731 INFO HaplotypeCaller - ------------------------------------------------------------; 09:54:54.731 INFO HaplotypeCaller - ------------------------------------------------------------; 09:54:54.732 INFO HaplotypeCaller - HTSJDK Version: 2.21.2; 09:54:54.732 INFO HaplotypeCaller - Picard Version: 2.21.9; 09:54:54.732 INFO HaplotypeCaller - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 09:54:54.732 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 09:54:54.732 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 09:54:54.732 INFO HaplotypeCaller - HTSJDK Defaults.USE_A",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6808:141,test,test,141,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6808,1,['test'],['test']
Testability,"Hello,. We're trying to run GenotypeGVCFs on a large genomicsDB workspace. The command is below, with the output. We run these jobs scatter/gather, with each job getting a define, small interval set. Despite being given a huge amount of RAM (testing >250GB), virtually all of the jobs die without any messages right after the ""Starting traversal' message. A few gave error messages like the one below. . In this example, you'll see it's running with Xmx178g. We added 60G to the cluster memory request to leave buffer for the C layer. We're on v4.2.5.0. Does this error look familiar, and/or do you have any troubleshooting suggestions? Thanks in advance. ```; /home/exacloud/gscratch/prime-seq/java/java8/bin/java \; 	-Djava.io.tmpdir=<path> \; 	-Xmx178g -Xms178g \; 	-Xss2m \; 	-jar GenomeAnalysisTK4.jar \; 	GenotypeGVCFs \; 	-R 128_Mmul_10.fasta \; 	--variant gendb:///home/exacloud/gscratch/prime-seq/cachedData/16b9ede7-6db8-103a-9262-f8f3fc86a851/WGS_Feb22_1852.gdb \; 	-O /home/exacloud/gscratch/prime-seq/workDir/1bb5295c-6ec5-103a-8692-f8f3fc86cd3f/Job1.work/WGS_pre-mGAPv2.3_1852.vcf.gz \; 	--annotate-with-num-discovered-alleles \; 	-stand-call-conf 30 \; 	--max-alternate-alleles 6 \; 	--force-output-intervals mmul10.WGS-WXS.whitelist.v2.3.sort.merge.bed \; 	-L 1:1-3714165 \; 	--only-output-calls-starting-in-intervals \; 	--genomicsdb-shared-posixfs-optimizations. 12:31:14.647 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/exacloud/gscratch/prime-seq/bin/GenomeAnalysisTK4.jar!/com/intel/gkl/native/libgkl_compression.so; Feb 15, 2022 12:31:14 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 12:31:14.783 INFO GenotypeGVCFs - ------------------------------------------------------------; 12:31:14.783 INFO GenotypeGVCFs - The Genome Analysis Toolkit (GATK) v4.2.5.0; 12:31:14.783 INFO GenotypeGVCFs - For support and documentation go to",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7674:242,test,testing,242,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7674,1,['test'],['testing']
Testability,"Hello,. We've been using GATK4 DepthOfCoverage. I noticed this:. log4j:WARN No appenders could be found for logger (org.broadinstitute.hellbender.tools.walkers.coverage.DepthOfCoverage).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info. I noticed that DepthOfCoverage defines its own logger on line 84:. private final static Logger logger = Logger.getLogger(DepthOfCoverage.class);. Should it?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6621:108,log,logger,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6621,6,"['Log', 'log']","['Logger', 'logger', 'logging']"
Testability,"Hello,; I was trying to hard-filter the vcf files outputed by GATK HaplotypeCaller, and I want to keep variants that meet the following condition: depth (QD) < 2.0 || FisherStrand (FS) > 60.0 || root mean square mapping quality (MQ) < 40.0 || mapping quality rank sum test(MQRankSum) <−12.5 || ReadPosRankSum <−8.0. Here is my code:. `; for i in *.vcf.gz; do samplename=${i##*/}; sample=${samplename%%.*}; $gatk VariantFiltration -V $i --filter-expression ""QD < 2.0"" --filter-name ""QD2"" --filter-expression ""FS > 60.0"" --filter-name ""FS60"" --filter-expression ""MQ < 40.0"" --filter-name ""MQ40"" --filter-expression ""MQRankSum < -12.5"" --filter-name ""MQRankSum-12.5"" --filter-expression ""ReadPosRankSum < -8.0"" --filter-name ""ReadPosRankSum-8"" -O ../../hardFilter/snp/${sample}.hardfil.snp.vcf.gz ; done; `; But I met some warings:; `; 17:37:07.563 WARN JexlEngine - ![0,9]: 'MQRankSum < -12.5;' undefined variable MQRankSum; 17:37:07.564 WARN JexlEngine - ![0,14]: 'ReadPosRankSum < -8.0;' undefined variable ReadPosRankSum; 17:37:07.564 WARN JexlEngine - ![0,9]: 'MQRankSum < -12.5;' undefined variable MQRankSum; 17:37:07.564 WARN JexlEngine - ![0,14]: 'ReadPosRankSum < -8.0;' undefined variable ReadPosRankSum; 17:37:07.564 WARN JexlEngine - ![0,9]: 'MQRankSum < -12.5;' undefined variable MQRankSum; 17:37:07.564 WARN JexlEngine - ![0,14]: 'ReadPosRankSum < -8.0;' undefined variable ReadPosRankSum; `; It seems that the ""MQRankSum"" and ""ReadPosRankSum"" were not defined.; Then I checked the filtered vcf, and the filter is seemed not working, many variations that do not satisfy the expression are also determined as pass:; ![屏幕截图 2024-08-27 181728](https://github.com/user-attachments/assets/8478ec45-ea1f-4f81-8cf2-f49b8ca5369d); I hope to receive your help.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8964:268,test,test,268,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8964,1,['test'],['test']
Testability,"Hello.; I am not sure if this is a bug or simply a tool version problem but when running the tests with `./gradlew test` I get 18 failures with the `org.broadinstitute.hellbender.tools.walkers.variantutils.LeftAlignAndTrimVariantsUnitTest` class. I wanted to make sure GATK was working right when compiled it from source to have a working base a I intend to try out some experimental modifications to the code. ## Bug Report. ### Affected tool(s) or class(es); `org.broadinstitute.hellbender.tools.walkers.variantutils.LeftAlignAndTrimVariantsUnitTest`. ### Affected version(s); - [ ] Latest public release version [version?]; - [x] Latest master branch as of [11.12.18]. ### Description; The following commands were used to build and test GATK; ```; git pull; ./gradlew clean; ./gradlew bundle; ./gradlew test; ```; The tests resulted in 18 failed as can be seen in the attached file. ; [Test results - Class org.broadinstitute.hellbender.tools.walkers.variantutils.LeftAlignAndTrimVariantsUnitTest.html.zip](https://github.com/broadinstitute/gatk/files/2667609/Test.results.-.Class.org.broadinstitute.hellbender.tools.walkers.variantutils.LeftAlignAndTrimVariantsUnitTest.html.zip). If this is normal (expected) when building from the last commit on master you can close this issue. For experimental development should I use the most recent release or can I work from the most recent commit on master ?. #### Steps to reproduce; see commands above description. The problem could be from a library or java version maybe. I run a Ubuntu 16.04 LTS desktop.; ```; uname -a; Linux A13PC04 4.4.0-140-generic #166-Ubuntu SMP Wed Nov 14 20:09:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux. javac -version; javac 1.8.0_102. java -version; java version ""1.8.0_102""; Java(TM) SE Runtime Environment (build 1.8.0_102-b14); Java HotSpot(TM) 64-Bit Server VM (build 25.102-b14, mixed mode); ```. #### Expected behavior; I was expecting the tests to pass. #### Actual behavior; 18 tests failed.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5511:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5511,9,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,Here is an user trying to enable flow based annotations for non-flow data. . https://gatk.broadinstitute.org/hc/en-us/community/posts/24596063911963-Error-while-running-Mutect2-java-lang-IllegalArgumentException-the-index-points-past-the-last-element-of-the-collection-or-array-334-333. What could be done to prevent this? ; Possible ideas; - Check data and disable nonmatching annotations with a warning in the log; - Prevent running the command at all with error messages in the log; - Change the way annotations are named such as FB_myannotation...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8788:412,log,log,412,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8788,2,['log'],['log']
Testability,"Here is my command:; `gatk --java-options ""-Xmx32g"" HaplotypeCaller \; -R ucsc.hg19.fasta \; -I ${result}/${outf}_recal_reads.bam \; -O ${result}/${outf}.g.vcf.gz \; -G StandardAnnotation \; -G StandardHCAnnotation \; -genotyping-mode DISCOVERY \; -ERC GVCF \; -bamout ${result}/${outf}_HCbamout.bam`. I suspect there could be issue of memory. Is there any other alternative causes?; The last few lines of the log seems like HaplotypeCaller got cut short and VariantCalibrator jumped in.; Here is VariantRecalibrator command:; java -Xmx6g -jar GenomeAnalysisTK.jar \; -T VariantRecalibrator \; -R ${refgen} \; -input ${result}/${outf}.g.vcf.gz \; -resource:hapmap,known=false,training=true,truth=true,prior=15.0 ${hapmap} \; -resource:omni,known=false,training=true,truth=false,prior=12.0 ${omni} \; -resource:1000G,known=false,training=true,truth=false,prior=10.0 ${phaseonesnp} \; -resource:dbsnp,known=true,training=false,truth=false,prior=2.0 ${dbsnp} \; -an DP \; -an QD \; -an FS \; -an MQRankSum \; -an ReadPosRankSum \; -mode SNP \; -tranche 100.0 \; -tranche 99.9 \; -tranche 99.0 \; -tranche 90.0 \; -recalFile ${result}/${outf}_recalibrate_SNP.recal \; -tranchesFile ${result}/${outf}_recalibrate_SNP.tranches \; -rscriptFile ${result}/${outf}_recalibrate_SNP_plots.R. Here is the log:; `package-4.0.1.2-local.jar!/com/intel/gkl/native/libgkl_compression.so. 18:58:01.493 INFO HaplotypeCaller - ------------------------------------------------------------. 18:58:01.493 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.0.1.2. 18:58:01.493 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/. 18:58:01.493 INFO HaplotypeCaller - Executing as tranahg@i23 on Linux v3.10.0-693.11.6.el7.x86_64 amd64. 18:58:01.493 INFO HaplotypeCaller - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_45-b14. 18:58:01.493 INFO HaplotypeCaller - Start Date/Time: May 17, 2018 6:58:01 PM PDT. 18:58:01.493 INFO HaplotypeCaller - ---------------",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4788:410,log,log,410,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4788,1,['log'],['log']
Testability,"Here is my command:; spark-submit --driver-memory 8G --master local[1] --conf spark.kryoserializer.buffer.max=512m --conf spark.driver.maxResultSize=0 --conf spark.driver.userClassPathFirst=true --conf spark.executor.userClassPathFirst=true --conf spark.io.compression.codec=lzf --conf spark.yarn.executor.memoryOverhead=600 gatk-4.alpha/build/libs/gatk-all-version-unknown-SNAPSHOT-spark.jar BaseRecalibratorSpark -knownSites test.vcf -R hg19_rCRSchrm.2bit -I test.bam -O test.txt. The error msg is:; java.lang.ClassCastException: org.broadinstitute.hellbender.utils.variant.MinimalVariant cannot be cast to htsjdk.samtools.util.Locatable; at org.broadinstitute.hellbender.utils.collections.IntervalsSkipList.<init>(IntervalsSkipList.java:35); at org.broadinstitute.hellbender.engine.spark.BroadcastJoinReadsWithVariants.join(BroadcastJoinReadsWithVariants.java:22); at org.broadinstitute.hellbender.engine.spark.AddContextDataToReadSpark.add(AddContextDataToReadSpark.java:35); at org.broadinstitute.hellbender.tools.spark.BaseRecalibratorSpark.runTool(BaseRecalibratorSpark.java:91); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:257). It seems like BroadCast strategy in BaseRecalibratorSpark has some bugs when trying to join variants with reads. . i can see that Variant is implements from htsjdk.samtools.util.Locatable, but why it still have some problem there?. Is it because that somehow in some java environment, this clause will cause problem?; final IntervalsSkipList<Variant> variantSkipList = new IntervalsSkipList<>(variants.collect());. And it should be this assertion:; final IntervalsSkipList<Variant> variantSkipList = new IntervalsSkipList<Variant>(variants.collect());. I use java 1.8.0_66",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1386:427,test,test,427,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1386,4,"['assert', 'test']","['assertion', 'test']"
Testability,"Here it is. An overview of what's been added:; - metrics package; - a few general metrics classes (e.g. MultiLevelMetrics); - may want to push these down into HTSJDK later; - added some utils; - utils.gene: gene annotation; - utils.illumina: general Illumina-related utils (adapters, etc); - utils.text.parsers: text parsing; - utils.variant: added dbSNP stuff; - MathUtils: added a few basic things (mean, stddev, etc) with unit tests; - tools; - three major packages:; - analysis: metrics + analyses (including necessary Rscripts); - illumina: Illumina parsing + validation; - vcf: VCF manipulation + GenotypeConcordance; - also two smaller packages, fastq and intervals, containing a few tools each; - tests; - all existing tests were ported; still, overall test coverage goes down by ~6%; - all CLP integration tests have been ported to the new argument system; - test data has also been carried over, and is neatly organized; - there are no huge files, and very few above 100KB (just a few VCFs I think); - however, the Illumina test data is pretty big - ~6MB spread over ~1700 files",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/347:430,test,tests,430,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/347,7,['test'],"['test', 'tests']"
Testability,"Here's what this PR does:. * Adds an argument to skip a locus rather than downsample if depth is too high. This handles horrible regions so rife with mapping errors that we wouldn't believe any calls from them. Basically, it blacklists on the fly intervals that should have been blacklisted ahead of time.; * Adds a stride argument for positional downsampling so that we downsample within a range of alignment start positions. This regularizes statistical fluctuations in coverage and, more importantly, makes positional downsampling much more useful for data where many reads share the same start position while most start positions have no reads. I believe @fleharty deals with this kind of stuff.; * ~~Deletes a few methods in the `ReadsDownsampler` API that were only used in their own unit tests.~~; * Adds an option to bias downsampling in favor of reads with high mapping quality.; * Beefs up the unit tests for `PositionalDownsampler`. The new functionality is a superset of the old, and the old stuff is unchanged. HaplotypeCaller is not affected, unless of course someone wants to run it with the new options. The new options allow Mutect2 to run much faster.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3238:795,test,tests,795,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3238,2,['test'],['tests']
Testability,"Hey folks,. I have a test dataset that interestingly core-dumps or JVM errors with `--smith-waterman FASTEST_AVAILABLE` but not with `--smith-waterman JAVA`. The only thing I can think of is somehow Intel's HMM has a length limitation, as I am using `--assembly-region-padding 1000` to GATK to call 100-1000bp indels (and it works!). I cannot share the test BAM unfortunately. What can I do to help debug further?. I'm using `gatk4-4.1.8.1-0` from `conda create -n debug-gatk4 -c defaults -c conda-forge -c bioconda gatk4`. ```; $gatk ... -version; The Genome Analysis Toolkit (GATK) v4.1.8.1; HTSJDK Version: 2.23.0; Picard Version: 2.22.8; $ java -version; openjdk version ""1.8.0_152-release""; OpenJDK Runtime Environment (build 1.8.0_152-release-1056-b12); OpenJDK 64-Bit Server VM (build 25.152-b12, mixed mode); ```. First error motif:; ```; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000000010efa9dc2, pid=23946, tid=0x000000000000a503; #; # JRE version: OpenJDK Runtime Environment (8.0_152-b12) (build 1.8.0_152-release-1056-b12); # Java VM: OpenJDK 64-Bit Server VM (25.152-b12 mixed mode bsd-amd64 compressed oops); # Problematic frame:; # V [libjvm.dylib+0x3a9dc2] PhaseIdealLoop::set_ctrl(Node*, Node*)+0x10; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; #; # Compiler replay data is saved as:; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; ```. Second error motif:; ```; java(24057,0x7000035bd000) malloc: Incorrect checksum for freed object 0x7fd8a8193600: probably modified after being freed.; Corrupt value: 0x2e4630002e47e; java(24057,0x7000035bd000) malloc: *** set a breakpoint in malloc_error_break to debug; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6733:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6733,2,['test'],['test']
Testability,"Hi Adam,. I've reformatted the code and fixed some issues you raised in the first review.; Specifically:; 1. Default values for tool's boolean arguments are changed to false.; 2. Created an (ugly) SV program group.; 3. Uses Apache library to calculate statistics. Somethings are still to be changed:; 1. A lot of todo's.; 2. Histogram plot is created by Picard's R script, which was copied to SV. Of particular concern is that Picard's collection of the insert size distribution is potentially biased and has edge case bugs, see issue #1519. So I've used the following R script (can't attach on github) for collecting stats on the test bam file. ```; # Serves to collect basic metrics on insert sizes of test bam file and use for ; # unit testing assertions.; testBamFile <- ""insert_size_metrics_test.bam"". library(Rsamtools); # take only first end of read pairs; filter <- ScanBamParam(what=scanBamWhat(),flag=scanBamFlag(isFirstMateRead=T)); dd <- scanBam(testBamFile, param = filter); dd <- dd[[1]]; sizes <- abs(dd$isize[!is.na(dd$isize)]); sizes <- sort(sizes). metrics <- list(); metrics[[""count""]] <- length(sizes); metrics[[""median""]] <- median(sizes); metrics[[""mean""]] <- mean(sizes); metrics[[""min""]] <- min(sizes); metrics[[""max""]] <- max(sizes); metrics[[""MAD""]] <- mad(sizes, constant = 1); metrics[[""SD""]] <- sd(sizes). q <- quantile(sizes, probs = c(0.005, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45,; 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.995)); metrics[[""99_percent_width""]] <- as.integer(round(q[20] - q[1])); metrics[[""90_percent_width""]] <- as.integer(round(q[19] - q[2])); metrics[[""80_percent_width""]] <- as.integer(round(q[18] - q[3])); metrics[[""70_percent_width""]] <- as.integer(round(q[17] - q[4])); metrics[[""60_percent_width""]] <- as.integer(round(q[16] - q[5])); metrics[[""50_percent_width""]] <- as.integer(round(q[15] - q[6])); metrics[[""40_percent_width""]] <- as.integer(round(q[14] - q[7])); metrics[[""30_percent_width""]] <- as.integer(round(q[13] ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1529:631,test,test,631,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1529,6,"['assert', 'test']","['assertions', 'test', 'testBamFile', 'testing']"
Testability,"Hi Adam,. This is based on your feedback from Friday afternoon. ; Lots of issues are still to be addressed (multilevel collection, more test coverage, performance, etc).; If you are too busy to review, let me know and I'll bug @cwhelan or @tedsharpe or someone else. Branch travis log available [here](https://travis-ci.org/broadinstitute/gatk/builds/110702136). Thank you.; Steve",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1514:136,test,test,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1514,2,"['log', 'test']","['log', 'test']"
Testability,"Hi GATK developers:. Have 4 pacbio WGS bam files do to Haplotype calling. Each bam file was divided by chromosomes, but 3 parallele jobs failed due to java core dump:; - Syntax I ran was pretty basic, I also tried latest gatk version4.2.2.0, same result. Java version is ``` OpenJDK Runtime Environment (build 1.8.0_252-b09) ```; ```; /gatk-4.0.11.0/gatk --java-options ""-Xmx4G"" HaplotypeCaller \; -R GRCh38.p2.fa \; -I RT4_STD.bam \; -ERC GVCF \; -L chr16 \; -O RT4_STD.g.vcf \; -new-qual; ```; - Error message is also different; - First one is :; ```; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00002aaad9f1e54a, pid=7818, tid=0x00002aaaabdce700; #; # JRE version: Java(TM) SE Runtime Environment (8.0_111-b14) (build 1.8.0_111-b14); # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C [libgkl_pairhmm_omp1890484777463615571.so+0x6954a] double compute_full_prob_avxd<double>(testcase*)+0x34a; #; # Core dump written. Default location: core or core.7818; #; # An error report file with more information is saved as:; # hs_err_pid7818.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; ```. -Second one is ; ```; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00000035dfe84364, pid=160107, tid=0x00002aaaabdce700; #; # JRE version: Java(TM) SE Runtime Environment (8.0_111-b14) (build 1.8.0_111-b14); # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.111-b14 mixed mode linux-amd64 ); # Problematic frame:; # C [libc.so.6+0x84364]; #; # Core dump written. Default location: core or core.160107; #; # An error report file with more information is saved as:; # hs_err_pid160107.log; #; # If you would like to submit a bug report, please visit",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7515:1001,test,testcase,1001,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7515,1,['test'],['testcase']
Testability,"Hi GATK team,. this is a fix for the following issue : https://github.com/broadinstitute/gatk/issues/7304 where an IndexOutOfBoundsException is raised when there is a non-diploid genotype in `MendelianViolation.isViolation`. I added a switch case to test the child ploidy as well as a few tests in MendelianViolationUnitTest",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8279:250,test,test,250,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8279,2,['test'],"['test', 'tests']"
Testability,"Hi GATK, I have done the steps, i.e., 1)haplotypecaller 2)combineGVCF 3) GenotypeGVCF. Now I am interested in performing the allele matching between two samples, like whether the alleles are the same or different at a particular chromosomal location. Does GATK offer to perform this test? if yes, then which function in GATK will be preferable?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8681:283,test,test,283,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8681,1,['test'],['test']
Testability,"Hi all.; This looks like an issue presented by a forum post . [Haplotypecaller FORMAT:DP is affected by the interval in WGS](https://gatk.broadinstitute.org/hc/en-us/community/posts/27992393649051-Haplotypecaller-FORMAT-DP-is-affected-by-the-interval-in-WGS). User uploaded a toy data for us to test and I was able to recreate this issue under GATK 4.6.0.0. I have not tested it with any other versions. When whole contig is given as interval all variant sites in the multisample VCF is reported with DP value much less than what it is supposed to be in samples where no variation occur. Samples with variants are shown as expected DP. Setting ploidy 2 for this analysis restores the expected DP value for samples with HOMREF sites no matter what interval is used. Numbers can be seen in the figure as well as those variant contexts. . This is what user and I got with the whole contig given as interval. ```; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	DA10_DA10	TDY1754_TDY1754; CP022325.1	69348	.	T	A	2920.63	.	AC=1;AF=0.500;AN=2;DP=85;FS=0.000;MLEAC=1;MLEAF=0.500;MQ=60.00;QD=29.56;SOR=0.824	GT:AD:DP:GQ:PL	0:4,0:4:99:0,119	1:0,79:79:99:2931,0; ```; This is what comes when -L is set to `CP022325.1:69347-69349`. This is the same DP reported when ploidy is set to 2 no matter what interval is used. This is also the expected DP value. . ```; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	DA10_DA10	TDY1754_TDY1754; CP022325.1	69348	.	T	A	2920.63	.	AC=1;AF=0.500;AN=2;DP=98;FS=0.000;MLEAC=1;MLEAF=0.500;MQ=60.00;QD=25.36;SOR=0.824	GT:AD:DP:GQ:PL	0:17,0:17:99:0,685	1:0,79:79:99:2931,0; ```. ![image](https://github.com/user-attachments/assets/269169f8-7de2-415c-ba60-8356937da561). User data is in the incoming folder with name `cmateusiak_20240805.tar.gz`. The reference genome is a fungal one from the below link. [Fungi reference C.NeoformansKN99](https://fungidb.org/common/downloads/release-68/CneoformansKN99/fasta/data/FungiDB-68_CneoformansKN99_Genome.fasta)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8943:295,test,test,295,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8943,2,['test'],"['test', 'tested']"
Testability,Hi all;; I'm running into an issue when running GATK Spark based tools inside of Docker containers. Spark tries to look up the current username as part of initialization:. https://github.com/jaceklaskowski/mastering-apache-spark-book/blob/master/spark-sparkcontext-creating-instance-internals.adoc#-utilsgetcurrentusername. while fails in Docker container where the user ID is not present in `/etc/passwd`. This SO thread has a pretty good summary of the problem along with some hacky work arounds:. https://stackoverflow.com/questions/45198252/apache-spark-standalone-for-anonymous-uid-without-user-name. Is it possible to avoid needing Spark to login via username? Do you have any other tips/clues to work around this issue when running GATK Spark inside of container environments?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4626:647,log,login,647,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4626,1,['log'],['login']
Testability,"Hi all;; I'm running to a segfault issue with GATK4 beta6 when running GenomicsDBImport on some batches. This is a small self contained test case that demonstrates the problem:. https://s3.amazonaws.com/chapmanb/testcases/gatk/gatk4_genomicsdb_segfault.tar.gz. When running:; ```; gatk-launch --javaOptions '-Xms1g -Xmx2g' GenomicsDBImport --genomicsDBWorkspace fails_genomicsdb -L chr6:130365070-146544250 --variant NA12878.vcf.gz --variant NA24631.vcf.gz --variant NA24385.vcf.gz; ```; It appears to segfault in jniImportBatch:; ```; Java frames: (J=compiled Java code, j=interpreted, Vv=VM code); j com.intel.genomicsdb.GenomicsDBImporter.jniImportBatch(J[J)Z+0; j com.intel.genomicsdb.GenomicsDBImporter.importBatch()Z+160; j org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.traverse()V+301; j org.broadinstitute.hellbender.engine.GATKTool.doWork()Ljava/lang/Object;+12; j org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool()Ljava/lang/Object;+27; j org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs()Ljava/lang/Object;+431; j org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain([Ljava/lang/String;)Ljava/lang/Object;+14; j org.broadinstitute.hellbender.Main.runCommandLineProgram(Lorg/broadinstitute/hellbender/cmdline/CommandLineProgram;[Ljava/lang/String;)Ljava/lang/Object;+20; j org.broadinstitute.hellbender.Main.mainEntry([Ljava/lang/String;)V+19; j org.broadinstitute.hellbender.Main.main([Ljava/lang/String;)V+8; v ~StubRoutines::call_stub; ```; The same command works without the NA24385.vcf.gz sample but it wasn't clear what caused the issue from this input. I'm also seeing similar behavior over a few other regions and guess they're all caused by the same underlying issue. Thanks much for any pointers or ideas and please let me know if any other information would be useful.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3736:136,test,test,136,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3736,3,"['Stub', 'test']","['StubRoutines', 'test', 'testcases']"
Testability,"Hi all;; When validation runs on the GATK 4.0.0 release (congrats!) we're running into segfault issues on some `GenomicsDBImport` runs which look to be due to the length of the database path:; ```; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f99a7642c5b, pid=7446, tid=0x00007f99fbfa0700; #; # JRE version: OpenJDK Runtime Environment (8.0_121-b15) (build 1.8.0_121-b15); # Java VM: OpenJDK 64-Bit Server VM (25.121-b15 mixed mode linux-amd64 compressed oops); # Problematic frame:; # C [libtiledbgenomicsdb8843204539247232071.so+0x4fdc5b] std::string::compare(char const*) const+0x1b; ```; Here is a self-contained test case that reproduces the issue:. https://s3.amazonaws.com/chapmanb/testcases/gatk/gatk4_genomicsdb_length.tar.gz. A standard small name and longer name of 105 characters work fine:; ```; gatk-launch --java-options '-Xms1g -Xmx2g' GenomicsDBImport --reader-threads 1 --genomicsdb-workspace-path short_genomicsdb -L chr22:15069-15500 --variant Test1.vcf.gz --variant Test2.vcf.gz; gatk-launch --java-options '-Xms1g -Xmx2g' GenomicsDBImport --reader-threads 1 --genomicsdb-workspace-path long_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_genomicsdb/works_aaaaaaaaaaaaaaaaaaaaaaaaaa -L chr22:15069-15500 --variant Test1.vcf.gz --variant Test2.vcf.gz; ```; But when you add an additional character, you trigger the segfault:; ```; gatk-launch --java-options '-Xms1g -Xmx2g' GenomicsDBImport --reader-threads 1 --genomicsdb-workspace-path long_aaaaaa; aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_genomicsdb/fails_aaaaaaaaaaaaaaaaaaaaaaaaaaa -L chr22:15069-15500 -; -variant Test1.vcf.gz --variant Test2.vcf.gz; ```; Thank you for looking at this and please let me know if I can provide any other information to help debug.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4160:672,test,test,672,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4160,2,['test'],"['test', 'testcases']"
Testability,"Hi folks. @chandrans and I have laid out some plans towards updating GATK4 docs for the January 9 release. Our approach is to prioritize documentation around stable Best Practice Workflows. On the docket currently is the single stable workflow--germline SNP and indel calling from DNA data. We will of course update tool docs (excluding Spark and BWA tools) and supporting tutorials. Even for tools we are unfamiliar with, we aim to have at the least a basic description and an example command. Thanks for the documentation you have already done and the help you give us in updating these. If you are certain your workflow will be ready for the release, then please let us know immediately so we can plan accordingly. If your workflow will be ready later, then can you still give us an estimate for your release so we can plan ahead? Thanks. - @davidbenjamin, did I hear you correctly that you think somatic SNV and indel calling will be ready for the Jan 9 release?; - @samuelklee, I know major changes are currently afoot for somatic CNV. Will you make the Jan 9 release for the targeted exomes use-case? What about WGS?; - @mbabadi, is March, 2018 still the plan?; - @jonn-smith, what is the status on the Tool-That-Must-Not-Be-Named?; - @cwhelan @tedsharpe @SHuang-Broad, is SV on for next year or thereafter?. It would be most helpful to users if we also have validation of our workflows as applied to real data. Are there plans to make benchmarking stats available for each of your workflows?. Sheila and I have 30-man days we can give between us towards updating documentation by December 14. Besides Geraldine, we will rely on some of you to review further refinements to documentation from now to December 14. Thanks again.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3769:1442,benchmark,benchmarking,1442,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3769,1,['benchmark'],['benchmarking']
Testability,"Hi gatk team,. I tested Mutect2 with [this code](https://github.com/hurrialice/mutect-benchmark/blob/master/src/canine_related/M2_standalone/M2scatter_standalone.sh) and not found many of the variants being called are of `DP<5` as noted in VCF info field of Mutect2 output vcf. However I noticed there is a `callable-depth` param in Mutect2 with default 10. I am not sure if this param is actually being used. Could you please double-check? Thanks for your help!. I am using GATK4.1.2.0 locally.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6171:17,test,tested,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6171,2,"['benchmark', 'test']","['benchmark', 'tested']"
Testability,Hi team. ; This is an old topic from the forum . [LeftAlignIndels Alignments added out of order... Offending records are at [chr7:55268881] and [chr7:55268881]](https://gatk.broadinstitute.org/hc/en-us/community/posts/20834436731547-LeftAlignIndels-Alignments-added-out-of-order-Offending-records-are-at-chr7-55268881-and-chr7-55268881). ```; java.lang.IllegalArgumentException: Alignments added out of order in SAMFileWriterImpl.addAlignment for file:///Users/jcovino/Desktop/PLAA_2390/broken.bam. Sort order is coordinate. Offending records are at [chr7:55268881] and [chr7:55268881]; at htsjdk.samtools.SAMFileWriterImpl.assertPresorted(SAMFileWriterImpl.java:212); at htsjdk.samtools.SAMFileWriterImpl.addAlignment(SAMFileWriterImpl.java:199); at htsjdk.samtools.AsyncSAMFileWriter.synchronouslyWrite(AsyncSAMFileWriter.java:36); at htsjdk.samtools.AsyncSAMFileWriter.synchronouslyWrite(AsyncSAMFileWriter.java:16); at htsjdk.samtools.util.AbstractAsyncWriter$WriterRunnable.run(AbstractAsyncWriter.java:123); at java.base/java.lang.Thread.run(Thread.java:840); ```. The only current solution to this problem is feeding reads in queryname sorted way. When reads are coordinate sorted this error occurs. . There is a request from users that this tool should be able to work with coordinate sorted reads.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8975:624,assert,assertPresorted,624,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8975,1,['assert'],['assertPresorted']
Testability,"Hi there,. I'm wondering what would cause FixMisencodedBaseQualityReads to filter reads out. Filtering reads doesn't fit the description of the tool, as far as I can tell: ""Fixes Illumina base quality scores in a SAM/BAM/CRAM file."". This is what I'm seeing before and after using the tool:. ```; acesnik@DESKTOP$ samtools view -c TestData/test.bam; 1114; acesnik@DESKTOP$ samtools view -c TestData/test.fixedQuals.bam; 918; ```. The tool runs smoothly with the following output:. ```; 22:19:48.302 INFO FixMisencodedBaseQualityReads - ------------------------------------------------------------; 22:19:48.302 INFO FixMisencodedBaseQualityReads - The Genome Analysis Toolkit (GATK) v4.0.0.0-24-g9c35a3d-SNAPSHOT; 22:19:48.303 INFO FixMisencodedBaseQualityReads - For support and documentation go to https://software.broadinstitute.org/gatk/; 22:19:48.305 INFO FixMisencodedBaseQualityReads - Executing as acesnik@DESKTOP-NTA5PMC on Linux v4.4.0-43-Microsoft amd64; 22:19:48.305 INFO FixMisencodedBaseQualityReads - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_161-b12; 22:19:48.306 INFO FixMisencodedBaseQualityReads - Start Date/Time: January 23, 2018 10:19:48 PM GMT; 22:19:48.307 INFO FixMisencodedBaseQualityReads - ------------------------------------------------------------; 22:19:48.307 INFO FixMisencodedBaseQualityReads - ------------------------------------------------------------; 22:19:48.309 INFO FixMisencodedBaseQualityReads - HTSJDK Version: 2.13.2; 22:19:48.309 INFO FixMisencodedBaseQualityReads - Picard Version: 2.17.2; 22:19:48.310 INFO FixMisencodedBaseQualityReads - HTSJDK Defaults.COMPRESSION_LEVEL : 1; 22:19:48.314 INFO FixMisencodedBaseQualityReads - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 22:19:48.318 INFO FixMisencodedBaseQualityReads - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 22:19:48.319 INFO FixMisencodedBaseQualityReads - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 22:19:48.325 INFO FixMisencodedBaseQualit",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4241:331,Test,TestData,331,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4241,4,"['Test', 'test']","['TestData', 'test']"
Testability,"Hi there,. When I run a very basic command such as:. `gatk CollectMultipleMetrics -I test.bam -O ALIGNSUMM --PROGRAM CollectAlignmentSummaryMetrics`. I expect the --PROGRAM argument will override the default value assigned, which is currently five of the metrics tools. Instead, the PROGRAM option includes the specified metrics tool on top of the default selection. So, the above command line will still output metrics from the five default metrics tools. Please let me know if this is the intended behavior so I can adjust our workflow accordingly. Thanks!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4370:85,test,test,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4370,1,['test'],['test']
Testability,"Hi!. I've created a container using Singularity and Alpine Linux 3.7, including all the mentioned dependencies for GATK 4.0.0.0 (JDK8, GCC, R, R-Dev, Python, libgomp) and tried running HaplotypeCaller on a sample of mine to test everything. . Unfortunately, it always breaks when running the steps with the JNI libraries. If I start running things on native Java (without the C++ libraries), things work well. . I copied my log file and the command + hs_err file in here. . Anything I missed here?. ``` ; Using GATK jar /usr/bin/gatk-package-4.0.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Xmx16g -jar /usr/bin/gatk-package-4.0.0.0-local.jar HaplotypeCaller -I file.bam -R human_g1k_v37.fasta -O test.vcf -ERC GVCF --create-output-variant-index --annotation MappingQualityRankSumTest --annotation QualByDepth --annotation ReadPosRankSumTest --annotation RMSMappingQuality --annotation FisherStrand --annotation Coverage --dbsnp dbsnp_138.b37.vcf --verbosity INFO; 12:18:41.830 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/usr/bin/gatk-package-4.0.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 12:18:42.092 INFO HaplotypeCaller - ------------------------------------------------------------; 12:18:42.092 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.0.0.0; 12:18:42.092 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 12:18:42.092 INFO HaplotypeCaller - Executing as iiipe01@node050 on Linux v3.10.0-693.2.2.el7.x86_64 amd64; 12:18:42.092 INFO HaplotypeCaller - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_151-b12; 12:18:42.092 INFO HaplotypeCaller - Start Date/Time: January 15, 2018 12:18:41 PM GMT; 12:18:42.092 INFO HaplotypeCaller - ------------------------------------------------------------; 12:18:42.092 INFO HaplotypeCaller - ------------",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4158:224,test,test,224,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4158,3,"['log', 'test']","['log', 'test']"
Testability,"Hi, . I am testing the GATK beta 4.6 at the moment. It's a great improvement in time used to analyse data. Similarly I am interested in calling germline CNV events. I tried out the workflow with only two samples, just to find the right tools and see how it behaves. ; First I used `gatk-launch CalculateTargetCoverage` and `gatk-launch TargetCoverageSexGenotyper` and used the resulting files as input for `gatk-launch GermlineCNVCaller`. Unfortunatelly I got the following error when calling GermlineCNVCaller:. `A USER ERROR has occurred: Couldn't read file /media/Berechnungen/GATKTest/CN_transition_matrix_autosomal.tsvx. Error was: Could not read NDArray tsv file`. I found out that this error has something to do with Numpy. I have installed Numpy 1.13.1. ; Have you seen some error like this before?. Thanks in advance; Stefan",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3996:11,test,testing,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3996,1,['test'],['testing']
Testability,"Hi, . I'm trying to run ""cnv_germline_cohort_workflow"" from this workspace (https://app.terra.bio/#workspaces/help-gatk/Germline-CNVs-GATK4), and the workflow is keep failing at the ""CollectCounts"" step with the following error; in multiple shards. --------------------------------------------------------------------------------------------------------------------; A USER ERROR has occurred: Traversal by intervals was requested but some input files are not indexed.; Please index all input files:. samtools index /cromwell_root/dg.4DFC_3615e55e-6aa3-43e7-8d7b-6f2824071971/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam; --------------------------------------------------------------------------------------------------------------------. This was weird since I set a correct index file as an input, but after some investigation, I realized that ; the error seemed to be occurring when the bucket path where BAM index was located was different from that of BAM file ; For example, if you look at this log below, . `Attempting to download gs://gdc-tcga-phs000178-controlled/KIRC/DNA/WXS/BI/ILLUMINA/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam to /cromwell_root/dg.4DFC_3615e55e-6aa3-43e7-8d7b-6f2824071971/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam; Successfully activated service account; Will continue with download. Activated service account credentials for: [kd5mqbpsed8lzz0kyz9tvkht-3274@dcf-prod.iam.gserviceaccount.com]; Download complete!; 2021/09/29 15:46:14 Localizing input drs://dg.4DFC:ab4d57fa-bfff-4a48-bd96-f2866ecfe0e1 -> /cromwell_root/dg.4DFC_ab4d57fa-bfff-4a48-bd96-f2866ecfe0e1/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam.bai; Requester Pays project ID is Some(vanallen-firecloud-nih); Attempting to download gs://gdc-tcga-phs000178-controlled/KIRC/DNA/WXS/BI/ILLUMINA/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam.bai to /cromwell_root/dg.4DFC_ab4d57fa-bfff-4a48-bd96-f2866ecfe0e1/C345.TCGA-A3-3373-11A-01D-1421-08.5.bam.bai; Successfully activated service account; Will continue with download. Activa",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7487:997,log,log,997,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7487,1,['log'],['log']
Testability,"Hi, ; I am experimenting with submitting a PrintReadsSpark job to a yarn spark cluster in AWS. I run the job with the following command. ```; spark-submit --deploy-mode cluster --class org.broadinstitute.hellbender.Main --deploy-mode cluster --master yarn gatk-package-4.alpha.2-248-gcd449bf-SNAPSHOT-spark.jar PrintReadsSpark -I hdfs://chr1.bam -O hdfs://output.bam; ```. I can see from the output files that the job finished successfully, however the cluster tells me that it failed. It shows the following error message:. ```; 17/05/05 06:03:53 INFO ApplicationMaster: Final app status: FAILED, exitCode: 16, (reason: Shutdown hook called before final status was reported.); ```. I believe this may be due to the `System.exit(0)` statement at line 144 in hellbender.Main, though I am not sure. . Here is a more complete snippet from the stderr log. . ```; 17/05/05 06:03:50 INFO FileOutputCommitter: File Output Committer Algorithm version is 1; 17/05/05 06:03:52 WARN DFSClient: Caught exception ; java.lang.InterruptedException; 	at java.lang.Object.wait(Native Method); 	at java.lang.Thread.join(Thread.java:1249); 	at java.lang.Thread.join(Thread.java:1323); 	at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.closeResponder(DFSOutputStream.java:609); 	at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.endBlock(DFSOutputStream.java:370); 	at org.apache.hadoop.hdfs.DFSOutputStream$DataStreamer.run(DFSOutputStream.java:546); 17/05/05 06:03:52 INFO FileOutputCommitter: Saved output of task 'attempt_20170505060336_0011_r_000001_0' to hdfs://ip-172-30-0-86.ec2.internal:8020/output.bam.parts/_temporary/0/task_20170505060336_0011_r_000001; 17/05/05 06:03:52 INFO Executor: Finished task 1.0 in stage 2.0 (TID 3). 1921 bytes result sent to driver; 17/05/05 06:03:52 INFO TaskSetManager: Finished task 1.0 in stage 2.0 (TID 3) in 10260 ms on localhost (executor driver) (1/4); 17/05/05 06:03:53 INFO FileOutputCommitter: Saved output of task 'attempt_20170505060336_0011_r_000000_0' to ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2666:847,log,log,847,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2666,1,['log'],['log']
Testability,"Hi, ; I am testing GatherBamFiles of gatk-4.1.4.1 and gatk-4.1.2.0:; when I set '--CREATE_INDEX false', the command goes well and the resulted bam could be indexed by samtools, however, when I set '--CREATE_INDEX true', exception printed, such as ""Exception in thread ""BamIndexingThread"" htsjdk.samtools.SAMException: Exception creating BAM index for record A00234:397:HTKTWDSXX:1:1266:22453:5807 2/2 135b aligned to chrM:1-131."". Thus, I think this could be a bug.; By the way, BuildBamIndex also fails to build index for the resulted bam.; With Regards!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6379:11,test,testing,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6379,1,['test'],['testing']
Testability,"Hi, ; I have a suggestion that the updated verisons of Mutect2 method [pdfs](https://github.com/broadinstitute/gatk/blob/master/docs/mutect/mutect.pdf) should be kept. ; Of course we can look up from the git history log for what have changed in each edition, but it will be much more straightforward to obtain information from pdf file. Such as, [this picture](https://us.v-cdn.net/5019796/uploads/editor/8d/1rt7qtu6ohp2.png) ; in (this post)[https://gatkforums.broadinstitute.org/gatk/discussion/comment/56644#Comment_56644].; I know it comes from the Mutect2 method old version, but it was no longer here. Xiucz.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6001:216,log,log,216,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6001,1,['log'],['log']
Testability,"Hi, ; When I used the `enable-all-annotations` option to run Mutect2, it failed.; ```; ~/software/gatktools/gatk-4.1.3.0/gatk Mutect2 \; -R ~/database/hg19/gatk_bundle/ucsc.hg19.fasta \; -I sample.recalibrated.bam -tumor sample -L tmp.bed \; --germline-resource ~/af-only-gnomad.raw.sites.hg19.vcf.gz \; -O gatk4p1p3p0.enable-all-annotations.vcf --enable-all-annotations true; ```; Error logs:; ```; ...; 15:52:06.727 INFO Mutect2 - Shutting down engine; [December 12, 2019 3:52:06 PM CST] org.broadinstitute.hellbender.tools.walkers.mutect.Mutect2 done. Elapsed time: 0.17 minutes.; Runtime.totalMemory()=2494038016; org.broadinstitute.hellbender.exceptions.GATKException: Reference coordinate corresponds to a non-existent base in the read. This should never happen -- check read with alignment start: 6257722 and cigar: 5H134M; at org.broadinstitute.hellbender.utils.read.ReadUtils.getReadCoordinateForReferenceCoordinate(ReadUtils.java:830); at org.broadinstitute.hellbender.utils.read.ReadUtils.getReadCoordinateForReferenceCoordinate(ReadUtils.java:761); at org.broadinstitute.hellbender.utils.read.ReadUtils.getReadCoordinateForReferenceCoordinateUpToEndOfRead(ReadUtils.java:679); at org.broadinstitute.hellbender.tools.walkers.annotator.BaseQualityRankSumTest.getReadBaseQuality(BaseQualityRankSumTest.java:43); at org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific.AS_BaseQualityRankSumTest.getElementForRead(AS_BaseQualityRankSumTest.java:57); at org.broadinstitute.hellbender.tools.walkers.annotator.RankSumTest.getElementForRead(RankSumTest.java:108); at org.broadinstitute.hellbender.tools.walkers.annotator.RankSumTest.fillQualsFromLikelihood(RankSumTest.java:86); at org.broadinstitute.hellbender.tools.walkers.annotator.allelespecific.AS_RankSumTest.annotate(AS_RankSumTest.java:47); at org.broadinstitute.hellbender.tools.walkers.annotator.VariantAnnotatorEngine.annotateContext(VariantAnnotatorEngine.java:278); at org.broadinstitute.hellbender.tools.walkers.mutec",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6314:388,log,logs,388,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6314,1,['log'],['logs']
Testability,"Hi, ; when i test gatk4 MarkDuplicatesSpark command on yarn cluster, i encountered an issue ""non zero exit code 13"". How can i fix it ? . Here is my command and what i received from the terminal :; ****; gatk MarkDuplicatesSpark -I hdfs://192.168.0.104:9000/user/jacky/NA12878.mapped.illumina.mosaik.CEU.exome.20110411.bam -O hdfs://192.168.0.104:9000/user/jacky/marked_dup.bam -M hdfs://192.168.0.104:9000/user/jacky/marked_dup_metrics.txt -- --spark-runner SPARK --deploy-mode cluster --spark-master yarn; Using GATK jar /home/jacky/Exec/gatk/build/libs/gatk-spark.jar; Running:; /home/jacky/spark/bin/spark-submit --master yarn --conf spark.driver.userClassPathFirst=false --conf spark.io.compression.codec=lzf --conf spark.executor.memoryOverhead=600 --conf spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 --conf spark.kryoserializer.buffer.max=512m --conf spark.driver.maxResultSize=0 --deploy-mode cluster /home/jacky/Exec/gatk/build/libs/gatk-spark.jar MarkDuplicatesSpark -I hdfs://192.168.0.104:9000/user/jacky/NA12878.mapped.illumina.mosaik.CEU.exome.20110411.bam -O hdfs://192.168.0.104:9000/user/jacky/marked_dup.bam -M hdfs://192.168.0.104:9000/user/jacky/marked_dup_metrics.txt --spark-master yarn; 20/10/22 12:02:26 INFO client.RMProxy: Connecting to ResourceManager at /192.168.0.104:8032; 20/10/22 12:02:26 INFO yarn.Client: Requesting a new application from cluster with 2 NodeManagers; 20/10/22 12:02:26 INFO yarn.Client: Verifying our application has not requested more than the maximum memory capability of the cluster (1536 MB per container); 20/10/22 12:02:26 INF",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6906:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6906,1,['test'],['test']
Testability,"Hi, GATK contributors. Thank you for the great software!. I had looked for the answer several days. . Question:; Several samples are new sequenced and `g.vcf` was called using `GATK` with `-ERC GVCF` models.; I want to add this new sample variants into the existing VCF file (no g.vcf avaliable) that downloaded from other researchers.; I have tested some commands like `CombineGVCFs`, `MergeVcfs` but all failed.; Could you give some advices?; Any respone would be helpful. Thanks ~",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7292:344,test,tested,344,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7292,1,['test'],['tested']
Testability,"Hi, everyone! I'm trying to call mutation with Mutect2 with RNA-seq, and my scripts are given below. I simply use one sample as a test, with a prior knowledge that the mutation in ASXL1(c.1934dupG) can be detected with a pretty high VAF, and I can also see this mutation by using bam file in IGV, but I really wonder why my scripts can not call this mutation before filtering? Thank you so much!!!; ![image](https://github.com/user-attachments/assets/58bfd1be-748e-453c-be0b-d49569e14dd5); gatk Mutect2 \; -R ${ref}.fa \; -I ${sam}/${sam}.BQSR.bam \; -O ${sam}/gatk/${sam}_withpon.vcf \; --create-output-bam-index FALSE \; --af-of-alleles-not-in-resource 0.0000025 \; --create-output-variant-index false \; --germline-resource /home/cuiyiran/data/mtDNA_mutation/reference/somatic-hg38_af-only-gnomad.hg38.vcf \; --panel-of-normals /home/cuiyiran/data/mtDNA_mutation/reference/somatic-hg38_1000g_pon.hg38.vcf. gatk FilterMutectCalls \; -R ${ref}.fa \; -V ${sam}/gatk/${sam}_withpon.vcf \; --create-output-variant-index false \; -O ${sam}/gatk/${sam}_withpon_fv.vcf. bcftools norm -m -both ${sam}/gatk/${sam}_withpon_fv.vcf | bcftools norm -m +both -f ${ref}.fa ${sam}/gatk/${sam}_withpon_fv.vcf -Ov -o ${sam}/gatk/${sam}_withpon_norm.vcf; ####annotation; perl ~/miniconda3/envs/vep/bin/vcf2maf.pl \; --input-vcf ${sam}/gatk/${sam}_withpon_norm.vcf \; --output-maf ${sam}/gatk/${sam}_withpon_vep.maf \; --vep-path ~/miniconda3/envs/vep/bin/ \; --vep-data $vepcache \; --ncbi-build GRCh38 \; --cache-version=112 \; --ref-fasta ${ref}.fa \; --tumor-id ${sam}",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/9021:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/9021,1,['test'],['test']
Testability,"Hi, there:. I realize that GATK team released plenty of wonderful tutorials, best practice guidances, WDL scripts, etc. However, for users like me, I still prefer some simple and straight-forward BASH scripts that I could easily embed into existing pipelines and fire up. . Below is what I got from Chat-GPT. I tested it and it actually worked magically, processing my fasta.gz files into VCF. Can someone please kindly take a look at this, and let me know if there is some issue with this script?. Thank you very much & best regards,; Jie. ![image](https://github.com/broadinstitute/gatk/assets/26947455/12e2c577-2633-4189-a02c-ec45c677aa50)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8905:311,test,tested,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8905,1,['test'],['tested']
Testability,"Hi,. I am trying to call common and rare germline copy number variants with GATK 4, for more than 100 human samples based on human genome reference: hg19. For this project, I have 500 GB for memory, 10 TB for storage and 300 cpu cores. The program version is as below:. GATK Version: 4.1.2.0; Openjdk Version: 1.8.0_232; Python Version: 3.6.8. I didn't use the WDL way. I just follow the document of Notebook#11684 and build a local pipeline. I split the my project based on Chromosome, including (chr1, chr2, chr3, chr4, chr5, chr6, chr7, chr8, chr9, chr10, chr11, chr12, chr13, chr14, chr15, chr16, chr17, chr18, chr19, chr20, chr21, chr22, chrX, chrY, chrMT). After finish the pipeline, I am testing it with 6 samples. When I separately submit my script for each chromosome, every sub-project goes well: through my Input BAM Files, I can get the corresponding VCF Files (10 cores and 10 GB for each single project). That is to say, the environment of our GATK and Python for germline copy number variants calling should be OK. However, When I submit all the 25 sub-projects (12 cores and 12 GB for each single project) at the same time, I' m **randomly** suffering the two following PythonScriptExecutorException for some of the **random** sub-projects: . .............................................................(BUG 001).......................................................... Traceback (most recent call last):; File ""/tmp/cohort_determine_ploidy_and_depth.3351404099122294482.py"", line 8, in <module>; import gcnvkernel; File ""/usr/local/Anaconda/envs_app/gatk/4.1.2.0/lib/python3.6/site-packages/gcnvkernel/__init__.py"", line 1, in <module>; from pymc3 import __version__ as pymc3_version; File ""/usr/local/Anaconda/envs_app/gatk/4.1.2.0/lib/python3.6/site-packages/pymc3/__init__.py"", line 5, in <module>; from .distributions import *; File ""/usr/local/Anaconda/envs_app/gatk/4.1.2.0/lib/python3.6/site-packages/pymc3/distributions/__init__.py"", line 1, in <module>; from . import times",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6235:695,test,testing,695,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6235,1,['test'],['testing']
Testability,"Hi,. I am trying to test the pathseq tutorial following the tutorial on [this]( https://gatkforums.broadinstitute.org/gatk/discussion/10913/how-to-run-the-pathseq-pipeline ""this"") link. I ran the following commands. bioinfo@bioinfo$ conda activate gatk; (gatk) bioinfo@bioinfo$ gatk PathSeqPipelineSpark \; > --input test_sample.bam \; > --filter-bwa-image hg19mini.fasta.img \; > --kmer-file hg19mini.hss \; > --min-clipped-read-length 70 \; > --microbe-fasta e_coli_k12.fasta \; > --microbe-bwa-image e_coli_k12.fasta.img \; > --taxonomy-file e_coli_k12.db \; > --output output.pathseq.bam \; > --scores-output output.pathseq.txt. And encountered below error:. Using GATK jar /home/bioinfo/Installers/gatk4/gatk-4.1.0.0/gatk-package-4.1.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /home/bioinfo/Installers/gatk4/gatk-4.1.0.0/gatk-package-4.1.0.0-local.jar PathSeqPipelineSpark --input test_sample.bam --filter-bwa-image hg19mini.fasta.img --kmer-file hg19mini.hss --min-clipped-read-length 70 --microbe-fasta e_coli_k12.fasta --microbe-bwa-image e_coli_k12.fasta.img --taxonomy-file e_coli_k12.db --output output.pathseq.bam --scores-output output.pathseq.txt; 18:57:39.629 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 18:57:39.729 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/bioinfo/Installers/gatk4/gatk-4.1.0.0/gatk-package-4.1.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 18:57:41.594 INFO PathSeqPipelineSpark - ------------------------------------------------------------; 18:57:41.594 INFO PathSeqPipelineSpark - The Genome Analysis Toolkit (GATK) v4.1.0.0; 18:57:41.594 INFO PathSeqPipelineSpark - For support and documentation go to https://software.broadi",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5802:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5802,1,['test'],['test']
Testability,"Hi,. I am using GATK `version gatk4-4.0.6.0-0` as part of the bcbio-nextgen pipeline for RNA-seq variant calling. There is one step in the pipeline i.e. `gatk GenomicsDBImport` that's been failing consistently no matter how less or many resources in terms of memory and cores I provide. I have tried to run the command as part of the pipeline and in stand-alone mode (like below) and both produce the same error:. ```; [rathik@reslnrefo01 log]$ gatk --java-options '-Xms454m -Xmx3181m -XX:+UseSerialGC' GenomicsDBImport --reader-threads 1 --genomicsdb-workspace-path CDL-164-04P-1_0_249250621_genomicsdb -L 1:1-249250621 --variant /mnt/isilon/cbmi/variome/rathik/mendelian_rnaseq/gatk_output/CDL-164-04P/variation/rnaseq/gatk-haplotype/Sample_1__CDL-164-04P-gatk-haplotype-annotated-rnaedit-annotated-gemini.vcf.gz; Using GATK jar /mnt/isilon/cbmi/variome/bin/bcbio-nextgen/bcbio/anaconda/share/gatk4-4.0.6.0-0/gatk-package-4.0.6.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xms454m -Xmx3181m -XX:+UseSerialGC -jar /mnt/isilon/cbmi/variome/bin/bcbio-nextgen/bcbio/anaconda/share/gatk4-4.0.6.0-0/gatk-package-4.0.6.0-local.jar GenomicsDBImport --reader-threads 1 --genomicsdb-workspace-path CDL-164-04P-1_0_249250621_genomicsdb -L 1:1-249250621 --variant /mnt/isilon/cbmi/variome/rathik/mendelian_rnaseq/gatk_output/CDL-164-04P/variation/rnaseq/gatk-haplotype/Sample_1__CDL-164-04P-gatk-haplotype-annotated-rnaedit-annotated-gemini.vcf.gz; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/mnt/isilon/cbmi/variome/tmp/rathik; 11:49:24.784 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/mnt/isilon/cbmi/variome/bin/bcbio-nextgen/bcbio/anaconda/share/gatk4-4.0.6.0-0/gatk-package-4.0.6.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; 11:49:25.130 INFO GenomicsDBImport - ------------------------------------------------------------; 11:49",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5045:439,log,log,439,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5045,1,['log'],['log']
Testability,"Hi,. I have the allele counts from ASEReadCounter and I would like to do some statistical test on the output. You suggest MAMBA in your manual but in their manual they say the input file should have the required field: `EXON_INFO - variant annotation label`. . Can you recommend any other downstream tools to analyze ASEReadCounter output?. Thanks,; Komal",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3267:90,test,test,90,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3267,1,['test'],['test']
Testability,"Hi,. I'm trying to run BaseRecalibratorSpark (gatk-4.1.7.0) but I'm hitting a problem where the process carshe with a ""too many open files"" error. Here is my command:. ulimit -n 4096; /usr/local/bioinf/gatk/gatk-4.1.7.0/gatk BaseRecalibratorSpark \; --java-options '-Xmx64G' \; --tmp-dir /local/scratch/rieder \; -I Normal_fixed.bam \; -R GRCh38.d1.vd1.fa \; -L S07604514_Regions_merged_padded.interval_list \; -O P45507_normal_bqsr.table \; --known-sites Homo_sapiens_assembly38.dbsnp138.vcf \; --known-sites Homo_sapiens_assembly38.known_indels.vcf \; --known-sites Mills_and_1000G_gold_standard.indels.hg38.vcf \; --spark-master local[8] \; --conf 'spark.executor.cores=8' \; --conf 'spark.local.dir=/local/scratch/rieder'. Here is the (hopefully) relevant log extract:. 20/04/29 01:51:51 INFO TaskSetManager: Finished task 578.0 in stage 0.0 (TID 578) in 2720 ms on localhost (executor driver) (576/1585); 20/04/29 01:51:51 INFO NewHadoopRDD: Input split: file:/data/projects/2019/NeoAG/VCF-phasing/work/b8/d8dc550b7ba5f57d935d04e27b756a/Normal_fixed.bam:19562233856+33554432; 01:51:51.374 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Homo_sapiens_assembly38.dbsnp138.vcf; 01:51:51.431 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Homo_sapiens_assembly38.known_indels.vcf; 01:51:51.451 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Mills_and_1000G_gold_standard.indels.hg38.vcf; 01:51:51.457 INFO FeatureManager - Using codec VCFCodec to read file file:///local/scratch/rieder/spark-bb59423b-0368-4de5-85e0-e6641fb25380/userFiles-a91d5958-33f5-4685-bf9d-c8fc0924f7c6/Homo_sapiens_assembly38.dbsnp138.vcf; 01:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6578:760,log,log,760,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6578,1,['log'],['log']
Testability,"Hi,. I'm trying to validate the performance of BwaSpark (I'm running it locally). The input ubam file size is 5.1 GB. It takes 65 minutes for GATK's BwaSpark to complete which is exactly same as bwa-mem. Below is the command that I used to run BwaSpark. Is there any way to make BwaSpark run faster while running it locally or will the performance increase only while running on spark cluster? Please let me know if I had to modify or add any parameter. . Also, please let me know where can I find the complete list of --conf parameters for BwaSpark? (I couldn't find these options in gatk BwaSpark --help). `time gatk BwaSpark --bwa-mem-index-image GRCh37.fasta.img --spark-master local[*] --bam-partition-size 4000000 --conf 'spark.executor.num=5' --conf 'spark.executor.cores=16' --conf 'spark.executor.memory=15G' --conf 'spark.driver.memory=30G' --conf 'spark.dynamicAllocation.enabled=true' -I unmapped_input.bam -O output.bam -R GRCh37.fasta 2> Log_file.log`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8897:961,log,log,961,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8897,1,['log'],['log']
Testability,"Hi,; I am not sure if this is a gatk bug or some other issue on our system. ; Setup: Centos 6.9, Zlib 1.2.3, gatk 4.0.0. The issue:; I am running scatter/gather haplotyping for 30X WGS data, per sample using the BROAD interval list to launch parallel processing branches (1 per sample per interval). Each individual ""branch"" outputs a gzip compressed file for a given target interval. I am then trying to merge these files into a per-sample gvcf for subsequent genotyping across samples. . However, the combination using GatherVcfs fails with the following message: . `htsjdk.tribble.TribbleException: Line 14922244: there aren't enough columns for line 1 59930777 . A <NON_REF> . . END=5993077 (we expected 9 tokens, and saw 8 ), for input source: file:///ifs/data/nfs_share/sukmb352/projects/dzhk/genomes/test/work/2e/63b1bc25956a67ba90c2f2fadc21aa/Individual_AS-167622_Sample_AS-167622.merged.vcf.gz; at htsjdk.variant.vcf.AbstractVCFCodec.decodeLine(AbstractVCFCodec.java:281); at htsjdk.variant.vcf.AbstractVCFCodec.decode(AbstractVCFCodec.java:262); at htsjdk.variant.vcf.AbstractVCFCodec.decode(AbstractVCFCodec.java:64); at htsjdk.tribble.AsciiFeatureCodec.decode(AsciiFeatureCodec.java:70); at htsjdk.tribble.AsciiFeatureCodec.decode(AsciiFeatureCodec.java:37); at htsjdk.tribble.TribbleIndexedFeatureReader$WFIterator.readNextRecord(TribbleIndexedFeatureReader.java:365); at htsjdk.tribble.TribbleIndexedFeatureReader$WFIterator.next(TribbleIndexedFeatureReader.java:346); at htsjdk.tribble.TribbleIndexedFeatureReader$WFIterator.next(TribbleIndexedFeatureReader.java:307); at java.util.Iterator.forEachRemaining(Iterator.java:116); at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801); at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481); at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471); at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151); at java.util.stream.ForEachOps$Fo",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4255:807,test,test,807,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4255,1,['test'],['test']
Testability,"Hi,; I ran into the following error when combining gVCF files generated by the HaplotypeCaller:. > htsjdk.tribble.TribbleException$InvalidHeader: Your input file has a malformed header: Discordant field size detected for field AS_RAW_ReadPosRankSum at chr1:13417. Field had 2 values but the header says this should have 1 values based on header record INFO=<ID=AS_RAW_ReadPosRankSum,Number=1,Type=String,Description=""allele specific raw data for rank sum test of read position bias"". Similar number info was found for several allele-specific annotations:; ```; ##INFO=<ID=AS_InbreedingCoeff,Number=A,Type=Float,Description=""allele specific heterozygosity as estimated from the genotype likelihoods per-sample when compared against the Hardy-Weinberg expectation; relate to inbreeding coefficient"">; ##INFO=<ID=AS_QD,Number=A,Type=Float,Description=""Allele-specific Variant Confidence/Quality by Depth"">; ##INFO=<ID=AS_RAW_BaseQRankSum,Number=1,Type=String,Description=""raw data for allele specific rank sum test of base qualities"">; ##INFO=<ID=AS_RAW_MQ,Number=1,Type=String,Description=""Allele-specfic raw data for RMS Mapping Quality"">; ##INFO=<ID=AS_RAW_MQRankSum,Number=1,Type=String,Description=""Allele-specfic raw data for Mapping Quality Rank Sum"">; ##INFO=<ID=AS_RAW_ReadPosRankSum,Number=1,Type=String,Description=""allele specific raw data for rank sum test of read position bias"">; ##INFO=<ID=AS_SB_TABLE,Number=1,Type=String,Description=""Allele-specific forward/reverse read counts for strand bias tests"">; ```; I assume, the correct annotation should be ""Number=A"". The gVCF files were generated with HaplotypeCaller using; ```; --emit-ref-confidence GVCF \; --annotation-group StandardAnnotation \; --annotation-group AS_StandardAnnotation \; --annotation-group StandardHCAnnotation \; ```. GATK version 4.0.0.0 (downloaded from GATK website)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4162:455,test,test,455,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4162,4,['test'],"['test', 'tests']"
Testability,"Hi,; I'm running a command:; ```; java -jar gatk-4.0.3.0/gatk-package-4.0.3.0-local.jar SelectVariants \; -R ref/human_g1k_b37_20.fasta \; -V dupa.raw.indels.snps.vcf \; -selectType INDEL \; -O dupa_raw.INDEL.vcf. ```; and I get error:; ```; ***********************************************************************. A USER ERROR has occurred: s is not a recognized option. ***********************************************************************; ```; Tested on various input files. ```; java -version; openjdk version ""1.8.0_152""; OpenJDK Runtime Environment (Zulu 8.25.0.1-linux64) (build 1.8.0_152-b16); OpenJDK 64-Bit Server VM (Zulu 8.25.0.1-linux64) (build 25.152-b16, mixed mode); ```. Looks like it's a bug?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4705:450,Test,Tested,450,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4705,1,['Test'],['Tested']
Testability,"Hi,; I've got some error messages about ""tranches"" when I'm running VariantRecalibrator. Here is my command lines:; ```; gatk=/public/home/fan_lab/shali/gatk/gatk-4.1.8.1/gatk; reference=/public/home/fan_lab/shali/gatk/gatk_bundle/Homo_sapiens_assembly38.fasta; GATK_bundle=/public/home/fan_lab/shali/gatk/gatk_bundle. indir=/public/home/fan_lab/shali/NGS_new; outdir=/public/home/fan_lab/shali/NGS_new. gatk VariantRecalibrator \; -R $reference \; --variant $outdir/population/24samples.HC.vcf.gz \; --resource:hapmap,known=false,training=true,truth=true,prior=15.0 $GATK_bundle/hapmap_3.3.hg38.vcf.gz \; --resource:omni,known=false,training=true,truth=false,prior=12.0 $GATK_bundle/1000G_omni2.5.hg38.vcf.gz \; --resource:1000G,known=false,training=true,truth=false,prior=10.0 $GATK_bundle/1000G_phase1.snps.high_confidence.hg38.vcf.gz \; --resource:dbsnp,known=true,training=false,truth=false,prior=6.0 $GATK_bundle/dbsnp_146.hg38.vcf.gz \; -an DP -an QD -an FS -an SOR -an ReadPosRankSum -an MQRankSum \; --mode SNP \; --tranche 100.0 -tranche 99.9 -tranche 99.0 -tranche 95.0 -tranche 90.0 \; --rscript-file $outdir/population/24samples.HC.snps.plots.R \; --tranches-file $outdir/poplation/24samples.HC.snps.tranches \; -O $outdir/poplation/24samples.HC.snps.recal; ```; The mission ended quickly.When I look at the log file, I find the following error message:; ```; A USER ERROR has occurred: /public/home/fan_lab/shali/NGS_new/poplation/24samples.HC.snps.tranches; ```; Any suggestions for me? Look forward to your reply. Thanks ever so much.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7225:1321,log,log,1321,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7225,1,['log'],['log']
Testability,"Hi,; On a new git clone of the master branch (23/01/2018), I'm not able to compile gatk with gradlew.; Here the logs:; ```bash; axverdier@spark:~/Tools/GATK4/git/gatk$ ./gradlew clean; :clean. BUILD SUCCESSFUL. Total time: 2.031 secs; axverdier@spark:~/Tools/GATK4/git/gatk$ ./gradlew --stacktrace --info; Initialized native services in: /home/axverdier/.gradle/native; Connected to daemon DaemonInfo{pid=32687, address=[a73e45df-d609-43d0-9385-508a26a328d4 port:39221, addresses:[/0:0:0:0:0:0:0:1, /127.0.0.1]], state=Idle, lastBusy=1516787326803, context=DefaultDaemonContext[uid=7e8a7a6d-190b-445f-9873-f0329477e561,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/axverdier/.gradle/daemon,pid=32687,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=US-ASCII,-Duser.country=US,-Duser.language=en,-Duser.variant]}. Dispatching request Build{id=16e78f98-b0ed-404d-bf38-965d87be7924.1, currentDir=/home/axverdier/Tools/GATK4/git/gatk}.; Received result org.gradle.launcher.daemon.protocol.BuildStarted@5495333e from daemon DaemonInfo{pid=32687, address=[a73e45df-d609-43d0-9385-508a26a328d4 port:39221, addresses:[/0:0:0:0:0:0:0:1, /127.0.0.1]], state=Idle, lastBusy=1516787326803, context=DefaultDaemonContext[uid=7e8a7a6d-190b-445f-9873-f0329477e561,javaHome=/usr/lib/jvm/java-8-oracle,daemonRegistryDir=/home/axverdier/.gradle/daemon,pid=32687,idleTimeout=10800000,daemonOpts=-XX:MaxPermSize=256m,-XX:+HeapDumpOnOutOfMemoryError,-Xmx1024m,-Dfile.encoding=US-ASCII,-Duser.country=US,-Duser.language=en,-Duser.variant]} (build should be starting).; The client will now receive all logging from the daemon (pid: 32687). The daemon log file: /home/axverdier/.gradle/daemon/3.1/daemon-32687.out.log; Starting 7th build in daemon [uptime: 5 mins 24.778 secs, performance: 92%, GC rate: 0.11/s, tenured heap usage: 12% of 716.2 MB]; Executing build with daemon context: DefaultDaemonContext[uid=7e8a7a6d-190b-445f-9873-f0329477e561,j",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4248:112,log,logs,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4248,1,['log'],['logs']
Testability,"Hi,; Our spark installation use a mapr filesystem ( hdfs compatible ).; GATK spark tools does not seems to recognize it.; When running the following command:; > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input maprfs://spark-ics/user/axverdier/data/710-PE-G1.bam --output maprfs://spark-ics/user/axverdier/testOutGATK_CountReadsSpark --sparkRunner SPARK --sparkMaster yarn --javaOptions -Dmapr.library.flatclass; I got the following error!. > Driver stacktrace:; > 	at org.apache.spark.scheduler.DAGScheduler.org$apache$spark$scheduler$DAGScheduler$$failJobAndIndependentStages(DAGScheduler.scala:1436); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1424); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$abortStage$1.apply(DAGScheduler.scala:1423); > 	at scala.collection.mutable.ResizableArray$class.foreach(ResizableArray.scala:59); > 	at scala.collection.mutable.ArrayBuffer.foreach(ArrayBuffer.scala:48); > 	at org.apache.spark.scheduler.DAGScheduler.abortStage(DAGScheduler.scala:1423); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802); > 	at org.apache.spark.scheduler.DAGScheduler$$anonfun$handleTaskSetFailed$1.apply(DAGScheduler.scala:802); > 	at scala.Option.foreach(Option.scala:257); > 	at org.apache.spark.scheduler.DAGScheduler.handleTaskSetFailed(DAGScheduler.scala:802); > 	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.doOnReceive(DAGScheduler.scala:1651); > 	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1606); > 	at org.apache.spark.scheduler.DAGSchedulerEventProcessLoop.onReceive(DAGScheduler.scala:1595); > 	at org.apache.spark.util.EventLoop$$anon$1.run(EventLoop.scala:48); > 	at org.apache.spark.scheduler.DAGScheduler.runJob(DAGScheduler.scala:628); > 	at org.apache.spark.SparkContext.runJob(SparkContext.scala:1918); > 	at org.apache.spark.SparkCo",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3936:251,test,testing,251,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3936,1,['test'],['testing']
Testability,"Hi,; While I test a new data set from fastq using bwamem, samtools and gatk4, I use the following scripts:. % step1: bwa mem. > bwa mem -t 12 -Ma -R '@RG ID:HCC1954 LB:HCC1954 SM:HCC1954' human_g1k_v37.fasta HCC1954_1.fq HCC1954_2.fq > HCC1954.sam. % step2: sort by queryname. > samtools sort -n HCC1954.sam -@ 24 > HCC1954.readnamesort.bam . % step3: gatk4 ReadsPipelineSpark. > /gatk-launch \; > ReadsPipelineSpark \; > -I HCC1954.readnamesort.bam \; > -R /benchmark/human_g1k_v37.2bit \; > -O HCC1954.bam \; > --knownSites /benchmark/dbsnp_138.b37.excluding_sites_after_129.vcf \; > --shardedOutput false \; > --emit_original_quals \; > --duplicates_scoring_strategy SUM_OF_BASE_QUALITIES \; > --sparkRunner SPARK \; > --driver-memory 8G \; > --executor-memory 60g \; > --num-executors 1 \; > --executor-cores 4 \; > --sparkMaster local[4]. I encounter problem like this:. org.broadinstitute.hellbender.exceptions.UserException$MalformedRead: A USER ERROR has occurred: Read C097FACXX111207:2:2301:17281:179267 1:1139151-1139251 is malformed: The input .bam file contains reads with no platform information. First observed at read with name = C097FACXX111207:2:2301:17281:179267; at org.broadinstitute.hellbender.utils.recalibration.RecalUtils.parsePlatformForRead(RecalUtils.java:510); at org.broadinstitute.hellbender.utils.recalibration.BaseRecalibrationEngine.processRead(BaseRecalibrationEngine.java:122); at org.broadinstitute.hellbender.tools.spark.transforms.BaseRecalibratorSparkFn.lambda$apply$26a6df3e$1(BaseRecalibratorSparkFn.java:33); at org.apache.spark.api.java.JavaRDDLike$$anonfun$fn$4$1.apply(JavaRDDLike.scala:159); at org.apache.spark.api.java.JavaRDDLike$$anonfun$fn$4$1.apply(JavaRDDLike.scala:159); at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710); at org.apache.spark.rdd.RDD$$anonfun$mapPartitions$1$$anonfun$apply$20.apply(RDD.scala:710); at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); at org.apach",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1949:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1949,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Hi,; during compilation of 3.8 sources I get. ```; [INFO] --- exec-maven-plugin:1.2.1:exec (delete-mavens-links) @ gatk-aggregator ---; rm: missing operand; Try 'rm --help' for more information.; rm: missing operand; Try 'rm --help' for more information.; [INFO] ; [INFO] --- maven-failsafe-plugin:2.16:integration-test (integration-tests) @ gatk-aggregator ---; ```. I have no idea whether it breaks something downstream but provided building fails for me later with. ```; [INFO] Reactor Summary:; [INFO] ; [INFO] GATK Root .......................................... SUCCESS [ 16.744 s]; [INFO] GATK Aggregator .................................... SUCCESS [ 4.647 s]; [INFO] GATK GSALib ........................................ SUCCESS [ 6.040 s]; [INFO] GATK Utils ......................................... SUCCESS [ 39.733 s]; [INFO] GATK Engine ........................................ SUCCESS [ 7.557 s]; [INFO] GATK Tools Public .................................. SUCCESS [ 7.689 s]; [INFO] External Example ................................... FAILURE [ 0.051 s]; [INFO] GATK Queue ......................................... SKIPPED; [INFO] GATK Queue Extensions Generator .................... SKIPPED; [INFO] GATK Queue Extensions Public ....................... SKIPPED; [INFO] GATK Aggregator Public ............................. SKIPPED; [INFO] GATK Tools Protected ............................... SKIPPED; [INFO] GATK Package Distribution .......................... SKIPPED; [INFO] GATK Queue Extensions Distribution ................. SKIPPED; [INFO] GATK Queue Package Distribution .................... SKIPPED; [INFO] GATK Aggregator Protected .......................... SKIPPED; [INFO] GATK Tools Private ................................. SKIPPED; [INFO] GATK Package Internal .............................. SKIPPED; [INFO] NA12878 KB Utilities ............................... SKIPPED; [INFO] GATK Queue Private ................................. SKIPPED; [INFO] GATK Queue Extensions Inter",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4686:315,test,test,315,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4686,2,['test'],"['test', 'tests']"
Testability,"Hi,; when I test the gatk4 command, I encountered some issues, how can I fix it ? . bash-4.2$ ./gatk-launch PrintReadsSpark -I /gatk4/output.bam -O /gatk4/output_2.bam -- --sparkRunner SPARK --sparkMaster yarn-client; Using GATK jar /opt/Software/gatk/build/libs/gatk-package-4.beta.5-70-gdc3237e-SNAPSHOT-spark.jar; Running:; spark-submit --master yarn-client --conf spark.driver.userClassPathFirst=true --conf spark.io.compression.codec=lzf --conf spark.driver.maxResultSize=0 --conf spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 --conf spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 --conf spark.kryoserializer.buffer.max=512m --conf spark.yarn.executor.memoryOverhead=600 /opt/Software/gatk/build/libs/gatk-package-4.beta.5-70-gdc3237e-SNAPSHOT-spark.jar PrintReadsSpark -I /gatk4/output.bam -O /gatk4/output_2.bam --sparkMaster yarn-client; 14:19:09.870 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 14:19:10.155 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/opt/Software/gatk/build/libs/gatk-package-4.beta.5-70-gdc3237e-SNAPSHOT-spark.jar!/com/intel/gkl/native/libgkl_compression.so; [October 11, 2017 2:19:10 PM CST] PrintReadsSpark --output /gatk4/output_2.bam --input /gatk4/output.bam --sparkMaster yarn-client --readValidationStringency SILENT --interval_set_rule UNION --interval_padding 0 --interval_exclusion_padding 0 --interval_merging_rule ALL --bamPartitionSize 0 --disableSequenceDictionaryValidation false --shardedOutput false --numReducers 0 --help ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3686:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3686,1,['test'],['test']
Testability,"Hi; I tried to run the recalibration using the gatk-generated vcf file as a known vcf file. I got an error which has been previously described ""The covariates table is missing ReadGroup V300019285_L2_ in RecalTable0"" but without the solution. ; I am wondering if the solution has been found. Anyone has the experience to fix this issue.; Thank ; **This is the batch file** ; java -Xmx16g -jar /scratch/ddo/gatk-4.1.9.0/gatk-package-4.1.9.0-local.jar ApplyBQSR \; -R /scratch/ddo/refgenomenew/New_IDs.fasta \; -I /scratch/ddo/markedsam/C18-436P.sort.rmdup.bam \; --bqsr-recal-file /scratch/ddo/reclibration/gatkmf01_C18-436P.recal_data.table \; -O /scratch/ddo/reclibration/C18-436P.bqsr.maf01.bam . **This is the log file**; -----------------------------------------------------------------------------------------------------; Picked up JAVA_TOOL_OPTIONS: -Xmx2g; 04:59:42.641 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/scratch/ddo/gatk-4.1.9.0/gatk-package-4.1.9.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Nov 08, 2021 4:59:43 AM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 04:59:43.044 INFO ApplyBQSR - ------------------------------------------------------------; 04:59:43.045 INFO ApplyBQSR - The Genome Analysis Toolkit (GATK) v4.1.9.0; 04:59:43.045 INFO ApplyBQSR - For support and documentation go to https://software.broadinstitute.org/gatk/; 04:59:43.045 INFO ApplyBQSR - Executing as on Linux v3.10.0-1160.36.2.el7.x86_64 amd64; 04:59:43.045 INFO ApplyBQSR - Java runtime: OpenJDK 64-Bit Server VM v13.0.2+8; 04:59:43.045 INFO ApplyBQSR - Start Date/Time: November 8, 2021 at 4:59:42 a.m. PST; 04:59:43.045 INFO ApplyBQSR - ------------------------------------------------------------; 04:59:43.045 INFO ApplyBQSR - ------------------------------------------------------------; 04:59:43.046 INFO ApplyBQSR - HTSJDK Version: 2.23.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7549:713,log,log,713,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7549,1,['log'],['log']
Testability,HiSeq.WGS.b37.NA12878.snippet_with_unmapped.cram.crai; src/test/resources/org/broadinstitute/hellbender/engine/cramtestWrongRef.dict; src/test/resources/org/broadinstitute/hellbender/engine/cramtestWrongRef.fasta.fai; src/test/resources/org/broadinstitute/hellbender/engine/cram_with_bai_index.cram.bai; src/test/resources/org/broadinstitute/hellbender/engine/cram_with_crai_index.cram.crai; src/test/resources/org/broadinstitute/hellbender/engine/example_features.bed.idx; src/test/resources/org/broadinstitute/hellbender/engine/example_variants_noSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/example_variants_withSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test_gvcf.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/feature_data_source_test_withSequenceDict.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithIndex.vcf; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithIndex.vcf.idx; src/test/resources/org/broadinstitute/hellbender/engine/FeatureInput/vcfWithOutIndex.vcf; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_multiple_intervals.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_multiple_intervals_with_unmapped.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_single_interval.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_unmapped_only.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_ReadWalkerGCSSupportIntegrationTest_bam_wholefile.bai; src/test/resources/org/broadinstitute/hellbender/engine/GCSTests/expected_VariantWal,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:9368,test,test,9368,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Hook up the Python-based unit tests for NVScoreVariants to our test suite,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/9011:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/9011,2,['test'],"['test', 'tests']"
Testability,How do we do this? What happens if a job runs locally but fails in the cloud? How do we log and understand errors?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/276:88,log,log,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/276,1,['log'],['log']
Testability,HtsgetReader integration tests are failing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6803:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6803,1,['test'],['tests']
Testability,"I added -m to `gsutil cp` in a previous PR but missed the `gsutil mv` step post-`bq load` - so here that is. tested it from the command line, works well. also confirmed that it will throw an error if one (or more) files has an error:. ```; $ cat test_files_bucket.txt | gsutil -m mv -I gs://dsp-fieldeng-dev/test_mv/. If you experience problems with multiprocessing on MacOS, they might be related to https://bugs.python.org/issue33725. You can disable multiprocessing by editing your .boto config or by adding the following flag to your command: `-o ""GSUtil:parallel_process_count=1""`. Note that multithreading is still available even if you disable multiprocessing. Copying gs://dsp-fieldeng-dev/test_cp/test1.txt [Content-Type=text/plain]...; Copying gs://dsp-fieldeng-dev/test_cp/test2.txt [Content-Type=text/plain]...; CommandException: No URLs matched: gs://dsp-fieldeng-dev/test_cp/test4.txt; Copying gs://dsp-fieldeng-dev/test_cp/test3.txt [Content-Type=text/plain]...; Copying gs://dsp-fieldeng-dev/test_cp/test5.txt [Content-Type=text/plain]...; Copying gs://dsp-fieldeng-dev/test_cp/test6.txt [Content-Type=text/plain]...; Removing gs://dsp-fieldeng-dev/test_cp/test1.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test2.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test3.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test5.txt...; Removing gs://dsp-fieldeng-dev/test_cp/test6.txt...; - [5/5 files][ 37.0 B/ 37.0 B] 100% Done; Operation completed over 5 objects/37.0 B.; CommandException: 1 file/object could not be transferred.; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7129:109,test,tested,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7129,1,['test'],['tested']
Testability,"I added a test according to #4642 , but can't reproduce the error. The user also noted that the error message was badly formed, which is true because it ended with a colon. Now it looks like:; ""Input src/test/resources/org/broadinstitute/hellbender/tools/walkers/ValidateVariants/validationExampleBad.vcf fails strict validation of type CHR_COUNTS: the Allele Count (AC) tag is incorrect for the record at position 1:985447, 1 vs. 2""",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6076:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6076,2,['test'],['test']
Testability,"I am attempting to create fasta files from specific regions in approximately 270 VCF files. For every other region/gene I've looked at, I have not had this issue. For one particular region (mrr1), I am getting the error seen below. I checked the coverage of the bam file and viewed the vcf in IGV viewer, but notice no problems. Can you please advise? Thank you. Similar to this issue, but am still not sure how to approach it?; https://github.com/broadinstitute/gatk/issues/6260#issue-521418442. Bash script:; ```; #!/bin/bash --login; #SBATCH --time=1:00:00 # limit of wall clock time - how long the job will run; #SBATCH --ntasks=1 # number of tasks - how many tasks (nodes) that you requir; #SBATCH --cpus-per-task=1 # number of CPUs (or cores) per task (same as -c); #SBATCH --mem=50G # memory required per node - amount of memory (in bytes); #SBATCH --job-name=VCF_FastaNEP_CCR; #SBATCH --mail-user=lukaskon@msu.edu; #SBATCH --mail-type=ALL; #SBATCH -o SpeciesID_CCR7_slurm. cd /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/. module load Java/JDK12. for sample in AI7 W18 B5 BU9 I9 R23 Y1; do; base=$(basename ${sample}). gatk-4.2.5.0/gatk SelectVariants -R /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/0_DNAscripts/ReferenceGenome/Botrytis_cinerea.ASM83294v1.dna.toplevel.fa -V /mn; t/research/Hausbeck_group/Lukasko/BotrytisDNASeq/10_FilteredVCF/Plates123/BcinereaP123.SNVonly.filteredPASS_renamed.vcf -sn ${sample} --remove-unused-alternates --exclu; de-sample-name /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/CCR7/ConservedGenes/ExcludeList.args -O /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/CCR7/Cons; ervedGenes/VCFs/${base}.vcf. gatk-4.2.5.0/gatk FastaAlternateReferenceMaker -R /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/0_DNAscripts/ReferenceGenome/Botrytis_cinerea.ASM83294v1.dna.tople; vel.fa -O /mnt/research/Hausbeck_group/Lukasko/BotrytisDNASeq/CCR7/ConservedGenes/mrr1/${base}_mrr1.fasta -L 5:680219-684662 -V /mnt/research/Hausbeck_group/Lu",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8427:530,log,login,530,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8427,1,['log'],['login']
Testability,"I am running Gatk SelectVariant with -L and -ip options to filter out variants that are not inside my bed defined region +- interval padding. I am running gatk version 4.1.0.0 and for some of my task fails and returns ``` rc 1 (exit code 1) ``` but there is no clear error message on any logs. . ``` Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Dsamjdk.compression_level=5 -Xms100g -Xmx100g -jar /root/gatk.jar SelectVariants -L /cromwell_root/mybucket/ref/bed_files/mybedfile.bed -R /cromwell_root/mybucket2/NGS/ref/hg38/v0/Homo_sapiens_assembly38.fasta -V /cromwell_root/mybucket/cromwell-execution/mypipeline/2baacdb4-d3c5-4d98-afb2-6578c3ddcda9/call-MT2/calling.Mutect2/a4839059-9209-42da-b106-a91393c47546/call-Filter/input.vcf -ip 20 -O output.vcf --verbosity DEBUG ; ```. Task seems to end prematurely but I can not find out why. Also output file is generated but it only has variants from chr 1 even though my sample is whole exome, which also supports the premature end of task theory. Stdout is empty and stderr seems to end prematurely. [failing_SelectVariants-stderr.log](https://github.com/broadinstitute/gatk/files/5652756/failing_SelectVariants-stderr.log)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6990:288,log,logs,288,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6990,3,['log'],"['log', 'logs']"
Testability,"I am running into an issue with MarkDuplicatesSpark where it runs successfully in local mode, but if I run it in standalone mode with files on the file system or hdfs I get unexpected results. It could be that I'm doing something very basic wrong here, so I'm pasting a bunch of contextual information in case it helps. Thanks in advance!. ```; # Output BAM is correct in local mode:; $GATK_DIR/gatk-launch MarkDuplicatesSpark -I NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam -O test.local.bam. # Outputs empty BAM (i.e. header but no alignments) in standalone mode:; $GATK_DIR/gatk-launch MarkDuplicatesSpark -I NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam -O test.standalone.bam -- --sparkRunner SPARK --sparkMaster spark://localhost:7077. # Errors out with a wrong FS type (stacktrace below):; $GATK_DIR/gatk-launch MarkDuplicatesSpark -I hdfs://bam/NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam -O hdfs://bam/test.hdfs.bam -- --sparkRunner SPARK --sparkMaster spark://localhost:7077; ```. And the stacktrace for the HDFS case (I'm running HDFS in Pseudo-Distributed mode on the same host as I a running Spark standalone mode on): . ```; org.broadinstitute.hellbender.tools.spark.transforms.markduplicates.MarkDuplicatesSpark done. Elapsed time: 0.07 minutes.; Runtime.totalMemory()=1029177344; java.lang.IllegalArgumentException: Wrong FS: hdfs://bam/NA12878.chrom20.100kb.ILLUMINA.bwa.CEU.exome.20121211.bam, expected: file:///; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:645); at org.apache.hadoop.fs.FileSystem.makeQualified(FileSystem.java:465); at org.apache.hadoop.fs.FilterFileSystem.makeQualified(FilterFileSystem.java:119); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:181); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReads(GATKSparkTool.java:284); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeToolInputs(GATKSparkTool.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1444:491,test,test,491,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1444,3,['test'],['test']
Testability,"I am running unit tests locally, but as you know, they take a long time, so I am starting the PR process anyhow. Background: see #5314",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5318:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5318,1,['test'],['tests']
Testability,"I am trying to use FilterVariantTranches in GATK 4.0.3.0 after running CNNScoreVariants. ```; ./gatk FilterVariantTranches \; -V test.cnnscore.vcf \; --snp-truth-vcf hapmap_3.3.hg19.sites.vcf \; --indel-truth-vcf Mills_and_1000G_gold_standard.indels.hg19.sites.vcf \; --info-key CNN_1D \; --tranche 99.9 --tranche 99.0 --tranche 95 \; --max-sites 8000 \; -O test.cnnscore.filtered.vcf; ```. There are also index files in the directory. ```; test.cnnscore.vcf.idx (generated by CNNScoreVariants); hapmap_3.3.hg19.sites.vcf.idx; Mills_and_1000G_gold_standard.indels.hg19.sites.vcf.idx; ```. and I got the error. ```; Traceback (most recent call last):; File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 124, in <module>; run(); File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 10, in run; write_tranches(args); File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 34, in write_tranches; v_scored = allele_in_vcf(allele, variant, vcf_reader); File ""/tmp/zzxzxzzxz/tranches.5887233932112211461.py"", line 84, in allele_in_vcf; variants = vcf_ram.fetch(variant.contig, variant.pos-1, variant.pos); File ""pysam/libcbcf.pyx"", line 4321, in pysam.libcbcf.VariantFile.fetch; ValueError: fetch requires an index. at org.broadinstitute.hellbender.utils.python.PythonExecutorBase.getScriptException(PythonExecutorBase.java:75); at org.broadinstitute.hellbender.utils.runtime.ScriptExecutor.executeCuratedArgs(ScriptExecutor.java:126); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeArgs(PythonScriptExecutor.java:170); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeScript(PythonScriptExecutor.java:151); at org.broadinstitute.hellbender.utils.python.PythonScriptExecutor.executeScript(PythonScriptExecutor.java:121); at org.broadinstitute.hellbender.tools.walkers.vqsr.FilterVariantTranches.doWork(FilterVariantTranches.java:134); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:134); at",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4794:129,test,test,129,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4794,3,['test'],['test']
Testability,"I am using ASEReadCounter to call allelic read counts on 1000 genome reference. But, I found ASEReadCounter generatd only header in output file. Here I enclosed my command and stderr log. Please help me to check it. Thank you!. If you are seeing an error, please provide(REQUIRED) :; a) GATK version used: 4.1.8.1; b) Exact command used:. java -Xmx8000m -Djava.io.tmpdir=/broad/hptmp/cbao \; -jar ${path2gatk}/gatk-package-4.1.8.1-local.jar \; ASEReadCounter \; -L scattered.interval_list \; -R Homo_sapiens_assembly19.fasta \; -V 1000G_phase1.snps.high_confidence.b37.vcf.gz \; -I downsample_10k.bam \; -O output.txt --verbosity INFO . c) Entire error log:; 19:13:25.991 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/broad/software/free/Linux/redhat_7_x86_64/pkgs/gatk_4.1.8.1/gatk-package-4.1.8.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; Jun 14, 2021 7:13:26 PM shaded.cloud_nio.com.google.auth.oauth2.DefaultCredentialsProvider warnAboutProblematicCredentials; WARNING: Your application has authenticated using end user credentials from Google Cloud SDK. We recommend that most server applications use service accounts instead. If your application continues to use end user credentials from Cloud SDK, you might receive a ""quota exceeded"" or ""API not enabled"" error. For more information about service accounts, see https://cloud.google.com/docs/authentication/.; 19:13:26.217 INFO ASEReadCounter - ------------------------------------------------------------; 19:13:26.218 INFO ASEReadCounter - The Genome Analysis Toolkit (GATK) v4.1.8.1; 19:13:26.218 INFO ASEReadCounter - For support and documentation go to https://software.broadinstitute.org/gatk/; 19:13:26.219 INFO ASEReadCounter - Executing as cbao@uger-c009.broadinstitute.org on Linux v3.10.0-1160.15.2.el7.x86_64 amd64; 19:13:26.219 INFO ASEReadCounter - Java runtime: Java HotSpot(TM) 64-Bit Server VM v1.8.0_181-b13; 19:13:26.219 INFO ASEReadCounter - Start Date/Time: June 14, 2021 7:13:25 PM ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7314:183,log,log,183,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7314,2,['log'],['log']
Testability,"I bring the first point up given the safeguards our previous workflow had in place. In GATK3, CombineVariants checks that all the sample names are unique. You have to add `--genotypemergeoption UNIQUIFY` to allow use of the same normal sample. In GATK4, CreateSomaticPanelOfNormals allows input of the same sample twice and thereby counts the same evidence in the PoN it generates. Granted, I am doing something intentionally stupid here but I can imagine that this could happen accidentally for situations where we are dealing with hundreds of normal samples. . Interestingly, given the same sample twice, for my test case, it generates a PoN that has one less call than the inputs. Here is the command that runs successfully. Note that 2 is a direct copy of 1 made using unix `cp`.; ```; 	gatk-launch CreateSomaticPanelOfNormals \; 		-vcfs 1_normalforpon.vcf.gz \; 		-vcfs 2_normalforpon.vcf.gz \; 		-O 3_discard_practice_pon.vcf.gz; ```. Then I check the number of sites and I see a discrepency.; ```; WMCF9-CB5:working shlee$ gzcat 3_discard_practice_pon.vcf.gz | grep -v '#' | wc -l; 138; WMCF9-CB5:working shlee$ gzcat 1_normalforpon.vcf.gz | grep -v '#' | wc -l; 139; WMCF9-CB5:working shlee$ gzcat 2_normalforpon.vcf.gz | grep -v '#' | wc -l; 139; ```. Probing further we see:; ```; WMCF9-CB5:working shlee$ diff <(gzcat 1_normalforpon.vcf.gz | grep -v '#' | cut -f1,2) <(gzcat 3_discard_practice_pon.vcf.gz | grep -v '#' | cut -f1,2); 139d138; < chrX	153909841; WMCF9-CB5:working shlee$ gzcat 1_normalforpon.vcf.gz | grep 'chrX\t153909841'; chrX	153909841	.	C	A	.	.	DP=11;ECNT=1;POP_AF=1.000e-03;P_GERMLINE=-2.169e-04;TLOD=14.94	GT:AD:AF:ALT_F1R2:ALT_F2R1:FOXOG:MBQ:MCL:MFRL:MMQ:MPOS:REF_F1R2:REF_F2R1:SA_MAP_AF:SA_POST_PROB	0/1:6,5:0.455:3:2:0.400:30,33:0,0:191,278:60,60:11,20:1:5:0.404,0.444,0.455:0.025,0.025,0.950; WMCF9-CB5:working shlee$ gzcat 2_normalforpon.vcf.gz | grep 'chrX\t153909841'; chrX	153909841	.	C	A	.	.	DP=11;ECNT=1;POP_AF=1.000e-03;P_GERMLINE=-2.169e-04;TLOD=14.94	GT:AD",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3510:614,test,test,614,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3510,1,['test'],['test']
Testability,I broke external forks pull requests when the dataflow tests were turned on. They need to be updated so that tests that don't require keys will run without them.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/810:55,test,tests,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/810,2,['test'],['tests']
Testability,"I calculated ASECount of genome resequence data by GATK-3.8 , but I want do the same test by GATK-4.0 , It's so strange when I use GATK-4.0 argument ""--variants"" to substitute ""sites"" of GATK-3.8 , the ERROR remaind me that the ""SNP site is not hetero"" , so l want to ask ; What is the mean of ASECountReader ""sites"" argument of GATK-3.8 ? and what is the corresponding argument in GATK-4.0 ? the answer is undocumented in instruction of ""GATK-3.8 --help"", so l want get exact answer, thank you !",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7712:85,test,test,85,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7712,1,['test'],['test']
Testability,"I created a minimal branch to clean up the way we were passing around credentials. We create a GCSOptions class instead of a DataflowPipelineOptions when we create the pipeline and pass in secrets in at the point instead at the ReadSources level. ReadSources now takes a pipeline instead of the secrets file location. This isn't a long term solution. We should switch the code to get rid of the GenomicsSecret and instead use the more general secret. I think much of the secets factory junk can go away now (they dated from a time when the Dataflow API wasn't built out much. All tests passed locally. Oddly, I now am sometimes getting a dialog about DSDE needing access to basic information about my Google account, not sure source of the issue (maybe the secret I grabbed?), if it's repeatable, or blocking. I recommend the reviewer patch my branch and test locally.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/513:580,test,tests,580,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/513,2,['test'],"['test', 'tests']"
Testability,I didn't add a regression test because the most naive implementation of one would require adding a large test file. Closes #4140.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4145:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4145,2,['test'],['test']
Testability,"I didnt see an example, but I could have easily missed it: I am writing an integration test for a walker where the user supplies an output prefix, and the tool created three output files based on that prefix. I want to write an integration test, ideally using IntegrationTestSpec in an intended form. Are there any existing integration tests of tools that use this style argument, and/or is there an intended way to make that work using IntegrationTestSpec? . Most examples I see require the test to supply ""-O %s"", and the test creates a temp file for the output. It then expects to compare that path to the expected file you supply. I see how to work around it (dont use %s and manually check outputs), but I thought I'd check to see if there was an official solution. Thanks in advance.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5446:87,test,test,87,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5446,5,['test'],"['test', 'tests']"
Testability,"I discovered some strange behavior in our test suite. This test in `PrintReadsSparkIntegrationTest` passes:. ```; @Test; public void testReadFiltering() throws IOException {; final File samWithOneMalformedRead = new File(getTestDataDir(), ""print_reads_one_malformed_read.sam"");; final File outBam = createTempFile(""print_reads_testReadFiltering"", "".bam"");. ArgumentsBuilder args = new ArgumentsBuilder();; args.add(""--"" + StandardArgumentDefinitions.INPUT_LONG_NAME);; args.add(samWithOneMalformedRead.getCanonicalPath());; args.add(""--"" + StandardArgumentDefinitions.OUTPUT_LONG_NAME);; args.add(outBam.getCanonicalPath());. runCommandLine(args.getArgsArray());; SamAssertionUtils.assertSamsEqual(outBam, new File(getTestDataDir(), ""expected.print_reads_one_malformed_read.bam""));; }; ```. But if you re-write it to use `IntegrationTestSpec` with the same input, output, and expected file, it fails with `Sort order differs. File 1: nullFile 2: coordinate`:. ```; @Test; public void testReadFiltering() throws IOException {; final File samWithOneMalformedRead = new File(getTestDataDir(), ""print_reads_one_malformed_read.sam"");; final File outBam = createTempFile(""print_reads_testReadFiltering"", "".bam"");. final IntegrationTestSpec spec = new IntegrationTestSpec(; "" --"" + StandardArgumentDefinitions.INPUT_LONG_NAME + "" "" + samWithOneMalformedRead.getCanonicalPath() +; "" --"" + StandardArgumentDefinitions.OUTPUT_LONG_NAME + "" "" + outBam.getCanonicalPath(),; Arrays.asList(new File(getTestDataDir(), ""expected.print_reads_one_malformed_read.bam"").getCanonicalPath()); );. spec.executeTest(""PrintReadsSpark_testReadFiltering"", this);; }; ```. Possibly this is indicative of a bug in `IntegrationTestSpec`?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1164:42,test,test,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1164,7,"['Test', 'assert', 'test']","['Test', 'assertSamsEqual', 'test', 'testReadFiltering']"
Testability,"I find hundreds of those in jstack dump created towards the end of our test run. The wait has no timeout and so these threads never die. ```; ""OutputCapture-3-stdout-Test worker-12"" #1118 daemon prio=5 os_prio=31 tid=0x00007f818d05c000 nid=0xde23 in Object.wait() [0x0000000127aae000]; java.lang.Thread.State: WAITING (on object monitor); at java.lang.Object.wait(Native Method); at java.lang.Object.wait(Object.java:502); at org.broadinstitute.hellbender.utils.runtime.ProcessController$OutputCapture.run(ProcessController.java:315); - locked <0x000000077cf28d98> (a java.util.EnumMap); ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1740:71,test,test,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1740,2,"['Test', 'test']","['Test', 'test']"
Testability,"I found that if an indel + snp combination straddles a shard boundary GenotypeGVCFs will produce different calls. More info:. https://gatkforums.broadinstitute.org/gatk/discussion/comment/58230. This is in GATK 3.7. I do not know how this issue is related, would it have been merged in 3.7? https://github.com/broadinstitute/gatk/issues/2735. What is the expected behaviour of sharding in this circumstance? I am unable to perform the test using gatk4+ as it would require immense amounts of recomputation, just to confirm a bug report. Hopefully the devs know if this is expected behaviour or has been fixed already.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5905:435,test,test,435,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5905,1,['test'],['test']
Testability,I found this useful to debug some results that varied under different test conditions (different processors or something like that). It could be useful for debugging in the future.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7753:70,test,test,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7753,1,['test'],['test']
Testability,"I got 348 samples to analyse their variants. I have read several turorials about how to use gatk to get a population vcf. At the beginning , I tried to use CombineGVCFs to get the Gvcf and use SelectVariants to pick the snps out. . CombineGVCFs truns to a error ""Exception in thread ""main"" java.lang.OutOfMemoryError"" .; then I chose to use GenomicsDBImport to do this job. It still doesn't work. First error is ""read_one_line_fully && ""Buffer did not have space to hold a line fully - increase buffer size""; I add ""--genomicsdb-vcf-buffer-size 16384000"" , it causes different error ""Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space"". This is my command and work log.; My java version is ; openjdk version ""1.8.0_152-release""; OpenJDK Runtime Environment (build 1.8.0_152-release-1056-b12). GATK is very helpful in my research, and I really need some help to get it work. gatk --java-options ""-Xmx48g -Xms48G"" GenomicsDBImport -V C1_sentieon_gvcf.gz .......... -V SCAU-106.gvcf.gz -V SCAU-107.gvcf.gz -V SCAU-108.gvcf.gz -V SCAU-128.gvcf.gz --genomicsdb-workspace-path my_database.chr01 -R IRGSP-1.0_genome.fasta --genomicsdb-vcf-buffer-size 16384000 --intervals chr01. 11:48:08.245 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/home/ayu/anaconda3/share/gatk4-4.0.5.1-0/gatk-package-4.0.5.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; 11:48:09.327 INFO GenomicsDBImport - ------------------------------------------------------------; 11:48:09.327 INFO GenomicsDBImport - The Genome Analysis Toolkit (GATK) v4.0.5.1; 11:48:09.327 INFO GenomicsDBImport - For support and documentation go to https://software.broadinstitute.org/gatk/; 11:48:09.327 INFO GenomicsDBImport - Executing as ayu@ayu on Linux v5.15.90.1-microsoft-standard-WSL2 amd64; 11:48:09.327 INFO GenomicsDBImport - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_152-release-1056-b12; 11:48:09.327 INFO GenomicsDBImport - Start Date/Time: November 26, 2023 11:48:08 AM CST; 11:48:0",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8593:685,log,log,685,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8593,1,['log'],['log']
Testability,I got exception use run BaseRecalibratorSpark:. > java.io.FileNotFoundException: /home/data/WGS/F002/F002.sort.bam (Too many open files). My version is 4393c86 (after 4.0.10.1).; I have set `ulimit -n 4096` but still got this exception. My command:; `./gatk BaseRecalibratorSpark --tmp-dir /dev/shm/gatktmp/ -I /home/data/WGS/F002/F002.sort.bam -O 1.grp --known-sites /home/data/ref/dbsnp_138.hg19.vcf --known-sites /home/data/ref/1000G_phase1.indels.hg19.sites.vcf --known-sites /home/data/ref/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf -R /home/data/ref/ucsc.hg19.fasta -- --spark-runner SPARK --spark-master local[8] --driver-memory 100G`. Here is the log:. > 19:23:59.384 INFO FeatureManager - Using codec VCFCodec to read file file:///dev/shm/gatktmp/spark-30e238e4-b1b7-41f9-b31e-844f16879051/userFiles-4621c82d-5f86-4b51-9321-ccc84ab49979/Mills_and_1000G_gold_standard.indels.hg19.sites.vcf; 19:23:59.411 INFO BaseRecalibrationEngine - The covariates being used here: ; 19:23:59.411 INFO BaseRecalibrationEngine - 	ReadGroupCovariate; 19:23:59.412 INFO BaseRecalibrationEngine - 	QualityScoreCovariate; 19:23:59.412 INFO BaseRecalibrationEngine - 	ContextCovariate; 19:23:59.412 INFO BaseRecalibrationEngine - 	CycleCovariate; 18/10/17 19:23:59 ERROR Executor: Exception in task 517.0 in stage 0.0 (TID 517); org.broadinstitute.hellbender.exceptions.UserException$NoSuitableCodecs: Cannot read /dev/shm/gatktmp/spark-30e238e4-b1b7-41f9-b31e-844f16879051/userFiles-4621c82d-5f86-4b51-9321-ccc84ab49979/dbsnp_138.hg19.vcf because no suitable codecs found; 	at org.broadinstitute.hellbender.engine.FeatureManager.getCodecForFile(FeatureManager.java:462); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.getCodecForFeatureInput(FeatureDataSource.java:320); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.getFeatureReader(FeatureDataSource.java:300); 	at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:256); 	at org.broadinstitut,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5316:664,log,log,664,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5316,1,['log'],['log']
Testability,"I got the following error and log file from BaseRecalibrator: . ```; Using GATK jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -Xms4000m -jar /usr/gitc/gatk4/gatk-package-4.beta.1-local.jar BaseRecalibrator -R /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta -I gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --useOriginalQualities -O CHMI_CHMI3_WGS2.recal_data.csv -knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf -knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz -knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz -L chr11:1+; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.WXYB31; [July 20, 2017 2:18:26 PM UTC] BaseRecalibrator --useOriginalQualities true --knownSites gs://broad-references/hg38/v0/Homo_sapiens_assembly38.dbsnp138.vcf --knownSites /cromwell_root/broad-references/hg38/v0/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz --knownSites /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.known_indels.vcf.gz --output CHMI_CHMI3_WGS2.recal_data.csv --intervals chr11:1+ --input gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/66442def-ad3f-4c6c-960e-17578f6b382c/call-SortAndFixSampleBam/CHMI_CHMI3_WGS2.aligned.duplicate_marked.sorted.bam --reference /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta --mismatches_context_size 2 --indels_context_size 3 --maximum_cycle_value 500 --misma",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3316:30,log,log,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3316,2,['log'],['log']
Testability,I got this error running tests once. It's unclear what the problem was. It's nice that it bubbles up as a java exception but it's hard to know what the underlying issue was. ```; java.io.IOException: GenomicsDB JNI Error: std::exception; 	at org.genomicsdb.reader.GenomicsDBQueryStream.jniGenomicsDBInit(Native Method); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:209); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:182); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:91); 	at org.genomicsdb.reader.GenomicsDBFeatureReader.generateHeadersForQuery(GenomicsDBFeatureReader.java:200); 	at org.genomicsdb.reader.GenomicsDBFeatureReader.<init>(GenomicsDBFeatureReader.java:85); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.getGenomicsDBFeatureReader(GenomicsDBImportIntegrationTest.java:927); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:551); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.checkGenomicsDBAgainstExpected(GenomicsDBImportIntegrationTest.java:521); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS(GenomicsDBImportIntegrationTest.java:1104); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:1,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,1,['test'],['tests']
Testability,"I had a dumb permissions issue that had me spinning my wheels for a while because of some very terse logging. With the 5 reader threads we use in production I get:; `A USER ERROR has occurred: Couldn't read file. Error was: Failure while waiting for FeatureReader to initialize with exception: com.google.cloud.storage.StorageException: All 20 retries failed. Waited a total of 1918000 ms between attempts` ; (The error message has a placeholder for a path, but for some reason it's empty for me.). Finally I went to one thread, which called the serial FeatureReader creation method and gave me an error that could actually help solve my problem:; ```; com.google.cloud.storage.StorageException: All 20 retries failed. Waited a total of 1918000 ms between attempts; 	at com.google.cloud.storage.contrib.nio.CloudStorageRetryHandler.handleRetryForStorageException(CloudStorageRetryHandler.java:108); 	at com.google.cloud.storage.contrib.nio.CloudStorageRetryHandler.handleStorageException(CloudStorageRetryHandler.java:89); 	at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.checkAccess(CloudStorageFileSystemProvider.java:621); 	at java.nio.file.Files.exists(Files.java:2385); 	at htsjdk.tribble.util.ParsingUtils.resourceExists(ParsingUtils.java:419); 	at htsjdk.tribble.AbstractFeatureReader.isTabix(AbstractFeatureReader.java:243); 	at htsjdk.tribble.AbstractFeatureReader$ComponentMethods.isTabix(AbstractFeatureReader.java:249); 	at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:103); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.getReaderFromPath(GenomicsDBImport.java:619); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.getFeatureReadersSerially(GenomicsDBImport.java:602); 	at org.broadinstitute.hellbender.tools.genomicsdb.GenomicsDBImport.traverse(GenomicsDBImport.java:490); 	at org.broadinstitute.hellbender.engine.GATKTool.doWork(GATKTool.java:893); 	at org.broadinstitute.hellbender.cmd",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4592:101,log,logging,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4592,1,['log'],['logging']
Testability,I had another go at this. Passes tests and doesn't cause the problem on a cluster that Adam encountered (https://github.com/broadinstitute/gatk/issues/1389). Fixes #1266.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1421:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1421,1,['test'],['tests']
Testability,"I had to implement a few other features in order to get my unit tests to function properly, so this contains fixes for a few different issues (sorry). Adding in functionality to:. - Only create annotations for a specific set of transcripts via a command-line flag.; - Select the most detailed annotation for a transcript to be in ""cannonical"" or ""best effect"" order. Fixes #3780.; Fixes #3781.; Fixes #3782.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3858:64,test,tests,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3858,1,['test'],['tests']
Testability,I have been burned one too many times by the fact that this count silently filters reads for you. Since there is no logging output printing the number of filtered reads in spark it makes more sense to remove filtering from the tool altogether.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5329:116,log,logging,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5329,1,['log'],['logging']
Testability,"I have been running into an issue with Funcotator where some mutations are causing Funcotator to crash because it attempts to query a segment that extends beyond the boundary of the transcript ( see https://github.com/broadinstitute/gatk/issues/6345 ). This pull request addresses the issue by adding a check for transcript length before executing the query. I looked at the code, and Funcotator currently handles problematic sequence queries in `getFivePrimeUtrSequenceFromTranscriptFasta()` by returning an empty string. I modified `getFivePrimeUtrSequenceFromTranscriptFasta()` to also return an empty string when the segment it is trying to retrieve extends beyond the boundary of the transcript. . I have a small VCF that can be used to reproduce the problem using the current code on `master` and the hg38 data source, and I have verified that this pull request allows Funcotator to process the problematic variant without crashing. I did not add the VCF to the tree, but can provide it if that is preferred. Is there any guidance for how to implement integration tests with funcotator? The Funcotator data source I am using is ~12gb, but I would think the problem could be reproduced with 1 transcript and 1 variant. This is my first pull request to GATK, so please let me know if there is anything you would like me to adjust, I'm happy to address any comments.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6546:1070,test,tests,1070,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6546,1,['test'],['tests']
Testability,I have been trying to run the tutorial ( https://gatkforums.broadinstitute.org/gatk/discussion/10913/how-to-run-the-pathseq-pipeline ). When running without the --spark-master the turoail runs smoothly. Bu twhen I try my spark master I get an error. I downloaded SPARK 2.2.0 with hadoop 2.7.3; Java is 1.8.0_131; I set the java classpath (I think correctly); I am aware of this thread: https://github.com/broadinstitute/gatk/issues/3050. But noentheless I cannot get the error to solve. I tried to copy the jar files:; hbase-client-1.4.3.jar; hbase-common-1.4.3.jar; hbase-hadoop2-compat-1.4.3.jar; hbase-protocol-1.4.3.jar; hbase-server-1.4.3.jar; To my spark jar folder. Shall I do smething else? I am also a SPARK newbie. Thank you very much!. ***************** Here is the error log:. ../../../gatk PathSeqPipelineSpark --spark-master spark://xx.xx.xx.xx:7077 --input test_sample.bam --filter-bwa-image hg19mini.fasta.img --kmer-file hg19mini.hss --min-clipped-read-length 70 --microbe-fasta e_coli_k12.fasta --microbe-bwa-image e_coli_k12.fasta.img --conf [jars=~/bin/spark-2.2.0-bin-hadoop2.7/jars/hbase-client-1.4.3.jar] --taxonomy-file e_coli_k12.db --output output.pathseq.bam --verbosity DEBUG --scores-output output.pathseq.txt; Using GATK jar /scratch/home/int/eva/zorzan/bin/gatk-4.0.3.0/gatk-package-4.0.3.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /scratch/home/int/eva/zorzan/bin/gatk-4.0.3.0/gatk-package-4.0.3.0-local.jar PathSeqPipelineSpark --spark-master spark://xx.xx.xx.xx:7077 --input test_sample.bam --filter-bwa-image hg19mini.fasta.img --kmer-file hg19mini.hss --min-clipped-read-length 70 --microbe-fasta e_coli_k12.fasta --microbe-bwa-image e_coli_k12.fasta.img --conf [jars=~/bin/spark-2.2.0-bin-hadoop2.7/jars/hbase-client-1.4.3.jar] --taxonomy-file e_coli_k12.db --output output.pathseq.bam --verbosity DEBUG --scores-output,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4694:783,log,log,783,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4694,1,['log'],['log']
Testability,"I have encountered a discrepancy between the IGV visualization and the VCF output generated by GATK HaplotypeCaller. Here are the details of the issue:. IGV Visualization:. When inspecting the BAM file in IGV, I observe 16 reads, excluding artificial reads. Among these, 2 reads show an insertion, and the remaining are wildtype.; Including artificial reads, there are a total of 20 reads: 17 are wildtype, and 3 show an insertion. The variant is reported in the VCF file as follows:. `chr6 170561961 . G GCAA 133.98 PASS AC=2;AF=1;AN=2;DP=17;ExcessHet=3.0103;FS=0;MLEAC=2;MLEAF=1;MQ=60;QD=22.33;SOR=0.693 GT:AD:DP:GQ:PL 1/1:0,6:6:18:214,18,0`. Discrepancy Observed:. The DP value in the INFO field is 17.; The DP value in the FORMAT field is 6.; The AD value is 0,6.; Questions:. What could be the cause of the mismatch between the read counts observed in IGV and the DP values reported in the VCF file?; Why is there a discrepancy between the INFO field DP value and the FORMAT field DP value?. Command Used:; ```; shell(; ""gatk --java-options '{java_opts}' HaplotypeCaller {extra} ""; ""-L {snakemake.input.interval_list} ""; ""-R {snakemake.input.ref} {bams} ""; ""-A StrandBiasBySample ""; ""-bamout {snakemake.output.bam} ""; ""-O {snakemake.output.gvcf} {dbsnp} {log}""; ); ```; GATK Version:; gatk4==4.2.0.0. I have attached the IGV screenshot for your reference. I would appreciate any insights or suggestions regarding this issue. Thank you!; <img width=""1011"" alt=""image"" src=""https://github.com/user-attachments/assets/48337fa9-5c66-405d-abd6-12da223400e9"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8956:1260,log,log,1260,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8956,1,['log'],['log']
Testability,"I have found an error in the _ClippingOp_ class used by the _ReadClipper_. The offending function is _cleanHardClippedCigar_. In this function a logic error results in the returned _CigarShift_ object always having zero values for the _shiftFromStart_ and _shiftFromEnd_ members. The offending loop is shown below:; `. for (int i = 1; i <= 2; i++) {; final int shift = 0;; int totalHardClip = 0;; boolean readHasStarted = false;; boolean addedHardClips = false;. while (!cigarStack.empty()) {; final CigarElement cigarElement = cigarStack.pop();. if (!readHasStarted &&; cigarElement.getOperator() != CigarOperator.DELETION &&; cigarElement.getOperator() != CigarOperator.SKIPPED_REGION &&; cigarElement.getOperator() != CigarOperator.HARD_CLIP) {; readHasStarted = true;; } else if (!readHasStarted && cigarElement.getOperator() == CigarOperator.HARD_CLIP) {; totalHardClip += cigarElement.getLength();; } else if (!readHasStarted && cigarElement.getOperator() == CigarOperator.DELETION) {; totalHardClip += cigarElement.getLength();; } else if (!readHasStarted && cigarElement.getOperator() == CigarOperator.SKIPPED_REGION) {; totalHardClip += cigarElement.getLength();; }. if (readHasStarted) {; if (i == 1) {; if (!addedHardClips) {; if (totalHardClip > 0) {; inverseCigarStack.push(new CigarElement(totalHardClip, CigarOperator.HARD_CLIP));; }; addedHardClips = true;; }; inverseCigarStack.push(cigarElement);; } else {; if (!addedHardClips) {; if (totalHardClip > 0) {; cleanCigar.add(new CigarElement(totalHardClip, CigarOperator.HARD_CLIP));; }; addedHardClips = true;; }; cleanCigar.add(cigarElement);; }; }; }; // first pass (i=1) is from end to start of the cigar elements; if (i == 1) {; shiftFromEnd = shift;; cigarStack = inverseCigarStack;; }; // second pass (i=2) is from start to end with the end already cleaned; else {; shiftFromStart = shift;; }; }; }; `. Notice that the variable _shift_ is initialized, but never assigned to again for the duration of the loop. Thus _shiftFromSta",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6130:145,log,logic,145,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6130,1,['log'],['logic']
Testability,"I have four phased variants in close proximity that have the following pattern:. ```; chrA 10 ... GT:PS 0|1:1; chrA 20 ... GT:PS 0|1:2; chrA 30 ... GT:PS 0|1:1; chrA 40 ... GT:PS 0|1:2; ```. These four variants are wholly contained in a single set of reads. There are of course other reads that partially span them. The first variant is a deletion, while the remaining three are SNVs.; Examining the reads, there are two haplotypes since:; 1. Alternate for the 1st and 3rd read; 2. Alternate for the 2nd and 4th read. I would have expected them all to have the same phase set (`PS`) value. I have a test case I can share privately (let me know a good email to send it to confidentially).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6845:599,test,test,599,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6845,1,['test'],['test']
Testability,I have imported into GenomicDB and am using 3200 intervals to paralelise across hg38 but most intervals don't finish within four hours. It worked decently for ten to fifteen samples but not now that I have 108 samples. Can you test it out on such data to reproduce?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8637:227,test,test,227,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8637,1,['test'],['test']
Testability,I have noticed after looking at the HaplotypeCaller command line in some recent forum posts (https://gatk.broadinstitute.org/hc/en-us/community/posts/7293912288795-Haploytpe-caller-shows-me-that-0-read-s-were-filtered-by-MappingQualityAvailableReadFilter-etc) that the output of the filtering summary can be confusing if a lot of reads were processed. It can be very useful to know that a lot of reads are lost to a particular filter as an important sanity check for processing but unfortunately that information can be very confusing and not helpful without some indication of the total number of reads that were processed to begin with. I propose that we add to the `CountingReadFilter` code additional logic to keep track of the unfiltered reads as well so we can report both numbers to the user and clear up potential confusion.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7944:705,log,logic,705,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7944,1,['log'],['logic']
Testability,"I have noticed in debugging an issue that there is an inconsistency in the overlaps methods in a somewhat pathological edge case that we should probably address somewhere in the future. In the case where a read (locatable) consumes no reference bases I see inconsistent behavior if the read is ""aligned"" to the last base in a simple interval. To demonstrate I have this read (which is all insertions): ; `<READNAME>	99	chr1	72515809	34	70I81H	=	72515809	70	ATATATGTATACATATATATGTACATATATATGTATACATATATGCACATATATATGTATACATATATAT	....`; and the simple interval: ; `chr1:72515804-72515808`; Calling the method `read.overlaps(simpleInterval)` returns true, whereas calling the method `simpleInterval.overlaps(read)` returns false. Doing a little digging into why this is, it appears that the `.overlaps()` method that gets called in the former case maps to the Locatable overlaps method which calls return `withinDistanceOf(other, 0);` which from what I can tell fails in this case because `<READNAME>.getEnd()` returns `72515808` for this all insertion read. The latter case seems to map to -> `overlapsWithMargin(other, 0);` which doesn't end up getting tripped by the `read.getEnd()` result. . This is a very marginal case and perhaps it is best addressed by making sure we aren't producing meaningless all insertion reads but we should probably add some better tests to the locatable/simpleInterval overlaps methods and change them so they are absolutely concordant in every pathological edge case so this doesn't cause issues for us in the future.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6898:1361,test,tests,1361,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6898,1,['test'],['tests']
Testability,"I have tested several program functions by GATK4, some of them work pretty well. GATK4 does a great job to organize all steps by different tools like BWA, samtools, picard. Besides, it seems that there is also some optimization inside. Like ""cleanSam"" step, GATK4 cuts the time half compared to the one using Picard. (From 8 mins to 4 mins on same data) . However, the problem about GATK4 is that some programs fail due to java related problem (Maybe some reasons else). So far, the functions I failed are ""FastqToSam"" and ""ReadsPipelineSpark "". . Note that, I am using spark locally not scale-out cluster. So the command I am running ReadsPipelineSpark is as below(with oracle java8). Then it gives me java error. . ./bin/gatk/gatk­launch \; ReadsPipelineSpark \; -O hdfs:<PATH>CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam.md.bqsr \; -I hdfs:<PATH>/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam \; -R hdfs:<PATH>human_g1k_v37.2bit \; --knownSites hdfs:<PATH>dbsnp_138.b37.excluding_sites_after_129.vcf \; --shardedOutput true \; --emit_original_quals \; --duplicates_scoring_strategy SUM_OF_BASE_QUALITIES. All the failure seems to do with the java.lang.IllegalArgumentException with different error causes:; 1. readpipeline: java.lang.IllegalArgumentException: Null object is not allowed here; 2. fastqtosam: java.lang.IllegalArgumentException: Self-suppression not permitted",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1876:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1876,1,['test'],['tested']
Testability,I have tested that this explicitly works on the users data. I decided it was simplest to just check for mis-trimming at the very last stage. I'm a little weary about the change of the locus for the ref context from being the culledVC to being the mergedVC. . Fixes #5994,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6044:7,test,tested,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6044,1,['test'],['tested']
Testability,"I have the following instruction in a handson tutorial:. > If you haven't already done so, create a symlink to the gatk-launch script. Navigate back to /gatk and test the symlink by listing the tools available.; ```; cd /usr/local/bin; ln -s /gatk/gatk-launch gatk-launch; cd /gatk; gatk-launch –-list; ```. @vdauwera says:; > wouldn't it be simpler to export to path?. My reply:; > Environmental variables persist ephemerally. I haven't tested persistence when containers are stopped and restarted. @vdauwera requests:; > hmm, could also add to path in the bash profile... we should ask the devs if it's possible to set that up in the docker itself, for next time. Could we have both an environmental variable and a symlink that invokes the launch script in the Docker from any location? Thanks.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3899:162,test,test,162,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3899,2,['test'],"['test', 'tested']"
Testability,I haven't tested these in Terra (or in the cloud at all). But the local tests should now be passing. Happy to test this in Terra if there's an easy way to do that. @davidbenjamin or @fleharty care to review?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6108:10,test,tested,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6108,3,['test'],"['test', 'tested', 'tests']"
Testability,"I hit this same segmentation violation issue on 4 separate branches on travis today (I believe in each case only the Java 11 unit test job failed - the rest of the matrix succeeded). It seems to be intermittent since, so far rerunning the job seems to make it go away. . ```; Finished 210000 tests; Finished 220000 tests; Finished 230000 tests; Finished 240000 tests; Finished 250000 tests; Finished 260000 tests; Finished 270000 tests; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x00007f2bcaefd0f2, pid=10075, tid=10100; #; # JRE version: OpenJDK Runtime Environment (11.0.2+9) (build 11.0.2+9); # Java VM: OpenJDK 64-Bit Server VM (11.0.2+9, mixed mode, tiered, compressed oops, g1 gc, linux-amd64); # Problematic frame:; # V [libjvm.so+0x8fd0f2] jni_GetByteArrayElements+0x72; #; # Core dump will be written. Default location: Core dumps may be processed with ""/usr/share/apport/apport %p %s %c %d %P %E"" (or dumping to /home/travis/build/broadinstitute/gatk/core.10075); #; # An error report file with more information is saved as:; # /home/travis/build/broadinstitute/gatk/hs_err_pid10075.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; #. Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.pairhmm.VectorPairHMMUnitTest > testLikelihoodsFromHaplotypesForAvailableImplementations SKIPPED; Results: SUCCESS (276386 tests, 276385 successes, 0 failures, 1 skipped). > Task :test FAILED; ```. Entire log is attached. ; [java11segv.txt](https://github.com/broadinstitute/gatk/files/4747769/java11segv.txt)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6649:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6649,14,"['log', 'test']","['log', 'test', 'testLikelihoodsFromHaplotypesForAvailableImplementations', 'tests']"
Testability,I just ran the pipeline from master on the WGS1 BAM file with the following parameters:. ```; /Users/cwhelan/Documents/code/gatk/gatk StructuralVariationDiscoveryPipelineSpark -I hdfs://cw-test-m:8020/data/G94794.CHMI_CHMI3_WGS1.cram.bam -O hdfs://cw-test-m:8020/output/variants/inv_del_ins.vcf -R hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.2bit --aligner-index-image /mnt/1/reference/Homo_sapiens_assembly38.fasta.img --exclusion-intervals hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.kill.intervals --kmers-to-ignore hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.kill.kmers --cross-contigs-to-ignore hdfs://cw-test-m:8020/reference/Homo_sapiens_assembly38.kill.alts --breakpoint-intervals hdfs://cw-test-m:8020/output/intervals --fastq-dir hdfs://cw-test-m:8020/output/fastq --contig-sam-file hdfs://cw-test-m:8020/output/assemblies.sam --target-link-file hdfs://cw-test-m:8020/output/target_links.bedpe --exp-variants-out-dir hdfs://cw-test-m:8020/output/experimentalVariantInterpretations -- --spark-runner GCS --cluster cw-test --num-executors 20 --driver-memory 30G --executor-memory 30G --conf spark.yarn.executor.memoryOverhead=5000 --conf spark.network.timeout=600 --conf spark.executor.heartbeatInterval=120 --conf spark.driver.userClassPathFirst=false; ```. It failed near the end of the pipeline. Here is the tail of the log:. ```; 20:38:14.368 INFO StructuralVariationDiscoveryPipelineSpark - Used 3549 evidence target links to annotate assembled breakpoints; 20:38:14.462 INFO StructuralVariationDiscoveryPipelineSpark - Called 662 imprecise deletion variants; 20:38:14.492 INFO StructuralVariationDiscoveryPipelineSpark - Discovered 7234 variants.; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - INV: 184; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - DEL: 4486; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - DUP: 1170; 20:38:14.506 INFO StructuralVariationDiscoveryPipelineSpark - INS: 1394; 18/01/12 20:,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4141:189,test,test-m,189,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4141,10,['test'],['test-m']
Testability,"I made no changes to the copied files. @kcibul @ahaessly let me know if I'm missing anything. I left some of the demo bash scripts thinking that we didn't necessarily need to keep them now that we have WDLs, but let me know if you want me to move anything else. . The readme update here assumes that #6881 will get merged. I also turned off the tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6902:345,test,tests,345,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6902,1,['test'],['tests']
Testability,"I moved the WDL for importing the array manifest from the variantstore repo and added a test. The test here only checks that the WDL succeeded, it doesn't look a the results (yet). It's ingesting the manifest to a dataset with a 7 day TTL, so the tables eventually get cleaned up. That might be too long for this case, since it adds a table each time the test is run (so on push and PR). . I plan to add more of the ""end-to-end"" pipeline with more testing in the future using a similar scheme, so welcome feedback on the structure.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6860:88,test,test,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6860,4,['test'],"['test', 'testing']"
Testability,"I noticed a huge amount of ""Jumbo genotype annotations requested but fragment likelihoods or haplotype likelihoods were not given"" logging in some of our pipeline jobs. This patch fixes two things:. 1) I propose GATK only log this message once, the first time it hits this. 2) I think the logic here is wrong. It lacked parenthesis. This logic was:. ```; if (!jumboGenotypeAnnotations.isEmpty() && !fragmentLikelihoods.isPresent() || !haplotypeLikelihoods.isPresent()) {; ```. In java: ""false && false || true"" gives true, which is not what you want. For example, if jumboGenotypeAnnotations was empty, this would still log if either fragmentLikelihoods or haplotypeLikelihoods tests true. That doesnt seem like what you want. In contrast, false && (false || true) still tests false. Adding the parentheses fixes the logic.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7612:131,log,logging,131,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7612,8,"['log', 'test']","['log', 'logging', 'logic', 'tests']"
Testability,"I noticed that `VcfUtils.getSortedSampleSet` takes a `GenotypeMergeType`. The only case it looks at is `UNIQIFY`. You would expect that calling `getSortedSampleSet(someHeaderWithDuplicateSamples, GenotypeMergeType.REQUIRE_UNIQUE)` should throw, but instead it silently continues. . ex, the following test passes just fine:; ```; @Test; public void testGetSortedSampleSet(){; final HashMap<String, VCFHeader> headers = new HashMap<>();; headers.put(""track1"", new VCFHeader(Collections.emptySet(), Sets.newSet(""sample1"")));; headers.put(""track2"", new VCFHeader(Collections.emptySet(), Sets.newSet(""sample1"")));. final SortedSet<String> sortedSampleSet = VcfUtils.getSortedSampleSet(headers, GATKVariantContextUtils.GenotypeMergeType.REQUIRE_UNIQUE);; }; ```. The method is also lacking any tests or javadoc.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3744:300,test,test,300,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3744,4,"['Test', 'test']","['Test', 'test', 'testGetSortedSampleSet', 'tests']"
Testability,"I noticed that in the GATK3 test data, the dictionary built into the test file noGenotypes.vcf and human_g1k_v37.dict do not line up. They're close, but the VCF's header dictionary has hs37d5 and NC_007605. On both GATK3 and GATK4 this seems to be allowed. Should it?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4453:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4453,2,['test'],['test']
Testability,"I often find that when I get a stack trace it doesn't include sufficient information about the record that triggered it, or even where in the file it was. It would be possible to have GATKTools track their position and most recently `applied` records and then output that information either as log messages during a crash, or by wrapping incoming exceptions. . I think it would probably be useful, but it's also possible that we'd output irrelevant information when the record wasn't what caused the problem. Of course people could also write more complete exception messages, but it seems like the ones I hit never have quite what I want. What do people think about it?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4748:294,log,log,294,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4748,1,['log'],['log']
Testability,"I ran 408 invocations of an nio using command for BQSR using gatk4 and got 2 failures that looked pretty similar. Is there something I might be doing wrong? The two failures were also on different shards. . I cant remember exactly when I built this jar but it was after this commit - https://github.com/broadinstitute/gatk/commit/4df1d16518cbd3a05a45a070d682446878ec4eaa less than a week ago. If you need any more info let me know, thanks. ```; Using GATK jar /usr/gitc/gatk4/gatk-package-4.beta.3-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 -Dsnappy.disable=true -XX:+PrintFlagsFinal -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintGCDetails -Xloggc:gc_log.log -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xms3000m -jar /usr/gitc/gatk4/gatk-package-4.beta.3-local.jar ApplyBQSR --createOutputBamMD5 --addOutputSAMProgramRecord -R /cromwell_root/broad-references/hg38/v0/Homo_sapiens_assembly38.fasta -I gs://broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/4a87f12f-014e-438a-9a10-260c70bf3584/call-SortSampleBam/attempt-4/NA12878.aligned.duplicate_marked.sorted.bam --useOriginalQualities -O NA12878.aligned.duplicates_marked.recalibrated.bam -bqsr /cromwell_root/broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/4a87f12f-014e-438a-9a10-260c70bf3584/call-GatherBqsrReports/NA12878.recal_data.csv -SQQ 10 -SQQ 20 -SQQ 30 -L chr5:1+; Picked up _JAVA_OPTIONS: -Djava.io.tmpdir=/cromwell_root/tmp.Ni4zSL; [August 22, 2017 2:52:59 PM UTC] ApplyBQSR --output NA12878.aligned.duplicates_marked.recalibrated.bam --bqsr_recal_file /cromwell_root/broad-gotc-dev-cromwell-execution/PairedEndSingleSampleWorkflow/4a87f12f-014e-438a-9a10-260c70bf3584/call-GatherBqsrReports/NA12878.recal_data.csv --useOriginalQualities true --static_quantized_quals 10 --static_quantized_quals 20 --static_quantized_quals 30 --intervals chr5:1+ --input gs",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3481:803,log,log,803,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3481,1,['log'],['log']
Testability,I ran a couple of tests - in case of single contig case the ploidy calls correspond to most likely apriori ploidies. In the case of multiple contigs there is no numerical changes to inference whatsoever.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6613:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6613,1,['test'],['tests']
Testability,"I ran the full test suite using a [branch](https://github.com/broadinstitute/gatk/tree/cn_check_cache_thrash) that throws if a tool ever tries to query the FeatureCache using a query interval that is earlier than, but on the same contig as, the one currently cached. Several tests [failed](https://travis-ci.org/broadinstitute/gatk/builds/422089722), including a few of the Funcotator ones:. FuncotatorIntegrationTest.exhaustiveArgumentTest; FuncotatorIntegrationTest.testFuncotatorWithoutValidatingResults; FuncotatorIntegrationTest.testVcfDatasourceAccountsForAltAlleles; FuncotatorIntegrationTest.testVcfMafConcordance. These may be test artifacts, but we should audit the Funcotator cache access patterns and see if this is actually causing thrashing that affects performance. Since the FeatureCache caching strategy assumes queries will be forward-only, it might be an indication that Funcotator performance could be improved by either turning off caching or using an alternative cache strategy.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5143:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5143,6,['test'],"['test', 'testFuncotatorWithoutValidatingResults', 'testVcfDatasourceAccountsForAltAlleles', 'testVcfMafConcordance', 'tests']"
Testability,"I ran the full test suite using a [branch](https://github.com/broadinstitute/gatk/tree/cn_check_cache_thrash) that throws if a tool ever tries to query the FeatureCache using a query interval that is earlier than, but on the same contig as, the one currently cached. Several tests failed, including a few of the Mutect2/HC ones:. Mutect2IntegrationTest.testContaminationFilter; Mutect2IntegrationTest.testDreamTumorNormal; Mutect2IntegrationTest.testGivenAllelesMode; Mutect2IntegrationTest.testPon; Mutect2IntegrationTest.testTumorOnly ; HaplotypeCallerIntegrationTest.testGenotypeGivenAllelesMode. The FeatureCache assumes that queries are always increasing along a contig; the failures in this branch indicate that the caller is attempting to back up and re-query territory that has already been cached and then trimmed. I didn't track down all of these cases, but the general pattern appears to be that active region determination results in initial caching and trimming, and then the same/similar territory is traversed again during calling, resulting in cache misses. It happens pretty frequently when running M2 tests, at least for pon and germline resource inputs; we should investigate how much a better caching strategy would help performance. If it would, we'd need https://github.com/broadinstitute/gatk/pull/4902 at a mimimum in order to use a alternate cache strategy.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5148:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5148,9,['test'],"['test', 'testContaminationFilter', 'testDreamTumorNormal', 'testGenotypeGivenAllelesMode', 'testGivenAllelesMode', 'testPon', 'testTumorOnly', 'tests']"
Testability,"I recently noticed a series of what were evidently memory failures when running HaplotypeCaller on some standard test WGS data when using the exact task used in the warp pipeline here: https://github.com/broadinstitute/warp/blob/develop/pipelines/broad/dna_seq/germline/variant_calling/VariantCalling.wdl. I found that running that wdl with otherwise default inputs except for `haplotype_scatter_count` being set to 10 (so each node doing approximately 5x as much work as when the default, 50, is set) I would get repeated HaplotypeCaller job failures after a few hours that had the pattern of memory failures. The errors tend to involve HaplotypeCaller abruptly ending without any sort of error message or exception at all (which could indicate the vm is dying):; ```; 03:22:15.993 INFO ProgressMeter - chr13:18173014 378.6 1419490 3749.0; 03:22:26.338 INFO ProgressMeter - chr13:18177988 378.8 1419530 3747.4; 03:22:36.801 INFO ProgressMeter - chr13:18203610 379.0 1419700 3746.1; (END); ```; Or alternatively it seems to end without the end-of-run messages being output:; ```; 23:05:30.662 INFO ProgressMeter - chr2:47207099 428.8 1372310 3200.4; 23:05:40.859 INFO ProgressMeter - chr2:47323745 429.0 1372960 3200.7; 23:05:50.896 INFO ProgressMeter - chr2:47476709 429.1 1373720 3201.2; Using GATK jar /gatk/gatk-package-4.2.2.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx6933m -Xms6933m -XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -jar /gatk/gatk-package-4.2.2.0-local.jar HaplotypeCaller [INPUTS]; 2022/02/10 23:06:52 Starting delocalization.; 2022/02/10 23:06:53 Delocalization script execution started...; ```. These failures appear to be reproducible and happen at about the same point in every run. The fact that increasing the memory or decreasing the interval per shard seems to remove the issue it makes me suspect there might be an issue where Hapl",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7693:113,test,test,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7693,1,['test'],['test']
Testability,I reenabled ReadCovariateUnit tests (disabled in GATK3 because it was failing) and added a bunch of code to make it tests the right thing. A lot of testing problems with reverse-strand reads is fixed now. fixes #412,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/442:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/442,3,['test'],"['testing', 'tests']"
Testability,"I run HaplotypeCaller twice , the former one was stopped because of unexpected power outages. I check the LOG and found the chromosome where HaplotypeCaller stopped. So i star another HaplotypeCaller(later one) with the ""-L *.intervals"", it begin from the chromosome where former HaplotypeCaller stopped.The ref genome and the parameters were all the same. However, HaplotypeCaller give different results. Note: the ref genome has 26 chromosomes :A01-A13;D01-D13. **_The former LOG:_**. nohup: ignoring input and appending output to ‘nohup.out’; 09:04:49.857 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/share/home/chenwei/biosoft/gatk-4.0.10.1/gatk-package-4.0.10.1-local.jar!/com/intel/gkl/native/libgkl_compression.so; 09:05:02.971 INFO HaplotypeCaller - ------------------------------------------------------------; 09:05:02.971 INFO HaplotypeCaller - The Genome Analysis Toolkit (GATK) v4.0.10.1; 09:05:02.971 INFO HaplotypeCaller - For support and documentation go to https://software.broadinstitute.org/gatk/; 09:05:02.972 INFO HaplotypeCaller - Executing as chenwei@localhost.localdomain on Linux v3.10.0-1160.31.1.el7.x86_64 amd64; 09:05:02.972 INFO HaplotypeCaller - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_292-b10; 09:05:02.973 INFO HaplotypeCaller - Start Date/Time: August 22, 2021 9:04:49 AM CST; 09:05:02.973 INFO HaplotypeCaller - ------------------------------------------------------------; 09:05:02.973 INFO HaplotypeCaller - ------------------------------------------------------------; 09:05:02.974 INFO HaplotypeCaller - HTSJDK Version: 2.16.1; 09:05:02.974 INFO HaplotypeCaller - Picard Version: 2.18.13; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.COMPRESSION_LEVEL : 2; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_READ_FOR_SAMTOOLS : false; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_SAMTOOLS : true; 09:05:02.975 INFO HaplotypeCaller - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBL",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7454:106,LOG,LOG,106,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7454,2,['LOG'],['LOG']
Testability,"I run the BaseRecalibrator,and at fisrt it can good running,after a time,I got this error：; htsjdk.samtools.SAMFormatException: Invalid GZIP header; This is the log:; Using GATK jar /data/home/wuly/soft/GATK4/gatk-4.1.2.0/gatk-package-4.1.2.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx20G -Djava.io.tmpdir=./; -jar /data/home/wuly/soft/GATK4/gatk-4.1.2.0/gatk-package-4.1.2.0-local.jar BaseRecalibrator -R /data/home/wuly/source/Homo_sapiens_assembly38.fasta -I M1.bam --known-sites /data/home/wuly/source/dbsnp_146.hg38.vcf.gz --known-sites /data/home/wuly/source/Mills_and_1000G_gold_standard.indels.hg38.vcf.gz --known-sites /data/home/wuly/source/1000G_phase1.snps.high_confidence.hg38.vcf.gz --known-sites /data/home/wuly/source/hapmap_3.3.hg38.vcf.gz -O M1_recal.table17:55:54.326 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/data/home/wuly/soft/GATK4/gatk-4.1.2.0/gatk-package-4.1.2.0-local.jar!/com/intel/gkl/native/libgkl_compre; ssion.soMay 24, 2019 5:55:56 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 17:55:56.095 INFO BaseRecalibrator - ------------------------------------------------------------; 17:55:56.096 INFO BaseRecalibrator - The Genome Analysis Toolkit (GATK) v4.1.2.0; 17:55:56.096 INFO BaseRecalibrator - For support and documentation go to https://software.broadinstitute.org/gatk/; 17:55:56.096 INFO BaseRecalibrator - Executing as wuly@localhost.localdomain on Linux v3.10.0-957.10.1.el7.x86_64 amd64; 17:55:56.096 INFO BaseRecalibrator - Java runtime: OpenJDK 64-Bit Server VM v1.8.0_192-b01; 17:55:56.096 INFO BaseRecalibrator - Start Date/Time: May 24, 2019 5:55:54 PM EDT; 17:55:56.096 INFO BaseRecalibrator - ------------------------------------------------------------; 17:55:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5968:161,log,log,161,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5968,1,['log'],['log']
Testability,"I run the GATK MarkDuplicates in Spark mode and it throws an; **NoClassDefFoundError: scala/Product$class**. The GATK version is **4.1.7** and; **4.0.0**,the environment is: **spark-3.0.0**, **scala-2.12.11**. **GATK commands:**. ```; gatk MarkDuplicatesSpark \; -I hdfs://master2:9000/Drosophila/output/Drosophila.sorted.bam \; -O hdfs://master2:9000/Drosophila/output/Drosophila.sorted.markdup.bam \; -M; hdfs://master2:9000/Drosophila/output/Drosophila.sorted.markdup_metrics.txt; \; -- \; --spark-runner SPARK --spark-master spark://master2:7077; ```; **error logs:**. ```; Exception in thread ""main"" java.lang.NoClassDefFoundError:; scala/Product$class; at; org.bdgenomics.adam.serialization.InputStreamWithDecoder.<init>(ADAMKryoRegistrator.scala:35); at; org.bdgenomics.adam.serialization.AvroSerializer.<init>(ADAMKryoRegistrator.scala:45); at; org.bdgenomics.adam.models.VariantContextSerializer.<init>(VariantContext.scala:94); at; org.bdgenomics.adam.serialization.ADAMKryoRegistrator.registerClasses(ADAMKryoRegistrator.scala:179); at; org.broadinstitute.hellbender.engine.spark.GATKRegistrator.registerClasses(GATKRegistrator.java:78); at; org.apache.spark.serializer.KryoSerializer.$anonfun$newKryo$8(KryoSerializer.scala:170); at; org.apache.spark.serializer.KryoSerializer.$anonfun$newKryo$8$adapted(KryoSerializer.scala:170); at scala.Option.foreach(Option.scala:407); at; org.apache.spark.serializer.KryoSerializer.$anonfun$newKryo$5(KryoSerializer.scala:170); at; scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23); at; org.apache.spark.util.Utils$.withContextClassLoader(Utils.scala:221); at; org.apache.spark.serializer.KryoSerializer.newKryo(KryoSerializer.scala:161); at; org.apache.spark.serializer.KryoSerializer$$anon$1.create(KryoSerializer.scala:102); at; com.esotericsoftware.kryo.pool.KryoPoolQueueImpl.borrow(KryoPoolQueueImpl.java:48); at; org.apache.spark.serializer.KryoSerializer$PoolWrapper.borrow(KryoSerializer.scala:109); at; org.apache.spark",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6644:564,log,logs,564,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6644,1,['log'],['logs']
Testability,"I saw this message recently when running gcloud:. ```; WARNING: `gcloud auth login` no longer writes application default credentials.; If you need to use ADC, see:; gcloud auth application-default --help; ```. It looks like we may have to update our travis script / our instructions for running on cloud files at some point in the near future.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2660:77,log,login,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2660,1,['log'],['login']
Testability,I set up a test requester pays bucket in GCS: `gs://droazen-requester-pays/` with a test file `gs://droazen-requester-pays/reads_data_source_test1.bam`. . GATK `CountReads` happily reads from this file even when I don't specify the `--gcs-project-for-requester-pays` argument. The expected behavior is that it will refuse to proceed unless that argument is specified. Command to replicate:. ```; ./gatk CountReads -I gs://droazen-requester-pays/reads_data_source_test1.bam; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6176:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6176,2,['test'],['test']
Testability,I should have looked at the tests... @rickymagner,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8605:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8605,1,['test'],['tests']
Testability,"I tested on a 30Gb file, trying to write to HDFS. It wrote more than 1.4 TB to disk and took hours to complete.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/940:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/940,1,['test'],['tested']
Testability,"I tested this by:; - running the `GvsAssignIds` workflow; - manually updated the `sample_ids` to span from 1 to 15535; - manually created the `vet_002`, `vet_003`, `vet_004`, `ref_ranges_002`, `ref_ranges_003`, `ref_ranged_004` tables; - running the `GvsImportGenomes` workflow; - running the `GvsPopulateAltAllele` workflow with `max_alt_allele_shards` to 3 so that it would divide the vet tables into (at most) 3 files; see https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/b1b319bc-a2aa-44cb-ad9a-079b7c1c33de for `GvsPopulateAltAllele` run",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7998:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7998,1,['test'],['tested']
Testability,"I tested this using the following sketchy procedure: I temporarily reverted https://github.com/broadinstitute/gatk/pull/5936 on this branch, thereby re-introducing non-ASCII characters into the source. That builds without error, as it should. Then I temporarily changed the newly added encoding declarations included this PR in build.gradle from ""UTF-8"" to ""US-ASCII"", after which I was able to reproduce exactly the same errors as reported in https://github.com/broadinstitute/gatk/issues/5934, for both compile and gatkDoc tasks. So I think these changes achieve the desired result (accept UTF-8 in source).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5946:2,test,tested,2,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5946,1,['test'],['tested']
Testability,I think this is ready for initial review while I start testing it on larger scale data. I've left adding in the full VQSR tranche filtering as TODOs for now.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6971:55,test,testing,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6971,1,['test'],['testing']
Testability,I think this issue still persists: ; The Genome Analysis Toolkit (GATK) v4.1.3.0; ```; 2019-10-29T18:18:04.000640760Z java.lang.IllegalArgumentException: log10 p: Values must be non-infinite and non-NAN; 2019-10-29T18:18:04.001018863Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.logSumExp(NaturalLogUtils.java:84); 2019-10-29T18:18:04.001194549Z 	at org.broadinstitute.hellbender.utils.NaturalLogUtils.normalizeLog(NaturalLogUtils.java:51); 2019-10-29T18:18:04.001367357Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.clusterProbabilities(SomaticClusteringModel.java:203); 2019-10-29T18:18:04.001518160Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.clustering.SomaticClusteringModel.probabilityOfSequencingError(SomaticClusteringModel.java:96); 2019-10-29T18:18:04.001673083Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.TumorEvidenceFilter.calculateErrorProbability(TumorEvidenceFilter.java:27); 2019-10-29T18:18:04.001846904Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.Mutect2VariantFilter.errorProbability(Mutect2VariantFilter.java:15); 2019-10-29T18:18:04.002024760Z 	at org.broadinstitute.hellbender.tools.walkers.mutect.filtering.ErrorProbabilities.lambda$new$1(ErrorProbabilities.java:19); 2019-10-29T18:18:04.002140012Z 	at java.util.stream.Collectors.lambda$toMap$58(Collectors.java:1321); 2019-10-29T18:18:04.002232542Z 	at java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169); 2019-10-29T18:18:04.002242727Z 	at java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1382); 2019-10-29T18:18:04.002292461Z 	at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481); 2019-10-29T18:18:04.002301667Z 	at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471); 2019-10-29T18:18:04.002307019Z 	at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708); 2019-10-29T18:18:04.002311722Z 	at java.util.s,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6237:291,log,logSumExp,291,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6237,1,['log'],['logSumExp']
Testability,"I think this makes sense, but is low priority and can definitely wait until after release.; Add tests for theano HMM + example use case for Hybrid ADVI.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4043:96,test,tests,96,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4043,1,['test'],['tests']
Testability,"I tried to ERR000589 process data with BwaSpark. The bam file size is 1.3G. The average time spent is about 25 min (5 nodes).; However it would only cost 5 min in processing same data if I tried to use original C bwa with 32 threads.; Base on this observation, I have several questions list as follow:; 1. If there is anything wrong with my params?; 2. For each Partition, is BwaSpark running in multi-thread mode?; 3. How to control the number of the bwa threads inside BwaSpark?. P.S. ; The running command is:; ./gatk-launch BwaSpark -I hdfs:///user/XX/ERR000589/ERR000589.bam -O hdfs:///user/XX/ERR000589/ERR000589_bwa.bam -R hdfs:///user/xx/refs/ucsc.hg19.fasta --bwamemIndexImage ~/data/ref/ucsc.hg19.img -disableSequenceDictionaryValidation true -- --sparkRunner SPARK --sparkMaster <master_url> --executor-cores 1 --total-executor-cores 16 --executor-memory 4G. I tried to further adjust the following parameters,; --executor-cores --total-executor-cores --executor-memory --driver-memory; but none of these took less time than 16 min. Besides, I alsow tried to run it in local mode, while it won't end successfully. It seems that CPU was in endless waiting. I guess it occupied so much memory that the swap space is in use? Pic 1 shows the memory consumed while running ; This time, the command is:; ./gatk-launch BwaSpark -I hdfs:///user/XX/ERR000589/ERR000589.bam -O hdfs:///user/xx/ERR000589/ERR000589.bwa.bam -R /software/home/xx/data/ref/ucsc.hg19.fasta \ --bwamemIndexImage ~/data/ref/ucsc.hg19.img -disableSequenceDictionaryValidation true -- --sparkRunner SPARK --sparkMaster local[*] --total-executor-cores 8 --executor-memory 20G --driver-memory 30G. BTW, the testing environment is:; CPU 2 X 8 physical core; node: 5 ; network: GBE; memory: 64G; ![memory](https://cloud.githubusercontent.com/assets/22440517/25929003/19a38210-3632-11e7-8dfc-c18f75604de6.png); ![cpu](https://cloud.githubusercontent.com/assets/22440517/25929008/205497ac-3632-11e7-8aa9-9c459d99371d.png)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2705:1679,test,testing,1679,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2705,1,['test'],['testing']
Testability,"I tried to process data with BQSRPipelineSpark( the latest released gatk4 beta version), but the job always failed at middle of processing.; I use ERR000589, the bam file size is 1.3G.; knownSites uses dbsnp_138.hg19.vcf, and the data size is 10G.; reference is ucsc.hg19.2bit, data size is 0.8G .; it was running on spark2.0, and there are 4 worker in total. Each node has 16 physical cores and 64G data memory.; Below is my command.; ./gatk-launch BQSRPipelineSpark -I hdfs:///user/xxx/ERR000589.bwa.mark.bam -O hdfs:///user/xxx/ERR000589.bwa.marked.bqsr.bam -R hdfs:///user/liucheng/refs/ucsc.hg19.2bit --knownSites hdfs:///user/liucheng/dbsnp/dbsnp_138.hg19.vcf -- --sparkRunner SPARK --sparkMaster spark://cu11:7077 --total-executor-cores 48 --executor-cores 6 --executor-memory 25G --driver-memory 30G. The log is attached as follow:; [July 19, 2017 2:39:55 PM CST] org.broadinstitute.hellbender.tools.spark.pipelines.BQSRPipelineSpark done. Elapsed time: 3.24 minutes.; Runtime.totalMemory()=23515365376; com.esotericsoftware.kryo.KryoException: java.lang.NegativeArraySizeException; Serialization trace:; vs (org.broadinstitute.hellbender.utils.collections.IntervalsSkipListOneContig); intervals (org.broadinstitute.hellbender.utils.collections.IntervalsSkipList); 	at com.esotericsoftware.kryo.serializers.ObjectField.write(ObjectField.java:101); 	at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:518); 	at com.esotericsoftware.kryo.Kryo.writeObjectOrNull(Kryo.java:606); 	at com.esotericsoftware.kryo.serializers.MapSerializer.write(MapSerializer.java:109); 	at com.esotericsoftware.kryo.serializers.MapSerializer.write(MapSerializer.java:39); 	at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:552); 	at com.esotericsoftware.kryo.serializers.ObjectField.write(ObjectField.java:80); 	at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:518); 	at com.esotericsoftware.kryo.Kryo.writeClassAndObject(Kryo.java:628); 	at o",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3303:813,log,log,813,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3303,1,['log'],['log']
Testability,"I tried to run VariantRecalibrator using the args echoed from an integration test and found that the resource files weren't listed properly. The command in the test was ` "" --resource known,known=true,prior=10.0:"" + getLargeVQSRTestDataDir() + ""dbsnp_132_b37.leftAligned.20.1M-10M.vcf""` and what came out of the engine was `--resource known:/Users/gauthier/workspaces/gatk/src/test/resources/large/VQSR/dbsnp_132_b37.leftAligned.20.1M-10M.vcf`, so it lost the known=true and the prior which makes the command line unrunnable. Probably affects #2269 too. This behavior can be replicated by running any of the VariantRecalibration integration tests and checking the console output.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3247:77,test,test,77,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3247,4,['test'],"['test', 'tests']"
Testability,"I tried to run the whole test suite with `./gradlew clean test`, and several tests are failing with `org.broadinstitute.hellbender.exceptions.UserException$HardwareFeatureException: Machine does not support AVX PairHMM`:. * `HaplotypeCallerIntegrationTest`; * `HaplotypeCallerSparkIntegrationTest`; * `ReadsPipelineSparkIntegrationTest`. Because there are already several tests skipped if the support is not present (e.g., `VectorPairHMMUnitTest`), I expect that the tests do not fail and are skipped instead. I understand that maybe it is important to keep them failing with the GKL implementation for integration, but maybe a setting a flag to force them to do not be skipped would be enough in the travis build to check that nothing is broken, and still do not be scare if lots of tests fail after an unrelated change in a non-AVX machine...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3732:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3732,6,['test'],"['test', 'tests']"
Testability,"I use PreprocessIntervals to convert my bed,but noo output of chrY data was found,the output is empty. example : my bed data; ; ![image](https://github.com/user-attachments/assets/416a31dd-1e71-4b0a-9dd1-357364120288). my command : . **gatk PreprocessIntervals -L test.bed -R Homo_sapiens_assembly38.fasta --bin-length 0 --interval-merging-rule OVERLAPPING_ONLY -O test.interval_list** . Why is this happening, is there something unusual in this ChrY area?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8945:264,test,test,264,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8945,2,['test'],['test']
Testability,"I used newly GATK4.1 version, and my scripts are:. java -Xmx300g -jar $GATK Mutect2 \; --dont-use-soft-clipped-bases true \; --tmp-dir $cw/$i/tmp \; --input $DNAbam/ADAR16-DNA-2_NKD180600323/ADAR16-DNA-2_NKD180600323.best.uniq.pair.sort.markdup.bam \; --input $RNAbam/$i/$i.merge.markdup.reheader.bam \; --reference $genome\; --output $cw/$i/$i.dna.rna.vcf \; --normal-sample ADAR16-DNA-2_NKD180600323 \; --tumor-sample $i \; -bamout $cw/$i/$i.support.bam. and tail of error log are:. 12:05:06.287 INFO ProgressMeter - scaffold23905:111448 948.1 636040 670.9; 12:05:30.519 INFO ProgressMeter - scaffold23905:133852 948.5 636120 670.7; 12:05:57.277 INFO ProgressMeter - scaffold23905:147186 949.0 636170 670.4; 12:24:34.669 INFO PairHMM - Total compute time in PairHMM computeLogLikelihoods() : 31261.455155273; 12:24:34.670 INFO SmithWatermanAligner - Total compute time in java Smith-Waterman : 14618.28 sec; INFO	2019-04-13 12:45:11	SortingCollection	Creating merging iterator from 2 files; 13:30:49.708 INFO Mutect2 - Shutting down engine; [April 13, 2019 1:30:49 PM CST] org.broadinstitute.hellbender.tools.walkers.mutect.Mutect2 done. Elapsed time: 1,035.35 minutes.; Runtime.totalMemory()=238653800448; Exception in thread ""main"" java.lang.OutOfMemoryError: Java heap space; 	at java.util.Arrays.copyOf(Arrays.java:3332); 	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:137); 	at java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:121); 	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:421); 	at java.lang.StringBuilder.append(StringBuilder.java:136); 	at htsjdk.samtools.SAMTextHeaderCodec.advanceLine(SAMTextHeaderCodec.java:142); 	at htsjdk.samtools.SAMTextHeaderCodec.decode(SAMTextHeaderCodec.java:97); 	at htsjdk.samtools.reference.ReferenceSequenceFileFactory.loadDictionary(ReferenceSequenceFileFactory.java:235); 	at htsjdk.samtools.reference.AbstractFastaSequenceFile.(AbstractFastaSequenceFile.java:68)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5900:475,log,log,475,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5900,1,['log'],['log']
Testability,"I was able to replicate the users error with GATK4.1.1.0 and the latest build on Nov21. The users data is on the FTP as livinlrg_Problem_Interval. . Running SelectVariants on the same data generates the same error as GenomicsDBImport. ```; /home/tools/gatk/gatk SelectVariants --java-options ""-Xmx20g"" -R /home/test/livinlrg_Problem_Interval/Reference/sacCer3_2micron.fasta -V gendb:///home/test/livinlrg_Problem_Interval/GenomicsDB_ProblemInterval_Test -O /home/test/livinlrg_Problem_Interval/work_dir/selectvariantsout.vcf. WARNING: No valid combination operation found for INFO field MLEAF - the field will NOT be part of INFO fields in the generated VCF records; 14:28:46.814 INFO ProgressMeter - chrI:2000 0.2 2000 10258.2; 14:29:00.359 INFO ProgressMeter - chrI:6003 0.4 6000 14261.4; 14:29:28.258 INFO SelectVariants - Shutting down engine; GENOMICSDB_TIMER,GenomicsDB iterator next() timer,Wall-clock time(s),37.44650732699998,Cpu time(s),37.414083634000015; [November 21, 2019 2:29:29 PM UTC] org.broadinstitute.hellbender.tools.walkers.variantutils.SelectVariants done. Elapsed time: 0.92 minutes.; Runtime.totalMemory()=1783103488; htsjdk.tribble.TribbleException: Invalid block size -1539959833; at htsjdk.variant.bcf2.BCF2Decoder.readNextBlock(BCF2Decoder.java:66); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:134); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:58); at org.genomicsdb.reader.GenomicsDBFeatureIterator.next(GenomicsDBFeatureIterator.java:181); at org.genomicsdb.reader.GenomicsDBFeatureIterator.next(GenomicsDBFeatureIterator.java:49); at java.util.Iterator.forEachRemaining(Iterator.java:116); at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801); at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:482); at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:472); at java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150); at java.util.stream.ForEachOps$F",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6275:311,test,test,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6275,3,['test'],['test']
Testability,"I was running this cmd : ; I get : java -jar /Users/mac/Downloads/picard-2.jar AddOrReplaceReadGroups I=/Users/mac/Desktop/NGS-/SRR6369642-pe.bam O=/Users/mac/Desktop/NGS-/SRR6369642-pe-RG.bam RGID=C7BDWACXX.5 RGLB=Lmj_A445_EP+3.2run1 RGPL=Illumina RGPU=C7BDWACXX.5 RGSM=NO8162944. record positions. Printing Read-names as well.; #; # A fatal error has been detected by the Java Runtime Environment:; #; # SIGSEGV (0xb) at pc=0x000000010d32bea7, pid=1681, tid=6403; #; # JRE version: Java(TM) SE Runtime Environment (8.0_65-b17) (build 1.8.0_65-b17); # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.65-b01 mixed mode bsd-amd64 compressed oops); # Problematic frame:; # C [libgkl_compression7875913179822684367.dylib+0x6ea7] deflate_medium+0x867; #; # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try ""ulimit -c unlimited"" before starting Java again; #; # An error report file with more information is saved as:; # /Users/mac/Desktop/NGS-/hs_err_pid1681.log; #; # If you would like to submit a bug report, please visit:; # http://bugreport.java.com/bugreport/crash.jsp; # The crash happened outside the Java Virtual Machine in native code.; # See problematic frame for where to report the bug.; #; Abort trap: 6. how can I fix it",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6796:991,log,log,991,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6796,1,['log'],['log']
Testability,I was testing the latest beta.6 release and ran into an issue that HaplotypeCallerSpark no longer outputs bgzipped VCF outputs. Specifying `--output outfile.vcf.gz` produces a plain unzipped VCF. This worked in the beta.5 release so appears to be due to recent changes. Here is a small self-contained test case that reproduces the issue:. https://s3.amazonaws.com/chapmanb/testcases/gatk/gatk4_spark_output.tar.gz. Please let me know if I can provide anything else that would help. Thanks as always for all the improvements and work on GATK.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3725:6,test,testing,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3725,3,['test'],"['test', 'testcases', 'testing']"
Testability,"I'm almost certain this used to work. ```; ./bin/gatk/gatk-launch FlagStatSpark -I file:///local/dev/akiezun/bin/gatk/src/test/resources/org/broadinstitute/hellbender/tools/valid.bam -- --sparkRunner SPARK --sparkMaster yarn-client; ```. the error is . ```; java.lang.IllegalArgumentException: Wrong FS: file:/local/dev/akiezun/bin/gatk/src/test/resources/org/broadinstitute/hellbender/tools/valid.bam, expected: hdfs://dataflow01.broadinstitute.org:8020; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:654); at org.apache.hadoop.fs.FileSystem.makeQualified(FileSystem.java:474); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:181); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReads(GATKSparkTool.java:284); ```. It's fine when running a LOCAL runner, or when the file is on HDFS. . When resolving the ticket, make sure to devise a way (or at least enter a ticket) to prevent this from happening again - ie some way to discover this kind of problem.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1417:122,test,test,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1417,2,['test'],['test']
Testability,"I'm missing the possibility of tuning the logging to produce TRACE level log messages. As it is stands the users only can choose down to DEBUG. . It seems that this is due to the integration of several logging systems from old GATK, htjsdk and picard where DEBUG the lowest common level. . It would be great to have the ability to produce TRACE level log messages allowing the user to have control on whether these are output or not. . In this case DEBUG log messages that are going to be produced in big numbers should be TRACE whereas unfrequent (one very 5 second or more) would stay as DEBUG.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6378:42,log,logging,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6378,5,['log'],"['log', 'logging']"
Testability,I'm running in intermittent issues when running HaplotypeCallerSpark with GATK 4.0.3.0 and was hoping to generate ideas to debug further. The underlying error is an index error when calculating likelihoods:; ```; java.lang.ArrayIndexOutOfBoundsException: 4; 	at org.broadinstitute.hellbender.tools.walkers.genotyper.GenotypeLikelihoodCalculators.calculateGenotypeCountUsingTables(GenotypeLikelihoodCalculators.java:388); ```; I've been unable to generate a reproducible test case. Re-running on the same machine (Amazon m4.4xlarge instances with 16 cores and 64Gb of memory) works. I've seen the error on two different datasets but it happens infrequently as I've also run hundreds using the same setup without any exceptions. The only other thing I spot when looking through the traceback is block issues about the RDDs but I'm not sure if these are a symptom of the failure or a cause:; ```; 18/04/15 03:55:19 WARN BlockManager: Putting block rdd_18_12 failed due to an exception; 18/04/15 03:55:19 WARN BlockManager: Block rdd_18_12 could not be removed as it was not found on disk or in memory; ```; Here's the full traceback of the failure:; ```; [2018-04-15T03:55Z] ip-10-0-0-57: 18/04/15 03:55:19 WARN BlockManager: Putting block rdd_18_12 failed due to an exception; [2018-04-15T03:55Z] ip-10-0-0-57: 18/04/15 03:55:19 WARN BlockManager: Block rdd_18_12 could not be removed as it was not found on disk or in memory; [2018-04-15T03:55Z] ip-10-0-0-57: 18/04/15 03:55:19 ERROR Executor: Exception in task 12.0 in stage 7.0 (TID 828); [2018-04-15T03:55Z] ip-10-0-0-57: java.lang.ArrayIndexOutOfBoundsException: 4; [2018-04-15T03:55Z] ip-10-0-0-57: 	at org.broadinstitute.hellbender.tools.walkers.genotyper.GenotypeLikelihoodCalculators.calculateGenotypeCountUsingTables(GenotypeLikelihoodCalculators.java:388); [2018-04-15T03:55Z] ip-10-0-0-57: 	at org.broadinstitute.hellbender.tools.walkers.genotyper.GenotypeLikelihoodCalculators.getInstance(GenotypeLikelihoodCalculators.java:263); [2018-04-1,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4661:470,test,test,470,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4661,1,['test'],['test']
Testability,"I'm running into an issue with the latest MuTect2 (also it also goes back as far as beta4, I haven't tested prior to that), where triploid calls get produced. Here's an example output where the normal is diploid `0/0` and the tumor is triploid `0/1/2`:; ```; #CHROM POS ID REF ALT QUAL FILTER INFO FORMAT control_downsample tumor_downsample; 1 725556 . A G,AGAATAGAATGGAATAGAAAGGAATG . . DP=460;ECNT=3;NLOD=54.98,46.06;N_ART_LOD=2.72,8.00;POP_AF=1.000e-03,1.000e-03;P_GERMLINE=-5.185e+01,-4.276e+01;TLOD=6.33,19.76 GT:AD:AF:F1R2:F2R1:MBQ:MFRL:MMQ:MPOS:SA_MAP_AF:SA_POST_PROB 0/0:205,6,4:0.020,0.044:101,4,0:104,2,4:34,0:415,467,130:40,25:4,0 0/1/2:209,9,8:0.035,0.047:108,7,4:101,2,4:34,0:404,485,137:28,42:2,0:0.030,0.030,0.035:3.983e-03,5.306e-03,0.991; ```; This happens both if I explictly specify `--ploidy 2` or leave it at the default. Here is a reproducible test case:. wget https://s3.amazonaws.com/chapmanb/testcases/gatk4_mutect2_triploid.tar.gz. You can unpack, edit `REF` in `run_mutect2.sh` to point at a GRCh37 reference, and run to demonstrate the issue. This happens pretty regularly in the outputs, although it is very sensitive to the size of the reference regions. If you decrease the end point in `regions.bed` you'll get diploid calls again. Thanks for the help and please let me know if I can provide any other information.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3564:101,test,tested,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3564,3,['test'],"['test', 'testcases', 'tested']"
Testability,I'm sick of scrolling to the bottom to find the test report uri.; This saves the pain of having to scroll all the way down.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3892:48,test,test,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3892,1,['test'],['test']
Testability,"I'm using GATK4 as a framework to implement my own tools, and it will be nice to have a way of perform integration tests using `IntegrationTestSpec`. Nevertheless, it requires the extension of the `CommandLineProgramTest` to run the command, and thus it is extending `BaseTest`. The issues that this infrastructure generates when trying to use this test classes are the following:; - `BaseTest` loading of `GenomeLocParser` is annotated with `@BeforeClass`, which throws an error because the reference genome (hg19MiniReference) is not present in the repository.; - `CommandLineProgramTest` is using `org.broadinstitute.hellbender.Main` for running the commands, but for custom tools the instanceMain with a different list of packages. Although this could be solved by extending the class by another abstract class. I propose (and I can implemented if you agree) the following:; - `CommandLineProgramTest` not implementing `BaseTest`.; - `CommandLineProgramTest` as a real abstract class without implementations of `getTestDataDir()` or `runCommandLine()`; - Abstract `GATKCommandLineProgramTest` extending both `CommandLineProgramTest` and `BaseTest`, sited in `org.broadinstitute.hellbender.utils.test` and used in all integrations tests in this repository and the protected repository.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2033:115,test,tests,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2033,4,['test'],"['test', 'tests']"
Testability,"I'm using HaplotypeCaller (`gatk-package-4.beta.5`) to analyse the control medulloblastoma sample from the ICGC benchmark https://www.nature.com/articles/ncomms10001. Reads are aligned to `GRCh37` (from the Broad bundle, without decoy sequences) using `bwa mem`. Analysis is performed within the [bcbio-nextgen](https://github.com/chapmanb/bcbio-nextgen), which splits input into chunks by chromosome for parallelisation. For some reason, the chunk corresponding to the chromosome `GL000216.1` makes HaplotypeCaller crash with the error `IllegalArgumentException: contig must be non-null and not equal to *, and start must be >= 1`. I isolated the `gatk-launch` command, and narrowed down the reproducible example to these 2 reads:; ```; H239:179:C1K3VACXX:8:2116:11771:72429 161 GL000216.1 19 23 70S31M 4 49141708 0 ATTCCCTTACATTCGGATTGATACTATTAAAATCACTTACTCTTCCTTACATTCCATTCCATCCGGGCTGTTCCATTTCATTCTATTACACTCCACTCAAT ?1:=D>?B?CC:?A,<C;:AEGC<+AC+++2+:3*1:*11999*:099?<?0?99BBG*9?D*?##################################### NM:i:2 MD:Z:25T2C2 AS:i:25 XS:i:20 RG:Z:MB_normal_50x MQ:i:0 ms:i:1911 mc:i:49141802 MC:Z:11S30M5D60M; HWI-7001436:66:C3FYFACXX:5:1216:4411:82080 65 GL000216.1 27 57 101M 9 72653232 0 CATTCTATTACACTCCATTCCATTTCTATCCATTCCATTCCATTCTATTCCATTCCACTTGGGTCGATTCAATTCCATTCCATTCTATCCCTTCCATTCCA CCCFFFFFHHHHHJJJJJIJJJJJJIJJJJHIJJJJJJJJJJJJJJJJJJJJJJJJJIJIJIJGGIJIJJJJJJJJJJJJJJJJJJGJHHHHHHFFFFFFD NM:i:7 MD:Z:24C2T14A16C1T21C4T12 AS:i:66 XS:i:36 RG:Z:MB_normal_50x MQ:i:0 ms:i:3858 mc:i:72653218 MC:Z:14S45M1D33M9; ```; And one nucleotide target region:; ```; GL000216.1 87 88; ```. These BAM and BED files are attached here: [GL000216.1_87_gatk_debug.zip](https://github.com/broadinstitute/gatk/files/1477532/GL000216.1_87_gatk_debug.zip). Running command below:; ```; gatk-launch HaplotypeCaller \; -R /data/projects/punim0010/local/share/bcbio/genomes/Hsapiens/GRCh37/seq/GRCh37.fa \ ; -I GL000216.1_start_49__read_84_88.bam \; -L GL000216.1_87-88.bed \; --output out.vcf.gz; ```. Gives",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3845:112,benchmark,benchmark,112,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3845,1,['benchmark'],['benchmark']
Testability,"I'm using the `ReadLikelihoods` in a test and I'm setting the likelihoods to negative values. Nevertheless, when I'm trying to get the best alleles for each read using the `bestAlleles()` method, it turns out to return the allele where I haven't set any likelihood (by default, 0). I think that the bug is in the private method [`searchBestAllele`](https://github.com/broadinstitute/gatk/blob/master/src/main/java/org/broadinstitute/hellbender/utils/genotyper/ReadLikelihoods.java#L438), were if the candidate likelihood is __bigger than__ the best likelihood, the best allele is updated. I apologize in advance if this is not a bug, but I would like to know if I should use negative likelihoods as in the removed `PerReadAlleleLikelihoodMap`, or positive ones, as suggest the current implementation for getting the best alleles. Thank you in advance.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2311:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2311,1,['test'],['test']
Testability,I'm using:. ```; gatk-launch CreatePanelOfNormals \; -I combinedcoverage_C.tsv \; -O ponC.pon \; ```; With or without `--disableSpark`. The stdout logging is super verbose when using Spark. Changing with `--verbosity` does not allow for a summary level stdout that I can get with `--disableSpark`. . @samuelklee notes that many of the Spark tools are very verbose. Is there a reason why we need the Spark mode to be so verbose @droazen @lbergelson?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3231:147,log,logging,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3231,1,['log'],['logging']
Testability,"I'm wondering if you have a recommended way of detecting misencoded base quality reads. If I run FixMisencodedBaseQualityReads, I do get a USER ERROR message that I could possibly detect by checking the logs, but I would rather use another tool to check for the error in a script, or store an emitted value from the tool to check for the error. As far as I can tell, I don't see such a tool or value. I have tried the following in a bash commandline interface:; ```; acesnik@DESKTOP$ var=$(gatk FixMisencodedBaseQualityReads -I input.bam -O output.bam); acesnik@DESKTOP$ echo $var # this echos nothing, indicating there's no emitted value; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4242:203,log,logs,203,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4242,1,['log'],['logs']
Testability,I've added an `IntervalArgumentsCollection` which includes all of the interval related arguments. ; It and `SpecialArguments` implement a new marker interface `ArgumentCollectionDefinition`. . ReadWalker has been modified to respect intervals.; Tests for this are in CountReadsTest . This should close #98,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/164:245,Test,Tests,245,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/164,1,['Test'],['Tests']
Testability,I've added some doc and tests for what we can test in ReadSource. ; @droazen Please review,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/480:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/480,2,['test'],"['test', 'tests']"
Testability,"I've extracted this change to ReferenceConfidenceModel from the now-closed PR; https://github.com/broadinstitute/gatk-protected/pull/1022, since it causes tests; to fail spectacularly (including concordance tests against GATK3), so that we can; unblock the badly-needed merge of https://github.com/broadinstitute/gatk-protected/pull/1027. Let's review and test this change in isolation to be sure we understand it fully; before accepting it into master.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2807:155,test,tests,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2807,3,['test'],"['test', 'tests']"
Testability,"I've had ConcurrentModificationExceptions several times when mocked ReferenceMultiSource objects are both mocked and broadcast ([for example](https://travis-ci.org/broadinstitute/gatk/jobs/275982454)). Mocks appear to be mutated, even when the mocked object is immutable, so serialization can fail. This replaces the mock object with a faked one.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3586:61,mock,mocked,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3586,5,"['Mock', 'mock']","['Mocks', 'mock', 'mocked']"
Testability,"I've had several Travis test failures (on my picard removal branch) that appear to be failures during kryo serialization of a mocked ReferenceMultiSource object (based on the failing class name, (org.broadinstitute.hellbender.engine.datasources.ReferenceMultiSource$$EnhancerByMockitoWithCGLIB$$b0dc631f, which looks like the CGLIB names mentioned [here](https://github.com/mockito/mockito/issues/319)). We're on an ancient version of mockito anyway, and newer versions no longer use cglib, so it seemed like a good time to upgrade. To do so I also had to replace usage of the method getArgumentAt, which has been [deprecated](https://github.com/mockito/mockito/pull/373) in favor of getArgument.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3581:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3581,7,"['mock', 'test']","['mocked', 'mockito', 'test']"
Testability,"I've run into an error using a certain BAM file I created for testing. Possibly relevant: I also tried running it through PrintReads - all reads were filtered out by the WellFormedReadFilter because they do not have read groups or base qualities. [test_pathseq_unmapped.bam.zip](https://github.com/broadinstitute/gatk/files/537153/test_pathseq_unmapped.bam.zip). > > ./gatk-launch PrintReadsSpark -I ~/Work/gatk/tests/test_pathseq_unmapped.bam -O ~/Work/gatk/tests/test_pathseq_unmapped.output.bam; > > Using GATK wrapper script /Users/markw/IdeaProjects/gatk/build/install/gatk/bin/gatk; > > Running:; > > /Users/markw/IdeaProjects/gatk/build/install/gatk/bin/gatk PrintReadsSpark -I /Users/markw/Work/gatk/tests/test_pathseq_unmapped.bam -O /Users/markw/Work/gatk/tests/test_pathseq_unmapped.output.bam; > > 15:10:22.765 INFO IntelGKLUtils - Trying to load Intel GKL library from:; > > jar:file:/Users/markw/IdeaProjects/gatk/build/install/gatk/lib/gkl-0.1.2.jar!/com/intel/gkl/native/libIntelGKL.dylib; > > 15:10:22.790 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; > > [October 18, 2016 3:10:22 PM EDT] org.broadinstitute.hellbender.tools.spark.pipelines.PrintReadsSpark --output /Users/markw/Work/gatk/tests/test_pathseq_unmapped.output.bam --input /Users/markw/Work/gatk/tests/test_pathseq_unmapped.bam --readValidationStringency SILENT --interval_set_rule UNION --interval_padding 0 --interval_exclusion_padding 0 --bamPartitionSize 0 --disableSequenceDictionaryValidation false --shardedOutput false --numReducers 0 --sparkMaster local[*] --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false --disableAllReadFilters false; > > [October 18, 2016 3:10:22 PM EDT] Executing as markw@WMC9F-819 on Mac OS X 10.11.6 x86_64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_91-b14; Version: Version:4.alpha.1-318-gcdc484c-SNAPSHOT; > > 15:10:22.793 INFO PrintReadsSpark - Defaults.BUFFER_SIZE : 131072; > > 15:10:22.793 INFO PrintReadsSpark - Defaults.COMPRESS",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2219:62,test,testing,62,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2219,5,['test'],"['testing', 'tests']"
Testability,"I've seen this a few times on two different Mac laptops (both with 16G), primarily while running the IntelInflaterDeflaterIntegrationTest from within IntelliJ, but a couple of times I've seen it while running the full test suite from gradle. I saw these while trying to narrow down https://github.com/broadinstitute/gatk/issues/2490 - its probably related. This one happened while several times when running just the IntelInflaterDeflaterIntegrationTest from (on one of the PrintReads tests) from within IntelliJ:. [TestNG] Running:; /Users/cnorman/Library/Caches/IntelliJIdea2016.3/temp-testng-customsuite.xml; java(79316,0x700000d3b000) malloc: *** error for object 0x7f9543bf1000: pointer being freed was not allocated; *** set a breakpoint in malloc_error_break to debug; Process finished with exit code 134 (interrupted by signal 6: SIGABRT). This one happened while running the full gatk test suite from gradle (note that this one appears to occur during VariantsSparkSinkUnitTest, but in this case the IntelInflaterDeflaterIntegrationTest was the test that had been run immediately previously):. Gradle suite > Gradle test > org.broadinstitute.hellbender.engine.spark.datasources.VariantsSparkSinkUnitTest.testWritingToFileURL[0](/Users/cmn/projects/hellbender/src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf, .vcf) STANDARD_OUT; 23:02 DEBUG: [kryo] Write: SerializableConfiguration; java(51936,0x119471000) malloc: *** error for object 0x7fd0b7a1d600: pointer being freed was not allocated; *** set a breakpoint in malloc_error_break to debug; Results: SUCCESS (0 tests, 0 successes, 0 failures, 0 skipped)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2535:218,test,test,218,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2535,10,"['Test', 'test']","['TestNG', 'test', 'testWritingToFileURL', 'testng-customsuite', 'tests']"
Testability,I've updated the image and it seems to be working locally. Now for the true test...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8228:76,test,test,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8228,1,['test'],['test']
Testability,IGNORE: test issue,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8,1,['test'],['test']
Testability,IOUtils.unzipToFolder test missinbg,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7956:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7956,1,['test'],['test']
Testability,"If I run BaseRecalibrator on a reference with contigs [20,21] and knownSites only has only sites from 17, then GATK3 blows up:. ```; ##### ERROR MESSAGE: Input files knownSites and reference have incompatible contigs: No overlapping contigs found.; ##### ERROR knownSites contigs = [17]; ##### ERROR reference contigs = [20, 21]; ```. but gatk4 does not (and it should). This is the cause of the bogus tests in #1017 (they should have never been allowed to exist). The commandline for GATK3 is; (the VCF has no sequence dictionary). ```; -T BaseRecalibrator -R src/test/resources/large/human_g1k_v37.20.21.fasta -I src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.bam --out gatk3.3.recal.txt --knownSites src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b37.excluding_sites_after_129.chr17_69k_70k.vcf; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1029:402,test,tests,402,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1029,4,['test'],"['test', 'tests']"
Testability,"If a `VariantWalker` driving variant is indexed with tribble but does not have an sequence dictionary in the header, the dictionary is loaded from the index. Nevertheless, this is a truncated dictionary because the end coordinate for each chromosome is the last variant in that contig. Thus, even if a proper interval for the genome is provided (regarding the reference sequence), the program throw an user error exception. This could be reproduced with the following test in `ExampleVariantWalkerIntegrationTest`:. ``` java; @Test; public void testExampleVariantWalkerInvalidDictionary() throws IOException {; final IntegrationTestSpec testSpec = new IntegrationTestSpec(; "" -L 1:200-1125"" +; "" -R "" + hg19MiniReference +; "" -I "" + TEST_DATA_DIRECTORY + ""reads_data_source_test1.bam"" +; "" -V "" + TEST_DATA_DIRECTORY + ""example_variants.vcf"" +; "" -auxiliaryVariants "" + TEST_DATA_DIRECTORY + ""feature_data_source_test.vcf"" +; "" -O %s"", Arrays.asList(TEST_OUTPUT_DIRECTORY + ""expected_ExampleVariantWalkerIntegrationTest_output.txt""));; testSpec.executeTest(""testExampleVariantWalker_UndefinedContigLengthsInDictionary"", this);; }; ```. The thrown exceptions is the following:. ``` java; java.lang.RuntimeException: org.broadinstitute.hellbender.exceptions.UserException$MalformedGenomeLoc: A USER ERROR has occurred: Badly formed genome loc: Failed to parse Genome Location string: 1:200-1125; ```. This comes from the overrided method `VariantWalker.getBestAvailableSequenceDictionary()`, which prefers the one from the driving variant (in this case, the one which comes from the index), not using the one from the reference/reads if available.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2081:468,test,test,468,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2081,5,"['Test', 'test']","['Test', 'test', 'testExampleVariantWalkerInvalidDictionary', 'testSpec']"
Testability,"If a core dump is produced while running tests on travis, this will echo the log file to the travis log (ie., it was triggered [here](https://api.travis-ci.com/v3/job/468677651/log.txt) by the pair hmm seg fault) so the java and native thread stacks can be inspected.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7020:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7020,4,"['log', 'test']","['log', 'tests']"
Testability,"If there are overlapping (e.g. a long SNV overlapping an INDEL) or multi-allelic germline variants, Mutect2 will check only the AF of the first variant/allele when searching for germline sites to exclude during active region detection. This PR updates the logic to iterate through all germline alleles.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7468:256,log,logic,256,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7468,1,['log'],['logic']
Testability,"If you look at the approximation going from equation 34 to 35 in https://github.com/broadinstitute/gatk/blob/master/docs/mutect/mutect.pdf you will find that we replace f(1 - e) + (1 - f)e by just f(1 - e), where f is the allele fraction and e is the error rate. When f is much bigger than e this is okay but when they are comparable (consider mitochondrial or cfDNA calling with f = 1% and base qualities of 25) the approximation breaks down and we significantly underestimate the log odds, thereby failing to consider a region active. This must be fixed!. @meganshand",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4816:482,log,log,482,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4816,1,['log'],['log']
Testability,"If you run AlignAssembledContigsSpark with an incorrect BWA index version (ie. one that was generated with BWA index 0.7.12 or previous), you get executor logs that trace back to an ""IOException: File system is closed"" error, which is very misleading. I believe that this happens because Spark retries the tasks multiple times after they have failed, and in the subsequent tries the filesystem is in a bad state. It would be nice if we could either catch this error earlier, or check to make sure that the reference is compatible before trying to load it somehow.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2123:155,log,logs,155,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2123,1,['log'],['logs']
Testability,"If you run this on position 20:10022820 in `src/test/resources/large/mutect/dream_synthetic_bams/tumor.bam` you will get the wrong alt (you get C, but should be T). . Proposed solution: Use findLast() (or reverse b1 and b2 in the compare statement to get this to sort in descending order). ```; private static Nucleotide inferAltFromPileupBaseCounts(final Nucleotide.Counter baseCounts,; final Nucleotide refNucleotide) {; return BASES.stream(); .filter(b -> b != refNucleotide); .sorted((b1, b2) -> Long.compare(baseCounts.get(b1), baseCounts.get(b2))); .findFirst().get();; }; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3548:48,test,test,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3548,1,['test'],['test']
Testability,"If you train a VQSR model on a subset of the variants under consideration and serialize it, then provide it via `--input-model` to subsequent VQSR runs on sets of variants including those other than in the original training subset (the only use case for which you'd bother serializing a model in the first place, probably), this will result in variants in those subsequent sets being incorrectly labeled as `NEGATIVE_TRAINING_SITE`. The culprit lines of code are: https://github.com/broadinstitute/gatk/blob/5b8736715724d6ba7994613acbc37e1bf187f538/src/main/java/org/broadinstitute/hellbender/tools/walkers/vqsr/VariantRecalibrator.java#L644-L650. Instead, only those negative training sites taken from the original subset and used to generate the serialized negative model should be labeled as such. Note also that we needlessly select the worst scoring variants here, which leads to the bad behavior as well as a misleading log message. There is also some residual funkiness from the fact that we require the specification of the number of training variants in order to construct a GMM from a serialized model, which is a result of further funkiness from the fact that we require the size of the array of responsibilities to be initialized using this number. Unfortunately, I don't think there's an easy fix, since we don't actually pass either the correct positive/negative training labels (in the recal table generated by the original run) or the necessary information to reconstruct them otherwise (e.g., we could repeat the VQSLOD calculations, given the original training subset sites and VQSLOD cutoffs used to originally derive the negative labels) to these subsequent runs. (Unless we actually want to pass those things, which seems messy.). Note also that the `POSITIVE_TRAIN_SITE` label is still applied to sites that get dropped because of standard deviation thresholding and are hence not used to train the positive GMM, which seems slightly inconsistent (since the `NEGATIVE_TRAIN_SITE`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7630:926,log,log,926,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7630,1,['log'],['log']
Testability,Ignore spanning deletions in Rank Sum tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2059:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2059,2,['test'],['tests']
Testability,"Ignore this ticket, testing function of new app<br><br><i>(created from <a href='https://broadinstitute.zendesk.com/agent/tickets/4212'>Zendesk ticket #4212</a>)<br>gz#4212</i>",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6353:20,test,testing,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6353,1,['test'],['testing']
Testability,Ignoring test classes when counting coverage,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5565:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5565,1,['test'],['test']
Testability,IlluminaBasecallsConverter used multiple threads which has already led to sporadically failing tests (issie #364) Multithreading needs to be removed from Hellbender.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/378:95,test,tests,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/378,1,['test'],['tests']
Testability,ImmutableComputableGraph code improvement + unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3034:49,test,tests,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3034,1,['test'],['tests']
Testability,ImmutableComputableGraph code improvement + unit tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3035:49,test,tests,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3035,1,['test'],['tests']
Testability,Impl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorIm,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2646,test,testng,2646,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['test'],['testng']
Testability,Implement PathSeqBwaSpark tool and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3113:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3113,1,['test'],['tests']
Testability,Implement PathSeqScoreSpark tool and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3114:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3114,1,['test'],['tests']
Testability,Implement Spark correctness tests on gatk-jenkins separate from performance tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2288:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2288,2,['test'],['tests']
Testability,Implement WDL test data generation for tools with mutex args.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6805:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6805,1,['test'],['test']
Testability,Implement a test that catches failures to register new annotations in GATKVCFHeaderLines,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1713:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1713,1,['test'],['test']
Testability,Implement additional dataproc-based tests on travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4168:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4168,1,['test'],['tests']
Testability,Implement at least one good roundtrip test bam -> cram -> bam in htsjdk,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1661:38,test,test,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1661,1,['test'],['test']
Testability,Implement automated performance benchmarks (in Jenkins or similar),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5261:32,benchmark,benchmarks,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5261,1,['benchmark'],['benchmarks']
Testability,"Implement bi-directional conversion utilities between fasta and 2bit formats, and test on-the-fly conversion as a solution to the ""multi-reference"" issue in ReadsPipelineSpark",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2074:82,test,test,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2074,1,['test'],['test']
Testability,Implement comprehensive tests for Spark inputs/outputs (all supported combinations),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5637:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5637,1,['test'],['tests']
Testability,Implement good tests for GCS NIO support in ReadWalkers,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2406:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2406,1,['test'],['tests']
Testability,Implement long-running regression tests for variant-calling tools (including automated plotting of results over time),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4630:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4630,1,['test'],['tests']
Testability,Implement short-running dataproc regression tests on travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2298:44,test,tests,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2298,1,['test'],['tests']
Testability,Implement tests for new GenomicsDB support for non-diploid genotypes and phasing information,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3609:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3609,1,['test'],['tests']
Testability,Implement unit tests for PairHMM in gatk-native-bindings,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2030:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2030,1,['test'],['tests']
Testability,"Implemented CombineRawData() and GenerateRawData() methods from GATK3 in all Allele Specific annotations and added tests designed to mimic the existing CombineGVCFs integration tests in GATK3 by asserting the combined output matches that of GATK3. This could still use more substantial tests for finalizeRawAnnotations and AnnotateRawData. Additionally, I would like to ask for advice as to how I should go about further implementing tests for the annotation classes. . Fixes #1893; Fixes #3535",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3527:115,test,tests,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3527,5,"['assert', 'test']","['asserting', 'tests']"
Testability,Implemented VCF ID for VCF data sources. - Now VCF data sources create an ID field for the ID of the variant; used for the annotation. - Updated the regression test suite with a VCF data source to increase; test coverage. Fixes #5186,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5327:160,test,test,160,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5327,2,['test'],['test']
Testability,Implemented getExecutorCores() and getMemoryPerCore() to command line tools and added sensible local tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1947:101,test,tests,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1947,1,['test'],['tests']
Testability,"Implements #1552 . When the StrandAlleleCountsBySample (SAC) annotation is present in VCFs, allele subsetting by SelectVariants will now update this field in the final VCF. **Summary of changes**; - `SelectVariants.subsetRecord()` uses the updated `GATKVariantContextUtils.updatePLsSACsAD()`, which contains the machinery to subset SAC by the used alleles.; - Added unit and integration tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1852:387,test,tests,387,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1852,1,['test'],['tests']
Testability,Implements #2059.; Ignore loci inside spanning deletions in Rank Sum tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2104:69,test,tests,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2104,1,['test'],['tests']
Testability,"Implements #2193.; This is a port of https://github.com/broadinstitute/gsa-unstable/pull/1417. Unit tests were added since the GATK3 version was tested with GenotypeGVCFs, which is in `gatk-protected`. There is a new internal class, `GenomeLocation` is used instead of `GenomeLoc` to store the deletions. This is because `GenomeLocParser`, which is used to create `GenomeLoc` is not passed into `GenotypingEngine` in GATK4. I could not find a clean way to add it.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2326:100,test,tests,100,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2326,2,['test'],"['tested', 'tests']"
Testability,Implements #2430.; Made the exception message informative.; Created a test where the input covariates table file has a read group in the quality score (RecalTable1) or covariates (RecalTable2) report that is not in read group report (RecalTable0).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2431:70,test,test,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2431,1,['test'],['test']
Testability,"Implements allele collapsing for ""breakend replacement"" BND alleles, as described in section 5.4 of the [VCFv4.2 spec](https://samtools.github.io/hts-specs/VCFv4.2.pdf). Also:; - Validates symbolic alt allele for non-BND SV classes when attempting to collapse multiple alt alleles.; - Greatly improves unit test coverage for `CanonicalSVCollapser`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8408:307,test,test,307,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8408,1,['test'],['test']
Testability,"Implements https://github.com/broadinstitute/gatk/issues/1382.; Remove diploid assumptions during allele subsetting. **Summary**; - Changed `GenotypeLikelihoods.GenotypeLikelihoodsAllelePair GenotypeLikelihoods.getAllelePair(int PLindex)` to `ArrayList<Integer> GenotypeLikelihoods.getAlleles(int PLindex, int ploidy)` in GATKVariantContextUtils. ; - Added integration and unit tests.tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1845:378,test,tests,378,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1845,2,['test'],['tests']
Testability,"Implements https://github.com/broadinstitute/gatk/issues/2787.; **Summary of Changes**; * HaplotypeBAMDestination.java - Added a statement to put the the input `@PG` header lines in the output BAM.; * ArtificialReadUtils.java - Added a methods to create a SAM header with Program Records. Fixed a bug in `createArtificialSamHeaderWithReadGroup` where the Read Group was using `PG` instead of the `RG` tag.; * SamAssertionUtils.java - Created a utility, `assertOutBamContainsInBamProgramRecords`, that checks that output BAM file header contains the input BAM file header Program Records.; * SamAssertionUtilsUnitTest.java - Unit tests `assertOutBamContainsInBamProgramRecords`.; * HaplotypeCallerIntegrationTest.java - Tested the input BAM Program Record (PG) tags are forwarded to the output BAM.; * HaplotypeBAMWriterUnitTest.java - Tested the input BAM Program Record (PG) tags are forwarded to the output SAM and BAM.; * testSAM.sam and testBAM.sam - Modified to reflect forwarded PG tags in HaplotypeBAMWriterUnitTest.; * ArtificialReadUtilsUnitTest.java and ReadPileupUnitTest.java - change null to the RG value due to using the correct tag in `ArtificialReadUtils.createArtificialSamHeaderWithReadGroup`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3065:454,assert,assertOutBamContainsInBamProgramRecords,454,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3065,7,"['Test', 'assert', 'test']","['Tested', 'assertOutBamContainsInBamProgramRecords', 'testBAM', 'testSAM', 'tests']"
Testability,"Implements tool for clustering SVs, built on top of the clustering engine code refined recently in #7243. In addition to a few bug fixes, updates also include:. - `PloidyTable` class, which ingests and serves as a simple data class for a tsv of per-sample contig ploidies. This was necessary for inferring genotypes when input vcfs contain non-matching sample and variant records.; - Modified `SVClusterEngine` to render sorted output.; - Improved code for SV record collapsing (see the `CanonicalSVCollapser`), particularly for CNVs. Genotype collapsing now infers allele phasing in certain unambiguous cases, in particular for DUPs and multi-allelic CNVs. Testing for this has been cleaned up and augmented with further cases to validate this functionality.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7541:658,Test,Testing,658,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7541,1,['Test'],['Testing']
Testability,"Implements two new tools and updates some methods for a revamp of the `CombineBatches` cross-batch integration module in [gatk-sv](https://github.com/broadinstitute/gatk-sv). - `SVStratify` - tool for splitting out a VCF by variant class. Users pass in a configuration table (see tool documentation for an example) specifying one or more stratification groups classified by SVTYPE, SVLEN range, and reference context(s). The latter are specified as a set of interval lists using `--context-name` and `--context-intervals` arguments. All variants are matched with their respective group which is annotated in the `STRAT` INFO field. Optionally, the output can be split into multiple VCFs by group, which is a very useful functionality that currently can't be done efficiently with common commands/toolkits.; - `GroupedSVCluster` - a hybrid tool combining functionality from `SVStratify` with `SVCluster` to perform intra-stratum clustering. This tool is critical for fine-tuned clustering of specific variants types within certain reference contexts. For example, small variants in simple repeats tend to have lower breakpoint accuracy and are typically ""reclustered"" during call set refinement with looser clustering criteria.; - `SVStratificationEngine` - new class for performing stratification.; - Updates to breakpoint refinement in `CanonicalSVCollapser` that should improve breakpoint accuracy, particularly in larger call sets. Raw evidence support and variant quality are now considered when choosing a representative breakpoint for a group of clustered SVs.; - Added `FlagFieldLogic` type for customizing how `BOTHSIDE_PASS` and `HIGH_SR_BACKGROUND` INFO flags are collapsed during clustering.; - `RD_CN` is now used as a backup if `CN` is not available when determining carrier status for sample overlap.; - Removed no-sort option in favor of spooled sorting.; - Bug fix: support for empty EVIDENCE info fields; - Bug fix: in one of the JointGermlineCnvDefragmenter tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8990:1976,test,tests,1976,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8990,1,['test'],['tests']
Testability,"Improve handling of clipped read ""stubs"" in HC",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5079:34,stub,stubs,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5079,1,['stub'],['stubs']
Testability,Improve logging and exception handling of CreateReadCountPanelOfNormals.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5771:8,log,logging,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5771,1,['log'],['logging']
Testability,Improve the commenting/warning for Forked-PR tests in Github Actions tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7799:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7799,2,['test'],['tests']
Testability,Improve unit test coverage for existing CRAM classes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5204:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5204,1,['test'],['test']
Testability,Improve unit testing for getAlignedRefAllele,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5351:13,test,testing,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5351,1,['test'],['testing']
Testability,Improving test coverage by deleting dead code and moving more tests from GATK3,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/218:10,test,test,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/218,2,['test'],"['test', 'tests']"
Testability,In #6991 I introduced an option for HC to not print artificial haplotypes in the bamout. I overlooked the fact that when this option is enabled we should not include the read group for the artificial haplotypes in the header. The present PR fixes this and adds tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7141:261,test,tests,261,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7141,1,['test'],['tests']
Testability,"In <https://github.com/broadinstitute/dsde-docs/issues/2639> we agreed to tag all tools, regardless of status (alpha, deprecated, test tools), so long as straightforward to do so, with the documentedfeature tag. This allows the javaDoc portion of the tooldoc to show up in our forum (gatkDoc). ### Tools missing from gatkDocs that show up in `--list`that we need documentation to show up for this year; - [x] CalculatePulldownPhasePosteriors; - [x] GetSampleName; - [x] PathSeqBuildKmers; - [x] PathSeqBuildReferenceTaxonomy; - [x] PathSeqBwaSpark; - [x] PathSeqFilterSpark; - [x] PathSeqPipelineSpark; - [x] PathSeqScoreSpark; - [x] ASEReadCounter; - [x] CompareBaseQualities; - [x] FixMisencodedBaseQualityReads; - [x] LeftAlignIndels; - [x] RevertBaseQualityScores; - [x] SplitNCigarReads; - [x] UnmarkDuplicates; - [x] DiscoverVariantsFromContigAlignmentsSAMSpark; - [x] FindBadGenomicKmersSpark; - [x] FindBreakpointEvidenceSpark; - [x] StructuralVariationDiscoveryPipelineSpark; - [x] BwaSpark; - [x] MarkDuplicatesSpark; - [x] MeanQualityByCycleSpark; - [x] ParallelCopyGCSDirectoryIntoHDFSSpark; - [x] QualityScoreDistributionSpark; - [x] SortReadFileSpark; - [x] AnnotatePairOrientation; - [x] CountVariants; - [x] GatherVcfsCloud; - [x] GenomicsDBImport; - [x] BwaMemIndexImageCreator; - [x] CompareDuplicatesSpark; - [x] ConvertHeaderlessHadoopBamShardToBam. 32 total. #### Those needing tags within the Picard repo:; - [x] CollectIndependentReplicateMetrics; - [x] CollectWgsMetricsWithNonZeroCoverage; - [x] UmiAwareMarkDuplicatesWithMateCigar; - [x] CrosscheckReadGroupFingerprints; - [x] SetNmAndUqTags; - [x] SimpleMarkDuplicatesWithMateCigar. Also added `@BetaFeature` tag and `(Experimental)` label in summary to first three, given they are currently categorized under ; ```; Alpha Tools: | Tools that are currently UNSUPPORTED until further testing and maturation.; -- | --; ```. ---; ### Tools missing from `--list` that show up in gatkDocs ; - [x] CallCopyRatioSegments `added bet",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3847:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3847,1,['test'],['test']
Testability,"In GATK3, when merging variants, the IDs of all the source VCFs were retained. This code path seems like it intended that, since the variantSources set is generated, but it doesnt get used for anything. This PR will use that set to set the source of the resulting merged VC. Note: i dont think I can kick off the test suite. It is possible this change would result in tests breaking, and those would need updates.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8750:313,test,test,313,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8750,2,['test'],"['test', 'tests']"
Testability,"In `IntervalListMetadata`, the contig list is sorted lexicographically:. ```self.contig_list = sorted(list(self.contig_set))```. This causes, e.g., the output of DetermineGermlineContigPloidy to be sorted lexicographically. Let's remove this and assume that incoming data from temporary files is always sorted according to the sequence dictionary. We should double check that this didn't affect any previous results in any unexpected way. We should also add some basic checks on the Java testing side. One easy modification would be to use contigs 1, 2, and 10 (along with X and Y) for the PostprocessGermlineCNVCalls test. The expected VCF should be in the correct order.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4374:488,test,testing,488,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4374,2,['test'],"['test', 'testing']"
Testability,"In debugging Java 17 issues with the docker tests, I noticed some lines in the Docker file were missing the append i/o redirection that I assume was intended to be included. Not sure what impact this will have so running the build with these changes as a test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7997:44,test,tests,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7997,2,['test'],"['test', 'tests']"
Testability,"In helping @bhanugandham figure out why a particular site was failing it became apparent that merging dangling head code was failing to recover deletions in the dangling head. Furthermore there is some code in the dangling end recovery code that asserts a certain high standard of matching (usually 1 but sometimes dangling branch length/kmersize) `getMaxMismatches(final int lengthOfDanglingBranch)`. Both of these facts seem likely to cause dangling heads to be dropped despite their being still potentially informative, particularly the indel code. . I have added the ability for the index recovery code to account for the cigar string when merging dangling ends. Addtionally rather than counting mismatches to reject the branch it simply requires a minimum matching end (which can be changed, I suspect this is where the lionshare of the differences come from). Unfortunately changing the tests is non-trivial (as this happened to change the integration test results for HaplotypeCaller at a few sites) so I wanted to get this branch up to solicit advice a to whether it is worth pursuing this fix. @davidbenjamin @ldgauthier @droazen",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6113:246,assert,asserts,246,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6113,3,"['assert', 'test']","['asserts', 'test', 'tests']"
Testability,In light of #7754 the tests run in about an 1:15 minutes for the slowest variant calling docker tests. This can be improved by farther sub-dividing the tests and eliminating some of the redundancy between docker and non-docker tests so the test suite runs faster.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7798:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7798,5,['test'],"['test', 'tests']"
Testability,"In light of the discovery of the (relatively minor) numerical differences caused by changes to non-CNV code outlined in #7649, and because we are still awaiting coverage from pipeline-level/CARROT testing, I decided to go ahead and add these exact-match tests. This essentially freezes current ModelSegments behavior, which has been exactly stable since https://github.com/broadinstitute/gatk/pull/5814; that is, from sometime between 4.1.0.0/4.1.1.0 almost 3 years ago up to 4.2.4.1 today. Note that the original test files were generated from the test BAMs (e.g., src/test/resources/large/cnv_somatic_workflows_test_files/HCC1143-t1-chr20-downsampled.deduplicated.bam), since these BAMs have been used in the past to consistently generate test files for other tools in the ModelSegments and GermlineCNVCaller pipelines. However, these original test files contained insufficient data to activate the changes found in #7649, even had exact-match tests been present. I thus took some old HCC1143T 100% WES data that I had and snippeted it to chr20. I've confirmed that the added tests with these files would've picked up the regression of log10factorial seen in #7649 for all relevant modes (i.e., all those that take in the allele counts as input, since that regression only affected allele-fraction MCMC sampling). Tests take maybe an additional minute to run and there was about ~12MB of additional large resources checked in, but I didn't try too hard to bring either down. I also added some early-fail parameter validation to check that the minimum total allele count in the case sample is zero in matched-normal mode. There are actually some open questions in my mind as to what the best behavior should be here, but given some of the discussion in #6499 and possible plans for using joint segmentation to do filtering of germline events, I think it's best to enforce that all het sites coming out of the genotyping step are the same across all samples. Recall that we added this parameter in #55",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7652:197,test,testing,197,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7652,8,['test'],"['test', 'testing', 'tests']"
Testability,In light of the recent #7357 and #7358 it has become clear that we are blind changes that cause the logging outputs for GATK to become unusable because we are spitting endless warnings to stdout. I think we should change our integration tests to capture the log output for each of our tests and assert that none of them balloon beyond some reasonable threshold that would capture these problems (perhaps a megabyte but it would take a little bit of sleuthing to be sure). . I would think the best place would be to add a capture into `CommandLineProgramTest.runCommandLine()` that instead of using the current behavior `injectDefaultVerbosity()` we instead leave the logging output as the default and capture it somewhere explicit where we can make assertions about the size of the outputs. Possibly we could create a dummy logging level that just saves and counts the outputs so we can make assertions about the logs. Ideally this should apply to every tool simultaneously since it would be too patchwork to simply add logging output tests for enough of the tools to protect us manually.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7368:100,log,logging,100,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7368,12,"['assert', 'log', 'test']","['assert', 'assertions', 'log', 'logging', 'logs', 'tests']"
Testability,"In order to better match changes between gatk and picard, the gatk has been set to rely on the picard version of the OpticalDuplicateFinder. Unfortunately this means we have to rely on the Picard Log interface which we don't have a good reason to get involved in the gatk. Furthermore, the logger isn't serializable so it might cause problems with spark.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4759:196,Log,Log,196,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4759,2,"['Log', 'log']","['Log', 'logger']"
Testability,"In particular add output GATKTool.getDefaultToolVCFHeaderLines to the VCF header, and rewrite the integration test for GenerateVCFFromPosteriors so that it validates the equivalence of variant context records, instead of file equivalency",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4267:110,test,test,110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4267,1,['test'],['test']
Testability,"In some cases it may be useful to know what reads are giving rise to which specific variants. I have run into several cases while debugging some strange results where this would be useful to know, and also there is a QC workflow we would like to implement where this would be essential information. This is unlikely to be generally useful, however. This PR adds a flag, `--write-qnames`, which will, for each variant, write the list of qnames in the bam that give rise to that variant as a comma separated list in the final column. This PR also makes synonymous variants (with no protein-level consequence) write an empty value rather than nothing, in order to keep column order. This seems to work with SE reads, but hasn't been tested much with PE reads. This should also probably not parse read names by default, but only if write-qnames is set.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8656:730,test,tested,730,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8656,1,['test'],['tested']
Testability,"In some preliminary testing I've done it looks like using native Hadoop libraries can speed up tools running in Spark local mode. In private Spark tools under development (which travers a WGS BAM and then performing several shuffles) I have seen speedups of up to 40% (~ 46 minutes -> 26 minutes). An initial test of `MarkDuplicatesSpark` using a 30GB bam file gave me a 9% speedup (logs are below). It might be good to investigate making this easier for users (I downloaded Hadoop and built it from source, and then set gatk's java opts to load the native library). Two options might be: 1) distribute native libraries for supported architectures with gatk or 2) make sure gatk docker images include the native libraries and are set to use them. Logs for `MarkDuplicatesSpark` without and with native libraries, running on a Broad login server:. Without:. ```; $ ${GATK_DIR}/gatk MarkDuplicatesSpark -I CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam -O CEUTrio.HiSeq.WEx37; .NA12892.readnamesort.dupmarked.bam -- --spark-runner LOCAL --spark-master local[8]; Using GATK wrapper script ${GATK_DIR}/gatk/build/install/gatk/bin/gatk; Running:; ${GATK_DIR}/gatk/build/install/gatk/bin/gatk MarkDuplicatesSpark -I CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam -O CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.dupmarked.bam --spark; -master local[8]; 14:40:21.800 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 14:40:21.889 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:${GATK_DIR}/gatk/build/install/gatk/lib/gkl-0.8.5.jar!/com/intel/gkl/native/libgkl_compression.so; 14:40:21.989 INFO MarkDuplicatesSpark - ------------------------------------------------------------; 14:40:21.990 INFO MarkDuplicatesSpark - The Genome Analysis Toolkit (GATK) v4.0.4.0-7-g46a8661-SNAPSHOT; 14:40:21.990 INFO MarkDuplicatesSpark - For support and documentatio",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4746:20,test,testing,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4746,5,"['Log', 'log', 'test']","['Logs', 'login', 'logs', 'test', 'testing']"
Testability,"In the HaplotypeCaller test, about 80% of the Smith-Waterman calls result in a substring match to the reference without any indels. Add a substring search to SWPairwiseAlignment and avoid running the full Smith-Waterman for these cases.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1655:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1655,1,['test'],['test']
Testability,"In the branch `dr_intel_deflater_bug_repro`, running `./gradlew clean test -Dtest.single=GatherVcfsIntegrationTest` will trigger the following test failure:. ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.tools.GatherVcfsIntegrationTest.testBlockGather[14](/Users/droazen/src/hellbender/src/test/resources/large/gvcfs/combined.gatk3.7_30_ga4f720357.expected.vcf, 8536) FAILED; java.lang.AssertionError: different sizes 16940 vs 17070; at org.broadinstitute.hellbender.utils.test.VariantContextTestUtils.assertEqualVariants(VariantContextTestUtils.java:173); at org.broadinstitute.hellbender.tools.GatherVcfsIntegrationTest.testBlockGather(GatherVcfsIntegrationTest.java:103); Results: FAILURE (15 tests, 14 successes, 1 failures, 0 skipped); ```. The tool writes a vcf that, when read back in by GATK, appears to have fewer records than it should. The same test does NOT fail if you do ANY of the following:. * Edit `GatherVcfsIntegrationTest.testBlockGather()` to turn on the JDK deflater by changing `.addBooleanArgument(""use_jdk_deflater"", false);` to `.addBooleanArgument(""use_jdk_deflater"", true);`. * Keep the Intel deflater on, but edit `build.gradle` to change `samjdk.compression_level` to 1 or 2. (You'll also need to change the `Assert.assertEquals(System.getProperty(""samjdk.compression_level""), ""5"");` line in `GatherVcfsIntegrationTest.testBlockGather()` accordingly). * Edit the `getVcfsToShard` `DataProvider` in `GatherVcfsIntegrationTest` to change the failing `{LARGE_VCF, 8536}` test case to `{LARGE_VCF, 8535}`. This cuts the number of files that the vcf gets split into in half, and the test passes. * Comment out all but the last test case in the `getVcfsToShard` `DataProvider` in `GatherVcfsIntegrationTest`. This indicates that there is something stateful going on, since the test case does not fail if run in isolation. One additional bit of information: the test fails with the Intel deflater and compression levels 5 and 9, but with compression level 9 GA",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3117:70,test,test,70,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3117,12,"['Assert', 'assert', 'test']","['AssertionError', 'assertEqualVariants', 'test', 'testBlockGather', 'tests']"
Testability,"In the course of tinkering with the GATK tutorial, I discovered that FilterVariantTranches errors out if it doesn't find any indels. The new logic isn't bulletproof (e.g. it will still run if it has SNP input and indel training), but it solves the SNP-only (and indel-only) case.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6411:141,log,logic,141,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6411,1,['log'],['logic']
Testability,In the discussion in this branch https://github.com/broadinstitute/gatk/pull/6351#pullrequestreview-1430841832 we were tripped up by the fact that the Carrot tests were showing a slight (between 5 and 7% on the aggregated `$ time` command output across 50 shards) runtime regression in the current version of HaplotypeCaller compared with a misconfigured older version of the tool. Specifically the faster older version was broadinstitute/gatk-nightly:2022-03-04-4.2.5.0-9-gb097f75c5-NIGHTLY-SNAPSHOT which was before the Java 17 migration (which is a high likelihood culprit form the past year). . Somebody should spend a few hours with a profiler to make sure there isn't some obvious culprit. . Here is the command that Carrot was running:; ```HaplotypeCaller \; -R /cromwell_root/dsp-methods-carrot-data/test_data/haplotypecaller_tests/Homo_sapiens_assembly38.fasta \; -I gs://dsp-methods-carrot-data/test_data/haplotypecaller_tests/chm1_chm13_hiseqx_sm_hf3mo.bam \; -L /cromwell_root/dsde-methods-carrot-prod-cromwell/VariantCallingCarrotOrchestrated/9886a710-334a-41eb-a495-6968d322730a/call-CHMSampleHeadToHead/VariantCallingCarrot/63594353-145d-4c4a-a713-352ad41ff3e6/call-ScatterIntervalList/cacheCopy/glob-cb4648beeaff920acb03de7603c06f98/10scattered.interval_list \; -O CHM113.g.vcf.gz \; -contamination 0.0 \; -G StandardAnnotation -G StandardHCAnnotation -G AS_StandardAnnotation \; \; \; \; -GQB 10 -GQB 20 -GQB 30 -GQB 40 -GQB 50 -GQB 60 -GQB 70 -GQB 80 -GQB 90 \; -ERC GVCF \; ```; And a shard where a significant slowdown was observed spanned the region `chr3:55313816` -> `chr3:113699078` which should hopefully provide a good starting point for anybody investigating this.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8327:158,test,tests,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8327,1,['test'],['tests']
Testability,"In the latest master, running for example `java -jar build/libs/gatk.jar FixVcfHead` returns:. ```; USAGE: <program name> [-h]. Available Programs:; --------------------------------------------------------------------------------------; Base Calling: Tools that process sequencing machine data, e.g. Illumina base calls, and detect sequencing level attributes, e.g. adapters; CheckIlluminaDirectory (Picard) Asserts the validity for specified Illumina basecalling data.; CollectIlluminaBasecallingMetrics (Picard) Collects Illumina Basecalling metrics for a sequencing run. ...skipped for brevity... VcfFormatConverter (Picard) Converts VCF to BCF or BCF to VCF.; VcfToIntervalList (Picard) Converts a VCF or BCF file to a Picard Interval List. --------------------------------------------------------------------------------------. Exception in thread ""main"" org.broadinstitute.hellbender.exceptions.UserException: 'FixVcfHead' is not a valid command.; Did you mean this?; FixVcfHeader; 	at org.broadinstitute.hellbender.Main.extractCommandLineProgram(Main.java:341); 	at org.broadinstitute.hellbender.Main.setupConfigAndExtractProgram(Main.java:172); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:192); 	at org.broadinstitute.hellbender.Main.main(Main.java:275); ```. I expect something without the stack trace and the scary ""Exception"" message. For example:. ```; USAGE: <program name> [-h]. Available Programs:; --------------------------------------------------------------------------------------; Base Calling: Tools that process sequencing machine data, e.g. Illumina base calls, and detect sequencing level attributes, e.g. adapters; CheckIlluminaDirectory (Picard) Asserts the validity for specified Illumina basecalling data.; CollectIlluminaBasecallingMetrics (Picard) Collects Illumina Basecalling metrics for a sequencing run. ...skipped for brevity... VcfFormatConverter (Picard) Converts VCF to BCF or BCF to VCF.; VcfToIntervalList (Picard) Converts a VCF or BCF file to ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4256:408,Assert,Asserts,408,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4256,1,['Assert'],['Asserts']
Testability,"In the presence of insertions or deletions in the cigar, hardClipByReadCoordinates gets confused regarding the amount of bases that were clipped, thereby creating an incorrect cigar. The following snippet, placed in ReadClipperUnitText.java can serve as a test. ```java; @DataProvider; Object[][] cigarsToClipData(){; return new Object[][]{; new Object[]{""20M"", 6},; new Object[]{""3M2I20M"", 4},; new Object[]{""10I20M"", 0},; new Object[]{""3M2D20M"", 6},; };; }. public void testHardClipSoftClippedBasesClipsTheCorrectAmount(final String cigarString, final int alignmentOffset) {; final int start = 100;; final GATKRead originalRead = ArtificialReadUtils.createArtificialRead(TextCigarCodec.decode(cigarString));; BaseUtils.fillWithRandomBases(originalRead.getBasesNoCopy(),0,originalRead.getLength());; originalRead.setPosition(originalRead.getContig(), start);. final GATKRead clippedRead = ReadClipper.hardClipByReadCoordinates(originalRead, 0, 5);; Assert.assertEquals(; clippedRead.getCigar().getReadLength() + AlignmentUtils.getNumHardClippedBases(clippedRead),; originalRead.getCigar().getReadLength(), "" Clipped cigar: "" + clippedRead.getCigar());; Assert.assertEquals(clippedRead.getStart(),start + alignmentOffset, "" Clipped cigar: "" + clippedRead.getCigar());; Assert.assertEquals(clippedRead.getBasesNoCopy(),Arrays.copyOfRange(originalRead.getBases(),5,originalRead.getBasesNoCopy().length));; Assert.assertEquals(clippedRead.getBaseQualitiesNoCopy(),Arrays.copyOfRange(originalRead.getBases(),5,originalRead.getBaseQualitiesNoCopy().length));; }. ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6139:256,test,test,256,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6139,10,"['Assert', 'assert', 'test']","['Assert', 'assertEquals', 'test', 'testHardClipSoftClippedBasesClipsTheCorrectAmount']"
Testability,"In the process of designing correctness tests for `MarkDuplicatesSpark`, @davidadamsphd has come up with a potential set of optimizations to `MarkDuplicatesSpark` that have the potential to improve performance by an order of magnitude. The task here is to meet with @davidadamsphd, get access to and understand his optimizations, and port them to the main `MarkDuplicatesSpark` tool (along with any other optimizations you feel are appropriate).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1100:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1100,1,['test'],['tests']
Testability,In the test suite for `GenotypeGVCFs` and `CombineGVCFs` there is some nearly duplicated code related to comparing VCF files intelligently when there exists an expectation that certain fields in the file will vary between runs. Similar functionality exists in for sam file comparison with `org.broadinstitute.hellbender.utils.test.SamAssertionUtils`. Factoring the VCF comparison tests out into a `VCFAssertionUtils` class could help alleviate this code duplication problem.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3811:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3811,3,['test'],"['test', 'tests']"
Testability,"In working on #8296 we have discovered that in the `MafOutputRendererConstants.java` there are myriad constants that hard code aliases with the pattern ""Gencode_34_hugoSymbol"". This can lead to bad behavior if a non-bundled Gencode version is used in Funcotator, specifically it can cause the MAF file to be missing most of its hard-coded fields as they will be mis-identified by the output-renderer resulting in mostly empty outputs. We should rewrite the logic in the MAF code to be completely agnostic to Gencode versions used to generate the Funcotations to drop this hard-coding all-together.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8482:457,log,logic,457,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8482,1,['log'],['logic']
Testability,"In working with the SampleDBBuilder code I have noticed that there is an argument for validationStrictness which purports to assert that there is a >1:1 mach between the discovered samples in the pedigree file and those in the underlying variantDataSources according to the code on line 83. Unfortunately, as it stands there is no way to input `samplesFromDataSources` into the builder, so these assertions are skipped. There are tests for validation but these only apply to asserting that there are no name collisions between the samples added as pedigree files, which appears to be different.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3949:125,assert,assert,125,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3949,4,"['assert', 'test']","['assert', 'asserting', 'assertions', 'tests']"
Testability,"InbreedingCoeff uses likelihoods for its calculation _and_ uses GQ0s (regardless of call or no-call), which add equal likelihoods (to homRef and het or all three) because of the flat prior, which is out of HWE. So the more GQ0s there are, the more likely a variant ""looks"" like it's out of Hardy-Weinberg equilibrium. I would rather assign uninformative genotypes to be no-calls and ignore no-call genotypes in the InbreedingCoeff calculation. (ExcessHet has its own idiosyncrasies, which are different because it rounds to integer genotypes counts.). One place to enforce more consistent behavior is in GenotypeUtils.shouldBeCalled, which currently maintains the previous behavior of GT=./.;PL=[0,0,0] genotypes for reblocked GT=0/0;GQ=0 genotypes. This is going to involve overwriting a bunch of test data.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7481:798,test,test,798,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7481,1,['test'],['test']
Testability,"Included a test case generated using the buggy version of GenomicsDBImport in which the sample names declared in the file headers did not always match the samples provided to GenomicsDBImport via the sample name map file, and showed that the tool could repair the callset successfully.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3868:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3868,1,['test'],['test']
Testability,"Included is a JProfiler screenshot of where it is spending all of its time. As you can see below, it has not even run any of the ```LocusWalker.apply(...)``` code.; ```; lichtens@OncobuntuMk3:~/IdeaProjects/hellbender-protected$ java -jar build/libs/gatk-protected.jar Pileup -I ~/broad_oncotator_configs/hcc_purity/SM-74NEG.bam -O ~/broad_oncotator_configs/pileup.out -L /home/lichtens/broad_oncotator_configs/allchr.1kg.phase3.v5a.snp.maf10.biallelic.recode.fixed.prune5.trim1M.test.interval_list; 15:04:36.262 INFO IntelGKLUtils - Trying to load Intel GKL library from:; 	jar:file:/home/lichtens/IdeaProjects/hellbender-protected/build/libs/gatk-protected-all-0556d5b-SNAPSHOT-spark_standalone.jar!/com/intel/gkl/native/libIntelGKL.so; 15:04:36.344 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; [January 25, 2017 3:04:36 PM EST] org.broadinstitute.hellbender.tools.walkers.qc.Pileup --output /home/lichtens/broad_oncotator_configs/pileup.out --intervals /home/lichtens/broad_oncotator_configs/allchr.1kg.phase3.v5a.snp.maf10.biallelic.recode.fixed.prune5.trim1M.test.interval_list --input /home/lichtens/broad_oncotator_configs/hcc_purity/SM-74NEG.bam --showVerbose false --outputInsertLength false --maxDepthPerSample 0 --interval_set_rule UNION --interval_padding 0 --interval_exclusion_padding 0 --readValidationStringency SILENT --secondsBetweenProgressUpdates 10.0 --disableSequenceDictionaryValidation false --createOutputBamIndex true --createOutputBamMD5 false --createOutputVariantIndex true --createOutputVariantMD5 false --lenient false --addOutputSAMProgramRecord true --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false --disableAllReadFilters false; [January 25, 2017 3:04:36 PM EST] Executing as lichtens@OncobuntuMk3 on Linux 3.19.0-30-generic amd64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_51-b16; Version: Version:0556d5b-SNAPSHOT; 15:04:36.348 INFO Pileup - Defaults.BUFFER_SIZE : 131072; 15:04:36.348 INFO Pileup - Defaults.COMP",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2356:480,test,test,480,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2356,1,['test'],['test']
Testability,"Includes a test for the non-Spark version, and tests the two produce the same result. Fixes #5276.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5289:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5289,2,['test'],"['test', 'tests']"
Testability,"Includes latest Gencode and an implicit fix for #6564. Had to make some code changes for latest liftover Gencode data(v34 -> hg19). . The associated DS test release correctly annotates data on hg19 and hg38. Left to do:. - [x] Update data sources downloader.; - [x] Update data source version validation code. Code updates:; - Now both hg19 and hg38 have the contig names translated to `chr__`; - Added 'lncRNA' to GeneTranscriptType.; - Added ""TAGENE"" gene tag.; - Added the MANE_SELECT tag to FeatureTag.; - Added the STOP_CODON_READTHROUGH tag to FeatureTag.; - Updated the GTF versions that are parseable.; - Fixed a parsing error with new versions of gencode and the remap; positions (for liftover files).; - Added test for indexing new lifted over gencode GTF.; - Added Gencode_34 entries to MAF output map.; - Minor changes to FuncotatorIntegrationTest.java for code syntax.; - Pointed data source downloader at new data sources URL.; - Minor updates to workflows to point at new data sources. Script updates:; - Updated retrieval scripts for dbSNP and Gencode.; - Added required field to gencode config file generation.; - Now gencode retrieval script enforces double hash comments at; top of gencode GTF files. Bug Fixes:; Removing erroneous trailing tab in MAF file output. - Fixes #6693",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6660:152,test,test,152,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6660,2,['test'],['test']
Testability,Includes tests for both hg19 and hg38.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3410:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3410,1,['test'],['tests']
Testability,Includes:. * `ShardingIterator` to avoid too many query calls; * `ReadSliderWalker` with documentation on how to implement (edited: walker name is `SlidingWindowReadWalker` instead); * Argument collection interface for sharding arguments; * Example walker and argument collection; * Tests for example walker. Closes https://github.com/broadinstitute/gatk/issues/1198,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4682:283,Test,Tests,283,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4682,1,['Test'],['Tests']
Testability,Inconsistent behavior when running unit tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,1,['test'],['tests']
Testability,Increase verbosity of Travis logging for WDL tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4130:29,log,logging,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4130,2,"['log', 'test']","['logging', 'tests']"
Testability,IndexFeatureFile needs integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/235:35,test,tests,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/235,1,['test'],['tests']
Testability,"Inflater; 20:11:35.531 INFO CombineGVCFs - GCS max retries/reopens: 20; 20:11:35.531 INFO CombineGVCFs - Requester pays: disabled; 20:11:35.531 INFO CombineGVCFs - Initializing engine; 20:11:35.957 INFO FeatureManager - Using codec VCFCodec to read file file:///fs/scratch/PHS0338/appz/elprep-v5.0.2/PA113.vcf.gz; 20:11:35.969 INFO CombineGVCFs - Shutting down engine; [June 13, 2021 8:11:35 PM GMT] org.broadinstitute.hellbender.tools.walkers.CombineGVCFs done. Elapsed time: 0.03 minutes.; Runtime.totalMemory()=1772093440; ***********************************************************************; A USER ERROR has occurred: An index is required but was not found for file /fs/scratch/PHS0338/appz/elprep-v5.0.2/PA113.vcf.gz. Support for unindexed block-compressed files has been temporarily disabled. Try running IndexFeatureFile on the input. ***********************************************************************. Set the system property GATK_STACKTRACE_ON_USER_EXCEPTION (--java-options '-DGATK_STACKTRACE_ON_USER_EXCEPTION=true') to print the stack trace.; Using GATK jar /gatk/gatk-package-4.2.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /gatk/gatk-package-4.2.0.0-local.jar CombineGVCFs -R /users/PHS0338/jpac1984/data/Autosome.fasta --variant PA113.vcf.gz --variant PA113corr.vcf.gz --variant PA112.vcf.gz --variant PA112corr.vcf.gz --variant IN33.vcf.gz --variant IN33corr.vcf.gz --variant AL82.vcf.gz -O test.vcf.gz. ------; The CombineGVCFs website - https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs - does not mention anything about this????. What did I miss or was not even mentioned and what should I do?; There is no reference about this ""https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs"" in the website, https://gatk.broadinstitute.org/hc/en-us/articles/360037593911-CombineGVCFs...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7311:4793,test,test,4793,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7311,1,['test'],['test']
Testability,"Initial Spark dataflow commit, basic skeleton with some tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/850:56,test,tests,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/850,1,['test'],['tests']
Testability,Initial check-in to find test failures. . Adresses #8328,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8689:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8689,1,['test'],['test']
Testability,"Initial commit, command line, CountReads tool, tests, gradle build, trav...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/23:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/23,1,['test'],['tests']
Testability,"Initial port of native PairHMM AVX code from GATK3. (@akiezun #1492). Includes gradle code to build the shared library and package it in the GATK jar file. . Added a new unit test VectorPairHMMUnitTest, which can be integrated into PairHMMUnitTest later.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1504:175,test,test,175,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1504,1,['test'],['test']
Testability,Initial support for spanning deletions and refactoring for testability,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7857:59,test,testability,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7857,1,['test'],['testability']
Testability,"InputStream.processNextBlock(BlockCompressedInputStream.java:536); at htsjdk.samtools.util.BlockCompressedInputStream.nextBlock(BlockCompressedInputStream.java:479); at htsjdk.samtools.util.BlockCompressedInputStream.readBlock(BlockCompressedInputStream.java:469); at htsjdk.samtools.util.BlockCompressedInputStream.available(BlockCompressedInputStream.java:207); at htsjdk.samtools.util.BlockCompressedInputStream.read(BlockCompressedInputStream.java:252); at htsjdk.tribble.readers.TabixReader.readLine(TabixReader.java:215); at htsjdk.tribble.readers.TabixReader$IteratorImpl.next(TabixReader.java:434); at htsjdk.tribble.readers.TabixIteratorLineReader.readLine(TabixIteratorLineReader.java:46); ... 29 more; Using GATK jar /gatk/gatk-package-4.5.0.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /gatk/gatk-package-4.5.0.0-local.jar CombineGVCFs -R ./test/test.fna -V ./gvcf_all.list -L NC_038255.2 -O ./NC_038255.2.merged.g.vcf.gz; total 2.3G; '""-rw-rw-rw- 1 root root  3.6K Dec 13 23:32 GATKConfig.EXAMPLE.properties""; drwxr-xr-x 2 root root  4.0K Mar 13 06:26 GCF_000004515.6_Glycine_max_v4.0; '""-rw-r--r-- 1 root root  1.6G Mar 13 06:47 NC_038255.2.merged.g.vcf.gz""; '""-rw-r--r-- 1 root root   24K Mar 13 06:47 NC_038255.2.merged.g.vcf.gz.tbi""; '""-rw-rw-rw- 1 root root   40K Dec 13 23:32 README.md""; '""-rwxrwxrwx 1 root root   21K Dec 13 23:32 gatk""; '""-rw-rw-rw- 1 root root 1016K Dec 13 23:32 gatk-completion.sh""; '""-rw-rw-rw- 1 root root  422M Dec 13 23:32 gatk-package-4.5.0.0-local.jar""; '""-rw-rw-rw- 1 root root  320M Dec 13 23:32 gatk-package-4.5.0.0-spark.jar""; lrwxrwxrwx 1 root root    36 Dec 13 23:33 gatk-spark.jar -> /gatk/gatk-package-4.5.0.0-spark.jar; lrwxrwxrwx 1 root root    36 Dec 13 23:33 gatk.jar -> /gatk/gatk-package-4.5.0.0-local.jar; '""-rw-rw-rw- 1 root root  117K Dec 13 23:32 gatkPythonPackageArchive.zip""; '""-rw-rw-rw- 1 r",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8735:26857,test,test,26857,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8735,2,['test'],['test']
Testability,"Instead of a String previously. Tested like this:. ```bash; $ ./gatk SelectVariants \; --variant src/test/resources/large/VQSR/dbsnp_132_b37.leftAligned.20.1M-10M.vcf \; --select-random-fraction 0.01 \; --output gs://$BUCKET/variants.vcf; ```. and. ```; $ ./gatk SelectVariants \; --variant src/test/resources/large/VQSR/dbsnp_132_b37.leftAligned.20.1M-10M.vcf \; --select-random-fraction 0.01 \; --output /tmp/variants.vcf; ```. If this works, the plan is to change all tools to use this format, so they can all write VCF output to Google Cloud Storage.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5870:32,Test,Tested,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5870,3,"['Test', 'test']","['Tested', 'test']"
Testability,Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/a795190c-dcc2-40a7-bfcc-84fa6a4ea0dc); Two failed on ValidateVDS (or rather something upstream). I *don't* think this is an effect of this PR.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8807:12,Test,Test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8807,1,['Test'],['Test']
Testability,"Integration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/8eadce08-04fa-447f-bbbc-934f52e79030), still working on testing this by hand",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8923:151,test,testing,151,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8923,1,['test'],['testing']
Testability,Integration run with [all the tests here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/d6892c6d-0d1e-415b-819b-24a30ed08f0f),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8687:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8687,1,['test'],['tests']
Testability,"Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/4de33a53-be6f-43b2-96db-7e8a0fb398f8); Example run of GvsExtractAvroFilesForHail using an Exome data set that has PGT, PID, and PS defined is [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Exome%20Beta%20Test%20ggrant/job_history/43a87886-60be-4f60-a2d3-3f4a97ceea5b).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8536:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8536,1,['test'],['test']
Testability,Integration test for CollectTargetedPcrMetrics,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/872:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/872,1,['test'],['test']
Testability,Integration test successful https://app.terra.bio/#workspaces/broad-firecloud-dsde/VS-415%20GVS%20Quickstart%20Default%20Extract%20Scatter/job_history/73ac71db-0488-46be-a8e8-7f00e795edec,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7888:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7888,1,['test'],['test']
Testability,Integration testing tables are not forever [VS-1049],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8563:12,test,testing,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8563,1,['test'],['testing']
Testability,"Integration tests are not passing as the gold files have not been updated. Understanding what ""correct"" looks like for spanning deletions beyond just unit tests is very complex, and fraught with bad data (ie multiple overlapping reference blocks, etc). . Putting this work on the shelf until the value is worth the effort",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7945:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7945,2,['test'],['tests']
Testability,Integration tests have a million different VC/Genotype setup methods,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5709:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5709,1,['test'],['tests']
Testability,Integration tests: add a way for intelligent comparison of files of different formats,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/190:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/190,1,['test'],['tests']
Testability,IntegrationTestSpec.executeTest(IntegrationTestSpec.java:86); at org.broadinstitute.hellbender.tools.dataflow.pipelines.BaseRecalibratorDataflowIntegrationTest.testBQSRBucket(BaseRecalibratorDataflowIntegrationTest.java:176); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorI,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:1616,Test,TestRunner,1616,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,1,['Test'],['TestRunner']
Testability,IntegrationTestSpec.java:86); at org.broadinstitute.hellbender.tools.dataflow.pipelines.BaseRecalibratorDataflowIntegrationTest.testBQSRBucket(BaseRecalibratorDataflowIntegrationTest.java:176); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185); at org.testng.TestNG.runSuitesLocally(TestNG.java:1110); at org.testng.TestNG.run(TestNG.java:1018); at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111); at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204); at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175); at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:125); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.Dele,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:1645,test,testng,1645,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,1,['test'],['testng']
Testability,Intel Conda environment needs a continuous integration test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5255:55,test,test,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5255,1,['test'],['test']
Testability,"Intellij pointed out to me that these two tests were identical, but they sound like they're testing different things. Are we missing an important test case? . We should either fix whichever one isn't testing the thing it says it is, or delete one of them. ```; @Test; public void testStartInMiddleWithBubble() {; final TestAssembler assembler = new TestAssembler(3);; final String ref = ""CAAAATGGGG"";; final String read = ""AAATCGGG"";; assembler.addSequence(ref.getBytes(), true);; assembler.addSequence(read.getBytes(), false);; assertSingleBubble(assembler, ref, ""CAAAATCGGG"");; }. @Test; public void testNoGoodStarts() {; final TestAssembler assembler = new TestAssembler(3);; final String ref = ""CAAAATGGGG"";; final String read = ""AAATCGGG"";; assembler.addSequence(ref.getBytes(), true);; assembler.addSequence(read.getBytes(), false);; assertSingleBubble(assembler, ref, ""CAAAATCGGG"");; }; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1081:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1081,14,"['Test', 'assert', 'test']","['Test', 'TestAssembler', 'assertSingleBubble', 'test', 'testNoGoodStarts', 'testStartInMiddleWithBubble', 'testing', 'tests']"
Testability,"Intermittent failure at https://travis-ci.com/github/broadinstitute/gatk/jobs/297047618. ```; [TileDB::FileSystem] Error: hdfs: Cannot list contents of dir gs://hellbender-test-logs/staging/703469fc-52fe-441d-b6e0-8092a114fe2c//chr20$17960187$17981445/genomicsdb_meta_dir; hdfsBuilderConnect(forceNewInstance=0, nn=gs://hellbender-test-logs, port=0, kerbTicketCachePath=(NULL), userName=(NULL)) error:; java.io.IOException: Must supply a value for configuration setting: fs.gs.project.id; 	at com.google.cloud.hadoop.util.ConfigurationUtil.getMandatoryConfig(ConfigurationUtil.java:39); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.createOptionsBuilderFromConfig(GoogleHadoopFileSystemBase.java:2185); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.configure(GoogleHadoopFileSystemBase.java:1832); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.initialize(GoogleHadoopFileSystemBase.java:1013); 	at com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystemBase.initialize(GoogleHadoopFileSystemBase.java:976); 	at org.apache.hadoop.fs.FileSystem.createFileSystem(FileSystem.java:2812); 	at org.apache.hadoop.fs.FileSystem.access$200(FileSystem.java:100); 	at org.apache.hadoop.fs.FileSystem$Cache.getInternal(FileSystem.java:2849); 	at org.apache.hadoop.fs.FileSystem$Cache.get(FileSystem.java:2831); 	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:389); 	at org.apache.hadoop.fs.FileSystem$1.run(FileSystem.java:171); 	at org.apache.hadoop.fs.FileSystem$1.run(FileSystem.java:168); 	at java.base/java.security.AccessController.doPrivileged(Native Method); 	at java.base/javax.security.auth.Subject.doAs(Subject.java:423); 	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1836); 	at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:168); 	at org.genomicsdb.reader.GenomicsDBQueryStream.jniGenomicsDBInit(Native Method); 	at org.genomicsdb.reader.GenomicsDBQueryStream.<init>(GenomicsDBQueryStream.java:209); 	at o",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6522:172,test,test-logs,172,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6522,2,['test'],['test-logs']
Testability,Intermittent failure of AsynchronousStreamWriterServiceUnitTest.testAsyncWriteInBatches on Travis.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4024:64,test,testAsyncWriteInBatches,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4024,1,['test'],['testAsyncWriteInBatches']
Testability,Intermittent failure of GenomicsDBImportIntegrationTest.testWriteToAndQueryFromGCS,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6522:56,test,testWriteToAndQueryFromGCS,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6522,1,['test'],['testWriteToAndQueryFromGCS']
Testability,Introduce more rationalized date model for the GATK logger output,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8756:52,log,logger,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8756,1,['log'],['logger']
Testability,"Introducing the IntervalLocusIterator which will traverse every locus in intervals, regardless of coverage. Minor changes. Removed imports. AlignmentContextLocusIterator first cut. Still needs unit tests. Putting in the walker. Still needs unit tests. Adding tests (and fixes) so that we can get AlignmentContexts. Adding tests (and fixes) so that we can get AlignmentContexts. Working tests. Beginning migration to a LocusWalker change rather than a separate walker. Merging the emit empty loci into locus walker. Still need warnings and validation of parameters. Next step is the LocusWalker testing. Simple test of the new LocusWalker when it emit empty loci. Addressing PR requests and added ShardedIntervalIterator to save RAM on big intervals. Addressing the rest of the PR comments. Rolling back to int from long. Addressing second round of PR comments. Wrapped LIBS in a factory so that we can encapsulate the retrieval of the best alignment context iterator. Spark empty loci traversal being supported. Rebasing based off of the other emit loci branch.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2731:198,test,tests,198,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2731,7,['test'],"['test', 'testing', 'tests']"
Testability,Invalidating filters didn't work and (guess what!) there were no tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6412:65,test,tests,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6412,1,['test'],['tests']
Testability,Inverted SoftClippedReadFilter to conform to filtering logic,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8888:55,log,logic,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8888,1,['log'],['logic']
Testability,Investigate dataflow debugging/error logging,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/276:37,log,logging,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/276,1,['log'],['logging']
Testability,InvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.re,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2827,test,testng,2827,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['test'],['testng']
Testability,Issue 2697 docker testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2726:18,test,testing,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2726,1,['test'],['testing']
Testability,"Issue from the forum regarding GenotypeGVCFs. User is getting an error with the bcf codec. They are running 4.1.7.0, so I recommended updating to 4.1.8.1 for now to see if it is fixed. This request was created from a contribution made by Brynjar Sigurðsson on August 04, 2020 09:49 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360072049511-Assertion-nps-nps-line-n-sample-n-failed](https://gatk.broadinstitute.org/hc/en-us/community/posts/360072049511-Assertion-nps-nps-line-n-sample-n-failed). \--. Hello,. I am running a variant calling using GenotypeGVCFs. The process first creates a GenomicsDB on 50Kbase regions from 150K GVCFs and then runs GenotypeGVCFs wrapped in GNU parallel (after splitting the region into as many threads as are available). Most regions complete without a problem, but some fail on GenotypeGVCFs with the assertion error. java: /home/vagrant/GenomicsDB/dependencies/htslib/vcf.c:4225: bcf\_update\_format: Assertion \`nps && nps\*line->n\_sample==n' failed. Some of the failing regions I have run with up to 1.5 TB memory (18 threads) but they still fail. **a) GATK version used**. **version 4.1.7.0**. **b) Exact GATK commands used**. java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Xmx1290240M -Xms1290240M -DGATK\_STACKTRACE\_ON\_USER\_EXCEPTION=true -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenomicsDBImport --genomicsdb-workspace-path /tmp/tmp.ceRdvv/GDB --intervals chr1:5149001-5201000 --tmp-dir /tmp/tmp.ceRdvv/GDB\_tmp --sample-name-map /tmp/tmp.ceRdvv/snmap --batch-size 100 --reader-threads 17. java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Djava.io.tmpdir=/tmp/tmp.ceRdvv -Xmx71680M -Xms71680M -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6742:364,Assert,Assertion-nps-nps-line-n-sample-n-failed,364,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6742,4,"['Assert', 'assert']","['Assertion', 'Assertion-nps-nps-line-n-sample-n-failed', 'assertion']"
Testability,"Issue while Building GATK4. sudo ./gradlew bundle; Starting a Gradle Daemon, 1 incompatible and 1 stopped Daemons could not be reused, use --status for details. FAILURE: Build failed with an exception. * Where:; Build file '/home/rafay/gatk-4.0.2.0/build.gradle' line: 289. * What went wrong:; A problem occurred evaluating root project 'gatk'.; > Cannot find '.git' directory. * Try:; Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. BUILD FAILED. Total time: 24.349 secs",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4475:485,log,log,485,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4475,1,['log'],['log']
Testability,"It appears for at least the last 6 days that our travis tests for the the CNV and M2 WDLs have been failing generating the following error messages:. `[2017-09-07 10:05:53,75] [warn] BackendPreparationActor_for_0b561ba3:CNVSomaticPanelWorkflow.PadTargets:-1:1 [0b561ba3]: Docker lookup failed:; java.lang.Exception: Docker image broadinstitute/gatk:80d8662d760f451045957080813d3963a1b68cc5 not found; 	at cromwell.engine.workflow.WorkflowDockerLookupActor.cromwell$engine$workflow$WorkflowDockerLookupActor$$handleLookupFailure(WorkflowDockerLookupActor.scala:193); 	at cromwell.engine.workflow.WorkflowDockerLookupActor$$anonfun$3.applyOrElse(WorkflowDockerLookupActor.scala:91); 	at cromwell.engine.workflow.WorkflowDockerLookupActor$$anonfun$3.applyOrElse(WorkflowDockerLookupActor.scala:75); 	at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); 	at akka.actor.FSM$class.processEvent(FSM.scala:663); 	at cromwell.engine.workflow.WorkflowDockerLookupActor.akka$actor$LoggingFSM$$super$processEvent(WorkflowDockerLookupActor.scala:39); 	at akka.actor.LoggingFSM$class.processEvent(FSM.scala:799); 	at cromwell.engine.workflow.WorkflowDockerLookupActor.processEvent(WorkflowDockerLookupActor.scala:39); 	at akka.actor.FSM$class.akka$actor$FSM$$processMsg(FSM.scala:657); 	at akka.actor.FSM$$anonfun$receive$1.applyOrElse(FSM.scala:651); 	at scala.runtime.AbstractPartialFunction.apply(AbstractPartialFunction.scala:36); 	at cromwell.docker.DockerClientHelper$$anonfun$dockerResponseReceive$1.applyOrElse(DockerClientHelper.scala:16); 	at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:170); 	at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:171); 	at akka.actor.Actor$class.aroundReceive(Actor.scala:496); 	at cromwell.engine.workflow.WorkflowDockerLookupActor.aroundReceive(WorkflowDockerLookupActor.scala:39); 	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:526); 	at akka.actor.ActorCell.invoke(ActorCell.scala:495); 	at akka.d",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3558:56,test,tests,56,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3558,1,['test'],['tests']
Testability,"It appears that both the ""branch"" and ""PR"" builds are always running the complete test suite in travis. We had added a check in previously to skip the ""branch"" builds to save on costs. Here's an example:; https://github.com/broadinstitute/gatk/pull/7533",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7536:82,test,test,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7536,1,['test'],['test']
Testability,"It appears that several tests do not appropriately reset the seeds of the Utils random generators, which leads to non-deterministic behavior when new tests are introduced or tests are run in a different order. Although this effectively increases test coverage, it may make things difficult to debug... I think it is probably safer to have private generators as needed. @droazen or @lbergelson can you assign?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6112:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6112,4,['test'],"['test', 'tests']"
Testability,"It appears that when we try to write out a CRAM file in hellbender from input that contains an unmapped read, we produce a malformed CRAM. We need to fix this before we can write the tests in https://github.com/broadinstitute/hellbender/issues/675 and https://github.com/broadinstitute/hellbender/issues/590. To replicate, take a BAM file containing an unmapped read (eg., `src/test/resources/org/broadinstitute/hellbender/tools/print_reads.bam`), run it through hellbender's `PrintReads` with the output set to cram, then run `samtools view` on the resulting cram file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/766:183,test,tests,183,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/766,2,['test'],"['test', 'tests']"
Testability,"It has asserts for a number of annotations, but it doesn't detect when new un-asserted annotations are added. ; We should consider:; A: adding asserts for new annotations since the test was written; B: adding a clause to fail when new annotations are added without an assert; C: renaming the method",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2798:7,assert,asserts,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2798,5,"['assert', 'test']","['assert', 'asserted', 'asserts', 'test']"
Testability,"It is not necessary to be packed in the testing framework, because it is specific for a single tool...",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3762:40,test,testing,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3762,1,['test'],['testing']
Testability,It is now site-by-site independent (unlike GATK3). All integration tests were ported as is (after ditching the MD5s). The algorithm was changed so that it works on a site-by-site independent basis. Some changes to the engine classes were required to allow queries over intervals in feature data sources. Fixes https://github.com/broadinstitute/hellbender/issues/38,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/614:67,test,tests,67,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/614,1,['test'],['tests']
Testability,"It looks like a test was generating a top level `testSortingFile.txt every time it ran, which accidentally got committed.; I've replaced this with a tmp file. I took the opportunity to make a few cosmetic improvements to the test file as well. Fixes #471",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/481:16,test,test,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/481,3,['test'],"['test', 'testSortingFile']"
Testability,"It looks like the conda env recently started resolving h5py to v3.1.0, which in turn appears to be incompatible with the keras version we're using, causing the CNNScoreVariants integration tests to fail when keras tries to load the model file (see https://github.com/tensorflow/tensorflow/issues/44467). This PR pins the version to the version used by the last build I could find that succeeded, which is 2.10.0.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6955:189,test,tests,189,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6955,1,['test'],['tests']
Testability,It looks like the last rebase in the previous PR broke some things and tests were insufficient to catch them. I have added checks to the tests as to the actual contents of the paths as well as some more extreme tests. . Fixes #7085,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7086:71,test,tests,71,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7086,3,['test'],['tests']
Testability,"It looks like the mapPartitions call in BwaSpark results in a larger serialized object graph than the other Spark tools. I discovered this by accident when I added a non-serializeable read filter object to the ReadInput argument collection in GATK Spark tool, which caused the BwaSparkIntegrationTest to fail. All other tests passed. It can be reproduced it by just adding an instance of anything that's not serializeable to BwaSpark or GATKSparkTool and running the test BwaSparkIntegrationTest. At the moment the following line will do it since ReadGroupBlackListReadFilter is currently not serializeable (though anything containing a MapEntry will do):. ReadGroupBlackListReadFilter prf = new ReadGroupBlackListReadFilter(Collections.singletonList(""RG:test""), getHeaderForReads());",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1926:320,test,tests,320,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1926,3,['test'],"['test', 'tests']"
Testability,"It looks like this is a bug with 4.2.0.0 because the same Mutect2 output has no issues with FilterMutectCalls 4.1.6.0. . This request was created from a contribution made by Qihan Long on June 04, 2021 03:21 UTC. Link: [https://gatk.broadinstitute.org/hc/en-us/community/posts/360078236332-The-output-of-Mutect2-cannot-be-accepted-by-FilterMutectCalls-in-GATK-4-2-0-0](https://gatk.broadinstitute.org/hc/en-us/community/posts/360078236332-The-output-of-Mutect2-cannot-be-accepted-by-FilterMutectCalls-in-GATK-4-2-0-0). \--. If you are seeing an error, please provide(REQUIRED) : ; ; a) GATK version used: 4.2.0.0 ; ; b) Exact command used: . gatk FilterMutectCalls \\ ; ; \-R /public1/data/resources/ref\_genome/GRCh38/GRCh38.d1.vd1.fa \\ ; ; \-V somatic\_mutation/Mutect2/test.vcf.gz \\ ; ; \-O somatic\_mutation/FilterMutectCalls/test.vcf.gz. c) Entire error log:. I used the ""--enable-all-annotations"" option within Mutect2 to get a vcf file with abundant information. However, the following FilterMutectCalls step seemed to be intolerant of some information within previous step's vcf file record. The intolerated record within vcf listed below: . chr1 6197724 . C CT,CTT,CTTT . . AC=1,1,1;AF=0.167,0.167,0.167;AN=6;AS\_BaseQRankSum=-6.431;AS\_MQ=60.00,60.00,60.00;AS\_MQRankSum=0.000;AS\_ReadPosRankSum=5.751;AS\_SB\_TABLE=42,880|3,164|3,32|0,14;**AS\_UNIQ\_ALT\_READ\_COUNT=167|35|14**;BQHIST=5,1,0,0,1,11,2,0,0,0,14,2,0,0,1,15,1,0,0,0,16,1,0,0,0,17,0,2,0,0,18,2,0,0,1,19,6,0,1,0,20,25,0,2,2,21,13,0,1,2,22,20,0,3,3,23,2,1,2,1,24,6,0,2,0,25,21,1,4,7,26,33,0,5,6,27,18,0,0,7,28,29,0,0,4,29,26,2,4,8,30,161,4,5,51,31,263,2,3,51,32,129,2,3,22,33,41,0,0,0,34,15,0,0,0,35,20,0,0,0,36,19,0,0,0,37,12,0,0,0,38,1,0,0,0,39,9,0,0,0,41,18,0,0,0,44,26,0,0,0;BaseQRankSum=-6.431;ClippingRankSum=-7.714;DP=1323;ECNT=1;FS=0.000;LikelihoodRankSum=-7.886;MBQ=31,30,26,30;MFRL=6590,6585,4819,6586;MMQ=60,60,60,60;MPOS=16,15,7;MQ=59.98;MQ0=0;MQRankSum=0.000;NALOD=0.569,1.49,1.49;NCC=0;NCount=0;NLOD=27.80,30.51,30",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7298:773,test,test,773,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7298,3,"['log', 'test']","['log', 'test']"
Testability,"It looks like we copy and execute install_R_packages.R from the repo when building the base Docker image, and then on travis, we use the current repo version for the travis image. We also copy the current version to the final Docker image during the build, but we don't execute it there (at least as far as I can tell). This means the travis tests that use the Docker image run with a different R environment (the one established for the base image) than the non-Docker tests. Also, the Docker image winds up having the updated copy of the script, but its not the one reflected in the actual environment. @jamesemery It looks like you might have added the second copy - can you take a look and verify that we should fix this, or see if there is someting I'm missing.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4251:342,test,tests,342,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4251,2,['test'],['tests']
Testability,"It looks like we're ignoring some tests by accident, probably due to bugs in their dataproviders. We should fix that. See: https://storage.googleapis.com/hellbender-test-logs/build_reports/master_22886.3/tests/test/index.html",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5339:34,test,tests,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5339,4,['test'],"['test', 'test-logs', 'tests']"
Testability,"It looks like when this was added, a mistake was made between a filter returning test() == true (passing the filter) and test() == false (failing the filter, read removed). Furthermore the invert filter argument in here is now redundant as of #8724 and I will go ahead and remove it from this filter. I have also tweaked the filter arguments slightly to clarify what they do now mean more intuitively. . Fixes #8887",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8888:81,test,test,81,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8888,2,['test'],['test']
Testability,"It needs to be integrated with CRAMIndexer, and tests should be added for both BAM and CRAM.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1135:48,test,tests,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1135,1,['test'],['tests']
Testability,It seems fairly rare that the PL array is truly uninformative and consequently would be removed based on the fact that none of the integration tests seem to have failed as a result of this.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7148:143,test,tests,143,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7148,1,['test'],['tests']
Testability,It seems that it fails to hard-clip the bases array if the cigar has hard-clips. ```; java.lang.IllegalStateException: CIGAR covers 4 bases but the sequence is 8 read bases . 	at org.broadinstitute.hellbender.utils.bwa.BwaMemAlignmentUtils.applyAlignment(BwaMemAlignmentUtils.java:92); 	at org.broadinstitute.hellbender.tools.spark.sv.discovery.AlignmentIntervalUnitTest.testConstructionFromGATKRead(AlignmentIntervalUnitTest.java:133); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115). ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3459:371,test,testConstructionFromGATKRead,371,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3459,35,"['Test', 'test']","['TestMethodWorker', 'TestNG', 'TestRunner', 'testConstructionFromGATKRead', 'testng']"
Testability,"It seems that using -L pulls in unmapped reads which is not what we want I think. The reason I think unmapped reads are pulled in is this progress log from a Spark job. Note the 'Current locus' on the last line. ```; org.broadinstitute.hellbender.tools.CountReads --intervals 1:1-20000000 --input /humgen/gsa-hpprojects/NA12878Collection/bams/CEUTrio.HiSeq.WGS.b37.NA12878.bam --disable_all_read_filters false --interval_set_rule UNION --interval_padding 0 --secondsBetweenProgressUpdates 10.0 --help false --version false --VERBOSITY INFO --QUIET false; [October 24, 2015 2:16:18 AM EDT] Executing as akiezun@dataflow01.broadinstitute.org on Linux 2.6.32-573.3.1.el6.x86_64 amd64; Java HotSpot(TM) 64-Bit Server VM 1.8.0-b132; Version: Version:4.pre-alpha-45-g168cd60-SNAPSHOT JdkDeflater; 02:16:18.972 INFO CountReads - Initializing engine; 02:16:19.296 INFO IntervalArgumentCollection - Processing 20000000 bp from intervals; 02:16:19.300 INFO ReadsDataSource - Preparing intervals for traversal; 02:16:19.301 INFO CountReads - Done initializing engine; 02:16:19.301 INFO ProgressMeter - Starting traversal; 02:16:19.302 INFO ProgressMeter - Current Locus Elapsed Minutes Records Processed Records/Minute; 02:16:29.306 INFO ProgressMeter - 1:3034965 0.2 2219000 13310007.0; 02:16:39.306 INFO ProgressMeter - unmapped 0.3 4542000 13623275.3; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1060:147,log,log,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1060,1,['log'],['log']
Testability,"It was assuming that the `ReferenceContext`'s interval has the same start as the `VariantContext` being annotated, which is often not true. I tested this in Mutect and it seems to work correctly now. @LeeTL1220 This will improve indel specificty in M2 by 75% or so. Can you review?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2556:142,test,tested,142,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2556,1,['test'],['tested']
Testability,It was noticed while doing #8351 that the `GencodeFunctotation.equals()` method has the following line in it; ``` ; if (geneTranscriptType != that.geneTranscriptType) return false; ; ```. Unfortunately the geneTranscriptType is stored as a Sting and thus this should NOT be expected to succeed in almost any case. As it stands fixing this innocuous oversight seems to break several of the combinatorial funcotator tests and an integration test. Somebody should fix this behavior (easy) and validate that the test changes are within tolerable levels (hard).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8385:414,test,tests,414,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8385,3,['test'],"['test', 'tests']"
Testability,"It will be nice to have the GATK testing framework in a different module and maven artifact to add it as a dependency only for testing, and do not include it in the uber-jar the TestNG dependecy (or the Mini-Cluster from Hadoop).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2533:33,test,testing,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2533,3,"['Test', 'test']","['TestNG', 'testing']"
Testability,"It would be wonderful to be able to use SelectVariants with a query like -select ""AF > 0.1"" on a VCF containing multiallelics and have it filter multiallelics by the allele with the highest AF. (Possibly conversely for ""AF < X""queries. Right now it crashes unless you use a crazy JEXL or pull out the multiallelics. Maybe we could make a maxAF/minAF in htsjdk/JEXLmap.java which equals AF for biallelics?. Internally, it might be nice to have a Map<Allele, Double> with the AF (or AC) for each allele for the SelectVariants issue and to simplify some of the crazy logic already in VariantAnnotator to deal with different allele ordering. As part of this task, we should also make 100% sure that allele ordering is preserved so that AF/AC array ordering is preserved during VC reading/writing/manipulation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/241:564,log,logic,564,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/241,1,['log'],['logic']
Testability,"It's a little confusing that we use downsampled tumor BAMs for the gCNV WDL tests, for example. Can wait until after release.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4007:76,test,tests,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4007,1,['test'],['tests']
Testability,Its currently set to false since defaulting to true breaks a couple of PrintReads tests which will need to be fixed. Also add fullName doc attribute.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1183:82,test,tests,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1183,1,['test'],['tests']
Testability,"Its possible to specify CNN inference size argument values that cause the Python process run out of memory, and the failure mode appears to be the java process hangs. Its not clear whether its always possible to recover from this using the global exception handler we currently install on the Python side - we need to explore a bit to see if the handler is being invoked on OOM; whether catching the OOM exception explicitly would help, or if we need an alternative reporting strategy for low-memory conditions. Attached is a log provided by @bhanugandham from a run in a Terra notebook that failed and that exhibited a hang that we assume was due to OOM, and that was resolved by reducing the inference batch size. [gatkStreamingProcessJournal-772629669.txt](https://github.com/broadinstitute/gatk/files/2988819/gatkStreamingProcessJournal-772629669.txt)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5820:526,log,log,526,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5820,1,['log'],['log']
Testability,"Java 8 is now old enough that it's not the default on new machines, (java 12 seems to be what comes on a new macbook.) Installing java 8 has become more of a hassle because oracle now requires you to login in order to get it. We should update the readme with information about how to get java 8, probably pointing people to https://adoptopenjdk.net/. I think comms probably needs to update/add some documentation about this as well because it's definitely a friction point. We might also want to advise using jenv for people with multiple java installations to manage them.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6024:200,log,login,200,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6024,1,['log'],['login']
Testability,Just checks that the input and output bams are equal (which is still the; case for a bam with no duplicates). Once BQSR is hooked up we'll have; to update the expected output for this test. This is intended as a starting point for the more meaningful tests we; eventually want to have.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/772:184,test,test,184,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/772,2,['test'],"['test', 'tests']"
Testability,"KTRACE\_ON\_USER\_EXCEPTION=true -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenomicsDBImport --genomicsdb-workspace-path /tmp/tmp.ceRdvv/GDB --intervals chr1:5149001-5201000 --tmp-dir /tmp/tmp.ceRdvv/GDB\_tmp --sample-name-map /tmp/tmp.ceRdvv/snmap --batch-size 100 --reader-threads 17. java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Djava.io.tmpdir=/tmp/tmp.ceRdvv -Xmx71680M -Xms71680M -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenotypeGVCFs --genomicsdb-use-vcf-codec -R /odinn/data/extdata/1000genomes/2019-06-21\_GRCh38/GRCh38\_full\_analysis\_set\_plus\_decoy\_hla.fa -V gendb:///tmp/tmp.ceRdvv/GDB --tmp-dir=/tmp/tmp.ceRdvv --interval-padding 1000 --only-output-calls-starting-in-intervals -L chr1:5161113-5163890 -O /tmp/tmp.ceRdvv/splitdir/reg\_5.padded.vcf.gz. **c) The entire error log if applicable.**. Running: ; ; java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Xmx1290240M -Xms1290240M -DGATK\_STACKTRACE\_ON\_USER\_EXCEPTION=true -jar /nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar GenomicsDBImport --genomicsdb-workspace-path /tmp/tmp.ceRdvv/GDB --intervals chr1:5149001-5201000 --tmp-dir /tmp/tmp.ceRdvv/GDB\_tmp --sample-name-map /tmp/tmp.ceRdvv/snmap --batch-size 100 --reader-threads 17 ; ; 20:05:36.112 INFO NativeLibraryLoader - Loading libgkl\_compression.so from jar:file:/nfs/fs1/bioinfo/apps-x86\_64/GATK/gatk-4.1.7.0/gatk-package-4.1.7.0-local.jar!/com/intel/gkl/native/libgkl\_compression.so ; ; Jul 27, 2020 8:05:40 PM shaded.cloud\_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine ; ; INFO: Failed to detect whether we are running on Google Compute Engine. ; ; 20:05:40.627 IN",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6742:2404,log,log,2404,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6742,1,['log'],['log']
Testability,K_11K.tiny.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting1.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/GenomicsDBImport/testHeaderContigLineSorting2.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.3.8-4-g7b0250253f.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.alleleSpecific.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.alleleSpecific.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/pretendTobeTetraPloidTetraAllelicSite.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.empty.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.noSG.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg1.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg2.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg3.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg4.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg5.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:37598,test,test,37598,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"Keeping the dockstore as is for now because I may want to run this on a few shards from the 30k while it's still in review. This pr adds a fair amount of work to the bcftools task (ExtractAnAcAfFromVCF) and adds a significant number of columns to the schema: the sample count for all of the samples, as well as for each subpopulation. Note that AC_hemi will be added in a follow on pr; Note that additional validation tests will be added in a follow on pr",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7456:418,test,tests,418,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7456,1,['test'],['tests']
Testability,"Largely taken from Lee's sample code, see JIRA ticket for details. Spins up a Hail cluster and runs a script to extract from a VDS to VCF files on a per-chromosome basis. Includes some refactoring to move some of the workspace-sniffing that was part of bulk ingest into more generic utility code. In terms of cluster tracking:. - Cluster name is calculated in shell script and visible in the logs; - Cluster name is written to a file which is delocalized even if the workload script fails. . Unintended but useful example [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/a96667a7-e08c-43f4-abad-b55fbe7f0c06) where not only is the cluster name logged and written to an output file which is delocalized, but the cluster gets shut down anyway by cleanup code.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8525:392,log,logs,392,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8525,2,['log'],"['logged', 'logs']"
Testability,"Last week, spark 2.0.0 is formally released. However, when I tested gatk4 on spark2.0.0, I found they were incompatible. It seems that the interface isn't match. The error log looks like below. Exception in thread ""main"" java.lang.NoSuchMethodError: scala.collection.Seq.aggregate(Ljava/lang/Object;Lscala/Function2;Lscala/Function2;)Ljava/lang/Object;; at org.bdgenomics.adam.models.NonoverlappingRegions.mergeRegions(NonoverlappingRegions.scala:75); at org.bdgenomics.adam.models.NonoverlappingRegions.<init>(NonoverlappingRegions.scala:55); at org.bdgenomics.adam.models.NonoverlappingRegions$.apply(NonoverlappingRegions.scala:169); at org.bdgenomics.adam.util.TwoBitRecord$.apply(TwoBitFile.scala:193); at org.bdgenomics.adam.util.TwoBitFile$$anonfun$6.apply(TwoBitFile.scala:70); at org.bdgenomics.adam.util.TwoBitFile$$anonfun$6.apply(TwoBitFile.scala:70); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.TraversableLike$$anonfun$map$1.apply(TraversableLike.scala:234); at scala.collection.immutable.HashMap$HashMap1.foreach(HashMap.scala:221); at scala.collection.immutable.HashMap$HashTrieMap.foreach(HashMap.scala:428); at scala.collection.immutable.HashMap$HashTrieMap.foreach(HashMap.scala:428); at scala.collection.TraversableLike$class.map(TraversableLike.scala:234); at scala.collection.AbstractTraversable.map(Traversable.scala:104); at org.bdgenomics.adam.util.TwoBitFile.<init>(TwoBitFile.scala:70); at org.broadinstitute.hellbender.engine.spark.datasources.ReferenceTwoBitSource.<init>(ReferenceTwoBitSource.java:43); at org.broadinstitute.hellbender.engine.datasources.ReferenceMultiSource.<init>(ReferenceMultiSource.java:41); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeReference(GATKSparkTool.java:353); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.initializeToolInputs(GATKSparkTool.java:320); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2073:61,test,tested,61,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2073,2,"['log', 'test']","['log', 'tested']"
Testability,Lessons learned in VDS creation during Echo Scale Testing. Successful integration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/9e6aa362-e25b-49d0-83cd-d64e926c6386).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8602:50,Test,Testing,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8602,1,['Test'],['Testing']
Testability,Let's consolidate them all into src/testUtils/java/org/broadinstitute/hellbender/testutils/VariantContextTestUtils.java,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5709:36,test,testUtils,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5709,2,['test'],"['testUtils', 'testutils']"
Testability,"Let's create a mock up of a possible future configuration setup using the Owner library (https://github.com/lviggiano/owner). For the mock up, I recommend we have two configuration files, one containing system properties and the other containing a few general engine settings. . We can select a few system properties from `gatk-launch` for inclusion in the system properties config file (eg., `samjdk.compression_level`, `samjdk.use_async_io_read_samtools`, etc.). . For the engine settings file, I recommend including `codecPackages` (a `List<String>` currently hardcoded in `FeatureManager.CODEC_PACKAGES`), `cloudPrefetchBuffer`/`cloudIndexPrefetchBuffer` (int values) from `GATKTool`, and `createOutputBamIndex` (boolean), also from `GATKTool`. As part of this, we'll have to prove that we can inject the system properties sufficiently early on that libraries such as htsjdk will pick them up.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3126:15,mock,mock,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3126,2,['mock'],['mock']
Testability,"Likely an analogous problem to #1417. ```; ./gatk-launch MarkDuplicatesSpark -I file:///home/unix/louisb/flag_stat.bam -O file:///home/unix/louisb/testoutput.bam -- --sparkRunner SPARK --sparkMaster yarn-client; ```. results in:. ```; java.lang.IllegalArgumentException: Wrong FS: file:/home/unix/louisb/testoutput.bam, expected: hdfs://dataflow01.broadinstitute.org:8020; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:654); at org.apache.hadoop.hdfs.DistributedFileSystem.getPathName(DistributedFileSystem.java:193); at org.apache.hadoop.hdfs.DistributedFileSystem.access$000(DistributedFileSystem.java:105); at org.apache.hadoop.hdfs.DistributedFileSystem$12.doCall(DistributedFileSystem.java:645); at org.apache.hadoop.hdfs.DistributedFileSystem$12.doCall(DistributedFileSystem.java:641); at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81); at org.apache.hadoop.hdfs.DistributedFileSystem.delete(DistributedFileSystem.java:641); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.deleteHadoopFile(ReadsSparkSink.java:200); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.writeReadsSingle(ReadsSparkSink.java:191); at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSink.writeReads(ReadsSparkSink.java:106); at org.broadinstitute.hellbender.tools.spark.transforms.markduplicates.MarkDuplicatesSpark.runTool(MarkDuplicatesSpark.java:94); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:257); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:98); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:146); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:165); at org.broadinstitute.h",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1451:147,test,testoutput,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1451,2,['test'],['testoutput']
Testability,Limit the number of parts we run the VAT pipeline on as a test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8780:58,test,test,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8780,1,['test'],['test']
Testability,"Limited manual eyeballing seem to suggest it's worth a try, and go large scale for more testing.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2072:88,test,testing,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2072,1,['test'],['testing']
Testability,"LineProgram.instanceMain(CommandLineProgram.java:211); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:160); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:203); at org.broadinstitute.hellbender.Main.main(Main.java:289); ```. #### Steps to reproduce. This is test script (test.sh) that is used.; ```; module load gatk; CRAM=$1; SAMPLE=$(basename $CRAM); SAMPLE=${SAMPLE/\.cram/}; mkdir -p gvcf.STR/$SAMPLE; mkdir -p gvcf.STR/$SAMPLE/tmp; gatk --java-options ""-Xmx16G"" ComposeSTRTableFile -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -O gvcf.STR/$SAMPLE/$SAMPLE.STR.table -I $CRAM; gatk --java-options ""-Xmx16G"" CalibrateDragstrModel -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa --str-table-path gvcf.STR/$SAMPLE/$SAMPLE.STR.table -O gvcf.STR/$SAMPLE/$SAMPLE.Dragstr.model -I $CRAM. ```; The script runs the ComposeSTRTableFile to produce the table that is then read by CalibrateDragstrModel. ; ```; ./test.sh /restricted/projectnb/casa/wgs.hg38/adni/cram/ADNI_002_S_0413.hg38.realign.bqsr.cram; Using GATK jar /share/pkg.7/gatk/4.2.0.0/install/bin/gatk-package-4.2.0.0-local.jar defined in environment variable GATK_LOCAL_JAR; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -Xmx16G -jar /share/pkg.7/gatk/4.2.0.0/install/bin/gatk-package-4.2.0.0-local.jar ComposeSTRTableFile -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -O gvcf.STR/ADNI_002_S_0413.hg38.realign.bqsr/ADNI_002_S_0413.hg38.realign.bqsr.STR.table -I /restricted/projectnb/casa/wgs.hg38/adni/cram/ADNI_002_S_0413.hg38.realign.bqsr.cram; 13:44:55.228 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/share/pkg.7/gatk/4.2.0.0/install/bin/gatk-package-4.2.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Apr 04, 2021 1:44:55 PM shaded.cloud_nio.com.googl",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7182:3348,test,test,3348,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7182,1,['test'],['test']
Testability,Local WDL tests don't work with NIO (tasks with files declared as String),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5855:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5855,1,['test'],['tests']
Testability,"Locally tested and the exclude-filtered flag removes filtered rows; <img width=""1007"" alt=""Screen Shot 2021-05-25 at 7 09 22 PM"" src=""https://user-images.githubusercontent.com/6863459/119579588-b8e4b700-bd8c-11eb-858f-8a4c8bad152d.png"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7275:8,test,tested,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7275,1,['test'],['tested']
Testability,Locally testing does ok but when run in Travis you get an error consistently. The stack trace reads:. <pre>; org.broadinstitute.hellbender.tools.exome.allelefraction.AlleleFractionInitializerUnitTest.testInitialize FAILED; java.lang.AssertionError: expected [0.0] but found [-0.023368743794425884]; at org.testng.Assert.fail(Assert.java:94); at org.testng.Assert.failNotEquals(Assert.java:496); at org.testng.Assert.assertEquals(Assert.java:209); at org.testng.Assert.assertEquals(Assert.java:222); at org.broadinstitute.hellbender.tools.exome.allelefraction.AlleleFractionInitializerUnitTest.testInitialize(AlleleFractionInitializerUnitTest.java:41); </pre>,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1320:8,test,testing,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1320,18,"['Assert', 'assert', 'test']","['Assert', 'AssertionError', 'assertEquals', 'testInitialize', 'testing', 'testng']"
Testability,Logger always issues warning,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5692:0,Log,Logger,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5692,1,['Log'],['Logger']
Testability,Logging exceptions during deletion instead of throwing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6125:0,Log,Logging,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6125,1,['Log'],['Logging']
Testability,"Looking back at some Slack chatter with @mbabadi from September 2018, I was seeing some runs of GermlineCNVCaller that yielded slightly different results (mostly slight shifts in breakpoints). Not sure if this is still a problem (or if @vruano or @mwalker174 encountered this), but if so, we should check RNG seeds and initializations in the inference code. @mbabadi also raised the possibility of the choice of BLAS library introducing non-determinism. Results of DetermineGermlineContigPloidy were identical. Note also that PostprocessGermlineCNVCallsIntegrationTest checks for reproducibility on test files. See also #4375.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5730:599,test,test,599,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5730,1,['test'],['test']
Testability,Looks like a missing set of parentheses caused the logging output for HaplotypeCaller to become unusably flooded with garbage. @droazen we should really get this in before release.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7358:51,log,logging,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7358,1,['log'],['logging']
Testability,"Lots of the test input VCFs (and some expected test VCFs) are invalid: GQs that don't match their PLs (which should get fixed by the time I'm done with #3404 ), the wrong number of PLs for the alleles in the VC (src/test/resources/org/broadinstitute/hellbender/tools/walkers/variantutils/SelectVariants/vcfexample.loseAlleleInSelection.vcf) and probably more issues too. It's hard to be confident our output VCFs are correct when the expected behavior is sometimes wrong. Ideally we should run GATK ValidateVariants and/or vcftools validate on all the test VCFs (input and expected) and ensure files are valid where weren't not testing format/parsing issues.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3407:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3407,5,['test'],"['test', 'testing']"
Testability,M2 doesn't use very short stubs of clipped reads for genotyping,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5057:26,stub,stubs,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5057,1,['stub'],['stubs']
Testability,M2 getting thrown off by clipped read stubs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5060:38,stub,stubs,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5060,1,['stub'],['stubs']
Testability,"MASSIVE bug fixes and test updates. (Rebased 61 commits). - Fixed a bug when variants overlap the end of transcripts. - Updated logging in FuncotatorUtils::getAlignedRefAllele. - Fixed a bug in identifying splice sites for intronic regions. - Fixed a bug in FuncotatorUtils::isIndelBetweenCodons that caused issues; on reverse stranded variants. - Added in regression test data input files and expected files.; - Updated regression test sets to include only unique variants.; - Added in a 5' flank and a Start Codon insertion to regression test set. - Fixed a bug in FuncotatorUtils::isIndelBetweenCodons. - Finally fixed a bug with indels and start codons:; Now indels in start codons will not have protein renderings, nor will; they have codon change strings. This brings Funcotator closer to; Oncotator functionality (in Oncotator, start codon insertions/deletions; do not have protein change strings or codon change strings). - Fixed a bug in ordering transcripts by appris ranking. - Fixed a minor bug in how other transcripts are generated:.; With RNA/LINCRNA transcripts, the protein change would be null and was; append ed to the end of each `other transcript`. Now the null is no; longer appended. - Fixed a bug in insertions on the - strand:; All insertions on - strand had incorrectly rendered genome changes,; coding sequence changes, and protein changes.; This is due to how these fields are generated from the reference; sequence. - Fixed a bug (insertions on - strand):; Insertions on the - strand would have incorrect reference; sequences/alleles.; Now they are handled as a special case when computing the aligned; reference allele. - Fixed a bug in transcript selection for GencodeFuncotationFactory:; The LocusLevel / Curation Level was being incorrectly pulled from the; GENE features, rather than the TRANSCRIPT features that contain each; variant. As a result, the order in which representative transcripts; were chosen was wrong. The TRANSCRIPT feature is now being used to; det",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5302:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5302,5,"['log', 'test']","['logging', 'test']"
Testability,Made sure that HaplotypeCaller handles stubs correctly -- this completes issue #5079,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5471:39,stub,stubs,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5471,1,['stub'],['stubs']
Testability,Main.java:149); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:190); 	at org.broadinstitute.hellbender.tools.walkers.vqsr.CNNVariantPipelineTest.testTrainingReadModel(CNNVariantPipelineTest.java:85); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestCla,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6307:3429,test,testng,3429,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6307,1,['test'],['testng']
Testability,"Main.mainEntry(Main.java:206); at org.broadinstitute.hellbender.Main.main(Main.java:292); Caused by: java.io.FileNotFoundException: /tmp/test%20a/data/calling/a.vcf.gz (No such file or directory); at java.io.RandomAccessFile.open0(Native Method); at java.io.RandomAccessFile.open(RandomAccessFile.java:316); at java.io.RandomAccessFile.<init>(RandomAccessFile.java:243); at htsjdk.samtools.seekablestream.SeekableFileStream.<init>(SeekableFileStream.java:47); at htsjdk.samtools.seekablestream.SeekableStreamFactory$DefaultSeekableStreamFactory.getStreamFor(SeekableStreamFactory.java:99); at htsjdk.tribble.readers.TabixReader.<init>(TabixReader.java:129); at htsjdk.tribble.TabixFeatureReader.<init>(TabixFeatureReader.java:80); at htsjdk.tribble.AbstractFeatureReader.getFeatureReader(AbstractFeatureReader.java:117); ... 9 more; ```. #### Steps to reproduce; Below few steps to reproduce the bug and the specificities mentioned above. ```bash; # Create test directory without whitespace; cd /tmp; mkdir -p test-a/data/calling/; cd test-a. # Upload appropriate VCFs in data/calling. # Run MergeVcfs; gatk MergeVcfs -I data/calling/a.vcf.gz -I data/calling/b.vcf.gz -O c.vcf.gz ## It runs as expected. # Introduce a whitespace in the directory name and move into the directory again; cd ..; mv test-a ""test a""; cd ""test a"". # Run MergeVcfs; gatk MergeVcfs -I data/calling/a.vcf.gz -I data/calling/b.vcf.gz -O c.vcf.gz ## It throws an error. # Introduce withespace in the VCFs; mv data/calling/a.vcf.gz -I data/calling/a\ 1.vcf.gz; mv data/calling/b.vcf.gz -I data/calling/b\ 1.vcf.gz. # Run MergeVcfs; gatk MergeVcfs -I data/calling/a\ 1.vcf.gz -I data/calling/b\ 1.vcf.gz -O c.vcf.gz ## It runs as expected. # If VCFs without whitespace in their names are moved into data or in the current working directory (""test a""), merging works as expected.; ```. #### Expected behavior; MergeVcfs should be able to handle whitespace when present anywhere in the file path. #### Actual behavior; It does not.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6664:4748,test,test-a,4748,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6664,4,['test'],"['test', 'test-a']"
Testability,Make Java's default logs respect our verbosity setting,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/807:20,log,logs,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/807,1,['log'],['logs']
Testability,Make PathSeq test BAMs pass ValidateSamFile,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3204:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3204,2,['test'],['test']
Testability,Make directory name unique for BucketUtilsTest#testDirSizeGCS to avoi…,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3547:47,test,testDirSizeGCS,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3547,1,['test'],['testDirSizeGCS']
Testability,Make it easier for test authors to make their tests toggle-able between different dataflow backends,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/561:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/561,2,['test'],"['test', 'tests']"
Testability,Make sure GenomicsDB tests test with both BCF and VCF,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2460:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2460,2,['test'],"['test', 'tests']"
Testability,"Make the logging frequency used by the ProgressLogger available as an input. If not used, sets the default value. Variants team is using a branch of gatk and have made this change there, so pulling this change into master to simplify future merges / branch updates.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8662:9,log,logging,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8662,1,['log'],['logging']
Testability,"Makes CreateVariantIngestFiles robust to partially or fully loaded samples. Commit 21828af8f5a925cc331dce6093c0d510042d7b64 is what I actually propose to merge, while commit de673204183a4c45059dc9ea4e05868e2ea6ae59 randomly injects failures covering all the known failure modes. I tested these changes using both commits and was able to verify that partially loaded samples were handled correctly on subsequent attempts to load the sample (unfortunately we can't actually prevent these partial loadings from happening in the first place because preemptions, among other possible reasons).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7843:281,test,tested,281,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7843,1,['test'],['tested']
Testability,"Makes `CreateVariantIngestFiles` robust to partially or fully loaded samples. Commit a8dc5ea89653a7f94588aa040b49d0264d17f72d is what I actually propose to merge, while commit 118a44604343e8f77d53bcc6545b2360fefbe1cc randomly injects failures covering all the known failure modes. I tested these changes using both commits and was able to verify that partially loaded samples were handled correctly on subsequent attempts to load the sample (unfortunately we can't actually prevent these partial loadings from happening in the first place because preemptions, among other possible reasons).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7831:283,test,tested,283,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7831,1,['test'],['tested']
Testability,Making java.util.logging obey our verbosity setting; setting our logging level to WARN in tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/922:17,log,logging,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/922,3,"['log', 'test']","['logging', 'tests']"
Testability,"Making the CollectAllelicCounts tool a LocusWalker. . Some notes:. - had to create indices for bam files.; - had to convert a sam file to a bam file so that I could index it.; - Made test bam files have reads that pass wellformed read filter.; - deleted a test that would no longer throw an exception, since the reads all passed wellformed read filter.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3203:183,test,test,183,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3203,2,['test'],['test']
Testability,"MalformedReadFilter should be on by default but that requires fixing some tests. . from @droazen ""Also, there was some level of discontent in the past with the fact that MalformedReadFilter could not be disabled without modifying source code. We should at least provide something like a --disable_all_read_filters argument (assuming we're not going to bother for now with the ability to control read filters in a more fine-grained fashion from the command line).""",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/180:74,test,tests,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/180,1,['test'],['tests']
Testability,"MannWhitneyU was re-written from scratch in 2016 in GATK3,; but these changes never got ported to GATK4. This new version; produces significantly different results from the version; currently in GATK4, resulting in VERY different values for the; RankSumTest annotations in HaplotypeCaller output. @meganshand informs me that the updated GATK3 version has been; validated in R, and has much better tests than the old version. This is a straightforward port of that version with minimal changes:. -Merged ""MWUnitTest"" and ""RankSumUnitTest"" from GATK3 into a single; test class MannWhitneyUUnitTest; -Ported MathUtils.binomialCoefficient() and wrote new test for it; -Updated RankSumTest class and tests as appropriate. I've confirmed that with this change, the RankSum annotations produced; by the GATK4 HaplotypeCaller closely match those produced by the GATK3; HaplotypeCaller. Resolves #2604",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2605:397,test,tests,397,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2605,4,['test'],"['test', 'tests']"
Testability,Many of the Picard tools we'd like to port have no existing unit tests. We should write them and then backport them to Picard. Let's keep track of them here:. picard.sam:; AddOrReplaceReadGroups; BamIndexStats; BuildBamIndex; CalculateReadGroupChecksum; CheckTerminatorBlock; DownsampleSam; EstimateLibraryComplexity?; FilterReads; FixMateInformation; ReorderSam; ReplaceSamHeader; RevertOriginalBaseQualitiesAndAddMateCigar; SortSam. TODO other packages,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/144:65,test,tests,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/144,1,['test'],['tests']
Testability,"Many of the pull requests are not using [`CommandLineProgramTest.runCommandLine()`](https://github.com/broadinstitute/hellbender/blob/c6b41e6da8c9ea3f03206a25ce4ad74312b154f0/src/test/java/org/broadinstitute/gatk/CommandLineProgramTest.java). I'm assuming this is because we have not settled on a way to `Assert` that outputs are similar after running a hellbender command line. This issue should resolve with a definition how far one should test before a pull request is accepted. After an arbitrary low level patch to the codebase, I believe the GATK [`MD5DB`](https://github.com/broadgsa/gatk/blob/3b67b448072e24c80779b2e1cbc9dcfcb5dce4cf/public/gatk-tools-public/src/test/java/org/broadinstitute/gatk/utils/MD5DB.java) and [`DiffEngine`](https://github.com/broadgsa/gatk/blob/3b67b448072e24c80779b2e1cbc9dcfcb5dce4cf/public/gatk-tools-public/src/main/java/org/broadinstitute/gatk/engine/walkers/diffengine/DiffEngine.java) are considered too hard to verify-and-update en masse. This limitation would also apply to external framework test utilities, such as TestNG's `FileAssert.assertLength()`. A 2009 discussion of file comparators is archived [here](http://stackoverflow.com/questions/466841/comparing-text-files-w-junit). Ultimately, I believe the biggest pain point with the `MD5DB` is that there does not exist a quick way to a) diagnose what has changed and b) to then update all hundreds of expected outputs. As in `DiffEngine`, we could define a way to regression test that only certain aspects of common file types aren't changing (exact number of reads in BAMs, or exact number of variants in BCF), or that values are falling within a certain range (number of quality scores all above 30 under 60), etc. As for updating results, instead of embedding the expected `MD5DB` outputs in a hundreds of java test files, one could also externalize _all_ of the expected outputs to another file (json, flat text, etc.) such that this singular sorted file for the entire test suite may be updated ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/69:179,test,test,179,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/69,4,"['Assert', 'test']","['Assert', 'test']"
Testability,Many test VCFs are invalid,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3407:5,test,test,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3407,1,['test'],['test']
Testability,"Many tools in our world require going from log-space to linear-space and back using log10 and exp. These are slow functions and are usually used on an array (typically of length 3) of doubles. It would be great to have a ; ```; log10OfArray(double[] array) ; ```; and; ```; expOfArray(double[] array, base); ```; functions to enable fast computation of logs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2577:43,log,log-space,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2577,2,['log'],"['log-space', 'logs']"
Testability,MarkDuplicates Spark output needs to tested against the version of picard they use in production to ensure that it produces identical output and is reasonably robust to pathological files. This requires that the following issues have been resolved:; #3705 ; #3706,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4675:37,test,tested,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4675,1,['test'],['tested']
Testability,"MarkDuplicatesSpark runs successfully, but the (sharded) BAM cannot be loaded using ReadsSparkSource (with your fix to getHeader). I don't think this is a problem with HadoopBam because I'm able to run the same input through SortBamSpark and the output can be read. The input is from JP's bucket; `gs://jpmartin/hellbender-test-inputs/CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam`; but copied to hdfs. I ran. ```; gcloud beta dataproc jobs submit spark --cluster high-mem-32-4 --properties spark.executor.memory=19g,spark.executor.instances=32,spark.executor.cores=3 --class org.broadinstitute.hellbender.Main --jar build/libs/gatk-all-4.pre-alpha-7-*-SNAPSHOT-spark.jar MarkDuplicatesSpark -I hdfs:///user/davidada/CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam -O hdfs:///user/davidada/dummy-duped-CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam --sparkMaster yarn-client. gcloud beta dataproc jobs submit spark --cluster high-mem-32-4 --properties spark.executor.memory=19g,spark.executor.instances=32,spark.executor.cores=3 --class org.broadinstitute.hellbender.Main --jar build/libs/gatk-all-4.pre-alpha-7-*-SNAPSHOT-spark.jar SortBamSpark -I hdfs:///user/davidada/dummy-duped-CEUTrio.HiSeq.WGS.b37.ch1.1m-65m.NA12878.bam --sparkMaster yarn-client -O hdfs:///user/davidada/tmp.bam; ```. But I expect that spark-submit should be the same.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1005:323,test,test-inputs,323,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1005,1,['test'],['test-inputs']
Testability,"MarkDuplicatesSparkIntegrationTest.testMDOrder() passes locally, but fails intermittently in travis",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1258:35,test,testMDOrder,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1258,1,['test'],['testMDOrder']
Testability,"MathUtils was using the log4j1 logger, fixed to use the log4j 2 logger",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3479:31,log,logger,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3479,2,['log'],['logger']
Testability,MeanQualityByCycleSpark integration test fails on ADAM files with setHeaderStrict,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1540:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1540,1,['test'],['test']
Testability,Memory(VariantContextTestUtils.java:67); 	at org.broadinstitute.hellbender.tools.funcotator.vcfOutput.VcfOutputRendererUnitTest.testExclusionListOverridesManualDefaultAnnotations(VcfOutputRendererUnitTest.java:40); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.util.ArrayList.forEach(ArrayList.java:1257); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestCla,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6748:2680,test,testng,2680,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6748,1,['test'],['testng']
Testability,Merge changes from master onto our version of gatk Dockerfile. Running integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/35dd363a-b140-47c7-ad69-7e5297a6ff10),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8801:83,test,test,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8801,1,['test'],['test']
Testability,Merge changes from the EchoCallset branch back into our main branch ('ah_var_store'). Most of these changes are VDS creation related. Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f5cb7a2d-b224-4b8e-8daf-2d22939a1d96),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8993:154,test,test,154,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8993,1,['test'],['test']
Testability,"Merge the two repos into a single code base. There are a number of goals, some somewhat contradictory:; * maintain history of both repos; * minimize repo size by removing large files that were accidentally committed to gatk-protected; * merge git-lfs files; * migrate issues from gatk-protected to gatk; * merge travis builds; * maintain reasonable test runtimes",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2768:349,test,test,349,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2768,1,['test'],['test']
Testability,MergeSamFilesIntegrationTest needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1231:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1231,1,['test'],['tests']
Testability,"MetadataCollection class](https://github.com/broadinstitute/gatk/blob/4e1741896bcd04d70493f94b082dd0d27023f14c/src/main/python/org/broadinstitute/hellbender/gcnvkernel/structs/metadata.py#L215); [gcnvkernel model_denoising_calling.py](https://github.com/broadinstitute/gatk/blob/4e1741896bcd04d70493f94b082dd0d27023f14c/src/main/python/org/broadinstitute/hellbender/gcnvkernel/models/model_denoising_calling.py); [gcnvkernel io_metadata.py write_sample_coverage_metadata function](https://github.com/broadinstitute/gatk/blob/4e1741896bcd04d70493f94b082dd0d27023f14c/src/main/python/org/broadinstitute/hellbender/gcnvkernel/io/io_metadata.py#L16); [theano scan_op.py](https://github.com/Theano/Theano/blob/master/theano/scan_module/scan_op.py). ### Affected version(s); - [x] Latest public release version [version?]; - [ ] Latest master branch as of [date of test?]. ### Description ; I'm getting a strange error (see below) when running a nf-core module test. I am using test files, which are obviously smaller as for short testing times i.e. the provided bam file only provides mapped reads for a small section of the genome. #### Steps to reproduce; Run the following to create and interactive container and mount the required zip folder ([gatk_test.tar.gz](https://github.com/broadinstitute/gatk/files/10022295/gatk_test.tar.gz)):; ```docker run -it -v /path/to/gatk_test_dir:/mnt/gatk_test broadinstitute/gatk bash```; If you bash the `gatk_germlinecnvcaller.sh` within the provided zip folder in a gatk4 Docker container. #### Expected behavior; gatk GermlineCNVCaller should run as expected. #### Actual behavior; ```TypeError: ('The following error happened while compiling the node', forall_inplace,cpu,scan_fn}(Elemwise{Maximum}[(0, 0)].0, Subtensor{int64:int64:int8}.0, Subtensor{int64:int64:int8}.0, IncSubtensor{InplaceSet;:int64:}.0, Elemwise{mul,no_inplace}.0, Subtensor{int64::}.0, Elemwise{sub,no_inplace}.0), '\n', ""Inconsistency in the inner graph of scan 'scan_fn' : an input and a",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8097:1276,test,test,1276,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8097,2,['test'],"['test', 'testing']"
Testability,Method(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.gradle.internal.dispatch,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2897,test,testng,2897,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['test'],['testng']
Testability,"Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:497); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); ```. #### Steps to reproduce; These are the arguments I used (the input bam is on the file system):. ```; final String[] args = {; ""-I"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/Filtering/IGV/198489_vs_811158/sorted.mt.1.bam"",; ""-"" + M2ArgumentCollection.TUMOR_SAMPLE_SHORT_NAME, ""198489"",; ""-R"", ""/humgen/gsa-hpprojects/dev/mshand/SpecOps/Mitochondria/MitochondriaOnlyFastas/Homo_sapiens_assembly38.mt_only.fasta"",; ""-O"", outputVcf.getAbsolutePath(),; ""--m",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5036:4200,test,testng,4200,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5036,1,['test'],['testng']
Testability,Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2797:1981,test,testng,1981,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2797,3,['test'],['testng']
Testability,Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:72); 	at org.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:123); Caused by: com.intel.genomicsdb.GenomicsDBException: Could not load genomicsdb native library; 	at com.intel.genomicsdb.GenomicsDBImporter.<clinit>(GenomicsDBImporter.java:72); 	... 37 more; ```. if you dig into it more you get down to the following error:; ```; /private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dylib: dlopen(/private/var/folders/xt/vq7wz8955r1401mv8w0f4zf9qbfwzl/T/libtiledbgenomicsdb6159269479234619546.dyl,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4062:2472,test,testng,2472,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4062,1,['test'],['testng']
Testability,MethodAccessorImpl.java:62); 	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.base/java.lang.reflect.Method.invoke(Method.java:566); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133); 	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584); 	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172); 	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46); 	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804); 	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128); 	at java.base/java.util.ArrayList.forEach(ArrayList.java:1540); 	at org.testng.TestRunner.privateRun(TestRunner.java:770); 	at org.testng.TestRunner.run(TestRunner.java:591); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:402); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355); 	at org.testng.SuiteRunner.run(SuiteRunner.java:304); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1102); 	at org.testng.TestNG.runSuites(TestNG.java:1032); 	at org.testng.TestNG.run(TestNG.java:1000); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:141); 	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:90); 	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61); 	at java.base/jdk.internal.reflect.NativeMethodAccess,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6745:2558,Test,TestRunner,2558,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6745,2,['Test'],['TestRunner']
Testability,Migrate picard.analysis + picard.metrics with tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/213:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/213,1,['test'],['tests']
Testability,Migrate picard.vcf with tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/214:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/214,1,['test'],['tests']
Testability,"Migrated from https://github.com/broadinstitute/gatk-protected/pull/962. Changes by @davidbenjamin; -changes to docs; -got rid of weights and concentration; -got rid of constant states to simplify before CRP pre-training; -smarter transition matrix; -switched to binomial AF likelihoods for segmentation; -got rid of attempt big change in memory length; -fixed outlier likelihood; Changes by @samuelklee; -ACNV with joint segmentation; -tweaked convergence criteria and removed extraneous MCMC fit; -sorted acc in AF segmentation; -NaN fixes in binomial likelihood; -fixed some tests and added EXPERIMENTAL tags; -disabled JointAFCRSegmenterUnitTest. This introduces a new command line (AllelicCNVHMM---@sooheelee, this command line is experimental and should not be used) that performs joint segmentation and then fits model parameters using MCMC. It performs relatively well on some samples (and was used to generate results for the AACR poster), but others result in oversegmentation and convergence issues. It's possible that this could be due to the naive copy-ratio model used. @davidbenjamin may want to do some additional tweaking, but I think we will also explore other iHMM variants concurrently.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3036:578,test,tests,578,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3036,1,['test'],['tests']
Testability,"Minimal GATK port of nvscorevariants from https://github.com/NVIDIA-Genomics-Research/nvscorevariants. The tool runs successfully in both 1D and 2D modes, and a strict integration test passes for the 1D model. However, this PR has a number of outstanding issues that need to be resolved before it can be merged and replace the legacy CNNScoreVariants tool:. - The conda environment in scripts/nvscorevariants_environment.yml needs to be incorporated into the main GATK conda environment. - The integration test for the 2D model does not currently pass, despite using a much higher epsilon than the 1D test. Some of the scores differ by significant amounts vs. the CNNScoreVariants 2D output. We need to investigate why this is. - There is currently no training tool to train a new model, like there is for the legacy CNN tool. @samuelklee and @mwalker174 , could you please comment on what it would take to incorporate the `scripts/nvscorevariants_environment.yml` conda environment into the main GATK conda environment, assuming we are free to remove/retire the CNN tool?. @lbergelson and @zamirai, please do a general code review when you get a chance.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8004:180,test,test,180,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8004,3,['test'],['test']
Testability,Minor changes for updated VAT reference testing [VS-1054],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8670:40,test,testing,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8670,1,['test'],['testing']
Testability,Minor changes to variant comparator test utility for GenomicsDB tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2610:36,test,test,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2610,2,['test'],"['test', 'tests']"
Testability,"Minor fixes to address pr #2626 comments, and extract genomics db test utils again",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2631:66,test,test,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2631,1,['test'],['test']
Testability,Miscellaneous test fixes for CompareBaseQualities and CollectIinsertSizeMetrics.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1803:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1803,1,['test'],['test']
Testability,Missed putting tests back,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8428:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8428,1,['test'],['tests']
Testability,Mock up an example configuration setup using Owner,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3126:0,Mock,Mock,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3126,1,['Mock'],['Mock']
Testability,Mode.gatk3.5.alleleSpecific.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.5.g.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testGVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.g.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.alleleSpecific.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.5.vcf; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253f.alleleSpecific.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/expected.testVCFMode.gatk3.8-4-g7b0250253.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/haplotypecaller/pretendTobeTetraPloidTetraAllelicSite.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.empty.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.noSG.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg1.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg2.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg3.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg4.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/HiSeq.1mb.1RG.sg5.table.gz; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly18.10k_lines.dict; src/test/resources/org/broadinstitute/hellbender/tools/Homo_sapiens_assembly18.10k_lines.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/mutect/dream/vcfs/dream3-chr20.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/mutect/dream/vcfs/sample_1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/mutect/dream/vcfs/sample_2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/mut,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:38061,test,test,38061,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,ModelSegments can currently deal with single sample segmentation. This branch contains the backend class (and the corresponding unit tests) that is able to segment based on multiple data samples. The updated version of the front-end class ModelSegments will be addressed in a different branch.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5524:133,test,tests,133,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5524,1,['test'],['tests']
Testability,ModelSegments integration test failures on newer Java 11 releases,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8107:26,test,test,26,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8107,1,['test'],['test']
Testability,"Modified FeatureCache to track the number of cache hits/misses over the; lifetime of each FeatureDataSource. Upon close, output these statistics; to logger.debug(). Tracking this information introduces almost zero overhead, but should be; useful on an ongoing basis as we add new tools to GATK4 and profile them.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1109:149,log,logger,149,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1109,1,['log'],['logger']
Testability,Modified VariantRecalibrator to only use a deduped version of the annotations list provided by the user once the list has been deduped. Previously it was still sometimes using the list that could have duplicates. Fixes #8226 . Also fixed the logger warning that prints the duplicate annotations.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8227:242,log,logger,242,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8227,1,['log'],['logger']
Testability,"Modify CreateVariantIngestFiles to write missing ref intervals with the ZERO state, unless we are dropping that (ZERO) state and none other. Successful Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/0509cd35-50bc-431b-88c2-590e15cd3cc9)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8560:164,test,test,164,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8560,1,['test'],['test']
Testability,"Modify GvsCreateVATFromVDS to take as an optional input the `sites_only_vcf` - if provided, the code bypasses the logic to create it from VDS.; This PR also modifies IndexVcf and SelectVariants to use localization_optional for their inputs. Updated Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/760a8910-77a3-446e-b539-196663bbd90b); Rerun of GvsCreateVATFromVDS using a passed in sites_only VCF [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/9ca7d011-82f3-43a9-9161-1df0f7174fa9).; Rerun of GvsCreateVATFromVDS NOT using a passed in sites_only VCF [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/de8fae29-a904-40d1-849b-15ba84fa0a8f).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8851:114,log,logic,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8851,2,"['log', 'test']","['logic', 'test']"
Testability,Modify GvsExtractCallset so that you can change the value of 'output_gcs_dir' as an input and it won't cause the extract to be re-run (won't invalidate call caching). Passing run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/a5fd0daf-8816-42e4-ad15-3aa432e2ed80).; Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/3c874e74-4fdd-4cbb-af75-a44bb7e17ea1).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8960:331,test,test,331,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8960,1,['test'],['test']
Testability,Modify assertVariantContextsAreEqual() to allow comparison to be done without regard to allele ordering,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2599:7,assert,assertVariantContextsAreEqual,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2599,1,['assert'],['assertVariantContextsAreEqual']
Testability,More Spark CRAM writing tests plus misc changes.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1667:24,test,tests,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1667,1,['test'],['tests']
Testability,"More concrete runtime numbers are forthcoming but the profiler shows the following. Note that these numbers are generated on this branch hanging off of master ca. November and does not include the other optimizations to this part of the code that have been made recently.; Before:; <img width=""1068"" alt=""screen shot 2019-01-25 at 2 59 53 pm"" src=""https://user-images.githubusercontent.com/16102845/51772199-6c541880-20b9-11e9-8823-7249e7f4d874.png"">; ; After: ; <img width=""1092"" alt=""screen shot 2019-01-25 at 3 00 05 pm"" src=""https://user-images.githubusercontent.com/16102845/51772174-57778500-20b9-11e9-9d74-9f93d76358a0.png"">. Beyond the tests that I have written explicitly to illuminate discrepancies, I have run HaplotypeCaller in GVCF mode on the input bams in large and explicitly checked for places where the refactored method mismatches from the previous code and it appears to be matching over a wide range of cases, there probably could be more. . Resolves #5488",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5607:644,test,tests,644,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5607,1,['test'],['tests']
Testability,More prep work for separating GVS code: remove references to GVS code from non-GVS code. Integration test currently running [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/2af93966-3c84-4aec-bc1e-82cb88478852).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8229:101,test,test,101,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8229,1,['test'],['test']
Testability,"Most of the CRAM tests were added before we could write CRAM on Spark, so this fills out the CRAM write tests for the remaining Spark tools/pipelines (ApplyBQSRSpark, BQSRPipelineSpark and ReadsPipelineSpark). Also includes one totally opportunistic deletion of an unused zero-length fasta file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1667:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1667,2,['test'],['tests']
Testability,"Most of the arguments in RecalibrationArgumentCollection are in the form ""mismatches_context_size"". This probably needs to be updated but it will have the consequence of invalidating existing BaseRecalibrator report tables and require the arguments get changed in all of the report tables checked in as test files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3974:303,test,test,303,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3974,1,['test'],['test']
Testability,"Mostly Markdown with some code snippets. The next logical step to sussing out an Azure storage solution is probably WDLization / filter creation, but that is work for another day. TODO: Figure out how much this cost.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8293:50,log,logical,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8293,1,['log'],['logical']
Testability,Move AbstractMarkDuplicatesTester to test sources,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3762:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3762,1,['test'],['test']
Testability,Move CompareSAMs and various unit test improvements,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/171:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/171,1,['test'],['test']
Testability,Move Funcotator integration test expected outputs out of large,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5379:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5379,1,['test'],['test']
Testability,Move HDF5Utils out of copynumber package and expand unit tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7928:57,test,tests,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7928,1,['test'],['tests']
Testability,"Move MarkDuplicates/EstimateLibraryComplexity, tests, and resources:; - from `tools.picard.sam` to `tools.walkers.markduplicates` package; - rename both tools to have a “2” suffix; - for now, these are still `PicardCommandLinePrograms`; - remaining related [classes](https://github.com/broadinstitute/gatk/tree/master/src/main/java/org/broadinstitute/hellbender/utils/read/markduplicates) are not moved or renamed, though most have Picard analogs with the same simple name",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3482:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3482,1,['test'],['tests']
Testability,Move Picard command-line argument testings to a PicardCommandLineProgramTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1170:34,test,testings,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1170,1,['test'],['testings']
Testability,Move SparkTestUtils to utils/test so that gatk-protected can use it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1849:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1849,1,['test'],['test']
Testability,Move all logging to log4j.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/612:9,log,logging,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/612,1,['log'],['logging']
Testability,"Move contents of picard into picard.sam, to make way for other picard tools. Reorganize test files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/240:88,test,test,88,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/240,1,['test'],['test']
Testability,Move existing GATK4 arg parser + tests as-is to new repo,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2208:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2208,1,['test'],['tests']
Testability,"Move gatk to snapshot of jp_fix_file_walker branch in google-cloud-java, and craft test case to prove the fix works",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3118:83,test,test,83,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3118,1,['test'],['test']
Testability,Move genomicsDB tests into variantcalling test group,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4992:16,test,tests,16,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4992,2,['test'],"['test', 'tests']"
Testability,Move tests for ReadWalker out of PrintReadsIntegrationTest and into ReadWalkerUnitTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2159:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2159,1,['test'],['tests']
Testability,Move the top level testSortingFile.txt to somewhere more appropriate,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/471:19,test,testSortingFile,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/471,1,['test'],['testSortingFile']
Testability,Move to using [GenomicsDB Release 1.5.0](https://github.com/GenomicsDB/GenomicsDB/releases/v1.5.0). ; Highlights in the release relevant to gatk are; - [readthedocs](https://genomicsdb.readthedocs.io/en/latest/) for GenomicsDB design/usage/functionality - GenomicsDB/GenomicsDB#265.; - GenomicsDB/GenomicsDB#284; - GenomicsDB/GenomicsDB#271; - Exclude spark from genomicsdb core jar GenomicsDB/GenomicsDB#281; - General improved performance/logging.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8358:441,log,logging,441,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8358,1,['log'],['logging']
Testability,Moved validation test data out of large files area.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5381:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5381,1,['test'],['test']
Testability,Moves RandomDNA class into test from main as it is only used for testing.; Added a random reference creation to RandomDNA.; Added isConcrete method to Nucleotide. Fixes issue #3562.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3563:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3563,2,['test'],"['test', 'testing']"
Testability,Moving and testing ingest scripts from variantstore,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6881:11,test,testing,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6881,1,['test'],['testing']
Testability,Moving classes that tests depend on from the test folders into the src folders in the utils.test package. This way they will be available to projects that depend on hellbender. Fixes #525 . Updating to the newest testng release.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/527:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/527,4,['test'],"['test', 'testng', 'tests']"
Testability,"MultiVariantWalker implementation, with VariantRecalibrator and ApplyVQSR switched over to the new base class. GatherVCFs, MergeVCFs, SelectVariants, and possibly SortVCF are all candidates to be changed to MultiVariantWalkers, but are not included here. Also, this is a branch of the branch that contains the VQSR and ApplyVQSR tests so I could use those tests to verify the MultiVariantWalker. As result there are two commits here, but the tests are already included a separate PR.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2182:329,test,tests,329,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2182,3,['test'],['tests']
Testability,Must Investigate failing Spark Dataproc tests and re-enable them,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7172:40,test,tests,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7172,1,['test'],['tests']
Testability,"Mutect adopted natural logarithms in #5858. In the update, it looks like one base 10 log was missed. This PR updates the missed log.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6884:23,log,logarithms,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6884,3,['log'],"['log', 'logarithms']"
Testability,Mutect2 (GATK 4.1.0.0) fails occasionally in smith waterman native library as below. stderr is attached. I can also provide core dump if necessary. [stderr.tar.gz](https://github.com/broadinstitute/gatk/files/2880800/stderr.tar.gz). ```; 07:30:59.335 INFO ProgressMeter - 17:78451657 627.7 1223980 1950.0; *** Error in `java': munmap_chunk(): invalid pointer: 0x00002ba8e50b7740 ***; ======= Backtrace: =========; /lib64/libc.so.6(+0x7ab54)[0x2ba8df926b54]; /gpfs/data/software/cromwell/log/cromwell-executions/Mutect2/2cebc7be-fe23-4787-9095-9b91227c6526/call-M2/shard-13/attempt-2/tmp.945f1f83/libgkl_smithwaterman5575294852416409537.so(_Z19runSWOnePairBT_avx2iiiiPhS_iiaPcPs+0x338)[0x2ba9aee21fa8]; /gpfs/data/software/cromwell/log/cromwell-executions/Mutect2/2cebc7be-fe23-4787-9095-9b91227c6526/call-M2/shard-13/attempt-2/tmp.945f1f83/libgkl_smithwaterman5575294852416409537.so(Java_com_intel_gkl_smithwaterman_IntelSmithWaterman_alignNative+0xd8)[0x2ba9aee21bf8]; [0x2ba8e8f6675a]; ======= Memory map: ========; 00400000-00401000 r-xp 00000000 08:03 5769910 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-1.b15.el7_2.x86_64/jre/bin/java; 00600000-00601000 r--p 00000000 08:03 5769910 /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.111-1.b15.el7_2.x86_64/jre/bin/java; ...; ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5690:487,log,log,487,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5690,2,['log'],['log']
Testability,"Mutect2 matches called variants against known variants retrieved from the germline resource VCF (if available) for the POPAF annotation. While comparing the called allele to the germline resource variants, Mutect2 only takes into account the sequence of the alternate allele(s) while ignoring the reference allele sequence. This can cause incorrect annotations at sites with multiple alternate alleles (e.g. CT -> C/CTT in the germline resource while M2 calls C -> CT). This PR is a proposed fix along with some unit tests that demonstrate the issue.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6999:517,test,tests,517,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6999,1,['test'],['tests']
Testability,Mutect2 uses natural logarithms internally,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5858:21,log,logarithms,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5858,1,['log'],['logarithms']
Testability,"NFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/gencode_xrefseq_v90_38.tsv -> file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/gencode_xrefseq/hg38/gencode_xrefseq_v90_38.tsv; > 15:16:43.878 INFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/cosmic_tissue.tsv -> file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/cosmic_tissue/hg38/cosmic_tissue.tsv; > 15:16:43.926 INFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/gencode.v34.annotation.REORDERED.gtf -> file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/gencode/hg38/gencode.v34.annotation.REORDERED.gtf; > 15:16:43.926 INFO DataSourceUtils - Setting lookahead cache for data source: Gencode : 100000; > 15:16:43.937 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; > 15:16:43.938 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; > 15:16:43.939 INFO FeatureManager - Using codec GencodeGtfCodec to read file file:///home/pkus/resources/gatk/funcotator2/funcotator_dataSources.v1.7.20200521s/gencode/hg38/gencode.v34.annotation.REORDERED.gtf; > 15:16:43.946 WARN GencodeGtfCodec - GENCODE GTF Header line 1 has a version number that is above maximum tested version (v 28) (given: 34): ##description: evidence-based annotation of the human genome (GRCh38), version 34 (Ensembl 100) Continuing, but errors may occur.; > 15:16:44.093 INFO DataSourceUtils - Resolved data source file path: file:///home/pkus/mutect_test/gencode.v3",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6708:13644,test,tested,13644,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6708,1,['test'],['tested']
Testability,NFO PostprocessGermlineCNVCalls - HTSJDK Defaults.USE_ASYNC_IO_WRITE_FOR_TRIBBLE : false; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Deflater: IntelDeflater; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Inflater: IntelInflater; 23:45:31.004 INFO PostprocessGermlineCNVCalls - GCS max retries/reopens: 20; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Requester pays: disabled; 23:45:31.004 INFO PostprocessGermlineCNVCalls - Initializing engine; 23:46:06.321 INFO PostprocessGermlineCNVCalls - Done initializing engine; 23:46:07.433 INFO ProgressMeter - Starting traversal; 23:46:07.433 INFO ProgressMeter - Current Locus Elapsed Minutes Records Processed Records/Minute; 23:46:07.434 INFO ProgressMeter - unmapped 0.0 0 NaN; 23:46:07.434 INFO ProgressMeter - Traversal complete. Processed 0 total records in 0.0 minutes.; 23:46:07.434 INFO PostprocessGermlineCNVCalls - Generating intervals VCF file...; 23:46:07.460 INFO PostprocessGermlineCNVCalls - Writing intervals VCF file to /srv/scratch/testardqu/CNV_Hyperexome/intervals_joint/genotyped-intervals-SAMPLE_6.vcf.gz...; 23:46:07.460 INFO PostprocessGermlineCNVCalls - Analyzing shard 1 / 8...; 23:46:08.946 INFO PostprocessGermlineCNVCalls - Analyzing shard 2 / 8...; 23:46:09.725 INFO PostprocessGermlineCNVCalls - Analyzing shard 3 / 8...; 23:46:10.380 INFO PostprocessGermlineCNVCalls - Analyzing shard 4 / 8...; 23:46:11.132 INFO PostprocessGermlineCNVCalls - Analyzing shard 5 / 8...; 23:46:11.901 INFO PostprocessGermlineCNVCalls - Analyzing shard 6 / 8...; 23:46:12.730 INFO PostprocessGermlineCNVCalls - Analyzing shard 7 / 8...; 23:46:14.288 INFO PostprocessGermlineCNVCalls - Analyzing shard 8 / 8...; 23:46:15.617 INFO PostprocessGermlineCNVCalls - Generating segments...; 01:48:30.792 INFO PostprocessGermlineCNVCalls - Parsing Python output...; 01:48:30.875 INFO PostprocessGermlineCNVCalls - Writing segments VCF file to /srv/scratch/testardqu/CNV_Hyperexome/segments_joint/genotyped-segments-SAMPLE_6.vcf.gz...; 01:48:,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8183:9746,test,testardqu,9746,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8183,1,['test'],['testardqu']
Testability,"NIENT \ ; --nativePairHmmThreads 32 \; --createOutputVariantIndex true \; --output NA12892.raw.snps.indels.g.vcf_. **This execution time for GATK 4 Beta2 is: 51 Hours, 32 min**. Alternatively, I was running the same sample (NA12892) using GATK 3.7 using the following command: . _time -p java -XX:+UseParallelGC -XX:ParallelGCThreads=32 -Xmx128g \; -jar /gpfs/software/genomics/GATK/3.7/base/GenomeAnalysisTK.jar -T HaplotypeCaller \; -nct 8 -pairHMM VECTOR_LOGLESS_CACHING \ ; -R /gpfs/data_jrnas1/ref_data/Hsapiens/hs37d5/hs37d5.fa \; -I NA12892.realigned.recal.bam -\ ; -emitRefConfidence GVCF \; --variant_index_type LINEAR \; --variant_index_parameter 128000 \; --dbsnp /gpfs/data_jrnas1/ref_data/Hsapiens/GRCh37/variation/dbsnp_138.vcf.gz \; -o NA12892.raw.snps.indels.g.vcf _. **This execution time for GATK 3.7 is: 18 Hours, 12 min**. I don't know, how to use multithreads (e.g. -nct) for GATK 4 version to reduce the execution time on the single node. Because, we have 32 cores per node with 512GB memory available for benchmarking. To parallelize the GATK 4 workload, I used the Spark version also. . I used **GATK 4 Beta2 Spark job on the cluster of 32 nodes** (32 nodes x 32 cores, totaling 1024 cores). The execution time is almost same as GATK 4 Beta2 ( 50 Hours, 21 min). Please help me, how to reduce the execution time for GATK 4 Beta2 HaplotypeCaller? . Please see this below Spark logs:. + /gpfs/software/spark/spark-2.1.0-bin-hadoop2.7//bin/spark-submit --master spark://nsnode11:6311 --driver-java-options -Dsamjdk.use_async_io_read_samtools=false,-Dsamjdk.use_async_io_write_samtools=true,-Dsamjdk.use_async_io_write_tribble=false,-Dsamjdk.compression_level=1 --conf spark.io.compression.codec=snappy --conf spark.yarn.executor.memoryOverhead=6000 --conf spark.kryoserializer.buffer.max=512m --conf spark.driver.userClassPathFirst=true --conf spark.driver.maxResultSize=0 --conf spark.executor.cores=1024 --conf spark.reducer.maxSizeInFlight=100m --conf spark.shuffle.file.buffer",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3631:1588,benchmark,benchmarking,1588,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3631,1,['benchmark'],['benchmarking']
Testability,"NIO output support for SelectVariants. Tested like so:. ```; $ ./gatk SelectVariants \; --variant dbsnp_138.b37.excluding_sites_after_129.vcf \; --select-random-fraction 0.01 \; --output gs://mybucket/variants.vcf; $ gsutil ls -lh gs://mybucket/*.vcf; 23.38 MiB 2018-10-30T23:58:12Z gs://mybucket/variants.vcf; ```. Includes the required changes under the hood, plus test updates. This change also gives NIO support to **HaplotypeCaller**, so it can write its VCF to cloud storage. Also, fixes #2128.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5378:39,Test,Tested,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5378,2,"['Test', 'test']","['Tested', 'test']"
Testability,"NVCaller --run-mode COHORT -L /outputs/gatk_intervals.interval_list --interval-merging-rule OVERLAPPING_ONLY --annotated-intervals /outputs/gatk_intervals.interval_list.annotated.tsv --contig-ploidy-calls /outputs/COHORT_runDir/COHORT-calls --input /outputs/E07002_normal_alignment.bam.counts.hdf5 --input /outputs/E07002_tumor_alignment.bam.counts.hdf5 --output /outputs/COHORT_runDir --output-prefix COHORT; ```. We used data from `PRJNA399748` project to test. #### Expected behavior. - `test_gatkgermlinecnvcaller_genotyped-intervals-cohort_0.woTimestamp.vcf` (`##contig` cut from header and only first 5 `chr22` CNVs present). ```; ##fileformat=VCFv4.2; ##FORMAT=<ID=CN,Number=1,Type=Integer,Description=""Copy number maximum a posteriori value"">; ##FORMAT=<ID=CNLP,Number=.,Type=Integer,Description=""Copy number log posterior (in Phred-scale) rounded down"">; ##FORMAT=<ID=CNQ,Number=1,Type=Integer,Description=""Genotype call quality as the difference between the best and second best phred-scaled log posterior scores"">; ##FORMAT=<ID=GT,Number=1,Type=Integer,Description=""Genotype"">; ##INFO=<ID=END,Number=1,Type=Integer,Description=""End coordinate of the variant"">; ##contig=<ID=chr1,length=248956422,assembly=GRCh38.d1.vd1>; ...; ##contig=<ID=HPV-mSD2,length=7300,assembly=GRCh38.d1.vd1>; ##source=PostprocessGermlineCNVCalls; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	E07002_normal; chr1	10000	CNV_chr1_10000_10999	N	<DEL>,<DUP>	.	.	END=10999	GT:CN:CNLP:CNQ	1:0:0,80,90,100,108,116:80; chr1	11000	CNV_chr1_11000_11999	N	<DEL>,<DUP>	.	.	END=11999	GT:CN:CNLP:CNQ	1:0:0,81,86,89,92,95:81; chr1	12000	CNV_chr1_12000_12999	N	<DEL>,<DUP>	.	.	END=12999	GT:CN:CNLP:CNQ	1:0:0,93,107,119,129,137:93; chr1	13000	CNV_chr1_13000_13999	N	<DEL>,<DUP>	.	.	END=13999	GT:CN:CNLP:CNQ	1:0:0,89,95,99,102,104:89; chr1	14000	CNV_chr1_14000_14999	N	<DEL>,<DUP>	.	.	END=14999	GT:CN:CNLP:CNQ	1:0:0,86,91,93,96,97:86; chr1	15000	CNV_chr1_15000_15999	N	<DEL>,<DUP>	.	.	END=15999	GT:CN:CNLP:CNQ	1:0:0,82,88,92,97,101:",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8619:2675,log,log,2675,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8619,2,['log'],['log']
Testability,Namely MultidimensionalKernelSegmenterUnitTest and ModelSegmentsIntegrationTest. Note that the Cromwell tests already essentially serve as integration tests and that the pipeline has already been through several preliminary evaluations without any issues.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3916:104,test,tests,104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3916,2,['test'],['tests']
Testability,Need additional VQSR integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2290:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2290,1,['test'],['tests']
Testability,Need an ability to incorporate the outputs of cromwell runs into our WDL testing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6013:73,test,testing,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6013,1,['test'],['testing']
Testability,Need script for running docker tests (easily) without manually copying code in .travis.yml,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3160:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3160,1,['test'],['tests']
Testability,Need to add in test data sources to the test resources for Funcotator.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3906:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3906,2,['test'],['test']
Testability,Need to add more test cases in Funcotator for indels to ensure that all corner cases are being met.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3841:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3841,1,['test'],['test']
Testability,Need to add tests that specifically test the HG38 flows. Should add in a set of representative unit tests that span the large normal data set. Check new contigs as well.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4317:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4317,3,['test'],"['test', 'tests']"
Testability,Need to create a auto or semi automated mechanism to test and evaluate elements incorported from DRAGEN to GATK. This is probably and ongoing task.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6267:53,test,test,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6267,1,['test'],['test']
Testability,Need to write unit tests for testing with an invalid kingdom name and for testing with an invalid species name,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7578:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7578,3,['test'],"['testing', 'tests']"
Testability,Needs to be rebased after read logical names are re-introduced.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2067:31,log,logical,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2067,1,['log'],['logical']
Testability,"New PR for these changes; including changes for @akiezun 's comment about making a copy of the test file and @droazen 's comment about naming the SamReaderFactory param ""customSamReaderFactory"".",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/585:95,test,test,95,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/585,1,['test'],['test']
Testability,New files in the repository after running the whole test suite with gradle,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4206:52,test,test,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4206,1,['test'],['test']
Testability,New logical name feature in TaggedInputFileArgument breaks hdfs urls that contain port numbers.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2000:4,log,logical,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2000,1,['log'],['logical']
Testability,New test for multi-input BOTH mode; Uniquify annotations to fix #2221,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6570:4,test,test,4,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6570,1,['test'],['test']
Testability,"New tool aiming to call all types of precise variants detectable by long read alignments (not fully functioning yet in the sense that not all types of variants are detected yet&mdash;to be handled by later PRs in this series).; This new tool splits the input long reads by scanning their alignment characteristics (number of alignments, if strand switch is involved, if mapped to the same chromosome, if have equally good alignment configurations based on the scoring tool, etc), and send them down different code path/logic units for variant type inference and VCF output.; This PR would only deal with simple INSDEL, for long reads having exactly 2 alignments (no other equally good alignment configuration) mapped to the same chromosome without strand switch or order switch (translocation or large tandem duplications), because we already have this type of variant covered in master. __UPDATE__; See updated roadmap in #2703. NEEDS TO WAIT UNTIL PART 1 IS IN.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3456:519,log,logic,519,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3456,1,['log'],['logic']
Testability,"Next part of VQSR - the data manager and trainingSet manager + tests.; VariantDatum and VariantRecalibratorArgumentCollection are included here but only to make things compile, no to be reviewed (they are part of another branch). @droazen please review",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/345:63,test,tests,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/345,1,['test'],['tests']
Testability,Nightly Cron job failing because of excessive log output,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3710:46,log,log,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3710,1,['log'],['log']
Testability,"NioByteUnsafe.read(AbstractNioByteChannel.java:131); at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511); at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468); at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382); at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354); at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:111); at java.lang.Thread.run(Thread.java:744); ```. And then warnings about lost tasks:. ```; 16/02/16 11:45:59 WARN TaskSetManager: Lost task 42.1 in stage 0.0 (TID 364, dataflow03.broadinstitute.org): java.io.IOException: Connection from /69.173.65.227:56014 closed; ```. Then errors like this:. ```; 16/02/16 11:47:37 ERROR ErrorMonitor: AssociationError [akka.tcp://sparkDriver@69.173.65.227:47043] -> [akka.tcp://sparkExecutor@dataflow05.broadinstitute.org:36695]: Error [Association failed with [akka.tcp://sparkExecutor@dataflow05.broadinstitute.org:36695]] [; ```. akka.remote.EndpointAssociationException: Association failed with [akka.tcp://sparkExecutor@dataflow05.broadinstitute.org:36695]; Caused by: akka.remote.transport.netty.NettyTransport$$anonfun$associate$1$$anon$2: Connection refused: dataflow05.broadinstitute.org/69.173.65.230:36695; ]; akka.event.Logging$Error$NoCause$. ```; 16/02/16 11:47:39 ERROR YarnScheduler: Lost executor 37 on dataflow02.broadinstitute.org: remote Rpc client disassociated; ```. This seems to be causing tasks to be re-queued and executed, which hurts performance. The command line I'm using is:. ```; gatk-launch FindBadGenomicKmersSpark --reference hdfs:///user/cwhelan/reference/Homo_sapiens_assembly19.2bit --output bad_kmers_v5_cluster.txt -- --sparkRunner SPARK --sparkMaster yarn-client --executor-memory 8g --driver-memory 8g --conf spark.broadcast.blockSize=1g; ```. Running against commit f2b3bae of branch https://github.com/broadinstitute/gatk/tree/cw_clusterize_sv_spark_tools",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1491:6054,Log,Logging,6054,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1491,1,['Log'],['Logging']
Testability,"NoSuchFieldException e) {; throw new RuntimeException(""Couldn't reset FilesystemProviders"");; }; try {; final Path index = Paths.get(new URI(""gs://hellbender/test/build_reports/1626.1/tests/index.html""));; System.out.println(""Count:"" + Files.lines(index).count());; } catch (URISyntaxException | IOException e) {; throw new RuntimeException(""Couldn't read file"");; }; }; }. private void modifyProviders() throws IllegalAccessException, NoSuchFieldException {; final Field installedProviders = FileSystemProvider.class.getDeclaredField(""installedProviders"");; installedProviders.setAccessible(true);; installedProviders.set(null, loadInstalledProviders());; installedProviders.setAccessible(false);; }. //copied from FileSystemProvider, modified to use TestGCS.classLoader() instead of systemClassloader; private static List<FileSystemProvider> loadInstalledProviders() {; List<FileSystemProvider> list = new ArrayList<FileSystemProvider>();. ServiceLoader<FileSystemProvider> sl = ServiceLoader; .load(FileSystemProvider.class, TestGCS.class.getClassLoader());. // ServiceConfigurationError may be throw here; for (FileSystemProvider provider: sl) {; String scheme = provider.getScheme();. // add to list if the provider is not ""file"" and isn't a duplicate; if (!scheme.equalsIgnoreCase(""file"")) {; boolean found = false;; for (FileSystemProvider p: list) {; if (p.getScheme().equalsIgnoreCase(scheme)) {; found = true;; break;; }; }; if (!found) {; list.add(provider);; }; }; }; return list;; }; }; ```. We'd have to add an initial action to GATKSparkTool that would run `modifyProviders` once on each executor which may be a bit of a trick on it's own. . If we decided to do this it would make sense to make `modifyProviders` use the same synchronization conditions as the actual `FileSystemProvider` loading, in order to not have any race conditions, I wanted to get feedback on this approach before putting effort into doing it correctly though. @tomwhite @jean-philippe-martin What do you think?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2312:2369,Test,TestGCS,2369,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2312,1,['Test'],['TestGCS']
Testability,"Normally one provides passing workflow runs with a PR. For the integration run [that is here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/ab86fb6d-c5d6-48b6-8322-923af691751c). There's also a ""real"" run taking place using this branch [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/db59d5b8-e2ac-4619-9563-aa5631bf053c). However for testing correctness of these changes with respect to the requester pays flag, my pet ""does not have serviceusage.services.use access to the Google Cloud project"". I therefore present instead a [run with my changes](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/9e712055-f466-4929-b6eb-5306f3cde1a0) that fails in exactly the same way as a [run without my changes](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/185506f5-9dc1-4c02-997d-6fe3f5695259).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8552:374,test,testing,374,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8552,1,['test'],['testing']
Testability,"Not quite ready to be production level, ; but I've polished it as I reviewed the concordance results given by this tool. Important limitation: this doesn't perform genotype concordance tests, and it's probably better to wait until @vruano 's genotyping module is stable. @cwhelan and @vruano tagging you two as the victim for reviewing.; Also please feel free to propose feature requests.; Thanks!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5117:185,test,tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5117,1,['test'],['tests']
Testability,"Not really an issue, just wanted to document some surprising behavior. @tmelman has been reviving/reimplementing some ancient CNV/ModelSegments evaluations (dating as far back as 4.0.2.1!) and trying to understand whether observed differences---intentional or otherwise---are due to method changes I might have made, or if she might've introduced changes in her reimplementation of the evaluation code. I ran some checks on the stability of ModelSegments using an old set of inputs (normal/tumor allelic counts and denoised copy ratios for SM-74P4M WES). Behavior has remained largely stable since at least 4.1.0.0. Namely:. 1) We evaluated and signed off on a change that went into 4.1.0.0. See comments in https://github.com/broadinstitute/gatk/pull/5575.; 2) A slight numerical difference in the MCMC-sampled allele fractions was introduced by changes made to some MathUtils code for calculating logs/factorials/etc. between 4.1.0.0 and 4.1.1.0 in https://github.com/broadinstitute/gatk/pull/5814. Note that no CNV code was directly changed, it's just that we call out to that changed MathUtils code---namely, to calculate log10factorial. The overall result in my test was a very slight change to the number of segments found, from 516 to 522.; 3) No further numerical changes have been introduced through the current 4.2.4.1, so any additional code changes I made were indeed true refactors, at least from the perspective of this simple test. Phew!. I was indeed surprised to find that very slight differences in the log10factorial behavior (which result from changing the recursive calculation of cached values to a direct one, and appear in something like the 13th decimal place) led to non-negligible changes in the MCMC estimates of the allele fractions---and thus, changes in the number of segments. Although these are also relatively slight differences in terms of practical impact, they are perhaps much larger than one might guess, given their humble origins.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7649:899,log,logs,899,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7649,3,"['log', 'test']","['logs', 'test']"
Testability,"Not sure if intermittent:; `Gradle suite > Gradle test > org.broadinstitute.hellbender.tools.walkers.GnarlyGenotyperIntegrationTest > testUsingGenomicsDB[4]([Ljava.io.File;@4f23de76, src/test/resources/org/broadinstitute/hellbender/tools/walkers/GnarlyGenotyper/twoSampleAS.vcf, src/test/resources/org/broadinstitute/hellbender/tools/walkers/GnarlyGenotyper/twoSampleASDB.vcf, [20:1-2147483647], [], /home/travis/build/broadinstitute/gatk/src/test/resources/large/human_g1k_v37.20.21.fasta) SKIPPED`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6657:50,test,test,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6657,5,['test'],"['test', 'testUsingGenomicsDB']"
Testability,"Not sure if this is a bug or something wrong with my bam files. Any help on solving/debugging would be welcomed. Running mutect2 returns >100,000 warnings of more than two reads with the same name found. The bams were processing following best practices. The header of the log file: . Mutect2 -R resources/hg38/genome/d ; 975 efault/genome.fa -L resources/hg38/a.interval_list -I recal/RBL3_diagnostic.bam -I recal/RBL3_germline.bam -I recal/RBL3_diagnostic.bam -I recal/RBL3_relapse1.bam -I recal/RBL ; 976 3_relapse2.bam -I recal/RBL3_PDX.bam -normal RBL3_germline_hg38 --germline-resource resources/hg38/gnomad/af-only-gnomad.hg38.vcf.gz --panel-of-normals resources/hg38/pon/1000 ; 977 g_pon.hg38.vcf.gz --f1r2-tar-gz results/RBL3/f1r2.tar.gz --read-filter NotSupplementaryAlignmentReadFilter --read-filter NotSecondaryAlignmentReadFilter --native-pair-hmm-thre ; 978 ads 20 -O results/RBL3/unfiltered.vcf ; 979 17:07:51.270 WARN GATKReadFilterPluginDescriptor - Redundant enabled filter (NotSecondaryAlignmentReadFilter) is enabled for this tool by default ; 980 17:07:51.313 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/rds/project/rds-cyiwgCzJok8/WES_snakemake/.snakemake/conda/773770bb2edb9f4c58fb17b5017e1f ; 981 be_/share/gatk4-4.5.0.0-0/gatk-package-4.5.0.0-local.jar!/com/intel/gkl/native/libgkl_compression.so ; 982 17:07:51.633 INFO Mutect2 - ------------------------------------------------------------ ; 983 17:07:51.635 INFO Mutect2 - The Genome Analysis Toolkit (GATK) v4.5.0.0 ; 984 17:07:51.635 INFO Mutect2 - For support and documentation go to https://software.broadinstitute.org/gatk/ ; 985 17:07:51.635 INFO Mutect2 - Executing as cjs236@cpu-r-25 on Linux v4.18.0-553.16.1.el8_10.x86_64 amd64 ; 986 17:07:51.635 INFO Mutect2 - Java runtime: OpenJDK 64-Bit Server VM v17.0.11-internal+0-adhoc..src ; 987 17:07:51.635 INFO Mutect2 - Start Date/Time: August 28, 2024 at 5:07:51 PM BST ; 988 17:07:51.635 INFO Mutect2 - ----------------------------------",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8966:273,log,log,273,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8966,1,['log'],['log']
Testability,"Not sure what's going on here, but thought I'd document. See https://storage.googleapis.com/hellbender-test-logs/build_reports/master_35408.2/tests/test/classes/org.broadinstitute.hellbender.tools.dragstr.CalibrateDragstrModelIntegrationTest.html#testDragstrModelInferenceFailingOverToDefaults[0](1,%20false)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7403:103,test,test-logs,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7403,4,['test'],"['test', 'test-logs', 'testDragstrModelInferenceFailingOverToDefaults', 'tests']"
Testability,Note that I re-enabled CRAM tests for this tool and included CRAM files for the new tests since the tool itself happily consumes CRAM files. If for some reason this is the wrong thing to do then we probably should disable the tests and change the tool to reject these.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/838:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/838,3,['test'],['tests']
Testability,"Note: these are not hooked up to the code anywhere, I have another branch where I am doing the work to plug these in. This also does not currently resolve the equivalent issue to https://github.com/broadinstitute/gatk/issues/3848 but it does add tests to both plugins enforcing what the correct behavior should be. . fixes #3624",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3851:246,test,tests,246,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3851,1,['test'],['tests']
Testability,"Notes:. - Classes in hellbender/tools/picard/analysis/artifacts are removed and replaced with Picard versions (except Transition, which is not public in Picard).; - GATK version of GatherVcfs is retained, and the Picard version is masked out - is this what we want ?; - The non-Spark GATK metrics tools have been removed and replaced with the Picard versions. The test data is retained (but moved) since its used by the Spark metrics tool tests. Additional changes we'll want to make separately to minimize the complexity of this PR:; - Eliminate the download of picard.jar from the GATK WDL tests and update the WDL to run Picard tools through GATK.; - Unify and merge the Picard and GATK program groups. These are similar, but not identical, and the combined result has artificial/duplicate groups.; - Normalize the confusing mix of Alpha/Beta/Experimental tags and comments.; - Add unified doc and tab-completion tasks that include Picard.; - Remove and replace SamComparison and Transition classes with the Picard versions.; - Fix GATK CompareBaseQualities (its a PicardCommandLineProgram).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3620:364,test,test,364,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3620,3,['test'],"['test', 'tests']"
Testability,"Noticed some compile warnings in the Travis logs, looks like a funky apostrophe is to blame?. :compileJava/gatk/src/main/java/org/broadinstitute/hellbender/tools/walkers/ReferenceConfidenceVariantContextMerger.java:511: error: unmappable character for encoding ASCII; // if there???s more than 1 DEL allele then we need to use the best one; ^",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3748:44,log,logs,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3748,1,['log'],['logs']
Testability,Noticed these while working on another branch - the companion cram files for these are queryname sorted. Let see if tests pass.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6149:116,test,tests,116,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6149,1,['test'],['tests']
Testability,"Now if the user arguments provide the option `--disableAllReadFilters` and the `isDisableFilter` pass any of the default/user filters, it returns false. If some filter is required for the tool or a warning should be log, this does not allow to do it in the proper way. I propose to honor this option in the current implementation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2363:216,log,log,216,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2363,1,['log'],['log']
Testability,"Now looks at manifest file, not readme.; Now supports version decorators (e.g. `somatic`) after version numbers in manifest file.; Added in a unit test to check the version regex. Fixes #4582 ; Fixes #4692",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5149:147,test,test,147,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5149,1,['test'],['test']
Testability,"Now that BQSR supports multiple known sites files (as it did in the old GATK), we should add tests for the multi-file case (eg., known SNPs and known indels as separate inputs).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/231:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/231,1,['test'],['tests']
Testability,"Now that Disq runs tests on 'large' BAM and VCF files (https://github.com/disq-bio/disq/pull/103), we can remove the Beta label from some more of the Spark tools.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5991:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5991,1,['test'],['tests']
Testability,"Now that MarkDuplicatesSpark matches Picard MarkDuplicates, we should add tests to ensure that it stays that way.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5610:74,test,tests,74,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5610,1,['test'],['tests']
Testability,"Now that sequence dictionary validation is in, we can re-enable this test,; which was previously failing with a java.lang.OutOfMemoryError due to lack; of upfront validation of the reads vs. reference sequence dictionaries.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/668:69,test,test,69,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/668,1,['test'],['test']
Testability,"Now that there's more rigorous sequence dictionary validation a bunch of dictionaries don't jive with the reference, especially files of the form src/test/resources/org/broadinstitute/hellbender/tools/copynumber/gcnv-postprocess/shard_0-calls/interval_list.tsv",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6957:150,test,test,150,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6957,1,['test'],['test']
Testability,"Now that we have good NIO support for reading BAMs from GCS via ReadWalkers, we should look at CRAM as well and evaluate what changes need to be made in htsjdk/GATK to allow NIO to work for CRAMs. It's a separate code path in `SAMReaderFactory`, so I suspect it will not work immediately (though I have not yet tested).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2409:311,test,tested,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2409,1,['test'],['tested']
Testability,"Now that we're using git lfs to manage our large test resources, we need to configure travis to install/init git lfs before running the test suite.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/840:49,test,test,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/840,2,['test'],['test']
Testability,"Now that we've added the complete B37 and HG38 references to our test data (https://github.com/broadinstitute/gatk/pull/5309), we should remove redundant snippets of these references to save space, and replace usages of the snippets with usages of the full-sized references.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5313:65,test,test,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5313,1,['test'],['test']
Testability,Now the validation test data sets are in the normal git file repository.; This allows them to be visually inspected for differences when they have; changed (during a code review). Fixes #5379,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5381:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5381,1,['test'],['test']
Testability,Now throws a UserException.MalformedFile if the resulting header has no; dictionary. Added testLoadFastaDictionaryWithFastaFile to test this case. resolves #2609,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2803:91,test,testLoadFastaDictionaryWithFastaFile,91,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2803,2,['test'],"['test', 'testLoadFastaDictionaryWithFastaFile']"
Testability,"Now, we many Dataflow tests have reads, variants, and reference bases on contig ""2"" as well as ""1"". I also added a useful utility DoFn: PrintCollection.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/747:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/747,1,['test'],['tests']
Testability,"O /data/xieduo/Immun\_genomics/data/Łuksza\_2022\_Nature/bam/PAAD11N.recal\_data.test.table ; ; Using GATK jar /data/xieduo/WES\_pipe/pipeline/bin/gatk-4.2.6.1/gatk-package-4.2.6.1-local.jar ; ; Running: ; ;     java -Dsamjdk.use\_async\_io\_read\_samtools=false -Dsamjdk.use\_async\_io\_write\_samtools=true -Dsamjdk.use\_async\_io\_write\_tribble=false -Dsamjdk.compression\_level=2 -Xmx30G -jar /data/xieduo/WES\_pipe/pipeline/bin/gatk-4.2.6.1/gatk-package-4.2.6.1-local.jar BaseRecalibrator -R /data/reference/gatk\_resource/Homo\_sapiens\_assembly38.fasta -I /data/xieduo/Immun\_genomics/data/Łuksza\_2022\_Nature/bam/PAAD11N.rmdup.bam --known-sites /data/xieduo/WES\_pipe/pipeline/gatk\_resource/dbsnp\_146.hg38.vcf.gz --known-sites /data/reference/gatk\_resource/1000G\_phase1.snps.high\_confidence.hg38.vcf.gz --known-sites /data/reference/gatk\_resource/Mills\_and\_1000G\_gold\_standard.indels.hg38.vcf.gz -O /data/xieduo/Immun\_genomics/data/Łuksza\_2022\_Nature/bam/PAAD11N.recal\_data.test.table ; ; 00:12:20.992 INFO  NativeLibraryLoader - Loading libgkl\_compression.so from jar:file:/data/xieduo/WES\_pipe/pipeline/bin/gatk-4.2.6.1/gatk-package-4.2.6.1-local.jar!/com/intel/gkl/native/libgkl\_compression.so ; ; 00:12:21.140 INFO  BaseRecalibrator - ------------------------------------------------------------ ; ; 00:12:21.141 INFO  BaseRecalibrator - The Genome Analysis Toolkit (GATK) v4.2.6.1 ; ; 00:12:21.141 INFO  BaseRecalibrator - For support and documentation go to [https://software.broadinstitute.org/gatk/](https://software.broadinstitute.org/gatk/) ; ; 00:12:21.141 INFO  BaseRecalibrator - Executing as xieduo@pbs-master on Linux v3.10.0-1160.41.1.el7.x86\_64 amd64 ; ; 00:12:21.141 INFO  BaseRecalibrator - Java runtime: Java HotSpot(TM) 64-Bit Server VM v18+36-2087 ; ; 00:12:21.142 INFO  BaseRecalibrator - Start Date/Time: August 21, 2022 at 12:12:20 AM CST ; ; 00:12:21.142 INFO  BaseRecalibrator - ------------------------------------------------------------ ; ; 00",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8005:15690,test,test,15690,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8005,1,['test'],['test']
Testability,O.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringZfromFORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilterWithSeparateNames.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask3.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMaskReversed.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testNoAction.vcf.idx; src/test/resources/org/broadinstitute/hellben,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:53761,test,test,53761,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,ORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringDPfromINFO.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilteringZfromFORMAT.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testFilterWithSeparateNames.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testGenotypeFilters2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlFilter.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testInvertJexlGenotypeFilterExpression.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask1.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask2.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMask3.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/walkers/filters/VariantFiltration/expected/testVariantFiltration_testMaskReversed.vcf.idx; src/test/resources/org/broadin,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:53597,test,test,53597,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"On branch `ll_CollectAllelicCountsSpark`, I have created a CLI called: `CollectAllelicCountsSpark` ... This tool will have the exact same functionality as `CollectAllelicCounts`, to the point where I can re-use the integration tests. However, the integration tests fail. When I dig deeper in `CollectAllelicCountsSpark`, I see that only 8 RDDs (correct amount: 11) are being passed to processAlignments... Consider the following code:. ```; @Override; protected void processAlignments(JavaRDD<LocusWalkerContext> rdd, JavaSparkContext ctx) {; final String sampleName = SampleNameUtils.readSampleName(getHeaderForReads());; final SampleMetadata sampleMetadata = new SimpleSampleMetadata(sampleName);; final Broadcast<SampleMetadata> sampleMetadataBroadcast = ctx.broadcast(sampleMetadata);. final AllelicCountCollector finalAllelicCountCollector =; rdd.mapPartitions(distributedCount(sampleMetadataBroadcast.getValue(), minimumBaseQuality)); .reduce((a1, a2) -> combineAllelicCountCollectors(a1, a2, sampleMetadataBroadcast.getValue()));; final List<LocusWalkerContext> tmp = rdd.collect();; ....snip....; ```. In this case `tmp` will have a size of 8. However, the integration test would indicate a size of 11 is correct, since 11 intervals are being passed in. Note that `emitEmptyLoci()` returns `true`, so 11 is the correct number as seen in `CollectAllelicCountsSparkIntegrationTest` . . Additionally, in (at least) one result, the counts are wrong. `CollectAllelicCounts` (non-spark) passes the integration test. I have tried a couple of tests to gather more information:. - Is `emitEmptyLoci()` causing an issue? ; Does not appear to be causing the issue. I say this because when set to `false`, I get (essentially) the same error.; - The code uses `mapPartition` and not `map`, does this cause the issue? Why are you doing this?; This does not cause the issue. I refactored the code to use `map` and got the exact same issue. I use `mapPartition` in order to instantiate only one instance of `A",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3823:227,test,tests,227,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3823,2,['test'],['tests']
Testability,"On my Mac, and on my Linux desktop machine at home, but not on Travis, I consistently fail to run unit tests. The precise location of the failure varies somewhat, but it's always in this vicinity:. ```Test: Test method testWritingToFileURL[0](~me/IdeaProjects/gatk/src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf, .vcf)(org.broadinstitute.hellbender.engine.spark.datasources.VariantsSparkSinkUnitTest) produced standard out/err: 14:49 DEBUG: [kryo] Write object reference 809: INFO```. The failing test makes my poor little machine's fan run like mad for a while, and then everything gets very quiet, but the test never returns.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2490:103,test,tests,103,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2490,7,"['Test', 'test']","['Test', 'test', 'testWritingToFileURL', 'tests']"
Testability,"Once again I've managed to convince David R. to let me merge with some tech debt as follows:; - [ ] Add to GnarlyGenotyper an integration test like testRawAndFinalizedAlleleSpecificAnnotationsThoroughly() for GGVCFs; - [ ] Add a direct unit test for makeReducedAnnotationString() if you exposed it as package-accessible; - [ ] ~Break out finalized key definition, promote getKeyNames and getRawKeyNames to default methods in ReducibleAnnotation interface~; - [ ] One last `ann.getRawKeyNames().get(0)` in GnarlyGenotyperEngine",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6203:138,test,test,138,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6203,3,['test'],"['test', 'testRawAndFinalizedAlleleSpecificAnnotationsThoroughly']"
Testability,"Once https://github.com/broadinstitute/gatk/pull/2389 is merged, we need to make a simple PR against the tool to allow it to work with NIO, and add a GCS-based test case. This should be an easy change and < 1 day of work.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2608:160,test,test,160,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2608,1,['test'],['test']
Testability,"Once we do https://github.com/broadinstitute/gatk/issues/2817, we can disable the non-docker unit and integration tests in travis, saving a huge amount of time and resources. (We should keep the instance of the tests that run on the Oracle JDK, however).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3294:114,test,tests,114,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3294,2,['test'],['tests']
Testability,"Once we have built junction trees for linked de Bruijn graphs we can use them to find phased haplotypes that handle repeats / cycles. This essentially amounts to running the current Dijkstra's algorithm on junction trees (which are, after all, DAGs) instead of `SeqGraph`s. That is, the edge weights can remain log branching ratios. The complication is that while using the the ""oldest"" junction tree for edge weights we must also traverse younger junction trees in order to rely on them downstream. We may or may not want to work out a rule for when to use a younger junction tree with much higher coverage than an older one, or to combine multiple trees into a single vote.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5925:311,log,log,311,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5925,1,['log'],['log']
Testability,"One issue with running gCNV properly and successfully (and perhaps other GATK tools that work with different data types) is that different data types requires running GATK using wildly different choice of several tool arguments. For example -- running gCNV on WES and WGS requires very different choice of the following parameters:. interval-psi-scale (WES: 0.002, WGS: 0.0005); std-log-mean-bias (WES: 10.0, WGS: 1.0); cnv-coherence-length (WES: 100000, WGS: 5000); ... There are two conceivable solutions:. 1) Declaring all such arguments as _required_, removing default values, and effectively forcing the user to do research (documentation, forum, tutorials) and to set the arguments appropriately according to the use case. This solution is not ideal since it delegates the burden to the user. If we have good default values for WES and WGS, it makes sense to somehow include both in the tool. 2) Declaring all such arguments as optional, though, providing a mechanism to allow the user to _start_ with good default values, with the possibility of overriding them. For example, we can add one required argument to set the baseline:; ```; gatk GermlineCNVCaller \; --set-defaults-for-data-type WES; ...; ```; Under the hood, `--set-defaults-for-data-type WES` would set several optional parameters. Also, by running:. ```; gatk GermlineCNVCaller \; --set-defaults-for-data-type WGS; --std-log-mean-bias 1.0 \; --interval-psi-scale 0.0001 \; ...; ```; the user is asking to override `std-log-mean-bias` and `interval-psi-scale` from shipped default values for `WGS` data type. We can definitely provide such mechanisms in a tool-by-tool basis as needed, though, if many tools can benefit from such a mechanism, it makes sense to provide it in Barclay.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4719:383,log,log-mean-bias,383,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4719,3,['log'],['log-mean-bias']
Testability,"One more step towards using this new tool. Does:; * output a single VCF containing `<INS>`, `<DEL>`, `<DUP>`, `<INV>` calls (there will be more `<INV>` calls, but that cannot happen until someone takes a look at PR #4789 and check if the proposed algorithm makes sense); * since this new tool applies more permissive filters on MQ and alignment length of the assembly contigs' mappings, I've introduced some downstream filtering parameters allowing to filter VCF records based on annotations `MAPPING_QUALITIES` and `MAX_ALIGN_LENGTH`; the default value is chosen after some experimentation using the CHM PacBio as truth and the branch ; sh-sv-interlvatree-eval.; * cleans up VCF headers and related tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4996:700,test,tests,700,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4996,1,['test'],['tests']
Testability,"One of our tests (BaseRecalibratorDataflow, on cloud) started failing. It turns out that the culprit is a Dataflow limitation. This is what I got back from the DF team:. _I examined logs of this pipeline on the service and in this case, metadata.items[3] is the pipelineOptions item, whose biggest part is --filesToStage, built from the classpath: it seems you have too many .jar's in classpath, or the jars have too long (absolute) filenames.; It seems that you are using Gradle and all the absolute filenames point deep inside gradle cache directories.; So, as a work-around, you could consider asking Gradle to build a self-contained distribution of your application, put it in a less deep directory, and run that._. We may run into this problem for other tests as well, so it's good to know about the issue.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/580:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/580,3,"['log', 'test']","['logs', 'tests']"
Testability,"One of the example commands in CalculateGenotypePosteriors describes the usage of the `-supporting` argument and the `--num-reference-samples-if-no-call` argument at the same time:; ```; gatk --java-options ""-Xmx4g"" CalculateGenotypePosteriors \; -V input.vcf.gz \; -O output.vcf.gz \; -supporting 1000G.phase3.integrated.sites_only.no_MATCHED_REV.hg38.vcf.gz \; --num-reference-samples-if-no-call 2504; ```; Calculate the posterior genotypes of a callset, and impose that a variant *not seen* in the external panel is tantamount to being AC=0, AN=5008 within that panel. We don't have any tests that use both of these arguments at the same time, but it looks like the behavior in that case is wrong. PosteriorProbabilitiesUtils adds numRefSamplesFromMissingResources regardless of whether there was an overlapping variant in the panel or not, effectively diluting the AF of all the variants used as priors and making the number of reference alleles very inconsistent across variants.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4760:590,test,tests,590,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4760,1,['test'],['tests']
Testability,One of the non-cloud tests in BQSRSparkIntegrationTest tries to use the API key when its not required; as a result the test fails when the key isn't set even though it should pass. Introduced in the test refactoring that was part of https://github.com/broadinstitute/gatk/pull/1533.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1590:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1590,3,['test'],"['test', 'tests']"
Testability,"One of the variants is no longer emitted in vcf, potentially due to #5078. Somehow this was not caught by the remote test for #4895.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5091:117,test,test,117,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5091,1,['test'],['test']
Testability,"One unit test (`ReadsSparkSinkUnitTest.readsSinkTest[3]`) takes ~1/4 of our test time at around 4-5 minutes when running on travis. It only takes ~20s on my local machine, so I suspect it may be running out of memory on travis and spending all of it's time thrashing, garbage collecting, and spilling to disk. . We should either remove this tests or figure out how to fix it.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1342:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1342,3,['test'],"['test', 'tests']"
Testability,Only run certain VAT tests on larger callsets [VS-823],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8685:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8685,1,['test'],['tests']
Testability,"Oops, looks like they just updated the URL last week. Perhaps another reason why we should host these dependencies or have some simple contingencies for testing them other than manually building the base image.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3712:153,test,testing,153,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3712,1,['test'],['testing']
Testability,"Optionally extract VCFs in bgzipped compression format. Integration test - [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/60357098-e6f2-4264-a322-c3088ce36152). [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/2c4dea90-367f-4875-939a-ce0b9ae296e7) is an example extract using bgzip; [Here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/7a8413da-499b-4f93-ba85-554937249bd4) is an example extract not using bgzip (so, just '.gz')",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8809:68,test,test,68,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8809,1,['test'],['test']
Testability,OrElse(QueryExecution.scala:98); 	at org.apache.spark.sql.execution.QueryExecution$$anonfun$eagerlyExecuteCommands$1.applyOrElse(QueryExecution.scala:94); 	at org.apache.spark.sql.catalyst.trees.TreeNode.$anonfun$transformDownWithPruning$1(TreeNode.scala:512); 	at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:104); 	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDownWithPruning(TreeNode.scala:512); 	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.org$apache$spark$sql$catalyst$plans$logical$AnalysisHelper$$super$transformDownWithPruning(LogicalPlan.scala:31); 	at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning(AnalysisHelper.scala:267); 	at org.apache.spark.sql.catalyst.plans.logical.AnalysisHelper.transformDownWithPruning$(AnalysisHelper.scala:263); 	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.transformDownWithPruning(LogicalPlan.scala:31); 	at org.apache.spark.sql.catalyst.plans.logical.LogicalPlan.transformDownWithPruning(LogicalPlan.scala:31); 	at org.apache.spark.sql.catalyst.trees.TreeNode.transformDown(TreeNode.scala:488); 	at org.apache.spark.sql.execution.QueryExecution.eagerlyExecuteCommands(QueryExecution.scala:94); 	at org.apache.spark.sql.execution.QueryExecution.commandExecuted$lzycompute(QueryExecution.scala:81); 	at org.apache.spark.sql.execution.QueryExecution.commandExecuted(QueryExecution.scala:79); 	at org.apache.spark.sql.execution.QueryExecution.assertCommandExecuted(QueryExecution.scala:133); 	at org.apache.spark.sql.DataFrameWriter.runCommand(DataFrameWriter.scala:856); 	at org.apache.spark.sql.DataFrameWriter.saveToV1Source(DataFrameWriter.scala:387); 	at org.apache.spark.sql.DataFrameWriter.saveInternal(DataFrameWriter.scala:360); 	at org.apache.spark.sql.DataFrameWriter.save(DataFrameWriter.scala:239); 	at org.apache.spark.sql.DataFrameWriter.parquet(DataFrameWriter.scala:789); 	at StudentAws$.delayedEndpoint$StudentAws$1(StudentAws.scala:,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8587:6064,log,logical,6064,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8587,2,['log'],['logical']
Testability,OrFewer(BinaryCodec.java:421) ; ; at htsjdk.samtools.util.BinaryCodec.readBytes(BinaryCodec.java:394) ; ; at htsjdk.samtools.util.BinaryCodec.readBytes(BinaryCodec.java:380) ; ; at htsjdk.samtools.BAMRecordCodec.decode(BAMRecordCodec.java:282) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.getNextRecord(BAMFileReader.java:866) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIndexIterator.getNextRecord(BAMFileReader.java:1005) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.advance(BAMFileReader.java:840) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.next(BAMFileReader.java:834) ; ; at htsjdk.samtools.BAMFileReader$BAMFileIterator.next(BAMFileReader.java:802) ; ; at htsjdk.samtools.BAMFileReader$BAMQueryFilteringIterator.advance(BAMFileReader.java:1058) ; ; at htsjdk.samtools.BAMFileReader$BAMQueryFilteringIterator.next(BAMFileReader.java:1048) ; ; at htsjdk.samtools.BAMFileReader$BAMQueryFilteringIterator.next(BAMFileReader.java:1012) ; ; at htsjdk.samtools.SamReader$AssertingIterator.next(SamReader.java:591) ; ; at htsjdk.samtools.SamReader$AssertingIterator.next(SamReader.java:570) ; ; at org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator.loadNextRecord(SamReaderQueryingIterator.java:119) ; ; at org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator.next(SamReaderQueryingIterator.java:156) ; ; at org.broadinstitute.hellbender.utils.iterators.SamReaderQueryingIterator.next(SamReaderQueryingIterator.java:29) ; ; at org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator.next(SAMRecordToReadIterator.java:27) ; ; at org.broadinstitute.hellbender.utils.iterators.SAMRecordToReadIterator.next(SAMRecordToReadIterator.java:13) ; ; at org.broadinstitute.hellbender.utils.iterators.ReadTransformingIterator.next(ReadTransformingIterator.java:42) ; ; at org.broadinstitute.hellbender.utils.iterators.ReadTransformingIterator.next(ReadTransformingIterator.java:14) ; ; at org.broadinstitute.hellbender.utils.iterators,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7582:10097,Assert,AssertingIterator,10097,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7582,1,['Assert'],['AssertingIterator']
Testability,"Original behavior during development relied on Spark mllib's computeSVD to return something sensible even if a PoN was built with only one sample; typically this would yield a singular value of 0 and an eigenvector of NaNs (although it can also result in miscellaneous exceptions, depending on how many zeros are contained in the single-row matrix on which we perform SVD). At one point, I added a check that at least one non-negligible singular value was returned (even when building a PoN with multiple samples). This spoiled the ability to build single-sample PoNs (which is useful if you only have a matched pair). I've added more explicit logic about how single-sample PoNs are built. Now we explicitly set both the singular value and eigenvector to zero. Closes #4174.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4191:644,log,logic,644,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4191,1,['log'],['logic']
Testability,"Original report by @samuelklee (see https://github.com/broadinstitute/barclay/issues/189):; > I noticed that Javadoc @value tags are not being rendered correctly in e.g. https://gatk.broadinstitute.org/hc/en-us/articles/9570326304155-ScoreVariantAnnotations-BETA-. I used these tags to specify the variables corresponding to argument names (e.g., StandardArgumentDefinitions#INTERVALS_LONG_NAME instead of intervals , USE_ALLELE_SPECIFIC_ANNOTATIONS_LONG_NAME instead of use-allele-specific-annotations, etc.), and while they show up correctly when rendering the Javadoc within IntelliJ, it seems the same is not true on the GATK website. Is there an easy fix in the code for generating these docs, or should I just avoid using this tag?. My original response:. > I tested this using the new Java 17 doclets in the hope that it would just work, but the result is the same. However, the new Java language model classes make it easy to interpolate these, so I’ll fix this in the barclay Java 17 branch. However, in looking more closely, it's not as easy to fix as I first thought, and the problem is a little deeper than I first realized. Although it's easy to detect these using the new Java 17 apis, it's more difficult to retrieve the actual values. And even then, because the gatkdoc process only consumes a subset of the classes consumed by the javadoc process (it only sees `@DocumentedFeature`s), it's quite easy to reference something in the javadoc comment that can be resolved by javdoc, but not by gatkdoc. But it appears that even the javadoc process isn't rendering these tags correctly. Here is the raw javadoc comment:; ```; * Input VCF file. Site-level annotations will be extracted from the contained variants (or alleles,; * if the {@value USE_ALLELE_SPECIFIC_ANNOTATIONS_LONG_NAME} argument is specified).; ```; The rendering in javadoc (the argument name is missing entirely, but it should be interpolated):; <img width=""780"" alt=""Screen Shot 2023-01-05 at 12 17 43 PM"" src=""https://",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8146:766,test,tested,766,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8146,1,['test'],['tested']
Testability,"Original ticket by @jmthibault79 . CombineGVCFs with --convertToBasePairResolution doesn't fully cover the intervals given. I'm trying to create very small files (for NAVS testing) from GVCFs. An input file has these reference blocks. Let's call them Blocks 1,2,3:. ```; 1 10189399 . A <NON_REF> . . END=10189558 GT:DP:GQ:MIN_DP:PL 0/0:94:99:46:0,96,1440; 1 10190507 . A <NON_REF> . . END=10190923 GT:DP:GQ:MIN_DP:PL 0/0:214:99:45:0,105,1575; 1 10192376 . C <NON_REF> . . END=10192406 GT:DP:GQ:MIN_DP:PL 0/0:14:42:8:0,21,297; ```. This command line with an interval entirely contained in Block 2 produces nothing:. ```; java -jar <GATK> \; -T CombineGVCFs \; -L 1:10,190,850-10,190,889 \; --convertToBasePairResolution \; -V <infile> -o <outfile>; ```. Expanding the interval to overlap portions of Block 1 and Block 3 produces results for Block 2 and the portion of Block 3 which corresponds to my intervals. It appears that only reference blocks which begin in the supplied intervals are processed. ---. > @jmthibault79:; > This may be a more general problem with processing GVCFs, and it may also relate to the CombineGVCFs bug @valentinruanorubio is working on.; > ; > @vruano:; > I suspect that this is rather something to do with the VCF RodBinding processing code not using the END info field to determine whether a record overlaps a position. I guess it relies on the POS value and the length of the REF string to do that. That should be fixed in the (VCF) ROD traversal code. Perhaps we could have a GVCF specific code if it does help.; > Also if it were possible to explicitly get the previous record that does not overlap the position programmatically, that would be enough to address this issue. However the other solution above would be cleaner.; > ; > @eitanbanks:; > To fix this problem the getEnd() method of VariantContext would need to check for the presence of the ""END"" annotation in the INFO field. However, I'm not sure the INFO field is always decoded at this point (and doing s",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/265:172,test,testing,172,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/265,1,['test'],['testing']
Testability,"Other transcript field is not sorted, so it can cause issues with automatic testing",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5927:76,test,testing,76,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5927,1,['test'],['testing']
Testability,Our Jenkins tests are reporting a major performance regression in ApplyBQSR. We should figure out what's going on.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4618:12,test,tests,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4618,1,['test'],['tests']
Testability,"Our R dependency is primarily for producing plots. It could be possible to create plots using javascript instead. Javascript plots have several potential advantages but also several major downsides. The biggest and most obvious drawback is that we don't have any code to produce them yet, and they are likely harder to generate and experiment with than R scripts. . The advantage would be that we could avoid requiring an R installation to run hellbender scripts, we could potentially also include interactive plotting or other neat tricks to make the plots more useful. I see 2 possible routes to replacing Rscripts with javascript. The first would be for tools that require graphs to perform some html generation and produce html reports with embedded javascript. The user could then open these in their browser and view the plots ( much like how our test suite report and jacoco is done). . A different option would be to use javascript plotting libraries directly within the jvm to generate SVG. Java 8 has a new javascript engine which is supposed to be reasonably fast and offers access to java objects from within it. Unfortunately it doesn't offer a full DOM like a browser does, so most existing javascript libraries will fall over. It seems like it would take a lot of hacking to get something like d3 to run directly on the jvm. (someone has done something of the kind here: http://jazdw.net/content/server-side-svg-generation-using-d3js) . Other options would be to use the javafx web panes to display a browser directly, or to plot directly on a canvas. Either of these options seem like they would be painful and awful.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/248:853,test,test,853,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/248,1,['test'],['test']
Testability,Our [spark tests on jenkins](https://gatk-jenkins.broadinstitute.org/view/Performance/) are failing with:; ```; Runtime.totalMemory()=554696704; ***********************************************************************. A USER ERROR has occurred: Failed to read bam header from gs://broad-gatk-test-jenkins/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam; Caused by:null. ***********************************************************************; org.broadinstitute.hellbender.exceptions.UserException: Failed to read bam header from gs://broad-gatk-test-jenkins/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam; Caused by:null; 	at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getHeader(ReadsSparkSource.java:189); 	at org.broadinstitute.hellbender.engine.spark.datasources.ReadsSparkSource.getParallelReads(ReadsSparkSource.java:93); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.getUnfilteredReads(GATKSparkTool.java:238); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.getReads(GATKSparkTool.java:212); 	at org.broadinstitute.hellbender.tools.spark.transforms.markduplicates.MarkDuplicatesSpark.runTool(MarkDuplicatesSpark.java:68); 	at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:353); 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:111); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:169); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:188); 	at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:121); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:142); 	at org.broadinstitute.hellbender.Main.main(Main.java:218); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.Na,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2449:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2449,3,['test'],"['test-jenkins', 'tests']"
Testability,Our current logging level argument (VERBOSITY) is only hooked up to the legacy Picard logger. We need to hook this up to log4j as well. Related to:; https://github.com/broadinstitute/hellbender/issues/146 (standardize on log4j across GATK + Picard); https://github.com/broadinstitute/hellbender/issues/216 (fix log4j error that happens on every run),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/243:12,log,logging,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/243,2,['log'],"['logger', 'logging']"
Testability,"Our jenkins nightly tests are failing, but they're reporting success. This shouldn't be happening. . Some of the failures are due to #3067, but the spark failures look like something else is causing them. Notice the very short runtimes because nothing is actually happening.; <img width=""958"" alt=""screen shot 2017-06-09 at 2 04 31 pm"" src=""https://user-images.githubusercontent.com/4700332/26988271-a61ab3fc-4d1c-11e7-9110-9941888b66ce.png"">. This ticket is to fix the fact that the tests report success even when they fail, not to fix the tests themselves.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3077:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3077,3,['test'],['tests']
Testability,Our jenkins worker nodes are dead with out of disk space errors. We need to either clean stuff off of them or give them more space. . We should determine what's eating their disk space as well so we can prevent this in the future. We may need to do some clean up after some of our tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2180:281,test,tests,281,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2180,1,['test'],['tests']
Testability,"Our launch script gatk-launch now uses a bunch of system properties for things like compression, async reading, deflater. Our testing infrastructure must use the same settings. for @lbergelson",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1630:126,test,testing,126,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1630,1,['test'],['testing']
Testability,Our travis builds are getting killed intermittently with out-of-memory errors -- it's unclear whether it's the test suite JVM or the JVM with gradle that is getting killed. This is happening more and more often...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1113:111,test,test,111,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1113,1,['test'],['test']
Testability,Our variant comparison in our test utils is bad,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5572:30,test,test,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5572,1,['test'],['test']
Testability,Output log messages during engine operations that may be time-consuming.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/360:7,log,log,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/360,1,['log'],['log']
Testability,Overhaul tests on SV assembly-based non-complex breakpoint and type inference code,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4835:9,test,tests,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4835,1,['test'],['tests']
Testability,Oversight leaving some hardcoded debug in with the tests...,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6089:51,test,tests,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6089,1,['test'],['tests']
Testability,"Overview: see [this presentation](https://docs.google.com/presentation/d/1jPKYcaMcpT_e1l8L6D3wn7wBvC-yKt4GVrgeeTRBrss/edit#slide=id.g7f3200a976_0_97). ![image](https://user-images.githubusercontent.com/1423491/136983924-338faca1-30f0-4f1e-92c7-b34f091050ca.png). WDL; * updated WDLs to support parameterized loading of PET and/or RANGES; * enhanced inline schemas in WDL to JSON to allow for declaring required fields. Common; * updated AvroFileReader to use GATKPath instead of String for file, allows us to read from gs:// directly; * changed ""mode"" from EXOMES/GENOMES/ARRAYS (unused) to PET/RANGES; * promoted GQStateEnum to top-level class (it was inside PetTsvCreator but used across the codebase); * added numerical GQ value to GQStateEnum; * max deletion size is 1000bp . Import; * added flags to enable writing of PET and/or VET; * code to create RefRanges with pluggable writer and TSV/Avro implementations; ; Extract; * add parameter to parameterize inferred GQ value; * support to read VET/Ranges data from Avro files (to support testing); * Entire implementation of ranges support; * Note there is a maximum supported DELETION size. Upstream deletions larger than this will not generate downstream spanning indels. Testing; * added new integration test for ranges extract; * added various unit tests; * (IN PROCESS) scientific tieout against 1k; * scale testing up to 90k once we've move to v2 reblocking. How to perform scientific tieout; 1. Run the ""GvsIngest"" pipeline with load_ref_ranges = true, this will load both the PET and REF_RANGES tables; 2. Run Create Alt Allele, Training, etc as normal; 3. Extract a callset twice -- once with mode = 'PET' (the default) and once with mode = 'RANGES'; 4. Compare the resulting VCFs",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7498:1042,test,testing,1042,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7498,5,"['Test', 'test']","['Testing', 'test', 'testing', 'tests']"
Testability,PCollection<Read> -> BAM file. With tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/545:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/545,1,['test'],['tests']
Testability,PG is on by default and I have a test to prove it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1722:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1722,1,['test'],['test']
Testability,"PR #1068 had the unintended side effect of removing the method responsible for; stripping out SAMFileHeaders on Spark. This commit restores that method, and adds; a unit test to verify that all reads emitted by ReadSparkSource are headerless.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1110:170,test,test,170,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1110,1,['test'],['test']
Testability,PairHMM tests are excessive / consume too much test suite runtime,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/630:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/630,2,['test'],"['test', 'tests']"
Testability,PairHMM tests consume about 30% of the test suite runtime. This is probably because they are combinatorial in nature. We should see if we can reduce this intelligently without compromising safety.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/630:8,test,tests,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/630,2,['test'],"['test', 'tests']"
Testability,Parameterize the logging frequency for ProgressLogger.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8662:17,log,logging,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8662,1,['log'],['logging']
Testability,"Paraphrasing an email from Chunyang Bao:. > In the Dockerfile Line 18, the source code is “RUN ln -s /testdata src/test/resources”. And, I just want to know whether it should be “RUN ln -s src/test/resources /testdata”. Does it make sense? If I change this link, I can get more results from the test script (/root/run_unit_tests.sh). Will double check this when I get a chance, but perhaps it will be immediately obvious to @lbergelson.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3730:102,test,testdata,102,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3730,5,['test'],"['test', 'testdata']"
Testability,"Part of road map laid out in #4111 . ## Consolidate logic, update variant representation (PR#4663) . ### consolidate logic in the following classes. - [x] `AssemblyContigAlignmentSignatureClassifier` now gone, its inner enum class `RawTypes` is moved to `AssemblyContigWithFineTunedAlignments.AlignmentSignatureBasicTypes` and reduced into fewer cases (`Suspicious`, `Simple` and `Complex`). - [x] static method `BreakpointsInference.inferFromSimpleChimera()` now moved to state query method `ChimericAlignment.inferType()`. - [x] `AssemblyContigWithFineTunedAlignments.hasIncompletePictureFromTwoAlignments()` merged with `ChimericAlignment.hasIncompletePicture()`. ### update how variants are represented. - [x] change `SVLEN` for `CPX` variants to the difference between _[alt haplotype sequence length]_ and _[affected reference region length]_, which is following the technical definition of `SVLEN` in VCF spec. - [x] change `RPL` output to one of these (note that test coverage is expected); - [x] ins/del, when del/ins bases are < 50 and annotate; when type is determined as ins, the POS will be 1 base before the micro-deleted range and END will be end of the micro-deleted range, where the REF allele will be the corresponding reference bases.; - [x] ins and del when both are >= 50, and link by `EVENT`. - [x] change `SVTYPE=DUP` to`SVYTPE=INS` when the duplicated region is shorter than 50 bp (tests). Note that this will lead to `INS` records with `DUP_REPEAT_UNIT_REF_SPAN` and `DUP_SEQ_CIGARS` (when available). In addition, we are currently treating duplication expansion as insertion. ; The VCF spec doesn't force `DUP` records as such.; If we decide to allow `POS` and `END` to designate the beginning and end of the duplicated reference region, we need to make at least the following change:. - [ ] shift the left breakpoint to the right by 1 base compared to the current implementation, and ; - [ ] `downstreamBreakpointRefPos = complication.getDupSeqRepeatUnitRefSpan().getEnd();`",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4663:52,log,logic,52,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4663,2,['log'],['logic']
Testability,"Passing Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/ad05b4d1-7aed-4482-8b5c-ced7b87d2d37).; Verified that GQ0 dropped in 'hail_lite' run and not in 'hail_vcf' run; (queries of count by state from ref ranges table):. **Hail Lite (Hail path, drop state 0):; state count**; 2 2495387; 3 4773472  ; 4 5959290. **Lite VCF (VCF path, drop_state 40):; state count**; 0 2764630; 2 2495387; 3 4773472. Spun up a notebook and ran the vds_validation.py script on the VDS generated by 'hail_lite'. And it passed:. > 2023-10-04 19:08:01.278 Hail: WARN: cols(): Resulting column table is sorted by 'col_key'.; > To preserve matrix table column order, first unkey columns with 'key_cols_by()'; > checking that:; > * no reference blocks have GQ=0; > * all ref blocks have END after start; > * all ref blocks are max 1000 bases long; > running densify on 200kb region (0 + 1) / 1]; > took 10.9s to densify 0 rows after interval query; > Hail VDS validation successful======================================(1 + 0) / 1]",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8538:20,Test,Test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8538,1,['Test'],['Test']
Testability,Passing Integration test (using built-in dockers) [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/d2063e26-a22e-412e-ad91-aa2b14fbb7ec).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8566:20,test,test,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8566,1,['test'],['test']
Testability,Passing integration tests (all chrs) [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/be35d4ae-7fd5-48ae-b7e1-a7c74eddd4ab); and chr20/x/y [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f3222e37-13a4-43fc-a341-cd7cdafed777),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8948:20,test,tests,20,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8948,1,['test'],['tests']
Testability,Passing run where generated from a VDS [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/12712c01-46c5-4968-b687-0360ac09f8e6); Passing run where used an existing sites-only VCF [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/e01f9bf2-2224-4be3-b09e-bf6289126621); Integration Test run [here](https://job-manager.dsde-prod.broadinstitute.org/jobs/62087a48-696d-4ce9-aff8-243110c3dce0),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8977:363,Test,Test,363,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8977,1,['Test'],['Test']
Testability,Passing workflow here: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Exome%20Data%2049k/job_history/38d22351-33cd-4c2c-abf9-feccda71d40a. Mostly passing integration test here: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/4a7e6628-6c19-442d-90b8-202da267d8bb; (the failure was a bq time out.),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8374:167,test,test,167,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8374,1,['test'],['test']
Testability,"PathSeqFilterSpark and PathSeqPipelineSpark clear all the sequences from the input header file, as the Bwa step only accepts unaligned reads. However, the header sequences were being cleared before the reads were loaded, causing WellformedReadFilter to remove any mapped reads (by failing to find the corresponding sequence name in the header). This PR fixes this bug by creating a deep copy of the header. It also refactors this code, which is used in both the Filter and Pipeline tools, into a utility function `checkAndClearHeaderSequences()` in PSUtils. Tests have also been added/updated accordingly.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3453:558,Test,Tests,558,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3453,1,['Test'],['Tests']
Testability,Picard added a test that runs all the data providers and makes sure they don't error out and cause skipped tests. Maybe we should add a similar test. see https://github.com/broadinstitute/picard/pull/931,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3619:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3619,3,['test'],"['test', 'tests']"
Testability,"Picard had its Optical duplicate finding code refactored recently, additionally it has been noticed as part of #4656 that we are currently not properly accounting for the read groups when we stratify reads in MarkDuplicatesSpark which will likely cause problems for bams with more than one read group. Additionally better test coverage for multiple read groups should be added to ensure we are handling them sanely.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4700:322,test,test,322,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4700,1,['test'],['test']
Testability,PileupElementUnitTest no longer skipping a test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1977:43,test,test,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1977,1,['test'],['test']
Testability,PileupElementUnitTest.testBadOffsetWithinBounds was being skipped because the data provider name was wrong.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1977:22,test,testBadOffsetWithinBounds,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1977,1,['test'],['testBadOffsetWithinBounds']
Testability,Piping picard tools in GATK fails because of logging to STDOUT,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4135:45,log,logging,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4135,1,['log'],['logging']
Testability,Placed a call to forceJVMLocaleToUSEnglish in Main.runCommandLineProgram so that integration tests can take advantage of this. Fixes #2557,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3064:93,test,tests,93,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3064,1,['test'],['tests']
Testability,"Please find attached samtools stats file. sample1.markdup.sorted.stats is before BQSR and ApplyBQSR; sample1.stats is after BQSR and ApplyBQSR. As you can see, ; before ApplyBQSR (NA12878-P.markdup.sorted.stats.txt), the raw total sequences is 119998832; After ApplyBQSR (NA12878-P.stats.txt), the raw total sequences is 120169477. gatk_applyBQSR_error.log is the log file of the applyBQSR step. Do you have any ideas?. [gatk_applyBQSR_error.log](https://github.com/broadinstitute/gatk/files/12745229/gatk_applyBQSR_error.log); [NA12878-P.markdup.sorted.stats.txt](https://github.com/broadinstitute/gatk/files/12745230/NA12878-P.markdup.sorted.stats.txt); [NA12878-P.stats.txt](https://github.com/broadinstitute/gatk/files/12745236/NA12878-P.stats.txt)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8535:353,log,log,353,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8535,4,['log'],['log']
Testability,Please ignore this. It will not be merged. Need to test Jenkins hook.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2005:51,test,test,51,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2005,1,['test'],['test']
Testability,Port GATKDocs system + tests from GATK3 to new arg parser project,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2209:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2209,1,['test'],['tests']
Testability,"Port VQSR tests, slimming down as necessary to achieve reasonable runtime",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2063:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2063,1,['test'],['tests']
Testability,Port of the GATK3 Version of CombineGVCFs and its associated integration tests. . Fixes #16,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3718:73,test,tests,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3718,1,['test'],['tests']
Testability,"Port the needed pieces of the old ROD system over to the new framework. The basic interface should be a map from logical names to lazy queries over the current interval for each source of variants. Unlike ReadsDataSource, VariantsDataSource should not merge variants from different sources into a single stream. Initial implementation may only need to support VCF/BCF, with support for arbitrary codecs added later.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/93:113,log,logical,113,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/93,1,['log'],['logical']
Testability,"Port the remainder of tools in picard.sam, excluding ViewSam (redundant with PrintReads) and SplitSamByLibrary (see https://github.com/broadinstitute/hellbender/issues/140). . Note that new unit tests will have to be written for some of these tools (see https://github.com/broadinstitute/hellbender/issues/144).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/156:195,test,tests,195,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/156,1,['test'],['tests']
Testability,Ported OverclippedReadFilter and associated tests from GATK3,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1923:44,test,tests,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1923,1,['test'],['tests']
Testability,"Ported `CallableLoci` from GATK3 as an experimental tool. I have not included tests, but have verified on a test file that the statistics and regions are basically identical to the GATK3 results.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/9031:78,test,tests,78,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/9031,2,['test'],"['test', 'tests']"
Testability,Porting Pileup (https://github.com/broadinstitute/gatk/issues/1581) and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1836:72,test,tests,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1836,1,['test'],['tests']
Testability,"Porting the GVCFWriter and tests. the first commit includes the original gatk classes modulo some import statements and package names; the next commit is my changes on top of it. closes #736. <!-- Reviewable:start -->. [<img src=""https://reviewable.io/review_button.png"" height=40 alt=""Review on Reviewable""/>](https://reviewable.io/reviews/broadinstitute/gatk/859). <!-- Reviewable:end -->",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/859:27,test,tests,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/859,1,['test'],['tests']
Testability,Post Java 17 build/CI/log cleanup issues,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8087:22,log,log,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8087,1,['log'],['log']
Testability,Pre-req to testing on Java 11,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6145:11,test,testing,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6145,1,['test'],['testing']
Testability,"Prevent a git lfs error that was caused by accidentally checking storing a .gitattributes file; in gitlfs. When checkout out the repository for the first time or moving from an old commit to a newish one, there's been an error report from git lfs. This was caused by accidentally checking a .gitattributes file into git-lfs which then is read as part of the git lfs checkout process, but since the file is tracked by lfs at the point of checkout it is an lfs stub and throws an error. The problem was introduced here: #6694. See below to reproduce:; ```; git checkout 9951f77c6; git checkout f548ccd708009ddcdfead6525edd23a68d73027b; https://git-lfs.github.com/spec/v1 is not a valid attribute name: src/test/resources/large/mitochondria_references/.gitattributes:1; sha256:cb156adb10b491dd3ba88c2b491bfb021b3c94fc956d36310c67492504fcdc58 is not a valid attribute name: src/test/resources/large/mitochondria_references/.gitattributes:2; Updating files: 100% (363/363), done.; Note: switching to 'f548ccd708009ddcdfead6525edd23a68d73027b'.; ```. This fixes the problem going forward by removing the file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7594:459,stub,stub,459,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7594,3,"['stub', 'test']","['stub', 'test']"
Testability,"Previously we had an issue where our travis builds would use the wrong; commit for the docker builds in the travis pull-request builds but not for the push; builds. This caused the tests from master to run and usually pass. However,; since we are mounting the test data from the correct commit into the; docker, this would result in confusing mismatches where old tests would; try to run on new test data. Fixing the problem by using the $TRAVIS_COMMIT environment variable; instead of the TRAVIS_BRANCH. fixes #3216",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3217:181,test,tests,181,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3217,4,['test'],"['test', 'tests']"
Testability,"Previously, the only integration tests involving assembly region traversal were in gatk-protected,; which led to breakage. Resolves #2172",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2179:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2179,1,['test'],['tests']
Testability,Primarily the large integration tests check for the non-locatable; funcotation factories producing data. Regenerated the expected output from large tests. Fixes #5773,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5774:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5774,2,['test'],['tests']
Testability,"PrintVariantsSpark crashes on dataproc with serialization issues. . Ex:. ```; Running:; gcloud dataproc jobs submit spark --cluster gatk-test-8875b999-b609-4a3f-86ea-973b929fe662 --properties spark.driver.userClassPathFirst=true,spark.io.compression.codec=lzf,spark.driver.maxResultSize=0,spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.kryoserializer.buffer.max=512m,spark.yarn.executor.memoryOverhead=600 --jar gs://hellbender-test-logs/test/staging/lb_staging/gatk-package-4.beta.6-37-g0a135f8-SNAPSHOT-spark_7002d0551e84ddef0d74adf95dfee104.jar -- PrintVariantsSpark --V gs://hellbender/test/resources/large/gvcfs/gatk3.7_30_ga4f720357.24_sample.21.expected.vcf --output gs://hellbender-test-logs/test/staging/lb_staging/756f43e6-4663-49ce-8a8c-bf717b07a8c7.vcf --sparkMaster yarn; Job [dfac787d-19aa-4296-8078-c033cd9f440d] submitted.; Waiting for job output...; 19:43:09.678 WARN SparkContextFactory - Environment variables HELLBENDER_TEST_PROJECT and HELLBENDER_JSON_SERVICE_ACCOUNT_KEY must be set or the GCS hadoop connector will not be configured properly; 19:43:09.837 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/tmp/dfac787d-19aa-4296-8078-c033cd9f440d/gatk-package-4.beta.6-37-g0a135f8-SNAPSHOT-spark_7002d0551e84ddef0d74adf95dfee104.jar!/com/intel/gkl/native/libgkl_compression.so; [November 15, 2017 7:43:09 PM UTC] PrintVariantsSpark --output gs://hellbender-test-logs/test/staging/lb_staging/756f43e6-4663-49ce-8a8c-bf717b07a8c7.vcf --variant gs://hellbender/test/resources/large/gvcfs/gatk3.7_30_ga4f720357.24_sample.21.expected.vcf --spar",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3840:137,test,test-,137,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3840,4,['test'],"['test', 'test-', 'test-logs']"
Testability,"Problem was ocurring in the presence of insertions and deletions. fixes #6139. 1. Changed ReadClipper unit tests:; - The tests in many cases assumed that the unclipped alignment locations do not change when the read is clipped. This is not true: for example if start for cigar; 1M1I3M is 100, the unclipped start for 2H3M is 99. All assertUnclipped calls were; removed; - Alignment now check that the read length remains to be consistent with the CIGAR, that the aligned bases span are consistent with the CIGAR and that the number of clipped bases from the read is consistent with the requested clipping; 2. Hard clipping in ClippingOps was buggy, thus we introduced new tests for it.; 3. Text was refactored for readability; 4. Clipping in ClippingOps did not treat insertions and deletions in the clipped parts of the CIGAR correctly. This was fixed; 5. Alignment re-calculation after clipping did not work correctly if the initial CIGAR contained insertions and deletions; 6. Hard clipping applied to the hard clipped read did not behave correctly",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6280:107,test,tests,107,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6280,4,"['assert', 'test']","['assertUnclipped', 'tests']"
Testability,"Profiling is easier when the stages have names and output logging information. Keeping my branch as close as possible to 'master' means merges are easier, both ways.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/753:58,log,logging,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/753,1,['log'],['logging']
Testability,"Profiling using JBuilder remotely on gsa5 (with a large load from other programs) seem to show that close to or over 50% of the CPU effort is dedicated to filter ""bad"" reads. <img width=""1006"" alt=""screen shot 2018-09-27 at 2 37 59 pm"" src=""https://user-images.githubusercontent.com/791104/46167159-09fe1f00-c263-11e8-8ea0-02621146659b.png"">. To reproduce you may run (or better make your copy and run on a different profiling port and folder):; ```; cd /dsde/working/valentin/crc-profiling; sh run.sh; ```; ```; #run.sh contents:; java -agentpath:./bin/linux-x64/libjprofilerti.so=port=5006,nowait -jar ./gatk-local.jar \ ; CollectReadCounts \ ; -I /dsde/working/CHM/33remap/msb2.m38.bam \; -R /seq/references/Homo_sapiens_assembly38/v0/Homo_sapiens_assembly38.fasta \; -O /tmp/test.tsv -L hg38.interval_list -imr OVERLAPPING_ONLY; ```. The sample was chosen kinda at random , is a CHM pseudo diploid sample but you could use an alternative. Please change profiling port and output file. On the profiling machine (presumably your laptop or desktop) you need to install JProfiler (Broad owns a license for that).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5233:779,test,test,779,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5233,1,['test'],['test']
Testability,"Program.runTool(CommandLineProgram.java:138); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:192); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:211); at org.broadinstitute.hellbender.Main.runCommandLineProgram(Main.java:160); at org.broadinstitute.hellbender.Main.mainEntry(Main.java:203); at org.broadinstitute.hellbender.Main.main(Main.java:289); ```; #### Steps to reproduce; `gatk HaplotypeCaller -L chr22 -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -I cram/HG00096.final.cram -O test.g.vcf.gz`. The cram is HG0096.final.cram found here:. https://www.internationalgenome.org/data-portal/data-collection/30x-grch38. #### Expected behavior; When I run an earlier version v4.1.7.0, it runs without an error.... ```; gatk HaplotypeCaller -L chr22 -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -I cram/HG00096.final.cram -O test.g.vcf.gz; Using GATK jar /share/pkg.7/gatk/4.1.7.0/install/bin/gatk-package-4.1.7.0-local.jar; Running:; java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /share/pkg.7/gatk/4.1.7.0/install/bin/gatk-package-4.1.7.0-local.jar HaplotypeCaller -L chr22 -R /restricted/projectnb/casa/ref/GRCh38_full_analysis_set_plus_decoy_hla.fa -I cram/HG00096.final.cram -O test.g.vcf.gz; 14:40:45.497 INFO NativeLibraryLoader - Loading libgkl_compression.so from jar:file:/share/pkg.7/gatk/4.1.7.0/install/bin/gatk-package-4.1.7.0-local.jar!/com/intel/gkl/native/libgkl_compression.so; Feb 10, 2021 2:40:45 PM shaded.cloud_nio.com.google.auth.oauth2.ComputeEngineCredentials runningOnComputeEngine; INFO: Failed to detect whether we are running on Google Compute Engine.; 14:40:45.786 INFO HaplotypeCaller - ------------------------------------------------------------; 14:40:45.787 INFO Haplotyp",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7076:5431,test,test,5431,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7076,1,['test'],['test']
Testability,Pulled the HaplotypeCallerIntegration tests into a common interface between spark and non-spark,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5451:38,test,tests,38,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5451,1,['test'],['tests']
Testability,Pushing MLLib down to public to make it easier for people to use with GATK4. Took SVD along for the ride (to test that it works).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1846:109,test,test,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1846,1,['test'],['test']
Testability,Put Spark tests in a 'spark' group so they don't conflict with Spark Dataflow,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/879:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/879,1,['test'],['tests']
Testability,Put expected outputs for benchmark data online and include it in the benchmark documents,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2109:25,benchmark,benchmark,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2109,2,['benchmark'],['benchmark']
Testability,Put expected outputs for benchmark data online somewhere,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1913:25,benchmark,benchmark,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1913,1,['benchmark'],['benchmark']
Testability,"Putting this out for early review as I slowly continue to test the changes. 'Hide whitespace' highly recommended when viewing the diffs due to PEP8-fueled horizontal whitespace fixes in a couple of Python scripts. <img width=""873"" alt=""Screen Shot 2022-08-30 at 8 31 37 AM"" src=""https://user-images.githubusercontent.com/10790523/187438182-d1e0fc8e-88bd-44b8-a286-37efb8aa9933.png"">",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8006:58,test,test,58,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8006,1,['test'],['test']
Testability,Python tools do not show log messages unless --verbosity DEBUG,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4629:25,log,log,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4629,1,['log'],['log']
Testability,QualityScoreDistribution on Spark + tests for it,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/997:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/997,1,['test'],['tests']
Testability,Question: could it be possible to change the logging to sfl4j?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2176:45,log,logging,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2176,1,['log'],['logging']
Testability,Quickstart based integration test [VS-357],MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7812:29,test,test,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7812,1,['test'],['test']
Testability,"R addresses two phasing bugs, https://github.com/broadinstitute/gatk/issues/6463 and https://github.com/broadinstitute/gatk/issues/6845. https://github.com/broadinstitute/gatk/issues/6463 identified a bug in the phasing algorithm which caused the wrong phase information to be output for scenarios where the first variant in a phase set is homozygous variant and it is followed by het variants in opposite phase. Without this change the het variants were incorrectly placed on the same phase strand because the phase set was tied to the hom var variant, and the algorithm assumed that each het variant could be put in the same phase strand as it because it was on all haplotypes. I've modified the algorithm to keep track, for variants that occur on all haplotypes, of which of the haplotypes have already been used for phasing an upstream ""comp"" variant so that further downstream variants can be checked against the remaining set. https://github.com/broadinstitute/gatk/issues/6845 showed an example of phase sets being disrupted by the presence of an alternate haplotype that supported an additional, uncalled, variant in the region. In this case there was an alternate haplotype supported by two reads that supported a SNP downstream of two pairs of SNPs in alternate phase. The presence of an additional haplotype causes the phasing algorithm to break the phase sets in the region. I've modified the algorithm to only use haplotypes that support the alternate alleles present in called variants in phasing by modifying the number that we pass as `AssemblyBasedCallerUtils.constructPhaseSetMapping()`'s `totalAvailableHaplotypes` parameter. In my opinion this ; fix produces output that is still correct and is much easier to understand (since it only depends on sites that are visible in the output VCF), but if anyone objects to this change please let me know. . Non-test code changes for this PR are in two different commits to try to make it easier to understand the scope of the two changes.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7019:1879,test,test,1879,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7019,1,['test'],['test']
Testability,README: R setup for running tests may need OS X update,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5389:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5389,1,['test'],['tests']
Testability,REORDERED.gtf; 14:24:34.591 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/gencode.v34.pc_transcripts.fa -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/gencode/hg38/gencode.v34.pc_transcripts.fa; 14:24:34.599 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/acmg59_test_cleaned.txt -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/acmg_rec/hg38/acmg59_test_cleaned.txt; 14:24:34.608 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/clinvar_20180429_hg38.vcf -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/clinvar/hg38/clinvar_20180429_hg38.vcf; 14:24:34.614 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/LMM_Path_LP_VUS5-variants-6-12-18.sorted_liftover_b38.corrected.vcf -> file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work/3f/5c862c695472a59dfab47a87afe4f3/funcotator_dataSources.v1.7.20200521g/lmm_known/hg38/LMM_Path_LP_VUS5-variants-6-12-18.sorted_liftover_b38.corrected.vcf; 14:24:34.617 INFO DataSourceUtils - Resolved data source file path: file:///datastore/nextgenout5/share/labs/bioinformatics/alanh/test/nf-germline-exome_sim4/work,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6926:5984,test,test,5984,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6926,1,['test'],['test']
Testability,"ROR The class ""org.apache.log4j.Appender"" was loaded by; log4j:ERROR [sun.misc.Launcher$AppClassLoader@6d21714c] whereas object of type; log4j:ERROR ""org.apache.log4j.ConsoleAppender"" was loaded by [org.apache.spark.util.ChildFirstURLClassLoader@6ee12bac].; log4j:ERROR Could not instantiate appender named ""console"".; log4j:ERROR A ""org.apache.log4j.ConsoleAppender"" object is not assignable to a ""org.apache.log4j.Appender"" variable.; log4j:ERROR The class ""org.apache.log4j.Appender"" was loaded by; log4j:ERROR [sun.misc.Launcher$AppClassLoader@6d21714c] whereas object of type; log4j:ERROR ""org.apache.log4j.ConsoleAppender"" was loaded by [org.apache.spark.util.ChildFirstURLClassLoader@6ee12bac].; log4j:ERROR Could not instantiate appender named ""console"".; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; log4j:WARN No appenders could be found for logger (org.apache.spark.SparkContext).; log4j:WARN Please initialize the log4j system properly.; log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.; 09:14:26.202 INFO PrintReadsSpark - Shutting down engine; [June 8, 2017 9:14:26 AM CST] org.broadinstitute.hellbender.tools.spark.pipelines.PrintReadsSpark done. Elapsed time: 0.21 minutes.; Runtime.totalMemory()=494927872; ***********************************************************************. A USER ERROR has occurred: Couldn't write file /user/yaron/output.bam because writing failed with exception /user/yaron/output.bam.parts/_SUCCESS: Unable to find _SUCCESS file. ***********************************************************************; org.broadinstitute.hellbender.exceptions.UserException$CouldNotCreateOutputFile: Couldn't write file /user/yaron/output.bam because writing failed with exception /user/yaron/output.bam.parts/_SUCCESS: Unable to find _SUCCESS file; at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.writeReads(GATKSparkTool.java:255); at org.broadinstitute.hellbender.tools.spark.pipelines.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3066:3974,log,logging,3974,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3066,1,['log'],['logging']
Testability,"Randomly noticed this test that was disabled long ago. Between https://github.com/samtools/htsjdk/pull/704 and https://github.com/samtools/htsjdk/pull/906, it now works.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3507:22,test,test,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3507,1,['test'],['test']
Testability,"Rationale: certain evaluators use a pedigree. This PR is a minor change that lets VariantEvalArgCollection supply the PedigreeValidationType. It defaults to the current behavior, which is to always use STRICT. It includes an integration test to cover this feature.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7240:237,test,test,237,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7240,1,['test'],['test']
Testability,Rc test vat sizes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7658:3,test,test,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7658,1,['test'],['test']
Testability,Rc vs 1365 hatcher testing parquet,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8845:19,test,testing,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8845,1,['test'],['testing']
Testability,Re-enable BED test in IndexFeatureFile.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3507:14,test,test,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3507,1,['test'],['test']
Testability,Re-enable BaseRecalibratorDataflowIntegrationTest.testBQSRFailWithIncompatibleReference once sequence dictionary validation is in,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/625:50,test,testBQSRFailWithIncompatibleReference,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/625,1,['test'],['testBQSRFailWithIncompatibleReference']
Testability,Re-enable IndexFeatureFile and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3060:31,test,tests,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3060,1,['test'],['tests']
Testability,Re-enable IndexFeatureFile test for uncompressed BCF.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6716:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6716,1,['test'],['test']
Testability,Re-enable disabled tests in RequesterPaysIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7763:19,test,tests,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7763,1,['test'],['tests']
Testability,Re-enable htsget tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6668:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6668,1,['test'],['tests']
Testability,Re-enable htsget tests once the server problems are fixed,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6640:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6640,1,['test'],['tests']
Testability,Re-enable htsjdk-dependent CRAM tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1255:32,test,tests,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1255,1,['test'],['tests']
Testability,Re-enable openPrivateFileWithExplicitCredentials test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2879:49,test,test,49,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2879,1,['test'],['test']
Testability,"Re-enable tests for htsget now that the reference server is back to a stable version. * Some tests were disabled due to issues with the htsget reference server, now that it's back to running an older stable version; the tests which work on that version are re-enabled. * Partial fix for #6640 another commit will be needed when the server is upgraded to support fields/tags. The field test had to be disabled because it doesn't seem like the current server version supports the parameter correctly.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6668:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6668,4,['test'],"['test', 'tests']"
Testability,Re-enable the disabled tests in RequesterPaysIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7810:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7810,1,['test'],['tests']
Testability,Re-enable this test once the sequence dictionary work in https://github.com/broadinstitute/hellbender/tree/ek_seqdict_101 is merged. Requires trivial changes to dataflow BQSR.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/625:15,test,test,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/625,1,['test'],['test']
Testability,Read Orientation Model test case where the variant is no longer emitted in the vcf,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5091:23,test,test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5091,1,['test'],['test']
Testability,"Read count logging for PathSeq Filter, Score, and Pipeline tools",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3611:11,log,logging,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3611,1,['log'],['logging']
Testability,"Read counts at different stages of the PathSeq pipeline are now logged using `MetricsFile`. The filter metrics contains the number of reads remaining and number of reads filtered at each step (after filtering pre-aligned reads, low quality/complexity reads, host reads, and duplicates). The score metrics give number of pathogen-mapped and unmapped reads. These metrics are now validated in the PathSeq integration tests, which have also been refactored to use DataProviders instead of separate functions.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3611:64,log,logged,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3611,2,"['log', 'test']","['logged', 'tests']"
Testability,Read likelihood calculation engine and some test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/786:44,test,test,44,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/786,1,['test'],['test']
Testability,ReadFilter plugin tests does not live in the same package than the plugin itself,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2532:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2532,1,['test'],['tests']
Testability,ReadThreadingAssemblerUnitTest contains identical tests with different names,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1081:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1081,1,['test'],['tests']
Testability,"ReadWalker: initial walker interface with support for iteration over reads with optional reference; contextual information. ```; PrintReadsWithReference is provided as an example ReadWalker; ```. ReadsDataSource: full support for iteration and queries over multiple SAM/BAM files, optionally; bounded by intervals. ReferenceDataSource: support for targeted queries by interval (full iteration over the reference not; yet supported). Comprehensive unit tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/112:452,test,tests,452,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/112,1,['test'],['tests']
Testability,"Reading from GenomicsDB fails when a some records containing spanning deletion alleles are imported into a workspace. Not all records seem to cause this to fail; I haven't been able to figure out what specific properties of the records cause the error. Here's the contents (minus header) of a VCF file that causes the error:. ```; #CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	NA12878; 20	10097436	.	CTTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTTCTTT	C,<NON_REF>	1054.73	.	BaseQRankSum=1.820;ClippingRankSum=0.000;DP=89;ExcessHet=3.0103;MLEAC=1,0;MLEAF=0.500,0.00;MQRankSum=-6.464;RAW_MQ=262143.00;ReadPosRankSum=-3.231	GT:AD:DP:GQ:PL:SB	0/1:57,32,0:89:99:1092,0,2241,1263,2338,3601:23,34,11,21; 20	10097437	.	TTTTC	*,T,<NON_REF>	2089.73	.	DP=76;ExcessHet=3.0103;MLEAC=1,1,0;MLEAF=0.500,0.500,0.00;RAW_MQ=217330.00	GT:AD:DP:GQ:PL:SB	1/2:0,32,23,0:55:99:2127,940,1799,1195,0,1125,2201,1453,1262,2642:0,0,16,39; ```. Steps to reproduce:. ```; ./gatk GenomicsDBImport -R src/test/resources/large/human_g1k_v37.20.21.fasta -L 20 -V test_gdb_import.vcf.gz -genomicsdb-workspace-path spanDelWorkspace; ./gatk SelectVariants -V gendb://spanDelWorkspace -R src/test/resources/large/human_g1k_v37.20.21.fasta -O test.vcf -L 20; ```. Error:. ```; java.lang.IllegalArgumentException: Duplicate allele added to VariantContext: T; at htsjdk.variant.variantcontext.VariantContext.makeAlleles(VariantContext.java:1490); at htsjdk.variant.variantcontext.VariantContext.<init>(VariantContext.java:380); at htsjdk.variant.variantcontext.VariantContextBuilder.make(VariantContextBuilder.java:494); at htsjdk.variant.variantcontext.VariantContextBuilder.make(VariantContextBuilder.java:488); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:132); at htsjdk.variant.bcf2.BCF2Codec.decode(BCF2Codec.java:58); at com.intel.genomicsdb.GenomicsDBFeatureReader$GenomicsDBFeatureIterator.next(GenomicsDBFeatureReader.java:357); at com.intel.genomicsdb.GenomicsDBFeatureReader$GenomicsDBFeatureIterator.next(GenomicsDBFeatureReader.java",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4716:959,test,test,959,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4716,1,['test'],['test']
Testability,"ReadsDataSource uses the headers for individual bams when instantiating the individual iterators for each bam, but uses the merged header everywhere else when multiple bams are present. We need to verify that there are no issues/bugs related to contig indices changing in the merged header. There shouldn't be, since we use contig names everywhere except `SamReaderQueryingIterator` (where you definitely want the contig index to match the index from the bam file in question), but it doesn't hurt to spend a little time (no more than 1-2 days) double-checking and testing the case of reading multiple bams where the contig indices in the final merged header differ from the indices in the original files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1674:565,test,testing,565,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1674,1,['test'],['testing']
Testability,ReadsPipelineSpark Jenkins test fails,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5545:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5545,1,['test'],['test']
Testability,ReadsPipelineSpark expanded and benchmarked: from BWA -> HaplotypeCaller,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1646:32,benchmark,benchmarked,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1646,1,['benchmark'],['benchmarked']
Testability,ReadsPipelineSpark needs an integration test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1162:40,test,test,40,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1162,1,['test'],['test']
Testability,ReadsPipelineSpark: null point exception during MannWhitney permutation test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4265:72,test,test,72,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4265,1,['test'],['test']
Testability,"ReadsSparkSource uses SAMHeaderReader.readSAMHeaderFrom to get the header from the input file, but it returns a bogus header object when called on an ADAM file (its actually htsjdk which is happily returning the header). Subsequent setHeaderStrict calls fail when using this header. The testADAM method should be re-enabled when there is a resolution for this.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1540:287,test,testADAM,287,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1540,1,['test'],['testADAM']
Testability,"Reasoning:; - task will not recreate/overwrite table if it exists; - task does not take long, so unnecessary runs are not costly in time or $; - when not volatile, Beta users need to run with call-caching off if they re-run the pipeline. run where tables already existed: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/64782949-33dd-41ef-b3f7-5e88cc5a5dcc. integration run: https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/9e79ef7f-9e64-46c7-8749-83909a5d423f (it failed the end tests, but the tables were created/populated as expected)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8765:544,test,tests,544,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8765,1,['test'],['tests']
Testability,"Recently ran into an issue where spark.yarn.executor.memoryOverhead is not being set. . Running Cromwell v29 on DataProc (image version 1.1) with the following launch command in my WDL:; ````; set -eu; export GATK_GCS_STAGING=${jarCacheBucket}; ${gatk} \; PathSeqPipelineSpark \; ...; -- \; --spark-runner GCS \; --cluster ${clusterName} \; --driver-memory 8G \; --executor-memory 32G \; --num-executors 1 \; --executor-cores 30 \; --conf spark.yarn.executor.memoryOverhead=132000; ````; I get the following error:; ```; org.apache.spark.SparkException: Job aborted due to stage failure: Task 25 in stage 37.0 failed 4 times, most recent failure: Lost task 25.3 in stage 37.0 (TID 19238, mw-pathseq-w-3.c.broad-dsde-methods.internal): ExecutorLostFailure (executor 11 exited caused by one of the running tasks) Reason: Container killed by YARN for exceeding memory limits. 48.9 GB of 34 GB physical memory used. Consider boosting spark.yarn.executor.memoryOverhead.; ```; In my Cromwell log I see the parameter is there:; ```; ...; Replacing spark-submit style args with dataproc style args. --cluster mw-pathseq --driver-memory 8G --executor-memory 32G --num-executors 1 --executor-cores 30 --; conf spark.yarn.executor.memoryOverhead=132000 -> --cluster mw-pathseq --properties spark.driver.userC; lassPathFirst=true,spark.io.compression.codec=lzf,spark.driver.maxResultSize=0,spark.executor.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.driver.extraJavaOptions=-DGATK_STACKTRACE_ON_USER_EXCEPTION=true -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=false -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=1 ,spark.kryoserializer.buffer.max=512m,spark.yarn.executor.memoryOverhead=600,spark.driver.memory=8G,spark.executor.memory=32G,spark.executor.instances=1,spark.execut",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4273:987,log,log,987,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4273,1,['log'],['log']
Testability,Reduce test suite runtime,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/969:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/969,1,['test'],['test']
Testability,Reduce the logging a bit.; Probably should make a PR directly into gatk master so that when we next merge gatk master changes we'll get this goodness?. Integration run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f8c38f97-7945-414f-9432-13b2f12138bb) (note failed one of the subtests for a random docker pull error); Example CreateFilterSet run [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/b2e7eb86-e494-4891-885b-5a96cb1056b3),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8650:11,log,logging,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8650,1,['log'],['logging']
Testability,Reenable CRAM tests in GatherBamFilesIntegrationTest and SortSamIntegrationTests when htsjdk issue #365 fix is available,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1141:14,test,tests,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1141,1,['test'],['tests']
Testability,"RefAPISource support for multiple pages, with corresponding test code.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/869:60,test,test,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/869,1,['test'],['test']
Testability,"Refactor python code from extract dir into a scripts directory. Passing Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/f85602d0-6dc5-49d6-82d1-eb58e9966021); Passing VAT Creation work [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/ddc7fcf9-5fb7-44e2-8117-721389d4f858), [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/0d705f21-3362-4890-b925-5bed2646fe4d), and [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/15cfe125-e700-44c8-b9d0-c3e98d7db4c0)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/9017:84,Test,Test,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/9017,1,['Test'],['Test']
Testability,Refactor the test suite on Github Actions to run faster,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7798:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7798,1,['test'],['test']
Testability,Refactored JointVcfFiltering WDL and expanded tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8074:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8074,1,['test'],['tests']
Testability,ReferenceConfidenceModel and tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1442:29,test,tests,29,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1442,1,['test'],['tests']
Testability,Regenerate invalid CRAM test files,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6018:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6018,1,['test'],['test']
Testability,"Regression test for #3163. A unit test was added in #3164, but we should add an integration test as well.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3181:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3181,3,['test'],['test']
Testability,Related to #3413. We have improvements for BAM compression in GKL and need an assortment of various types of BAM files to test the performance and compression ratio.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4249:122,test,test,122,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4249,1,['test'],['test']
Testability,"Related to VS-1395. On the PR to EchoCallset, Bec had a couple of minor suggestions. I folded them into that PR and am now adding them here to `ah_var_store`. Passing test run without a backslash on output_path [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/f02829f5-d546-4f54-85e6-e7ea6be5829e).; Passing test run with a backslash on output_path [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Quickstart%20v3%20ggrant/job_history/3003841c-0e62-4ef6-bb37-6eeb038da9af).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8881:167,test,test,167,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8881,2,['test'],['test']
Testability,Remove StreamingPythonExecutor testStderrOutput unit test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5097:31,test,testStderrOutput,31,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5097,2,['test'],"['test', 'testStderrOutput']"
Testability,Remove StrictBooleanConverter and test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2448:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2448,1,['test'],['test']
Testability,Remove all code paths in engine (and tests) that use an explicit Google API key,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2402:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2402,1,['test'],['tests']
Testability,"Remove all static dependencies of code outside the dataflow packages; on code inside the dataflow packages. With these changes, the codebase compiles when you delete the; engine.dataflow, tools.dataflow, and utils.dataflow packages from; both main and test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/982:252,test,test,252,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/982,1,['test'],['test']
Testability,Remove an excessively long-running test case in ReadsSparkSink,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1343:35,test,test,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1343,1,['test'],['test']
Testability,Remove exclusions from GenomicsDBImportIntegrationTest assertions,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2638:55,assert,assertions,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2638,1,['assert'],['assertions']
Testability,Remove redundant references from test data now that we have full-sized references,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5313:33,test,test,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5313,1,['test'],['test']
Testability,Remove test resources from the docker image,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3414:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3414,1,['test'],['test']
Testability,Remove travis R install and only run R tests on the Docker.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6454:39,test,tests,39,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6454,1,['test'],['tests']
Testability,"Remove unnecessary codecs, clean up and write tests for codecs we want to keep, and move all codecs to htsjdk",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/229:46,test,tests,46,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/229,1,['test'],['tests']
Testability,Remove unnecessary data sources from tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5350:37,test,tests,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5350,1,['test'],['tests']
Testability,"Remove unused VQSR ""aggregate"" arg that has no tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6809:47,test,tests,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6809,1,['test'],['tests']
Testability,Remove/repair bogus CRAM test files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1368:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1368,1,['test'],['test']
Testability,Removed GATK3.5 VCFs from HC integration test files.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7634:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7634,1,['test'],['test']
Testability,Removed incorrect logger from DepthOfCoverage.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6622:18,log,logger,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6622,1,['log'],['logger']
Testability,Removed undocumented mid-p correction to p-values in exact test of Hardy-Weinberg equilibrium and updated corresponding tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7394:59,test,test,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7394,4,['test'],"['test', 'tests']"
Testability,Removing hard-coded shard sizes from the Dataflow tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/757:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/757,1,['test'],['tests']
Testability,Removing the spark dataflow runner build and the cloud_todo_build from travis. Left in the logic for dealing with the cloud_todo in case we have similar problems in the future. I can strip it out of if th,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1021:91,log,logic,91,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1021,1,['log'],['logic']
Testability,Rename FASTA test files?,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3904:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3904,1,['test'],['test']
Testability,"Rename IOUtils.canRead() to IOUtils.canReadFile(), and move tests from UtilsUnitTest to IOUtilsUnitTest",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2672:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2672,1,['test'],['tests']
Testability,Rename test file so it doesn't masquerade as a Picard interval list.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5879:7,test,test,7,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5879,1,['test'],['test']
Testability,Renamed existing test for validating generated WDLs.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7829:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7829,1,['test'],['test']
Testability,Repackage ReadFilter plugin tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3525:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3525,1,['test'],['tests']
Testability,Repair the CRAM detector/diagnostics test output to reflect the CRAM file name change that was introduced by updating the large CRAM files to v3.0.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8971:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8971,1,['test'],['test']
Testability,Replace StreamingProcessController println with a logger info message.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4697:50,log,logger,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4697,1,['log'],['logger']
Testability,Replace literal arguments with variables in several integration tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4416:64,test,tests,64,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4416,1,['test'],['tests']
Testability,ReplaceSamHeader needs CRAM tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1205:28,test,tests,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1205,1,['test'],['tests']
Testability,"Replicates most of the functionality of the old ROD system in ~5% of the; code. The incomprehensible tangle of nested iterators, bindings, views, states,; tracks, trackers, builders etc., etc., is gone, replaced by about 4 core classes:; FeatureContext, FeatureDataSource, FeatureInput, and FeatureManager. FeatureContext: This is tool-facing interface (replaces RefMetaDataTracker).; Allows particular sources of Features to be queried. FeatureDataSource: Handles the low-level details of querying a source of Features.; Uses a caching scheme optimized for the use case of queries over; intervals with gradually increasing start/stop positions. FeatureInput: This is used to declare Feature arguments in tools (replaces RodBinding).; The engine discovers all FeatureInput arguments declared in the tool's class; hierarchy, and initializes data sources for each one that was specified; on the command line. FeatureManager: Manages the pool of data sources, as well as codec and file format; discovery and type checking. -ReadWalker interface has changed: apply() now takes a FeatureContext argument; (will be null if there are no sources of Features). -Included an example tool PrintReadsWithVariants to demonstrate use of the new; ReadWalker interface. -Since Feature files must be indexed in order to query them, I have provided a; tool IndexFeatureFile that can index any Feature-containing file. -Made required changes to the argument-parsing system. Feature argument discovery; is as de-coupled as possible from the main arg parser. -Made required changes to BQSR, and eliminated the temporary HACKRefMetaDataTracker. -Comprehensive tests",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/224:1638,test,tests,1638,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/224,1,['test'],['tests']
Testability,"Report; ### Affected tool(s) or class(es); HaplotypeCaller --max-reads-per-alignment-start. ### Affected version(s); - [x] Latest public release version [4.1.2.0]; - [ ] Latest master branch as of [date of test?]. ### Description; We used GATK4 to detect a fairly large duplication (60bp) in a control sample. We did sequenced two replicates for this sample, one having significantly more coverage than the other.With default GATK4 parameter the duplication was only detected in the sample with the lowest coverage. After inspection of GATK4 parameter we found that it was the downsampling throught the --max-reads-per-alignment-start that was in cause.Indeed, all the reads that contains the duplications are softcliped (see IGV capture below) because the insertion/duplication event is too bigged to be correctly aligned by BWA. This causes all reads containing the duplication to have the same start position in the BAM file. Then, the downsampling based on start position must drastically reduce the signal and the variant is skipped. This explains why the variant was missed at high coverage level and not in the replicates with lower signal.We think that the downsampling should take Softclips into account to be more reliable, but maybe you have a better idea.Also we did some performance evaluation and GATK4 runned faster with the downsampling desactivated. Is it normal ?; ![duplication](https://user-images.githubusercontent.com/53903734/62783152-17f41180-babc-11e9-9ddb-bed3c3042d97.png). #### Steps to reproduce; Run GATK4 with default parameters on the BAM containing the duplication (we can provide a toy). Disable --max-reads-per-alignment-start by switching the value to 0 to enable the identification of the duplication. #### Expected behavior; The duplication should have been found because the downsampling on start position does not take into accout the reads softclips. #### Actual behavior; The duplication is missed at high coverage depth",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6088:206,test,test,206,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6088,1,['test'],['test']
Testability,"Repost of #7815 to test the ""after_n_builds"" functionality",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7817:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7817,1,['test'],['test']
Testability,Request: package the testing framework into a module,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2533:21,test,testing,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2533,1,['test'],['testing']
Testability,Requires enumeration of test cases and implementing each of them.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/403:24,test,test,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/403,1,['test'],['test']
Testability,Resolved the issue of adding gs:// to the beginning and / to the end of the environment variable GATK_GCS_STAGING. Tested it locally.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5452:115,Test,Tested,115,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5452,1,['Test'],['Tested']
Testability,"Resolves issue #1370 by exposing the setting for Spark logging level with a separate CLI argument (`--spark-verbosity`). Also stifles overly-verbose executor INFO-level logging by setting the default to WARN. This was much cleaner to implement than just applying the existing `--verbosity` to the Spark context for a few reasons. First, Spark's `INFO` level is far too verbose, but most GATK tools provide useful INFO messages. This gives the user the ability to tune them separately. Also, Spark offers more levels through log4j, and mapping from htsjdk logging levels with a bunch of `if` statements didn't seem ideal. Verbose logging only seems to be a problem with when running `/gatk/gatk` inside the GATK docker (eg PathSeq log files easily in 100's of MB). Strangely, however, I found there was no verbose logging if I cloned GATK inside the docker and rebuilt from source with `gradlew buildAll`. Since I can't pinpoint the cause, I haven't included tests for this, but I don't expect test coverage to drop. Note that Spark generates some INFO logging when the context is initialized. After that, the logging level is corrected.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5825:55,log,logging,55,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5825,10,"['log', 'test']","['log', 'logging', 'test', 'tests']"
Testability,Restart test jvm every few test classes,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6093:8,test,test,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6093,2,['test'],['test']
Testability,Restore 3 Gnarly tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8892:17,test,tests,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8892,1,['test'],['tests']
Testability,Restore gnarly tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8893:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8893,1,['test'],['tests']
Testability,Restore reshape R dependency and add test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5022:37,test,test,37,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5022,1,['test'],['test']
Testability,"Results from a Travis run using a branch that throws whenever a FeatureCache miss occurs, and the query interval is on the same contig as was the current cached interval, but with a start locus *before* the current cached interval start. This indicates that features that have already been ejected from the cache are being re-queried, and the corresponding tool might benefit from a smarter ejection strategy. Some of these could be artifacts of the tests. Failures (see https://travis-ci.com/broadinstitute/gatk/builds/108966841):. FuncotatorIntegrationTest.exhaustiveArgumentTest; FuncotatorIntegrationTest.testFuncotatorWithoutValidatingResults; FuncotatorIntegrationTest.testVcfDatasourceAccountsForAltAlleles; FuncotatorIntegrationTest.testVcfMafConcordance; XGBoostEvidenceFilterUnitTest.testFilter; HaplotypeCallerIntegrationTest.testGenotypeGivenAllelesMode; Mutect2IntegrationTest.testContaminationFilter; Mutect2IntegrationTest.testDreamTumorNormal; Mutect2IntegrationTest.testGivenAllelesMode; Mutect2IntegrationTest.testGivenAllelesZeroCoverage; Mutect2IntegrationTest.testMissingAF; Mutect2IntegrationTest.testPon; Mutect2IntegrationTest.testTumorOnly. Also, these probably don't count, but:; FeatureDataSourceUnitTest.testCacheHitDetection; FeatureDataSourceUnitTest.testSingleDataSourceMultipleQueries. The HC stack was:. `org.broadinstitute.hellbender.tools.walkers.haplotypecaller.HaplotypeCallerIntegrationTest.testGenotypeGivenAllelesMode [31mFAILED[39m; org.broadinstitute.hellbender.exceptions.GATKException: Locatable cache miss while attempting to retrieve a previous interval from the locatable cache. New interval: 20:9999980-10000254 Previous: 20:10000555-10001000; at org.broadinstitute.hellbender.engine.FeatureCache.cacheHit(FeatureCache.java:164); at org.broadinstitute.hellbender.engine.FeatureDataSource.queryAndPrefetch(FeatureDataSource.java:497); at org.broadinstitute.hellbender.engine.FeatureManager.getFeatures(FeatureManager.java:340); at org.broadinstitute.he",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5895:450,test,tests,450,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5895,8,['test'],"['testContaminationFilter', 'testDreamTumorNormal', 'testFilter', 'testFuncotatorWithoutValidatingResults', 'testGenotypeGivenAllelesMode', 'testVcfDatasourceAccountsForAltAlleles', 'testVcfMafConcordance', 'tests']"
Testability,Retain all source IDs on VariantContext merge + test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8752:48,test,test,48,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8752,2,['test'],['test']
Testability,Revert some phasing changes that were unnecessary for AoU and broke our integration tests. [Integration run](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/ba93baa2-9971-4c90-8ce3-635702a81eb6),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8590:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8590,1,['test'],['tests']
Testability,RevertBaseQualityScoresIntegrationTest needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1232:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1232,1,['test'],['tests']
Testability,RevertSam needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1223:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1223,1,['test'],['tests']
Testability,"Reverts the reversion in #5225, this time addressing the lexicographical ordering issue in #5217 at the WDL level by simply renaming gCNV output at the command line. If desired, we can eventually change gCNV itself to output filenames that are robust against lexicographic ordering, but this is low priority in my opinion. @vruano this is what we discussed last week. Tests pass on Travis, and I'm pretty sure this fix should work OK, but I have not done an actual run with enough samples to see the fix in action. Can I assign you to review once I get a chance to do this?. EDIT: Also went ahead and rolled an older PR #5304 into this one so I can test both at the same time. Closes #4724.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5490:368,Test,Tests,368,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5490,2,"['Test', 'test']","['Tests', 'test']"
Testability,"Reworks classes used by `JointGermlineCNVSegmentationIntegration` for SV clustering and defragmentation. The design of `SVClusterEngine` has been overhauled to enable the implementation of `CNVDefragmenter` and `BinnedCNVDefragmenter` subclasses. Logic for producing representative records from a collection of clustered SVs has been separated into an `SVCollapser` class, which provides enhanced functionality for handling genotypes for SVs more generally. A number of bugs, particularly with max-clique clustering, have been fixed, as well as a parameter swap bug in `JointGermlineCNVSegmentationIntegration`. This is the first of a series of PRs for an experimental Java-based implementation of some modules in `gatk-sv` pipeline, including SV vcf merging, clustering, evidence aggregation, and genotyping.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7243:247,Log,Logic,247,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7243,1,['Log'],['Logic']
Testability,Rewrote all code involving logarithms to use natural log instead of log-10.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/803:27,log,logarithms,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/803,3,['log'],"['log', 'log-', 'logarithms']"
Testability,"Right now our docker image is much larger than it needs to be. This is at least in part because it contains our entire git clone as well as the packaged jars. This is not necessary and could potentially come with it shrinking our docker image substantially. . This change would involve a major refactoring of how we execute our tests through gralde inside the docker image, as removing the test dependencies will mean we probably have to externally mount the git clone from the docker image in order to pull in the proper dependencies.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3930:328,test,tests,328,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3930,2,['test'],"['test', 'tests']"
Testability,"Right now the alignments are filtered in various places in SV discovery stage. ; Having a single logic unit for doing this makes; * debugging and modular development, ; * complex SV discovery/interpretation, and ; * future improvements (e.g. not filtering but downgrading certain alignments and use an optimization approach). easier",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3221:97,log,logic,97,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3221,1,['log'],['logic']
Testability,"Right now the docker image is too large. It appears that the if the build_docker.sh script its set to run the tests, then it is uploading the test resources into the docker and removing them, resulting in multiple layers which uses unneeded space. We need to remove the resources files from the docker.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3414:110,test,tests,110,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3414,2,['test'],"['test', 'tests']"
Testability,"Right now we publish test utils as part of the gatk artifact. Since these are part of our main compilation unit it means we have several test libraries as compile dependencies instead of as test compile dependencies. . If we separate our test utils into a separate group we can avoid having downstream tools gain various test dependencies if they don't want them. (i.e. TestNG, MiniDFSCluster).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1481:21,test,test,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1481,6,"['Test', 'test']","['TestNG', 'test']"
Testability,"Right now, we only have a local test.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/686:32,test,test,32,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/686,1,['test'],['test']
Testability,"Right now, we're only testing local files.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/666:22,test,testing,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/666,1,['test'],['testing']
Testability,"Right now, when we create a bucket-based test, we upload files into `gs://hellbender/test/resources/`, which Travis uses for `HELLBENDER_TEST_INPUTS` (the environment variable used by dataflow tests). These files are currently unversioned, which is bad -- we need to come up with a better way of managing our dataflow test inputs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/739:41,test,test,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/739,4,['test'],"['test', 'tests']"
Testability,"Rightnow doing the manual docker build locally would fail. One needs to copy the line in `.travis.yml`. ```; sudo bash build_docker.sh -e ${HASH} -s -u -d $PWD/temp_staging/;; sudo docker run -v $(pwd)/src/test/resources:/testdata --rm -e ""TEST_VERBOSITY=minimal"" -e ""TEST_TYPE=${TEST_TYPE}"" -t broadinstitute/gatk:${HASH} bash /root/run_unit_tests.sh;; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3160:206,test,test,206,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3160,2,['test'],"['test', 'testdata']"
Testability,"Rough prototype for @LeeTL1220 to test. If it satisfies your use case, we can polish this branch up, add some tests, and merge.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2374:34,test,test,34,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2374,2,['test'],"['test', 'tests']"
Testability,"Run ""cloud"" and ""bucket"" test groups on travis",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/552:25,test,test,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/552,1,['test'],['test']
Testability,Run NIO benchmarks on single-core instances,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2424:8,benchmark,benchmarks,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2424,1,['benchmark'],['benchmarks']
Testability,Run gatk-protected test suite on every push to gatk/master,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1758:19,test,test,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1758,1,['test'],['test']
Testability,Run in quickstart: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/588a50be-9e03-4e34-8f12-a61a26262763; Run on delta: https://app.terra.bio/#workspaces/allofus-drc-wgs-dev/GVS%20AoU%20WGS%20Delta%20Callset%20v2/job_history/135f5cc3-4948-426b-a90c-8ced5ec9f1e6 (failed on the test that was added after Delta because the typo in the nfe column names),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8685:317,test,test,317,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8685,1,['test'],['test']
Testability,Run spark tests on HDFS via jenkins,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1402:10,test,tests,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1402,1,['test'],['tests']
Testability,Run the GATK tests using the refactored rans code in htsjdk.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8730:13,test,tests,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8730,1,['test'],['tests']
Testability,"Run validation tests continuously in jenkins: ReadsPipelineSpark, BQSR etc",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1401:15,test,tests,15,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1401,1,['test'],['tests']
Testability,"Running GATK4 BwaSpark encounter the following fatal error message:; `[M::mem_sam_pe] Paired reads have different names: ""206B4ABXX100825:7:66:2632:21260"", ""206B4ABXX100825:7:66:2632:31752""`. Script: ; `$GATK_LAUNCH BwaSpark -I $unsorted_bam_hdfs -O $sorted_bam_hdfs -t 10 --disableSequenceDictionaryValidation true -R $ref_hdfs -K 10000000 -- --sparkRunner SPARK --sparkMaster yarn --num-executors 1 --executor-cores 10 --executor-memory 40g`. $unsorted_bam_hdfs is a file generated by FastqToBam, and copied to HDFS. ; spark 2.0 is used. . The original Fastq files are perfectly fine, and we have been using it for all our tests using previous versions, including 3.6. I also manually checked the generated name-sorted BAM file generated by FastToBam, and the neighboring lines are perfectly paired as well. . What I suspect is that chunk is cut inside a pair, and thus not just this one, all subsequent lines are all error'ed out. To confirm this, I ran the job with different -K and -bps options, and the error will occur at different locations.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2296:625,test,tests,625,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2296,1,['test'],['tests']
Testability,Running a single test through Gradle with `test.single` not working,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6853:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6853,2,['test'],['test']
Testability,"Running on GCS (cluster created by dataproc), the GATK spark tools run much faster on HDFS than on files stored on GS. HDFS 1.15 minutes. ```; /gatk-launch CountReadsSpark -I /user/akiezun/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam --apiKey <myAPIKEY> -- --sparkRunner GCS --cluster dataproc-cluster-3 --executor-cores 3 --executor-memory 25G --conf spark.yarn.executor.memoryOverhead=2500; ```. GCS 7.50 minutes. ```; ./gatk-launch CountReadsSpark -I gs://hellbender/test/resources/benchmark/CEUTrio.HiSeq.WEx.b37.NA12892.readnamesort.bam --apiKey <myAPIKEY> -- --sparkRunner GCS --cluster dataproc-cluster-3 --executor-cores 3 --executor-memory 25G --conf spark.yarn.executor.memoryOverhead=2500; ```. @lbergelson @jean-philippe-martin is this a known thing? If this expected",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1755:472,test,test,472,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1755,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Running the scientific tests in WARP when updating GATK from 4.5.0.0 -> 4.6.0.0 caught a difference in ReblockGVCFs when a no call site with GQ=0 was derived from a low quality call where the PLs with a value of 0 were in an allele that was subset (e.g. `<NON_REF>`). I believe this new behavior is a feature because it now correctly outputs a ref block with GQ=0. This test provides an example of one of these cases to ensure that the behavior stays the same in the future.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8928:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8928,2,['test'],"['test', 'tests']"
Testability,Running without an output file causes an NPR. Needs a null check. ```; ./gatk-launch CountReadsSpark -I src/test/resources/org/broadinstitute/hellbender/tools/count_reads_sorted.bam; ```. ```; java.lang.NullPointerException; at org.broadinstitute.hellbender.utils.gcs.BucketUtils.isCloudStorageUrl(BucketUtils.java:44); at org.broadinstitute.hellbender.utils.gcs.BucketUtils.createFile(BucketUtils.java:105); at org.broadinstitute.hellbender.tools.spark.pipelines.CountReadsSpark.runTool(CountReadsSpark.java:37); at org.broadinstitute.hellbender.engine.spark.GATKSparkTool.runPipeline(GATKSparkTool.java:310); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:38); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:98); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:146); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:165); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:66); at org.broadinstitute.hellbender.Main.main(Main.java:81); ```,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1523:108,test,test,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1523,1,['test'],['test']
Testability,S.b37.ch20.1m-1m20k.NA12878.quantizing_levels_6.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.HiSeq.1mb.1RG.2k_lines.alternate.recalibrated.DIQ.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.HiSeq.1mb.1RG.2k_lines.bqsr.qq-1.alternate.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.HiSeq.1mb.1RG.2k_lines.bqsr.qq6.alternate.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.MultiSite.reads.pipeline.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.MultiSite.reads.pipeline.cram.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.alternate_allaligned.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.alternate.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.alternate.recalibrated.DIQ.sharded.bam/part-r-00001.bam; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/HiSeq.1mb.1RG.2k_lines.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/human_b36_both.chr1_1k.dict; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/human_b36_both.chr1_1k.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/NA12878.chr17_69k_70k.dictFix.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/NA12878.oq.read_consumes_zero_ref_bases.chr20.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/na.bam; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/na.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/originalQuals.1kg.chr1.1-1K.1RG.dictFix.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/overlappingRead.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/solid.ba,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:21502,test,test,21502,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,"SAMInputFormat.createRecordReader(AnySAMInputFormat.java:190); > 	at org.apache.spark.rdd.NewHadoopRDD$$anon$1.liftedTree1$1(NewHadoopRDD.scala:178); > 	at org.apache.spark.rdd.NewHadoopRDD$$anon$1.<init>(NewHadoopRDD.scala:177); > 	at org.apache.spark.rdd.NewHadoopRDD.compute(NewHadoopRDD.scala:134); > 	at org.apache.spark.rdd.NewHadoopRDD.compute(NewHadoopRDD.scala:69); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.rdd.MapPartitionsRDD.compute(MapPartitionsRDD.scala:38); > 	at org.apache.spark.rdd.RDD.computeOrReadCheckpoint(RDD.scala:323); > 	at org.apache.spark.rdd.RDD.iterator(RDD.scala:287); > 	at org.apache.spark.scheduler.ResultTask.runTask(ResultTask.scala:88); > 	at org.apache.spark.scheduler.Task.run(Task.scala:100); > 	at org.apache.spark.executor.Executor$TaskRunner.run(Executor.scala:317); > 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); > 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); > 	at java.lang.Thread.run(Thread.java:748). As standalone solution, I have to set paths thourgh hdfs which is tricky:; > /home/axverdier/Tools/GATK4/gatk-4.beta.6/gatk-launch CountReadsSpark --programName gatk4-testing --input hdfs://spark01:7222/user/axverdier/data/710-PE-G1.bam --output hdfs://spark01:7222/user/axverdier/testOutGATK_CountReadsSpark --sparkRunner SPARK --sparkMaster yarn --javaOptions -Dmapr.library.flatclass. Could it be possible for gatk spark tools to manage maprfs ?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3936:6104,test,testing,6104,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3936,1,['test'],['testing']
Testability,STA.fasta.fai; src/test/resources/fastaWithoutDict.fasta.fai; src/test/resources/fastaWithoutFai.dict; src/test/resources/hg19micro.dict; src/test/resources/hg19micro.fasta.fai; src/test/resources/hg19mini.dict; src/test/resources/hg19mini.fasta.fai; src/test/resources/Homo_sapiens_assembly19_chr1_1M.dict; src/test/resources/Homo_sapiens_assembly19_chr1_1M.fasta.fai; src/test/resources/Homo_sapiens_assembly19.dbsnp135.chr1_1M.exome_intervals.vcf.idx; src/test/resources/HSA19.dbsnp135.chr1_1M.exome_intervals.modified.vcf.idx; src/test/resources/human_g1k_v37.chr17_1Mb.dict; src/test/resources/human_g1k_v37.chr17_1Mb.fasta.fai; src/test/resources/iupacFASTA.dict; src/test/resources/iupacFASTA.fasta.fai; src/test/resources/joint_calling.chr1_1M.1kg_samples.10samples.noINFO.vcf.idx; src/test/resources/large/1000G.phase3.broad.withGenotypes.chr20.10100000.vcf.idx; src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.cram.bai; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/bias_covariates_ARD_coefficients.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_matrix.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/mean_bias_covariates_norm2.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_mean_log_bias.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/model_final/target_specific_unexplained_variance.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/posteriors_final/bias_covariates_ARD_coefficients_history.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/posteriors_final/copy_ratio_max_likelihood_estimate_matrix.tsv; src/test/resources/large/cnv_germline_workflows_test_files/inputs/wes_pon/posteriors_final/copy_ratio_precision_matrix.tsv; src/test/resources/large/cnv_germline_workflows_,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:1663,test,test,1663,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,SV test and utils cleanup,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5116:3,test,test,3,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5116,1,['test'],['test']
Testability,Safely parallelize the gatk and gatk-protected test suites,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1769:47,test,test,47,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1769,1,['test'],['test']
Testability,SamAssertionUtils.assertSamsEqual should return a more useful message,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/375:18,assert,assertSamsEqual,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/375,1,['assert'],['assertSamsEqual']
Testability,"SamAssertionUtils.samsEqualStringent tries to short-circuit file validation by first doing an md5 compare. Most of the time when we run the test suite (in the current tests 171 out of 193), the short-circuiting fails we do the more expensive read by read test. All of these have one or more that fail md5 check (some are probably crams, which IIRC places the file name in the cram header):. MarkDuplicatesIntegrationTest; AddOrReplaceReadGroupsIntegrationTest; ApplyBQSRIntegrationTest; ApplyBQSRSparkIntegrationTest; BQSRPipelineSparkIntegrationTest; BwaSparkIntegrationTest; GatherBamFilesIntegrationTest; HaplotypeBAMWriterUnitTest; PrintReadsIntegrationTest; ReadsPipelineSparkIntegrationTest; SamAssertionUtilsUnitTest; SamFormatConverterIntegrationTest; SortReadFileSparkIntegrationTest; SortSamIntegrationTest; SplitNCigarReadsIntegrationTest; ClipReadsIntegrationTest",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2395:140,test,test,140,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2395,3,['test'],"['test', 'tests']"
Testability,SamToFastq needs CRAM tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1224:22,test,tests,22,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1224,1,['test'],['tests']
Testability,Same integration test fails with IntegrationTestSpec but passes with manual runCommandLine()/assertSamsEqual() calls,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1164:17,test,test,17,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1164,2,"['assert', 'test']","['assertSamsEqual', 'test']"
Testability,"See #2488 for context. In short, the internal pathways for authentication changed, breaking some tests. We're pushing forward anyways but need to remember to re-enable the code & tests once we can (should be the next release).",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2496:97,test,tests,97,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2496,2,['test'],['tests']
Testability,"See Issue #7622 for more details. In addition to unit tests, here is how I validated:. ```; ##; # Split the WGS list; ##; rm -rf test_split. ./gatk --java-options ""-Xmx4g $DEBUG"" \; WeightedSplitIntervals \; --scatter-count 100 \; --weight-bed-file gvs_vet_weights_1kb.bed \; -R gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta \; --dont-mix-contigs true \; -L wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list \; --output test_split. ##; # merge all the intervals lists back into one; ##; IL=""""; for f in test_split/*-scattered.interval_list; do; IL=""${IL} -I $f ""; done; ./gatk IntervalListTools --ACTION UNION $IL -O test_split/merged.interval_list. #; # compare it to the original; ##; ./gatk CompareIntervalLists \; -R gs://gcp-public-data--broad-references/hg38/v0/Homo_sapiens_assembly38.fasta \; -L wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list \; -L2 test_split/merged.interval_list. ##; # A visual check to see that the ordering is the same, and that the only splits; # are across file boundaries; ##; cat test_split/*-scattered.interval_list | grep -v ""@"" | cut -f1-3 > test_split/combined.txt; cat wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list | grep -v ""@"" | cut -f1-3 > test_split/orig.txt; diff -y test_split/orig.txt test_split/combined.txt; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7643:54,test,tests,54,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7643,1,['test'],['tests']
Testability,See [Issue 5277 - Migrate to org.genomicsdb fork](https://github.com/broadinstitute/gatk/issues/5277). . The first genomicsdb 1.0.0.beta jar consists of only a refactoring of all the packages to org.genomicsdb. Note that this pass should have no performance implications compared to the last [Intel release](https://mvnrepository.com/artifact/com.intel/genomicsdb/0.10.2-proto-3.0.0-beta-1+90dad1af8ce0e4d) as there is no change other than refactoring. Issues [5568-buffer resizing excessive logging](https://github.com/broadinstitute/gatk/issues/5568) and [5342-file synching error](https://github.com/broadinstitute/gatk/issues/5342) will both be addressed in the next release.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5587:492,log,logging,492,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5587,1,['log'],['logging']
Testability,See https://gatkforums.broadinstitute.org/gatk/discussion/12078/gatk-4-4-docker-image-missing-dependancies. Looks like I inadvertently removed this in the great purge of #3935. We should add a test to AnalyzeCovariates to cover plotting as well.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5022:193,test,test,193,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5022,1,['test'],['test']
Testability,"See https://github.com/broadinstitute/gatk/actions/runs/3567534442/jobs/5995349354 for one example. . We originally saw these failures on the branch to move GATK to Java 17, but recently have started seeing the same failures on current PRs when running the tests on Java 11. It looks like this started happening when the CI env recently started resolving to Java 11.0.16.1., where these tests appear to always (?) fail, whereas previously the CI env was resolving to Java 11.0.11+9, where they pass. Although I haven't compared the results for all of the failed cases, I think the failure modes and bad values are the same on both Java 11 and Java 17. We've temporarily pinned the CI environment to use 11.0.11+9 (see https://github.com/broadinstitute/gatk/pull/8102) until we can get this resolved. I'd suspect the easiest way to reproduce the failures is to try running the tests using either Java 17 or Java 11.0.16.1.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8107:257,test,tests,257,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8107,3,['test'],['tests']
Testability,"See pull #812 . > Apply the actual BaseRecalibratorTransform here, and delete the stub. If the ; > ReadsPreprocessingPipelineIntegrationTest fails as a result, temporarily disable the test, ; > create a ticket to fix it, and assign it to me. @droazen",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/829:82,stub,stub,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/829,2,"['stub', 'test']","['stub', 'test']"
Testability,"See some issues---mostly stemming from the HDF5 library and the BLAS library optionally used by MLlib SVD at e.g. https://gatkforums.broadinstitute.org/gatk/discussion/23591/createreadcountpanelofnormals-in-gatk4-1-doesnt-output-valid-hdf5-files#latest; https://gatkforums.broadinstitute.org/gatk/discussion/12537/get-error-when-using-createreadcountpanelofnormals-in-calling-somatic-copy-number-variation; https://gatkforums.broadinstitute.org/gatk/discussion/11461/gatk-4-0-1-2-no-non-zero-singular-values-were-found-in-creating-a-panel-of-normals-for-somatic-cnv/p1. Would also be nice to to turn down the verbosity of Spark logging, which emits a ridiculous amount of messages for a simple SVD. I think this is a relatively ancient issue (https://github.com/broadinstitute/gatk/issues/1370), not sure if it's been resolved for other Spark tools since.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5771:628,log,logging,628,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5771,1,['log'],['logging']
Testability,See the log: https://people.freebsd.org/~pi/logs/gatk-4.1.2.0.43.log. The downstream bug report: https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=239901,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6097:8,log,log,8,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6097,3,['log'],"['log', 'logs']"
Testability,Seeing a test failure due to errors with the service account access token. Possibly related to updating the NIO dependency. We've seen this multiple times today. ; ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.nio.GcsNioIntegrationTest.openPublicFile FAILED; com.google.cloud.storage.StorageException: Error getting access token for service account: ; at com.google.cloud.storage.spi.DefaultStorageRpc.translate(DefaultStorageRpc.java:203); at com.google.cloud.storage.spi.DefaultStorageRpc.get(DefaultStorageRpc.java:349); at com.google.cloud.storage.StorageImpl$5.call(StorageImpl.java:186); at com.google.cloud.storage.StorageImpl$5.call(StorageImpl.java:183); at com.google.cloud.RetryHelper.doRetry(RetryHelper.java:179); at com.google.cloud.RetryHelper.runWithRetries(RetryHelper.java:244); at com.google.cloud.storage.StorageImpl.get(StorageImpl.java:183); at com.google.cloud.storage.StorageImpl.get(StorageImpl.java:197); at com.google.cloud.storage.contrib.nio.CloudStorageReadChannel.fetchSize(CloudStorageReadChannel.java:194); at com.google.cloud.storage.contrib.nio.CloudStorageReadChannel.<init>(CloudStorageReadChannel.java:72); at com.google.cloud.storage.contrib.nio.CloudStorageReadChannel.create(CloudStorageReadChannel.java:62); at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.newReadChannel(CloudStorageFileSystemProvider.java:268); at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.newByteChannel(CloudStorageFileSystemProvider.java:229); at java.nio.file.Files.newByteChannel(Files.java:361); at java.nio.file.Files.newByteChannel(Files.java:407); at java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:384); at com.google.cloud.storage.contrib.nio.CloudStorageFileSystemProvider.newInputStream(CloudStorageFileSystemProvider.java:348); at java.nio.file.Files.newInputStream(Files.java:152); at org.broadinstitute.hellbender.utils.nio.GcsNioIntegrationTest.openPublicFile(GcsNioIntegra,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2514:9,test,test,9,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2514,2,['test'],['test']
Testability,"Seems like there are some commented overrides and method stubs, but there are also some remaining unimplemented methods. See https://github.com/broadinstitute/gatk/pull/7394#discussion_r701351063.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7564:57,stub,stubs,57,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7564,1,['stub'],['stubs']
Testability,"Selected tools will be migrated from picard, with tests. This issue will serve a placeholder for any discussion as to which tools etc. For now, the working assumption is that all public tools will migrate (some exceptions may be tools in picard.illumina which may be too specialized) The package name will remain picard, at least for now. When migrating, put the specific commit name here for reference.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/63:50,test,tests,50,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/63,1,['test'],['tests']
Testability,Seq.WGS.b37.ch20.4379150-4379157.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.10m-10m100.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.10m-10m100.cram.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b36.excluding_sites_after_129.chr1_1k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_132.b37.excluding_sites_after_129.chr17_69k_70k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.20.10m-10m100.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.21.10m-10m100.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/dbsnp_138.b37.excluding_sites_after_129.ch20.1m-1m1k.vcf.idx; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.noMD.noBQSR.md.bqsr.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.postRecalibrated.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m1k.NA12878.recalibrated.DIQ.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.2inputs.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.indels_context_size_4.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.low_quality_tail_5.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.mismatches_context_size_4.recal.txt; src/test/resources/org/broadinstitute/hellbender/tools/BQSR/expected.CEUTrio.HiSeq.WGS.b37.ch20.1m-1m20k.NA12878.quantizing_levels_6.recal.txt; src/test/resources/org/broadinstitute/hellben,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:19604,test,test,19604,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,Set the system property 'dataflowRunner' to the simple classname of the; runner you wish to use. E.g. gradle test -Dtest.single=CountBasesDataflowUnitTest -DdataflowRunner=SparkPipelineRunner,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/546:109,test,test,109,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/546,1,['test'],['test']
Testability,Set up continuous tests for the conda environment on MacOS in Travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6813:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6813,1,['test'],['tests']
Testability,"Setting a default batch size of 5 since that seemed to work out well in the two Stroke Anderson runs, overridable at the workflow level. Also cleaned up some logging and wrapping exceptions before throwing to avoid confusing stack traces when scanning through logs.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7860:158,log,logging,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7860,2,['log'],"['logging', 'logs']"
Testability,Setup Jenkins job to run gatk and picard tests off of every htsjdk master build,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1705:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1705,1,['test'],['tests']
Testability,"Several GQ0 cleanup changes:; Set GGVCFs --all-sites GQ0 hom-refs to no-calls; Set regular GGVCFs GQ0 hom-refs to no-calls (any DP, PL) for better AF/AN annotations; Remove PLs in ""no data"" case where DP=0 for more accurate QUAL score. Users can expect ANs to be reduced where GQ0 hom-refs previously occurred. QUALs may be decreased where PL=[0,0,0] because those genotypes are no longer included in QUAL calculations. QD will change where QUAL changes. InbreedingCoeff and ExcessHet will change because GQ0 hom-refs don't count anymore. None of these changes significantly impacted NA12878 accuracy in exome and WGS tests.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8741:618,test,tests,618,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8741,1,['test'],['tests']
Testability,"Several changes:. - Fix https://github.com/broadinstitute/gatk/issues/4741, where newer versions of conda appear to treat relative references in the environment yml as being relative to the yml file instead of relative to the cwd (based on observation).; - Add a second conda yml file (`gatkcondaenv.intel.yml`) for environments that use Intel hardware acceleration and Intel Tensorflow package (based on https://github.com/broadinstitute/gatk/pull/4735).; - Add a gradle task (`condaEnvironmentDefinition`) to generate the conda yml files from a single template to ensure that all the environment definitions remain in sync. This task also generates the Python package archive.; - Add a gradle task (`localDevCondaEnv`) to create or update a local (non-Intel) conda environment. This is a shortcut for use during development when you're iteratively changing/testing Python code and want to update the conda env.; - Opportunistically removed the prefix verb ""create"" from the name of the `createPythonPackageArchive` task, which is now called `pythonPackageArchive`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4749:859,test,testing,859,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4749,1,['test'],['testing']
Testability,Share more code between walker and Spark integration tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5723:53,test,tests,53,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5723,1,['test'],['tests']
Testability,Shorten over-long test file names,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4736:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4736,1,['test'],['test']
Testability,Should include a CRAM file test.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1133:27,test,test,27,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1133,1,['test'],['test']
Testability,Should probably be started only after the tests in https://github.com/broadinstitute/hellbender/issues/695 are in place.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/696:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/696,1,['test'],['tests']
Testability,"Should we add this to the gradle build? Unit test require R and various R libraries to be installed, but this isn't mentioned in the documentation or performed by the build script. . I suggest we ; 1. tag all tests that require R in some way so that they can be disabled a system that doesn't have R; 2. add documentation to the readme explaining you need R and a number of r libraries; 3. either document that you must run install_R_packages.R or have gradle do it",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/222:45,test,test,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/222,2,['test'],"['test', 'tests']"
Testability,"Similar issues to last time. Do we have a test case yet that simulates AoU's usage?. In addition to this, the workflow seems to function on an older version of GVS, as long as I make the following modifications:. - Add columns `sample_info.withdrawn`, `sample_info.is_control`; - Backfill true/false accordingly to these columns (backfilling withdrawn seems unnecessary)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7874:42,test,test,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7874,1,['test'],['test']
Testability,"Simple code changes that improve performance of BaseRecalibrator by ~20%. . NOTE: this is not related to removing indels. That will come later and is expected to improve performance further. According to my tests, we now beat GATK3 on the infamous first 10Mb of chr1 in CEUTrio.HiSeq.WGS.b37.NA12878.bam. @droazen can you review? some of those changes are similar to those in #1099",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1114:207,test,tests,207,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1114,1,['test'],['tests']
Testability,"Simple fix to remove trailing slash in GCS_SAVE_PATH to avoid double slashes in GCS_RESULTS_DIR. Without this, if the `manage_sv_pipeline.sh` is launched with `-s gs://custom/path/to/save/` having the trailing slash, log file and cmd line info will be saved to a strange place.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4873:217,log,log,217,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4873,1,['log'],['log']
Testability,"SimpleInterval has a constructor that parses an interval String, but without access to a SequenceDictionary its not possible to correctly interpret intervals with contig names such as those used in hg38. It looks like the only non-test consumer of this method is TableCodec. For example:. - `HLA-A*01:01:01:01` is interpreted as `HLA-A*01:01:01:1-1`, but `HLA-A*01:01:01` doesn't exist; - `HLA-A*01:01:01:02N` its interpreted as position `02N` on contig `HLA-A*01:01:01`, which fails to parse, and the contig doesn't exist. GATK command line intervals resolve these by consulting the sequence dictionary. For hg38 at least, there can be no ambiguity and there is always only one correct interpretation. Its possible to construct a legal sequence dictionary that has ambiguities though.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4597:231,test,test,231,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4597,1,['test'],['test']
Testability,Simplified cigar and clipping code; added tests and fixed a few bugs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6403:42,test,tests,42,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6403,1,['test'],['tests']
Testability,Simplifies BQSR covariates - use only 4 standard ones. Remove magic indexing. Add tests. Addresses #258 . @droazen please review,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/413:82,test,tests,82,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/413,1,['test'],['tests']
Testability,Since it's currently difficult to find the links in the travis logs,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6234:63,log,logs,63,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6234,1,['log'],['logs']
Testability,"Since the Picard changes in #3620, SamAssertionUtils has been failing silently. See e.g. the Standard error tab for https://storage.googleapis.com/hellbender-test-logs/build_reports/13120.7/tests/test/classes/org.broadinstitute.hellbender.tools.spark.pipelines.ReadsPipelineSparkIntegrationTest.html:. ```; USAGE: SortSam [arguments]; ...; input is not a recognized option; ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3664:158,test,test-logs,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3664,3,['test'],"['test', 'test-logs', 'tests']"
Testability,"Since we might need to run the GvsPrepareRangesCallset.wdl in the future just to help to get the callset stats, add an optional input to not create the __REF_DATA and __SAMPLES tables, since those won't be needed. Test runs: ; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/1ee2bc37-abd4-4185-a17d-e1f6b47a6914) `skip_ref_ranges_tables ` set to `true`:; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/2849dfd1-fe41-4757-83f3-fc0f5451eaef) `skip_ref_ranges_tables ` set to `false`; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/5e8c5c4d-6ae5-4117-a5ea-89a05d379cfd) `skip_ref_ranges_tables ` not set (default is false); - [GvsCallsetStatistics run](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/3e14b26f-125b-4742-b7a2-17cab2ac7f6f); ... after changes ... ; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/3560a8a6-71ef-46b4-be64-fd35ea5303c6) `only_output_vet_tables` set to `true`; - [with](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/ac3a2126-c3f1-4241-aad5-55ece4178a56) `only_output_vet_tables` set to `false`; - [GvsCreateCohortFromSampleNames](https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/35379d1b-b54a-4f5e-990a-9650c92d1ead) run (failed because of other issue)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8079:214,Test,Test,214,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8079,1,['Test'],['Test']
Testability,"Since we're using Mutect2 for mitochondrial calling, we want some reference confidence representation for joint calling. I did my best, but further refactoring suggestions appreciated. Tests to follow. @davidbenjamin can you take a look at the LODs in the integration test results? I'm not entirely surprised that at the same depth, the variant LOD is higher than the reference LOD. I'm not sure that the NON_REF LOD at variant sites is coming out right though. Is there an effective negative LOD asymptote?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5312:185,Test,Tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5312,2,"['Test', 'test']","['Tests', 'test']"
Testability,"Sizes were tested, and vm's were made smaller!!!!!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7658:11,test,tested,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7658,1,['test'],['tested']
Testability,"Small PR containing fixes for various issues:; - Move CompareSAMs to picard package (fixes https://github.com/broadinstitute/hellbender/issues/139); - Move most of `CompareSAMs.doWork()` into a separate public method, to be used by external unit tests; - Use HTSJDK's SamFileValidator in assorted unit tests, rather than ValidateSamFile (which is just a CLP wrapper); - Insert `--VERBOSITY ERROR` into CommandLineProgramTest, which suppresses most logging output for CLPs that use HTSJDK-based logging (fixes https://github.com/broadinstitute/hellbender/issues/134)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/171:246,test,tests,246,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/171,4,"['log', 'test']","['logging', 'tests']"
Testability,"Small test that demonstrates numerical error bug, and fix.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/878:6,test,test,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/878,1,['test'],['test']
Testability,"Solves #2698.; Three commits, dealing with different problems.; A test failed because of the repackaging but was solved by regenerating the expected file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2701:66,test,test,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2701,1,['test'],['test']
Testability,"Some are camel case already, some are python-style underscored arguments, and none are in the new standard format of #2596. Note that this requires carefully changing our wdls!!! @LeeTL1220 and @vdauwera this is easy enough to do, but any considerations on timing relative to releases or other logistical thoughts?. I notice that this inconsistency is shared with HaplotypeCaller. . .",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3325:294,log,logistical,294,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3325,1,['log'],['logistical']
Testability,"Some code cleanup, some existing class extension, some new utility classes. All made to prepare for complex sv detection. This is the beginning. Related changes are put into the same commit for easier review. Test coverage is expected to drop slightly, but will be take care of in later commits.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3427:209,Test,Test,209,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3427,1,['Test'],['Test']
Testability,"Some hard-coded parameters that are tuned based on eye-balling inversion test cases.; Also removed some duplicated code.; @cwhelan , would you please take a look? Thanks!",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1938:73,test,test,73,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1938,1,['test'],['test']
Testability,Some issues with the ga4gh htsget reference server have come up while the current htsget integration branch has been in development. A a server update is causing the previously passing tests to begin to fail. We need to re-enable them once the server is back on stable footing.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6640:185,test,tests,185,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6640,1,['test'],['tests']
Testability,"Some notes on individual commits:. Updated CallCopyRatioSegments and PreprocessIntervals; reorganized copynumber packages.; -For motivation of changes in CallCopyRatioSegments, see #3825.; -I added the ability to turn off binning in PreprocessIntervals by specifying bin_length = 0.; -I removed the separation between coverage and allelic packages to make the package structure a bit simpler.; -@MartonKN should review, since he wrote PreprocessIntervals and is updating the caller. Added segmentation classes and tests for ModelSegments CNV pipeline.; -I added implementations of copy-ratio, allele-fraction, and ""multidimensional"" (joint) segmentation. All implementations are pretty boilerplate; they simply partition by contig and then call out to KernelSegmenter. Note that there is some logic in multidimensional segmentation that only uses the first het in each copy-ratio interval and if any are available, and imputes the alt-allele fraction to 0.5 if not.; -Makes sense for @mbabadi to review this, since he reviewed the KernelSegmenter PR. Added modeling classes and tests for ModelSegments CNV pipeline.; -Most of this code is copied from the old MCMC code. However, I've done some overall code cleanup and refactoring, especially to remove some overextraction of methods in the allele-fraction likelihoods (see #2860). I also added downsampling and scaling of likelihoods to cut down on runtime. Tests have been simplified and rewritten to use simulated data.; -@LeeTL1220 do you think you could take a look?. Added ModelSegments CLI.; -Mostly control flow to handle optional inputs and validation, but there is some ugly and not well documented code that essentially does the GetHetCoverage step. We'll refactor later, I filed #3915.; -@asmirnov239 can review. This is lower priority than the gCNV VCF writing. Deleted gCNV WDL and Cromwell tests.; -Trivial to review. Added WDL and Cromwell tests for ModelSegments CNV pipeline.; -This includes the cost optimizations from @meganshand a",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3913:514,test,tests,514,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3913,2,"['log', 'test']","['logic', 'tests']"
Testability,Some of our dependencies make logging calls to the Java default logger that don't respect our current log level. We should hook up `LoggingUtils.setLoggingLevel` to the java default logging system so that we can control it.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/807:30,log,logging,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/807,5,"['Log', 'log']","['LoggingUtils', 'log', 'logger', 'logging']"
Testability,"Some print messages like this:; ```; Gradle suite > Gradle test > org.broadinstitute.hellbender.utils.smithwaterman.SmithWatermanIntelAlignerUnitTest > testSubstringMatchLong[0](359, 7M, SOFTCLIP) STANDARD_ERROR; 03:09:09.419 WARN NativeLibraryLoader - Unable to load libgkl_utils.so from native/libgkl_utils.so (/tmp/libgkl_utils7398935100372553580.so: Shared object ""libm.so.6"" not found, required by ""libgkl_utils7398935100372553580.so""); Test: Test method testSubstringMatchLong[0](359, 7M, SOFTCLIP)(org.broadinstitute.hellbender.utils.smithwaterman.SmithWatermanIntelAlignerUnitTest) produced standard out/err: 03:09:09.419 WARN IntelSmithWaterman - Intel GKL Utils not loaded; ```. libgkl_utils.so is installed in /usr/local/lib/libgkl_utils.so, which is under the standard prefix location /usr/local where all packages are installed. OS: FreeBSD 14.1",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/8939:59,test,test,59,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/8939,5,"['Test', 'test']","['Test', 'test', 'testSubstringMatchLong']"
Testability,"Some recent work by the Green Team as well as some evaluations we have done on our own tools have illuminated that the HaplotypeCaller has a non-deterministic output for some sites (a handful of sites across a typical 30x bam). Typically the differences manifest themselves as minor differences in the annotations at a few sites, for example the qual score and annotations might jitter from run to run like the following two variants: ; `9	103454626	.	A	T	54.60	.	AC=1;AF=0.500;AN=2;BaseQRankSum=0.431;DP=4;ExcessHet=3.0103;FS=0.000;MLEAC=1;MLEAF=0.500;MQ=26.85;MQRankSum=1.383;QD=13.65;ReadPosRankSum=0.000;SOR=2.303	GT:AD:DP:GQ:PL	0/1:2,2:4:62:62,0,78`; `9	103454626	.	A	T	52.60	.	AC=1;AF=0.500;AN=2;BaseQRankSum=0.431;DP=4;ExcessHet=3.0103;FS=0.000;MLEAC=1;MLEAF=0.500;MQ=26.85;MQRankSum=1.383;QD=13.15;ReadPosRankSum=0.000;SOR=2.303	GT:AD:DP:GQ:PL	0/1:2,2:4:60:60,0,78`; We should track down what is causing this error and shore up our score. I have found a test case that apparently reproduces the non-determinism. It seems to be somehow related to running the input data through the Google Connector. That is, the results appear to be reproducibly deterministic (at least over ~25 trials) when the input bam is local, whereas it starts to jitter when run from a `gs://` URL.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6105:962,test,test,962,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6105,1,['test'],['test']
Testability,Some refactoring of where the main WDLs live. Passing Integration test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/009b92ea-9b51-4ebe-8ddd-924c53f28a55).,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8970:66,test,test,66,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8970,1,['test'],['test']
Testability,"Some tests are failing in my local computer due to a missing R package Concretely, test classes with this problem are:. * `AllelicCNVIntegrationTest`; * `PerformSegmentationIntegrationTest`; * `SNPSegmenterUnitTest`; * `PlotACNVResultsIntegrationTest`; * `PlotSegmentedCopyRatioIntegrationTest`; * `HMMUnitTest`; * `SegmenterUnitTest`. Is there any way to skip/ignore this tests when running locally and dependencies are not found, or to pull the R libraries while running `./gradlew clean test`?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3740:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3740,4,['test'],"['test', 'tests']"
Testability,"Somehow our code coverage has dropped by 20% since the changes to shrink the docker image. I'm not sure if the issue is that we're not running a chunk of our tests or if we're not reporting coverage for some of them, but either way there is a problem.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5001:158,test,tests,158,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5001,1,['test'],['tests']
Testability,"Sometimes NON_REF gets a zero and sometimes it's empty. This seems isolated to a much older version of ReblockGVCF, but that was what we were running for production pipeline tests. @droazen I'd like this to go into this week's release",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6442:174,test,tests,174,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6442,1,['test'],['tests']
Testability,"Somewhere between #835 and now, BaseRecalibrator stopped working. When I try to run testBQSRBucket, I get the error below. This test is currently enabled so regression tests should have caught this. ```; java.lang.RuntimeException: java.lang.RuntimeException: java.lang.NoSuchMethodError: com.google.common.base.Stopwatch.createStarted()Lcom/google/common/base/Stopwatch;; at org.broadinstitute.hellbender.tools.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:131); at org.broadinstitute.hellbender.tools.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:104); at org.broadinstitute.hellbender.tools.IntegrationTestSpec.executeTest(IntegrationTestSpec.java:86); at org.broadinstitute.hellbender.tools.dataflow.pipelines.BaseRecalibratorDataflowIntegrationTest.testBQSRBucket(BaseRecalibratorDataflowIntegrationTest.java:176); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:483); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.privateRun(TestRunner.java:773); at org.testng.TestRunner.run(TestRunner.java:623); at org.testng.SuiteRunner.runTest(SuiteRunner.java:357); at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352); at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310); at org.testng.SuiteRunner.run(SuiteRunner.java:259); at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); at org.t",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/866:84,test,testBQSRBucket,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/866,4,['test'],"['test', 'testBQSRBucket', 'tests']"
Testability,"Sorry for generating a big one:. I've tried to put the relevant commits together. . 10cdeba is the biggest, but mostly refactoring the breakpoint and complication logic into 2 classes: `BreakpointsInference` and `BreakpointComplications`, which now both have class hierarchies. After that cleanup, in the following commits I've put all the efforts for inferring the alt haplotype sequence into the class `BreakpointsInference`.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/4305:163,log,logic,163,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/4305,1,['log'],['logic']
Testability,SortBamSpark does not have a SORT_ORDER parameter. once this is fixed - renable tests in SortBamSparkIntegrationTest,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1260:80,test,tests,80,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1260,1,['test'],['tests']
Testability,SortSam ShardedInput tests failing.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5881:21,test,tests,21,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5881,1,['test'],['tests']
Testability,"Spark - INS: 1394; 18/01/12 20:38:16 WARN org.apache.spark.scheduler.TaskSetManager: Stage 17 contains a task of very large size (2518 KB). The maximum recommended task size is 100 KB.; 18/01/12 20:38:22 WARN org.apache.spark.scheduler.TaskSetManager: Stage 18 contains a task of very large size (2307 KB). The maximum recommended task size is 100 KB.; 20:38:27.207 INFO StructuralVariationDiscoveryPipelineSpark - Processing 501267 raw alignments from 426041 contigs.; 18/01/12 20:38:27 WARN org.apache.spark.scheduler.TaskSetManager: Stage 20 contains a task of very large size (2518 KB). The maximum recommended task size is 100 KB.; 20:38:35.835 INFO StructuralVariationDiscoveryPipelineSpark - Primitive filtering based purely on MQ left 339065 contigs.; 20:38:37.378 INFO StructuralVariationDiscoveryPipelineSpark - 17574 contigs with chimeric alignments potentially giving SV signals.; 18/01/12 20:38:37 WARN org.apache.spark.scheduler.TaskSetManager: Lost task 284.0 in stage 25.0 (TID 43189, cw-test-w-6.c.broad-dsde-methods.internal, executor 7): java.lang.IllegalArgumentException: two input alignments' overlap on read consumes completely one of them.	1_1097_chrUn_JTFH01000492v1_decoy:501-1597_+_1097M6H_60_1_1092_O	483_612_chr17:26962677-26962806_-_482S130M491S_60_-1_281_S; 	at org.broadinstitute.hellbender.utils.Utils.validateArg(Utils.java:681); 	at org.broadinstitute.hellbender.tools.spark.sv.discovery.prototype.ContigAlignmentsModifier.removeOverlap(ContigAlignmentsModifier.java:36); 	at org.broadinstitute.hellbender.tools.spark.sv.discovery.prototype.AssemblyContigAlignmentSignatureClassifier.lambda$processContigsWithTwoAlignments$e28aa838$1(AssemblyContigAlignmentSignatureClassifier.java:114); 	at org.apache.spark.api.java.JavaPairRDD$$anonfun$toScalaFunction$1.apply(JavaPairRDD.scala:1040); 	at scala.collection.Iterator$$anon$11.next(Iterator.scala:409); 	at scala.collection.Iterator$$anon$13.hasNext(Iterator.scala:462); 	at scala.collection.Iterator$$anon$13.hasNe",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4141:2974,test,test-w-,2974,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4141,1,['test'],['test-w-']
Testability,Spark large scale validation: allow tests to be run in push-button fashion using a script or similar,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/695:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/695,1,['test'],['tests']
Testability,Spark logging doesn't respect verbosity argument,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1370:6,log,logging,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1370,1,['log'],['logging']
Testability,Spark logging should be controlled by our verbosity argument. Currently it doesn't seem to be.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1370:6,log,logging,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1370,1,['log'],['logging']
Testability,Spark nightly tests failing,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2183:14,test,tests,14,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2183,1,['test'],['tests']
Testability,"Spark tests in Jenkins are failing nightly. They've been failing since August 29th. This command:. ```; gcloud auth activate-service-account gatktestjenkins@broad-gatk-test.iam.gserviceaccount.com --key-file /scratch/testservice.json --project broad-gatk-test; ./gatk-launch MarkDuplicatesSpark \; --shardedOutput true \; -O /scratch/tmp.md.bam \; --numReducers 0 \; --apiKey $APIKEY \; -I $bamIn \; -- \; --sparkRunner GCS \; --driver-memory 8G \; --cluster $CLUSTERNAME \; --executor-cores 3 \; --executor-memory 25G \; --conf spark.yarn.executor.memoryOverhead=2500""; ```. Fails with:. ```; Exception in thread ""main"" java.lang.NoClassDefFoundError: org/apache/spark/Logging; at java.lang.ClassLoader.defineClass1(Native Method); at java.lang.ClassLoader.defineClass(ClassLoader.java:763); at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142); at java.net.URLClassLoader.defineClass(URLClassLoader.java:467); at java.net.URLClassLoader.access$100(URLClassLoader.java:73); at java.net.URLClassLoader$1.run(URLClassLoader.java:368); at java.net.URLClassLoader$1.run(URLClassLoader.java:362); at java.security.AccessController.doPrivileged(Native Method); at java.net.URLClassLoader.findClass(URLClassLoader.java:361); at java.lang.ClassLoader.loadClass(ClassLoader.java:424); at org.apache.spark.util.ChildFirstURLClassLoader.loadClass(MutableURLClassLoader.scala:52); at java.lang.ClassLoader.loadClass(ClassLoader.java:357); at org.bdgenomics.adam.serialization.ADAMKryoRegistrator.registerClasses(ADAMKryoRegistrator.scala:85); at org.broadinstitute.hellbender.engine.spark.GATKRegistrator.registerClasses(GATKRegistrator.java:74); at org.apache.spark.serializer.KryoSerializer$$anonfun$newKryo$6.apply(KryoSerializer.scala:125); at org.apache.spark.serializer.KryoSerializer$$anonfun$newKryo$6.apply(KryoSerializer.scala:125); at scala.collection.IndexedSeqOptimized$class.foreach(IndexedSeqOptimized.scala:33); at scala.collection.mutable.ArrayOps$ofRef.foreach(ArrayOps.sc",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2183:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2183,5,"['Log', 'test']","['Logging', 'test', 'tests', 'testservice']"
Testability,"Spark tests on gatk-jenkins are currently failing:. Command:. ```; ./gatk-launch MarkDuplicatesSpark \; --shardedOutput true \; -O /scratch/tmp.md.bam \; --numReducers 0 \; --apiKey $APIKEY \; -I $bamIn \; -- \; --sparkRunner GCS \; --driver-memory 8G \; --cluster $CLUSTERNAME \; --executor-cores 3 \; --executor-memory 25G \; --conf spark.yarn.executor.memoryOverhead=2500""; Error:. 16/11/29 16:21:01 ERROR org.apache.spark.SparkContext: Error initializing SparkContext.; org.apache.spark.SparkException: Could not parse Master URL: 'yarn'; 	at org.apache.spark.SparkContext$.org$apache$spark$SparkContext$$createTaskScheduler(SparkContext.scala:2735); 	at org.apache.spark.SparkContext.<init>(SparkContext.scala:522); 	at org.apache.spark.api.java.JavaSparkContext.<init>(JavaSparkContext.scala:59); 	at org.broadinstitute.hellbender.engine.spark.SparkContextFactory.createSparkContext(SparkContextFactory.java:150); 	at org.broadinstitute.hellbender.engine.spark.SparkContextFactory.getSparkContext(SparkContextFactory.java:82); 	at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:36); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:109); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:167); 	at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:186); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:95); 	at org.broadinstitute.hellbender.Main.instanceMain(Main.java:102); 	at org.broadinstitute.hellbender.Main.mainEntry(Main.java:115); 	at org.broadinstitute.hellbender.Main.main(Main.java:157); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(M",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2289:6,test,tests,6,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2289,1,['test'],['tests']
Testability,"Spark tools should be just as easy to run as walkers. Users shouldn't have to write a shell script to invoke spark-submit or gcloud, build a special jar and upload it somewhere, log in to a particular machine, etc. Ideally we want something as simple as: `./hellbender ToolName [toolOptions] [sparkOptions]`, and the engine should figure out whether to invoke spark-submit or gcloud and invoke it on the user's behalf. Options include:; -Invoke spark-submit/gcloud programmatically within hellbender (possibly using a simple `Runtime.getRuntime().exec()` approach). -Write a shell script that can run any hellbender command and auto-delegate to spark-submit / gcloud as necessary.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/961:178,log,log,178,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/961,1,['log'],['log']
Testability,"SparkSharder: add test with long reads (eg., 10,000 bases), and ensure it doesn't crash and a user-friendly message is thrown",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2253:18,test,test,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2253,2,['test'],['test']
Testability,"SparkTestUtils contains a useful method that tests whether a class is; serializable/deserializable in Kryo. This method is needed by the; gatk-protected test suite, but is not currently packaged in the gatk-public; jar. Moving to utils/test so that it will be packaged.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1849:45,test,tests,45,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1849,3,['test'],"['test', 'tests']"
Testability,"Spin up a public jenkins server for long-running validation tests (and other tests that can't or shouldn't run in travis), or switch from travis to a more flexible CI provider",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1400:60,test,tests,60,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1400,2,['test'],['tests']
Testability,Split integration tests into two roughly equal targets,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2818:18,test,tests,18,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2818,1,['test'],['tests']
Testability,"Split more travis integration tests into the ""variant calling"" job",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4990:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4990,1,['test'],['tests']
Testability,Split travis integration tests into two jobs to reduce test runtime,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4983:25,test,tests,25,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4983,2,['test'],"['test', 'tests']"
Testability,Split unit tests into two roughly equal targets,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2819:11,test,tests,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2819,1,['test'],['tests']
Testability,"SplitNCigarReads is failing due to incompatibilities between htsjdk's version of snappy and Spark's version. Temporary solution is to add system property 'disable.snappy' to force htsjdk to fallback to pure java. Longer term solution likely involves patches to htsjdk and possibly snappy itself. ```; ./gatk-launch SplitNCigarReads -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -O out.bam -R src/test/resources/large/human_g1k_v37.20.21.fasta. Running:; /Users/louisb/Workspace/gatk/build/install/gatk/bin/gatk SplitNCigarReads -I src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam -O out.bam -R src/test/resources/large/human_g1k_v37.20.21.fasta; 15:31:00.516 INFO IntelGKLUtils - Trying to load Intel GKL library from:; jar:file:/Users/louisb/Workspace/gatk/build/install/gatk/lib/gkl-0.1.2.jar!/com/intel/gkl/native/libIntelGKL.dylib; 15:31:00.552 INFO IntelGKLUtils - Intel GKL library loaded from classpath.; [July 20, 2016 3:31:00 PM EDT] org.broadinstitute.hellbender.tools.walkers.rnaseq.SplitNCigarReads --output out.bam --input src/test/resources/large/CEUTrio.HiSeq.WGS.b37.NA12878.20.21.bam --reference src/test/resources/large/human_g1k_v37.20.21.fasta --refactor_NDN_cigar_string false --maxReadsInMemory 150000 --maxMismatchesInOverhang 1 --maxBasesInOverhang 40 --doNotFixOverhangs false --disable_all_read_filters false --interval_set_rule UNION --interval_padding 0 --readValidationStringency SILENT --secondsBetweenProgressUpdates 10.0 --disableSequenceDictionaryValidation false --createOutputBamIndex true --createOutputBamMD5 false --addOutputSAMProgramRecord true --help false --version false --verbosity INFO --QUIET false --use_jdk_deflater false; [July 20, 2016 3:31:00 PM EDT] Executing as louisb@wm1b0-8ab on Mac OS X 10.10.5 x86_64; Java HotSpot(TM) 64-Bit Server VM 1.8.0_91-b14; Version: Version:4.alpha.1-217-g3ff51ed-SNAPSHOT; 15:31:00.557 INFO SplitNCigarReads - Defaults.BUFFER_SIZE : 131072; 15:31:00.557 INFO SplitNCigarReads - ",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2026:339,test,test,339,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2026,4,['test'],['test']
Testability,SplitNCigarReadsIntegrationTest and SplitNCigarReadsUnitTest are bizzarely similar. something weird is going on. the 'integration test' is not really an intergration test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1209:130,test,test,130,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1209,2,['test'],['test']
Testability,Splitting out gatk-testUtils as a separate artifact,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5112:19,test,testUtils,19,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5112,1,['test'],['testUtils']
Testability,"Stacktrace is below. It looks like the default port (8020) is not being picked up.; ```; org.apache.spark.SparkException: Job aborted due to stage failure: Task 8 in stage 5.0 failed 4 times, most recent failure: Lost task 8.3 in stage 5.0 (TID 82, tw-cluster-2-w-4.c.broad-gatk-collab.internal): java.lang.IllegalArgumentEx; ception: Wrong FS: hdfs://tw-cluster-2-m:-1/user/tom/small_spark_eval/dbsnp_138.b37.20.21.vcf, expected: hdfs://tw-cluster-2-m; at org.apache.hadoop.fs.FileSystem.checkPath(FileSystem.java:648); at org.apache.hadoop.hdfs.DistributedFileSystem.getPathName(DistributedFileSystem.java:194); at org.apache.hadoop.hdfs.DistributedFileSystem.access$000(DistributedFileSystem.java:106); at org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1305); at org.apache.hadoop.hdfs.DistributedFileSystem$22.doCall(DistributedFileSystem.java:1301); at org.apache.hadoop.fs.FileSystemLinkResolver.resolve(FileSystemLinkResolver.java:81); at org.apache.hadoop.hdfs.DistributedFileSystem.getFileStatus(DistributedFileSystem.java:1301); at org.apache.hadoop.fs.FileSystem.exists(FileSystem.java:1426); at hdfs.jsr203.HadoopFileSystem.checkAccess(HadoopFileSystem.java:937); at hdfs.jsr203.HadoopFileSystemProvider.checkAccess(HadoopFileSystemProvider.java:75); at java.nio.file.Files.exists(Files.java:2385); at org.broadinstitute.hellbender.utils.io.IOUtils.assertFileIsReadable(IOUtils.java:551); at org.broadinstitute.hellbender.engine.FeatureDataSource.getFeatureReader(FeatureDataSource.java:292); at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:244); at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:218); at org.broadinstitute.hellbender.engine.FeatureDataSource.<init>(FeatureDataSource.java:202); at org.broadinstitute.hellbender.engine.spark.KnownSitesCache.loadFromFeatureDataSource(KnownSitesCache.java:43); ```",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3468:1396,assert,assertFileIsReadable,1396,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3468,1,['assert'],['assertFileIsReadable']
Testability,Standardize test data location and naming,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/445:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/445,1,['test'],['test']
Testability,Standardize test results directory between normal/docker tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8718:12,test,test,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8718,2,['test'],"['test', 'tests']"
Testability,"StateSegments.makeCalls(GenotypeCopyNumberTriStateSegments.java:104); at org.broadinstitute.hellbender.tools.exome.germlinehmm.CopyNumberTriStateSegmentCaller.doWork(CopyNumberTriStateSegmentCaller.java:121); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:108); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:166); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:185). ```. You can see all input files here:; /dsde/working/asmirnov/evaluations/Germline_CNV/TCGA/xhmm/debugging. The best fix would probably be to provide a warning to the user about inconsistency between target lists, and then subset input targets to match the those found in read count collection.; You can do that in the makeCalls() method of the GenotypeCopyNumberTriStateSegments tool here:. ```; @Override; protected void makeCalls(final CopyNumberTriStateHiddenMarkovModel model, final TargetCollection<Target> targets, final ReadCountCollection inputCounts) {; logger.info(""Composing list of segment intervals to genotype ..."");; final List<GenotypingSegment> segments = composeGenotypingSegments(segmentsFile, targets);; logger.info(String.format(""A total of %d segments to genotype found"", segments.size()));; final List<ForwardBackwardAlgorithm.Result<Double, Target, CopyNumberTriState>> fbResults = runFWBWAlgorithm(model, inputCounts);; for (final GenotypingSegment segment : segments) {; final VariantContext variant = composeVariantContext(segment, inputCounts.columnNames(), fbResults);; outputWriter.add(variant);; }; }; ```. @vruano Could you please look into this?. ---. @vruano commented on [Wed Oct 05 2016](https://github.com/broadinstitute/gatk-protected/issues/727#issuecomment-251744663). Ok, I will take care of this. For now just to mention that the workaround is to provide a tool with a target file that matches the targets in the input count file.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/2898:3508,log,logger,3508,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/2898,2,['log'],['logger']
Testability,Still got to test my Rc vs 923 add validation branch on the integration test now that it's fixed!,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8592:13,test,test,13,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8592,2,['test'],['test']
Testability,"Still not sure why the tests failed randomly! all XHMM-related tests use their own RNG with fixed seeds and there are no RNG calls in any parallel streams. Therefore, the randomly generated test data must be identical and fully deterministic across all runs. However, it did not appear to be the case! some test runs triggered a bug in HMMPostProcessor (see below) and some runs didn't. I removed a few unnecessary RNGs and the issue is not reproducible anymore. In particular, both XHMMModel and XHMMEmissionProbabilityCalculator had their own RNG but then again, if the tests are run in a deterministic order, it shouldn't matter. The good news is the bug in HMMPostProcessor is fixed; the bad news is, I still don't know why the tests were not deterministic. I bet the failing issue is (magically!) fixed as a result of pulling out the RNG from XHMMModel and XHMMEmissionProbabilityCalculator. If it occurs again, I'll investigate more. - fixed a bug in HMMPostProcessor that required all samples to be queried in the given list of genotyping segments every time (origin of the failing tests: sometimes the randomly generated genotyping segments contained fewer samples than all samples available for genotyping); - got rid of the unnecessary RNG in XHMMModel to make it stateless (sampling requires an external RNG); - also made XHMMEmissionProbabilityCalculator stateless (sampling requires an external RNG); - truncated the target list used in XHMM integration tests (cuts down the test time by a factor of 10)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3140:23,test,tests,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3140,9,['test'],"['test', 'tests']"
Testability,Stop tests from producing adam.log,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1123:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1123,2,"['log', 'test']","['log', 'tests']"
Testability,Stop tests from running when only variant store scripts are touched,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8250:5,test,tests,5,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8250,1,['test'],['tests']
Testability,StreamingProcessControllerUnitTest.testSerialCommands (intermittent?) test failure on Travis.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4014:35,test,testSerialCommands,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4014,2,['test'],"['test', 'testSerialCommands']"
Testability,StreamingPythonExecutor testStderrOutput unit test fails intermittently on Travis,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5065:24,test,testStderrOutput,24,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5065,2,['test'],"['test', 'testStderrOutput']"
Testability,"String.format(""[%d]"", foo);; } else {; numSparkCores = ""[*]"";; }; DEFAULT_SPARK_MASTER = ""local"" + numSparkCores;; }. ```. Error messages:. ```; java.lang.NullPointerException at org.broadinstitute.hellbender.engine.spark.SparkContextFactory.getSparkContext(SparkContextFactory.java:77); at org.broadinstitute.hellbender.engine.spark.SparkCommandLineProgram.doWork(SparkCommandLineProgram.java:36); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.runTool(CommandLineProgram.java:102); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMainPostParseArgs(CommandLineProgram.java:155); at org.broadinstitute.hellbender.cmdline.CommandLineProgram.instanceMain(CommandLineProgram.java:174); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:67); at org.broadinstitute.hellbender.Main.instanceMain(Main.java:74); at org.broadinstitute.hellbender.CommandLineProgramTest.runCommandLine(CommandLineProgramTest.java:65); at org.broadinstitute.hellbender.utils.test.testers.SamFileTester.runTest(SamFileTester.java:263); at org.broadinstitute.hellbender.utils.test.testers.AbstractMarkDuplicatesCommandLineProgramTest.testBulkFragmentsNoDuplicates(AbstractMarkDuplicatesCommandLineProgramTest.java:460); at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); at java.lang.reflect.Method.invoke(Method.java:497); at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85); at org.testng.internal.Invoker.invokeMethod(Invoker.java:639); at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821); at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131); at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124); at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108); at org.testng.TestRunner.pri",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/1768:2193,test,testers,2193,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/1768,1,['test'],['testers']
Testability,StructuralVariationDiscoveryPipelineSpark is generating too much logging info,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4531:65,log,logging,65,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4531,1,['log'],['logging']
Testability,Successful Integration Test [here](https://app.terra.bio/#workspaces/gvs-dev/GVS%20Integration/job_history/d43ca844-632b-4737-962e-56369ac91e53),MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8696:23,Test,Test,23,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8696,1,['Test'],['Test']
Testability,Successful test run here: https://app.terra.bio/#workspaces/gvs-dev/RSA%20-%20GVS%20Quickstart%20V2%20/job_history/379e28fa-7326-43e0-834a-6f8b846ef76f,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8216:11,test,test,11,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8216,1,['test'],['test']
Testability,"Summary of VQSR Changes; 	- ONLY populate AS_RAW_MQRankSum or AS_RAW_ReadPosRankSum for ref-alt genotypes (0/1, 0/2) not 1/1/,1/2,2,2; 	- AS_RAW_MQ for Non AS... Assign full MQ to alternate allele (don't distribute); 	- Compute SUM(AD) for future use; 	- provide command line option to force the AS-Approximate path even when AS annotations are available (for benchmarking/comparisons)",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7718:360,benchmark,benchmarking,360,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7718,1,['benchmark'],['benchmarking']
Testability,Support for log-level TRACE.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6378:12,log,log-level,12,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6378,1,['log'],['log-level']
Testability,"Suppose the reference haplotype is; TAAGC. . . . TAAGG. . . . and an alt haplotype (SNV at the last G shown) is; TAAGC. . . TAAG**C**. . . Suppose further that we have a read ending in the first TAAGC that has been hard-clipped (to fit the assembly region) to just a 5-base TAAGC stub. Pair-HMM is fully Bayesian and computes the total likelihood of *all* possible alignments of a read to each haplotype. This gives the alt haplotype a factor of 2 advantage because TAAGC matches it in two locations, so there are two perfectly matching alignments instead of one. In log 10 space this is log_10(2) = 0.301, which is greater than our 0.2 threshold for a likelihood to be considered informative. Therefore, by clipping the read and losing the information of its first 96 bases, we end up considering it informative for the wrong haplotype. This can lead to false positives. It *also* causes false negatives because sometimes a read stub from the normal sample get misaligned to the alt haplotype, triggering the normal artifact filter. It also causes problems in our bamout-based MC3 validation.",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/5060:280,stub,stub,280,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/5060,3,"['log', 'stub']","['log', 'stub']"
Testability,Suppress the `cp: target '/gatk/srcdir' is not a directory` error message that appears in all of the travis logs by creating the target srcdir first in run_unit_tests.sh.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/5878:108,log,logs,108,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/5878,1,['log'],['logs']
Testability,Surgical changes to the VariantContextTestUtils to allow the GenomicsDB importer to tests to compare variants coming from a BCF stream with variants coming from a VCF stream.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2610:84,test,tests,84,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2610,1,['test'],['tests']
Testability,Switch to OneShotLogger for logging this message,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3828:28,log,logging,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3828,1,['log'],['logging']
Testability,Switch to logging a warning instead of an exception for intervals in query that were not part of GenomicsDBImport,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8987:10,log,logging,10,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8987,1,['log'],['logging']
Testability,"Switch to using async IO by default. It's an out-of-the-box win for almost everybody because almost everyone has more than 1 CPU. Difference is write speed is at least 20%. . Also added a line to the output that indicates what IO we're using (a'la deflater). On single processors it is slower than syncIO, so you can turn it off by running like this:. ```; JAVA_OPTS=""-Dsamjdk.use_async_io=false"" ./gatk-launch PrintReads .....; ```. @lbergelson can you review and test?",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/1588:465,test,test,465,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/1588,1,['test'],['test']
Testability,Switching over remaining usages of TestPipeline,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/564:35,Test,TestPipeline,35,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/564,1,['Test'],['TestPipeline']
Testability,"System specs - (RedHat, Java 1.8.0_144); Clean git clone. ```; gradlew --stacktrace; Creating GATK Python package archive...; :createPythonPackageArchive UP-TO-DATE; :compileJava UP-TO-DATE; :processResources UP-TO-DATE; :classes UP-TO-DATE; :gatkTabComplete; error: error reading /vsc-hard-mounts/leuven-user/304/vsc30484/.gradle/caches/modules-2/files-2.1/org.spire-math/spire_2.11/0.11.0/998b1c1d841baf4fc5d1b119ea55f165f6684ef5/spire_2.11-0.11.0.jar; error in opening zip file; 1 error; :gatkTabComplete FAILED. FAILURE: Build failed with an exception. * What went wrong:; Execution failed for task ':gatkTabComplete'.; > Javadoc generation failed. Generated Javadoc options file (useful for troubleshooting): '/vsc-hard-mounts/leuven-data/304/vsc30484/git/gatk/build/tmp/gatkTabComplete/javadoc.options'. * Try:; Run with --info or --debug option to get more log output. * Exception is:; org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':gatkTabComplete'.; at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69); at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46); at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35); at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64); at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58); at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:52); at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52); at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53); at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.exec",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4155:864,log,log,864,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4155,1,['log'],['log']
Testability,"TBH I'm not sure what went wrong with the previous image, I just re-baked a new one with the current version of gcloud-sdk and that seems to be working (or at least gsutil does not immediately explode). Test run here https://job-manager.dsde-prod.broadinstitute.org/jobs/016779a9-62d0-4195-9598-5f0eee559d99",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8289:203,Test,Test,203,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8289,1,['Test'],['Test']
Testability,"TEST - DO NOT MERGE: Revert ""Fix BucketUtils#dirSize on GCS. #3437 (#3539)""",MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3546:0,TEST,TEST,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3546,1,['TEST'],['TEST']
Testability,TE_Q0S.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-normal.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-tumor.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/collectfragmentcounts/collect-fragment-counts-NA12878.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.dict; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.cram.crai; src/test/resources/org/broadinsti,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:25656,test,test,25656,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,TKException: Timeout waiting for background stream write to complete; 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterService.waitForPreviousBatchCompletion(AsynchronousStreamWriterService.java:96); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.dispatchABatch(AsynchronousStreamWriterServiceUnitTest.java:79); 	at org.broadinstitute.hellbender.utils.runtime.AsynchronousStreamWriterServiceUnitTest.testAsyncWriteInBatches(AsynchronousStreamWriterServiceUnitTest.java:35); 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method); 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62); 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43); 	at java.lang.reflect.Method.invoke(Method.java:498); 	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108); 	at org.testng.internal.Invoker.invokeMethod(Invoker.java:661); 	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869); 	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193); 	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126); 	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109); 	at org.testng.TestRunner.privateRun(TestRunner.java:744); 	at org.testng.TestRunner.run(TestRunner.java:602); 	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380); 	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375); 	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340); 	at org.testng.SuiteRunner.run(SuiteRunner.java:289); 	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52); 	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86); 	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301); 	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226); 	at org.testng.TestNG.runSuites(TestNG.java:1144); 	at org.testng.TestNG.run(TestNG.java:1115); 	at org.grad,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4024:1095,test,testng,1095,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4024,1,['test'],['testng']
Testability,TODO:; Builder method; Still want to fully test the compressed location method (do we? do we care about this for Azure?!??!); Still want to fully test the header creation. to run this locally:; java -jar ../build/libs/gatk.jar \; CreateVariantIngestFiles \; -V HG00405.haplotypeCalls.er.raw.vcf.gz.rb.g.vcf.gz \; -L wgs_calling_regions.hg38.noCentromeres.noTelomeres.interval_list \; -IG FORTY \; --force-loading-from-non-allele-specific false \; --ignore-above-gq-threshold false \; --project-id gvs-internal \; --dataset-name hatcher_import_test \; --enable-reference-ranges true \; --enable-vet true \; --enable-vcf-headers true \; --output-type PARQUET \; -SN SM-N58BO \; -SNM sample_map.csv \; --ref-version 38 \; --skip-loading-vqsr-fields false,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/8845:43,test,test,43,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/8845,2,['test'],['test']
Testability,T_10_CT_15_X_CCCCC_XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10_CT_15_X_CCCCC_XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_10.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_20.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.QT_2.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.X_CCCCC.tmp; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.bam; src/test/resources/org/broadinstitute/hellbender/tools/ClipReads/expected.clippingReadsTest.withRG.hg19.XF.tmp; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-normal.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/allelic/collect-allelic-counts-tumor.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/copynumber/collectfragmentcounts/collect-fragment-counts-NA12878.bam.bai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.dict; src/test/resources/org/broadinstitute/hellbender/tools/count_bases.fasta.fai; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.cram.crai; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.dict; src/test/resources/org/broadinstitute/hellbender/tools/count_reads.fasta.fai;,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3905:25773,test,test,25773,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3905,1,['test'],['test']
Testability,TableFeature javadoc and more tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3175:30,test,tests,30,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3175,1,['test'],['tests']
Testability,TableFeature needs javadoc and more tests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/453:36,test,tests,36,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/453,1,['test'],['tests']
Testability,Temporarily disable HtsgetReader tests.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6804:33,test,tests,33,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6804,1,['test'],['tests']
Testability,Temporarily disable IndexFeatureFile and tests to avoid creation of bad indices.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/3057:41,test,tests,41,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/3057,1,['test'],['tests']
Testability,Temporary branch for CARROT test,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/7039:28,test,test,28,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/7039,1,['test'],['test']
Testability,Test --missingValuesInExpressionsShouldEvaluateAsFailing in VariantFiltration,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2323:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2323,1,['Test'],['Test']
Testability,Test BQSR with multiple known sites files,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/231:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/231,1,['Test'],['Test']
Testability,Test DetermineGermlineContigPloidy on known aneuploidy samples,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4371:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4371,1,['Test'],['Test']
Testability,Test GATK4 with the existing S3 NIO plugin and get basic S3 read support working,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/3708:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/3708,1,['Test'],['Test']
Testability,Test HaplotypeCaller memory usage on pathological samples,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/4272:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/4272,1,['Test'],['Test']
Testability,Test JEXL behavior for missing FORMAT value,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/2570:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/2570,1,['Test'],['Test']
Testability,Test Microbe's variant recapture using pile-up regenotyping in Malaria data.,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/7321:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/7321,1,['Test'],['Test']
Testability,Test NuMT filtering thresholds,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/pull/6569:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/pull/6569,1,['Test'],['Test']
Testability,Test Ticket GitZen,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/6380:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/6380,1,['Test'],['Test']
Testability,Test aren't running for fork pull requests,MatchSource.ISSUE,broadinstitute,gatk,4.6.0.0,https://github.com/broadinstitute/gatk/issues/810:0,Test,Test,0,https://software.broadinstitute.org/gatk,https://github.com/broadinstitute/gatk/issues/810,1,['Test'],['Test']
