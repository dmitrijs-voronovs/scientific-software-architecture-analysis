quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"or::SetCldirChecked ; (; Double_t * ; dir). inline . Definition at line 193 of file TGeoNavigator.h. ◆ SetCurrentDirection() [1/2]. void TGeoNavigator::SetCurrentDirection ; (; const Double_t * ; dir). inline . Definition at line 185 of file TGeoNavigator.h. ◆ SetCurrentDirection() [2/2]. void TGeoNavigator::SetCurrentDirection ; (; Double_t ; nx, . Double_t ; ny, . Double_t ; nz . ). inline . Definition at line 186 of file TGeoNavigator.h. ◆ SetCurrentPoint() [1/2]. void TGeoNavigator::SetCurrentPoint ; (; const Double_t * ; point). inline . Definition at line 172 of file TGeoNavigator.h. ◆ SetCurrentPoint() [2/2]. void TGeoNavigator::SetCurrentPoint ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ). inline . Definition at line 173 of file TGeoNavigator.h. ◆ SetLastPoint(). void TGeoNavigator::SetLastPoint ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ). inline . Definition at line 179 of file TGeoNavigator.h. ◆ SetLastSafetyForPoint() [1/2]. void TGeoNavigator::SetLastSafetyForPoint ; (; Double_t ; safe, . const Double_t * ; point . ). inline . Definition at line 194 of file TGeoNavigator.h. ◆ SetLastSafetyForPoint() [2/2]. void TGeoNavigator::SetLastSafetyForPoint ; (; Double_t ; safe, . Double_t ; x, . Double_t ; y, . Double_t ; z . ). inline . Definition at line 199 of file TGeoNavigator.h. ◆ SetOutside(). void TGeoNavigator::SetOutside ; (; Bool_t ; flag = kTRUE). inline . Definition at line 148 of file TGeoNavigator.h. ◆ SetPWSafetyCaching(). static void TGeoNavigator::SetPWSafetyCaching ; (; Bool_t ; b). inlinestatic . Definition at line 231 of file TGeoNavigator.h. ◆ SetStartSafe(). void TGeoNavigator::SetStartSafe ; (; Bool_t ; flag = kTRUE). inline . Definition at line 136 of file TGeoNavigator.h. ◆ SetStep(). void TGeoNavigator::SetStep ; (; Double_t ; step). inline . Definition at line 137 of file TGeoNavigator.h. ◆ Step(). TGeoNode * TGeoNavigator::Step ; (; Bool_t ; is_geom = kTRUE, . Bool_t ; cross = kTRUE . ). Make a rectiliniar step of le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:43261,safe,safe,43261,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safe']
Safety,"or::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. » Last changed: Thu Nov 3 20:22:01 2011 » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPySelector.html:9714,Abort,Abort,9714,root/html532/TPySelector.html,https://root.cern,https://root.cern/root/html532/TPySelector.html,1,['Abort'],['Abort']
Safety,"or<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const Double32_t& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const Double32_t& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const Double32_t* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__SVector_Double32_t_3_.html:7362,avoid,avoid,7362,root/html534/ROOT__Math__SVector_Double32_t_3_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__SVector_Double32_t_3_.html,4,['avoid'],['avoid']
Safety,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html:6744,avoid,avoid,6744,root/html602/ROOT__Math__SVector_float_2_.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SVector_float_2_.html,6,['avoid'],['avoid']
Safety,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__SVector_float_2_.html:6692,avoid,avoid,6692,root/html534/ROOT__Math__SVector_float_2_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__SVector_float_2_.html,6,['avoid'],['avoid']
Safety,"or>(const SVector<T,D>& rhs); element wise comparison. bool operator<(const SVector<T,D>& rhs); element wise comparison. const T& operator[](unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& operator()(unsigned int i) const; read-only access of vector elements. Index starts from 0. const T& At(unsigned int i) const; read-only access of vector elements with check on index. Index starts from 0. T& operator[](unsigned int i); read/write access of vector elements. Index starts from 0. T& operator()(unsigned int i); read/write access of vector elements. Index starts from 0. T& At(unsigned int i); read/write access of vector elements with check on index. Index starts from 0. SVector<T,D>& operator+=(const T& rhs); self addition with a scalar. SVector<T,D>& operator-=(const T& rhs); self subtraction with a scalar. SVector<T,D>& operator*=(const float& rhs); self multiplication with a scalar. SVector<T,D>& operator/=(const float& rhs); self division with a scalar. SVector<T,D>& operator+=(const SVector<T,D>& rhs); self addition with another vector. SVector<T,D>& operator-=(const SVector<T,D>& rhs); self subtraction with another vector. SVector<T,D>& Unit(); @name --- Expert functions --- ; transform vector into a vector of length 1. bool IsInUse(const float* p) const. Function to check if a vector is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the vector is in use, for example in operations; like V = M * V, where M is a mtrix, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__SVector_float_2_.html:6744,avoid,avoid,6744,root/html604/ROOT__Math__SVector_float_2_.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__SVector_float_2_.html,6,['avoid'],['avoid']
Safety,"order { kNoTreatment; kKernelRenorm; kSampleMirror; };. private:. Float_tfFineFactorfine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function; TH1F*fFirstIterHisthistogram to be filled in the hidden iteration; Bool_tfHiddenIterationDefines if whats currently running is the ; TH1F*fHistcopy of input histogram; TMVA::KDEKernel::EKernelIterfIteriteration number; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects; TF1*fKernel_integthe integral of the Kernel function; TMVA::MsgLogger*fLoggermessage logger; Float_tfLowerEdgethe lower edge of the PDF; Float_tfSigmaWidth of the Kernel function; TH1F*fSigmaHistcontains the Sigmas Widths for adaptive KDE ; Float_tfUpperEdgethe upper edge of the PDF. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); constructor; sanity check. ~KDEKernel(); destructor. void SetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); fIter == 1 ---> nonadaptive KDE; fIter == 2 ---> adaptive KDE. Float_t GetBinKernelIntegral(Float_t lowr, Float_t highr, Float_t mean, Int_t binnum); calculates the integral of the Kernel. KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.). const char* GetName() const; modified name (remove TMVA::). { return ""KDEKernel""; }. » Author: Asen Christov » Copyright (c) 2007: *; » Last changed: root/tmva $Id: KDEKernel.h 29195 2009-06-24 10:39:49Z brun $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__KDEKernel.html:2273,sanity check,sanity check,2273,root/html528/TMVA__KDEKernel.html,https://root.cern,https://root.cern/root/html528/TMVA__KDEKernel.html,1,['sanity check'],['sanity check']
Safety,"ore it does not contain any; 24constraints related to physics. However, the package defines a number of; 25hooks for tracking, such as media, materials, magnetic field or track state flags,; 26in order to allow interfacing to tracking MC's. The final goal is to be; 27able to use the same geometry for several purposes, such as tracking,; 28reconstruction or visualization, taking advantage of the ROOT features; 29related to bookkeeping, I/O, histogramming, browsing and GUI's.; 30 ; 31 The geometrical modeler is the most important component of the package and; 32it provides answers to the basic questions like ""Where am I ?"" or ""How far; 33from the next boundary ?"", but also to more complex ones like ""How far from; 34the closest surface ?"" or ""Which is the next crossing along a helix ?"".; 35 ; 36 The architecture of the modeler is a combination between a GEANT-like; 37containment scheme and a normal CSG binary tree at the level of shapes. An; 38important common feature of all detector geometry descriptions is the; 39mother-daughter concept. This is the most natural approach when tracking; 40is concerned and imposes a set of constraints to the way geometry is defined.; 41Constructive solid geometry composition is used only in order to create more; 42complex shapes from an existing set of primitives through boolean operations.; 43This feature is not implemented yet but in future full definition of boolean; 44expressions will be supported.; 45 ; 46 Practically every geometry defined in GEANT style can be mapped by the modeler.; 47The basic components used for building the logical hierarchy of the geometry; 48are called ""volumes"" and ""nodes"". Volumes (sometimes called ""solids"") are fully; 49defined geometrical objects having a given shape and medium and possibly; 50containing a list of nodes. Nodes represent just positioned instances of volumes; 51inside a container volume and they are not directly defined by user. They are; 52automatically created as a result of adding one",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:2088,detect,detector,2088,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['detect'],['detector']
Safety,"orflow.keras.layers import Input, Dense; ; model = Sequential(); model.add(Dense(64, activation=""relu"", input_dim=7)); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(""model_higgs.h5""); model.summary(); ; if not os.path.exists(""model_higgs.h5""):; raise FileNotFoundError(""Error creating Keras model file - skip using Keras""); else:; # book PyKeras method only if Keras model could be created; ROOT.Info(""TMVA_Higgs_Classification"", ""Booking Deep Learning keras model""); factory.BookMethod(; loader,; TMVA.Types.kPyKeras,; ""PyKeras"",; H=True,; V=False,; VarTransform=None,; FilenameModel=""model_higgs.h5"",; FilenameTrainedModel=""trained_model_higgs.h5"",; NumEpochs=20,; BatchSize=100,; ); # GpuOptions=""allow_growth=True"",; # ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ; ; ## Train Methods; ; # Here we train all the previously booked methods.; ; factory.TrainAllMethods(); ## Test all methods; ; # Now we test and evaluate all methods using the test data set; factory.TestAllMethods(); ; factory.EvaluateAllMethods(); ; # after we get the ROC curve and we display; ; c1 = factory.GetROCCurve(loader); c1.Draw(); # at the end we close the output file which contains the evaluation result of all methods and it can be used by TMVAGUI; # to display additional plots; ; outputFile.Close(); TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:67647,avoid,avoid,67647,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['avoid'],['avoid']
Safety,"orkNoStats Don't draw stats box. . kUserContour User specified contour levels. . kLogX X-axis in log scale. . kIsZoomed Bit set when zooming on Y axis. . kNoTitle Don't draw the histogram title. . kIsAverage Bin contents are average (used by Add) . kIsNotW Histogram is forced to be not weighted even when the histogram is filled with weighted. . kAutoBinPTwo different than 1. ; Use Power(2)-based algorithm for autobinning . kIsHighlight bit set if histo is highlight . Definition at line 164 of file TH1.h. Constructor & Destructor Documentation. ◆ TH1() [1/5]. TH1::TH1 ; (; const TH1 & ; ). privatedelete . ◆ TH1() [2/5]. TH1::TH1 ; (; ). protected . Histogram default constructor. ; Definition at line 615 of file TH1.cxx. ◆ TH1() [3/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . Double_t ; xlow, . Double_t ; xup . ). protected . Constructor for fix bin size histograms. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz, the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xlowlow edge of first bin ; [in]xupupper edge of last bin (not included in last bin) . Definition at line 697 of file TH1.cxx. ◆ TH1() [4/5]. TH1::TH1 ; (; const char * ; name, . const char * ; title, . Int_t ; nbins, . const Float_t * ; xbins . ). protected . Constructor for variable bin size histograms using an input array of type float. ; Creates the main histogram structure.; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbins+1 . Definition at line 719 of file T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:72359,avoid,avoid,72359,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['avoid'],['avoid']
Safety,"orm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToSphere (const Double_t *point, const Double_t *dir, Double_t rsph, Bool_t check=kTRUE, Bool_t firstcross=kTRUE) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Int_t GetNumberOfDivisions () const;  ; Int_t GetNz () const;  ; Double_t GetPhi1 () const;  ; Double_t GetPhi2 () const;  ; Bool_t GetPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoSphere.html:1407,safe,safe,1407,doc/master/classTGeoSphere.html,https://root.cern,https://root.cern/doc/master/classTGeoSphere.html,3,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"ormaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSelectedRows; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. TList * GetOutputList() const; { return fOutput; }. » Author: Philippe Canal 09/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademaker",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorEntries.html:9509,Abort,Abort,9509,root/html602/TSelectorEntries.html,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html,2,['Abort'],['Abort']
Safety,"ormation ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCImpMutexAutoLockRealization of TMCTemplateAutoLock with TMCMutex ;  CTMCParticleThis class serves as a data storage for description of one particle ;  CTMCTemplateAutoLockTemplate classe which provides a mechanism to create a mutex and locks/unlocks it ;  CTMCVerboseClass for printing a detailed information from MC application ;  CTMD5This code implements the MD5 message-digest algorithm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:177523,detect,detector,177523,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,4,['detect'],['detector']
Safety,"ormation ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCParticleThis class serves as a data storage for description of one particle ;  CTMCVerboseClass for printing a detailed information from MC application ;  CTMD5This code implements the MD5 message-digest algorithm ;  CTMehrotraSolver;  CTMemberInspectorAbstract base class for accessing the data-members of a class ;  CTMemberStreamer;  ►CTMemFileA TMemFile is like a normal TFile except th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:168998,detect,detector,168998,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['detect'],['detector']
Safety,"ors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used for; clearing TClonesArray. When option ""C"" is specified, ROOT automatically; executes the Clear() method (by default it is empty contained in TObject).; This method must be overridden in the relevant TClonesArray object class,; implementing the reset procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the TClonesArrays; are not destroyed and created on every event.; They must only be constructed/destructed at the beginning/end of the run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:2857,avoid,avoid,2857,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['avoid'],['avoid']
Safety,"orted) ;  ; Bool_t fIsSorted;  Flags if the bin edges are sorted densitywise (or by bin endges in case of 1-dim ) ;  ; Bool_t fIsSortedAsc;  Flags if the bin edges are sorted densitywise (or by bin-edge for 1D) in ascending order. ;  ; UInt_t fNBins;  The number of bins. ;  . Friends; struct CompareAsc;  ! Predicate for ascending sort ;  ; struct CompareDesc;  ! Predicate for descending sort ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TKDTreeBinning.h>. Inheritance diagram for TKDTreeBinning:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkAdjustBinEdges adjust bin edges to avoid overlapping with data . Definition at line 66 of file TKDTreeBinning.h. Constructor & Destructor Documentation. ◆ TKDTreeBinning() [1/4]. TKDTreeBinning::TKDTreeBinning ; (; TKDTreeBinning & ; bins). private . Disallowed copy constructor. . ◆ TKDTreeBinning() [2/4]. TKDTreeBinning::TKDTreeBinning ; (; ). Default constructor (for I/O) ; Definition at line 112 of file TKDTreeBinning.cxx. ◆ TKDTreeBinning() [3/4]. TKDTreeBinning::TKDTreeBinning ; (; UInt_t ; dataSize, . UInt_t ; dataDim, . Double_t * ; data, . UInt_t ; nBins = 100, . bool ; adjustBinEdges = false . ). Class's constructor taking the size of the data points, dimension, a data array and the number of bins (default = 100). ; It is recommended to have the number of bins as an exact divider of the data size. The data array must be organized with a stride=1 for the points and = N (the dataSize) for the dimension.; Thus data[] = x1,x2,x3,......xN, y1,y2,y3......yN, z1,z2,...........zN,....; Note that the passed dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTreeBinning.html:16666,avoid,avoid,16666,doc/master/classTKDTreeBinning.html,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html,1,['avoid'],['avoid']
Safety,"ory(const char *); 888{; 889 return nullptr;; 890}; 891 ; 892//////////////////////////////////////////////////////////////////////////////; 893/// Return the user's home directory.; 894 ; 895std::string TSystem::GetHomeDirectory(const char *) const; 896{; 897 return std::string();; 898}; 899 ; 900////////////////////////////////////////////////////////////////////////////////; 901/// Make a file system directory. Returns 0 in case of success and; 902/// -1 if the directory could not be created (either already exists or; 903/// illegal path name).; 904/// If 'recursive' is true, makes parent directories as needed.; 905 ; 906int TSystem::mkdir(const char *name, Bool_t recursive); 907{; 908 if (recursive) {; 909 TString safeName = name; // local copy in case 'name' is output from; 910 // TSystem::DirName as it uses static buffers; 911 TString dirname = GetDirName(safeName.Data());; 912 if (dirname.IsNull()) {; 913 // well we should not have to make the root of the file system!; 914 // (and this avoid infinite recursions!); 915 return -1;; 916 }; 917 if (AccessPathName(dirname.Data(), kFileExists)) {; 918 int res = mkdir(dirname.Data(), kTRUE);; 919 if (res) return res;; 920 }; 921 if (!AccessPathName(safeName.Data(), kFileExists)) {; 922 return -1;; 923 }; 924 }; 925 ; 926 return MakeDirectory(name);; 927}; 928 ; 929//---- Paths & Files -----------------------------------------------------------; 930 ; 931////////////////////////////////////////////////////////////////////////////////; 932/// Base name of a file name. Base name of /user/root is root.; 933 ; 934const char *TSystem::BaseName(const char *name); 935{; 936 if (name) {; 937 if (name[0] == '/' && name[1] == '\0'); 938 return name;; 939 char *cp;; 940 if ((cp = (char *)strrchr(name, '/'))); 941 return ++cp;; 942 return name;; 943 }; 944 Error(""BaseName"", ""name = 0"");; 945 return nullptr;; 946}; 947 ; 948////////////////////////////////////////////////////////////////////////////////; 949/// Return true if dir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:27643,avoid,avoid,27643,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['avoid'],['avoid']
Safety,ory::UnregisterContext(TDirectory::TContext* ctxt). private:. TROOT&operator=(const TROOT&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*fApplicationPointer to current application; Bool_tfBatchTrue if session without graphics; TList*fBrowsablesList of browsables; TSeqCollection*fBrowsersList of browsers; Int_tfBuiltDateDate of ROOT built; Int_tfBuiltTimeTime of ROOT built; TSeqCollection*fCanvasesList of canvases; TCollection*fClassGeneratorsList of user defined class generators;; TCollection*fClassesList of classes definition; TSeqCollection*fCleanupsList of recursiveRemove collections; TSeqCollection*fClipboardList of clipbard objects; TSeqCollection*fColorsList of colors; TStringfConfigFeaturesROOT ./configure detected build features; TStringfConfigOptionsROOT ./configure set build options; TDirectory::TContext*TDirectory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TStringfCutClassNameName of default CutG class in graphics editor; TSeqCollection*fDataSetsList of data sets (TDSet or TChain); TStringfDefCanvasNameName of default canvas; Bool_tfEditHistogramsTrue if histograms can be edited with the mouse; Int_tfEditorModeCurrent Editor mode; Bool_tfEscapeTrue if ESC has been pressed; Bool_tfExecutingMacroTrue while executing a TMacro; TSeqCollection*fFilesList of files; Bool_tfForceStyleForce setting of current style when reading objects; Bool_tfFromPopUpTrue if command executed from a popup menu; TCollection*fFunctionsList of analytic functions; TSeqCollection*fGeometriesList of geometries; TCollection*fGlobalFunctionsList of global functions; TCollection*fGlobalsList of global variables; TInterpreter*fInterpreterCommand interpreter; Bool_tfInterruptTrue if macro should be interrup,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TROOT.html:16544,detect,detected,16544,root/html528/TROOT.html,https://root.cern,https://root.cern/root/html528/TROOT.html,1,['detect'],['detected']
Safety,"osest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Compute distance from inside point to surface of the tube (static); Boundary safe algorithm.; compute distance to surface; Do Z. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube; Boundary safe algorithm. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Static method to compute distance from outside point to a tube with given parameters; Boundary safe algorithm.; check Z planes. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the tube and safe distance; Boundary safe algorithm.; fist localize point w.r.t tube. void DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); Static method computing the distance to a tube with given radius, starting from; POINT along DIR director cosines. The distance is computed as :; RSQ = point[0]*point[0]+point[1]*point[1]; NSQ = dir[0]*dir[0]+dir[1]*dir[1] ---> should NOT be 0 !!!; RDOTN = point[0]*dir[0]+point[1]*dir[1]; The distance can be computed as :; D = -B +/- DELTA; where DELTA.GT.0 and D.GT.0. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this tube shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume in case of Z divisions. For radial division; creates all volumes with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTube.html:14207,safe,safe,14207,root/html528/TGeoTube.html,https://root.cern,https://root.cern/root/html528/TGeoTube.html,9,['safe'],['safe']
Safety,"ostNegWeights. Bool_t TMVA::MethodBDT::fInverseBoostNegWeights. private . boost ev. with neg. weights with 1/boostweight rather than boostweight ; Definition at line 257 of file MethodBDT.h. ◆ fIsHighBkgCut. std::vector<Bool_t> TMVA::MethodBDT::fIsHighBkgCut. private . Definition at line 292 of file MethodBDT.h. ◆ fIsHighSigCut. std::vector<Bool_t> TMVA::MethodBDT::fIsHighSigCut. private . Definition at line 291 of file MethodBDT.h. ◆ fIsLowBkgCut. std::vector<Bool_t> TMVA::MethodBDT::fIsLowBkgCut. private . Definition at line 290 of file MethodBDT.h. ◆ fIsLowSigCut. std::vector<Bool_t> TMVA::MethodBDT::fIsLowSigCut. private . Definition at line 289 of file MethodBDT.h. ◆ fITree. Int_t TMVA::MethodBDT::fITree. private . ntuple var: ith tree ; Definition at line 265 of file MethodBDT.h. ◆ fLossFunctionEventInfo. std::map< const TMVA::Event*, LossFunctionEventInfo> TMVA::MethodBDT::fLossFunctionEventInfo. private . map event to true value, predicted value, and weight used by different loss functions for BDT regression ; Definition at line 224 of file MethodBDT.h. ◆ fLowBkgCut. std::vector<Double_t> TMVA::MethodBDT::fLowBkgCut. private . Definition at line 285 of file MethodBDT.h. ◆ fLowSigCut. std::vector<Double_t> TMVA::MethodBDT::fLowSigCut. private . Definition at line 284 of file MethodBDT.h. ◆ fMaxDepth. UInt_t TMVA::MethodBDT::fMaxDepth. private . max depth ; Definition at line 242 of file MethodBDT.h. ◆ fMinLinCorrForFisher. Double_t TMVA::MethodBDT::fMinLinCorrForFisher. private . the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ; Definition at line 237 of file MethodBDT.h. ◆ fMinNodeEvents. Int_t TMVA::MethodBDT::fMinNodeEvents. private . min number of events in node ; Definition at line 231 of file MethodBDT.h. ◆ fMinNodeSize. Float_t TMVA::MethodBDT::fMinNodeSize. private . min percentage of training events in node ; Definition at line 232 of file MethodBDT.h. ◆ fMinNodeSizeS. TString TMVA::MethodBDT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:64840,predict,predicted,64840,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['predict'],['predicted']
Safety,"ot(""plot"");; TRFunctionImport lines(""lines"");; TRFunctionImport devnew(""dev.new"");; TRFunctionImport devoff(""dev.off"");; TRFunctionImport min(""min"");; TRFunctionImport max(""max"");; TRFunctionImport seq(""seq"");; TRFunctionImport predict(""predict"");; ; r<<""options(device='png')"";//enable plot in png file; ; ////////////////////////; //doing the procedure //; ////////////////////////; TRObject xdata = c(-2,-1.64,-1.33,-0.7,0,0.45,1.2,1.64,2.32,2.9);; TRObject ydata = c(0.699369,0.700462,0.695354,1.03905,1.97389,2.41143,1.91091,0.919576,-0.730975,-1.42001);; ; TRDataFrame data;; data[""xdata""]=xdata;; data[""ydata""]=ydata;; ; //fit = nls(ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata), start=list(p1=1,p2=0.2)) <- R code; TRObject fit = nls(asformula(""ydata ~ p1*cos(p2*xdata) + p2*sin(p1*xdata)""),Label[""data""]=data, Label[""start""]=list(Label[""p1""]=1,Label[""p2""]=0.2));; print(summary(fit));; ; print(confint(fit));; ; devnew(""Fitting Regression"");; plot(xdata,ydata);; ; TRObject xgrid=seq(min(xdata),max(xdata),Label[""len""]=10);; lines(xgrid,predict(fit,xgrid),Label[""col""] = ""green"");; devoff();; }; c#define c(i)Definition RSha256.hxx:101; plotwinID h TVirtualViewer3D TVirtualGLPainter char TVirtualGLPainter plotDefinition TGWin32VirtualGLProxy.cxx:53; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; FunctionDouble_t(* Function)(Double_t)Definition Functor.C:4; ROOT::R::TRDataFrameThis is a class to create DataFrames from ROOT to R.Definition TRDataFrame.h:176; ROOT::R::TRFunctionImportThis is a class to pass functions from ROOT to R.Definition TRFunctionImport.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html:2207,predict,predict,2207,doc/master/classROOT_1_1R_1_1TRFunctionImport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionImport.html,1,['predict'],['predict']
Safety,"otUse(const char* method) const; static voidTGeoShape::NormalPhi(Double_t* point, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); Double_tSafetyToFace(Double_t* point, Int_t iseg, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPlaneVertices(Double_t zpl, Double_t* vertices) const; virtual voidSetPoints(Double_t* points) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoArb8.html:8538,Safe,SafetyPhi,8538,root/html528/TGeoArb8.html,https://root.cern,https://root.cern/root/html528/TGeoArb8.html,1,['Safe'],['SafetyPhi']
Safety,"otUse(const char* method) const; static voidTGeoShape::NormalPhi(Double_t* point, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); Double_tTGeoArb8::SafetyToFace(Double_t* point, Int_t iseg, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoArb8::SetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoArb8::SetPlaneVertices(Double_t zpl, Double_t* vertices) const; virtual voidTGeoArb8::Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTrap.html:9329,Safe,SafetyPhi,9329,root/html528/TGeoTrap.html,https://root.cern,https://root.cern/root/html528/TGeoTrap.html,1,['Safe'],['SafetyPhi']
Safety,"otUse(const char* method) const; static voidTGeoShape::NormalPhi(Double_t* point, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidSetCurrentVertices(Double_t x0, Double_t y0, Double_t scale); voidSetCurrentZ(Double_t z, Int_t iz); virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoSh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoXtru.html:9086,Safe,SafetyPhi,9086,root/html528/TGeoXtru.html,https://root.cern,https://root.cern/root/html528/TGeoXtru.html,1,['Safe'],['SafetyPhi']
Safety,"otUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEventIterTree&operator=(const TEventIterTree&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPreProcessEvent(Long64_t ent); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTEventIter::StopProcess(Bool_t abort); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEventIterTree.html:4800,abort,abort,4800,root/html534/TEventIterTree.html,https://root.cern,https://root.cern/root/html534/TEventIterTree.html,1,['abort'],['abort']
Safety,"ouble EvtPerSec() constCompute a running mean of events/s.Definition RDFHelpers.cxx:162; ROOT::RDF::Experimental::ProgressHelper::fProcessedEventsstd::atomic< std::size_t > fProcessedEventsDefinition RDFHelpers.hxx:333; ROOT::RDF::Experimental::ProgressHelper::ComputeCurrentFileIdxunsigned int ComputeCurrentFileIdx() constDefinition RDFHelpers.hxx:444; ROOT::RDF::Experimental::ProgressHelper::fLastPrintTimestd::chrono::time_point< std::chrono::system_clock > fLastPrintTimeDefinition RDFHelpers.hxx:330; ROOT::RDF::Experimental::ProgressHelper::fBeginTimestd::chrono::time_point< std::chrono::system_clock > fBeginTimeDefinition RDFHelpers.hxx:329; ROOT::RDF::Experimental::ProgressHelper::PrintStatsFinalvoid PrintStatsFinal(std::ostream &stream, std::chrono::seconds totalElapsedSeconds) constDefinition RDFHelpers.cxx:273; ROOT::RDF::Experimental::ProgressHelper::fPrintIntervalstd::chrono::seconds fPrintIntervalDefinition RDFHelpers.hxx:331; ROOT::RDF::Experimental::ProgressHelper::operator()void operator()(T &)Thread-safe callback for RDataFrame.Definition RDFHelpers.hxx:399; ROOT::RDF::Experimental::ProgressHelper::fBarWidthunsigned int fBarWidthDefinition RDFHelpers.hxx:343; ROOT::RDF::Experimental::ProgressHelper::fEventsPerSecondStatisticsIndexstd::size_t fEventsPerSecondStatisticsIndexDefinition RDFHelpers.hxx:341; ROOT::RDF::Experimental::ProgressHelper::ComputeNEventsSoFarstd::size_t ComputeNEventsSoFar() constDefinition RDFHelpers.hxx:435; ROOT::RDF::Experimental::RResultMapDefinition RResultMap.hxx:98; ROOT::RDF::RInterfaceThe public interface to the RDataFrame federation of classes.Definition RInterface.hxx:113; ROOT::RDF::RResultPtrSmart pointer for the return type of actions.Definition RResultPtr.hxx:119; ROOT::RDF::RResultPtr::fLoopManagerRDFDetail::RLoopManager * fLoopManagerNon-owning pointer to the RLoopManager at the root of this computation graph.Definition RResultPtr.hxx:174; ROOT::RDF::RResultPtr::fActionPtrstd::shared_ptr< RDFInternal::RActionBase >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:25646,safe,safe,25646,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['safe'],['safe']
Safety,"ouble eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GaussLegendreIntegrator.html:5051,unsafe,unsafe,5051,root/html602/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GaussLegendreIntegrator.html,1,['unsafe'],['unsafe']
Safety,"ouble eps = 9.9999999999999998E-13); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html:5051,unsafe,unsafe,5051,root/html604/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GaussLegendreIntegrator.html,1,['unsafe'],['unsafe']
Safety,"ouble_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; Double_t GetDphi () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Double_t GetPhi1 () const;  ; Bool_t GetPointsOnSegments (Int_t, Double_t *) const override;  ; Double_t GetR () const;  ; Double_t GetRmax () const;  ; Double_t GetRmin () const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buff) const override;  ; void SetTorusDimensions (Double_t r, Double_t rmin, Double_t rmax, Double_t phi1, Double_t dphi);  ; void Sizeof3D () const override;  ; Int_t SolveCubic (Double_t a, Double_t b, Double_t c, Double_t *x) const;  ; Int_t SolveQuartic (Double_t a, Double_t b, Double_t c, Double_t d, Double_t *x) const;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTorus.html:3166,Safe,Safety,3166,doc/master/classTGeoTorus.html,https://root.cern,https://root.cern/doc/master/classTGeoTorus.html,2,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"ouble_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Double_t GetRmin(Int_t ipl) const; Returns Rmin for Z segment IPL. Double_t GetRmax(Int_t ipl) const; Returns Rmax for Z segment IPL. Double_t GetZ(Int_t ipl) const; Returns Z for segment IPL. void InspectShape() const; print shape parameters. TBuffer3D * MakeBuffer3D() const; Creates a TBuffer3D describing *this* shape.; Coordinates are in local reference frame. void SetSegsAndPols(TBuffer3D& buff) const; Fill TBuffer3D structure for segments and polygons. Double_t SafetyToSegment(Double_t* point, Int_t ipl, Bool_t in = kTRUE, Double_t safmin = TGeoShape::Big()) const; Compute safety from POINT to segment between planes ipl, ipl+1 within safmin. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint.; ---> localize the Z segment. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set polycone dimensions starting from an array. void SetPoints(Double_t* points) const; create polycone mesh points. void SetPoints(Float_t* points) const; create polycone mesh points. Int_t GetNmeshVertices() const; Return number of vertices of the mesh representation. void Sizeof3D() const; fill size of this 3-D object; TVirtualGeoPainter *painter = gGeoManager->GetGeomer();; if (!painter) return;; Int_t n;. n = gGeoManager->GetNsegments()+1;. Int_t numPoints = fNz*2*n;; Int_t numSegs = 4*(fNz*n-1+(fDphi == 360));; Int_t numPolys = 2*(fNz*n-1+(fDphi == 360));; painter->AddSize3D(numPoints, numSegs, numPolys);. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPcon.html:15472,Safe,Safety,15472,root/html528/TGeoPcon.html,https://root.cern,https://root.cern/root/html528/TGeoPcon.html,3,['Safe'],['Safety']
Safety,"ouble_t b, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoEltu(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = A; param[1] = B; param[2] = dz. ~TGeoEltu(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside the elliptical tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each vertex. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the tube. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube and safe distance. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the shape along one axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void InspectShape() const; print shape parameters. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetEltuDimensions(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoEltu.html:14440,safe,safe,14440,root/html534/TGeoEltu.html,https://root.cern,https://root.cern/root/html534/TGeoEltu.html,6,['safe'],['safe']
Safety,"ouble_t cphi, Double_t sphi,; 135 Double_t &snext, Double_t &rxy);; 136 static Bool_t IsSameWithinTolerance(Double_t a, Double_t b);; 137 static Bool_t IsSegCrossing(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t x3, Double_t y3,; 138 Double_t x4, Double_t y4);; 139 static Bool_t IsInPhiRange(const Double_t *point, Double_t phi1, Double_t phi2);; 140 virtual Bool_t IsReflected() const { return kFALSE; }; 141 virtual Bool_t IsVecGeom() const { return kFALSE; }; 142 Bool_t IsRunTimeShape() const { return TestShapeBit(kGeoRunTimeShape); }; 143 Bool_t IsValid() const { return !TestShapeBit(kGeoInvalidShape); }; 144 virtual Bool_t IsValidBox() const = 0;; 145 virtual void InspectShape() const = 0;; 146 virtual TBuffer3D *MakeBuffer3D() const { return nullptr; }; 147 static void NormalPhi(const Double_t *point, const Double_t *dir, Double_t *norm, Double_t c1, Double_t s1,; 148 Double_t c2, Double_t s2);; 149 void Paint(Option_t *option = """") override;; 150 virtual Double_t Safety(const Double_t *point, Bool_t in = kTRUE) const = 0;; 151 virtual void Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) const {}; 152 static Double_t SafetyPhi(const Double_t *point, Bool_t in, Double_t phi1, Double_t phi2);; 153 static Double_t SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer);; 154 virtual void SetDimensions(Double_t *param) = 0;; 155 void SetId(Int_t id) { fShapeId = id; }; 156 virtual void SetPoints(Double_t *points) const = 0;; 157 virtual void SetPoints(Float_t *points) const = 0;; 158 virtual void SetSegsAndPols(TBuffer3D &buff) const = 0;; 159 void SetRuntime(Bool_t flag = kTRUE) { SetShapeBit(kGeoRunTimeShape, flag); }; 160 Int_t ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const;; 161 virtual void Sizeof3D() const = 0;; 162 ; 163 //----- bit manipulation; 164 void SetShapeBit(UInt_t f, Bool_t set);; 165 void SetShapeBit(UInt_t f) { fShapeBits |= f & kBitMask32; }; 166 void Rese",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:6823,Safe,Safety,6823,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,1,['Safe'],['Safety']
Safety,"ouble_t dx2, Double_t dy1, Double_t dy2, Double_t dz); constructor. TGeoTrd2(const char* name, Double_t dx1, Double_t dx2, Double_t dy1, Double_t dy2, Double_t dz); constructor. TGeoTrd2(Double_t* params); ctor with an array of parameters; param[0] = dx1; param[1] = dx2; param[2] = dy1; param[3] = dy2; param[4] = dz. ~TGeoTrd2(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box for a trd2. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this shape; check Z range. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the trd2; Boundary safe algorithm. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the trd2; Boundary safe algorithm. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetVisibleCorner(Double_t* point, Double_t* vertex, Double_t* normals) const; get the most visible corner from outside point and the normals. void GetOppositeCorner(Double_t* point, Int_t inorm, Double_t* vertex, Double_t* normals) const; get the opposite corner of the intersected face. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this trd2 shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Only Z divisions; are supported. For Z divisions just return the pointer to the volume to be; divided. In case a wrong division axis is supplied, returns pointer to; volume that was divided. void GetBoundingCylinder(Double_t* param) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTrd2.html:12773,safe,safe,12773,root/html528/TGeoTrd2.html,https://root.cern,https://root.cern/root/html528/TGeoTrd2.html,6,['safe'],['safe']
Safety,"ouble_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly,; 183 Double_t lz, Double_t tx, Double_t ty, Double_t tz);; 184 TGeoCtub(const char *name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx,; 185 Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);; 186 TGeoCtub(Double_t *params);; 187 // destructor; 188 ~TGeoCtub() override;; 189 // methods; 190 Double_t Capacity() const override;; 191 void ComputeBBox() override;; 192 void ComputeNormal(const Double_t *point, const Double_t *dir, Double_t *norm) override;; 193 void ComputeNormal_v(const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;; 194 Bool_t Contains(const Double_t *point) const override;; 195 void Contains_v(const Double_t *points, Bool_t *inside, Int_t vecsize) const override;; 196 Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact = 1, Double_t step = TGeoShape::Big(),; 197 Double_t *safe = nullptr) const override;; 198 void DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 199 Double_t *step) const override;; 200 Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact = 1,; 201 Double_t step = TGeoShape::Big(), Double_t *safe = nullptr) const override;; 202 void DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 203 Double_t *step) const override;; 204 TGeoVolume *; 205 Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;; 206 Double_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;; 207 const TBuffer3D &GetBuffer3D(Int_t reqSections, Bool_t localFrame) const override;; 208 Int_t GetByteCount() const override { return 98; }; 209 Bool_t GetPointsOnSegments(Int_t npoints, Double_t *array) const override;; 210 TGeoShape *GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:10708,safe,safe,10708,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['safe'],['safe']
Safety,"ouble_t s2); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this tube segment; first check if point is inside the tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Compute distance from inside point to surface of the tube segment (static); Boundary safe algorithm.; Do Z. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube segment; Boundary safe algorithm. Double_t DistFromOutsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Static method to compute distance to arbitrary tube segment from outside point; Boundary safe algorithm. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube segment; fist localize point w.r.t tube. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this tube segment shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume in case of Z divisions. For radialdivision; creates all volumes with different shapes and returns pointer to volume that; was divided. In case a wrong division axis is supplied, returns pointer to; volume that was divided. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSeg.html:17032,safe,safe,17032,root/html534/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSeg.html,3,['safe'],['safe']
Safety,"ouble_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual Bool_tPaintComposite(Option_t* option = """") const; virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterYourself(); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t*); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoBBox::SetSegsAndPols(TBuffer3D& buffer) const; voidTGeoSh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCompositeShape.html:13458,Safe,SafetyPhi,13458,root/html528/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html528/TGeoCompositeShape.html,1,['Safe'],['SafetyPhi']
Safety,"ouble_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Compute distance from inside point to surface of the tube (static); Boundary safe algorithm.; compute distance to surface; Do Z. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube; Boundary safe algorithm. Double_t DistFromOutsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Static method to compute distance from outside point to a tube with given parameters; Boundary safe algorithm.; check Z planes. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the tube and safe distance; Boundary safe algorithm.; fist localize point w.r.t tube. void DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); Static method computing the distance to a tube with given radius, starting from; POINT along DIR director cosines. The distance is computed as :; RSQ = point[0]*point[0]+point[1]*point[1]; NSQ = dir[0]*dir[0]+dir[1]*dir[1] ---> should NOT be 0 !!!; RDOTN = point[0]*dir[0]+point[1]*dir[1]; The distance can be computed as :; D = -B +/- DELTA; where DELTA.GT.0 and D.GT.0. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTube.html:15417,safe,safe,15417,root/html534/TGeoTube.html,https://root.cern,https://root.cern/root/html534/TGeoTube.html,3,['safe'],['safe']
Safety,"ouble_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tTGeoTrap::Safety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); Double_tTGeoArb8::SafetyToFace(Double_t* point, Int_t iseg, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoArb8::SetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoArb8::SetPlaneVertices(Double_t zpl, Double_t* vertices) const; virtual voidTGeoArb8::SetPoints(Double_t* points) const; virtual voidTGeoArb8::SetPoints(Float_t* points) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGtra.html:9546,Safe,SafetyToFace,9546,root/html528/TGeoGtra.html,https://root.cern,https://root.cern/root/html528/TGeoGtra.html,1,['Safe'],['SafetyToFace']
Safety,"ouble_t* vert, Double_t* norm) const; Returns normal vector to the planar quadrilateral defined by vector VERT.; The normal points outwards the xtru. void GetPlaneVertices(Int_t iz, Int_t ivert, Double_t* vert) const; Returns (x,y,z) of 3 vertices of the surface defined by Z sections (iz, iz+1); and polygon vertices (ivert, ivert+1). No range check. Bool_t IsPointInsidePlane(Double_t* point, Double_t* vert, Double_t* norm) const; Check if the quadrilateral defined by VERT contains a coplanar POINT. void InspectShape() const; Print actual Xtru parameters. TBuffer3D * MakeBuffer3D() const; Creates a TBuffer3D describing *this* shape.; Coordinates are in local reference frame. void SetSegsAndPols(TBuffer3D& buff) const; Fill TBuffer3D structure for segments and polygons. Double_t SafetyToSector(Double_t* point, Int_t iz, Double_t safmin, Bool_t in); Compute safety to sector iz, returning also the closest segment index. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint.; ---> localize the Z segment. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetCurrentZ(Double_t z, Int_t iz); Recompute current section vertices for a given Z position within range of section iz. void SetCurrentVertices(Double_t x0, Double_t y0, Double_t scale); Set current vertex coordinates according X0, Y0 and SCALE. void SetDimensions(Double_t* param); param[0] = nz // number of z planes. param[1] = z1 // Z position of first plane; param[2] = x1 // X position of first plane; param[3] = y1 // Y position of first plane; param[4] = scale1 // scale factor for first plane. param[4*(nz-1]+1] = zn; param[4*(nz-1)+2] = xn; param[4*(nz-1)+3] = yn; param[4*(nz-1)+4] = scalen. void SetPoints(Double_t* points) const; create polycone mesh points. void SetPoints(Float_t* points) const; create p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoXtru.html:17361,Safe,Safety,17361,root/html530/TGeoXtru.html,https://root.cern,https://root.cern/root/html530/TGeoXtru.html,2,['Safe'],['Safety']
Safety,"ouble_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Double_tTGeoBBox::fOrigin[3]box origin; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. private:. Double_tfN[3]; Double_tfP[3]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoHalfSpace(); Dummy constructor. TGeoHalfSpace(const char* name, Double_t* p, Double_t* n); Constructor with name, point on the plane and normal. TGeoHalfSpace(Double_t* params); Default constructor specifying minimum and maximum radius. ~TGeoHalfSpace(); destructor. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside the half-space. Int_t DistancetoPrimitive(Int_t px, Int_t py); A half-space does not have a mesh primitive. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to the plane. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to the plane. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the shape along one axis. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. void InspectShape() const; print shape parameters. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set half-space parameter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHalfSpace.html:11824,safe,safe,11824,root/html528/TGeoHalfSpace.html,https://root.cern,https://root.cern/root/html528/TGeoHalfSpace.html,3,['safe'],['safe']
Safety,"ouble_t ; xup, . Int_t ; nbinsy, . const Double_t * ; ybins . ). protected . Constructor for Double_t variable bin size (along Y axis) 2-D histograms. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins along the X axis ; [in]xlowlow edge of the X axis first bin ; [in]xupupper edge of the X axis last bin (not included in last bin) ; [in]nbinsynumber of bins ; [in]ybinsarray of low-edges for each bin. This is an array of type double and size nbinsy+1 . Definition at line 154 of file TH2.cxx. ◆ TH2() [5/7]. TH2::TH2 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Double_t * ; xbins, . Int_t ; nbinsy, . const Double_t * ; ybins . ). protected . Constructor for Double_t variable bin size 2-D histograms. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbinsx+1 ; [in]nbinsynumber of bins ; [in]ybinsarray of low-edges for each bin. This is an array of type double and size nbinsy+1 . Definition at line 183 of file TH2.cxx. ◆ TH2() [6/7]. TH2::TH2 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins, . Int_t ; nbinsy, . const Float_t * ; ybins . ). protected . Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:59971,avoid,avoid,59971,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['avoid'],['avoid']
Safety,"ould go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weight(const RooArgSet& bin, Int_t intOrder = 1, Bool_t correctForBinSize = kFALSE, Bool_t cdfBoundaries = kFALSE, Bool_t oneSafe = kFALSE); Return the weight at given coordinates with optional; interpolation. If intOrder is zero, the weight; for the bin enclosing the coordinates; contained in 'bin' is returned. For higher values,; the result is interpolated in the real dimensions; of the dataset. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t weight, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataHist.html:28552,safe,safe,28552,root/html530/RooDataHist.html,https://root.cern,https://root.cern/root/html530/RooDataHist.html,2,['safe'],['safe']
Safety,"ound a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlave.html:10005,abort,abort,10005,root/html528/TSlave.html,https://root.cern,https://root.cern/root/html528/TSlave.html,12,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"ound.C;  csgdemo.CCombinatorial Solid Geometry example ;  event_demo.CThis example display geometry, tracks and hits in web browser ;  geom_cms.C;  points.CThis example display only points in web browser ;  projection_prescale.C;  show_extract.CHelper script for showing of extracted / simplified geometries ;  table.CThis example display table in web browser ;  tracks.CThis example display only points in web browser ;  ► fft;  FFT.C This tutorial illustrates the Fast Fourier Transforms interface in ROOT ;  ► fit;  combinedFit.C Combined (simultaneous) fit of two histogram with separate functions and some common parameters ;  ConfidenceIntervals.C Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ErrorIntegral.C Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit ;  exampleFit3D.C example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  fit1.C Simple fitting example (1-d histogram with an interpreted function) ;  fit2.C Fitting a 2-D histogram This tutorial illustrates : ;  fit2a.C Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  fit2d.C Example illustrating how to fit a 2-d histogram of type y=f(x) ;  fit2dHist.C ;  fitCircle.C Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  fitcont.C Example illustrating how to draw the n-sigma contour of a Minuit fit ;  fitConvolution.C Tutorial for convolution of two functions ;  fitEllipseTGraphDLSF.cxx;  fitEllipseTGraphRMM.cxx;  fitExclude.C Illustrates how to fit excluding points in a given range ;  fithist.C Example of fit where the model is histogram + function ;  fitLinear.C Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a hist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:107018,predict,predictor,107018,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['predict'],['predictor']
Safety,"oundary crossing).; TGeoNode *TGeoManager::FindNextBoundaryAndStep(Double_t stepmax,; Bool_t comp_safe=kFALSE);; TGeoManager::FindNextBoundaryAndStepTGeoNode * FindNextBoundaryAndStep(Double_t stepmax=TGeoShape::Big(), Bool_t compsafe=kFALSE)Compute distance to next boundary within STEPMAX.Definition TGeoManager.cxx:2736; The meaning of the parameters here is the same as for FindNextBoundary, but the safety value is triggered by an input flag. The output is the node after the boundary crossing.; Computing the Safe Radius; Other important navigation query for tracking is the computation of the safe distance. This represents the maximum step that can be made from the current point in any direction that assures that no boundary will be crossed. Knowing this value gives additional freedom to the stepping algorithm to propagate the current track on the corresponding range without checking if the current state has changed. In other words, the modeller insures that the current state does not change in any point within the safety radius around the current point.; The computation of the safe radius is automatically computed any time when the next boundary is queried within a limited step:; TGeoNode *crossed = gGeoManager->FindNextBoundary(pstep);; Double_t safety = gGeoManager->GetSafeDistance();; Otherwise, the computation of safety can always be forced:; Double_t safety = gGeoManager->Safety();; TGeoManager::SafetyDouble_t Safety(Bool_t inside=kFALSE)Compute safe distance from the current point.Definition TGeoManager.cxx:2300; Making a Step; The modeller is able to make steps starting from the current point along the current direction and having the current step length. The new point and its corresponding state will be automatically computed:; TGeoNode *TGeoManager::Step(Bool_t is_geom = kTRUE,; Bool_t cross = kTRUE);; TGeoManager::StepTGeoNode * Step(Bool_t is_geom=kTRUE, Bool_t cross=kTRUE)Make a rectilinear step of length fStep from current point (fPoint) on current dir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:86789,safe,safety,86789,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['safe'],['safety']
Safety,"oundaryAndStep(Double_t stepmax = TGeoShape::Big(), Bool_t compsafe = kFALSE); Compute distance to next boundary within STEPMAX. If no boundary is found,; propagate current point along current direction with fStep=STEPMAX. Otherwise; propagate with fStep=SNEXT (distance to boundary) and locate/return the next; node. TGeoNode * FindNextBoundary(Double_t stepmax = TGeoShape::Big(), const char* path = """", Bool_t frombdr = kFALSE); Find distance to next boundary and store it in fStep. Returns node to which this; boundary belongs. If PATH is specified, compute only distance to the node to which; PATH points. If STEPMAX is specified, compute distance only in case fSafety is smaller; than this value. STEPMAX represent the step to be made imposed by other reasons than; geometry (usually physics processes). Therefore in this case this method provides the; answer to the question : ""Is STEPMAX a safe step ?"" returning a NULL node and filling; fStep with a big number.; In case frombdr=kTRUE, the isotropic safety is set to zero.; Note : safety distance for the current point is computed ONLY in case STEPMAX is; specified, otherwise users have to call explicitly TGeoManager::Safety() if; they want this computed for the current point. TGeoNode * FindNextDaughterBoundary(Double_t* point, Double_t* dir, Int_t& idaughter, Bool_t compmatrix = kFALSE); Computes as fStep the distance to next daughter of the current volume.; The point and direction must be converted in the coordinate system of the current volume.; The proposed step limit is fStep. void ResetState(); Reset current state flags. TGeoNode * FindNode(Bool_t safe_start = kTRUE); Returns deepest node containing current point. TGeoNode * FindNode(Double_t x, Double_t y, Double_t z); Returns deepest node containing current point. Double_t * FindNormalFast(); Computes fast normal to next crossed boundary, assuming that the current point; is close enough to the boundary. Works only after calling FindNextBoundary. Double_t * FindNorma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:51672,safe,safety,51672,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,6,['safe'],['safety']
Safety,"ount) ;  ; Double_t * fFractions;  Template fractions scaled to the ""data"" histogram statistics. ;  ; TH1 * fPlot;  Pointer to histogram containing summed template predictions. ;  ; ROOT::Fit::Fitter * fFractionFitter;  Pointer to Fitter class. ;  . Private Member Functions; void CheckConsistency ();  Function used internally to check the consistency between the various histograms. ;  ; void CheckParNo (Int_t parm) const;  Function for internal use, checking parameter validity An invalid parameter results in an error. ;  ; void ComputeChisquareLambda ();  Method used internally to compute the likelihood ratio chi2 See the function GetChisquare() for details. ;  ; void ComputeFCN (Double_t &f, const Double_t *par, Int_t flag);  Used internally to compute the likelihood value. ;  ; void FindPrediction (int bin, double &t_i, int &k_0, double &A_ki) const;  Function used internally to obtain the template prediction in the individual bins 'bin' <=> 'i' (paper) 'par' <=> 'j' (paper) ;  ; void GetRanges (Int_t &minX, Int_t &maxX, Int_t &minY, Int_t &maxY, Int_t &minZ, Int_t &maxZ) const;  Used internally to obtain the bin ranges according to the dimensionality of the histogram and the limits set by hand. ;  ; bool IsExcluded (Int_t bin) const;  Function for internal use, checking whether the given bin is excluded from the fit or not. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1U",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:19890,predict,prediction,19890,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['predict'],['prediction']
Safety,"ourcePool * GetResourcePool () const;  ; void * GetSender () override;  ; virtual void StartGuiBuilding (Bool_t on=kTRUE);  Go into GUI building mode. ;  ;  Protected Member Functions inherited from TGWindow;  TGWindow (const TGWindow &tgw);  ;  TGWindow (Window_t id);  ; TGWindow & operator= (const TGWindow &tgw);  ;  Protected Member Functions inherited from TGObject; TGObject & operator= (const TGObject &tgo);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Protected Member Functions inherited from TGWidget;  TGWidget (const TGWidget &tgw);  ; Int_t ClearFlags (Int_t flags);  ; TGWidget & operator= (const TGWidget &tgw);  ; Int_t SetFlags (Int_t flags);  . Static Protected Member Functions; static void FixBounds (Double_t &min, Double_t &max);  Avoid boundaries to be equal. ;  ;  Static Protected Member Functions inherited from TGFrame; static Time_t GetLastClick ();  Get time of last mouse click. ;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:25604,Avoid,Avoid,25604,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['Avoid'],['Avoid']
Safety,"ources used by ROOT (files, network sockets,; 865/// shared memory segments, etc.).; 866 ; 867TROOT::~TROOT(); 868{; 869 using namespace ROOT::Internal;; 870 ; 871 if (gROOTLocal == this) {; 872 ; 873 // TMapFile must be closed before they are deleted, so run CloseFiles; 874 // (possibly a second time if the application has an explicit TApplication; 875 // object, but in that this is a no-op). TMapFile needs the slow close; 876 // so that the custome operator delete can properly find out whether the; 877 // memory being 'freed' is part of a memory mapped file or not.; 878 CloseFiles();; 879 ; 880 // If the interpreter has not yet been initialized, don't bother; 881 gGetROOT = &GetROOT1;; 882 ; 883 // Mark the object as invalid, so that we can veto some actions; 884 // (like autoloading) while we are in the destructor.; 885 SetBit(TObject::kInvalidObject);; 886 ; 887 // Turn-off the global mutex to avoid recreating mutexes that have; 888 // already been deleted during the destruction phase; 889 if (gGlobalMutex) {; 890 TVirtualMutex *m = gGlobalMutex;; 891 gGlobalMutex = nullptr;; 892 delete m;; 893 }; 894 ; 895 // Return when error occurred in TCling, i.e. when setup file(s) are; 896 // out of date; 897 if (!fVersionInt) return;; 898 ; 899 // ATTENTION!!! Order is important!; 900 ; 901 SafeDelete(fBrowsables);; 902 ; 903 // FIXME: Causes rootcling to deadlock, debug and uncomment; 904 // SafeDelete(fRootFolder);; 905 ; 906#ifdef R__COMPLETE_MEM_TERMINATION; 907 fSpecials->Delete(); SafeDelete(fSpecials); // delete special objects : PostScript, Minuit, Html; 908#endif; 909 ; 910 fClosedObjects->Delete(""slow""); // and closed files; 911 fFiles->Delete(""slow""); // and files; 912 SafeDelete(fFiles);; 913 fSecContexts->Delete(""slow""); SafeDelete(fSecContexts); // and security contexts; 914 fSockets->Delete(); SafeDelete(fSockets); // and sockets; 915 fMappedFiles->Delete(""slow""); // and mapped files; 916 TSeqCollection *tl = fMappedFiles; fMappedFiles = nullptr; delete tl;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:35367,avoid,avoid,35367,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['avoid'],['avoid']
Safety,"ouse to click on the contour of the histogram hpx. When the mouse is clicked, the bin number and its contents are printed. Example2 of use of exec1.C; Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the projection along X of the bin corresponding to the Y position of the mouse. The resulting histogram is fitted with a gaussian. A ""dynamic"" line shows the current bin position in Y. This more elaborated example can be used as a starting point to develop more powerful interactive applications exploiting the C++ interpreter as a development engine. ; Implements TVirtualPad.; Definition at line 498 of file TPad.cxx. ◆ AddFirst(). void TPad::AddFirst ; (; TObject * ; obj, . Option_t * ; opt = """", . Bool_t ; modified = kTRUE . ). overridevirtual . Add an object as first in list of primitives with speicified draw option When. ; modified set to kTRUE (default) pad will be marked as modifiedLet avoid usage of gPad when drawing object(s) in canvas or in subpads. ; Implements TVirtualPad.; Definition at line 439 of file TPad.cxx. ◆ AutoExec(). void TPad::AutoExec ; (; ). virtual . Execute the list of Execs when a pad event occurs. ; Definition at line 508 of file TPad.cxx. ◆ Browse(). void TPad::Browse ; (; TBrowser * ; b). overridevirtual . Browse pad. ; Reimplemented from TObject.; Definition at line 523 of file TPad.cxx. ◆ BuildLegend(). TLegend * TPad::BuildLegend ; (; Double_t ; x1 = 0.3, . Double_t ; y1 = 0.21, . Double_t ; x2 = 0.3, . Double_t ; y2 = 0.21, . const char * ; title = """", . Option_t * ; option = """" . ). overridevirtual . Build a legend from the graphical objects in the pad. ; A simple method to build automatically a TLegend from the primitives in a TPad.; Only those deriving from TAttLine, TAttMarker and TAttFill are added, excluding TPave and TFrame derived classes.; ReturnsThe built TLegend; Parameters. [in]x1,y1,x2,y2The TLegend coordinates ; [in]titleTh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:57992,avoid,avoid,57992,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['avoid'],['avoid']
Safety,"out a dictionary, by creating the branches for builtin types (int, float, double) and arrays explicitly. ; See tree2a.C for the same example using a class with dictionary instead of a C-struct.; In this example, we are mapping a C struct to one of the Geant3 common blocks /gctrak/. In the real life, this common will be filled by Geant3 at each step and only the Tree Fill function should be called. The example emulates the Geant3 step routines.; to run the example, do: .x tree2.C to execute with the Cling interpreter; .x tree2.C++ to execute with native compiler; ; #include ""TFile.h""; #include ""TTree.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TCanvas.h""; #include ""TMath.h""; ; const Int_t MAXMEC = 30;; ; typedef struct {; Float_t vect[7];; Float_t getot;; Float_t gekin;; Float_t vout[7];; Int_t nmec;; Int_t lmec[MAXMEC];; Int_t namec[MAXMEC];; Int_t nstep;; Int_t pid;; Float_t destep;; Float_t destel;; Float_t safety;; Float_t sleng;; Float_t step;; Float_t snext;; Float_t sfield;; Float_t tofg;; Float_t gekrat;; Float_t upwght;; } Gctrak_t;; ; ; void helixStep(Float_t step, Float_t *vect, Float_t *vout); {; // extrapolate track in constant field; Float_t field = 20; //magnetic field in kilogauss; enum Evect {kX,kY,kZ,kPX,kPY,kPZ,kPP};; vout[kPP] = vect[kPP];; Float_t h4 = field*2.99792e-4;; Float_t rho = -h4/vect[kPP];; Float_t tet = rho*step;; Float_t tsint = tet*tet/6;; Float_t sintt = 1 - tsint;; Float_t sint = tet*sintt;; Float_t cos1t = tet/2;; Float_t f1 = step*sintt;; Float_t f2 = step*cos1t;; Float_t f3 = step*tsint*vect[kPZ];; Float_t f4 = -tet*cos1t;; Float_t f5 = sint;; Float_t f6 = tet*cos1t*vect[kPZ];; vout[kX] = vect[kX] + (f1*vect[kPX] - f2*vect[kPY]);; vout[kY] = vect[kY] + (f1*vect[kPY] + f2*vect[kPX]);; vout[kZ] = vect[kZ] + (f1*vect[kPZ] + f3);; vout[kPX] = vect[kPX] + (f4*vect[kPX] - f5*vect[kPY]);; vout[kPY] = vect[kPY] + (f4*vect[kPY] + f5*vect[kPX]);; vout[kPZ] = vect[kPZ] + (f4*vect[kPZ] + f6);; }; ; void tree2w(); {; //create a Tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree2_8C.html:1222,safe,safety,1222,doc/master/tree2_8C.html,https://root.cern,https://root.cern/doc/master/tree2_8C.html,1,['safe'],['safety']
Safety,"out parameter correlations, and worst of all cannot be expected to converge accurately to the minimum in a finite time. Its estimate of the expected distance to the minimum \(\mbox{EDM}\) is largely fantasy, so it would not even know if it did converge.; 6.2 Floating point precision; M figures out at execution time the machine precision [api:epsmac], and assumes that \(\mbox{FCN}\) provides about the same precision. That means not just the length of the numbers used and returned by \(\mbox{FCN}\), but the actual mathematical accuracy of the calculations. Section [install:epsmac] describes what to do if this is not the case.; 6.3 Parameter limits; Putting limits (absolute bounds) on the allowed values for a given parameter, causes M to make a non-linear transformation of its own internal parameter values to obtain the (external) parameter values passed to \(\mbox{FCN}\). To understand the adverse effect of limits, see [intro:limits].; Basically, the use of limits should be avoided unless needed to keep the parameter inside a desired range.; If parameter limits are needed, in spite of the effects described in Chapter One, then the user should be aware of the following techniques to alleviate problems caused by limits.; 6.3.1 Getting the Right Minimum with Limits; If \(\mbox{MIGRAD}\) converges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented M from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimizer has become “blocked” at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{ \pi}{ 2}\) that M prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:68699,avoid,avoided,68699,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['avoid'],['avoided']
Safety,"ove(TObject* obj); virtual intRecvBuf(int sock, void* buffer, int length); virtual intRecvRaw(int sock, void* buffer, int length, int flag); virtual Int_tRedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); virtual TFileHandler*RemoveFileHandler(TFileHandler* fh); voidRemoveOnExit(TObject* obj); virtual TSignalHandler*RemoveSignalHandler(TSignalHandler* sh); virtual TStdExceptionHandler*RemoveStdExceptionHandler(TStdExceptionHandler* eh); virtual TTimer*RemoveTimer(TTimer* t); virtual intRename(const char* from, const char* to); voidTObject::ResetBit(UInt_t f); static voidResetErrno(); virtual voidResetSignal(ESignals sig, Bool_t reset = kTRUE); virtual voidResetTimer(TTimer*); virtual voidRun(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelect(TList* active, Long_t timeout); virtual Int_tSelect(TFileHandler* fh, Long_t timeout); virtual intSendBuf(int sock, const void* buffer, int length); virtual intSendRaw(int sock, const void* buffer, int length, int flag); virtual voidSetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidSetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDynamicPath(const char* pathname); virtual voidSetenv(const char* name, const char* value); voidSetErrorStr(const char* errstr); virtual voidSetFlagsDebug(const char*); virtual voidSetFlagsOpt(const char*); virtual Int_tSetFPEMask(Int_t mask = kDefaultMask); virtual voidSetIncludePath(const char* includePath); virtual voidSetLinkdefSuffix(const char* suffix); virtual voidSetLinkedLibs(const char* linkedLibs); virtual voidSetMakeExe(const char* directives); virtual voidSetMakeSharedLib(const char* directives)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSystem.html:10925,timeout,timeout,10925,root/html530/TSystem.html,https://root.cern,https://root.cern/root/html530/TSystem.html,2,['timeout'],['timeout']
Safety,"over uniform observables; RooArgSet_uniformVars; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Fri Dec 11 12:20:07 2009 » Last generated: 2009-12-11 12:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooGenContext.html:9952,unsafe,unsafe,9952,root/html526/RooGenContext.html,https://root.cern,https://root.cern/root/html526/RooGenContext.html,1,['unsafe'],['unsafe']
Safety,"over uniform observables; RooArgSet_uniformVars; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Thu Sep 23 19:59:50 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooGenContext.html:10001,unsafe,unsafe,10001,root/html528/RooGenContext.html,https://root.cern,https://root.cern/root/html528/RooGenContext.html,1,['unsafe'],['unsafe']
Safety,"overed}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 2051 Short_t keylen,cycle;; 2052 UInt_t datime;; 2053 Int_t nbytes,date,time,objlen,nwheader;; 2054 Long64_t seekkey,seekpdir;; 2055 char header[1024];; 2056 char *buffer, *bufread;; 2057 char nwhc;; 2058 Long64_t idcur = fBEGIN;; 2059 ; 2060 Long64_t size;; 2061 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy warnings; 2062 Error(""Recover"", ""cannot stat the file %s"", GetName());; 2063 return 0;; 2064 }; 2065 ; 2066 fEND = Long64_t(size);; 2067 ; 2068 if (fWritable && !fFree) fFree = new TList;; 2069 ; 2070 TKey *key;; 2071 Int_t nrecov = 0;; 2072 nwheader = 1024;; 2073 Int_t nread = nwheader;; 2074 ; 2075 while (idcur < fEND) {; 2076 Seek(idcur); // NOLINT: silence clang-tidy warnings; 2077 if (idcur+nread >= fEND) nread = fEND-idcur-1;; 2078 if (ReadBuffer(header, nread)) { // NOLINT: silence clang-tidy warnings; 2079 // ReadBuffer returns kTRUE in case of failure.; 2080 Error(""Recover"",""%s: failed to read the key data from disk at %lld."",; 2081 GetName(),idcur);; 2082 break;; 2083 }; 2084 buffer = header;; 2085 bufread = header;; 2086 frombuf(buffer, &nbytes);; 2087 if (!nbytes) {; 2088 Error(""Recover"",""Address = %lld\tNbytes = %d\t=====E R R O R======="", idcur, nbytes);; 2089 break;; 2090 }; 2091 if (nbytes < 0) {; 2092 idcur -= nbytes;; 2093 if (fWritable) new TFree(fFree,idcur,idcur-nbytes-1);; 2094 Seek(idcur);; 2095 continue;; 2096 }; 2097 Version_t versionkey;; 2098 frombuf(buffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:73396,Recover,Recover,73396,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,['Recover'],['Recover']
Safety,"overlap value in centimeters (default value is 0.1). This tool checks all possible significant pairs of candidates inside a given volume (not declared as overlapping or division volumes). The check is performed by verifying the mesh representation of one candidate against the shape of the other. This sort of check cannot identify all possible overlapping topologies, but it works for more than 95% and is much faster than the usual shape-to-shape comparison. For a 100% reliability, one can perform the check at the level of a single volume by using option=“d” or option=“d<number>” to perform overlap checking by sampling the volume with <number> random points (default 1 million). This produces also a picture showing in red the overlapping region and estimates the volume of the overlaps.; An extrusion A) is declared in any of the following cases:. At least one of the vertices of the daughter mesh representation is outside the mother volume (in fact its shape) and having a safety distance to the mother greater than the desired value;; At least one of the mother vertices is contained also by one of its daughters, in the same conditions. An overlap B) is declared if:. At least one vertex of a positioned volume mesh is contained (having a safety bigger than the accepted maximum value) by other positioned volume inside the same container. The check is performed also by inverting the candidates. The code is highly optimized to avoid checking candidates that are far away in space by performing a fast check on their bounding boxes. Once the checking tool is fired-up inside a volume or at top level, the list of overlaps (visible as Illegal overlaps inside a TBrowser) held by the manager class will be filled with TGeoOverlap objects containing a full description of the detected overlaps. The list is sorted in the decreasing order of the overlapping distance, extrusions coming first. An overlap object name represents the full description of the overlap, containing both candidate nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1001903,safe,safety,1001903,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['safe'],['safety']
Safety,"override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; void CreateThreadData (Int_t nthreads) override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNedges () const;  ; Int_t GetNmeshVertices () const override;  ; Int_t GetNsegments () const override;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; ThreadData_t & GetThreadData () const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; TBuffer3D *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPgon.html:1410,safe,safe,1410,doc/master/classTGeoPgon.html,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html,3,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"override;  Compute bounding box of the scaled shape. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Compute normal to closest surface from POINT. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  Test if point is inside the scaled shape. ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  compute closest distance from point px,py to each vertex. Should not be called. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  Compute distance from inside point to surface of the scaled shape. ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  Compute distance from outside point to surface of the scaled shape. ;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  Cannot divide assemblies. ;  ; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:1834,safe,safe,1834,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,1,['safe'],['safe']
Safety,"override;; 146 Double_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;; 147 void GetBoundingCylinder(Double_t *param) const override;; 148 const TBuffer3D &GetBuffer3D(Int_t reqSections, Bool_t localFrame) const override;; 149 Int_t GetByteCount() const override { return 56; }; 150 Bool_t GetPointsOnSegments(Int_t npoints, Double_t *array) const override;; 151 TGeoShape *GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *mat) const override;; 152 Int_t GetNmeshVertices() const override;; 153 void GetMeshNumbers(Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;; 154 Double_t GetPhi1() const { return fPhi1; }; 155 Double_t GetPhi2() const { return fPhi2; }; 156 void InspectShape() const override;; 157 TBuffer3D *MakeBuffer3D() const override;; 158 Double_t Safety(const Double_t *point, Bool_t in = kTRUE) const override;; 159 void Safety_v(const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;; 160 static Double_t SafetyS(const Double_t *point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1,; 161 Double_t phi2, Int_t skipz = 0);; 162 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 163 void SetTubsDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);; 164 void SetDimensions(Double_t *param) override;; 165 void SetPoints(Double_t *points) const override;; 166 void SetPoints(Float_t *points) const override;; 167 void SetSegsAndPols(TBuffer3D &buff) const override;; 168 void Sizeof3D() const override;; 169 ; 170 ClassDefOverride(TGeoTubeSeg, 2) // cylindrical tube segment class; 171};; 172 ; 173class TGeoCtub : public TGeoTubeSeg {; 174protected:; 175 // data members; 176 Double_t fNlow[3]; // normal to lower cut plane; 177 Double_t fNhigh[3]; // normal to higher cut plane; 178 ; 179public:; 180 // constructors; 181 TGeoCtub();; 182 TGeoCtub(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:8778,Safe,SafetyS,8778,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['Safe'],['SafetyS']
Safety,overridevirtual . ReturnsTClass describing current object ; Reimplemented from TGMainFrame.; Definition at line 658 of file TRecorder.h. ◆ Replay(). void TGRecorder::Replay ; (; ). Handles push of fReplay button according to the current recorder state. ; Definition at line 1977 of file TRecorder.cxx. ◆ SetDefault(). void TGRecorder::SetDefault ; (; ). private . Sets GUI to the default inactive state. ; Definition at line 1833 of file TRecorder.cxx. ◆ StartStop(). void TGRecorder::StartStop ; (; ). Handles push of the fStartStop button according to the current recorder state. ; Definition at line 1913 of file TRecorder.cxx. ◆ Streamer(). void TGRecorder::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGMainFrame. ◆ StreamerNVirtual(). void TGRecorder::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 658 of file TRecorder.h. ◆ Update(). void TGRecorder::Update ; (; ). Called when fTimer timeouts (every 0.025 second) Updates GUI of recorder. ; Definition at line 1851 of file TRecorder.cxx. Member Data Documentation. ◆ fCursorCheckBox. TGCheckButton* TGRecorder::fCursorCheckBox. private . Definition at line 640 of file TRecorder.h. ◆ fElapsed. time_t TGRecorder::fElapsed. private . Definition at line 643 of file TRecorder.h. ◆ fFilteredIds. Window_t TGRecorder::fFilteredIds[fgWidgetsCount]. private . Definition at line 646 of file TRecorder.h. ◆ fgWidgetsCount. const Int_t TGRecorder::fgWidgetsCount = 12. staticprivate . Definition at line 645 of file TRecorder.h. ◆ fRecorder. TRecorder* TGRecorder::fRecorder. private . Definition at line 633 of file TRecorder.h. ◆ fReplay. TGPictureButton* TGRecorder::fReplay. private . Definition at line 636 of file TRecorder.h. ◆ fStart. time_t TGRecorder::fStart. private . Definition at line 643 of file TRecorder.h. ◆ fStartStop. TGPictureButton* TGRecorder::fStartStop. private . Definition at line 635 of file TRecorder.h. ◆ fStatu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGRecorder.html:37837,timeout,timeouts,37837,doc/master/classTGRecorder.html,https://root.cern,https://root.cern/doc/master/classTGRecorder.html,1,['timeout'],['timeouts']
Safety,"oviding pointers to components. ;  ;  ~TGeoUnion () override;  Destructor — deletion of components handled by TGeoManager class. ;  ; void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin) override;  Compute bounding box corresponding to a union of two shapes. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. ;  ; Bool_t Contains (const Double_t *point) const override;  Find if a union of two shapes contains a given point. ;  ; Int_t DistanceToPrimitive (Int_t px, Int_t py) override;  Compute minimum distance to shape vertices. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Computes distance from a given point inside the shape to its boundary. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given outside point to the shape. ;  ; EGeoBoolType GetBooleanOperator () const override;  ; Int_t GetNpoints () override;  Returns number of vertices for the composite shape described by this union. ;  ; TClass * IsA () const override;  ; TGeoBoolNode * MakeClone () const override;  Make a clone of this. Pointers are preserved. ;  ; void Paint (Option_t *option) override;  Paint method. ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  Compute safety distance for a union node;. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Sizeof3D () const override;  Register 3D size of this shape. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBoolNode;  TGeoBo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoUnion.html:1565,safe,safe,1565,doc/master/classTGeoUnion.html,https://root.cern,https://root.cern/doc/master/classTGeoUnion.html,1,['safe'],['safe']
Safety,"ow edge of the X axis first bin; 149/// \param[in] xup upper edge of the X axis last bin (not included in last bin); 150/// \param[in] nbinsy number of bins; 151/// \param[in] ybins array of low-edges for each bin.; 152/// This is an array of type double and size nbinsy+1; 153 ; 154TH2::TH2(const char *name,const char *title,Int_t nbinsx,Double_t xlow,Double_t xup; 155 ,Int_t nbinsy,const Double_t *ybins); 156 :TH1(name,title,nbinsx,xlow,xup); 157{; 158 fDimension = 2;; 159 fScalefactor = 1;; 160 fTsumwy = fTsumwy2 = fTsumwxy = 0;; 161 if (nbinsy <= 0) {Warning(""TH2"",""nbinsy is <=0 - set to nbinsy = 1""); nbinsy = 1; }; 162 if (ybins) fYaxis.Set(nbinsy,ybins);; 163 else fYaxis.Set(nbinsy,0,1);; 164 fNcells = fNcells*(nbinsy+2); // fNCells is set in the TH1 constructor; 165}; 166 ; 167 ; 168////////////////////////////////////////////////////////////////////////////////; 169/// Constructor for Double_t variable bin size 2-D histograms.; 170///; 171/// \param[in] name name of histogram (avoid blanks); 172/// \param[in] title histogram title.; 173/// If title is of the form `stringt;stringx;stringy;stringz`; 174/// the histogram title is set to `stringt`,; 175/// the x axis title to `stringx`, the y axis title to `stringy`, etc.; 176/// \param[in] nbinsx number of bins; 177/// \param[in] xbins array of low-edges for each bin.; 178/// This is an array of type double and size nbinsx+1; 179/// \param[in] nbinsy number of bins; 180/// \param[in] ybins array of low-edges for each bin.; 181/// This is an array of type double and size nbinsy+1; 182 ; 183TH2::TH2(const char *name,const char *title,Int_t nbinsx,const Double_t *xbins; 184 ,Int_t nbinsy,const Double_t *ybins); 185 :TH1(name,title,nbinsx,xbins); 186{; 187 fDimension = 2;; 188 fScalefactor = 1;; 189 fTsumwy = fTsumwy2 = fTsumwxy = 0;; 190 if (nbinsy <= 0) {Warning(""TH2"",""nbinsy is <=0 - set to nbinsy = 1""); nbinsy = 1; }; 191 if (ybins) fYaxis.Set(nbinsy,ybins);; 192 else fYaxis.Set(nbinsy,0,1);; 193 fNcells = fNcell",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:7727,avoid,avoid,7727,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['avoid'],['avoid']
Safety,"ow/overflows if considered in the option; 2004 // if specified in the option (by default they considered); 2005 Double_t totcont = 0;; 2006 ; 2007 Int_t out1min = out1->GetFirst();; 2008 Int_t out1max = out1->GetLast();; 2009 // GetFirst(), GetLast() can return (0,0) when the range bit is set artificially (see TAxis::SetRange); 2010 //if (out1min == 0 && out1max == 0) { out1min = 1; out1max = out1->GetNbins(); }; 2011 // correct for underflow/overflows; 2012 if (useUF && !out1->TestBit(TAxis::kAxisRange) ) out1min -= 1;; 2013 if (useOF && !out1->TestBit(TAxis::kAxisRange) ) out1max += 1;; 2014 Int_t out2min = out2->GetFirst();; 2015 Int_t out2max = out2->GetLast();; 2016// if (out2min == 0 && out2max == 0) { out2min = 1; out2max = out2->GetNbins(); }; 2017 if (useUF && !out2->TestBit(TAxis::kAxisRange) ) out2min -= 1;; 2018 if (useOF && !out2->TestBit(TAxis::kAxisRange) ) out2max += 1;; 2019 ; 2020 // if the out axis has labels and is extendable, temporary make it non-extendable to avoid adding extra bins; 2021 Bool_t extendable = projX->CanExtend();; 2022 if ( labels && extendable ) h1->GetXaxis()->SetCanExtend(kFALSE);; 2023 for (ixbin=0;ixbin<=1+projX->GetNbins();ixbin++) {; 2024 if ( projX->TestBit(TAxis::kAxisRange) && ( ixbin < ixmin || ixbin > ixmax )) continue;; 2025 ; 2026 Double_t cont = 0;; 2027 Double_t err2 = 0;; 2028 ; 2029 // loop on the bins to be integrated (outbin should be called inbin); 2030 for (out1bin = out1min; out1bin <= out1max; out1bin++) {; 2031 for (out2bin = out2min; out2bin <= out2max; out2bin++) {; 2032 ; 2033 Int_t bin = GetBin(*refX, *refY, *refZ);; 2034 ; 2035 // sum the bin contents and errors if needed; 2036 cont += RetrieveBinContent(bin);; 2037 if (computeErrors) {; 2038 Double_t exyz = GetBinError(bin);; 2039 err2 += exyz*exyz;; 2040 }; 2041 }; 2042 }; 2043 Int_t ix = h1->FindBin( projX->GetBinCenter(ixbin) );; 2044 h1->SetBinContent(ix ,cont);; 2045 if (computeErrors) h1->SetBinError(ix, TMath::Sqrt(err2) );; 2046 // sum all ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:79971,avoid,avoid,79971,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['avoid'],['avoid']
Safety,"owing citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Functionality; The TUnfoldBinning objects are connected by a tree-like structure. The structure does not hold any data, but is only responsible for arranging the analysis bins in the proper order. Each node of the tree is responsible for a group of bins. That group may consist of . several unconnected bins, each with a dedicated name. . bins organized in a multidimensional distribution, defined by a set of axes. The axes are defined by a number of bins N and by (N+1) bin borders. In addition to the N bins inside there may be an underflow and an overflow bin . Each bin has a ""global"" bin number, which can be found using the GetGlobalBinNumber() methods. The global bin number 0 is reserved and corresponds to the case where no bin is found in the TUnfoldBinning tree.; Use in the analysis; Booking histograms: . Define binning schemes on detector level and on truth level. This can be done using the XML language, use the class TUnfoldBinningXML to read the binning scheme. The TUnfoldBinning objects can be written to a root file, preferentially together with the corresponding histograms. . For Monte Carlo, book histograms for the response matrix (detector vs truth level) using the method CreateHistogramOfMigrations() . For data and background, book histograms using the ""detector level"" binning scheme and the method CreateHistogram() . (if required) for the data covarianve matrix, book a histogram using the ""detector level"" binning scheme and the method CreateErrorMatrixHistogram() . For truth histograms, book histograms using the ""truth level"" binning scheme and the method CreateHistogram() . The histograms which are booked have all analysis bins arranged on one axis (global bin number). TUnfoldBinning provides methods to locate the global bin number: . Use the method FindNode() to locate a group of bins (e.g. signal, contro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinning.html:1729,detect,detector,1729,doc/master/classTUnfoldBinning.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html,1,['detect'],['detector']
Safety,"ownership of the objects in the list. Stack painting; By default, histograms are shown stacked:; the first histogram is painted; then the sum of the first and second histograms is painted, and so on. The axis ranges are computed automatically along the X and Y axes to display the complete histogram collection.; Warning: Histogram bins with negative content may produce wrong plots. Stack's drawing options; The specific stack's drawing options are:. NOSTACK If option ""nostack"" is specified, histograms are all painted in the same pad as if the option ""same"" had been specified.; NOSTACKB If the option ""nostackb"" is specified histograms are all painted on the same pad next to each other as bar plots.; PADS if option ""pads"" is specified, the current pad/canvas is subdivided into a number of pads equal to the number of histograms and each histogram is painted into a separate pad.; NOCLEAR By default the background of the histograms is erased before drawing the histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a THStack on top of another plot. If the patterns used to draw the histograms in the stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options.; Example;; {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F(""h1"",""test hstack"",10,-4,4);; h1->FillRandom(""gaus"",20000);; h1->SetFillColor(kRed);; hs->Add(h1);; auto h2 = new TH1F(""h2"",""test hstack"",10,-4,4);; h2->FillRandom(""gaus"",15000);; h2->SetFillColor(kBlue);; hs->Add(h2);; auto h3 = new TH1F(""h3"",""test hstack"",10,-4,4);; h3->FillRandom(""gaus"",10000);; h3->SetFillColor(kGreen);; hs->Add(h3);; auto cs = new TCanvas(""cs"",""cs"",10,10,700,900);; TText T; T.SetTextFont(42); T.SetTextAlign(21);; cs->Divide(2,2);; cs->cd(1); hs->Draw(); T.DrawTextNDC(.5,.95,""Default drawing option"");; cs->cd(2); hs->Draw(""nostack""); T.DrawTextNDC(.5,.95,""Option \""nostack\"""");; cs->cd(3); hs->Draw(""nostackb""); T.DrawTextNDC(.5,.95",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:1661,avoid,avoids,1661,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,1,['avoid'],['avoids']
Safety,"ows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:33351,safe,safe,33351,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,3,['safe'],['safe']
Safety,"ox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToParaboloid (const Double_t *point, const Double_t *dir, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Double_t GetDz () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t, Double_t *) const override;  ; Double_t GetRhi () const;  ; Double_t GetRlo () const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParaboloid.html:1290,safe,safe,1290,doc/master/classTGeoParaboloid.html,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html,3,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"ox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ DistFromInside_v(). virtual void TGeoShape::DistFromInside_v ; (; const Double_t * ; , . const Double_t * ; , . Double_t * ; , . Int_t ; , . Double_t * ;  . ); const. inlinevirtual . Reimplemented in TGeoArb8, TGeoTrap, TGeoGtra, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, and TGeoXtru.; Definition at line 105 of file TGeoShape.h. ◆ DistFromOutside(). virtual Double_t TGeoShape::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. pure virtual . Implemented in TGeoArb8, TGeoTrap, TGeoGtra, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ DistFromOutside_v(). virtual void TGeoShape::DistFromOutside_v ; (; const Double_t * ; , . const Double_t * ; , . Double_t * ; , . Int_t ; , . Double_t * ;  . ); const. inlinevirtual . Reimplemented in TGeoArb8, TGeoTrap, TGeoGtra, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, and TGeoXtru.; Definition at line 108 of file TGeoShape.h. ◆ DistToPhiMin(). Double_t TGeoShape::DistToPhiMin ; (; const Double_t * ; point, . const Double_t * ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:33504,safe,safe,33504,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['safe'],['safe']
Safety,"ox.; Definition at line 55 of file TGeoHalfSpace.h. ◆ GetNorm(). virtual Double_t * TGeoHalfSpace::GetNorm ; (; ). inlinevirtual . Definition at line 51 of file TGeoHalfSpace.h. ◆ GetPoint(). virtual Double_t * TGeoHalfSpace::GetPoint ; (; ). inlinevirtual . Definition at line 50 of file TGeoHalfSpace.h. ◆ InspectShape(). void TGeoHalfSpace::InspectShape ; (; ); const. overridevirtual . print shape parameters ; Reimplemented from TGeoBBox.; Definition at line 191 of file TGeoHalfSpace.cxx. ◆ IsA(). TClass * TGeoHalfSpace::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBBox.; Definition at line 66 of file TGeoHalfSpace.h. ◆ IsCylType(). Bool_t TGeoHalfSpace::IsCylType ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 57 of file TGeoHalfSpace.h. ◆ operator=(). TGeoHalfSpace & TGeoHalfSpace::operator= ; (; const TGeoHalfSpace & ; ). privatedelete . ◆ Safety(). Double_t TGeoHalfSpace::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . computes the closest distance from given point to this shape, according to option. ; The matching point on the shape is stored in spoint. ; Reimplemented from TGeoBBox.; Definition at line 202 of file TGeoHalfSpace.cxx. ◆ Safety_v(). void TGeoHalfSpace::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Compute safe distance from each of the points in the input array. ; Input: Array of point coordinates, array of statuses for these points, size of the arrays Output: Safety values ; Reimplemented from TGeoBBox.; Definition at line 291 of file TGeoHalfSpace.cxx. ◆ SavePrimitive(). void TGeoHalfSpace::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox.; Definition at line 215 of file TGeoHalf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHalfSpace.html:30785,Safe,Safety,30785,doc/master/classTGeoHalfSpace.html,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html,1,['Safe'],['Safety']
Safety,"oxy *proxy); 1463{; 1464 new (*begin_arena) TGenCollectionProxy__SlowIterator(proxy);; 1465 *(UInt_t*)*end_arena = proxy->Size();; 1466}; 1467 ; 1468////////////////////////////////////////////////////////////////////////////////; 1469 ; 1470void *TGenCollectionProxy__SlowNext(void *iter, const void *end); 1471{; 1472 TGenCollectionProxy__SlowIterator *iterator = (TGenCollectionProxy__SlowIterator*)iter;; 1473 if (iterator->fIndex != *(UInt_t*)end) {; 1474 void *result = iterator->fProxy->At(iterator->fIndex);; 1475 ++(iterator->fIndex);; 1476 return result;; 1477 } else {; 1478 return 0;; 1479 }; 1480}; 1481 ; 1482////////////////////////////////////////////////////////////////////////////////; 1483 ; 1484void * TGenCollectionProxy__SlowCopyIterator(void *dest, const void *source); 1485{; 1486 *(TGenCollectionProxy__SlowIterator*)dest = *(TGenCollectionProxy__SlowIterator*)source;; 1487 return dest;; 1488}; 1489 ; 1490////////////////////////////////////////////////////////////////////////////////; 1491/// Nothing to do; 1492 ; 1493void TGenCollectionProxy__SlowDeleteSingleIterators(void *); 1494{; 1495}; 1496 ; 1497////////////////////////////////////////////////////////////////////////////////; 1498/// Nothing to do; 1499 ; 1500void TGenCollectionProxy__SlowDeleteTwoIterators(void *, void *); 1501{; 1502}; 1503 ; 1504 ; 1505////////////////////////////////////////////////////////////////////////////////; 1506/// We can safely assume that the std::vector layout does not really depend on; 1507/// the content!; 1508 ; 1509void TGenCollectionProxy__VectorCreateIterators(void *obj, void **begin_arena, void **end_arena, TVirtualCollectionProxy*); 1510{; 1511 std::vector<char> *vec = (std::vector<char>*)obj;; 1512 if (vec->empty()) {; 1513 *begin_arena = 0;; 1514 *end_arena = 0;; 1515 return;; 1516 }; 1517 *begin_arena = &(*vec->begin());; 1518#ifdef R__VISUAL_CPLUSPLUS; 1519 *end_arena = &(*(vec->end()-1)) + 1; // On windows we can not dererence the end iterator at all.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:48407,safe,safely,48407,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['safe'],['safely']
Safety,"p); TXSocket&operator=(const TXSocket&); virtual voidTObject::Paint(Option_t* option = """"); Bool_tPing(const char* ord = 0); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual UnsolRespProcResultProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); voidRemoteTouch(); virtual voidRemoveClientID(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); TObjString*SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Int_tSendInterrupt(Int_t type); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); voidSendUrgent(Int_t type, Int_t int1, Int_t int2); voidSetAWait(Bool_t w = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClientID(Int_t); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInterr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:6278,timeout,timeout,6278,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,2,['timeout'],['timeout']
Safety,"p); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoHype&operator=(const TGeoHype&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; Double_tRadiusHypeSq(Double_t z, Bool_t inner) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); Double_tSafetyToHype(const Double_t* point, Bool_t inner, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHypeDimensions(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:10342,Safe,SafetyS,10342,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,1,['Safe'],['SafetyS']
Safety,"p. Returns pointer; to created division cell volume in case of Y divisions. For Z divisions just; return the pointer to the volume to be divided. In case a wrong; division axis is supplied, returns pointer to volume that was divided. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; Fills real parameters of a positioned box inside this. Returns 0 if successfull. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void InspectShape() const; print shape parameters. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); set trd1 params in one step :. void SetVertex(Double_t* vertex) const; set vertex of a corner according to visibility flags. void SetPoints(Double_t* points) const; create arb8 mesh points. void SetPoints(Float_t* points) const; create arb8 mesh points. void Sizeof3D() const; fill size of this 3-D object. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd1.html:15364,Safe,Safety,15364,root/html534/TGeoTrd1.html,https://root.cern,https://root.cern/root/html534/TGeoTrd1.html,3,['Safe'],['Safety']
Safety,"pLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middle part of rhs; rhs3_in (input) last part of rhs . void SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); Extracts three component vectors from a given aggregated vector.; vars_in (input) aggregated vector; x_in (output) first part of vars; y_in (output) middle part of vars; z_in (output) last part of vars. TQpLinSolverBase & operator=(const TQpLinSolverBase& source); Assignment",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpLinSolverBase.html:8253,recover,recovers,8253,root/html602/TQpLinSolverBase.html,https://root.cern,https://root.cern/root/html602/TQpLinSolverBase.html,2,['recover'],['recovers']
Safety,"pSafetyCandidates (double point[3], std::vector< int > &candidates, double margin=0.) const;  Method to find potentially relevant candidate bounding boxes for safety calculation given a point. ;  ; void InitSafetyVoxel (TGeoVoxelGridIndex const &);  Method to initialize the safety voxel at a specific 3D voxel (grid) index. ;  ; Double_t SafetyBVH (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (using pure BVH traversal, mainly for debugging/fallback since VoxelSafety should be faster) ;  ; Double_t SafetyLoop (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (trivial loop version for comparison/debugging) ;  ; Double_t SafetyOrig (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (original version based on TGeoVoxelFinder) ;  ; void TestVoxelGrid ();  ; Double_t VoxelSafety (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world used BVH structure with addiditional on-the-fly 3D grid/voxel caching —> essentially an O(1) algorithm !) ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoParallelWorld.h>. Inheritance diagram for TGeoParallelWorld:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ AccelerationMode. enum class TGeoParallelWorld::AccelerationMode. strong . EnumeratorkVoxelFinder ; kBVH . Definition at line 28 of file TGeoParallelWorld.h. Constructor & Destructor Documentation. ◆ TGeoParallelWorld() [1/3]. TGeoParallelWorld::TGeoParallelWorld ; (; const TGeoParallelWorld & ; ). protecteddelete . switch between different algorithm implementations . ◆ TGeoParallelWorld() [2/3]. TGeoParallelWorld::TGeoParallelWorld ; (; ). inline . Definition at line 62 of file TGeoParallelWorld.h. ◆ TGeoParallelWorld() [3/3]. TGeoParallelWorld::TGeoParallelWorld ; (; const char * ; name,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:16766,safe,safety,16766,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['safe'],['safety']
Safety,"pThrd{false}; ///<! use special thread for THttpServer; 52 bool fUseSenderThreads{false}; ///<! use extra threads for sending data from RWebWindow to clients; 53 float fLaunchTmout{30.}; ///<! timeout in seconds to start browser process, default 30s; 54 bool fExternalProcessEvents{false}; ///<! indicate that there are external process events engine; 55 std::unique_ptr<TExec> fAssgnExec; ///<! special exec to assign thread id via ProcessEvents; 56 WebWindowShowCallback_t fShowCallback; ///<! function called for each RWebWindow::Show call; 57 WebWindowDeleteCallback_t fDeleteCallback; ///<! function called when RWebWindow is destroyed; 58 ; 59 /// Returns true if http server use special thread for requests processing (default off); 60 bool IsUseHttpThread() const { return fUseHttpThrd; }; 61 ; 62 /// Returns true if extra threads to send data via websockets will be used (default off); 63 bool IsUseSenderThreads() const { return fUseSenderThreads; }; 64 ; 65 /// Returns timeout for launching new browser process; 66 float GetLaunchTmout() const { return fLaunchTmout; }; 67 ; 68 void Unregister(RWebWindow &win);; 69 ; 70 /// Show window in specified location, see Show() method for more details; 71 unsigned ShowWindow(RWebWindow &win, const RWebDisplayArgs &args);; 72 ; 73 int WaitFor(RWebWindow &win, WebWindowWaitFunc_t check, bool timed = false, double tm = -1);; 74 ; 75 std::string GetUrl(RWebWindow &win, bool remote = false, std::string *produced_key = nullptr);; 76 ; 77 bool CreateServer(bool with_http = false);; 78 ; 79 bool InformListener(const std::string &msg);; 80 ; 81 static std::string GenerateKey(int keylen = 32);; 82 ; 83public:; 84 RWebWindowsManager();; 85 ; 86 ~RWebWindowsManager();; 87 ; 88 /// Returns THttpServer instance; 89 THttpServer *GetServer() const { return fServer.get(); }; 90 ; 91 /// Returns http address of the server, empty string when not available; 92 std::string GetServerAddr() const { return fAddr; }; 93 ; 94 /// Assign show callback whic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html:2286,timeout,timeout,2286,doc/master/RWebWindowsManager_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html,2,['timeout'],['timeout']
Safety,"par[0]*TMath::Power(x-0.13957, 0.25); + par[1] / 2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }; ; ; void h1analysis::Begin(TTree * /*tree*/); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; // This is needed when re-processing the object; Reset();; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""Begin"", ""starting h1analysis with process option: %s"", option.Data());; ; //process cases with entry list; if (fChain) fChain->SetEntryList(nullptr);; delete gDirectory->GetList()->FindObject(""elist"");; ; // case when one creates/fills the entry list; if (option.Contains(""fillList"")) {; fillList = kTRUE;; elist = new TEntryList(""elist"", ""H1 selection from Cut"");; // Add to the input list for processing in PROOF, if needed; if (fInput) {; fInput->Add(new TNamed(""fillList"",""""));; // We send a clone to avoid double deletes when importing the result; fInput->Add(elist);; // This is needed to avoid warnings from output-to-members mapping; elist = nullptr;; }; Info(""Begin"", ""creating an entry-list"");; }; // case when one uses the entry list generated in a previous call; if (option.Contains(""useList"")) {; useList = kTRUE;; if (fInput) {; // In PROOF option ""useList"" is processed in SlaveBegin and we do not need; // to do anything here; } else {; TFile f(""elist.root"");; elist = (TEntryList*)f.Get(""elist"");; if (elist) elist->SetDirectory(nullptr); //otherwise the file destructor will delete elist; }; }; }; ; ; void h1analysis::SlaveBegin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialisation for the entry list; ; //initialize the Tree branch addresses; Init(tree);; ; //print the option specified in the Process function.; TString option = GetOption();; Info(""SlaveBegin"",; ""starting h1analysis with process opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysis_8C.html:7229,avoid,avoid,7229,doc/master/h1analysis_8C.html,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html,2,['avoid'],['avoid']
Safety,"parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect.; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 527 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:26277,safe,safe,26277,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['safe'],['safe']
Safety,"parameters; data = model.generate({x}, 1000); model.fitTo(data, PrintLevel=-1); ; # Print LateX table of parameters of pdf; # --------------------------------------------------------------------------; ; # Print parameter list in LaTeX for (one column with names, column with; # values); params.printLatex(); ; # Print parameter list in LaTeX for (names values|names values); params.printLatex(Columns=2); ; # Print two parameter lists side by side (name values initvalues); params.printLatex(Sibling=initParams); ; # Print two parameter lists side by side (name values initvalues|name; # values initvalues); params.printLatex(Sibling=initParams, Columns=2); ; # Write LaTex table to file; params.printLatex(Sibling=initParams, OutputFile=""rf407_latextables.tex""); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; \begin{tabular}{lc}; $\verb+a0+ $ & $ 0.5\pm 0.2$\\; $\verb+a1+ $ & $ 0.3\pm 0.1$\\; $\verb+alpha+ $ & $ -1.00$\\; $\verb+bkgfrac+ $ & $ 0.46\pm 0.03$\\; $\verb+mean+ $ & $ 5$\\; $\verb+sig1frac+ $ & $ 0.79\pm 0.05$\\; $\verb+sigma1+ $ & $ 0.5$\\; $\verb+sigma2+ $ & $ 1$\\; \end{tabular}; \begin{tabular}{lc|lc}; $\verb+a0+ $ & $ 0.5\pm 0.2$ & $\verb+mean+ $ & $ 5$\\; $\verb+a1+ $ &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf407__latextables_8py.html:3226,safe,safe,3226,doc/master/rf407__latextables_8py.html,https://root.cern,https://root.cern/doc/master/rf407__latextables_8py.html,1,['safe'],['safe']
Safety,"parameters; vector<int>fRFLxvariable selector; TMVA::RuleFitAPI::ERFProgramfRFProgramwhat to run; TMVA::RuleFitAPI::RealParmsfRFRealParmsreal parameters; vector<Float_t>fRFVarImpvariable importances; vector<Int_t>fRFVarImpIndvariable index; TStringfRFWorkDirworking directory; vector<Float_t>fRFYhatscore results from test sample; TMVA::RuleFit*fRuleFitnon const ptr to RuleFit class in MethodRuleFit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RuleFitAPI(const TMVA::MethodRuleFit* rfbase, TMVA::RuleFit* rulefit, TMVA::EMsgType minType); standard constructor. ~RuleFitAPI(); destructor. void WelcomeMessage(); welcome message. void HowtoSetupRF(); howto message. void InitRuleFit(); default initialisation; SetRFWorkDir(""./rulefit"");. void ImportSetup(); import setup from MethodRuleFit. void SetRFWorkDir(const char* wdir); set the directory containing rf_go.exe. void CheckRFWorkDir(); check if the rulefit work dir is properly setup.; it aborts (kFATAL) if not. Check existance of directory. void SetTrainParms(); set the training parameters. void SetTestParms(); set the test params. void FillRealParmsDef(); set default real params. void FillIntParmsDef(); set default int params. Bool_t WriteAll(); write all files read by rf_go.exe. Bool_t WriteIntParms(); write int params file. Bool_t WriteRealParms(); write int params file. Bool_t WriteLx(); Save input variable mask. If the lx vector size is not the same as inputVars,; resize it and fill it with 1; NOTE: Always set all to 1; if (fRFLx.size() != m_inputVars->size()) {. Bool_t WriteProgram(); write command to rf_go.exe. Bool_t WriteRealVarImp(); write the minimum importance to be considered. Bool_t WriteRfOut(); written by rf_go.exe; write rulefit output (rfout). Bool_t WriteRfStatus(); written by rf_go.exe; write rulefit status. Bool_t WriteRuleFitMod(); written by rf_go.exe (NOTE:Format unknown!). Bool_t WriteRuleFitSum(); written by rf_go.exe (NOTE: format unknown!). Bool_t Wr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__RuleFitAPI.html:3474,abort,aborts,3474,root/html528/TMVA__RuleFitAPI.html,https://root.cern,https://root.cern/root/html528/TMVA__RuleFitAPI.html,6,['abort'],['aborts']
Safety,"params); ctor with parameters. ~TGeoCtub(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute minimum bounding box of the ctub. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; check if point is contained in the cut tube; check the lower cut plane. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. Double_t GetZcoord(Double_t xc, Double_t yc, Double_t zc) const; compute real Z coordinate of a point belonging to either lower or; higher caps (z should be either +fDz or -fDz). Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the cut tube. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the cut tube. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the tube along one axis. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void InspectShape() const; print shape parameters. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SetCtubDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); set dimensions of a cut tube. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCtub.html:15033,safe,safe,15033,root/html528/TGeoCtub.html,https://root.cern,https://root.cern/root/html528/TGeoCtub.html,3,['safe'],['safe']
Safety,"parse_range_header (const char *header, int64_t *a, int64_t *b);  ; static int prepare_cgi_environment (struct mg_connection *conn, const char *prog, struct cgi_environment *env, unsigned char cgi_config_idx);  ; static int print_dav_dir_entry (struct de *de, void *data);  ; static int print_dir_entry (struct de *de);  ; static int print_props (struct mg_connection *conn, const char *uri, const char *name, struct mg_file_stat *filep);  ; static void process_new_connection (struct mg_connection *conn);  ; static void produce_socket (struct mg_context *ctx, const struct socket *sp);  ; static int pull_all (FILE *fp, struct mg_connection *conn, char *buf, int len);  ; static int pull_inner (FILE *fp, struct mg_connection *conn, char *buf, int len, double timeout);  ; static int push_all (struct mg_context *ctx, FILE *fp, SOCKET sock, SSL *ssl, const char *buf, int len);  ; static int push_inner (struct mg_context *ctx, FILE *fp, SOCKET sock, SSL *ssl, const char *buf, int len, double timeout);  ; static int put_dir (struct mg_connection *conn, const char *path);  ; static void put_file (struct mg_connection *conn, const char *path);  ; static int read_auth_file (struct mg_file *filep, struct read_auth_file_struct *workdata, int depth);  ; static int read_message (FILE *fp, struct mg_connection *conn, char *buf, int bufsiz, int *nread);  ; static void redirect_to_https_port (struct mg_connection *conn, int port);  ; static int refresh_trust (struct mg_connection *conn);  ; static void release_handler_ref (struct mg_connection *conn, struct mg_handler_info *handler_info);  ; static void remove_bad_file (const struct mg_connection *conn, const char *path);  ; static int remove_directory (struct mg_connection *conn, const char *dir);  ; static void remove_dot_segments (char *inout);  ; static void reset_per_request_attributes (struct mg_connection *conn);  ; static int scan_directory (struct mg_connection *conn, const char *dir, void *data, int(*cb)(struct de *, void *)); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c.html:27308,timeout,timeout,27308,doc/master/civetweb_8c.html,https://root.cern,https://root.cern/doc/master/civetweb_8c.html,1,['timeout'],['timeout']
Safety,"pa}}\]. . \( \gamma = 0.5772156649\dots\) is Euler's constant.; The parameters are:; 0: Norm: Normalization constant; 1: x0: Location parameter; 2: xi: Width parameter; 3: kappa: Parameter \(\kappa\) of the Vavilov distribution; 4: beta2: Parameter \(\beta^2\) of the Vavilov distribution. Benno List, June 2010 ; Definition at line 72 of file VavilovAccurateCdf.h. Public Member Functions;  VavilovAccurateCdf ();  Default constructor. ;  ;  VavilovAccurateCdf (const double *p);  Constructor with parameter values. ;  ;  ~VavilovAccurateCdf () override;  Destructor. ;  ; IBaseFunctionOneDim * Clone () const override;  Return a clone of the object. ;  ; double DoEval (double x) const override;  Evaluate the function. ;  ; double DoEvalPar (double x, const double *p) const override;  Evaluate the function, using parameters p. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; std::string ParameterName (unsigned int i) const override;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; void SetParameters (const double *p) override;  Set the parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionOneDim; double operator() (const double *x, const double *p) const;  multidim-like interface ;  ; double operator() (double x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionOneDim; virtual ~IBaseFunctionOneDim ()=default;  ; virtual bool HasGradient () const;  ; double operator() (const double *x) const;  Evaluate the function at a point x[]. ;  ; double operator() (double x) const;  Evaluate the function at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  . Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html:1870,avoid,avoid,1870,doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurateCdf.html,1,['avoid'],['avoid']
Safety,"pdateClassInfoWithDecl(const NamedDecl* ND); 6682{; 6683 const TagDecl *td = dyn_cast<TagDecl>(ND);; 6684 const NamespaceDecl *ns = dyn_cast<NamespaceDecl>(ND);; 6685 const NamedDecl *canon = nullptr;; 6686 ; 6687 std::string name;; 6688 TagDecl* tdDef = nullptr;; 6689 if (td) {; 6690 canon = tdDef = td->getDefinition();; 6691 // Let's pass the decl to the TClass only if it has a definition.; 6692 if (!tdDef) return;; 6693 ; 6694 if (!tdDef->isCompleteDefinition() || llvm::isa<clang::FunctionDecl>(tdDef->getDeclContext())) {; 6695 // Ignore incomplete definition.; 6696 // Ignore declaration within a function.; 6697 return;; 6698 }; 6699 ; 6700 auto declName = tdDef->getNameAsString();; 6701 // Check if we have registered the unqualified name into the list; 6702 // of TClass that are in kNoInfo, kEmulated or kFwdDeclaredState.; 6703 // Since this is used as heureutistic to avoid spurrious calls to GetNormalizedName; 6704 // the unqualified name is sufficient (and the fully qualified name might be; 6705 // 'wrong' if there is difference in spelling in the template paramters (for example); 6706 if (!TClass::HasNoInfoOrEmuOrFwdDeclaredDecl(declName.c_str())){; 6707 // fprintf (stderr,""WARNING: Impossible to find a TClassEntry in kNoInfo or kEmulated the decl of which would be called %s. Skip w/o building the normalized name.\n"",declName.c_str() );; 6708 return;; 6709 }; 6710 ; 6711 clang::QualType type(tdDef->getTypeForDecl(), 0);; 6712 ROOT::TMetaUtils::GetNormalizedName(name, type, *fInterpreter, *fNormalizedCtxt);; 6713 } else if (ns) {; 6714 canon = ns->getCanonicalDecl();; 6715 name = ND->getQualifiedNameAsString();; 6716 } else {; 6717 name = ND->getQualifiedNameAsString();; 6718 }; 6719 ; 6720 // Supposedly we are being called while something is being; 6721 // loaded ... let's now tell the autoloader to do the work; 6722 // yet another time.; 6723 SuspendAutoLoadingRAII autoLoadOff(this);; 6724 // FIXME: There can be more than one TClass for a single decl.; 6725 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:261171,avoid,avoid,261171,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['avoid'],['avoid']
Safety,"pe.; Definition at line 85 of file TGeoBBox.h. ◆ MakeBuffer3D(). TBuffer3D * TGeoBBox::MakeBuffer3D ; (; ); const. overridevirtual . Reimplemented from TGeoShape.; Reimplemented in TGeoCone, TGeoConeSeg, TGeoHype, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTube, TGeoTubeSeg, TGeoXtru, and TGeoVGShape. ◆ operator=(). TGeoBBox & TGeoBBox::operator= ; (; const TGeoBBox & ; ). protecteddelete . ◆ Safety(). Double_t TGeoBBox::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Implements TGeoShape.; Reimplemented in TGeoTrap, TGeoGtra, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ Safety_v(). void TGeoBBox::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoShape.; Reimplemented in TGeoTrap, TGeoGtra, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, and TGeoXtru. ◆ SavePrimitive(). void TGeoBBox::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Reimplemented in TGeoTessellated, TGeoTrap, TGeoGtra, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, and TGeoXtru. ◆ SetBoxDimensions(). void TGeoBBox::SetBoxDimensions ; (; Double_t ; dx, . Double_t ; dy, . Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBBox.html:36389,safe,safe,36389,doc/master/classTGeoBBox.html,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html,1,['safe'],['safe']
Safety,"pe.h. ◆ MakeNode(). void TGeoCompositeShape::MakeNode ; (; const char * ; expression). Make a boolean node according to the top level boolean operation of expression. ; Propagates signal to branches until expression is fully decomposed. printf(""Making node for : %s\n"", expression); ; Definition at line 400 of file TGeoCompositeShape.cxx. ◆ operator=(). TGeoCompositeShape & TGeoCompositeShape::operator= ; (; const TGeoCompositeShape & ; ). protecteddelete . ◆ PaintComposite(). Bool_t TGeoCompositeShape::PaintComposite ; (; Option_t * ; option = """"); const. virtual . Paint this composite shape into the current 3D viewer Returns bool flag indicating if the caller should continue to paint child objects. ; Definition at line 429 of file TGeoCompositeShape.cxx. ◆ RegisterYourself(). void TGeoCompositeShape::RegisterYourself ; (; ). Register the shape and all components to TGeoManager class. ; Definition at line 475 of file TGeoCompositeShape.cxx. ◆ Safety(). Double_t TGeoCompositeShape::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . computes the closest distance from given point to this shape, according to option. ; The matching point on the shape is stored in spoint. ; Reimplemented from TGeoBBox.; Definition at line 521 of file TGeoCompositeShape.cxx. ◆ Safety_v(). void TGeoCompositeShape::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Compute safe distance from each of the points in the input array. ; Input: Array of point coordinates, array of statuses for these points, size of the arrays Output: Safety values ; Reimplemented from TGeoBBox.; Definition at line 629 of file TGeoCompositeShape.cxx. ◆ SavePrimitive(). void TGeoCompositeShape::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox.; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:42678,Safe,Safety,42678,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['Safe'],['Safety']
Safety,"pe::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; const Double_t * GetNhigh () const;  ; const Double_t * GetNlow () const;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; Double_t GetZcoord (Double_t xc, Double_t yc, Double_t zc) const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetCtubDimensions (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz);  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoTubeSeg;  TGeoTubeSeg ();  ;  TGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:2726,Safe,Safety,2726,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,2,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"pe::NormalPhi(Double_t* point, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoScaledShape&operator=(const TGeoScaledShape&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); voidSetScale(TGeoScale* scale); virtual voidSetSegsAndPol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoScaledShape.html:7506,Safe,SafetyPhi,7506,root/html528/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html528/TGeoScaledShape.html,1,['Safe'],['SafetyPhi']
Safety,"pedef ROOT::Math::IParametricFunctionMultiDimTempl<ROOT::Double_v> IModelFunction_v;; 86 typedef ROOT::Math::IParamMultiGradFunctionTempl<ROOT::Double_v> IGradModelFunction_v;; 87#else; 88 typedef ROOT::Math::IParamMultiFunction IModelFunction_v;; 89 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction_v;; 90#endif; 91 typedef ROOT::Math::IParamMultiGradFunction IGradModelFunction;; 92 typedef ROOT::Math::IParamFunction IModel1DFunction;; 93 typedef ROOT::Math::IParamGradFunction IGradModel1DFunction;; 94 ; 95 typedef ROOT::Math::IMultiGenFunction BaseFunc;; 96 typedef ROOT::Math::IMultiGradFunction BaseGradFunc;; 97 ; 98 ; 99 /**; 100 Default constructor; 101 */; 102 Fitter () {}; 103 ; 104 /**; 105 Constructor from a result; 106 */; 107 Fitter (const std::shared_ptr<FitResult> & result);; 108 ; 109 ; 110 /**; 111 Destructor.; 112 Make it virtual in case users derive from Fitter class to extend it by adding new methods.; 113 This is needed to avoid a warning seen when doing from Python; 114 (see ROOT issue [#12391](https://github.com/root-project/root/issues/12391) ).; 115 Note that the Fitter class does not provide virtual functions to be re-implemented by derived classes.; 116 */; 117 virtual ~Fitter () {}; 118 ; 119 /**; 120 Copy constructor (disabled, class is not copyable); 121 */; 122 Fitter(const Fitter &) = delete;; 123 ; 124 /**; 125 Assignment operator (disabled, class is not copyable); 126 */; 127 Fitter & operator = (const Fitter &) = delete;; 128 ; 129 ; 130public:; 131 ; 132 /**; 133 fit a data set using any generic model function; 134 If data set is binned a least square fit is performed; 135 If data set is unbinned a maximum likelihood fit (not extended) is done; 136 Pre-requisite on the function:; 137 it must implement the 1D or multidimensional parametric function interface.; 138 Note that both the input data and the function object are copied by the Fitter.; 139 */; 140 template <class Data, class Function,; 141 class cond = typename std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:3722,avoid,avoid,3722,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['avoid'],['avoid']
Safety,"pen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  FITS_tutorial7.COpen a FITS file that contains a catalog of astronomical objects and dump some of its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:107534,detect,detector,107534,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['detect'],['detector']
Safety,"pen in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 2051 Short_t keylen,cycle;; 2052 UInt_t datime;; 2053 Int_t nbytes,date,time,objlen,nwheader;; 2054 Long64_t seekkey,seekpdir;; 2055 char header[1024];; 2056 char *buffer, *bufread;; 2057 char nwhc;; 2058 Long64_t idcur = fBEGIN;; 2059 ; 2060 Long64_t size;; 2061 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy warnings; 2062 Error(""Recover"", ""cannot stat the file %s"", GetName());; 2063 return 0;; 2064 }; 2065 ; 2066 fEND = Long64_t(size);; 2067 ; 2068 if (fWritable && !fFree) fFree = new TList;; 2069 ; 2070 TKey *key;; 2071 Int_t nrecov = 0;; 2072 nwheader = 1024;; 2073 Int_t nread = nwheader;; 2074 ; 207",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:73028,recover,recovered,73028,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['recover'],['recovered']
Safety,"pename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Loss ; (; const Matrix_t & ; groundTruth, . const Matrix_t & ; weights, . bool ; includeRegularization = true . ); const. Function for evaluating the loss, based on the activations stored in the last layer. ; Definition at line 1263 of file DeepNet.h. ◆ Loss() [2/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Loss ; (; Tensor_t & ; input, . const Matrix_t & ; groundTruth, . const Matrix_t & ; weights, . bool ; inTraining = false, . bool ; includeRegularization = true . ). Function for evaluating the loss, based on the propagation of the given input. ; Definition at line 1279 of file DeepNet.h. ◆ Prediction() [1/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Prediction ; (; Matrix_t & ; predictions, . EOutputFunction ; f . ); const. Prediction based on activations stored in the last layer. ; Definition at line 1303 of file DeepNet.h. ◆ Prediction() [2/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Prediction ; (; Matrix_t & ; predictions, . Tensor_t & ; input, . EOutputFunction ; f . ). Prediction for the given inputs, based on what network learned. ; Definition at line 1311 of file DeepNet.h. ◆ Print(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Print. Print the Deep Net Info. ; Definition at line 1321 of file DeepNet.h. ◆ RegularizationTerm(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::RegularizationTerm. Function for computing the regularizaton term to be added to the loss function . Definition at line 1289 of file DeepNet.h. ◆ ResetTraining(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Lay",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:24625,Predict,Prediction,24625,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,1,['Predict'],['Prediction']
Safety,"per must explicitly lock access to objects shared between threads. No other thread can write to a locked object unless it is unlocked. The developer needs to lock local objects. The spirit, if not the letter of this definition, requires the user of the library only to be familiar with the semantic content of the objects in use. Locking access to objects that are being shared due to extra-semantic details of implementation (for example, copy-on-write) should remain the responsibility of the library.; All public and protected functions are reentrant. The library provides protection against multiple threads trying to modify static and global data used within the library. The preferred way of providing this protection is to use mutex locks. The library also locks an object before writing to it. The developer is not required to explicitly lock or unlock a class object (static, global or local) to perform a single operation on the object. Note that even multithread safe level II hardly relieves the user of the library from the burden of locking. A thread suffers from deadlock if it is blocked waiting for a condition that will never occur. Typically, this occurs when one thread needs to access a resource that is already locked by another thread, and that other thread is trying to access a resource that has already been locked by the first thread. In this situation, neither thread is able to progress; they are deadlocked.; A multiprocessor is a hardware system with multiple processors or multiple, simultaneous execution units. Examples can be found at http://www-linux.gsi.de/~go4/HOWTOthreads/howtothreadsbody.html (the thread authors’ web site - Jörn Adamczewski and Marc Hemberger). 24 PROOF: Parallel Processing; ; The Parallel ROOT Facility, PROOF, is an extension of ROOT allowing transparent analysis of large sets of ROOT files in parallel on remote computer clusters or multi-core computers. The main design goals for the PROOF system are:; Transparency : there should be as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1124266,safe,safe,1124266,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['safe'],['safe']
Safety,"perateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_t* option = "">""); static voidSetProxy(const char* url); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWebFile.html:12384,timeout,timeout,12384,root/html528/TWebFile.html,https://root.cern,https://root.cern/root/html528/TWebFile.html,1,['timeout'],['timeout']
Safety,"perateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtual voidTFile::SetCacheRead(TFileCacheRead* cache); virtual voidTFile::SetCacheWrite(TFileCacheWrite* cache); virtual voidTFile::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTFile::SetEND(Long64_t last); static voidTFile::SetFileBytesRead(Long64_t bytes = 0); static voidTFile::SetFileBytesWritten(Long64_t bytes = 0); static voidTFile::SetFileReadCalls(Int_t readcalls = 0); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFile::SetOffset(Long64_t offset, TFile::ERelativeTo pos = kBeg); static Bool_tTFile::SetOnlyStaged(Bool_t onlystaged); static UInt_tTFile::SetOpenTimeout(UInt_t timeout); virtual voidTFile::SetOption(Option_t* option = "">""); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNetFile.html:14143,timeout,timeout,14143,root/html528/TNetFile.html,https://root.cern,https://root.cern/root/html528/TNetFile.html,2,['timeout'],['timeout']
Safety,"perator*() const; virtual TIterator&operator=(const TIterator& rhs); TTreeFriendLeafIter&operator=(const TTreeFriendLeafIter& rhs); Bool_tTIterator::operator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TTreeFriendLeafIter(const TTreeFriendLeafIter& iter); TTreeFriendLeafIter(const TTree* t, Bool_t dir = kIterForward). protected:. TTreeFriendLeafIter(). Data Members; protected:. Bool_tfDirectioniteration direction; TIterator*fLeafItercurrent leaf sub-iterator.; TTree*fTreetree being iterated; TIterator*fTreeItercurrent tree sub-iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTreeFriendLeafIter(const TTree* t, Bool_t dir = kIterForward); Create a new iterator. By default the iteration direction; is kIterForward. To go backward use kIterBackward. TTreeFriendLeafIter(const TTreeFriendLeafIter& iter); Copy constructor. Does NOT copy the 'cursor' location!. TIterator& operator=(const TIterator& rhs); Overridden assignment operator. Does NOT copy the 'cursor' location!. TTreeFriendLeafIter& operator=(const TTreeFriendLeafIter& rhs); Overridden assignment operator. Does NOT copy the 'cursor' location!. TObject* Next(); Go the next friend element. Option_t* GetOption() const; Returns the object option stored in the list. void Reset(Option_t* option = """"). TTreeFriendLeafIter(); { }. ~TTreeFriendLeafIter(); { SafeDelete(fLeafIter); SafeDelete(fTreeIter); }. const TCollection * GetCollection() const; { return 0; }. TObject * operator*() const; TODO: Implement me. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-18 17:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeFriendLeafIter.html:2307,Safe,SafeDelete,2307,root/html604/TTreeFriendLeafIter.html,https://root.cern,https://root.cern/root/html604/TTreeFriendLeafIter.html,2,['Safe'],['SafeDelete']
Safety,"perimental::RResult< ROOT::Experimental::Internal::RPage > ROOT::Experimental::Internal::RPageSource::UnsealPage ; (; const RSealedPage & ; sealedPage, . const RColumnElementBase & ; element, . DescriptorId_t ; physicalColumnId, . RPageAllocator & ; pageAlloc . ). static . Helper for unstreaming a page. ; This is commonly used in derived, concrete page sources. The implementation currently always makes a memory copy, even if the sealed page is uncompressed and in the final memory layout. The optimization of directly mapping pages is left to the concrete page source implementations. ; Definition at line 487 of file RPageStorage.cxx. ◆ UnzipCluster(). void ROOT::Experimental::Internal::RPageSource::UnzipCluster ; (; RCluster * ; cluster). Parallel decompression and unpacking of the pages in the given cluster. ; The unzipped pages are supposed to be preloaded in a page pool attached to the source. The method is triggered by the cluster pool's unzip thread. It is an optional optimization, the method can safely do nothing. In particular, the actual implementation will only run if a task scheduler is set. In practice, a task scheduler is set if implicit multi-threading is turned on. ; Definition at line 224 of file RPageStorage.cxx. ◆ UnzipClusterImpl(). void ROOT::Experimental::Internal::RPageSource::UnzipClusterImpl ; (; RCluster * ; cluster). protectedvirtual . Definition at line 230 of file RPageStorage.cxx. Member Data Documentation. ◆ fActivePhysicalColumns. RActivePhysicalColumns ROOT::Experimental::Internal::RPageSource::fActivePhysicalColumns. protected . The active columns are implicitly defined by the model fields or views. ; Definition at line 658 of file RPageStorage.hxx. ◆ fCounters. std::unique_ptr<RCounters> ROOT::Experimental::Internal::RPageSource::fCounters. protected . Definition at line 654 of file RPageStorage.hxx. ◆ fDescriptor. RNTupleDescriptor ROOT::Experimental::Internal::RPageSource::fDescriptor. private . Definition at line 603 of file RPageSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html:20425,safe,safely,20425,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RPageSource.html,1,['safe'],['safely']
Safety,"ph, TPrincipal, TDirectoryFile, TKey, TKeyMapFile, TMapFile, TSPlot, TDatabasePDG, TGenerator, TParticleClassPDG, TApplicationRemote, TProof, TProofChain, RooPlot, TBranch, TVirtualBranchBrowsable, TCollectionPropertyBrowsable, TBranchClones, TBranchElement, TBranchObject, TBranchSTL, TLeaf, TNtuple, TNtupleD, TTreePerfStats, ROOT::Experimental::XRooFit::xRooNode, and TQueryResult.; Definition at line 198 of file TObject.cxx. ◆ CheckedHash(). ULong_t TObject::CheckedHash ; (; ). inline . Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ; The intent is for this routine to be called instead of directly calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; (*) The setup is consistent when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 324 of file TObject.h. ◆ Class(). static TClass * TObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 243 of file TObject.h. ◆ ClassName(). const char * TObject::ClassName ; (; ); const. virtual . Returns name of class to which the object belongs. ; Definition at line 207 of file TObject.cxx. ◆ Clear(). virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMrbSubevent_Caen, TNotifyLinkBase, TRefTable, ROOT::TSchemaRule, TGTextEdit, TGTextView, TGView, TGHtml, TStreamerInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:21904,safe,safe,21904,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['safe'],['safe']
Safety,"ph, TPrincipal, TDirectoryFile, TKey, TKeyMapFile, TMapFile, TSPlot, TDatabasePDG, TGenerator, TParticleClassPDG, TApplicationRemote, TProof, TProofChain, RooPlot, TBranch, TVirtualBranchBrowsable, TCollectionPropertyBrowsable, TBranchClones, TBranchElement, TBranchObject, TBranchSTL, TLeaf, TNtuple, TNtupleD, TTreePerfStats, ROOT::Experimental::XRooFit::xRooNode, and TQueryResult.; Definition at line 204 of file TObject.cxx. ◆ CheckedHash(). ULong_t TObject::CheckedHash ; (; ). inline . Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ; The intent is for this routine to be called instead of directly calling the function Hash during ""insert"" operations. See TObject::HasInconsistenTObjectHash();; (*) The setup is consistent when all classes in the class hierarchy that overload TObject::Hash do call ROOT::CallRecursiveRemoveIfNeeded in their destructor. i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation. ; Definition at line 324 of file TObject.h. ◆ Class(). static TClass * TObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 243 of file TObject.h. ◆ ClassName(). const char * TObject::ClassName ; (; ); const. virtual . Returns name of class to which the object belongs. ; Definition at line 213 of file TObject.cxx. ◆ Clear(). virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMVA::ResultsClassification, TMVA::ResultsMulticlass, TMVA::ResultsRegression, TMrbSubevent_Caen, TNotifyLinkBase, TRefTable, ROOT::TSchemaRule, TGTextEdit, TGTextView, TGView, TGHtml, TStreamerInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:21905,safe,safe,21905,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['safe'],['safe']
Safety,"physics libraries, GenVector provides class templates for modeling the vectors. The user can control how the vector is internally represented. This is expressed by a choice of coordinate system, which is supplied as a template parameter when the vector is constructed. Furthermore, each coordinate system is itself a template, so that the user can specify the underlying scalar type.; The GenVector classes do not inherit from TObject, therefore cannot be used as in the case of the physics vector classes in ROOT collections.; In addition, to optimize performances, no virtual destructors are provided. In the following paragraphs, the main characteristics of GenVector are described. A more detailed description of all the GenVector classes is available also at http://seal.cern.ch/documents/mathlib/GenVector.pdf; 13.12.1 Main Characteristics; 13.12.1.1 Optimal Runtime Performances; We try to minimize any overhead in the run-time performance. We have deliberately avoided the use of any virtual function and even virtual destructors in the classes. In addition, as much as possible functions are defined as inline. For this reason, we have chosen to use template classes to implement the GenVector concepts instead of abstract or base classes and virtual functions. It is then recommended to avoid using the GenVector classes polymorphically and developing classes inheriting from them.; 13.12.1.2 Points and Vector Concept; Mathematically vectors and points are two distinct concepts. They have different transformations, as vectors only rotate while points rotate and translate. You can add two vectors but not two points and the difference between two points is a vector. We then distinguish for the 3 dimensional case, between points and vectors, modeling them with different classes:. ROOT::Math::DisplacementVector2D and ROOT::Math::DisplacementVector3D template classes describing 2 and 3 component direction and magnitude vectors, not rooted at any particular point;; ROOT::Math::Positio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:719745,avoid,avoided,719745,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoided']
Safety,"pid,pidf);; 1999 pid->IncrementCount();; 2000 ; 2001 {; 2002 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 2003 pidslist->Add(pid);; 2004 Int_t ind = pidslist->IndexOf(pid);; 2005 pid->SetUniqueID((UInt_t)ind);; 2006 }; 2007 ; 2008 return pid;; 2009}; 2010 ; 2011 ; 2012////////////////////////////////////////////////////////////////////////////////; 2013/// Attempt to recover file if not correctly closed; 2014///; 2015/// The function returns the number of keys that have been recovered.; 2016/// If no keys can be recovered, the file will be declared Zombie by; 2017/// the calling function. This function is automatically called when; 2018/// opening a file.; 2019/// If the file is open in read only mode, the file is not modified.; 2020/// If open in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 204",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:72265,recover,recovered,72265,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,2,"['recover', 'safe']","['recovered', 'safely']"
Safety,"piled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Mon Jul 4 15:24:50 2011 » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooWorkspace__CodeRepo.html:7544,avoid,avoid,7544,root/html530/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html530/RooWorkspace__CodeRepo.html,3,"['abort', 'avoid', 'recover']","['abort', 'avoid', 'recover']"
Safety,"piled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Thu Nov 3 20:10:09 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__CodeRepo.html:7544,avoid,avoid,7544,root/html532/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__CodeRepo.html,3,"['abort', 'avoid', 'recover']","['abort', 'avoid', 'recover']"
Safety,"piled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Wed Dec 8 11:39:40 2010 » Last generated: 2010-12-08 11:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace__CodeRepo.html:7475,avoid,avoid,7475,root/html528/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html528/RooWorkspace__CodeRepo.html,3,"['abort', 'avoid', 'recover']","['abort', 'avoid', 'recover']"
Safety,"piled) (NA):(NA) 0 public: static const char *Class_Name();; (compiled) (NA):(NA) 0 public: static Version_t Class_Version();; (compiled) (NA):(NA) 0 public: static void Dictionary();; (compiled) (NA):(NA) 0 public: virtual class TClass *IsA() const;; (compiled) (NA):(NA) 0 public: virtual void ShowMembers(class TMemberInspector &insp) const;; (compiled) (NA):(NA) 0 public: virtual void Streamer(class TBuffer &);; (compiled) (NA):(NA) 0 public: void StreamerNVirtual(class TBuffer &ClassDef_StreamerNVirtual_b);; (compiled) (NA):(NA) 0 public: static const char *DeclFileName();; (compiled) (NA):(NA) 0 public: static int ImplFileLine();; (compiled) (NA):(NA) 0 public: static const char *ImplFileName();; (compiled) (NA):(NA) 0 public: static int DeclFileLine();; root [] .> test.log; root [] l.Dump();; root [] .>; root [] ?; Here we see:. Use .class as quick help and reference; Unix like I/O redirection using .> out.txt and unredirection with .>; Use ? to get help on all ‘‘raw’’ interpreter commands; Use @ to abort a multi-line command. Now let us execute a multi-line command:; root [] {; root [] ? TLine l;; root [] ? for (int i = 0; i < 5; i++) {; root [] ? l.SetX1(i);; root [] ? l.SetY1(i+1);; root [] ? l.Print();; root [] ? }; root [] ? }; TLine X1=0.000000 Y1=1.000000 X2=0.000000 Y2=0.000000; TLine X1=1.000000 Y1=2.000000 X2=0.000000 Y2=0.000000; TLine X1=2.000000 Y1=3.000000 X2=0.000000 Y2=0.000000; TLine X1=3.000000 Y1=4.000000 X2=0.000000 Y2=0.000000; TLine X1=4.000000 Y1=5.000000 X2=0.000000 Y2=0.000000; root [] .q; Here we note:. A multi-line command starts with a { and ends with a }.; Inside continuation, every line has to be correctly terminated with a ; (like in ""real’’ C++).; All objects are created in global scope.; There is no way to back up; you are better off writing a script.; Use .q to exit root. 7.2 Feeding Sources Files To ROOT: C++ Scripts; ROOT script files (often called “Macros”) contain pure C++ code. They can contain a simple sequence of stateme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:262240,abort,abort,262240,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['abort'],['abort']
Safety,"ping shape is subtracted from the current drawn geometry (become invisible). In order to activate clipping, one has to first define the clipping shape(s):; 1. TGeoShape *clip1, *clip2, ...; One might switch between several clipping shapes. Note that these shapes are considered defined in the current MARS. Composite shapes may be used.; 2. gGeoManager->SetClippingShape(clip1);; One can activate or deactivate clipping at any time: gGeoManager->SetClipping(flag);. Perform ray-tracing:gGeoManager->GetTopVolume()->Raytrace();. One can redo the steps 2-3 as many times as needed. Let us look how the rootgeom example looks clipped with a tube. Ray-tracing example with box-clipping. 18.8 Representing Misalignments of the Ideal Geometry; The ideal positioning of a detector does not match its position in the experimental hall. This generally happens not only for the detector modules, but also for their components. The accurate knowledge of the detector real misalignments can be extremely important for getting close to its designed resolution and the expected tracking efficiency. TGeo offers tools for representing positioning misalignments, applying them to the ideal geometry and performing navigation under these conditions. Detector tracking algorithms can then directly query the geometry for navigation purposes or for retrieving actual misalignment information.; 18.8.1 Physical Nodes; Physical nodes are the actual “touchable” objects in the geometry, representing actually a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. The number of physical nodes is given by the total number of possible of branches in the geometry hierarchy. In case of detector geometries and specially for calorimeters this number can be of the order 106-109, therefore it is impossible to create all physical nodes as objects in memory. In TGeo, physical nodes are represented by the class TGeoPhysicalNode and can be created on demand f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1013261,detect,detector,1013261,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['detect'],['detector']
Safety,"ping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Double_tDistToParaboloid(Double_t* point, Double_t* dir) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoParaboloid.html:2313,safe,safe,2313,root/html528/TGeoParaboloid.html,https://root.cern,https://root.cern/root/html528/TGeoParaboloid.html,1,['safe'],['safe']
Safety,"ping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tDistToSphere(Double_t* point, Double_t* dir, Double_t rsph, Bool_t check = kTRUE, Bool_t firstcross = kTRUE) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoSphere.html:2099,safe,safe,2099,root/html528/TGeoSphere.html,https://root.cern,https://root.cern/root/html528/TGeoSphere.html,1,['safe'],['safe']
Safety,"ping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCompositeShape.html:7791,safe,safe,7791,root/html528/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html528/TGeoCompositeShape.html,3,['safe'],['safe']
Safety,"pl based on the value of; fStreamerType. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. Bool_t MatchLegacyCheckSum(UInt_t checksum) const; Return true if the checksum passed as argument is one of the checksum; value produced by the older checksum calulcation algorithm. UInt_t GetCheckSum(ECheckSum code);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:55783,safe,safe,55783,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['safe'],['safe']
Safety,"plementations that are designed to work with trivially copyable T's. More...;  ; class  SmallVectorTemplateCommon;  This is the part of SmallVectorTemplateBase which does not depend on whether the type T is a POD. More...;  . Typedefs; template<typename T > ; using RVec = ROOT::VecOps::RVec< T >;  . Functions; constexpr bool All (const bool *vals, std::size_t size);  ; template<typename... T> ; std::size_t GetVectorsSize (const std::string &id, const RVec< T > &... vs);  ; template<typename Tuple_t , std::size_t... Is> ; auto MapFromTuple (Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...));  ; template<typename F , typename... RVecs> ; auto MapImpl (F &&f, RVecs &&... vs) -> RVec< decltype(f(vs[0]...))>;  ; uint64_t NextPowerOf2 (uint64_t A);  Return the next power of two (in 64-bits) that is strictly greater than A. ;  ; template<typename T > ; void ResetView (RVec< T > &v, T *addr, std::size_t sz);  An unsafe function to reset the buffer for which this RVec is acting as a view. ;  ; template<typename ForwardIt > ; void UninitializedValueConstruct (ForwardIt first, ForwardIt last);  ; template<typename T , bool TriviallyCopyable> ;  void (off) SmallVectorTemplateBase< T;  . Typedef Documentation. ◆ RVec. template<typename T > . using ROOT::Internal::VecOps::RVec = typedef ROOT::VecOps::RVec<T>. Definition at line 69 of file RVec.hxx. Function Documentation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<typename Tuple_t , std::size_t... Is> . auto ROOT::Internal::VecOps::MapFromTuple ; (; Tuple_t && ; t, . std::index_sequence< Is... > ;  . ); -> d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:2177,unsafe,unsafe,2177,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,1,['unsafe'],['unsafe']
Safety,"plemented in TBufferSQL.; Definition at line 419 of file TBufferFile.h. ◆ ReadULong64(). void TBufferFile::ReadULong64 ; (; ULong64_t & ; l). inlineoverridevirtual . Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 432 of file TBufferFile.h. ◆ ReadUShort(). void TBufferFile::ReadUShort ; (; UShort_t & ; s). inlineoverridevirtual . Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 393 of file TBufferFile.h. ◆ ReadVersion(). Version_t TBufferFile::ReadVersion ; (; UInt_t * ; start = nullptr, . UInt_t * ; bcnt = nullptr, . const TClass * ; cl = nullptr . ). overridevirtual . Read class version from I/O buffer. ; Implements TBuffer.; Definition at line 2930 of file TBufferFile.cxx. ◆ ReadVersionForMemberWise(). Version_t TBufferFile::ReadVersionForMemberWise ; (; const TClass * ; cl = nullptr). overridevirtual . Read class version from I/O buffer. ; To be used when streaming out member-wise streamed collection where we do not care (not save) about the byte count and can safely ignore missing streamerInfo (since they usually indicate empty collections). ; Implements TBuffer.; Definition at line 3079 of file TBufferFile.cxx. ◆ ReadVersionNoCheckSum(). Version_t TBufferFile::ReadVersionNoCheckSum ; (; UInt_t * ; start = nullptr, . UInt_t * ; bcnt = nullptr . ). overridevirtual . Read class version from I/O buffer, when the caller knows for sure that there is no checksum written/involved. ; Implements TBuffer.; Definition at line 3036 of file TBufferFile.cxx. ◆ ReadWithFactor() [1/2]. void TBufferFile::ReadWithFactor ; (; Double_t * ; ptr, . Double_t ; factor, . Double_t ; minvalue . ). overridevirtual . Read a Double32_t from the buffer when the factor and minimum value have been specified see comments about Double32_t encoding at TBufferFile::WriteDouble32(). ; Implements TBuffer.; Definition at line 524 of file TBufferFile.cxx. ◆ ReadWithFactor() [2/2]. void TBufferFile::ReadWithFactor ; (; Float_t * ; ptr, . Double_t ; factor, . D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:69412,safe,safely,69412,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['safe'],['safely']
Safety,"plexType : short. strong . EnumeratorkNone ; kDouble ; kFloat ; kInt ; kLong . Definition at line 111 of file TClassEdit.h. ◆ EModType. enum TClassEdit::EModType. EnumeratorkNone ; kDropTrailStar ; kDropDefaultAlloc ; kDropAlloc ; kInnerClass ; kInnedMostClass ; kDropStlDefault ; kDropComparator ; kDropAllDefault ; kLong64 ; kDropStd ; kKeepOuterConst ; kResolveTypedef ; kDropPredicate ; kDropHash . Definition at line 75 of file TClassEdit.h. ◆ ESTLType. enum TClassEdit::ESTLType. EnumeratorkNotSTL ; kVector ; kList ; kForwardlist ; kDeque ; kMap ; kMultiMap ; kSet ; kMultiSet ; kUnorderedSet ; kUnorderedMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTClassEdit.html:7017,redund,redundant,7017,doc/master/namespaceTClassEdit.html,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html,2,['redund'],['redundant']
Safety,"plitlevel); 1604{; 1605 if (!ptrClass) {; 1606 Error(""Branch"", ""The pointer specified for %s is not of a class known to ROOT"", branchname);; 1607 return nullptr;; 1608 }; 1609 TClass* actualClass = nullptr;; 1610 void** addr = (void**) addobj;; 1611 if (addr && *addr) {; 1612 actualClass = ptrClass->GetActualClass(*addr);; 1613 if (!actualClass) {; 1614 Warning(""Branch"", ""The actual TClass corresponding to the object provided for the definition of the branch \""%s\"" is missing.\n\tThe object will be truncated down to its %s part"",; 1615 branchname, ptrClass->GetName());; 1616 actualClass = ptrClass;; 1617 } else if ((ptrClass != actualClass) && !actualClass->InheritsFrom(ptrClass)) {; 1618 Error(""Branch"", ""The actual class (%s) of the object provided for the definition of the branch \""%s\"" does not inherit from %s"", actualClass->GetName(), branchname, ptrClass->GetName());; 1619 return nullptr;; 1620 }; 1621 } else {; 1622 actualClass = ptrClass;; 1623 }; 1624 if (actualClass && actualClass->GetCollectionProxy() && dynamic_cast<TEmulatedCollectionProxy*>(actualClass->GetCollectionProxy())) {; 1625 Error(""Branch"", writeStlWithoutProxyMsg,; 1626 actualClass->GetName(), branchname, actualClass->GetName());; 1627 return nullptr;; 1628 }; 1629 return Branch(branchname, actualClass->GetName(), (void*) addobj, bufsize, splitlevel);; 1630}; 1631 ; 1632////////////////////////////////////////////////////////////////////////////////; 1633/// Same as TTree::Branch but automatic detection of the class name.; 1634/// \see TTree::Branch for other details.; 1635 ; 1636TBranch* TTree::BranchImpRef(const char* branchname, const char *classname, TClass* ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel); 1637{; 1638 TClass* claim = TClass::GetClass(classname);; 1639 if (!ptrClass) {; 1640 if (claim && claim->GetCollectionProxy() && dynamic_cast<TEmulatedCollectionProxy*>(claim->GetCollectionProxy())) {; 1641 Error(""Branch"", writeStlWithoutProxyMsg,; 1642 claim->GetName(), branch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:61926,detect,detection,61926,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['detect'],['detection']
Safety,"plotOn(extmodel) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) only plotting range 'fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) only plotting range 'fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) only plotting range 'fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#0] WARNING:InputArguments -- The parameter 'width' with range [-inf, inf] of the RooGaussian 'sig' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_modelsum_modelData_LEFT' created with bounds [10,20]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_modelsum_modelData_RIGHT' created with bounds [60,100]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(modelsum) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_modelsum_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: -19",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html:21136,safe,safe,21136,doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,2,['safe'],['safe']
Safety,"pointing to this TDirectory. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Attributes inherited from TFile; static TList * fgAsyncOpenRequests = nullptr;  ; static std::atomic< Long64_t > fgBytesRead {0};  Number of bytes read by all TFile objects. ;  ; static std::atomic< Long64_t > fgBytesWrite {0};  Number of bytes written by all TFile objects. ;  ; static TString fgCacheFileDir;  Directory where to locally stage files. ;  ; static Bool_t fgCacheFileDisconnected = kTRUE;  Indicates, we trust in the files in the cache dir without stat on the cached file. ;  ; static Bool_t fgCacheFileForce = kFALSE;  Indicates, to force all READ to CACHEREAD. ;  ; static std::atomic< Long64_t > fgFileCounter {0};  Counter for all opened files. ;  ; static Bool_t fgOnlyStaged = kFALSE;  Before the file is opened, it is checked, that the file is staged, if not, the open fails. ;  ; static UInt_t fgOpenTimeout = TFile::kEternalTimeout;  Timeout for open operations in ms - 0 corresponds to blocking i/o. ;  ; static Int_t fgReadaheadSize = 256000;  Readahead buffer size. ;  ; static std::atomic< Int_t > fgReadCalls {0};  Number of bytes read from all TFile objects. ;  ; static Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  ;  Static Protected Attributes inherited from TXMLSetup; static TString fgNameSpaceBase = fgROOTDocNameSpaceBase;  buffer, used in XmlDefineClass() function ;  . #include <TXMLFile.h>. Inheritance diagram for TXMLFile:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TXMLFile() [1/3]. TXMLFile::TXMLFile ; (; const TXML",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:46370,Timeout,Timeout,46370,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['Timeout'],['Timeout']
Safety,"points; i++) fY[i] /= integ;; 409 }; 410 ; 411 f->TAttLine::Copy(*this);; 412 f->TAttFill::Copy(*this);; 413 f->TAttMarker::Copy(*this);; 414 ; 415 SetName(f->GetName());; 416 SetTitle(f->GetTitle());; 417}; 418 ; 419////////////////////////////////////////////////////////////////////////////////; 420/// Graph constructor reading input from filename.; 421///; 422/// `filename` is assumed to contain at least two columns of numbers.; 423/// The string format is by default `""%lg %lg""`.; 424/// This is a standard c formatting for `scanf()`.; 425/// For example, set format to `""%lg,%lg""` for a comma-separated file.; 426///; 427/// If columns of numbers should be skipped, a `""%*lg""` or `""%*s""` for each column; 428/// can be added, e.g. `""%lg %*lg %lg""` would read x-values from the first and; 429/// y-values from the third column.; 430///; 431/// For files separated by a specific delimiter different from ' ' and '\\t' (e.g.; 432/// ';' in csv files) you can avoid using `%*s` to bypass this delimiter by explicitly; 433/// specify the `option` argument,; 434/// e.g. option=`"" \\t,;""` for columns of figures separated by any of these characters; 435/// (' ', '\\t', ',', ';'); 436/// used once (e.g. `""1;1""`) or in a combined way (`"" 1;,;; 1""`).; 437/// Note in that case, the instantiation is about two times slower.; 438 ; 439TGraph::TGraph(const char *filename, const char *format, Option_t *option); 440 : TNamed(""Graph"", filename), TAttFill(0, 1000); 441{; 442 Double_t x, y;; 443 TString fname = filename;; 444 gSystem->ExpandPathName(fname);; 445 ; 446 std::ifstream infile(fname.Data());; 447 if (!infile.good()) {; 448 MakeZombie();; 449 Error(""TGraph"", ""Cannot open file: %s, TGraph is Zombie"", filename);; 450 fNpoints = 0;; 451 return;; 452 } else {; 453 fNpoints = 100; //initial number of points; 454 }; 455 if (!CtorAllocate()) return;; 456 std::string line;; 457 Int_t np = 0;; 458 ; 459 // No delimiters specified (standard constructor).; 460 if (strcmp(option, """") == 0) {; 46",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:13758,avoid,avoid,13758,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['avoid'],['avoid']
Safety,"pollres = 0 means timeout */; 6322 nread = 0;; 6323 }; 6324#endif; 6325 ; 6326 } else {; 6327 struct mg_pollfd pfd[1];; 6328 int pollres;; 6329 ; 6330 pfd[0].fd = conn->client.sock;; 6331 pfd[0].events = POLLIN;; 6332 pollres = mg_poll(pfd,; 6333 1,; 6334 (int)(timeout * 1000.0),; 6335 &(conn->phys_ctx->stop_flag));; 6336 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6337 return -2;; 6338 }; 6339 if (pollres > 0) {; 6340 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6341 err = (nread < 0) ? ERRNO : 0;; 6342 if (nread <= 0) {; 6343 /* shutdown of the socket at client side */; 6344 return -2;; 6345 }; 6346 } else if (pollres < 0) {; 6347 /* error callint poll */; 6348 return -2;; 6349 } else {; 6350 /* pollres = 0 means timeout */; 6351 nread = 0;; 6352 }; 6353 }; 6354 ; 6355 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6356 return -2;; 6357 }; 6358 ; 6359 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6360 /* some data has been read, or no data was requested */; 6361 return nread;; 6362 }; 6363 ; 6364 if (nread < 0) {; 6365 /* socket error - check errno */; 6366#if defined(_WIN32); 6367 if (err == WSAEWOULDBLOCK) {; 6368 /* TODO (low): check if this is still required */; 6369 /* standard case if called from close_socket_gracefully */; 6370 return -2;; 6371 } else if (err == WSAETIMEDOUT) {; 6372 /* TODO (low): check if this is still required */; 6373 /* timeout is handled by the while loop */; 6374 return 0;; 6375 } else if (err == WSAECONNABORTED) {; 6376 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6377 return -2;; 6378 } else {; 6379 DEBUG_TRACE(""recv() failed, error %d"", err);; 6380 return -2;; 6381 }; 6382#else; 6383 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6384 * if the timeout is reached and if the socket was set to non-; 6385 * blocking in close_socket_gracefully, so we can not distinguish; 6386 * here. We have to wait for the timeout in both cases for now.; 6387 */; 6388 if (ERROR_TRY_AGAIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:184834,timeout,timeout,184834,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['timeout'],['timeout']
Safety,"pollres = 0 means timeout */; 6323 nread = 0;; 6324 }; 6325#endif; 6326 ; 6327 } else {; 6328 struct mg_pollfd pfd[1];; 6329 int pollres;; 6330 ; 6331 pfd[0].fd = conn->client.sock;; 6332 pfd[0].events = POLLIN;; 6333 pollres = mg_poll(pfd,; 6334 1,; 6335 (int)(timeout * 1000.0),; 6336 &(conn->phys_ctx->stop_flag));; 6337 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6338 return -2;; 6339 }; 6340 if (pollres > 0) {; 6341 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6342 err = (nread < 0) ? ERRNO : 0;; 6343 if (nread <= 0) {; 6344 /* shutdown of the socket at client side */; 6345 return -2;; 6346 }; 6347 } else if (pollres < 0) {; 6348 /* error callint poll */; 6349 return -2;; 6350 } else {; 6351 /* pollres = 0 means timeout */; 6352 nread = 0;; 6353 }; 6354 }; 6355 ; 6356 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6357 return -2;; 6358 }; 6359 ; 6360 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6361 /* some data has been read, or no data was requested */; 6362 return nread;; 6363 }; 6364 ; 6365 if (nread < 0) {; 6366 /* socket error - check errno */; 6367#if defined(_WIN32); 6368 if (err == WSAEWOULDBLOCK) {; 6369 /* TODO (low): check if this is still required */; 6370 /* standard case if called from close_socket_gracefully */; 6371 return -2;; 6372 } else if (err == WSAETIMEDOUT) {; 6373 /* TODO (low): check if this is still required */; 6374 /* timeout is handled by the while loop */; 6375 return 0;; 6376 } else if (err == WSAECONNABORTED) {; 6377 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:184866,timeout,timeout,184866,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['timeout'],['timeout']
Safety,"ponent"", -0.1337, -10.0, -0.1); expo = ROOT.RooExponential(""expo"", ""A falling exponential function"", x, tau); ; # Define the sidebands (e.g. background regions); x.setRange(""full"", 1, 30); x.setRange(""left"", 1, 10); x.setRange(""right"", 20, 30); ; # Generate toy data, and cut out the blinded region.; data = expo.generate(x, 1000); blindedData = data.reduce(CutRange=""left,right""); ; # Kick tau a bit, and run an unbinned fit where the blinded data are missing.; # ----------------------------------------------------------------------------------------------------------; # The fit should be done only in the unblinded regions, otherwise it would try; # to make the model adapt to the empty bins in the blinded region.; tau.setVal(-2.0); expo.fitTo(blindedData, Range=""left,right"", PrintLevel=-1); ; # Clear the ""fitrange"" attribute of the PDF. Otherwise, the fitrange would be; # automatically taken as the NormRange() for plotting. We want to avoid this,; # because the point of this tutorial is to show what can go wrong when the; # NormRange() is not specified.; expo.removeStringAttribute(""fitrange""); ; ; # Here we will plot the results; canvas = ROOT.TCanvas(""canvas"", ""canvas"", 800, 600); canvas.Divide(2, 1); ; ; # Wrong:; # ----------------------------------------------------------------------------------------------------------; # Plotting each slice on its own normalises the PDF over its plotting range. For the full curve, that means; # that the blinded region where data is missing is included in the normalisation calculation. The PDF therefore; # comes out too low, and doesn't match up with the slices in the side bands, which are normalised to ""their"" data.; ; print(""Now plotting with unique normalisation for each slice.\n""); canvas.cd(1); plotFrame = x.frame(Title=""Wrong: Each slice normalised over its plotting range""); ; # Plot only the blinded data, and then plot the PDF over the full range as well as both sidebands; blindedData.plotOn(plotFrame); expo.plotOn(plotFrame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html:1860,avoid,avoid,1860,doc/master/rf212__plottingInRanges__blinding_8py.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html,1,['avoid'],['avoid']
Safety,"poses only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:13520,timeout,timeout,13520,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,3,['timeout'],['timeout']
Safety,"powerlaw);; ; // To get rid of the binning effects in the general case, one can use the; // IntegrateBins() command argument. Now, the pdf is not evaluated at the; // bin centers, but numerically integrated over each bin and divided by the; // bin width. The parameter for IntegrateBins() is the required precision; // for the numeric integrals. This is computationally expensive, but the; // bias is now not a problem anymore.; std::unique_ptr<RooFitResult> fit5{; powerlaw.fitTo(*powerlawData, IntegrateBins(1e-3), Save(), PrintLevel(-1), SumW2Error(false))};; fit5->Print();; ; // Improving numerical stability; // -----------------------------; ; // There is one more problem with binned fits that is related to the binning; // effects because often, a binned fit is affected by both problems.; //; // The issue is numerical stability for fits with a greatly different number; // of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; // the NLL, where \f[n\f] is the number of observations in the bin, and; // \f[p\f] the predicted probability to have an event in that bin. The; // difference in the logarithms for each bin is small, but the difference in; // \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; // lots of numerical precision is lost for the bins with less events.; ; // We can study this with the example of an exponential plus a Gaussian. The; // Gaussian is only a faint signal in the tail of the exponential where; // there are not so many events. And we can't afford any precision loss for; // these bins, otherwise we can't fit the Gaussian.; ; x.setBins(100); // It's not about binning effects anymore, so reset the number of bins.; ; RooRealVar mu{""mu"", ""mu"", 3.0, 0.1, 5.1};; RooRealVar sigma{""sigma"", ""sigma"", 0.5, 0.01, 5.0};; RooGaussian gauss{""gauss"", ""gauss"", x, mu, sigma};; ; RooRealVar nsig{""nsig"", ""nsig"", 10000, 0, 1e9};; RooRealVar nbkg{""nbkg"", ""nbkg"", 10000000, 0, 1e9};; RooRealVar frac{""frac"", ""frac"", nsig.getVal() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:6304,predict,predicted,6304,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['predict'],['predicted']
Safety,"practical applications of MVAs correlations are present. ; Linear correlations, measured from the training sample, can be taken into account in a straightforward manner through the square-root of the covariance matrix. The square-root of a matrix \( C \) is the matrix \( C′ \) that multiplied with itself yields \( C \): \( C \)= \( C′C′ \). We compute the square-root matrix (SQM) by means of diagonalising ( \( D \)) the covariance matrix:. \[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \]. and the linear transformation of the linearly correlated into the uncorrelated variables space is then given by multiplying the measured variable tuple by the inverse of the SQM. Note that these transformations are performed for both signal and background separately, since the correlation pattern is not the same in the two samples.; The above diagonalisation is complete for linearly correlated, Gaussian distributed variables only. In real-world examples this is not often the case, so that only little additional information may be recovered by the diagonalisation procedure. In these cases, non-linear methods must be applied. ; Definition at line 61 of file MethodLikelihood.h. Public Member Functions;  MethodLikelihood (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodLikelihood (DataSetInfo &theData, const TString &theWeightFile);  construct likelihood references from file ;  ; virtual ~MethodLikelihood ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to XML ;  ; const Ranking * CreateRanking ();  computes ranking of input variables ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns the likelihood estimator for signal fill a new Likelihood branch into the testTree ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  FDA can handle classification with 2 classes. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html:2890,recover,recovered,2890,doc/master/classTMVA_1_1MethodLikelihood.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html,1,['recover'],['recovered']
Safety,"press is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of compress. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; cout << ""Error opening file"" << endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile.Recover: 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFile.html:27504,detect,detected,27504,root/html534/TFile.html,https://root.cern,https://root.cern/root/html534/TFile.html,2,"['Recover', 'detect']","['Recovery', 'detected']"
Safety,"press is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of compress. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; cout << ""Error opening file"" << endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile::Recover 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFile.html:26821,detect,detected,26821,root/html530/TFile.html,https://root.cern,https://root.cern/root/html530/TFile.html,4,"['Recover', 'detect']","['Recovery', 'detected']"
Safety,"preter will execute command from Notify(). Bool_t CheckTimer(const TTime& now); Check if timer timed out. Bool_t Notify(); Notify when timer times out. The timer is always reset. To stop; the timer call TurnOff(). void Reset(); Reset the timer. void SetCommand(const char* command); Set the interpreter command to be executed at time out. Removes the; object to be notified (if it was set). void SetObject(TObject* object); Set the object to be notified at time out. Removes the command to; be executed (if it was set). void SetInterruptSyscalls(Bool_t set = kTRUE); When the argument is true the a-synchronous timer (SIGALRM) signal; handler is set so that interrupted syscalls will not be restarted; by the kernel. This is typically used in case one wants to put a; timeout on an I/O operation. By default interrupted syscalls will; be restarted. void Start(Long_t milliSec = -1, Bool_t singleShot = kFALSE); Starts the timer with a milliSec timeout. If milliSec is 0; then the timeout will be the minimum timeout (see TSystem::ESysConstants,; i.e. 10 ms), if milliSec is -1 then the time interval as previously; specified (in ctor or SetTime()) will be used.; If singleShot is kTRUE, the timer will be activated only once,; otherwise it will continue until it is stopped.; See also TurnOn(), Stop(), TurnOff(). void TurnOff(); Remove timer from system timer list. This requires that a timer; has been placed in the system timer list (using TurnOn()).; If a TTimer subclass is placed on another list, override TurnOff() to; remove the timer from the correct list. void TurnOn(); Add the timer to the system timer list. If a TTimer subclass has to be; placed on another list, override TurnOn() to add the timer to the correct; list. void SingleShot(Int_t milliSec, const char* receiver_class, void* receiver, const char* method); This static function calls a slot after a given time interval.; Created internal timer will be deleted after that. TTimer(const TTimer& ). TTimer& operator=(const TTimer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTimer.html:13560,timeout,timeout,13560,root/html528/TTimer.html,https://root.cern,https://root.cern/root/html528/TTimer.html,6,['timeout'],['timeout']
Safety,"procedure. Some branches may have buffers holding many entries. If fAutoSave is negative, AutoSave is automatically called by TTree::Fill when the number of bytes generated since the previous AutoSave is greater than -fAutoSave bytes. If fAutoSave is positive, AutoSave is automatically called by TTree::Fill every N entries. This function may also be invoked by the user. Each AutoSave generates a new key on the file. Once the key with the tree header has been written, the previous cycle (if any) is deleted.; Note that calling TTree::AutoSave too frequently (or similarly calling TTree::SetAutoSave with a small value) is an expensive operation. You should make tests for your own application to find a compromise between speed and the quantity of information you may loose in case of a job crash.; In case your program crashes before closing the file holding this tree, the file will be automatically recovered when you will connect the file in UPDATE mode. The Tree will be recovered at the status corresponding to the last AutoSave.; if option contains ""SaveSelf"", gDirectory->SaveSelf() is called. This allows another process to analyze the Tree while the Tree is being filled.; if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of bytes is null, an error has occurred while writing the header to the file. How to write a Tree in one process and view it from another process; The following two scripts illustrate how to do this. The script treew.C is executed by process1, treer.C by process2; script treew.C: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:75709,recover,recovered,75709,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['recover'],['recovered']
Safety,"process a command line.; 2411///; 2412/// If the command is executed and the error is 0, then the return value; 2413/// is the int value corresponding to the result of the executed command; 2414/// (float and double return values will be truncated).; 2415///; 2416 ; 2417// Method for handling the interpreter exceptions.; 2418// the MetaProcessor is passing in as argument to teh function, because; 2419// cling::Interpreter::CompilationResult is a nested class and it cannot be; 2420// forward declared, thus this method cannot be a static member function; 2421// of TCling.; 2422 ; 2423static int HandleInterpreterException(cling::MetaProcessor* metaProcessor,; 2424 const char* input_line,; 2425 cling::Interpreter::CompilationResult& compRes,; 2426 cling::Value* result); 2427{; 2428 try {; 2429 return metaProcessor->process(input_line, compRes, result);; 2430 }; 2431 catch (cling::InterpreterException& ex); 2432 {; 2433 Error(""HandleInterpreterException"", ""%s\n%s"", ex.what(), ""Execution of your code was aborted."");; 2434 ex.diagnose();; 2435 compRes = cling::Interpreter::kFailure;; 2436 }; 2437 return 0;; 2438}; 2439 ; 2440////////////////////////////////////////////////////////////////////////////////; 2441 ; 2442bool TCling::DiagnoseIfInterpreterException(const std::exception &e) const; 2443{; 2444 if (auto ie = dynamic_cast<const cling::InterpreterException*>(&e)) {; 2445 ie->diagnose();; 2446 return true;; 2447 }; 2448 return false;; 2449}; 2450 ; 2451////////////////////////////////////////////////////////////////////////////////; 2452 ; 2453Longptr_t TCling::ProcessLine(const char* line, EErrorCode* error/*=0*/); 2454{; 2455 // Copy the passed line, it comes from a static buffer in TApplication; 2456 // which can be reentered through the Cling evaluation routines,; 2457 // which would overwrite the static buffer and we would forget what we; 2458 // were doing.; 2459 //; 2460 TString sLine(line);; 2461 if (strstr(line,fantomline)) {; 2462 // End-Of-Line action; 2463",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:94381,abort,aborted,94381,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['abort'],['aborted']
Safety,"progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.h 40088 2011-06-30 15:10:06Z bellen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionQueryFrame.html:21863,abort,aborted,21863,root/html532/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html532/TSessionQueryFrame.html,1,['abort'],['aborted']
Safety,"protected . implementation of eq. ; 7.17 in Hastie,Tibshirani & Friedman book this is the covariance between the estimated response yhat and the true value y. NOT REALLY SURE IF THIS IS CORRECT! — THIS IS NOT USED — ; Definition at line 925 of file RuleFitParams.cxx. ◆ Penalty(). Double_t TMVA::RuleFitParams::Penalty ; (; ); const. This is the ""lasso"" penalty To be used for regression. ; — NOT USED — ; Definition at line 356 of file RuleFitParams.cxx. ◆ Risk() [1/2]. Double_t TMVA::RuleFitParams::Risk ; (; UInt_t ; ind1, . UInt_t ; ind2, . Double_t ; neff . ); const. risk assessment ; Definition at line 314 of file RuleFitParams.cxx. ◆ Risk() [2/2]. Double_t TMVA::RuleFitParams::Risk ; (; UInt_t ; ind1, . UInt_t ; ind2, . Double_t ; neff, . UInt_t ; itau . ); const. risk assessment for tau model <itau> ; Definition at line 334 of file RuleFitParams.cxx. ◆ RiskPath(). Double_t TMVA::RuleFitParams::RiskPath ; (; ); const. inline . Definition at line 108 of file RuleFitParams.h. ◆ RiskPerf() [1/2]. Double_t TMVA::RuleFitParams::RiskPerf ; (; ); const. inline . Definition at line 109 of file RuleFitParams.h. ◆ RiskPerf() [2/2]. Double_t TMVA::RuleFitParams::RiskPerf ; (; UInt_t ; itau); const. inline . Definition at line 110 of file RuleFitParams.h. ◆ RiskPerfTst(). UInt_t TMVA::RuleFitParams::RiskPerfTst ; (; ). Estimates the error rate with the current set of parameters. ; using the <Perf> subsample. Return the tau index giving the lowest error ; Definition at line 1201 of file RuleFitParams.cxx. ◆ SetGDErrScale(). void TMVA::RuleFitParams::SetGDErrScale ; (; Double_t ; s). inline . Definition at line 85 of file RuleFitParams.h. ◆ SetGDNPathSteps(). void TMVA::RuleFitParams::SetGDNPathSteps ; (; Int_t ; np). inline . Definition at line 65 of file RuleFitParams.h. ◆ SetGDPathStep(). void TMVA::RuleFitParams::SetGDPathStep ; (; Double_t ; s). inline . Definition at line 68 of file RuleFitParams.h. ◆ SetGDTau(). void TMVA::RuleFitParams::SetGDTau ; (; Double_t ; t). inli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:16986,Risk,RiskPerf,16986,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['Risk'],['RiskPerf']
Safety,"provided; 3013 // by a user provided TClassGenerator. We have no way of knowing whether; 3014 // those do (or even can) behave the same way as the ROOT dictionary and; 3015 // have the 'dictionary is now available for use' step informs the existing; 3016 // TClass that their dictionary is now available.; 3017 ; 3018 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3019 load = kTRUE;; 3020 }; 3021 ; 3022 if (TClassEdit::IsArtificial(name)) {; 3023 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3024 // from an already normalized name for the purpose of supporting schema evolution.; 3025 // There is no dictionary or interpreter information about this kind of class, the only; 3026 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3027 // auto-loading or auto-parsing based on the scope of the name.; 3028 return cl;; 3029 }; 3030 ; 3031 // To avoid spurious auto parsing, let's check if the name as-is is; 3032 // known in the TClassTable.; 3033 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3034 if (dict) {; 3035 // The name is normalized, so the result of the first search is; 3036 // authoritative.; 3037 if (!cl && !load) return nullptr;; 3038 ; 3039 TClass *loadedcl = (dict)();; 3040 if (loadedcl) {; 3041 loadedcl->PostLoadCheck();; 3042 return loadedcl;; 3043 }; 3044 ; 3045 // We should really not fall through to here, but if we do, let's just; 3046 // continue as before ...; 3047 }; 3048 ; 3049 std::string normalizedName;; 3050 Bool_t checkTable = kFALSE;; 3051 ; 3052 if (!cl) {; 3053 {; 3054 TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; 3055 TClassEdit::GetNormalizedName(normalizedName, name);; 3056 }; 3057 // Try the normalized name.; 3058 if (normalizedName != name) {; 3059 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(normalizedName.c_str());; 3060 ; 3061 if (cl) {; 3062 if (cl->IsLoaded() || cl->TestBit(kUnloa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:114260,avoid,avoid,114260,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avoid'],['avoid']
Safety,"provided; 3080 // by a user provided TClassGenerator. We have no way of knowing whether; 3081 // those do (or even can) behave the same way as the ROOT dictionary and; 3082 // have the 'dictionary is now available for use' step informs the existing; 3083 // TClass that their dictionary is now available.; 3084 ; 3085 //we may pass here in case of a dummy class created by TVirtualStreamerInfo; 3086 load = kTRUE;; 3087 }; 3088 ; 3089 if (TClassEdit::IsArtificial(name)) {; 3090 // If there is a @ symbol (followed by a version number) then this is a synthetic class name created; 3091 // from an already normalized name for the purpose of supporting schema evolution.; 3092 // There is no dictionary or interpreter information about this kind of class, the only; 3093 // (undesirable) side-effect of doing the search would be a waste of CPU time and potential; 3094 // auto-loading or auto-parsing based on the scope of the name.; 3095 return cl;; 3096 }; 3097 ; 3098 // To avoid spurious auto parsing, let's check if the name as-is is; 3099 // known in the TClassTable.; 3100 DictFuncPtr_t dict = TClassTable::GetDictNorm(name);; 3101 if (dict) {; 3102 // The name is normalized, so the result of the first search is; 3103 // authoritative.; 3104 if (!cl && !load) return nullptr;; 3105 ; 3106 TClass *loadedcl = (dict)();; 3107 if (loadedcl) {; 3108 loadedcl->PostLoadCheck();; 3109 return loadedcl;; 3110 }; 3111 ; 3112 // We should really not fall through to here, but if we do, let's just; 3113 // continue as before ...; 3114 }; 3115 ; 3116 std::string normalizedName;; 3117 Bool_t checkTable = kFALSE;; 3118 ; 3119 if (!cl) {; 3120 {; 3121 TInterpreter::SuspendAutoLoadingRAII autoloadOff(gInterpreter);; 3122 TClassEdit::GetNormalizedName(normalizedName, name);; 3123 }; 3124 // Try the normalized name.; 3125 if (normalizedName != name) {; 3126 cl = (TClass*)gROOT->GetListOfClasses()->FindObject(normalizedName.c_str());; 3127 ; 3128 if (cl) {; 3129 if (cl->IsLoaded() || cl->TestBit(kUnloa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:117011,avoid,avoid,117011,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avoid'],['avoid']
Safety,"psMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); Double_tDaxis(const Double_t* pt, const Double_t* dir, Double_t t) const; Double_tDDaxis(const Double_t* pt, const Double_t* dir, Double_t t) const; Double_tDDDaxis(const Double_t* pt, const Double_t* dir, Double_t t) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTorus.html:2607,safe,safe,2607,root/html534/TGeoTorus.html,https://root.cern,https://root.cern/root/html534/TGeoTorus.html,3,['safe'],['safe']
Safety,"pshot of global observables. ;  ; const TNamed * _namePtr = nullptr;  ! De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; std::map< std::string, RooAbsData * > _ownedComponents;  Owned external components. ;  ; RooArgSet _vars;  Dimensions of this data set. ;  ; StorageType storageType;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from RooDirItem; TDirectory * _dir {nullptr};  ! Associated directory ;  . Private Member Functions; void _adjustBinning (RooRealVar &theirVar, const TAxis &axis, RooRealVar *ourVar, Int_t *offset);  Helper doing the actual work of adjustBinning(). ;  ; VarInfo const & getVarInfo ();  Return reference to VarInfo struct with cached histogram variable information that is frequently used for histogram weights retrieval. ;  ; void initializeAsymErrArrays () const;  ; void interpolateLinear (double *output, std::span< const double > xVals, bool correctForBinSize, bool cdfBoundaries);  A vectorized version of interpolateDim for boundary safe linear interpolation of one dimensional histograms. ;  ; void interpolateQuadratic (double *output, std::span< const double > xVals, bool correctForBinSize, bool cdfBoundaries);  A vectorized version of interpolateDim for boundary safe quadratic interpolation of one dimensional histograms. ;  ; void registerWeightArraysToDataStore () const;  Hand over pointers to our weight arrays to the data store implementation. ;  ; double weightInterpolated (const RooArgSet &bin, int intOrder, bool correctForBinSize, bool cdfBoundaries);  Return the weight at given coordinates with interpolation. ;  . Static Private Member Functions; static std::unique_ptr< RooAbsDataStore > makeDefaultDataStore (RooStringView name, RooStringView title, RooArgSet const &vars);  . Private Attributes; std::vector< double > _interpolationBuffer;  ! Buffer to contain values used for weight interpolation ;  ; VarInfo _varInfo;  ! ;  . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:40650,safe,safe,40650,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['safe'],['safe']
Safety,"pt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSocket.html:15547,timeout,timeout,15547,root/html534/TXSocket.html,https://root.cern,https://root.cern/root/html534/TXSocket.html,1,['timeout'],['timeout']
Safety,"ptRootMapFileName,; 5116 rootmapLibName,; 5117 classesDefsList,; 5118 classesNamesForRootmap,; 5119 nsNames,; 5120 typedefsRootmapLines,; 5121 enumNames,; 5122 varNames,; 5123 headersClassesMap,; 5124 headersToIgnore);; 5125 ; 5126 if (0 != rootclingRetCode) return 1;; 5127 }; 5128 ; 5129 if (genreflex::verbose); 5130 tmpCatalog.dump();; 5131 ; 5132 // Manually call end of translation unit because we never call the; 5133 // appropriate deconstructors in the interpreter. This writes out the C++; 5134 // module file that we currently generate.; 5135 {; 5136 cling::Interpreter::PushTransactionRAII RAII(&interp);; 5137 CI->getSema().getASTConsumer().HandleTranslationUnit(CI->getSema().getASTContext());; 5138 }; 5139 ; 5140 // Add the warnings; 5141 rootclingRetCode += ROOT::TMetaUtils::GetNumberOfErrors();; 5142 ; 5143 // make sure the file is closed before committing; 5144 fileout.close();; 5145 ; 5146 // Before returning, rename the files if no errors occurred; 5147 // otherwise clean them to avoid remnants (see ROOT-10015); 5148 if(rootclingRetCode == 0) {; 5149 rootclingRetCode += tmpCatalog.commit();; 5150 } else {; 5151 tmpCatalog.clean();; 5152 }; 5153 ; 5154 return rootclingRetCode;; 5155 ; 5156}; 5157 ; 5158namespace genreflex {; 5159 ; 5160////////////////////////////////////////////////////////////////////////////////; 5161/// Loop on arguments: stop at the first which starts with -; 5162 ; 5163 unsigned int checkHeadersNames(std::vector<std::string> &headersNames); 5164 {; 5165 unsigned int numberOfHeaders = 0;; 5166 for (std::vector<std::string>::iterator it = headersNames.begin();; 5167 it != headersNames.end(); ++it) {; 5168 const std::string headername(*it);; 5169 if (ROOT::TMetaUtils::IsHeaderName(headername)) {; 5170 numberOfHeaders++;; 5171 } else {; 5172 ROOT::TMetaUtils::Warning(nullptr,; 5173 ""*** genreflex: %s is not a valid header name (.h and .hpp extensions expected)!\n"",; 5174 headername.c_str());; 5175 }; 5176 }; 5177 return numberOfHeaders;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:208809,avoid,avoid,208809,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['avoid'],['avoid']
Safety,"ption = """"); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Reset the address of the branch. void ResetCount(); Static function resetting fgCount. void SetAddress(void* add); Set address of this branch. void SetAutoDelete(Bool_t autodel = kTRUE); Set the automatic delete bit. This bit is used by TBranchObject::ReadBasket to decide if an object; referenced by a TBranchObject must be deleted or not before reading; a new entry. If autodel is kTRUE, this existing object will be deleted, a new object; created by the default constructor, then read from disk by the streamer. If autodel is kFALSE, the existing object is not deleted. Root assumes; that the user is taking care of deleting any internal object or array; (this can be done in the streamer). void SetBasketSize(Int_t buffsize); Set the basket size; The function makes sure that the basket size is greater than fEntryOffsetlen. void SetBufferAddress(TBuffer* entryBuffer); -- Set address of this branch directly from a TBuffer to avoid streaming. Note: We do not take ownership of the buffer. void SetCompressionAlgorithm(Int_t algorithm = 0). void SetCompressionLevel(Int_t level = 1). void SetCompressionSettings(Int_t settings = 1). void SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); Update the default value for the branch's fEntryOffsetLen if and only if; it was already non zero (and the new value is not zero); If updateExisting is true, also update all the existing branches. void SetEntries(Long64_t entries); Set the number of entries in this branch. void SetFile(TFile* file = 0); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make the; b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranch.html:25983,avoid,avoid,25983,root/html530/TBranch.html,https://root.cern,https://root.cern/root/html530/TBranch.html,1,['avoid'],['avoid']
Safety,"ption = """"); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Reset the address of the branch. void ResetCount(); Static function resetting fgCount. void SetAddress(void* add); Set address of this branch. void SetAutoDelete(Bool_t autodel = kTRUE); Set the automatic delete bit. This bit is used by TBranchObject::ReadBasket to decide if an object; referenced by a TBranchObject must be deleted or not before reading; a new entry. If autodel is kTRUE, this existing object will be deleted, a new object; created by the default constructor, then read from disk by the streamer. If autodel is kFALSE, the existing object is not deleted. Root assumes; that the user is taking care of deleting any internal object or array; (this can be done in the streamer). void SetBasketSize(Int_t buffsize); Set the basket size; The function makes sure that the basket size is greater than fEntryOffsetlen. void SetBufferAddress(TBuffer* entryBuffer); -- Set address of this branch directly from a TBuffer to avoid streaming. Note: We do not take ownership of the buffer. void SetCompressionLevel(Int_t level = 1); *-*-*-*-*-*-*-*Set the branch/subbranches compression level; *-* ============================================. void SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); Update the default value for the branch's fEntryOffsetLen if and only if; it was already non zero (and the new value is not zero); If updateExisting is true, also update all the existing branches. void SetEntries(Long64_t entries); Set the number of entries in this branch. void SetFile(TFile* file = 0); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranch.html:23604,avoid,avoid,23604,root/html528/TBranch.html,https://root.cern,https://root.cern/root/html528/TBranch.html,1,['avoid'],['avoid']
Safety,"ption = """"); Reset a Branch. Existing buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Reset the address of the branch. void ResetCount(); Static function resetting fgCount. void SetAddress(void* add); Set address of this branch. void SetAutoDelete(Bool_t autodel = kTRUE); Set the automatic delete bit. This bit is used by TBranchObject::ReadBasket to decide if an object; referenced by a TBranchObject must be deleted or not before reading; a new entry. If autodel is kTRUE, this existing object will be deleted, a new object; created by the default constructor, then read from disk by the streamer. If autodel is kFALSE, the existing object is not deleted. Root assumes; that the user is taking care of deleting any internal object or array; (this can be done in the streamer). void SetBasketSize(Int_t buffsize); Set the basket size; The function makes sure that the basket size is greater than fEntryOffsetlen. void SetBufferAddress(TBuffer* entryBuffer); -- Set address of this branch directly from a TBuffer to avoid streaming. Note: We do not take ownership of the buffer. void SetCompressionLevel(Int_t level = 1); *-*-*-*-*-*-*-*Set the branch/subbranches compression level; *-* ============================================. void SetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); Update the default value for the branch's fEntryOffsetLen if and only if; it was already non zero (and the new value is not zero); If updateExisting is true, also update all the existing branches. void SetEntries(Long64_t entries); Set the number of entries in this branch. void SetFile(TFile* file); Set file where this branch writes/reads its buffers.; By default the branch buffers reside in the file where the; Tree was created.; If the file name where the tree was created is an absolute; path name or an URL (e.g. /castor/... or root://host/...); and if the fname is not an absolute path name or an URL then; the path of the tree file is prepended to fname to make",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranch.html:22603,avoid,avoid,22603,root/html526/TBranch.html,https://root.cern,https://root.cern/root/html526/TBranch.html,1,['avoid'],['avoid']
Safety,"ption = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoBoolNode::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceToPrimitive(Int_t px, Int_t py); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGeoBoolNode::EGeoBoolTypeGetBooleanOperator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TGeoMatrix*TGeoBoolNode::GetLeftMatrix() const; TGeoShape*TGeoBoolNode::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoIntersection.html:2557,safe,safe,2557,root/html532/TGeoIntersection.html,https://root.cern,https://root.cern/root/html532/TGeoIntersection.html,3,['safe'],['safe']
Safety,"ption = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSlave.html:11374,timeout,timeout,11374,root/html602/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSlave.html,1,['timeout'],['timeout']
Safety,"ption =""*"" includes all sub-branches of this branch too. ;  ; bool IsAutoDelete () const;  Return true if an existing object in a TBranchObject must be deleted. ;  ; virtual void KeepCircular (Long64_t maxEntries);  keep a maximum of fMaxEntries in memory ;  ; virtual Int_t LoadBaskets ();  Baskets associated to this branch are forced to be in memory. ;  ; void PrintCacheInfo () const;  Print the information we have about which basket is currently cached and whether they have been 'used'/'read' from the cache. ;  ; virtual void ReadBasket (TBuffer &b);  Loop on all leaves of this branch to read Basket buffer. ;  ; virtual void Refresh (TBranch *b);  Refresh this branch using new information in b This function is called by TTree::Refresh. ;  ; virtual void ResetAddress ();  Reset the address of the branch. ;  ; virtual void ResetReadEntry ();  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; virtual void SetEntries (Long64_t entries);  Set the number of entries in this branch. ;  ; virtual void SetEntryOffsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchClones.html:8155,avoid,avoid,8155,doc/master/classTBranchClones.html,https://root.cern,https://root.cern/doc/master/classTBranchClones.html,1,['avoid'],['avoid']
Safety,"ption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(). PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. » Last changed: Fri Nov 26 14:27:24 2010 » Last generated: 2010-11-26 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPySelector.html:9590,Abort,Abort,9590,root/html528/TPySelector.html,https://root.cern,https://root.cern/root/html528/TPySelector.html,1,['Abort'],['Abort']
Safety,"ption gnuinstall also sets RPATH in librries and executables in installation directory; Various fixes for MacOS X 10.11 ROOT-7680. Core. Fix thread safety of the creation of TMethodCall from a TFunction.; Fix dictionary generation of STL collection involving one of ROOT’s core classes when the user header contains only a forward declaration of the class [ROOT-7695]. Bugs. [ROOT-7680] - Can’t build v6-02-12 on MacOS X 10.11; [ROOT-7695] - Segmentation violation in rootcint; [ROOT-7709] - PyROOT not functional with system-default Python version on MacOS X 10.11; [ROOT-7715] - Building ROOT with CMake not in my PATH fails. Release 6.04/08; Build. Add –disable-search-usrlocal to configure/make to be able to avoid conflict with incompatible installation (e.g. homebrew).; Add /opt/X11 to configure/make search for include files and libraries.; Updates PCRE to 8.37 (current upstream version) which can detect PPC64LE machine.; Fail cmake configuration if the specified CMAKE_BUILD_TYPE is unknown; Fix RPATH for MacOSX (El Capitan) to avoid building with -Drpath=ON. The default uses rpath=@loader_path/../lib. Core. Add missing protection when creating new StreamerInfo.; Add accessor functions and functionality needed by CMS event display.; Do not delete resource when replaceing default TApplication. Interpreter. Prevent crash in expressions which contain use undefined identifier ROOT-7737; Disable unnecessary code during dictionary generation that triggered problem due to the lack of support for template parameter packs ROOT-7708; Add suport in the type and name normalization routine for template parameter packs ROOT-7708. IO. For backward compatibility with ROOT5, allow to define IO constructors with the signature MyClass::MyClass(void&) where void is a forward declared type.; In TBuffer shrink buffers when requested. Histograms. Fix interval calculation in Divide for the Poisson ratio case. Minuit. Make function pointer held by TMinuitMinimize thread local. Patches Release 6.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:32969,avoid,avoid,32969,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['avoid'],['avoid']
Safety,"ption="""") const;  Return total number of zip bytes in the branch if option =""*"" includes all sub-branches of this branch too. ;  ; bool IsAutoDelete () const;  Return true if an existing object in a TBranchObject must be deleted. ;  ; virtual void KeepCircular (Long64_t maxEntries);  keep a maximum of fMaxEntries in memory ;  ; virtual Int_t LoadBaskets ();  Baskets associated to this branch are forced to be in memory. ;  ; void PrintCacheInfo () const;  Print the information we have about which basket is currently cached and whether they have been 'used'/'read' from the cache. ;  ; virtual void ReadBasket (TBuffer &b);  Loop on all leaves of this branch to read Basket buffer. ;  ; virtual void Refresh (TBranch *b);  Refresh this branch using new information in b This function is called by TTree::Refresh. ;  ; virtual void ResetReadEntry ();  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; virtual void SetEntries (Long64_t entries);  Set the number of entries in this branch. ;  ; virtual void SetEntryOffsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:13342,avoid,avoid,13342,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['avoid'],['avoid']
Safety,"ption="""") overrideSave a primitive as a C++ statement(s) on output stream ""out"".; TGeoGtra::DistFromInside_vvoid DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override; TGeoGtra::TGeoGtraTGeoGtra(); TGeoGtra::TGeoGtraTGeoGtra(const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoGtra::GetMakeRuntimeShapeTGeoShape * GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *mat) const override; TGeoGtra::GetTwistAngleDouble_t GetTwistAngle() constDefinition TGeoArb8.h:171; TGeoGtra::SafetyDouble_t Safety(const Double_t *point, Bool_t in=kTRUE) const override; TGeoGtra::Safety_vvoid Safety_v(const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override; TGeoGtra::DistFromOutside_vvoid DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override; TGeoGtra::DistFromOutsideDouble_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override; TGeoGtra::~TGeoGtra~TGeoGtra() override; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoShape::Bigstatic Double_t Big()Definition TGeoShape.h:87; TGeoTrapDefinition TGeoArb8.h:96; TGeoTrap::~TGeoTrap~TGeoTrap() override; TGeoTrap::TGeoTrapTGeoTrap(const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoTrap::fTl2Double_t fTl2Definition TGeoArb8.h:107; TGeoTrap::GetTl1Double_t GetTl1() constDefinition TGeoArb8.h:134; TGeoTrap::GetPhiDouble_t GetPhi() constDefinition TGeoArb8.h:131; TGeoTrap::fBl2Double_t fBl2Definition TGeoArb8.h:1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoArb8_8h_source.html:16437,Safe,Safety,16437,doc/master/TGeoArb8_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoArb8_8h_source.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:9400,Recover,Recover,9400,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,10,"['Recover', 'recover']","['Recover', 'recover']"
Safety,"ption_t* option = """") constMENU ; virtual Int_tTProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLite(TProof* proof = 0); TProofPlayerLite(const TProofPlayerLite&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLite.html:11023,abort,abort,11023,root/html602/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLite.html,1,['abort'],['abort']
Safety,"ption_t* option = """") constMENU ; virtual Int_tTProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSuperMaster.html:11433,abort,abort,11433,root/html602/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSuperMaster.html,1,['abort'],['abort']
Safety,"ption_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. UShort_tfDetIdCustom detector id.; Int_tfEvaLabelLabel of primary particle, ancestor of label.; Int_tfLabelLabel of particle that produced the hit.; UShort_tfSubdetIdCustom sub-detector id.; TEveVectorfVHit position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveMCTrack& operator=(const TEveHit& ); { *((TParticle*)this) = p; return *this; }. TEveHit(); Float_t charge; probably specific. {}. virtual ~TEveHit(); {}. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveHit.html:5092,detect,detector,5092,root/html534/TEveHit.html,https://root.cern,https://root.cern/root/html534/TEveHit.html,2,['detect'],['detector']
Safety,"ptiveKDE; static TMVA::KDEKernel::EKernelTypekNone; static TMVA::KDEKernel::EKernelBorderkSampleMirror. private:. Float_tfFineFactorfine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function; TH1F*fFirstIterHisthistogram to be filled in the hidden iteration; Bool_tfHiddenIterationDefines if whats currently running is the; TH1F*fHistcopy of input histogram; TMVA::KDEKernel::EKernelIterfIteriteration number; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects; TF1*fKernel_integthe integral of the Kernel function; TMVA::MsgLogger*fLoggermessage logger; Float_tfLowerEdgethe lower edge of the PDF; Float_tfSigmaWidth of the Kernel function; TH1F*fSigmaHistcontains the Sigmas Widths for adaptive KDE; Float_tfUpperEdgethe upper edge of the PDF. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); constructor; sanity check. ~KDEKernel(); destructor. void SetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); fIter == 1 ---> nonadaptive KDE; fIter == 2 ---> adaptive KDE. Float_t GetBinKernelIntegral(Float_t lowr, Float_t highr, Float_t mean, Int_t binnum); calculates the integral of the Kernel. KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.). const char* GetName() const; modified name (remove TMVA::). { return ""KDEKernel""; }. » Author: Asen Christov » Copyright (c) 2007: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__KDEKernel.html:2489,sanity check,sanity check,2489,root/html604/TMVA__KDEKernel.html,https://root.cern,https://root.cern/root/html604/TMVA__KDEKernel.html,1,['sanity check'],['sanity check']
Safety,"ptiveKDE; static TMVA::KDEKernel::EKernelTypekNone; static TMVA::KDEKernel::EKernelBorderkSampleMirror. private:. Float_tfFineFactorfine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function; TH1F*fFirstIterHisthistogram to be filled in the hidden iteration; Bool_tfHiddenIterationDefines if whats currently running is the; TH1F*fHistcopy of input histogram; TMVA::KDEKernel::EKernelIterfIteriteration number; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects; TF1*fKernel_integthe integral of the Kernel function; TMVA::MsgLogger*fLoggermessage logger; Float_tfLowerEdgethe lower edge of the PDF; Float_tfSigmaWidth of the Kernel function; TH1F*fSigmaHistcontains the Sigmas Widths for adaptive KDE; Float_tfUpperEdgethe upper edge of the PDF. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); constructor; sanity check. ~KDEKernel(); destructor. void SetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); fIter == 1 ---> nonadaptive KDE; fIter == 2 ---> adaptive KDE. Float_t GetBinKernelIntegral(Float_t lowr, Float_t highr, Float_t mean, Int_t binnum); calculates the integral of the Kernel. KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.). const char* GetName() const; modified name (remove TMVA::). { return ""KDEKernel""; }. » Author: Asen Christov » Copyright (c) 2007: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__KDEKernel.html:2481,sanity check,sanity check,2481,root/html602/TMVA__KDEKernel.html,https://root.cern,https://root.cern/root/html602/TMVA__KDEKernel.html,1,['sanity check'],['sanity check']
Safety,"ptr = 0); virtual voidTSystem::DoBeep(Int_t = -1, Int_t = -1) const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual const char*TSystem::ExpandFileName(const char* fname); virtual const char*FindDynamicLibrary(TString& lib, Bool_t quiet = kFALSE); TSystem*TSystem::FindHelper(const char* path, void* dirptr = 0); TString&TSystem::GetLastErrorString(); const TString&TSystem::GetLastErrorString() const; virtual const char*GetLinkedLibraries(); voidTObject::MakeZombie(); static const char*TSystem::StripOffProto(const char* path, const char* proto); static intUnixFilestat(const char* path, FileStat_t& buf); static intUnixFSstat(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); static const char*UnixGetdirentry(void* dir); static const char*UnixHomedirectory(const char* user = 0); static voidUnixIgnoreSignal(ESignals sig, Bool_t ignore); static intUnixMakedir(const char* name); static Long64_tUnixNow(); static void*UnixOpendir(const char* name); static intUnixRecv(int sock, void* buf, int len, int flag); static voidUnixResetSignal(ESignals sig); static voidUnixResetSignals(); static intUnixSelect(Int_t nfds, TFdSet* readready, TFdSet* writeready, Long_t timeout); static intUnixSend(int sock, const void* buf, int len, int flag); static intUnixSetitimer(Long_t ms); static voidUnixSigAlarmInterruptsSyscalls(Bool_t set); static voidUnixSignal(ESignals sig, SigHandler_t h); static const char*UnixSigname(ESignals sig); static intUnixTcpConnect(const char* hostname, int port, int tcpwindowsize); static intUnixTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize); static intUnixUdpConnect(const char* hostname, int port); static intUnixUdpService(int port, int backlog); static intUnixUnixConnect(int port); static intUnixUnixConnect(const char* path); static intUnixUnixService(int port, int backlog); static intUnixUnixService(const char* sockpath, int backlog); static intUnixWaitchild().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnixSystem.html:15709,timeout,timeout,15709,root/html602/TUnixSystem.html,https://root.cern,https://root.cern/root/html602/TUnixSystem.html,2,['timeout'],['timeout']
Safety,"ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Int_tSelect(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tSendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidSetRemoteProtocol(Int_t rproto); voidSetSecContext(TSecContext* ctx); voidSetService(const char* service); voidSetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:5641,timeout,timeout,5641,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,1,['timeout'],['timeout']
Safety,"ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTVirtualPacketizer::SetFailedPackets(TList* list); virtual voidTVirtualPacketizer::SetInitTime(); static voidTObject::SetObjectStat(Bool_t stat); voidTVirtualPacketizer::SetProgressStatus(TProofProgressStatus* st); voidTVirtualPacketizer::SetTotalEntries(Long64_t ent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTVirtualPacketizer::StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPacketizerUnit(TList* slaves, Long64_t num, TList* input, TProofProgressStatus* st = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPacketizerUnit.html:5930,abort,abort,5930,root/html602/TPacketizerUnit.html,https://root.cern,https://root.cern/root/html602/TPacketizerUnit.html,2,['abort'],['abort']
Safety,"put)Imports the content of 'output' in the internal output list.Definition TSelector.cxx:270; TSelector::GetInputListvirtual TList * GetInputList() constDefinition TSelector.h:68; TSelector::fOutputTSelectorList * fOutput! List of objects created during processingDefinition TSelector.h:42; TSelector::fStatusLong64_t fStatusSelector status.Definition TSelector.h:37; TSelector::SlaveBeginvirtual void SlaveBegin(TTree *)Definition TSelector.h:55; TSelector::GetEntryvirtual Int_t GetEntry(Long64_t, Int_t=0)Definition TSelector.h:59; TSelector::Notifybool Notify() overrideThis method must be overridden to handle object notification (the base implementation is no-op).Definition TSelector.h:56; TSelector::SetOptionvirtual void SetOption(const char *option)Definition TSelector.h:64; TSelector::GetStatusvirtual Long64_t GetStatus() constDefinition TSelector.h:58; TSelector::SetInputListvirtual void SetInputList(TList *input)Definition TSelector.h:66; TSelector::Abortvirtual void Abort(const char *why, EAbort what=kAbortProcess)Abort processing.Definition TSelector.cxx:116; TSelector::GetOptionconst char * GetOption() const overrideDefinition TSelector.h:57; TSelector::fObjectTObject * fObject! Current object if processing object (vs. TTree)Definition TSelector.h:40; TSelector::GetOutputListvirtual TList * GetOutputList() constDefinition TSelector.h:69; TSelector::SlaveTerminatevirtual void SlaveTerminate()Definition TSelector.h:70; TSelector::~TSelector~TSelector() overrideSelector destructor.Definition TSelector.cxx:102; TSelector::fAbortEAbort fAbortAbort status.Definition TSelector.h:38; TSelector::ResetAbortvirtual void ResetAbort()Definition TSelector.h:74; TSelector::Beginvirtual void Begin(TTree *)Definition TSelector.h:54; TSelector::Terminatevirtual void Terminate()Definition TSelector.h:71; TSelector::TSelectorTSelector()Default selector ctor.Definition TSelector.cxx:89; TSelector::GetSelectorstatic TSelector * GetSelector(const char *filename)The code in filename i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8h_source.html:7277,Abort,Abortvirtual,7277,doc/master/TSelector_8h_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8h_source.html,3,['Abort'],"['Abort', 'Abortvirtual']"
Safety,"pute the likelihood value. void FindPrediction(int bin, double* fractions, double& Ti, int& k0, double& Aki) const; Function used internally to obtain the template prediction in the individual bins. Double_t GetChisquare() const; Return the likelihood ratio Chi-squared (chi2) for the fit.; The value is computed when the fit is executed successfully.; Chi2 calculation is based on the ""likelihood ratio"" lambda,; lambda = L(y;n) / L(m;n),; where L(y;n) is the likelihood of the fit result <y> describing the data <n>; and L(m;n) is the likelihood of an unknown ""true"" underlying distribution; <m> describing the data <n>. Since <m> is unknown, the data distribution is; used instead,; lambda = L(y;n) / L(n;n).; Note that this ratio is 1 if the fit is perfect. The chi2 value is then; computed according to; chi2 = -2*ln(lambda).; This parameter can be shown to follow a Chi-square distribution. See for; example S. Baker and R. Cousins, ""Clarification of the use of chi-square; and likelihood functions in fits to histograms"", Nucl. Instr. Meth. A221, ; pp. 437-442 (1984). Int_t GetNDF() const; return the number of degrees of freedom in the fit; the fNDF parameter has been previously computed during a fit.; The number of degrees of freedom corresponds to the number of points; used in the fit minus the number of templates. Double_t GetProb() const; return the fit probability. void ComputeChisquareLambda(); Method used internally to compute the likelihood ratio chi2; See the function GetChisquare() for details. TH1* GetMCPrediction(Int_t parm) const; Return the adjusted MC template (Aji) for template (parm).; Note that the (Aji) times fractions only sum to the total prediction; of the fit if all weights are 1. » Last changed: root/hist:$Id: TFractionFitter.h 38775 2011-04-08 08:27:27Z moneta $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFractionFitter.html:19659,predict,prediction,19659,root/html530/TFractionFitter.html,https://root.cern,https://root.cern/root/html530/TFractionFitter.html,1,['predict'],['prediction']
Safety,"pute the likelihood value. void FindPrediction(int bin, double* fractions, double& Ti, int& k0, double& Aki) const; Function used internally to obtain the template prediction in the individual bins. Double_t GetChisquare() const; Return the likelihood ratio Chi-squared (chi2) for the fit.; The value is computed when the fit is executed successfully.; Chi2 calculation is based on the ""likelihood ratio"" lambda,; lambda = L(y;n) / L(m;n),; where L(y;n) is the likelihood of the fit result <y> describing the data <n>; and L(m;n) is the likelihood of an unknown ""true"" underlying distribution; <m> describing the data <n>. Since <m> is unknown, the data distribution is; used instead,; lambda = L(y;n) / L(n;n).; Note that this ratio is 1 if the fit is perfect. The chi2 value is then; computed according to; chi2 = -2*ln(lambda).; This parameter can be shown to follow a Chi-square distribution. See for; example S. Baker and R. Cousins, ""Clarification of the use of chi-square; and likelihood functions in fits to histograms"", Nucl. Instr. Meth. A221, ; pp. 437-442 (1984). Int_t GetNDF() const; return the number of degrees of freedom in the fit; the fNDF parameter has been previously computed during a fit.; The number of degrees of freedom corresponds to the number of points; used in the fit minus the number of templates. Double_t GetProb() const; return the fit probability. void ComputeChisquareLambda(); Method used internally to compute the likelihood ratio chi2; See the function GetChisquare() for details. TH1* GetMCPrediction(Int_t parm) const; Return the adjusted MC template (Aji) for template (parm).; Note that the (Aji) times fractions only sum to the total prediction; of the fit if all weights are 1. » Last changed: root/hist:$Id: TFractionFitter.h 38775 2011-04-08 08:27:27Z moneta $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFractionFitter.html:19659,predict,prediction,19659,root/html532/TFractionFitter.html,https://root.cern,https://root.cern/root/html532/TFractionFitter.html,1,['predict'],['prediction']
Safety,"q += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1301ROOT::EnableImplicitMT();; 1302const unsigned int nSlots = df.GetNSlots();; 1303std::vector<double> sumSqs(nSlots, 0.);; 1304std::vector<unsigned int> ns(nSlots, 0);; 1305 ; 1306df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1307double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1308unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1309std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1310~~~; 1311Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1312 ; 1313 ; 1314\anchor friends; 1315### Dataset joins with friend trees; 1316 ; 1317Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:75545,safe,safe,75545,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['safe'],['safe']
Safety,"q += x*x; }, {""x""});; 1327std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1328~~~; 1329In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1330thread will execute the expression concurrently.; 1331The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1332this is probably too much head-scratch for such a simple operation.; 1333 ; 1334ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1335additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1336guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1337executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1338We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1339~~~{.cpp}; 1340// Thread-safe evaluation of RMS of column ""x"" using ForeachSlot; 1341ROOT::EnableImplicitMT();; 1342const unsigned int nSlots = df.GetNSlots();; 1343std::vector<double> sumSqs(nSlots, 0.);; 1344std::vector<unsigned int> ns(nSlots, 0);; 1345 ; 1346df.ForeachSlot([&sumSqs, &ns](unsigned int slot, double x) { sumSqs[slot] += x*x; ns[slot] += 1; }, {""x""});; 1347double sumSq = std::accumulate(sumSqs.begin(), sumSqs.end(), 0.); // sum all squares; 1348unsigned int n = std::accumulate(ns.begin(), ns.end(), 0); // sum all counts; 1349std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1350~~~; 1351Notice how we created one `double` variable for each processing slot and later merged their results via `std::accumulate`.; 1352 ; 1353 ; 1354\anchor friends; 1355### Dataset joins with friend trees; 1356 ; 1357Vertically concatenating multiple trees that have the same columns (creating a logical dataset with the same col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:77225,safe,safe,77225,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['safe'],['safe']
Safety,"q). void SetMaxDrawQueries(Int_t max). void RestorePreviousQuery(). Int_t AddOutputObject(TObject* obj). void AddOutput(TList* out). void StoreOutput(TList* out). void StoreFeedback(TObject* slave, TList* out). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). void Progress(TProofProgressInfo* ). void Progress(TSlave* , TProofProgressInfo* ). void Feedback(TList* objs). TDrawFeedback * CreateDrawFeedback(TProof* p). void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt). void DeleteDrawFeedback(TDrawFeedback* f). TDSetElement * GetNextPacket(TSlave* slave, TMessage* r). Int_t ReinitSelector(TQueryResult* qr). void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax). Bool_t IsClient() const. EExitStatus GetExitStatus() const. void SetExitStatus(TVirtualProofPlayer::EExitStatus ). Long64_t GetEventsProcessed() const. void AddEventsProcessed(Long64_t ev). TProofProgressStatus* GetProgressStatus() const. void SetDispatchTimer(Bool_t on = kTRUE). void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0). void SetMerging(Bool_t on = kTRUE). Long64_t GetCacheSize(). Int_t GetLearnEntries(). void UpdateProgressInfo(). TVirtualPacketizer * GetPacketizer() const; { return 0; }. void SetOutputFilePath(const char* fp). Int_t SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE). TVirtualProofPlayer * Create(const char* player, TProof* p, TSocket* s = 0). » Author: Fons Rademakers 15/03/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualProofPlayer.html:14776,abort,abort,14776,root/html534/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html534/TVirtualProofPlayer.html,2,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"quals yval.; 4049/// (Calculation is performed with Brent root finding algorithm); 4050 ; 4051double RooAbsReal::findRoot(RooRealVar& x, double xmin, double xmax, double yval); 4052{; 4053 double result(0) ;; 4054 RooBrentRootFinder(RooRealBinding(*this,x)).findRoot(result,xmin,xmax,yval) ;; 4055 return result ;; 4056}; 4057 ; 4058 ; 4059 ; 4060////////////////////////////////////////////////////////////////////////////////; 4061/// Perform a \f$ \chi^2 \f$ fit to given histogram. By default the fit is executed through the MINUIT; 4062/// commands MIGRAD, HESSE in succession; 4063///; 4064/// The following named arguments are supported; 4065///; 4066/// <table>; 4067/// <tr><th> <th> Options to control construction of chi2; 4068/// <tr><td> `Extended(bool flag)` <td> **Only applicable when fitting a RooAbsPdf**. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight.; 4069/// This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; 4070/// - If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events; 4071/// (in RooFit jargon, ""if the pdf can be extended"").; 4072/// - Passing `Extended(true)` when the the pdf makes no prediction on the expected number of events will result in error messages,; 4073/// and the chi2 will fall back to the total data weight to scale the normalized pdf.; 4074/// - There are cases where the fit **must** be done in extended mode. This happens for example when you have a RooAddPdf; 4075/// where the coefficients represent component yields. If the fit is not extended, these coefficients will not be; 4076/// well-defined, as the RooAddPdf always normalizes itself. If you pass `Extended(false)` in such a case, an error will be; 4077/// printed and you'll most likely get garbage results.; 4078/// <tr><td> `Range(const char* name)` <td> Fit only data inside range wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:176097,predict,predicted,176097,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['predict'],['predicted']
Safety,"quence information including 'cached','repeat','write' or 'nodelete'. ;  ; virtual Int_t GetSize () const;  Returns size of this element in bytes. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerArtificial.html:3182,detect,detected,3182,doc/master/classTStreamerArtificial.html,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html,2,['detect'],['detected']
Safety,"r &operator=(const TGeoNavigator &) = delete;; 37 TGeoNode *FindInCluster(Int_t *cluster, Int_t nc);; 38 Int_t GetTouchedCluster(Int_t start, Double_t *point, Int_t *check_list, Int_t ncheck, Int_t *result);; 39 TGeoNode *CrossDivisionCell();; 40 void SafetyOverlaps();; 41 ; 42private:; 43 Double_t fStep; //! step to be done from current point and direction; 44 Double_t fSafety; //! safety radius from current point; 45 Double_t fLastSafety; //! last computed safety radius; 46 Double_t fNormal[3]; //! cosine of incident angle on current checked surface; 47 Double_t fCldir[3]; //! unit vector to current closest shape; 48 Double_t fCldirChecked[3]; //! unit vector to current checked shape; 49 Double_t fPoint[3]; //! current point; 50 Double_t fDirection[3]; //! current direction; 51 Double_t fLastPoint[3]; //! last point for which safety was computed; 52 Double_t fLastPWSaftyPnt[3]; //! last point for which parallel world safety was ""evaluated""; 53 Double_t fLastPWSafety{-1}; //! last safety returned from parallel world (negative if invalid); 54 Int_t fThreadId; //! thread id for this navigator; 55 Int_t fLevel; //! current geometry level;; 56 Int_t fNmany; //! number of overlapping nodes on current branch; 57 Int_t fNextDaughterIndex; //! next daughter index after FindNextBoundary; 58 Int_t fOverlapSize; //! current size of fOverlapClusters; 59 Int_t fOverlapMark; //! current recursive position in fOverlapClusters; 60 Int_t *fOverlapClusters; //! internal array for overlaps; 61 Bool_t fSearchOverlaps; //! flag set when an overlapping cluster is searched; 62 Bool_t fCurrentOverlapping; //! flags the type of the current node; 63 Bool_t fStartSafe; //! flag a safe start for point classification; 64 Bool_t fIsEntering; //! flag if current step just got into a new node; 65 Bool_t fIsExiting; //! flag that current track is about to leave current node; 66 Bool_t fIsStepEntering; //! flag that next geometric step will enter new volume; 67 Bool_t fIsStepExiting; //! flag that n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:2265,safe,safety,2265,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['safe'],['safety']
Safety,"r * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofServ.h 39696 2011-06-13 21:35:34Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServ.html:33301,timeout,timeout,33301,root/html532/TProofServ.html,https://root.cern,https://root.cern/root/html532/TProofServ.html,1,['timeout'],['timeout']
Safety,"r * GetSessionDir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: TProofServ.h 39697 2011-06-13 21:43:43Z pcanal $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:33301,timeout,timeout,33301,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,1,['timeout'],['timeout']
Safety,"r *buf, size_t size, struct mg_file *filep);  ; static int mg_fopen (const struct mg_connection *conn, const char *path, int mode, struct mg_file *filep);  ; static __inline void mg_free (void *a);  ; const char * mg_get_builtin_mime_type (const char *path);  ; struct mg_context * mg_get_context (const struct mg_connection *conn);  ; int mg_get_context_info (const struct mg_context *ctx, char *buffer, int buflen);  ; int mg_get_cookie (const char *cookie_header, const char *var_name, char *dst, size_t dst_size);  ; static uint64_t mg_get_current_time_ns (void);  ; const char * mg_get_header (const struct mg_connection *conn, const char *name);  ; const char * mg_get_option (const struct mg_context *ctx, const char *name);  ; const struct mg_request_info * mg_get_request_info (const struct mg_connection *conn);  ; int mg_get_request_link (const struct mg_connection *conn, char *buf, size_t buflen);  ; int mg_get_response (struct mg_connection *conn, char *ebuf, size_t ebuf_len, int timeout);  ; const char * mg_get_response_code_text (const struct mg_connection *conn, int response_code);  ; const struct mg_response_info * mg_get_response_info (const struct mg_connection *conn);  ; int mg_get_server_ports (const struct mg_context *ctx, int size, struct mg_server_port *ports);  ; int mg_get_system_info (char *buffer, int buflen);  ; void * mg_get_thread_pointer (const struct mg_connection *conn);  ; void * mg_get_user_connection_data (const struct mg_connection *conn);  ; void * mg_get_user_context_data (const struct mg_connection *conn);  ; void * mg_get_user_data (const struct mg_context *ctx);  ; const struct mg_option * mg_get_valid_options (void);  ; int mg_get_var (const char *data, size_t data_len, const char *name, char *dst, size_t dst_len);  ; int mg_get_var2 (const char *data, size_t data_len, const char *name, char *dst, size_t dst_len, size_t occurrence);  ; static void mg_global_lock (void);  ; static void mg_global_unlock (void);  ; static int mg_inet_pto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c.html:18642,timeout,timeout,18642,doc/master/civetweb_8c.html,https://root.cern,https://root.cern/doc/master/civetweb_8c.html,1,['timeout'],['timeout']
Safety,"r *name,const char *shape,Int_t nmed);; TGeoManager::VolumeTGeoVolume * Volume(const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0)Create a volume in GEANT3 style.Definition TGeoManager.cxx:1388. name: the name of the newly created volume;; shape:the type of the associated shape. This has to contain the case-insensitive first 4 letters of the corresponding class name (e.g. ""`tubs`"" will match **TGeoTubeSeg**, ""`bbox`"" will match **TGeoBBox**); nmed: the medium number. This will create a special volume that will not be directly used in the geometry, but whenever positioned will require a list of actual parameters for the current shape that will be created in this process. Such volumes having shape parameters known only when used have to be positioned only with **TGeoManager::Node() method (see ‘Creating and Positioning Volumes').**; Other case when shape parameterizations are quite useful is scaling geometry structures. Imagine that we would like to enlarge/shrink a detector structure on one or more axes. This happens quite often in real life and is handled by ""fitting mother"" parameters. This is accomplished by defining shapes with one or more invalid (negative) parameters. For instance, defining a box having dx=10., dy=10., and dz=-1 will not generate an error but will be interpreted in a different way: A special volume **TGeoVolumeMulti** will be created. Whenever positioned inside a mother volume, this will create a normal **TGeoVolume** object having as shape a box with dz fitting the corresponding dzof the mother shape. Generally, this type of parameterization is used when positioning volumes in containers having a matching shape, but it works also for most reasonable combinations. . Modules;  Tubes;  ;  Cones;  ;  Trapezoids;  . Classes; class  TGeoCompositeShape;  Composite shapes are Boolean combinations of two or more shape components. More...;  ; class  TGeoHalfSpace;  A half space is limited just by a plane, defined by a point and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:11831,detect,detector,11831,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,1,['detect'],['detector']
Safety,"r * ; name). static . Static method to find a thread by name. ; Definition at line 479 of file TThread.cxx. ◆ GetThread() [2/2]. TThread * TThread::GetThread ; (; Long_t ; id). static . Static method to find a thread by id. ; Definition at line 463 of file TThread.cxx. ◆ GetTime(). Int_t TThread::GetTime ; (; ULong_t * ; absSec, . ULong_t * ; absNanoSec . ). static . Static method to get the current time. ; Returns the number of seconds. ; Definition at line 761 of file TThread.cxx. ◆ GetTls(). void ** TThread::GetTls ; (; Int_t ; k). staticprivate . Static method that initializes the TLS array of a thread and returns the reference to a given position in that array. ; Definition at line 907 of file TThread.cxx. ◆ Init(). void TThread::Init ; (; ). staticprivate . Initialize global state and variables once. ; Definition at line 319 of file TThread.cxx. ◆ Initialize(). void TThread::Initialize ; (; ). static . Initialize the Thread package. ; This initializes the TThread and ROOT global mutexes to make parts of ROOT thread safe/aware. This call is implicit in case a TThread is created. ; Definition at line 300 of file TThread.cxx. ◆ IsA(). TClass * TThread::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 180 of file TThread.h. ◆ IsInitialized(). Bool_t TThread::IsInitialized ; (; ). static . Return true, if the TThread objects have been initialize. ; If false, the process is (from ROOT's point of view) single threaded. ; Definition at line 309 of file TThread.cxx. ◆ Join() [1/2]. Long_t TThread::Join ; (; Long_t ; id, . void ** ; ret = nullptr . ). static . Static method to join a thread by id. ; Definition at line 534 of file TThread.cxx. ◆ Join() [2/2]. Long_t TThread::Join ; (; void ** ; ret = nullptr). Join this thread. ; Definition at line 510 of file TThread.cxx. ◆ Kill() [1/3]. Int_t TThread::Kill ; (; ). Kill this thread. ; Returns 0 on success, otherwise an error number will b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:25273,safe,safe,25273,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['safe'],['safe']
Safety,"r * ; selection). virtual . Return the number of entries matching the selection. ; Return -1 in case of errors.; If the selection uses any arrays or containers, we return the number of entries where at least one element match the selection. GetEntries is implemented using the selector class TSelectorEntries, which can be used directly (see code in TTreePlayer::GetEntries) for additional option. If SetEventList was used on the TTree or TChain, only that subset of entries will be considered. ; Reimplemented in TProofChain, TChain, and TTreeSQL.; Definition at line 5499 of file TTree.cxx. ◆ GetEntriesFast(). virtual Long64_t TTree::GetEntriesFast ; (; ); const. inlinevirtual . Return a number greater or equal to the total number of entries in the dataset. ; NoteIf you are interested in the total number of entries in a TChain, this function will give that number once the last file of the chain is opened. In general, using this instead of GetEntries will avoid opening all files in the chain which could be very costly for very large number of files stored at a remote location.; The logic depends on whether the dataset is a TTree or a TChain. In the first case, it simply returns the total number of entries in the tree. In the latter case, it depends on which point of the processing of the chain this function is called. During most of the chain processing, this function will return TTree::kMaxEntries. When the chain arrives at the last file, then the function will return the accumulated total number of entries in the whole chain. A notable use case where this function becomes quite useful is when writing the following for loop to traverse the entries in the dataset:; for(Long64_t ievent = 0; ievent < dataset.GetEntriesFast(); ievent++) {; // Do something with the event in the dataset; }; In the example above, independently on whether the dataset is a TTree or a TChain, the GetEntriesFast call will provide the correct stopping condition for the loop (i.e. the total number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:149631,avoid,avoid,149631,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['avoid'],['avoid']
Safety,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIdleTimer.html:1995,timeout,timeout,1995,doc/master/classTIdleTimer.html,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html,19,['timeout'],['timeout']
Safety,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSingleShotCleaner.html:2213,timeout,timeout,2213,doc/master/classTSingleShotCleaner.html,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html,1,['timeout'],['timeout']
Safety,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; virtual void Stop ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpTimer.html:2215,timeout,timeout,2215,doc/master/classTHttpTimer.html,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html,9,['timeout'],['timeout']
Safety,"r * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeout. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Timeout ();  ; virtual void TurnOff ();  Remove timer from system timer list. ;  ; virtual void TurnOn ();  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLRedrawTimer.html:2260,timeout,timeout,2260,doc/master/classTGLRedrawTimer.html,https://root.cern,https://root.cern/doc/master/classTGLRedrawTimer.html,1,['timeout'],['timeout']
Safety,"r = myfile->GetCacheRead();; 2352///; 2353/// The action specifies how to behave when detaching a cache from the; 2354/// the TFile. If set to (default) kDisconnect, the contents of the cache; 2355/// will be flushed when it is removed from the file, and it will disconnect; 2356/// the cache object from the file. In almost all cases, this is what you want.; 2357/// If you want to disconnect the cache temporarily from this tree and re-attach; 2358/// later to the same fil, you can set action to kDoNotDisconnect. This will allow; 2359/// things like prefetching to continue in the background while it is no longer the; 2360/// default cache for the TTree. Except for a few expert use cases, kDisconnect is; 2361/// likely the correct setting.; 2362///; 2363/// WARNING: if action=kDoNotDisconnect, you MUST delete the cache before TFile.; 2364///; 2365 ; 2366void TFile::SetCacheRead(TFileCacheRead *cache, TObject* tree, ECacheAction action); 2367{; 2368 if (tree) {; 2369 if (cache) fCacheReadMap->Add(tree, cache);; 2370 else {; 2371 // The only addition to fCacheReadMap is via an interface that takes; 2372 // a TFileCacheRead* so the C-cast is safe.; 2373 TFileCacheRead* tpf = (TFileCacheRead *)fCacheReadMap->GetValue(tree);; 2374 fCacheReadMap->Remove(tree);; 2375 if (tpf && (tpf->GetFile() == this) && (action != kDoNotDisconnect)) tpf->SetFile(0, action);; 2376 }; 2377 }; 2378 if (cache) cache->SetFile(this, action);; 2379 else if (!tree && fCacheRead && (action != kDoNotDisconnect)) fCacheRead->SetFile(0, action);; 2380 // For backward compatibility the last Cache set is the default cache.; 2381 fCacheRead = cache;; 2382}; 2383 ; 2384////////////////////////////////////////////////////////////////////////////////; 2385/// Set a pointer to the write cache.; 2386///; 2387/// If file is null the existing write cache is deleted.; 2388 ; 2389void TFile::SetCacheWrite(TFileCacheWrite *cache); 2390{; 2391 if (!cache && fCacheWrite) delete fCacheWrite;; 2392 fCacheWrite = cache;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:84140,safe,safe,84140,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['safe'],['safe']
Safety,"r Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; TUnfoldBinningXML Class Reference. ; XML interfate to binning schemes, for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=""0.15"" >; </Axis>; </Axis>; </Axis>; </BinningNode>; </BinningNode>; <BinningNode name=""generator"" firstbin=""1"" factor=""1"">; <BinningNode name=""signal"" firstbin=""1"" factor=""1"">; ; <Bin location",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinningXML.html:1215,detect,detector,1215,doc/master/classTUnfoldBinningXML.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html,1,['detect'],['detector']
Safety,"r GPU. ;  ; size_t fBatchDepth;  The depth of the batch used to train the deep net. ;  ; size_t fBatchHeight;  The height of the batch used to train the deep net. ;  ; TString fBatchLayoutString;  The string defining the layout of the batch. ;  ; size_t fBatchWidth;  The width of the batch used to train the deep net. ;  ; bool fBuildNet;  Flag to control whether to build fNet, the stored network used for the evaluation. ;  ; TString fErrorStrategy;  The string defining the error strategy for training. ;  ; TString fInputLayoutString;  The string defining the layout of the input. ;  ; std::vector< size_t > fInputShape;  Contains the batch size (no. ;  ; TString fLayoutString;  The string defining the layout of the deep net. ;  ; DNN::ELossFunction fLossFunction;  The loss function. ;  ; std::unique_ptr< DeepNetImpl_t > fNet;  ; TString fNumValidationString;  The string defining the number (or percentage) of training data used for validation. ;  ; DNN::EOutputFunction fOutputFunction;  The output function for making the predictions. ;  ; size_t fRandomSeed;  The random seed used to initialize the weights and shuffling batches (default is zero) ;  ; bool fResume;  ; KeyValueVector_t fSettings;  Map for the training strategy. ;  ; std::vector< TTrainingSettings > fTrainingSettings;  The vector defining each training strategy. ;  ; TString fTrainingStrategyString;  The string defining the training strategy. ;  ; DNN::EInitialization fWeightInitialization;  The initialization method. ;  ; TString fWeightInitializationString;  The string defining the weight initialization method. ;  ; TensorImpl_t fXInput;  ; HostBufferImpl_t fXInputBuffer;  ; std::unique_ptr< MatrixImpl_t > fYHat;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:32390,predict,predictions,32390,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['predict'],['predictions']
Safety,"r New label color; 950/// \param[in] labFont New label font; 951/// \param[in] labText New label text; 952///; 953/// #### Notes:; 954///; 955/// - If an attribute should not be changed just give the value ""-1"".; 956/// - If labnum=0 the list of modified labels is reset.; 957/// - To erase a label set labSize to 0.; 958/// - If labText is not specified or is an empty string, the text label is not changed.; 959/// - To retrieve the number of axis labels use TAxis::GetNlabels.; 960 ; 961void TAxis::ChangeLabel(Int_t labNum, Double_t labAngle, Double_t labSize,; 962 Int_t labAlign, Int_t labColor, Int_t labFont,; 963 const TString &labText); 964{; 965 // Reset the list of modified labels.; 966 if (labNum == 0) {; 967 SafeDelete(fModLabs);; 968 return;; 969 }; 970 ; 971 if (!fModLabs) fModLabs = new TList();; 972 ; 973 TAxisModLab *ml = FindModLab(labNum);; 974 if (!ml) {; 975 ml = new TAxisModLab();; 976 ml->SetLabNum(labNum);; 977 fModLabs->Add(ml);; 978 }; 979 ; 980 ml->SetAngle(labAngle);; 981 ml->SetSize(labSize);; 982 ml->SetAlign(labAlign);; 983 ml->SetColor(labColor);; 984 ml->SetFont(labFont);; 985 ml->SetText(labText);; 986}; 987 ; 988////////////////////////////////////////////////////////////////////////////////; 989/// Define new text attributes for the label value ""labValue"". It allows to do a; 990/// fine tuning of the labels. All the attributes can be changed, even the; 991/// label text itself.; 992///; 993/// \param[in] labValue Axis value to be changed; 994/// \param[in] labAngle New angle value; 995/// \param[in] labSize New size (0 erase the label); 996/// \param[in] labAlign New alignment value; 997/// \param[in] labColor New label color; 998/// \param[in] labFont New label font; 999/// \param[in] labText New label text; 1000///; 1001/// #### Notes:; 1002///; 1003/// - If an attribute should not be changed just give the value ""-1"".; 1004/// - If labnum=0 the list of modified labels is reset.; 1005/// - To erase a label set labSize to 0.; 1006/// - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:32354,Safe,SafeDelete,32354,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,1,['Safe'],['SafeDelete']
Safety,"r Python. ; In addition, multi-threading and other low-level optimisations allow users to exploit all the resources available on their machines completely transparently.; Skip to the class reference or keep reading for the user guide.; In a nutshell: ROOT::EnableImplicitMT(); // Tell ROOT you want to go parallel; ROOT::RDataFrame d(""myTree"", ""file_*.root""); // Interface to TTree and TChain; auto myHisto = d.Histo1D(""Branch_A""); // This books the (lazy) filling of a histogram; myHisto->Draw(); // Event loop is run here, upon first access to a result; d#define d(i)Definition RSha256.hxx:102; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539; Calculations are expressed in terms of a type-safe functional chain of actions and transformations, RDataFrame takes care of their execution. The implementation automatically puts in place several low level optimisations such as multi-thread parallelization and caching. For the impatient user; You can directly see RDataFrame in action in our tutorials, in C++ or Python. Table of Contents. Cheat sheet; Introduction; Crash course; Working with collections; Transformations: manipulating data; Actions: getting results; Distributed execution in Python; Performance tips and parallel execution; More features; Systematic variations; RDataFrame objects as function arguments and return values; Storing RDataFrame objects in collections; Executing callbacks every N events; Default column lists; Special helper columns: `rdfentry_` and `rdfslot_`; Just-in-time compilation: column type inference and explicit declaration of column types; User-defined custom actions; Dataset joins with friend trees; Reading data formats other than ROOT trees; Computation graphs (stor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:1366,safe,safe,1366,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['safe'],['safe']
Safety,"r Returns bool flag indicating if the caller should continue to paint child objects. ; Definition at line 429 of file TGeoCompositeShape.cxx. ◆ RegisterYourself(). void TGeoCompositeShape::RegisterYourself ; (; ). Register the shape and all components to TGeoManager class. ; Definition at line 475 of file TGeoCompositeShape.cxx. ◆ Safety(). Double_t TGeoCompositeShape::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . computes the closest distance from given point to this shape, according to option. ; The matching point on the shape is stored in spoint. ; Reimplemented from TGeoBBox.; Definition at line 521 of file TGeoCompositeShape.cxx. ◆ Safety_v(). void TGeoCompositeShape::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Compute safe distance from each of the points in the input array. ; Input: Array of point coordinates, array of statuses for these points, size of the arrays Output: Safety values ; Reimplemented from TGeoBBox.; Definition at line 629 of file TGeoCompositeShape.cxx. ◆ SavePrimitive(). void TGeoCompositeShape::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox.; Definition at line 531 of file TGeoCompositeShape.cxx. ◆ SetDimensions(). void TGeoCompositeShape::SetDimensions ; (; Double_t * ; ). inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 79 of file TGeoCompositeShape.h. ◆ SetPoints() [1/2]. void TGeoCompositeShape::SetPoints ; (; Double_t * ; points); const. overridevirtual . create points for a composite shape ; Reimplemented from TGeoBBox.; Definition at line 548 of file TGeoCompositeShape.cxx. ◆ SetPoints() [2/2]. void TGeoCompositeShape::SetPoints ; (; Float_t * ; points); const. overridevirtual . create points for a composite shape ; Reimplemented from TGeoBB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:43335,Safe,Safety,43335,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['Safe'],['Safety']
Safety,"r SIGURG and SIGIO); 228 kAtMark, // are we at out-of-band mark (read only); 229 kBytesToRead // get number of bytes to read, FIONREAD (read only); 230};; 231 ; 232enum ESendRecvOptions {; 233 kDefault, // default option (= 0); 234 kOob, // send or receive out-of-band data; 235 kPeek, // peek at incoming message (receive only); 236 kDontBlock // send/recv as much data as possible without blocking; 237};; 238 ; 239typedef void (*Func_t)();; 240 ; 241R__EXTERN const char *gRootDir;; 242R__EXTERN const char *gProgName;; 243R__EXTERN const char *gProgPath;; 244R__EXTERN TVirtualMutex *gSystemMutex;; 245 ; 246 ; 247//////////////////////////////////////////////////////////////////////////; 248// //; 249// Asynchronous timer used for processing pending GUI and timer events //; 250// every delay ms. Call in a tight computing loop //; 251// TProcessEventTimer::ProcessEvent(). If the timer did timeout this //; 252// call will process the pending events and return kTRUE if the //; 253// TROOT::IsInterrupted() flag is set (can be done by hitting key in //; 254// canvas or selecting canvas menu item View/Interrupt. //; 255// //; 256//////////////////////////////////////////////////////////////////////////; 257class TProcessEventTimer : public TTimer {; 258public:; 259 TProcessEventTimer(Long_t delay);; 260 Bool_t Notify() override { return kTRUE; }; 261 Bool_t ProcessEvents();; 262 ClassDefOverride(TProcessEventTimer,0) // Process pending events at fixed time intervals; 263};; 264 ; 265 ; 266class TSystem : public TNamed {; 267 ; 268public:; 269 enum EAclicMode { kDefault, kDebug, kOpt };; 270 enum EAclicProperties {; 271 kFlatBuildDir = BIT(0) // If set and a BuildDir is selected, then do not created sub-directories; 272 };; 273 ; 274protected:; 275 TFdSet *fReadmask{nullptr}; //!Files that should be checked for read events; 276 TFdSet *fWritemask{nullptr}; //!Files that should be checked for write events; 277 TFdSet *fReadready{nullptr}; //!Files with reads waiting; 278 TFdSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:9336,timeout,timeout,9336,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['timeout'],['timeout']
Safety,"r a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects ;  CNormFactorConfiguration for an un- constrained overall systematic to scale sample normalisations ;  COverallSysConfiguration for a constrained overall systematic to scale sample normalisations ;  CPreprocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis class is designed to ai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:6438,predict,predictions,6438,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['predict'],['predictions']
Safety,"r a constrained, coherent shape variation of affected samples ;  CHistoToWorkspaceFactory;  CHistoToWorkspaceFactoryFast;  CHistRefInternal class wrapping an histogram and managing its content ;  CLinInterpVarRooAbsReal that does piecewise-linear interpolations ;  CMeasurementThe RooStats::HistFactory::Measurement class can be used to construct a model by combining multiple RooStats::HistFactory::Channel objects ;  CNormFactorConfiguration for an un- constrained overall systematic to scale sample normalisations ;  COverallSysConfiguration for a constrained overall systematic to scale sample normalisations ;  CPreprocessFunction;  ►CRooBarlowBeestonLLClass RooBarlowBeestonLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  CBarlowCache;  CSample;  CShapeFactorUnconstrained bin-by-bin variation of affected histogram ;  CShapeSysConstrained bin-by-bin variation of affected histogram ;  CStatErrorStatistical error of Monte Carlo predictions ;  CStatErrorConfigConfiguration to automatically assign nuisance parameters for the statistical error of the Monte Carlo simulations ;  NNumberCountingUtils;  CAcceptanceRegion;  CAsymptoticCalculatorHypothesis Test Calculator based on the asymptotic formulae for the profile likelihood ratio ;  CBayesianCalculatorBayesianCalculator is a concrete implementation of IntervalCalculator, providing the computation of a credible interval using a Bayesian method ;  CBernsteinCorrectionBernsteinCorrection is a utility in RooStats to augment a nominal PDF with a polynomial correction term ;  CCombinedCalculatorCombinedCalculator is an interface class for a tools which can produce both RooStats HypoTestResults and ConfIntervals ;  CConfidenceBeltConfidenceBelt is a concrete implementation of the ConfInterval interface ;  CConfIntervalConfInterval is an interface class for a generic interval in the RooStats framework ;  CDebuggingSampler;  CDebuggingTestStat;  CDetailedOutputAggregatorThis ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:9315,predict,predictions,9315,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['predict'],['predictions']
Safety,"r conversions: TGeoManager::GetNextMatrix(); In case the computation of the normal vector to the next crossed surface is required, using a negative stepmax value is recommended. In this case one can subsequently call a method for fast normal computation:; Double_t *TGeoManager::FindNormalFast(); path 0; In case a path to a given physical object is specified, the distance to its boundary is computed ignoring the rest of the geometry; 18.10.2.1 Output Values; TGeoManager::GetStep(): distance to next boundary.; TGeoManager::GetSafeDistance(): safe distance (in case it was computed).; TGeoManager::IsOnBoundary(): the initial point (x,y,z) was (or was not) on a boundary within TGeoShape::Tolerance().; The algorithm checks first if the computation of safety was required. If this is the case and the global point coordinates did not change from the last query, the last computed safety is taken. Otherwise, the method TGeoManager::Safety () is invoked. A safety value less than TGeoShape::Tolerance() will set the flag IsOnBoundary to true. On the other hand, a safety value bigger than the proposed step will stop the computation of the distance to next boundary, returning the current geometry location with the meaning that the proposed step is safe.; The next stage is to check if computation of the distance to a give physical object specified by a path was required. If this is the case, the modeller changes the state to point to the required object, converts the current point and direction coordinates to the local frame of this object and computes the distance to its shape. The node returned is the one pointed by the input path in case the shape is crossed; otherwise the returned value is NULL. In case the distance to next crossed boundary is required, the current point has to be physically INSIDE the shape pointed by the current volume. This is only insured in case a call to TGeoManager::FindNode() was performed for the current point. Therefore, the first step is to convert th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1028232,safe,safety,1028232,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['safe'],['safety']
Safety,"r delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoEltu&operator=(const TGeoEltu&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEltuDimensions(Double_t a, Double_t b, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoEltu.html:9011,Safe,SafetyS,9011,root/html602/TGeoEltu.html,https://root.cern,https://root.cern/root/html602/TGeoEltu.html,2,['Safe'],['SafetyS']
Safety,"r delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoPgon&operator=(const TGeoPgon&); virtual voidTGeoShape::Paint(Option_t* option = """"); Double_t&TGeoPcon::Phi1(); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); Double_t&TGeoPcon::Rmax(Int_t ipl); Double_t&TGeoPcon::Rmin(Int_t ipl); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); Double_tSafetyToSegment(const Double_t* point, Int_t ipl, Int_t iphi, Bool_t in, Double_t safphi, Double_t safmin = TGeoShape::Big()) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPgon.html:9101,Safe,SafetyPhi,9101,root/html602/TGeoPgon.html,https://root.cern,https://root.cern/root/html602/TGeoPgon.html,2,['Safe'],['SafetyPhi']
Safety,"r delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); Double_tTGeoArb8::SafetyToFace(const Double_t* point, Int_t iseg, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoArb8::SetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoArb8::SetPlaneVertices(Double_t zpl, Double_t* vertices) const; virtual voidTGeoArb8::SetPoints(Double_t* points) const; virtual voidTGeoArb8::SetPoints(Float_t* points) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoGtra.html:10709,Safe,SafetyToFace,10709,root/html534/TGeoGtra.html,https://root.cern,https://root.cern/root/html534/TGeoGtra.html,2,['Safe'],['SafetyToFace']
Safety,r interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TRuby Ruby/ROOT interface; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class ; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summur,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:123704,safe,safe,123704,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,2,"['detect', 'safe']","['detector', 'safe']"
Safety,"r log follows.; Parameter values: cHDD=3.22694 cHl3=-7.04051 cHq3=0.54016; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-2.21831, denominator=wrap_pdf_Int[pTV]=89722.5; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=3.44258 cHl3=4.96668 cHq3=0.0273884; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denomi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:13003,recover,recover,13003,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['recover'],['recover']
Safety,"r object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooChebychevChebychev polynomial p.d.f.Definition RooChebychev.h:25; RooExponentialExponential PDF.Definition RooExponential.h:22; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooFit::ColumnsRooCmdArg Columns(Int_t ncol)Definition RooGlobalFunc.cxx:513; RooFit::SiblingRooCmdArg Sibling(const RooAbsCollection &sibling)Definition RooGlobalFunc.cxx:521; RooFit::OutputFileRooCmdArg OutputFile(const char *fileName)Definition RooGlobalFunc.cxx:517; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf407_latextablesDefinition rf407_latextables.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; \begin{tabular}{lc}; $\verb+a0+ $ & $ 0.6\pm 0.2$\\; $\verb+a1+ $ & $ 0.2\pm 0.2$\\; $\verb+alpha+ $ & $ -1.00$\\; $\verb+bkgfrac+ $ & $ 0.45\pm 0.03$\\; $\verb+mean+ $ & $ 5$\\; $\verb+sig1frac+ $ & $ 0.71\pm 0.06",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf407__latextables_8C.html:4935,safe,safe,4935,doc/master/rf407__latextables_8C.html,https://root.cern,https://root.cern/doc/master/rf407__latextables_8C.html,1,['safe'],['safe']
Safety,"r of bytes committed to the; 4571/// individual branches.; 4572///; 4573/// If a write error occurs, the number of bytes returned is -1.; 4574///; 4575/// If no data are written, because, e.g., the branch is disabled,; 4576/// the number of bytes returned is 0.; 4577///; 4578/// __The baskets are flushed and the Tree header saved at regular intervals__; 4579///; 4580/// At regular intervals, when the amount of data written so far is; 4581/// greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk.; 4582/// This makes future reading faster as it guarantees that baskets belonging to nearby; 4583/// entries will be on the same disk region.; 4584/// When the first call to flush the baskets happen, we also take this opportunity; 4585/// to optimize the baskets buffers.; 4586/// We also check if the amount of data written is greater than fAutoSave (see SetAutoSave).; 4587/// In this case we also write the Tree header. This makes the Tree recoverable up to this point; 4588/// in case the program writing the Tree crashes.; 4589/// The decisions to FlushBaskets and Auto Save can be made based either on the number; 4590/// of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries; 4591/// written (fAutoFlush and fAutoSave positive).; 4592/// Note that the user can decide to call FlushBaskets and AutoSave in her event loop; 4593/// base on the number of events written instead of the number of bytes written.; 4594///; 4595/// \note Calling `TTree::FlushBaskets` too often increases the IO time.; 4596///; 4597/// \note Calling `TTree::AutoSave` too often increases the IO time and also the; 4598/// file size.; 4599///; 4600/// \note This method calls `TTree::ChangeFile` when the tree reaches a size; 4601/// greater than `TTree::fgMaxTreeSize`. This doesn't happen if the tree is; 4602/// attached to a `TMemFile` or derivate.; 4603 ; 4604Int_t TTree::Fill(); 4605{; 4606 Int_t nbytes = 0;; 4607 Int_t nwrite = 0;; 4608 Int_t nerror = 0;; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:186206,recover,recoverable,186206,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['recover'],['recoverable']
Safety,"r of events associated with the extentable input p.d.f; in the product. If there is no extendable term, return zero and issue and error. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return generator context optimized for generating events from product p.d.f.s. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Query internal generation capabilities of component p.d.f.s and aggregate capabilities; into master configuration passed to the generator context. void initGenerator(Int_t code); Forward one-time initialization call to component generation initialization; methods. void generateEvent(Int_t code); Generate a single event with configuration specified by 'code'; Defer internal generation to components as encoded in the _genCode; registry for given generator code. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Forward determination of safety of internal generator code to; component p.d.f that would generate the given observable. RooArgSet* findPdfNSet(RooAbsPdf& pdf) const; Look up user specified normalization set for given input PDF component. RooArgSet* getConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected) const; Return all parameter constraint p.d.f.s on parameters listed in constrainedParams; The observables set is required to distinguish unambiguously p.d.f in terms; of observables and parameters, which are not constraints, and p.d.fs in terms; of parameters only, which can serve as constraints p.d.f.s. RooArgSet* getConnectedParameters(const RooArgSet& observables) const; Return all parameter constraint p.d.f.s on parameters listed in constrainedParams; The observables set is required to distinguish unambiguously p.d.f in terms; of observables and parameters, which are not constraints, and p.d.fs in terms; of parameters only, which can serve as const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:55752,safe,safety,55752,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,4,['safe'],['safety']
Safety,"r of events associated with the extentable input p.d.f; in the product. If there is no extendable term, return zero and issue and error. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return generator context optimized for generating events from product p.d.f.s. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Query internal generation capabilities of component p.d.f.s and aggregate capabilities; into master configuration passed to the generator context. void initGenerator(Int_t code); Forward one-time initialization call to component generation initialization; methods. void generateEvent(Int_t code); Generate a single event with configuration specified by 'code'; Defer internal generation to components as encoded in the _genCode; registry for given generator code. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Forward determination of safety of internal generator code to; component p.d.f that would generate the given observable. RooArgSet* findPdfNSet(RooAbsPdf& pdf) const; Look up user specified normalization set for given input PDF component. RooArgSet* getConstraints(const RooArgSet& observables, RooArgSet& constrainedParams, Bool_t stripDisconnected) const; Return all parameter constraint p.d.f.s on parameters listed in constrainedParams; The observables set is required to distinguish unambiguously p.d.f in terms; of observables and parameters, which are not constraints, and p.d.fs in terms; of parameters only, which can serve as constraints p.d.f.s. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t stripDisconnected) const. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of conditional product terms. void fixRefRange(const char* rangeName). std::list<Double_t>* plot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:54089,safe,safety,54089,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['safe'],['safety']
Safety,"r of events associated with the extentable input p.d.f; in the product. If there is no extendable term, return zero and issue and error. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return generator context optimized for generating events from product p.d.f.s. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Query internal generation capabilities of component p.d.f.s and aggregate capabilities; into master configuration passed to the generator context. void initGenerator(Int_t code); Forward one-time initialization call to component generation initialization; methods. void generateEvent(Int_t code); Generate a single event with configuration specified by 'code'; Defer internal generation to components as encoded in the _genCode; registry for given generator code. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Forward determination of safety of internal generator code to; component p.d.f that would generate the given observable. RooArgSet* findPdfNSet(RooAbsPdf& pdf) const; Look up user specified normalization set for given input PDF component. RooArgSet* getConstraints(const RooArgSet& observables, const RooArgSet& constrainedParams, Bool_t stripDisconnected) const; Return all parameter constraint p.d.f.s on parameters listed in constrainedParams; The observables set is required to distinguish unambiguously p.d.f in terms; of observables and parameters, which are not constraints, and p.d.fs in terms; of parameters only, which can serve as constraints p.d.f.s. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t stripDisconnected) const. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Forward the plot sampling hint from the p.d.f. that defines the observable obs. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooProd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:52034,safe,safety,52034,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['safe'],['safety']
Safety,"r of nodes). void FillTree(TMVA::DecisionTree::EventList& eventSample); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void FillEvent(TMVA::Event& event, TMVA::DecisionTreeNode* node); fill the existing the decision tree structure by filling event; in from the top node and see where they happen to end up. void ClearTree(); clear the tree nodes (their S/N, Nevents etc), just keep the structure of the tree. UInt_t CleanTree(TMVA::DecisionTreeNode* node = NULL); remove those last splits that result in two leaf nodes that; are both of the type (i.e. both signal or both background); this of course is only a reasonable thing to do when you use; ""YesOrNo"" leafs, while it might loose s.th. if you use the; purity information in the nodes.; --> hence I don't call it automatically in the tree building. Double_t PruneTree(TMVA::DecisionTree::EventList* validationSample = NULL); prune (get rid of internal nodes) the Decision tree to avoid overtraining; serveral different pruning methods can be applied as selected by the; variable ""fPruneMethod"". void ApplyValidationSample(const TMVA::DecisionTree::EventList* validationSample) const; run the validation sample through the (pruned) tree and fill in the nodes; the variables NSValidation and NBValidadtion (i.e. how many of the Signal; and Background events from the validation sample. This is then later used; when asking for the ""tree quality"" .. Double_t TestPrunedTreeQuality(const TMVA::DecisionTreeNode* dt = NULL, Int_t mode = 0) const; return the misclassification rate of a pruned tree; a ""pruned tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; any node, hence this tree quality testing will stop there, hence test; the pruned tree (while the full tree is still in place for normal/later use). void CheckEventWithPrunedTree(const TMVA::Event& ) const; pass a single validation event throught a pruned decision tree; on the way down the tree, fill i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__DecisionTree.html:10745,avoid,avoid,10745,root/html528/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html528/TMVA__DecisionTree.html,3,['avoid'],['avoid']
Safety,"r parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2; --- first compute rmin/rmax. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; Fills real parameters of a positioned box inside this arb8. Returns 0 if successfull. void GetPlaneNormal(Double_t* p1, Double_t* p2, Double_t* p3, Double_t* norm); Computes normal to plane defined by P1, P2 and P3. Bool_t GetPointsOnFacet(Int_t , Int_t , Double_t* ) const; Fills array with n random points located on the surface of indexed facet.; The output array must be provided with a length of minimum 3*npoints. Returns; true if operation succeeded.; Possible index values:; 0 - all facets togeather; 1 to 6 - facet index from bottom to top Z. Bool_t InsidePolygon(Double_t x, Double_t y, Double_t* pts); Finds if a point in XY plane is inside the polygon defines by PTS. void InspectShape() const; Prints shape parameters. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; Computes the closest distance from given point to this shape. Double_t SafetyToFace(Double_t* point, Int_t iseg, Bool_t in) const; Estimate safety to lateral plane defined by segment iseg in range [0,3]; Might be negative: plane seen only from inside. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetPlaneVertices(Double_t zpl, Double_t* vertices) const; Computes intersection points between plane at zpl and non-horizontal edges. void SetDimensions(Double_t* param); Set all arb8 params in one step.; param[0] = dz; param[1] = x0; param[2] = y0. void SetPoints(Double_t* points) const; Creates arb8 mesh points. void SetPoints(Float_t* points) const; Creates arb8 mesh points. void SetVertex(Int_t vnum, Double_t x, Double_t y); Set values for a given vertex. void Sizeof3D() const; Fill size of this 3-D object. void Streamer(TBuffer& b); Stream an object of class TGeoManager. Int_t GetByteCount() const; {return 100;}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoArb8.html:15950,Safe,Safety,15950,root/html528/TGeoArb8.html,https://root.cern,https://root.cern/root/html528/TGeoArb8.html,3,['Safe'],['Safety']
Safety,"r pidf is read from this file.; If the object is not already entered in the gROOT list, it is added. Int_t Recover(); Attempt to recover file if not correctly closed.; The function returns the number of keys that have been recovered.; If no keys can be recovered, the file will be declared Zombie by; the calling function. This function is automatically called when; opening a file. If the file is open in read only mode, the file is not modified.; If open in update mode and the function finds something to recover,; a new directory header is written to the file. When opening the file gain; no message from Recover will be reported.; If keys have been recovered, the file is usable and you can safely; read the corresponding objects.; If the file is not usable (a zombie), you can test for this case; with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {file is unusable); If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; You can test if the file has been recovered with; if (f.TestBit(TFile::kRecovered)) {.. the file has been recovered}. When writing TTrees to a file, it is important to save the Tree header; at regular intervals (see TTree::AutoSave). If a file containing a Tree; is recovered, the last Tree header written to the file will be used.; In this case all the entries in all the branches written before writing; the header are valid entries. One can disable the automatic recovery procedure by setting; TFile.Recover 0; in the system.rootrc file. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. The current directory (gFile) is changed to this fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:35392,recover,recovered,35392,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['recover'],['recovered']
Safety,"r tau-paths ;  ; std::vector< Double_t > fGDTauVec;  the tau's ;  ; std::vector< Double_t > fGradVec;  gradient vector - dimension = number of rules in ensemble ;  ; std::vector< Double_t > fGradVecLin;  gradient vector - dimension = number of variables ;  ; std::vector< std::vector< Double_t > > fGradVecLinTst;  gradient vector, linear terms - one per tau ;  ; std::vector< std::vector< Double_t > > fGradVecTst;  gradient vector - one per tau ;  ; Double_t fNEveEffPath;  sum of weights for Path events ;  ; Double_t fNEveEffPerf;  idem for Perf events ;  ; UInt_t fNLinear;  number of linear terms ;  ; UInt_t fNRules;  number of rules ;  ; Double_t * fNTCoeff;  GD path: rule coefficients. ;  ; Double_t fNTCoefRad;  GD path: 'radius' of all rulecoeffs. ;  ; Double_t fNTErrorRate;  GD path: error rate (or performance) ;  ; Double_t * fNTLinCoeff;  GD path: linear coefficients. ;  ; Double_t fNTNuval;  GD path: value of nu. ;  ; Double_t fNTOffset;  GD path: model offset. ;  ; Double_t fNTRisk;  GD path: risk. ;  ; UInt_t fPathIdx1;  first event index for path search ;  ; UInt_t fPathIdx2;  last event index for path search ;  ; UInt_t fPerfIdx1;  first event index for performance evaluation ;  ; UInt_t fPerfIdx2;  last event index for performance evaluation ;  ; RuleEnsemble * fRuleEnsemble;  rule ensemble ;  ; RuleFit * fRuleFit;  rule fit ;  ; Double_t fsigave;  Sigma of current signal score function F(sig) ;  ; Double_t fsigrms;  Rms of F(sig) ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; MsgLogger * fLogger;  ! message logger ;  . #include <TMVA/RuleFitParams.h>; Member Typedef Documentation. ◆ EventItr. typedef std::vector<constTMVA::Event*>::const_iterator TMVA::RuleFitParams::EventItr. protected . Definition at line 130 of file RuleFitParams.h. Constructor & Destructor Documentation. ◆ RuleFitParams(). TMVA::RuleFitParams::RuleFitParams ; (; ). constructor ; Definition at line 64 of file RuleFitParams.cxx. ◆ ~RuleFitParams(). TMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:7486,risk,risk,7486,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['risk'],['risk']
Safety,r the inverse error) on the value for a given point; 239 depending on the type of data.; 240 - If the data contains only value error (e.g. from histograms) returns a pointer to; 241 the inverse of the errors.; 242 - If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a; 243 pointer to the corresponding value error (NOT the inverse).; 244 - If the data contains asymmetric errors return a pointer to the average error (NOT the inverse):; 245 0.5(eu + el).; 246 - If the data does not contain errors return a nullptr.; 247 */; 248 ; 249 const double * ErrorPtr(unsigned int ipoint) const{; 250 assert( ipoint < fMaxPoints );; 251 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 252 kAsymError == fErrorType || kNoError == fErrorType );; 253 ; 254 if ( fErrorType == kNoError ); 255 return nullptr;; 256 return &fDataErrorPtr[ ipoint ];; 257 }; 258 ; 259 /// Return the error on the given point.; 260 /// Safer method returning in any case the error and not the inverse as in the; 261 /// function above.; 262 double Error( unsigned int ipoint ) const; 263 {; 264 assert( ipoint < fMaxPoints );; 265 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 266 kAsymError == fErrorType || kNoError == fErrorType );; 267 ; 268 if ( fErrorType == kNoError ); 269 {; 270 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 271 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 272 return 1.0;; 273 }; 274 ; 275 if ( fErrorType == kValueError ) // need to invert (inverror is stored); 276 {; 277 assert( fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 278 assert( fDataErrorHigh.empty() && fDataErrorLow.empty() );; 279 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 280 ; 281 double eval = fDataErrorPtr[ ipoint ];; 282 ; 283 if (fWrapped); 284 return eval;; 285 else; 286 return (eval != 0.0) ? 1.0/eval : 0.0;; 287 }; 288 ; 289 if ( fErrorType == kAsymEr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:8849,Safe,Safer,8849,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['Safe'],['Safer']
Safety,"r the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TTimer; 13\ingroup Base; 14 ; 15Handles synchronous and a-synchronous timer events.; 161. synchronous timer is registered into TSystem and is processed; 17 within the standard ROOT event-loop.; 182. asynchronous timer is passed to the operating system which sends; 19 an external signal to ROOT and thus interrupts its event-loop.; 20 ; 21You can use this class in one of the following ways:; 22 - Sub-class TTimer and override the Notify() method.; 23 - Re-implement the TObject::HandleTimer() method in your class; 24 and pass a pointer to this object to timer, see the SetObject(); 25 method.; 26 - Pass an interpreter command to timer, see SetCommand() method.; 27 - Create a TTimer, connect its Timeout() signal to the; 28 appropriate methods. Then when the time is up it will emit a; 29 Timeout() signal and call connected slots.; 30 ; 31Minimum timeout interval is defined in TSystem::ESysConstants as; 32`kItimerResolution` (currently 10 ms).; 33 ; 34Signal/slots example:; 35~~~{.cpp}; 36 TTimer *timer = new TTimer();; 37 timer->Connect(""Timeout()"", ""myObjectClassName"",; 38 myObject, ""TimerDone()"");; 39 timer->Start(2000, kTRUE); // 2 seconds single-shot; 40~~~; 41To emit the Timeout signal repeatedly with minimum timeout:; 42~~~ {.cpp}; 43 timer->Start(0, kFALSE);; 44~~~; 45*/; 46 ; 47#include ""TTimer.h""; 48#include ""TSystem.h""; 49#include ""TROOT.h""; 50 ; 51ClassImp(TTimer);; 52 ; 53 ; 54class TSingleShotCleaner : public TTimer {; 55private:; 56 TList *fGarbage;; 57public:; 58 TSingleShotCleaner() : TTimer(10, kTRUE) { fGarbage = new TList(); }; 59 virtual ~TSingleShotCleaner() { fGarbage->Delete(); delete fGarbage; }; 60 void TurnOn() override; 61 {; 62 TObject *obj = (TObject *)gTQSender;; 63 fGarbage->Add(obj);; 64 Reset();; 65 if (gSystem); 66 gSystem->AddTimer(t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTimer_8cxx_source.html:1426,Timeout,Timeout,1426,doc/master/TTimer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTimer_8cxx_source.html,1,['Timeout'],['Timeout']
Safety,"r the non-leftmost direct base classes. ; Definition at line 3137 of file TBranchElement.cxx. ◆ InitInfo(). void TBranchElement::InitInfo ; (; ). protectedvirtual . Init the streamer info for the branch class, try to compensate for class code unload/reload and schema evolution. ; Definition at line 2209 of file TBranchElement.cxx. ◆ IsA(). TClass * TBranchElement::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBranch.; Definition at line 255 of file TBranchElement.h. ◆ IsBranchFolder(). bool TBranchElement::IsBranchFolder ; (; ); const. inline . Definition at line 211 of file TBranchElement.h. ◆ IsFolder(). bool TBranchElement::IsFolder ; (; ); const. overridevirtual . Return true if more than one leaf, false otherwise. ; Reimplemented from TBranch.; Definition at line 3758 of file TBranchElement.cxx. ◆ IsMissingCollection(). bool TBranchElement::IsMissingCollection ; (; ); const. protected . Detect a collection written using a zero pointer in old versions of root. ; In versions of ROOT older than 4.00/03, if a collection (TClonesArray or STL container) was split but the pointer to the collection was zeroed out, nothing was saved. Hence there is no easy way to detect the case. In newer versions, a zero is written so that a 'missing' collection appears to be an empty collection. ; Definition at line 3776 of file TBranchElement.cxx. ◆ IsObjectOwner(). virtual bool TBranchElement::IsObjectOwner ; (; ); const. inlinevirtual . Definition at line 213 of file TBranchElement.h. ◆ Notify(). bool TBranchElement::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:59089,Detect,Detect,59089,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['Detect'],['Detect']
Safety,"r the proper line wrapping (this is the one implemented in this change).; TLatex; Make sure the line width used to draw #sqrt is always >= 1.; When a global text alignment was set the TLatexcharacters #minus, #plus, #mp, #hbar, and #backslash were mis-aligned. The following macro demonstrate the problem:; {; gStyle->SetTextAlign(22);; TLatex t(.5,.5,""#minus100 #mp100 #plus100 #hbar #backslash"");; t.Draw();; }; The angle of a TLatex object was set to 0 if the GetYsize method was called.; TColor; New palette kViridis. It was presented at SciPy2015 by Stéfan van der Walt and Nathaniel Smith. It is now matplotlib’s current default color map. Viridis. TMultiGraph; Ignore empty graphs when computing the multi-graph range at painting time.; TASImage; A left click on a image produced a one pixel zoom.; TCreatePrimitives; The ending of a polyline creation is based on the closeness of the two last entered points. The previous algorithm was based on user coordinates. It is now based on pixel to avoid the problem reported here.; TCanvas; When the first canvas created by ROOT was in batch mode, it was note possible to come back in interactive mode for the next canvases. this problem was reported here.; Cocoa Backend; Sometimes the mouse cursor did not change back to the window manager arrow when exiting a TCanvas.; freetype library; Updates builtin_freetype to 2.6.1 (current upstream version), which can detect PPC64LE machine. This was compiled and tested on SLC6 + ICC + x86_64, F21 + GCC + ppc64le, MacOSX 10.11.1 + Xcode 7.1 and Windows (ROOT 5.34). $ROOTSYS/graf2d/freetype/src/README was removed, because no issues were noticed with ICC compiler and -Wall -pedantic -ansi flags. Additionally --with-png=no --with-bzip2=no flags are passed to freetype configuration script. Default values for these options are auto. freetype finds libpng and libbzip2 on the system and builds extra modules. Then attempting to link against freetype one would need to link -lpng -lbzip2 explicitly other",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:16813,avoid,avoid,16813,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['avoid'],['avoid']
Safety,"r this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealSumFunc.html:50966,Avoid,Avoids,50966,doc/master/classRooRealSumFunc.html,https://root.cern,https://root.cern/doc/master/classRooRealSumFunc.html,1,['Avoid'],['Avoids']
Safety,"r to an existing shape; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoScaledShape(); Default constructor. TGeoScaledShape(const char* name, TGeoShape* shape, TGeoScale* scale); Constructor. TGeoScaledShape(TGeoShape* shape, TGeoScale* scale); Constructor. ~TGeoScaledShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3]. void ComputeBBox(); Compute bounding box of the scaled shape. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; Test if point is inside the scaled shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each vertex. Should not be called. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the scaled shape. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the scaled shape. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Cannot divide assemblies. const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Fills a static 3D buffer and returns a reference. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. void InspectShape() const; print shape parameters. Bool_t IsAssembly() const; Returns true if the scaled shap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoScaledShape.html:12262,safe,safe,12262,root/html532/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html532/TGeoScaledShape.html,1,['safe'],['safe']
Safety,"r to an existing shape; UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoScaledShape(); Default constructor. TGeoScaledShape(const char* name, TGeoShape* shape, TGeoScale* scale); Constructor. TGeoScaledShape(TGeoShape* shape, TGeoScale* scale); Constructor. ~TGeoScaledShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3]. void ComputeBBox(); Compute bounding box of the scaled shape. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; Test if point is inside the scaled shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each vertex. Should not be called. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the scaled shape. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the scaled shape. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Cannot divide assemblies. const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Fills a static 3D buffer and returns a reference. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. void InspectShape() const; print shape parameters. Bool_t IsReflected() const; Check if the scale transformat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoScaledShape.html:12037,safe,safe,12037,root/html528/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html528/TGeoScaledShape.html,2,['safe'],['safe']
Safety,"r to socket for which an event is waiting.; Wait a maximum of timeout milliseconds.; If return is due to timeout it returns (TSocket *)-1.; Select() can be interrupt by a call to Interrupt() (e.g. connected with a; Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable; in such a case.; Return 0 in case of any other error situation. Int_t Select(TList* rdready, TList* wrready, Long_t timeout); Return numbers of sockets that are ready for reading or writing.; Wait a maximum of timeout milliseconds.; Return 0 if timed-out. Return < 0 in case of error.; If rdready and/or wrready are not 0, the lists of sockets with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, remove from; the list those sockets which did not have any activity since timeout; millisecs. If timeout = 0, then reset activity timestamp on all active; sockets. This time out is typically used if GetActive() is used to see; how many remotes still need to send something. If they pass the timeout; they will be skipped and GetActive() will return 0 and the loop can be; exited. Int_t GetDeActive() const; Return number of sockets in the de-active list. Bool_t IsActive(TSocket* s) const; Check if socket 's' is in the active list. Avoids the duplication; of active list via TMonitor::GetListOfActives(). TList * GetListOfActives() const; Returns a list with all active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. TList * GetListOfDeActives() const; Returns a list with all de-active sockets. This list must be deleted; by the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:12632,timeout,timeout,12632,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,6,['timeout'],['timeout']
Safety,"r was not in the list of file handlers. void AddSignalHandler(TSignalHandler* sh); Add a signal handler to list of system signal handlers. Only adds; the handler if it is not already in the list of signal handlers. TSignalHandler * RemoveSignalHandler(TSignalHandler* sh); Remove a signal handler from list of signal handlers. Returns; the handler or 0 if the handler was not in the list of signal handlers. void ResetSignal(ESignals sig, Bool_t reset = kTRUE); If reset is true reset the signal handler for the specified signal; to the default handler, else restore previous behaviour. void ResetSignals(); Reset signals handlers to previous behaviour. void IgnoreSignal(ESignals sig, Bool_t ignore = kTRUE); If ignr is true ignore the specified signal, else restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:21958,timeout,timeout,21958,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,1,['timeout'],['timeout']
Safety,"r words, an extrusion behavior is dependent on the track parameters, which is a highly undesirable effect.; We will call overlaps only the regions in space contained by more than one node inside the same container. The owner of such regions cannot be determined based on hierarchical considerations; therefore they will be considered as belonging to the node from which the current track is coming from. When coming from their container, the ownership is totally unpredictable. Again, the ownership of overlapping regions highly depends on the current track parameters.; We must say that even the overlaps of type A) and B) are allowed in case the corresponding nodes are created using TGeoVolume::AddNodeOverlap() method. Navigation is performed in such cases by giving priority to the non-overlapping nodes. The modeller has to perform an additional search through the overlapping candidates. These are detected automatically during the geometry closing procedure in order to optimize the algorithm, but we will stress that extensive usage of this feature leads to a drastic deterioration of performance. In the following we will focus on the non-declared overlaps of type A) and B) since this is the main source of errors during tracking. These are generally non-intended overlaps due to coding mistakes or bad geometry design. The checking package is loaded together with the painter classes and contains an automated overlap checker.**. Overlap checking. This can be activated both at volume level (checking for illegal overlaps only one level inside a given volume) and from the geometry manager level (checking full geometry):; myVolume->CheckOverlaps(precision, option);; gGeoManager->CheckOverlaps(precision);; myNode->CheckOverlaps(precision);; Here precision represents the desired maximum accepted overlap value in centimeters (default value is 0.1). This tool checks all possible significant pairs of candidates inside a given volume (not declared as overlapping or division volumes). Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1000016,detect,detected,1000016,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['detect'],['detected']
Safety,"r write events. ;  ; Int_t fSigcnt {0};  ; TSeqCollection * fSignalHandler {nullptr};  ; TFdSet * fSignals {nullptr};  Files with writes waiting. ;  ; TString fSoExt;  ; TSeqCollection * fStdExceptionHandler {nullptr};  ; TList * fTimers {nullptr};  ; TString fWdpath;  ; TFdSet * fWritemask {nullptr};  Files that should be checked for read events. ;  ; TFdSet * fWriteready {nullptr};  Files with reads waiting. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TUnixSystem.h>. Inheritance diagram for TUnixSystem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TUnixSystem(). TUnixSystem::TUnixSystem ; (; ). Definition at line 575 of file TUnixSystem.cxx. ◆ ~TUnixSystem(). TUnixSystem::~TUnixSystem ; (; ). virtual . Reset to original state. ; Definition at line 581 of file TUnixSystem.cxx. Member Function Documentation. ◆ Abort(). void TUnixSystem::Abort ; (; int ; code = 0). overridevirtual . Abort the application. ; Reimplemented from TSystem.; Definition at line 2202 of file TUnixSystem.cxx. ◆ AcceptConnection(). int TUnixSystem::AcceptConnection ; (; int ; sock). overridevirtual . Accept a connection. ; In case of an error return -1. In case non-blocking I/O is enabled and no connections are available return -2. ; Reimplemented from TSystem.; Definition at line 3276 of file TUnixSystem.cxx. ◆ AccessPathName(). Bool_t TUnixSystem::AccessPathName ; (; const char * ; path, . EAccessMode ; mode = kFileExists . ). overridevirtual . Returns FALSE if one can access a file using the specified access mode. ; Mode is the same as for the Unix access(2) function. Attention, bizarre convention of return value!! ; Reimplemented from TSystem.; Definition at line 1579 of file TUnixSystem.cxx. ◆ AddDynamicPath(). void TUnixSystem::AddDynamicPath ; (; const char * ; lib). overridevirtual . Add a new directory to the dynamic path. ; Reimplemented f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:38131,Abort,Abort,38131,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['Abort'],['Abort']
Safety,"r(int num = 10, double eps = 1e-12); Basic contructor of GaussLegendreIntegrator.; \@param num Number of desired points to calculate the integration.; \@param eps Desired relative error. virtual ~GaussLegendreIntegrator(); Default Destructor . void SetNumberPoints(int num); Set the number of points used in the calculation of the; integral . void SetRelTolerance(double ); Set the desired relative Error. . void SetAbsTolerance(double ); This method is not implemented. . void GetWeightVectors(double* x, double* w) const; Returns the arrays x and w containing the abscissa and weight of; the Gauss-Legendre n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. int GetNumberPoints() const; { return fNum; }. int NEval() const. return number of function evaluations in calculating the integral; This is equivalent to the number of points. { return fNum; }. void SetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); set the options. double DoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Integration surrugate method. Return integral of passed function in interval [a,b]; Reimplement method of GaussIntegrator using CalcGaussLegendreSamplingPoints. void CalcGaussLegendreSamplingPoints(). Type: unsafe but fast interface filling the arrays x and w (static method). Given the number of sampling points this routine fills the arrays x and w; of length num, containing the abscissa and weight of the Gauss-Legendre; n-point quadrature formula. Gauss-Legendre: W(x)=1 -1<x<1; (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}. num is the number of sampling points (>0); x and w are arrays of size num; eps is the relative precision. If num<=0 or eps<=0 no action is done. Reference: Numerical Recipes in C, Second Edition. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html:4616,unsafe,unsafe,4616,root/html534/ROOT__Math__GaussLegendreIntegrator.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GaussLegendreIntegrator.html,1,['unsafe'],['unsafe']
Safety,"r) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooWorkspacePersistable container for RooFit projects.Definition RooWorkspace.h:43; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf510_wsnamedsetsDefinition rf510_wsnamedsets.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::model; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooChebychev::bkg; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::x; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a0; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::bkgfrac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::sig; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:8879,safe,safe,8879,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,1,['safe'],['safe']
Safety,"r* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoTorus&operator=(const TGeoTorus&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTorus.html:8790,Safe,SafetyPhi,8790,root/html534/TGeoTorus.html,https://root.cern,https://root.cern/root/html534/TGeoTorus.html,1,['Safe'],['SafetyPhi']
Safety,"r* b); virtual Double_tCapacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); voidComputeTwist(); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tDistToPlane(Double_t* point, Double_t* dir, Int_t ipl, Bool_t in) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoArb8.html:2686,safe,safe,2686,root/html532/TGeoArb8.html,https://root.cern,https://root.cern/root/html532/TGeoArb8.html,1,['safe'],['safe']
Safety,"r* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoEltu&operator=(const TGeoEltu&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEltuDimensions(Double_t a, Double_t b, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoEltu.html:8374,Safe,SafetyS,8374,root/html530/TGeoEltu.html,https://root.cern,https://root.cern/root/html530/TGeoEltu.html,2,['Safe'],['SafetyS']
Safety,"r* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoHalfSpace&operator=(const TGeoHalfSpace&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t*) const; virtual voidSetPoints(Float_t*) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoHalfSpace.html:8343,Safe,SafetyPhi,8343,root/html602/TGeoHalfSpace.html,https://root.cern,https://root.cern/root/html602/TGeoHalfSpace.html,2,['Safe'],['SafetyPhi']
Safety,"r* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidDistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTube.html:2706,safe,safe,2706,root/html528/TGeoTube.html,https://root.cern,https://root.cern/root/html528/TGeoTube.html,3,['safe'],['safe']
Safety,"r* parname); Return the set of correlation coefficients of parameter 'par' with; all other floating parameters. Double_t globalCorr(const char* parname); Return the global correlation of the named parameter. const RooArgList* globalCorr(); Return the list of all global correlations. Double_t correlation(Int_t row, Int_t col); Return a correlation matrix element addressed with numeric indices. Double_t covariance(Int_t row, Int_t col) const; Return the covariance matrix element addressed with numeric indices. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print fit result to stream 'os'. In Verbose mode, the contant parameters and; the initial and final values of the floating parameters are printed.; Standard mode only the final values of the floating parameters are printed. void fillCorrMatrix(const vector<double>& globalCC, const TMatrixDSym& corrs, const TMatrixDSym& covs); Function called by RooMinimizer. void fillLegacyCorrMatrix() const; Sanity check. void fillCorrMatrix(); Internal utility method to extract the correlation matrix and the; global correlation coefficients from the MINUIT memory buffer and; fill the internal arrays. Bool_t isIdentical(const RooFitResult& other, Double_t tol = 5e-5, Double_t tolCorr = 1e-4, Bool_t verbose = kTRUE) const; Return true if this fit result is identical to other within tolerance 'tol' on fitted values; and tolerance 'tolCor' on correlation coefficients. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed by gMinuit, interpreting; the fit parameters as the given varList of parameters. void setCovarianceMatrix(TMatrixDSym& V); Store externally provided correlation matrix in his RooFitResult ;. TH2* correlationHist(const char* name = ""correlation_matrix"") const; Return TH2D of correlation matrix. const TMatrixDSym& covarianceMatrix() const; Return covariance matrix. TMatrixDSym reducedCovarianceMatrix(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFitResult.html:13306,Sanity check,Sanity check,13306,root/html526/RooFitResult.html,https://root.cern,https://root.cern/root/html526/RooFitResult.html,1,['Sanity check'],['Sanity check']
Safety,"r* path, Option_t* opt = 0); Issue a stage request for file defined by 'path'. The string 'opt'; defines 'option' and 'priority' for 'Prepare': the format is; opt = ""option=o priority=p"". void GetPrefix(const char* url, TString& pfx); Isolate prefix in url. void Print(Option_t* option = """") const; Print basic info about this stager. Int_t Locate(const char* path, TString& endpath); Get actual end-point url for a path; Returns 0 in case of success and 1 if any error occured. Int_t LocateCollection(TFileCollection* fc, Bool_t addDummyUrl = kFALSE); Bulk locate request for a collection of files. A noop prepare command is; issued beforehand to fill redirector's cache, then Locate() is issued on; each file. Results are saved back to the input collection: when a file is; found, the staged bit is set to on, and its endpoint URL is added, if; different from the redirector's URL. If a file is not found, the staged; bit is set to off.; If addDummyUrl is kTRUE, in case file is not staged or redirector is; identical to endpoint URL, a dummy URL is prepended, respectively:; ""noop://redir"" and ""noop://none"".; If the collection contains URLs with ""anchors"" (i.e., #fileName.root),; they are ignored by xrootd.; The Locate() command preserves anchors, but needs single paths to be full; URLs beginning with root://.; Returns < 0 in case of errors, and the number of files processed in case; of success. Bool_t Matches(const char* s); Returns kTRUE if stager 's' is compatible with current stager.; Avoids multiple instantiations of the potentially the same TXNetSystem. TXNetFileStager(const char* stager = """"). Bool_t IsValid() const; { return (fSystem ? kTRUE : kFALSE); }. » Author: A. Peters, G. Ganis 7/2/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFileStager.html:8818,Avoid,Avoids,8818,root/html602/TXNetFileStager.html,https://root.cern,https://root.cern/root/html602/TXNetFileStager.html,1,['Avoid'],['Avoids']
Safety,"r* path, Option_t* opt = 0); Issue a stage request for file defined by 'path'. The string 'opt'; defines 'option' and 'priority' for 'Prepare': the format is; opt = ""option=o priority=p"". void GetPrefix(const char* url, TString& pfx); Isolate prefix in url. void Print(Option_t* option = """") const; Print basic info about this stager. Int_t Locate(const char* path, TString& endpath); Get actual end-point url for a path; Returns 0 in case of success and 1 if any error occured. Int_t LocateCollection(TFileCollection* fc, Bool_t addDummyUrl = kFALSE); Bulk locate request for a collection of files. A noop prepare command is; issued beforehand to fill redirector's cache, then Locate() is issued on; each file. Results are saved back to the input collection: when a file is; found, the staged bit is set to on, and its endpoint URL is added, if; different from the redirector's URL. If a file is not found, the staged; bit is set to off.; If addDummyUrl is kTRUE, in case file is not staged or redirector is; identical to endpoint URL, a dummy URL is prepended, respectively:; ""noop://redir"" and ""noop://none"".; If the collection contains URLs with ""anchors"" (i.e., #fileName.root),; they are ignored by xrootd.; The Locate() command preserves anchors, but needs single paths to be full; URLs beginning with root://.; Returns < 0 in case of errors, and the number of files processed in case; of success. Bool_t Matches(const char* s); Returns kTRUE if stager 's' is compatible with current stager.; Avoids multiple instantiations of the potentially the same TXNetSystem. TXNetFileStager(const char* stager = """"). Bool_t IsValid() const; { return (fSystem ? kTRUE : kFALSE); }. » Author: A. Peters, G. Ganis 7/2/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXNetFileStager.html:8771,Avoid,Avoids,8771,root/html604/TXNetFileStager.html,https://root.cern,https://root.cern/root/html604/TXNetFileStager.html,1,['Avoid'],['Avoids']
Safety,"r* rfile = 0, TProof::ESlaves list = kAllUnique); Int_tBroadcastGroupPriority(const char* grp, Int_t priority, TProof::ESlaves list = kAllUnique); Int_tBroadcastGroupPriority(const char* grp, Int_t priority, TList* workers); Int_tBroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Int_tBroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Int_tBroadcastRaw(const void* buffer, Int_t length, TList* slaves); Int_tBroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Int_tBuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT, TList* workers = 0); Int_tBuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = kCheckROOT); Bool_tCheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp | kCpBin)); voidCleanGDirectory(TList* ol); voidClearDataProgress(Int_t r, Int_t t); Int_tCollect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Int_tCollect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Int_tCollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Bool_tCreateMerger(TSlave* sl, Int_t port); voidDeActivateAsyncInput(); Int_tDisablePackage(const char* package); Int_tDisablePackageOnClient(const char* package); Int_tDisablePackages(); Int_tExec(const char* cmd, TProof::ESlaves list, Bool_t plusMaster); voidFinalizationDone(); Int_tFindNextFreeMerger(); TSlave*FindSlave(TSocket* s) const; virtual voidFindUniqueSlaves(); Int_tGetActiveMergersCount(); static TList*GetDataSetSrvMaps(const TString& srvmaps); TList*GetListOfBadSlaves() const; TList*GetListOfInactiveSlaves() const; TList*GetListOfSlaves() const; TList*GetListOfUniqueSlaves() const; Int_tGetNumberOfActiveSlaves() const; Int_tGetNumberOfBadSlaves() const; Int_tGetNumberOfInactiveSlaves() const; Int_tGetNumberOfSlaves() const; Int_tGetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:23219,timeout,timeout,23219,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['timeout'],['timeout']
Safety,"r* sniffer = 0); virtual TClass*IsA() const; Bool_tIsReadOnly(Bool_t dflt = kTRUE); Bool_tIsReadyForResult() const; voidMakeItemName(const char* objname, TString& itemname); Bool_tScanOnlyFields() const; voidSetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); Bool_tSetFoundResult(void* obj, TClass* cl, TDataMember* member = 0); Bool_tSetResult(void* obj, TClass* cl, TDataMember* member = 0); voidSetRootClass(TClass* cl); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. enum { kScan; kExpand; kSearch; kCheckChilds; kOnlyFields; kActions; };. protected:. Bool_tfHasMore! indicates that potentially there are more items can be found; TStringfItemName! name of current item; TListfItemsNames! list of created items names, need to avoid duplication; Int_tfLevel! current level of hierarchy; UInt_tfMask! defines operation kind; Bool_tfNodeStarted! indicate if node was started; Int_tfNumChilds! number of childs; Int_tfNumFields! number of fields; TRootSnifferScanRec*fParent! pointer on parent record; Int_tfRestriction! restriction 0 - default, 1 - read-only, 2 - full access; const char*fSearchPath! current path searched; TRootSnifferStore*fStore! object to store results. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRootSnifferScanRec(). virtual ~TRootSnifferScanRec(). void CloseNode(). Bool_t CanSetFields() const; return true when fields could be set to the hierarchy item . Bool_t ScanOnlyFields() const. void CreateNode(const char* _node_name); Starts new node, must be closed at the end . void BeforeNextChild(). void SetField(const char* name, const char* value, Bool_t with_quotes = kTRUE); Set item field only when creating is specified . void SetRootClass(TClass* cl); Mark item with ROOT class and correspondent streamer info . Bool_t CanExpandItem(); Returns true when item can be expanded . Bool_t IsR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRootSnifferScanRec.html:1585,avoid,avoid,1585,root/html534/TRootSnifferScanRec.html,https://root.cern,https://root.cern/root/html534/TRootSnifferScanRec.html,1,['avoid'],['avoid']
Safety,"r, Double_t *s, Bool_t inner, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t, Double_t *) const override;  ; Double_t GetStIn () const;  ; Double_t GetStOut () const;  ; Bool_t HasInner () const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; Double_t RadiusHypeSq (Double_t z, Bool_t inner) const;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; Double_t SafetyToHype (const Double_t *point, Bool_t inner, Bool_t in) const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetHypeDimensions (Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz);  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buff) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_Streamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHype.html:2982,Safe,Safety,2982,doc/master/classTGeoHype.html,https://root.cern,https://root.cern/doc/master/classTGeoHype.html,3,"['Safe', 'safe']","['Safety', 'SafetyToHype', 'safe']"
Safety,"r, opt_vec.len) == 0); 19922 break;; 19923 }; 19924 lua_rawset(state, -3);; 19925 lua_pop(state, 1);; 19926 }; 19927 ; 19928 /* Call script */; 19929 state = mg_lua_context_script_run(state,; 19930 ctx->dd.config[LUA_BACKGROUND_SCRIPT],; 19931 ctx,; 19932 ebuf,; 19933 sizeof(ebuf));; 19934 if (!state) {; 19935 mg_cry_ctx_internal(ctx,; 19936 ""lua_background_script start error: %s"",; 19937 ebuf);; 19938 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19939 mg_snprintf(NULL,; 19940 NULL, /* No truncation check for error buffers */; 19941 error->text,; 19942 error->text_buffer_size,; 19943 ""Error in script %s: %s"",; 19944 config_options[DOCUMENT_ROOT].name,; 19945 ebuf);; 19946 }; 19947 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19948 ; 19949 free_context(ctx);; 19950 pthread_setspecific(sTlsKey, NULL);; 19951 return NULL;; 19952 }; 19953 ; 19954 /* state remains valid */; 19955 ctx->lua_background_state = (void *)state;; 19956 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19957 ; 19958 } else {; 19959 ctx->lua_background_state = 0;; 19960 }; 19961#endif; 19962 ; 19963 /* Step by step initialization of ctx - depending on build options */; 19964#if !defined(NO_FILESYSTEMS); 19965 if (!set_gpass_option(ctx, NULL)) {; 19966 const char *err_msg = ""Invalid global password file"";; 19967 /* Fatal error - abort start. */; 19968 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19969 ; 19970 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19971 mg_snprintf(NULL,; 19972 NULL, /* No truncation check for error buffers */; 19973 error->text,; 19974 error->text_buffer_size,; 19975 ""%s"",; 19976 err_msg);; 19977 }; 19978 free_context(ctx);; 19979 pthread_setspecific(sTlsKey, NULL);; 19980 return NULL;; 19981 }; 19982#endif; 19983 ; 19984#if defined(USE_MBEDTLS); 19985 if (!mg_sslctx_init(ctx, NULL)) {; 19986 const char *err_msg = ""Error initializing SSL context"";; 19987 /* Fatal error - abort start. */; 19988 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19989 ; 19990 if ((error !=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:596694,abort,abort,596694,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['abort'],['abort']
Safety,"r, opt_vec.len) == 0); 19923 break;; 19924 }; 19925 lua_rawset(state, -3);; 19926 lua_pop(state, 1);; 19927 }; 19928 ; 19929 /* Call script */; 19930 state = mg_lua_context_script_run(state,; 19931 ctx->dd.config[LUA_BACKGROUND_SCRIPT],; 19932 ctx,; 19933 ebuf,; 19934 sizeof(ebuf));; 19935 if (!state) {; 19936 mg_cry_ctx_internal(ctx,; 19937 ""lua_background_script start error: %s"",; 19938 ebuf);; 19939 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19940 mg_snprintf(NULL,; 19941 NULL, /* No truncation check for error buffers */; 19942 error->text,; 19943 error->text_buffer_size,; 19944 ""Error in script %s: %s"",; 19945 config_options[DOCUMENT_ROOT].name,; 19946 ebuf);; 19947 }; 19948 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19949 ; 19950 free_context(ctx);; 19951 pthread_setspecific(sTlsKey, NULL);; 19952 return NULL;; 19953 }; 19954 ; 19955 /* state remains valid */; 19956 ctx->lua_background_state = (void *)state;; 19957 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19958 ; 19959 } else {; 19960 ctx->lua_background_state = 0;; 19961 }; 19962#endif; 19963 ; 19964 /* Step by step initialization of ctx - depending on build options */; 19965#if !defined(NO_FILESYSTEMS); 19966 if (!set_gpass_option(ctx, NULL)) {; 19967 const char *err_msg = ""Invalid global password file"";; 19968 /* Fatal error - abort start. */; 19969 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19970 ; 19971 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19972 mg_snprintf(NULL,; 19973 NULL, /* No truncation check for error buffers */; 19974 error->text,; 19975 error->text_buffer_size,; 19976 ""%s"",; 19977 err_msg);; 19978 }; 19979 free_context(ctx);; 19980 pthread_setspecific(sTlsKey, NULL);; 19981 return NULL;; 19982 }; 19983#endif; 19984 ; 19985#if defined(USE_MBEDTLS); 19986 if (!mg_sslctx_init(ctx, NULL)) {; 19987 const char *err_msg = ""Error initializing SSL context"";; 19988 /* Fatal error - abort start. */; 19989 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19990 ; 19991 if ((error !=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:596727,abort,abort,596727,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['abort'],['abort']
Safety,"r, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoShapeAssembly&operator=(const TGeoShapeAssembly&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidRecomputeBoxLast(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShapeAssembly.html:8475,Safe,SafetySeg,8475,root/html534/TGeoShapeAssembly.html,https://root.cern,https://root.cern/root/html534/TGeoShapeAssembly.html,1,['Safe'],['SafetySeg']
Safety,"r, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoCone&operator=(const TGeoCone&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tSafetyS(const Double_t* point, Bool_t in, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidSetConeDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCone.html:9608,Safe,SafetySeg,9608,root/html534/TGeoCone.html,https://root.cern,https://root.cern/root/html534/TGeoCone.html,3,['Safe'],['SafetySeg']
Safety,"r. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box for a trd1. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this shape; check Z range. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the trd1; Boundary safe algorithm. void GetVisibleCorner(const Double_t* point, Double_t* vertex, Double_t* normals) const; get the most visible corner from outside point and the normals. void GetOppositeCorner(const Double_t* point, Int_t inorm, Double_t* vertex, Double_t* normals) const; get the opposite corner of the intersected face. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the trd1; Boundary safe algorithm. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this trd1 shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume in case of Y divisions. For Z divisions just; return the pointer to the volume to be divided. In case a wrong; division axis is supplied, returns pointer to volume that was divided. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; Fills real para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd1.html:14079,safe,safe,14079,root/html534/TGeoTrd1.html,https://root.cern,https://root.cern/root/html534/TGeoTrd1.html,6,['safe'],['safe']
Safety,"r. TGeoPcon(const char* name, Double_t phi, Double_t dphi, Int_t nz); Default constructor. TGeoPcon(Double_t* params); Default constructor in GEANT3 style; param[0] = phi1; param[1] = dphi; param[2] = nz. param[3] = z1; param[4] = Rmin1; param[5] = Rmax1. TGeoPcon(const TGeoPcon& ); copy constructor. TGeoPcon& operator=(const TGeoPcon& ); assignment operator. ~TGeoPcon(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the pcon; Check if the sections are in increasing Z order. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this shape; check total z range. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the polycone. Double_t DistToSegZ(const Double_t* point, const Double_t* dir, Int_t& iz) const; compute distance to a pcon Z slice. Segment iz must be valid. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube. void DefineSection(Int_t snum, Double_t z, Double_t rmin, Double_t rmax); Defines z position of a section plane, rmin and rmax at this z. Sections; should be defined in increasing or decreasing Z order and the last section; HAS to be snum = fNz-1. Int_t GetNsegments() const; Returns number of segments on each mesh circle segment. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this polycone shape belonging to volume ""voldiv"" into ndiv volumes; called divname, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPcon.html:14497,safe,safe,14497,root/html534/TGeoPcon.html,https://root.cern,https://root.cern/root/html534/TGeoPcon.html,3,['safe'],['safe']
Safety,"r. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* , TList* , const char* = 0, Int_t = 0, TList* = 0); *** This function is deprecated and will disappear in future versions ***; *** It is just a wrapper around TFile::Cp.; *** Please use TProofMgr::UploadFiles. Upload a set of files and save the list of files by name dataSetName.; The 'files' argument is a list of TFileInfo objects describing the files; as first url.; The mask 'opt' is a combination of EUploadOpt:; kAppend (0x1) if set true files will be appended to; the dataset existing by given name; kOverwriteDataSet (0x2) if dataset with given name exited it; would be overwritten; kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; kOverwriteAllFiles (0x8) overwrite all files that may exist; kOverwriteNoFiles (0x10) overwrite none; kAskUser (0x0) ask user before overwriteng dataset/files; The default value is kAskUser.; The user will be asked to confirm overwriting data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:87972,recover,recovered,87972,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['recover'],['recovered']
Safety,"r. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* dataset, TList* files, const char* dest = 0, Int_t opt = kAskUser, TList* skippedFiles = 0); Upload a set of files and save the list of files by name dataSetName.; The 'files' argument is a list of TFileInfo objects describing the files; as first url.; The mask 'opt' is a combination of EUploadOpt:; kAppend (0x1) if set true files will be appended to; the dataset existing by given name; kOverwriteDataSet (0x2) if dataset with given name exited it; would be overwritten; kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; kOverwriteAllFiles (0x8) overwrite all files that may exist; kOverwriteNoFiles (0x10) overwrite none; kAskUser (0x0) ask user before overwriteng dataset/files; The default value is kAskUser.; The user will be asked to confirm overwriting dataset or files unless; specified opt provides the answer!; If kOverwriteNoFiles is set, then a pointer to TList must be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:77187,recover,recovered,77187,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['recover'],['recovered']
Safety,"r3D * MakeBuffer3D() const; Creates a TBuffer3D describing *this* shape.; Coordinates are in local reference frame. void SetSegsAndPols(TBuffer3D& buff) const; Fill TBuffer3D structure for segments and polygons. Double_t Rpg(Double_t z, Int_t ipl, Bool_t inner, Double_t& a, Double_t& b) const; Computes projected pgon radius (inner or outer) corresponding to a given Z; value. Fills corresponding coefficients of:; Rpg(z) = a + b*z; Note: ipl must be in range [0,fNz-2]. Double_t Rproj(Double_t z, Double_t* point, Double_t* dir, Double_t cphi, Double_t sphi, Double_t& a, Double_t& b) const; Computes projected distance at a given Z for a given ray inside a given sector; and fills coefficients:; Rproj = a + b*z. Double_t SafetyToSegment(Double_t* point, Int_t ipl, Int_t iphi, Bool_t in, Double_t safphi, Double_t safmin = TGeoShape::Big()) const; Compute safety from POINT to segment between planes ipl, ipl+1 within safmin. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set PGON dimensions starting from an array. void SetPoints(Double_t* points) const; create polygone mesh points. void SetPoints(Float_t* points) const; create polygone mesh points. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. Int_t GetNmeshVertices() const; Return number of vertices of the mesh representation. void Sizeof3D() const; fill size of this 3-D object; TVirtualGeoPainter *painter = gGeoManager->GetGeomPainter();; if (!painter) return;; Int_t n;. n = fNedges+1;. Int_t numPoints = fNz*2*n;; Int_t numSegs = 4*(fNz*n-1+(fDphi == 360));; Int_t numPolys = 2*(fNz*n-1+(fDphi == 360));; painter->AddSize3D(num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPgon.html:18204,Safe,Safety,18204,root/html528/TGeoPgon.html,https://root.cern,https://root.cern/root/html528/TGeoPgon.html,3,['Safe'],['Safety']
Safety,"r::FindNextBoundaryAndStep(Double_t stepmax,; Bool_t comp_safe=kFALSE);; The meaning of the parameters here is the same as for FindNextBoundary, but the safety value is triggered by an input flag. The output is the node after the boundary crossing.; 18.5.7.3 Computing the Safe Radius; Other important navigation query for tracking is the computation of the safe distance. This represents the maximum step that can be made from the current point in any direction that assures that no boundary will be crossed. Knowing this value gives additional freedom to the stepping algorithm to propagate the current track on the corresponding range without checking if the current state has changed. In other words, the modeller insures that the current state does not change in any point within the safety radius around the current point.; The computation of the safe radius is automatically computed any time when the next boundary is queried within a limited step:; TGeoNode *crossed = gGeoManager->FindNextBoundary(pstep);; Double_t safety = gGeoManager->GetSafeDistance();; Otherwise, the computation of safety can always be forced:; Double_t safety = gGeoManager->Safety();; 18.5.7.4 Making a Step; The modeller is able to make steps starting from the current point along the current direction and having the current step length. The new point and its corresponding state will be automatically computed:; TGeoNode *TGeoManager::Step(Bool_t is_geom = kTRUE,; Bool_t cross = kTRUE);; We will explain the method above by its use cases. The input flag is_geom allows specifying if the step is limited by geometrical reasons (a boundary crossing) or is an arbitrary step. The flag cross can be used in case the step is made on a boundary and specifies if user wants to cross or not the boundary. The returned node represents the new current node after the step was made. Making a geometrically contained step with boundary crossing (is_geom=kTRUE, cross=kTRUE) - This is the default method behavior. In this cas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:988317,safe,safe,988317,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,5,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"r::GetCldirconst Double_t * GetCldir() constDefinition TGeoNavigator.h:165; TGeoNavigator::fTopNodeTGeoNode * fTopNodecurrent nodeDefinition TGeoNavigator.h:76; TGeoNavigator::LocalToMasterVectvoid LocalToMasterVect(const Double_t *local, Double_t *master) constDefinition TGeoNavigator.h:236; TGeoNavigator::IsSafeStepBool_t IsSafeStep(Double_t proposed, Double_t &newsafety) constIn case a previous safety value was computed, check if the safety region is still safe for the curren...Definition TGeoNavigator.cxx:2609; TGeoNavigator::SearchNodeTGeoNode * SearchNode(Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr)Returns the deepest node containing fPoint, which must be set a priori.Definition TGeoNavigator.cxx:1924; TGeoNavigator::fLastSafetyDouble_t fLastSafetysafety radius from current pointDefinition TGeoNavigator.h:45; TGeoNavigator::~TGeoNavigator~TGeoNavigator() overrideDestructor.Definition TGeoNavigator.cxx:169; TGeoNavigator::TGeoNavigatorTGeoNavigator()global mode is caching enabled for parallel world safety callsDefinition TGeoNavigator.cxx:57; TGeoNavigator::SetCurrentDirectionvoid SetCurrentDirection(const Double_t *dir)Definition TGeoNavigator.h:185; TGeoNavigator::BuildCachevoid BuildCache(Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE)Builds the cache for physical nodes and global matrices.Definition TGeoNavigator.cxx:182; TGeoNavigator::fNextDaughterIndexInt_t fNextDaughterIndexnumber of overlapping nodes on current branchDefinition TGeoNavigator.h:57; TGeoNavigator::PopPathBool_t PopPath(Int_t index)Definition TGeoNavigator.h:255; TGeoNavigator::fIsNullStepBool_t fIsNullStepflag that a new point is in the same node as previousDefinition TGeoNavigator.h:71; TGeoNavigator::SetLastSafetyForPointvoid SetLastSafetyForPoint(Double_t safe, const Double_t *point)Definition TGeoNavigator.h:194; TGeoNavigator::CdNodevoid CdNode(Int_t nodeid)Change current path to point to the node having this id.Definition TGeoNavigator.cxx:301; TGeoNavigator::IsCurrentOverl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:31635,safe,safety,31635,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['safe'],['safety']
Safety,"r::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoChecker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TGeoChecker.h. ◆ Test(). void TGeoChecker::Test ; (; Int_t ; npoints, . Option_t * ; option . ). Check time of finding ""Where am I"" for n points. ; Definition at line 2709 of file TGeoChecker.cxx. ◆ TestOverlaps(). void TGeoChecker::TestOverlaps ; (; const char * ; path). Geometry overlap checker based on sampling. ; Definition at line 2761 of file TGeoChecker.cxx. ◆ TestVoxels(). Bool_t TGeoChecker::TestVoxels ; (; TGeoVolume * ; vol, . Int_t ; npoints = 1000000 . ). Returns optimal voxelization type for volume vol. . kFALSE - cartesian; kTRUE - cylindrical . Definition at line 3008 of file TGeoChecker.cxx. ◆ TimingPerVolume(). Double_t TGeoChecker::TimingPerVolume ; (; TGeoVolume * ; vol). private . Compute timing per ""FindNextBoundary"" + ""Safety"" call. ; Volume must be in the current path. ; Definition at line 741 of file TGeoChecker.cxx. ◆ Weight(). Double_t TGeoChecker::Weight ; (; Double_t ; precision = 0.01, . Option_t * ; option = ""v"" . ). Estimate weight of top level volume with a precision SIGMA(W)/W better than PRECISION. ; Option can be ""v"" - verbose (default). ; Definition at line 2890 of file TGeoChecker.cxx. Member Data Documentation. ◆ fBuff1. TBuffer3D* TGeoChecker::fBuff1. private . Definition at line 42 of file TGeoChecker.h. ◆ fBuff2. TBuffer3D* TGeoChecker::fBuff2. private . Definition at line 43 of file TGeoChecker.h. ◆ fFlags. Bool_t* TGeoChecker::fFlags. private . Array of timing per volume. ; Definition at line 47 of file TGeoChecker.h. ◆ fFullCheck. Bool_t TGeoChecker::fFullCheck. private . Definition at line 44 of file TGeoChecker.h. ◆ fGeoManager. TGeoManager* TGeoChecker::fGeoManager. private . Definition at line 40 of file TGeoChecker.h. ◆ fNchecks. Int_t TGeoChecker::fNchecks. p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:29495,Safe,Safety,29495,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['Safe'],['Safety']
Safety,"r::fIsStepEntering. private . flag that current track is about to leave current node ; Definition at line 66 of file TGeoNavigator.h. ◆ fIsStepExiting. Bool_t TGeoNavigator::fIsStepExiting. private . flag that next geometric step will enter new volume ; Definition at line 67 of file TGeoNavigator.h. ◆ fLastNode. TGeoNode* TGeoNavigator::fLastNode. private . top physical node ; Definition at line 77 of file TGeoNavigator.h. ◆ fLastPoint. Double_t TGeoNavigator::fLastPoint[3]. private . current direction ; Definition at line 51 of file TGeoNavigator.h. ◆ fLastPWSafety. Double_t TGeoNavigator::fLastPWSafety {-1}. private . last point for which parallel world safety was ""evaluated"" ; Definition at line 53 of file TGeoNavigator.h. ◆ fLastPWSaftyPnt. Double_t TGeoNavigator::fLastPWSaftyPnt[3]. private . last point for which safety was computed ; Definition at line 52 of file TGeoNavigator.h. ◆ fLastSafety. Double_t TGeoNavigator::fLastSafety. private . safety radius from current point ; Definition at line 45 of file TGeoNavigator.h. ◆ fLevel. Int_t TGeoNavigator::fLevel. private . thread id for this navigator ; Definition at line 55 of file TGeoNavigator.h. ◆ fNextDaughterIndex. Int_t TGeoNavigator::fNextDaughterIndex. private . number of overlapping nodes on current branch ; Definition at line 57 of file TGeoNavigator.h. ◆ fNextNode. TGeoNode* TGeoNavigator::fNextNode. private . last searched node ; Definition at line 78 of file TGeoNavigator.h. ◆ fNmany. Int_t TGeoNavigator::fNmany. private . current geometry level; ; Definition at line 56 of file TGeoNavigator.h. ◆ fNormal. Double_t TGeoNavigator::fNormal[3]. private . last computed safety radius ; Definition at line 46 of file TGeoNavigator.h. ◆ fOverlapClusters. Int_t* TGeoNavigator::fOverlapClusters. private . current recursive position in fOverlapClusters ; Definition at line 60 of file TGeoNavigator.h. ◆ fOverlapMark. Int_t TGeoNavigator::fOverlapMark. private . current size of fOverlapClusters ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:49165,safe,safety,49165,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safety']
Safety,"r; Ssiz_tfExtentLength of TSubString; TString&fStrReferenced string. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.fData[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.fData[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. Ssiz_t Length() const; { return fNchars; }. char & operator[](Ssiz_t i); { return ((char*)(this+1))[i]; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. void SubStringError(Ssiz_t , Ssiz_t , Ssiz_t ) const. void AssertElement(Ssiz_t i) const. TSubString(const TSubString& s); { }. TSubString & operator=(const char* s). TSubString & operator=(const TString& s). char & operator()(Ssiz_t i). Ssiz_t Start() const; { return fBegin; }. void ToLower(). void ToUpper(). Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. int operator!() const; { return fBegin == kNPOS; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TString.h 34285 2010-07-01 20:37:52Z rdm $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSubString.html:2578,detect,detecting,2578,root/html528/TSubString.html,https://root.cern,https://root.cern/root/html528/TSubString.html,1,['detect'],['detecting']
Safety,"r<RangeSet> (dim) ); 47 {}; 48 ; 49 /**; 50 construct a range for [xmin, xmax]; 51 */; 52 DataRange(double xmin, double xmax);; 53 ; 54 /**; 55 construct a range for [xmin, xmax] , [ymin, ymax]; 56 */; 57 DataRange(double xmin, double xmax, double ymin, double ymax);; 58 /**; 59 construct a range for [xmin, xmax] , [ymin, ymax] , [zmin, zmax]; 60 */; 61 DataRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax);; 62 /**; 63 get range dimension; 64 */; 65 unsigned int NDim() const { return fRanges.size(); }; 66 ; 67 /**; 68 return range size for coordinate icoord (starts from zero); 69 Size == 0 indicates no range is present [-inf, + inf]; 70 */; 71 unsigned int Size(unsigned int icoord = 0) const {; 72 return icoord < fRanges.size() ? fRanges[icoord].size() : 0;; 73 }; 74 ; 75 /**; 76 return true if a range has been set in any of the coordinates; 77 i.e. when it is not [-inf,+inf] for all coordinates; 78 Avoid in case of multi-dim to loop on all the coordinated and ask the size; 79 */; 80 bool IsSet() const {; 81 for (unsigned int icoord = 0; icoord < fRanges.size(); ++icoord); 82 if (!fRanges[icoord].empty()) return true;; 83 return false;; 84 }; 85 ; 86 /**; 87 return the vector of ranges for the coordinate icoord; 88 */; 89 const RangeSet & Ranges(unsigned int icoord = 0) const {; 90 // return icoord < fRanges.size() ? fRanges[icoord] : RangeSet();; 91 return fRanges.at(icoord);; 92 }; 93 ; 94 /**; 95 return the i-th range for the coordinate icoord.; 96 Useful method when only one range is present for the given coordinate; 97 */; 98 std::pair<double, double> operator() (unsigned int icoord = 0,unsigned int irange = 0) const;; 99 ; 100 /**; 101 get the i-th range for given coordinate. If range does not exist; 102 return -inf, +inf; 103 */; 104 void GetRange(unsigned int irange, unsigned int icoord, double & xmin, double & xmax) const {; 105 if (Size(icoord)<= irange) GetInfRange(xmin,xmax);; 106 else {; 107 xmin = fRanges[icoord][irang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataRange_8h_source.html:2374,Avoid,Avoid,2374,doc/master/DataRange_8h_source.html,https://root.cern,https://root.cern/doc/master/DataRange_8h_source.html,1,['Avoid'],['Avoid']
Safety,"r=""r""); ; # Adjust frame maximum for visual clarity; frame1.SetMinimum(0); frame1.SetMaximum(3); ; # Construct profile likelihood in sigma_g2; # -------------------------------------------------------------------------------; ; # The profile likelihood estimator on nll for sigma_g2 will minimize nll; # w.r.t all floating parameters except sigma_g2 for each evaluation; pll_sigmag2 = nll.createProfile({sigma_g2}); ; # Plot the profile likelihood in sigma_g2; pll_sigmag2.plotOn(frame2, LineColor=""r""); ; # Adjust frame maximum for visual clarity; frame2.SetMinimum(0); frame2.SetMaximum(3); ; # Make canvas and draw ROOT.RooPlots; c = ROOT.TCanvas(""rf605_profilell"", ""rf605_profilell"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); frame1.GetYaxis().SetTitleOffset(1.4); frame1.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.4); frame2.Draw(); ; c.SaveAs(""rf605_profilell.png""); [#0] WARNING:InputArguments -- The parameter 'sigma_g1' with range [-inf, inf] of the RooGaussian 'g1' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; Minuit2Minimizer: Minimize with max-calls 1500 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = 2659.73712858695399; Edm = 0.000190395763129910388; Nfcn = 60; frac = 0.62118 +/- 0.165788 (limited); mean = 0.00442366 +/- 0.109372 (limited); sigma_g2 = 4.10789 +/- 0.405468 (limited); [#1] INFO:Minimization -- RooProfileLL::evaluate(RooEvaluatorWrapper_Profile[frac]) Creating instance of MINUIT; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf605__profilell_8py.html:3020,safe,safe,3020,doc/master/rf605__profilell_8py.html,https://root.cern,https://root.cern/doc/master/rf605__profilell_8py.html,1,['safe'],['safe']
Safety,"r>(this->end()));; 831 ; 832 // Copy the existing elements that get replaced.; 833 std::move_backward(I, OldEnd - NumToInsert, OldEnd);; 834 ; 835 std::fill_n(I, NumToInsert, Elt);; 836 return I;; 837 }; 838 ; 839 // Otherwise, we're inserting more elements than exist already, and we're; 840 // not inserting at the end.; 841 ; 842 // Move over the elements that we're about to overwrite.; 843 T *OldEnd = this->end();; 844 this->set_size(this->size() + NumToInsert);; 845 size_t NumOverwritten = OldEnd - I;; 846 this->uninitialized_move(I, OldEnd, this->end() - NumOverwritten);; 847 ; 848 // Replace the overwritten part.; 849 std::fill_n(I, NumOverwritten, Elt);; 850 ; 851 // Insert the non-overwritten middle part.; 852 std::uninitialized_fill_n(OldEnd, NumToInsert - NumOverwritten, Elt);; 853 return I;; 854 }; 855 ; 856 template <typename ItTy,; 857 typename = typename std::enable_if<std::is_convertible<; 858 typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type>; 859 iterator insert(iterator I, ItTy From, ItTy To); 860 {; 861 // Convert iterator to elt# to avoid invalidating iterator when we reserve(); 862 size_t InsertElt = I - this->begin();; 863 ; 864 if (I == this->end()) { // Important special case for empty vector.; 865 append(From, To);; 866 return this->begin() + InsertElt;; 867 }; 868 ; 869 if (I < this->begin() || I > this->end()) {; 870 throw std::runtime_error(""The iterator passed to `insert` is out of bounds."");; 871 }; 872 ; 873 size_t NumToInsert = std::distance(From, To);; 874 ; 875 // Ensure there is enough space.; 876 reserve(this->size() + NumToInsert);; 877 ; 878 // Uninvalidate the iterator.; 879 I = this->begin() + InsertElt;; 880 ; 881 // If there are more elements between the insertion point and the end of the; 882 // range than there are being inserted, we can use a simple approach to; 883 // insertion. Since we already reserved space, we know that this won't; 884 // reallocate the vector.; 885 if (size",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:30331,avoid,avoid,30331,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['avoid'],['avoid']
Safety,"rEntry; TGNumberEntryLayout Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:83633,safe,safe,83633,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['safe'],['safe']
Safety,"rGroup_t * GetGroupInfo(const char* group = 0); Returns all group info in the UserGroup_t structure. The only active; fields in the UserGroup_t structure for this call are:; fGid and fGroup; If group = 0, returns current user's group. The returned structure; must be deleted by the user. In case of error 0 is returned. void Setenv(const char* name, const char* value); Set environment variable. The string passed will be owned by; the environment and can not be reused till a ""name"" is set; again. The solution below will lose the space for the string; in that case, but if this functions is not called thousands; of times that should not be a problem. const char * Getenv(const char* name); Get environment variable. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* shellcmd, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; This function saves internally the current state into a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:30130,Abort,Abort,30130,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,6,['Abort'],['Abort']
Safety,"rJSON.cxx. ◆ SetTypeversionTag(). void TBufferJSON::SetTypeversionTag ; (; const char * ; tag = nullptr). Configures _typeversion tag in JSON One can specify name of the JSON tag like ""_typeversion"" or ""$tv"" which will be used to store class version Such tag can be used to correctly recover objects from JSON If empty string is provided (default), class version will not be stored. ; Definition at line 592 of file TBufferJSON.cxx. ◆ SkipObjectAny(). void TBufferJSON::SkipObjectAny ; (; ). finalvirtual . Skip any kind of object from buffer. ; Implements TBuffer.; Definition at line 2508 of file TBufferJSON.cxx. ◆ Stack(). TJSONStackObj * TBufferJSON::Stack ; (; ). inlineprotected . Definition at line 257 of file TBufferJSON.h. ◆ StoreObject(). TString TBufferJSON::StoreObject ; (; const void * ; obj, . const TClass * ; cl . ). Store provided object as JSON structure Allows to configure different TBufferJSON properties before converting object into JSON Actual object class must be specified here Method can be safely called once - after that TBufferJSON instance must be destroyed Code should look like: ; auto obj = new UserClass(); TBufferJSON buf; buf.SetCompact(TBufferJSON::kNoSpaces); // change any other settings in TBufferJSON auto json = buf.StoreObject(obj, TClass::GetClass<UserClass>()); ; Definition at line 700 of file TBufferJSON.cxx. ◆ Streamer(). void TBufferJSON::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TBufferIO. ◆ StreamerNVirtual(). void TBufferJSON::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 332 of file TBufferJSON.h. ◆ StreamObject() [1/4]. void TBufferText::StreamObject ; (; TObject * ; obj). overridevirtual . Implements TBuffer.; Definition at line 33 of file TBufferText.cxx. ◆ StreamObject() [2/4]. void TBufferText::StreamObject ; (; void * ; obj, . const char * ; className, . const TClass * ; onFileClass = nullptr . ). overridevirtual . s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:86832,safe,safely,86832,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['safe'],['safely']
Safety,"r_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TShape.html:8940,avoid,avoid,8940,root/html534/TShape.html,https://root.cern,https://root.cern/root/html534/TShape.html,1,['avoid'],['avoid']
Safety,"ractive) {; 1263 fInteractive->AddPoint(stepCount, trainingError, testError);; 1264 fIPyCurrentIter = 100.0 * minimizer.GetConvergenceCount(); 1265 / minimizer.GetConvergenceSteps ();; 1266 if (fExitFromTraining) break;; 1267 } else {; 1268 Log() << std::setw(10) << stepCount << "" | ""; 1269 << std::setw(12) << trainingError; 1270 << std::setw(12) << testError; 1271 << std::setw(12) << nFlops / seconds; 1272 << std::setw(12) << minimizer.GetConvergenceCount() << Endl;; 1273 if (converged) {; 1274 Log() << Endl;; 1275 }; 1276 }; 1277 }; 1278 }; 1279 ; 1280 ; 1281 for (size_t l = 0; l < net.GetDepth(); l++) {; 1282 auto & layer = fNet.GetLayer(l);; 1283 layer.GetWeights() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetWeights();; 1284 layer.GetBiases() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetBiases();; 1285 }; 1286 }; 1287 ; 1288#else // DNNCPU flag not set.; 1289 Log() << kFATAL << ""Multi-core CPU backend not enabled. Please make sure ""; 1290 ""you have a BLAS implementation and it was successfully ""; 1291 ""detected by CMake as well that the imt CMake flag is set."" << Endl;; 1292#endif // DNNCPU; 1293}; 1294 ; 1295////////////////////////////////////////////////////////////////////////////////; 1296 ; 1297Double_t TMVA::MethodDNN::GetMvaValue( Double_t* /*errLower*/, Double_t* /*errUpper*/ ); 1298{; 1299 size_t nVariables = GetEvent()->GetNVariables();; 1300 Matrix_t X(1, nVariables);; 1301 Matrix_t YHat(1, 1);; 1302 ; 1303 const std::vector<Float_t>& inputValues = GetEvent()->GetValues();; 1304 for (size_t i = 0; i < nVariables; i++) {; 1305 X(0,i) = inputValues[i];; 1306 }; 1307 ; 1308 fNet.Prediction(YHat, X, fOutputFunction);; 1309 return YHat(0,0);; 1310}; 1311 ; 1312////////////////////////////////////////////////////////////////////////////////; 1313 ; 1314const std::vector<Float_t> & TMVA::MethodDNN::GetRegressionValues(); 1315{; 1316 size_t nVariables = GetEvent()->GetNVariables();; 1317 Matrix_t X(1, nVariables);; 1318 ; 1319 const Event *ev = GetEvent();; 1320 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:46561,detect,detected,46561,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['detect'],['detected']
Safety,"rame (TThreadframe.h, TThreadframe.cxx) is a simple example of a framework class managing up to four threaded methods. Class TMhs3 (TMhs3.h, TMhs3.cxx) inherits from this base class, showing the mhs3 example 8.1 (mhs3.h, mhs3.cxx)within a class. The Makefile of this example builds the shared libraries libTThreadframe.so and libTMhs3.so. These are either loaded or executed by the ROOT script TMhs3demo.C, or are linked against an executable: TMhs3run.cxx.; 23.3.1 Known Problems; Parts of the ROOT framework, like the interpreter, are not yet thread-safe. Therefore, you should use this package with caution. If you restrict your threads to distinct and `simple’ duties, you will able to benefit from their use. The TThread class is available on all platforms, which provide a POSIX compliant thread implementation. On Linux, Xavier Leroy’s Linux Threads implementation is widely used, but the TThread implementation should be usable on all platforms that provide pthread.; Linux Xlib on SMP machines is not yet thread-safe. This may cause crashes during threaded graphics operations; this problem is independent of ROOT.; Object instantiation: there is no implicit locking mechanism for memory allocation and global ROOT lists. The user has to explicitly protect their code when using them.; 23.4 The Signals of ROOT; The list of default signals handled by ROOT is:; kSigChildkSigPipe; kSigBuskSigAlarm; kSigSegmentationViolationkSigUrgent; kSigIllegalInstructionkSigFloatingException; kSigSystemkSigWindowChanged; The signals kSigFloatingException, kSigSegmentationViolation, kSigIllegalInstruction, and kSigBus cause the printing of the *** Break *** message and make a long jump back to the ROOT prompt. No other custom TSignalHandler can be added to these signals.; The kSigAlarm signal handles asynchronous timers. The kSigWindowChanged signal handles the resizing of the terminal window. The other signals have no other behavior then that to call any registered TSignalHandler::Notify().; Wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1117479,safe,safe,1117479,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['safe'],['safe']
Safety,"rame to top. ;  ; void PopDummy (Int_t ipop=9999);  ; Bool_t PopPath ();  ; Bool_t PopPath (Int_t index);  ; Bool_t PopPoint ();  ; Bool_t PopPoint (Int_t index);  ; Int_t PushPath (Int_t startlevel=0);  ; Int_t PushPoint (Int_t startlevel=0);  ; void ResetAll ();  Reset the navigator. ;  ; void ResetState ();  Reset current state flags. ;  ; Double_t Safety (Bool_t inside=kFALSE);  Compute safe distance from the current point. ;  ; TGeoNode * SearchNode (Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr);  Returns the deepest node containing fPoint, which must be set a priori. ;  ; void SetCheckingOverlaps (Bool_t flag=kTRUE);  ; void SetCldirChecked (Double_t *dir);  ; void SetCurrentDirection (const Double_t *dir);  ; void SetCurrentDirection (Double_t nx, Double_t ny, Double_t nz);  ; void SetCurrentPoint (const Double_t *point);  ; void SetCurrentPoint (Double_t x, Double_t y, Double_t z);  ; void SetLastPoint (Double_t x, Double_t y, Double_t z);  ; void SetLastSafetyForPoint (Double_t safe, const Double_t *point);  ; void SetLastSafetyForPoint (Double_t safe, Double_t x, Double_t y, Double_t z);  ; void SetOutside (Bool_t flag=kTRUE);  ; void SetStartSafe (Bool_t flag=kTRUE);  ; void SetStep (Double_t step);  ; TGeoNode * Step (Bool_t is_geom=kTRUE, Bool_t cross=kTRUE);  Make a rectiliniar step of length fStep from current point (fPoint) on current direction (fDirection). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TopToMaster (const Double_t *top, Double_t *master) const;  Convert coordinates from top volume frame to master. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:8759,safe,safe,8759,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,2,['safe'],['safe']
Safety,"rameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Likelihood method*-*-*-*-*-*; Basically, it forms the likelihood by determining the Poisson; probability that given a number of entries in a particular bin,; the fit would predict it's value. This is then done for each bin,; and the sum of the logs is taken as the likelihood.; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:16180,predict,predict,16180,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,6,['predict'],['predict']
Safety,"ranch address before filling the branch again.; This is done via the TBranch::SetAddress member function. ==> tree->Fill(); loops on all defined branches and for each branch invokes the Fill function. See also the class TNtuple (a simple Tree with only one branch). /*. */. A simple example with histograms and a tree*-*-*-; *-* ===========================================. This program creates :; - a one dimensional histogram; - a two dimensional histogram; - a profile histogram; - a tree. These objects are filled with some random numbers and saved on a file. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h"". //______________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");. // Create some histograms and a profile histogram; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; TH2F *hpxpy = new TH2F(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile *hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);. // Define some simple structures; typedef struct {Float_t x,y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; static POINT point;; static EVENTN eventn;. // Create a ROOT Tree; TTree *tree = new TTree(""T"",""An example of ROOT tree with a few branches"");; tree->Branch(""point"",&point,""x:y:z"");; tree->Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree->Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;; static Float_t p[3];. //-----------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:5155,detect,detector,5155,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['detect'],['detector']
Safety,"rap::GetMakeRuntimeShape ; (; TGeoShape * ; mother, . TGeoMatrix * ; mat . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ GetPhi(). Double_t TGeoTrap::GetPhi ; (; ); const. inline . Definition at line 131 of file TGeoArb8.h. ◆ GetTheta(). Double_t TGeoTrap::GetTheta ; (; ); const. inline . Definition at line 130 of file TGeoArb8.h. ◆ GetTl1(). Double_t TGeoTrap::GetTl1 ; (; ); const. inline . Definition at line 134 of file TGeoArb8.h. ◆ GetTl2(). Double_t TGeoTrap::GetTl2 ; (; ); const. inline . Definition at line 138 of file TGeoArb8.h. ◆ IsA(). TClass * TGeoTrap::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoArb8.; Definition at line 146 of file TGeoArb8.h. ◆ Safety(). Double_t TGeoTrap::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ Safety_v(). void TGeoTrap::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ SavePrimitive(). void TGeoTrap::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoArb8. ◆ SetDimensions(). void TGeoTrap::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoArb8. ◆ Streamer(). void TGeoTrap::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoArb8. ◆ StreamerNVirtual(). void TGeoTrap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 146 of file TGeoArb8.h. Member Data Documentation. ◆ fAlpha1. Double_t TGeoTrap::fAlpha1. protected . Definition at line 104 of file TGeoArb8.h. ◆ fAlpha2. Double_t TGeoTrap::fAlpha2. protected . Definition at line 108 of file TGeoArb8.h. ◆ fBl1. Double_t TGeoTrap::fBl1. protected . Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrap.html:29378,safe,safe,29378,doc/master/classTGeoTrap.html,https://root.cern,https://root.cern/doc/master/classTGeoTrap.html,1,['safe'],['safe']
Safety,"raphicsLibs()Static method.Definition TApplication.cxx:235; TApplication::ParseRemoteLinestatic Int_t ParseRemoteLine(const char *ln, TString &hostdir, TString &user, Int_t &dbg, TString &script)Parse the content of a line starting with "".R"" (already stripped-off) The format is.Definition TApplication.cxx:1419; TApplication::fIdleTimerTTimer * fIdleTimerDefinition TApplication.h:69; TApplication::IsCmdThreadvirtual Bool_t IsCmdThread()Definition TApplication.h:135; TApplication::lsvoid ls(Option_t *option="""") const overrideShow available sessions.Definition TApplication.cxx:2087; TApplication::Raisevirtual void Raise()Definition TApplication.h:133; TApplication::fArgcInt_t fArgcDefinition TApplication.h:58; TApplication::fNoLogBool_t fNoLogDefinition TApplication.h:63; TApplication::fNoLogoBool_t fNoLogoDefinition TApplication.h:64; TApplication::GetSetupTString GetSetup()It gets the ROOT installation setup as TString.Definition TApplication.cxx:967; TApplication::HandleIdleTimervirtual void HandleIdleTimer()Handle idle timeout.Definition TApplication.cxx:577; TApplication::WorkingDirectoryconst char * WorkingDirectory() constDefinition TApplication.h:147; TApplication::QuitOptBool_t QuitOpt() constDefinition TApplication.h:145; TApplication::fSigHandlerTSignalHandler * fSigHandlerDefinition TApplication.h:70; TApplication::ArgcInt_t Argc() constDefinition TApplication.h:140; TApplication::ProcessRemotevirtual Longptr_t ProcessRemote(const char *line, Int_t *error=nullptr)Process the content of a line starting with "".R"" (already stripped-off) The format is.Definition TApplication.cxx:1485; TApplication::fAppRemoteTApplication * fAppRemoteDefinition TApplication.h:80; TApplication::Showvirtual void Show()Definition TApplication.h:129; TApplication::SetSignalHandlervoid SetSignalHandler(TSignalHandler *sh)Definition TApplication.h:92; TApplication::fArgvchar ** fArgvDefinition TApplication.h:59; TListA doubly linked list.Definition TList.h:38; TObjArrayAn array of TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:19743,timeout,timeout,19743,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['timeout'],['timeout']
Safety,"rated using a linear congruential random generator. The multipliers used are the same of the BSD rand() random generator. Its sequence is:; \(x_{n+1} = (ax_n + c) mod m\) with \(a =1103515245\), \(c = 12345\) and \(m =2^{31}\).; This type of generator uses a state of only a 32 bit integer and it has a very short period, 231,about 109, which can be exhausted in just few seconds. The quality of this generator is therefore BAD and it is strongly recommended to NOT use for any statistical study.; 13.4.2 TRandom1; This random number generator is based on the Ranlux engine, developed by M. Lüsher and implemented in Fortran by F. James. This engine has mathematically proven random proprieties and a long period of about 10171. Various luxury levels are provided (1,2,3,4) and can be specified by the user in the constructor. Higher the level, better random properties are obtained at a price of longer CPU time for generating a random number. The level 3 is the default, where any theoretical possible correlation has very small chance of being detected. This generator uses a state of 24 32-bits words. Its main disadvantage is that is much slower than the others (see timing table). For more information on the generator see the following article:. F. James, “RANLUX: A Fortran implementation of the high quality pseudo-random number generator of Lüscher”, Computer Physics Communication, 79 (1994) 111. 13.4.3 TRandom2; This generator is based on the maximally equi-distributed combined Tausworthe generator by L’Ecuyer. It uses only 3 32-bits words for the state and it has a period of about 1026. It is fast and given its small states, it is recommended for applications, which require a very small random number size. For more information on the generator see the following article:. P. L’Ecuyer, “Maximally Equi-distributed Combined Tausworthe Generators”, Mathematics of Computation, 65, 213 (1996), 203-213. 13.4.4 TRandom3; This is based on the Mersenne and Twister pseudo-random number g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:666505,detect,detected,666505,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['detect'],['detected']
Safety,"ration, if RooRealIntegral considers this to be unsafe (e.g. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Create a generator context for this p.d.f. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise capability to perform (analytical) integrals internally. ;  ; virtual Int_t getCoefAnalyticalIntegral (Int_t coef, RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Default implementation of function advertising integration capabilities. ;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet &nset, const char *rangeName) const;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet *nset=nullptr, const char *rangeName=nullptr) const;  ; bool isDirectGenSafe (const RooAbsArg &arg) const override;  Return true if it is safe to generate the convolution observable from the internal generator (this is the case if the chosen resolution model is the truth model) ;  ; void printMultiline (std::ostream &stream, Int_t contents, bool verbose=false, TString indent="""") const override;  Print info about this object to the specified stream. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components with cache-and-track. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDecay.html:6790,safe,safe,6790,doc/master/classRooDecay.html,https://root.cern,https://root.cern/doc/master/classRooDecay.html,1,['safe'],['safe']
Safety,"rator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*&); virtual Int_tRecv(Int_t&, Int_t&); virtual Int_tRecv(char*, Int_t); virtual Int_tRecv(char*, Int_t, Int_t&); virtual Int_tRecvRaw(void*, Int_t, ESendRecvOptions = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage&); virtual Int_tSend(Int_t); virtual Int_tSend(Int_t, Int_t); virtual Int_tSend(const char*, Int_t = kMESS_STRING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecConte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TServerSocket.html:6039,timeout,timeout,6039,root/html530/TServerSocket.html,https://root.cern,https://root.cern/root/html530/TServerSocket.html,3,['timeout'],['timeout']
Safety,"rator new[](size_t sz, void *vp)TObjectinline; operator=(const TGeoManager &)=deleteTGeoManagerprotected; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; OptimizeVoxels(const char *filename=""tgeovox.C"")TGeoManager; Paint(Option_t *option="""")TObjectvirtual; Parse(const char *expr, TString &expr1, TString &expr2, TString &expr3)TGeoManagerstatic; Pop()TObjectvirtual; PopDummy(Int_t ipop=9999)TGeoManagerinline; PopPath()TGeoManagerinline; PopPath(Int_t index)TGeoManagerinline; PopPoint()TGeoManagerinline; PopPoint(Int_t index)TGeoManagerinline; Print(Option_t *option="""") const overrideTNamedvirtual; PrintOverlaps() constTGeoManager; PushPath(Int_t startlevel=0)TGeoManagerinline; PushPoint(Int_t startlevel=0)TGeoManagerinline; RandomPoints(const TGeoVolume *vol, Int_t npoints=10000, Option_t *option="""")TGeoManager; RandomRays(Int_t nrays=1000, Double_t startx=0, Double_t starty=0, Double_t startz=0, const char *target_vol=nullptr, Bool_t check_norm=kFALSE)TGeoManager; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj)TObjectvirtual; RefreshPhysicalNodes(Bool_t lock=kTRUE)TGeoManager; RegisterMatrix(const TGeoMatrix *matrix)TGeoManager; RemoveMaterial(Int_t index)TGeoManager; RemoveNavigator(const TGeoNavigator *nav)TGeoManager; ReplaceVolume(TGeoVolume *vorig, TGeoVolume *vnew)TGeoManager; ResetBit(UInt_t f)TObjectinline; ResetState()TGeoManager; ResetUserData()TGeoManager; RestoreMasterVolume()TGeoManager; Safety(Bool_t inside=kFALSE)TGeoManager; SamplePoints(Int_t npoints, Double_t &dist, Double_t epsil=1E-5, const char *g3path="""")TGeoManager; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SaveAttributes(const char *filename=""tgeoatt.C"")TGeoManager; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SearchNode(Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr)TGeoManager; SelectTrackingMedia()TGeoManager; SetAlignableEntry(const char *unique_name, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager-members.html:23210,Safe,Safety,23210,doc/master/classTGeoManager-members.html,https://root.cern,https://root.cern/doc/master/classTGeoManager-members.html,1,['Safe'],['Safety']
Safety,"rator*() const; virtual TIterator&operator=(const TIterator& rhs); TTreeFriendLeafIter&operator=(const TTreeFriendLeafIter& rhs); Bool_tTIterator::operator==(const TIterator& other) const; virtual voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TTreeFriendLeafIter(const TTreeFriendLeafIter& iter); TTreeFriendLeafIter(const TTree* t, Bool_t dir = kIterForward). protected:. TTreeFriendLeafIter(). Data Members; protected:. Bool_tfDirectioniteration direction; TIterator*fLeafItercurrent leaf sub-iterator.; TTree*fTreetree being iterated; TIterator*fTreeItercurrent tree sub-iterator. Class Charts. Inheritance Chart:. TIterator. ←; TTreeFriendLeafIter. Function documentation; TTreeFriendLeafIter(const TTree* t, Bool_t dir = kIterForward); Create a new iterator. By default the iteration direction; is kIterForward. To go backward use kIterBackward. TTreeFriendLeafIter(const TTreeFriendLeafIter& iter); Copy constructor. Does NOT copy the 'cursor' location!. TIterator& operator=(const TIterator& rhs); Overridden assignment operator. Does NOT copy the 'cursor' location!. TTreeFriendLeafIter& operator=(const TTreeFriendLeafIter& rhs); Overridden assignment operator. Does NOT copy the 'cursor' location!. TObject* Next(); Go the next friend element. Option_t* GetOption() const; Returns the object option stored in the list. void Reset(Option_t* option = """"). TTreeFriendLeafIter(); { }. ~TTreeFriendLeafIter(); { SafeDelete(fLeafIter); SafeDelete(fTreeIter); }. const TCollection * GetCollection() const; { return 0; }. TObject * operator*() const; TODO: Implement me. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeFriendLeafIter.html:2333,Safe,SafeDelete,2333,root/html602/TTreeFriendLeafIter.html,https://root.cern,https://root.cern/root/html602/TTreeFriendLeafIter.html,2,['Safe'],['SafeDelete']
Safety,"rator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tProcessEvents(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTTimer::Remove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTTimer::Reset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTTimer::SetCommand(const char* command); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTTimer::SetInterruptSyscalls(Bool_t set = kTRUE); voidTTimer::SetObject(TObject* object); static voidTObject::SetObjectStat(Bool_t stat); voidTTimer::SetTime(Long_t milliSec); voidTTimer::SetTimerID(UInt_t id = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); static voidTTimer::SingleShot(Int_t milliSec, const char* receiver_class, void* receiver, const char* method); virtual voidTTimer::Start(Long_t milliSec = -1, Bool_t singleShot = kFALSE); virtual voidTTimer::Stop(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTTimer::Timeout()SIGNAL ; virtual voidTTimer::TurnOff()SIGNAL ; virtual voidTTimer::TurnOn()SIGNAL ; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProcessEventTimer.html:8652,Timeout,Timeout,8652,root/html528/TProcessEventTimer.html,https://root.cern,https://root.cern/root/html528/TProcessEventTimer.html,1,['Timeout'],['Timeout']
Safety,"rator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.0861399 cHl3=-9.50561 cHq3=0.0801661; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-0.675078, denominator=wrap_pdf_Int[pTV]=86190.2; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.186765 cHl3=8.8591 cHq3=-0.971282; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-6.32705, denominator=wrap_pdf_Int[pTV]=46316; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.218731 cHl3=0.37397 cHq3=-2.08166; RooAbsPdf::wrap_pdf_over_wrap_pd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:10327,recover,recover,10327,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['recover'],['recover']
Safety,"ratorOptions.h. Public Member Functions;  BaseIntegratorOptions (const BaseIntegratorOptions &opt);  ; virtual ~BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; double AbsTolerance () const;  non-static methods for retrieving options ;  ; IOptions * ExtraOptions () const;  return extra options ;  ; virtual std::string Integrator () const =0;  name of 1D integrator ;  ; BaseIntegratorOptions & operator= (const BaseIntegratorOptions &opt);  assignment operators ;  ; double RelTolerance () const;  absolute tolerance ;  ; void SetAbsTolerance (double tol);  non-static methods for setting options ;  ; void SetExtraOptions (const IOptions &opt);  set extra options (in this case pointer is cloned) ;  ; void SetRelTolerance (double tol);  set the relative tolerance ;  ; void SetWKSize (unsigned int size);  set workspace size ;  ; unsigned int WKSize () const;  size of the workspace ;  . Protected Member Functions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  . Protected Attributes; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:1612,avoid,avoid,1612,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,1,['avoid'],['avoid']
Safety,"raw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }. TBranch* BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch() with added check that addobj matches className. See TTree::Branch() for other details. TBranch* BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. TBranch* BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. TBranch* BranchImpRef(const char* branchname, TClass* ptrClass, EDataType datatype, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. Int_t Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); Deprecated function. Use next function instead. Int_t Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); Create one branch for each element in the collection. Each entry in the collection becomes a top level branch if the; corresponding class is not a collection. If it is a collection, the entry; in the collection becomes in turn top level branches, etc.; The splitlevel is decreased by 1 every time a new collection is found.; For example if list is a TObjArray*; - if splitlevel = 1, one top level branch is created for each element; of the TObjArray.; - if splitlevel = 2, one top level branch is created for each array element.; if, in turn, one of the array elements is a TCollection, one top level; branch will be created for each elemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:43384,detect,detection,43384,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,4,['detect'],['detection']
Safety,"raw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }. TBranch* BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch() with added check that addobj matches className. See TTree::Branch() for other details. TBranch* BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. TBranch* BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. TBranch* BranchImpRef(const char* branchname, TClass* ptrClass, EDataType datatype, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. Int_t Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99); Deprecated function. Use next function instead. Int_t Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"); Create one branch for each element in the collection. Each entry in the collection becomes a top level branch if the; corresponding class is not a collection. If it is a collection, the entry; in the collection becomes in turn top level branches, etc.; The splitlevel is decreased by 1 everytime a new collection is found.; For example if list is a TObjArray*; - if splitlevel = 1, one top level branch is created for each element; of the TObjArray.; - if splitlevel = 2, one top level branch is created for each array element.; if, in turn, one of the array elements is a TCollection, one top level; branch will be created for each element",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:41238,detect,detection,41238,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['detect'],['detection']
Safety,"rawn but its sons are drawn; VT1_1->SetVisibility(-4); //Node is not drawn. Its immediate sons are drawn; VT2_1->SetVisibility(-4);; MTL_1->SetVisibility(-4);; MTR_1->SetVisibility(-4);; TOFR1->SetVisibility(-4);; ; gBenchmark->Show(""na49"");; }; TBRIK.h; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TGeometry.h; TMaterial.h; TMixture.h; TNode.h; TRotMatrix.h; TTRAP.h; TTUBE.h; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TBRIKA box with faces perpendicular to the axes.Definition TBRIK.h:26; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TGeometryTGeometry description.Definition TGeometry.h:39; TMaterialManages a detector material.Definition TMaterial.h:28; TMixtureManages a detector mixture.Definition TMixture.h:27; TMixture::DefineElementvirtual void DefineElement(Int_t n, Float_t a, Float_t z, Float_t w)Define one mixture element.Definition TMixture.cxx:86; TNodeTNode description.Definition TNode.h:33; TNode::cdvirtual void cd(const char *path=nullptr)Change Current Reference node to this.Definition TNode.cxx:249; TNode::ImportShapeAttributesvirtual void ImportShapeAttributes()Copy shape attributes as node attributes.Definition TNode.cxx:409; TNode::SetVisibilityvirtual void SetVisibility(Int_t vis=1)Set visibility for this node and its sons.Definition TNode.cxx:758; TRotMatrixManages a detector rotation matrix.Definition TRotMatrix.h:28; TShape::SetVisibilityvirtual void SetVisibility(Int_t vis)Definition TShape.h:62; TTRAPA general trapezoid.Definition TTRAP.h:33; TTUBEA tube.Definition TTUBE.h:32; AuthorRene Brun ; Definition in file na49.C. tutorialsgeomna49.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/na49_8C.html:949142,detect,detector,949142,doc/master/na49_8C.html,https://root.cern,https://root.cern/doc/master/na49_8C.html,1,['detect'],['detector']
Safety,"ray of physical nodes; TStringTNamed::fTitleobject title; Bool_tfUseOverlapsActivated if user defined overlapping candidates; TGeoVolume*fVolume! helper volume. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParallelWorld(const char* name, TGeoManager* mgr); Default constructor. ~TGeoParallelWorld(); Destructor. void AddNode(const char* path); Add a node normally to this world. Overlapping nodes not allowed. void AddOverlap(TGeoVolume* vol, Bool_t activate = kTRUE); To use this optimization, the user should declare the full list of volumes; which may overlap with any of the physical nodes of the parallel world. Better; be done before misalignment. void AddOverlap(const char* volname, Bool_t activate = kTRUE); To use this optimization, the user should declare the full list of volumes; which may overlap with any of the physical nodes of the parallel world. Better; be done before misalignment. Int_t PrintDetectedOverlaps() const; Print the overlaps which were detected during real tracking. void ResetOverlaps() const; Reset overlapflag for all volumes in geometry. Bool_t CloseGeometry(); The main geometry must be closed. void RefreshPhysicalNodes(); Refresh the node pointers and re-voxelize. To be called mandatory in case; re-alignment happened. TGeoPhysicalNode * FindNode(Double_t* point); Finds physical node containing the point. TGeoPhysicalNode * FindNextBoundary(Double_t* point, Double_t* dir, Double_t& step, Double_t stepmax = 1.E30); Same functionality as TGeoNavigator::FindNextDaughterBoundary for the; parallel world. Double_t Safety(Double_t* point, Double_t safmax = 1.E30); Compute safety for the parallel world. void CheckOverlaps(Double_t ovlp = 0.001); Check overlaps within a tolerance value. void Draw(Option_t* option); Draw the parallel world. TGeoParallelWorld(const TGeoParallelWorld& ). TGeoParallelWorld& operator=(const TGeoParallelWorld& ). TGeoParallelWorld(); constructors. {}. void SetUseOverlaps(Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoParallelWorld.html:7872,detect,detected,7872,root/html534/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html534/TGeoParallelWorld.html,1,['detect'],['detected']
Safety,"ray of physical nodes; TStringTNamed::fTitleobject title; Bool_tfUseOverlapsActivated if user defined overlapping candidates; TGeoVolume*fVolume! helper volume. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParallelWorld(const char* name, TGeoManager* mgr); Default constructor. ~TGeoParallelWorld(); Destructor. void AddNode(const char* path); Add a node normally to this world. Overlapping nodes not allowed. void AddOverlap(TGeoVolume* vol, Bool_t activate = kTRUE); To use this optimization, the user should declare the full list of volumes; which may overlap with any of the physical nodes of the parallel world. Better; be done before misalignment. void AddOverlap(const char* volname, Bool_t activate = kTRUE); To use this optimization, the user should declare the full list of volumes; which may overlap with any of the physical nodes of the parallel world. Better; be done before misalignment. Int_t PrintDetectedOverlaps() const; Print the overlaps which were detected during real tracking. void ResetOverlaps() const; Reset overlapflag for all volumes in geometry. Bool_t CloseGeometry(); The main geometry must be closed. void RefreshPhysicalNodes(); Refresh the node pointers and re-voxelize. To be called mandatory in case; re-alignment happened. TGeoPhysicalNode * FindNode(Double_t[3] point); Finds physical node containing the point. TGeoPhysicalNode * FindNextBoundary(Double_t[3] point, Double_t[3] dir, Double_t& step, Double_t stepmax = 1.0E+30); Same functionality as TGeoNavigator::FindNextDaughterBoundary for the; parallel world. Double_t Safety(Double_t[3] point, Double_t safmax = 1.0E+30); Compute safety for the parallel world. void CheckOverlaps(Double_t ovlp = 0.001); Check overlaps within a tolerance value. void Draw(Option_t* option); Draw the parallel world. TGeoParallelWorld(const TGeoParallelWorld& ). TGeoParallelWorld& operator=(const TGeoParallelWorld& ). TGeoParallelWorld(); constructors. {}. void SetUseOve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoParallelWorld.html:8345,detect,detected,8345,root/html604/TGeoParallelWorld.html,https://root.cern,https://root.cern/root/html604/TGeoParallelWorld.html,1,['detect'],['detected']
Safety,"rce. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TBackCompFitter. class TBackCompFitter: public TVirtualFitter. Backward compatible implementation of TVirtualFitter using the the class ROOT::Fit::Fitter.; This class is created after fitting an histogram (TH1), TGraph or TTree and provides in addition to the; methods of the TVirtualFitter hooks to access the fit result class (ROOT::Fit::FitResult), the fit configuration; (ROOT::Fit::FitConfig) or the fit data (ROOT::Fit::FitData) using; <pre>; TBackCompFitter * fitter = (TBackCompFitter *) TVirtualFitter::GetFitter();; ROOT::Fit::FitResult & result = fitter->GetFitResult();; result.Print(std::cout);; </pre>. Methods for getting the confidence level or contours are also provided.; Note that after a new calls to TH1::Fit (or similar) the class will be deleted and all reference to the FitResult, FitConfig; or minimizer will be invalid. One could eventually copying the class before issuing a new fit to avoid deleting this information. Function Members (Methods); public:. TBackCompFitter(); TBackCompFitter(const TBackCompFitter&); TBackCompFitter(auto_ptr<ROOT::Fit::Fitter> fitter, auto_ptr<ROOT::Fit::FitData> data); virtual~TBackCompFitter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Double_tChisquare(Int_t npar, Double_t* params) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; boolContour(unsigned int ipar, unsigned int jpar, TGraph* gr, double confLevel = 0.683); virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBackCompFitter.html:1163,avoid,avoid,1163,root/html526/TBackCompFitter.html,https://root.cern,https://root.cern/root/html526/TBackCompFitter.html,5,['avoid'],['avoid']
Safety,"rces (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general ar NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (0); GetEmatrix() (0)+(d)+(e); GetEmatrixTotal() (0)+(a)+(b)+(c)+(d)+(e). Example:. TH2D *histA,*histAsys1,*histAsys2,*histBgr1,*histBgr2;; TH1D *data;; assume the above histograms are filled:; histA: migration matrix from generator (x-axis) to detector (y-axis); the errors of histA are the uncorrelated systematic errors; histAsys1: alternative migration matrix, when systematic #1 is applied; histAsys1: alternative migration matrix, when systematic #2 is applied; histBgr: known background to the data, with errors. set up the unfolding:. TUnfoldSys unfold(histA,TUnfold::kHistMapOutputVert);; unfold.SetInput(input);; // this background has 5% scale uncertainty; unfold.SubtractBackground(histBgr1,""bgr1"",1.0,0.05);; // this background is scaled by 0.8 and has 10% scale uncertainty; unfold.SubtractBackground(histBgr2,""bgr2"",0.8,0.1);; unfold.AddSysError(histAsys1,""syserror1"",TUnfold::kHistMapOutputVert,; TUnfoldSys::kSysErrModeMatrix);; unfold.AddSysError(histAsys2,""syserror2"",TUnfold::kHistMapOutputVert,; TUnfoldSys::kSysErrModeMatrix);. run the unfolding: see description of class TUnfold; unfold.ScanLcurve( ...). retrieve the output; the errors include errors from input, from histBgr1 and from histBgr2; unfold.GetOutput(output);. retreive systematic shifts corresponding to correlated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:2743,detect,detector,2743,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['detect'],['detector']
Safety,"rchitecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . bool TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::IsTraining ; (; ); const. inline . Definition at line 346 of file DeepNet.h. ◆ Loss() [1/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Loss ; (; const Matrix_t & ; groundTruth, . const Matrix_t & ; weights, . bool ; includeRegularization = true . ); const. Function for evaluating the loss, based on the activations stored in the last layer. ; Definition at line 1263 of file DeepNet.h. ◆ Loss() [2/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Loss ; (; Tensor_t & ; input, . const Matrix_t & ; groundTruth, . const Matrix_t & ; weights, . bool ; inTraining = false, . bool ; includeRegularization = true . ). Function for evaluating the loss, based on the propagation of the given input. ; Definition at line 1279 of file DeepNet.h. ◆ Prediction() [1/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Prediction ; (; Matrix_t & ; predictions, . EOutputFunction ; f . ); const. Prediction based on activations stored in the last layer. ; Definition at line 1303 of file DeepNet.h. ◆ Prediction() [2/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Prediction ; (; Matrix_t & ; predictions, . Tensor_t & ; input, . EOutputFunction ; f . ). Prediction for the given inputs, based on what network learned. ; Definition at line 1311 of file DeepNet.h. ◆ Print(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Print. Print the Deep Net Info. ; Definition at line 1321 of file DeepNet.h. ◆ RegularizationTerm(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::RegularizationTerm. Function for comput",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:24420,Predict,Prediction,24420,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,1,['Predict'],['Prediction']
Safety,"rd fields have no; 111/// materialization on the primitive column layer.; 112enum ENTupleStructure : std::uint16_t { kInvalid, kLeaf, kCollection, kRecord, kVariant, kStreamer, kUnknown };; 113 ; 114/// Integer type long enough to hold the maximum number of entries in a column; 115using NTupleSize_t = std::uint64_t;; 116constexpr NTupleSize_t kInvalidNTupleIndex = std::uint64_t(-1);; 117/// Wrap the integer in a struct in order to avoid template specialization clash with std::uint64_t; 118struct RClusterSize {; 119 using ValueType = std::uint64_t;; 120 ; 121 RClusterSize() : fValue(0) {}; 122 explicit constexpr RClusterSize(ValueType value) : fValue(value) {}; 123 RClusterSize &operator=(const ValueType value); 124 {; 125 fValue = value;; 126 return *this;; 127 }; 128 RClusterSize &operator+=(const ValueType value); 129 {; 130 fValue += value;; 131 return *this;; 132 }; 133 RClusterSize operator++(int); 134 {; 135 auto result = *this;; 136 fValue++;; 137 return result;; 138 }; 139 operator ValueType() const { return fValue; }; 140 ; 141 ValueType fValue;; 142};; 143using ClusterSize_t = RClusterSize;; 144constexpr ClusterSize_t kInvalidClusterIndex(std::uint64_t(-1));; 145 ; 146constexpr int kUnknownCompressionSettings = -1;; 147 ; 148/// Holds the index and the tag of a kSwitch column; 149class RColumnSwitch {; 150private:; 151 ClusterSize_t fIndex;; 152 std::uint32_t fTag = 0;; 153 ; 154public:; 155 RColumnSwitch() = default;; 156 RColumnSwitch(ClusterSize_t index, std::uint32_t tag) : fIndex(index), fTag(tag) {}; 157 ClusterSize_t GetIndex() const { return fIndex; }; 158 std::uint32_t GetTag() const { return fTag; }; 159};; 160 ; 161/// Uniquely identifies a physical column within the scope of the current process, used to tag pages; 162using ColumnId_t = std::int64_t;; 163constexpr ColumnId_t kInvalidColumnId = -1;; 164 ; 165/// Distriniguishes elements of the same type within a descriptor, e.g. different fields; 166using DescriptorId_t = std::uint64_t;; 167conste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html:3975,avoid,avoid,3975,doc/master/RNTupleUtil_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleUtil_8hxx_source.html,1,['avoid'],['avoid']
Safety,"rd, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void ParseBuffer(); Parse fBuffer after a connection attempt. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSlave.html:9887,abort,abort,9887,root/html530/TXSlave.html,https://root.cern,https://root.cern/root/html530/TXSlave.html,9,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"re ROOT classes » Base ROOT classes. ; Handles synchronous and a-synchronous timer events. . synchronous timer is registered into TSystem and is processed within the standard ROOT event-loop.; asynchronous timer is passed to the operating system which sends an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; Sub-class TTimer and override the Notify() method.; Re-implement the TObject::HandleTimer() method in your class and pass a pointer to this object to timer, see the SetObject() method.; Pass an interpreter command to timer, see SetCommand() method.; Create a TTimer, connect its Timeout() signal to the appropriate methods. Then when the time is up it will emit a Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as kItimerResolution (currently 10 ms).; Signal/slots example: TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TTimer::Startvirtual void Start(Long_t milliSec=-1, Bool_t singleShot=kFALSE)Starts the timer with a milliSec timeout.Definition TTimer.cxx:213; To emit the Timeout signal repeatedly with minimum timeout: timer->Start(0, kFALSE);; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94. Definition at line 51 of file TTimer.h. Public Member Functions;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms millisec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTimer.html:1249,Timeout,Timeout,1249,doc/master/classTTimer.html,https://root.cern,https://root.cern/doc/master/classTTimer.html,1,['Timeout'],['Timeout']
Safety,"re details. ; . How can I fix the problem leading to :Error: Can't call vector<...>::push_back . This usually indicates that some classes dictionary refer and/or use this particular instance of std::vector. To solve the problem, you will need to generate a dictionary for this particular instance. With ROOT v5.27/06 and above this can be done by executing:gInterpreter->GenerateDictionary(""vector<Track&gt"",""Track.h;vector"");. With older version of ROOT ; this can simply be done using ACLiC and a simple loader.C script:// File loader.C; #include ; #include ; #ifdef __MAKECINT__; #pragma link C++ class vector<Track>+;; #endifI am defining a vector for my custom type (for example Track) in a root macro but when I push_back a Track object in the vector, CINT complains. e.g.; vector testVector;; Track obj;; ...; testVector.push_back(obj);; gives:Error: Can't call vector::push_back(timeStamp) in current scope MyAnalysisMasterTreeMaker.C:358:; Possible candidates are...; (in vector); *** Interpreter error recovered ***. Although, if I use a vector or vector or vector push_back works fine.; ; . What is the difference between a TFolder and a TDirectory? . TFolder manages a hierrachy of objects in memory.; TDirectory is doing it for a file.; One can save the TFolder structure to a directory in a file.; ; . Ubuntu: No backtrace (stacktrace) when ROOT crashes . Enable /proc/sys/kernel/yama/ptrace_scope or edit /etc/sysctl.d/10-ptrace.conf. See this blog entry for details. ; . Can I integrate ROOT into my CMake build? . Absolutely. The CMake command find_package() will set all needed ROOT related variables, which can be used to compile and link one's own code. An example from the ROOT Event example (found in root/test) can be downloaded here. Just un-tar the attached file and run:. cd event/build; cmake ..; make. I use CMake to build my own code, and I would like to use ROOT in that code. Is there a way to wire ROOT into the CMake build files? Something like FindROOT.cmake? ; . Win",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/faq-page.html:4199,recover,recovered,4199,d/faq-page.html,https://root.cern,https://root.cern/d/faq-page.html,1,['recover'],['recovered']
Safety,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:11617,avoid,avoid,11617,root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,13,['avoid'],['avoid']
Safety,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-06-30 14:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html:11589,avoid,avoid,11589,root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__SMatrix_double_4_3_-p1MatRepStd_double_4_3___.html,10,['avoid'],['avoid']
Safety,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html:11366,avoid,avoid,11366,root/html534/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__SMatrix_double_2_2_-p1MatRepStd_double_2_2___.html,15,['avoid'],['avoid']
Safety,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html:11617,avoid,avoid,11617,root/html604/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__SMatrix_Double32_t_3_3_-p1MatRepStd_Double32_t_3_3___.html,18,['avoid'],['avoid']
Safety,"re if the; matrix is not positive defined.; In case the inversion fails the current matrix is returned.; \param ifail . ifail will be set to 0 when inversion is successfull.; See ROOT::Math::SMatrix::InvertChol for the inversion algorithm. bool Det(double& det). determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will destroy the contents of the Matrix!. bool Det2(double& det) const. determinant of square Matrix via Dfact.; Return true when the calculation is successfull.; \param det will contain the calculated determinant value; \b Note: this will preserve the content of the Matrix!. SVector<T,D2> Row(unsigned int therow) const. return a full Matrix row as a vector (copy the content in a new vector). SVector<T,D1> Col(unsigned int thecol) const. return a full Matrix column as a vector (copy the content in a new vector). SVector<T,D1> Diagonal() const. return diagonal elements of a matrix as a Vector.; It works only for squared matrices D1 == D2, otherwise it will produce a compile error. T Trace() const. return the trace of a matrix; Sum of the diagonal elements. SubVector UpperBlock() const. SubVector LowerBlock() const. bool IsInUse(const double* p) const; @name --- Other Functions --- . Function to check if a matrix is sharing same memory location of the passed pointer; This function is used by the expression templates to avoid the alias problem during; expression evaluation. When the matrix is in use, for example in operations; like A = B * A, a temporary object storing the intermediate result is automatically; created when evaluating the expression. std::ostream& Print(ostream& os) const; submatrices; Print: used by operator<<(). » Last changed: root/smatrix:$Id$ » Last generated: 2015-09-08 17:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html:11589,avoid,avoid,11589,root/html604/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__SMatrix_double_6_6_-p1MatRepStd_double_6_6___.html,5,['avoid'],['avoid']
Safety,"re is never an IO feature that goes into the ROOT:: namespace; 60// but is unsupported.; 61enum class EIOUnsupportedFeatures {; 62 kUnsupported = 0 // Union of all features in this enum.; 63};; 64 ; 65 ; 66} // namespace Experimental; 67 ; 68 ; 69class TIOFeatures {; 70friend class ::TTree;; 71friend class ::TBranch;; 72friend class ::TBasket;; 73 ; 74public:; 75 TIOFeatures() {}; 76 ; 77 void Clear(EIOFeatures bits);; 78 void Clear(Experimental::EIOUnsupportedFeatures bits);; 79 void Clear(Experimental::EIOFeatures bits);; 80 bool Set(EIOFeatures bits);; 81 bool Set(Experimental::EIOFeatures bits);; 82 bool Set(const std::string &);; 83 bool Test(EIOFeatures bits) const;; 84 bool Test(Experimental::EIOFeatures bits) const;; 85 bool Test(Experimental::EIOUnsupportedFeatures bits) const;; 86 void Print() const;; 87 ; 88 // The number of known, defined IO features (supported / unsupported / experimental).; 89 static constexpr int kIOFeatureCount = 1;; 90 ; 91private:; 92 // These methods allow access to the raw bitset underlying; 93 // this object, breaking type safety. They are necessary for; 94 // efficient interaction with TTree / TBranch / TBasket, but left; 95 // private to prevent users from interacting with the raw bits.; 96 TIOFeatures(UChar_t IOBits) : fIOBits(IOBits) {}; 97 UChar_t GetFeatures() const;; 98 void Set(UChar_t newBits) {fIOBits = newBits;}; 99 ; 100 UChar_t fIOBits{0};; 101};; 102 ; 103} // namespace ROOT; 104 ; 105#endif // ROOT_TIO_FEATURES; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Rtypes.h; BIT#define BIT(n)Definition Rtypes.h:85; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::GetFeaturesUChar_t GetFeatures() constDefinition TIOFeatures.cxx:250; ROOT::TIOFeatures::TIOFeaturesTIOFeatures(UChar_t IOBits)Definition TIOFeatures.hxx:96; ROOT::TIOFeatures::Testbool Test(Experimental::EIOUnsupportedFeatures bits)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TIOFeatures_8hxx_source.html:3347,safe,safety,3347,doc/v632/TIOFeatures_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/TIOFeatures_8hxx_source.html,1,['safe'],['safety']
Safety,"re is never an IO feature that goes into the ROOT:: namespace; 60// but is unsupported.; 61enum class EIOUnsupportedFeatures {; 62 kUnsupported = 0 // Union of all features in this enum.; 63};; 64 ; 65 ; 66} // namespace Experimental; 67 ; 68 ; 69class TIOFeatures {; 70friend class ::TTree;; 71friend class ::TBranch;; 72friend class ::TBasket;; 73 ; 74public:; 75 TIOFeatures() {}; 76 ; 77 void Clear(EIOFeatures bits);; 78 void Clear(Experimental::EIOUnsupportedFeatures bits);; 79 void Clear(Experimental::EIOFeatures bits);; 80 bool Set(EIOFeatures bits);; 81 bool Set(Experimental::EIOFeatures bits);; 82 bool Set(const std::string &);; 83 bool Test(EIOFeatures bits) const;; 84 bool Test(Experimental::EIOFeatures bits) const;; 85 bool Test(Experimental::EIOUnsupportedFeatures bits) const;; 86 void Print() const;; 87 ; 88 // The number of known, defined IO features (supported / unsupported / experimental).; 89 static constexpr int kIOFeatureCount = 1;; 90 ; 91private:; 92 // These methods allow access to the raw bitset underlying; 93 // this object, breaking type safety. They are necessary for; 94 // efficient interaction with TTree / TBranch / TBasket, but left; 95 // private to prevent users from interacting with the raw bits.; 96 TIOFeatures(UChar_t IOBits) : fIOBits(IOBits) {}; 97 UChar_t GetFeatures() const;; 98 void Set(UChar_t newBits) {fIOBits = newBits;}; 99 ; 100 UChar_t fIOBits{0};; 101};; 102 ; 103} // namespace ROOT; 104 ; 105#endif // ROOT_TIO_FEATURES; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Rtypes.h; BIT#define BIT(n)Definition Rtypes.h:90; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::GetFeaturesUChar_t GetFeatures() constDefinition TIOFeatures.cxx:250; ROOT::TIOFeatures::TIOFeaturesTIOFeatures(UChar_t IOBits)Definition TIOFeatures.hxx:96; ROOT::TIOFeatures::Testbool Test(Experimental::EIOUnsupportedFeatures bits)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TIOFeatures_8hxx_source.html:3348,safe,safety,3348,doc/master/TIOFeatures_8hxx_source.html,https://root.cern,https://root.cern/doc/master/TIOFeatures_8hxx_source.html,1,['safe'],['safety']
Safety,"re is true ignore the specified signal, else restore previous; behaviour. void UnixSigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). const char * UnixSigname(ESignals sig); Return the signal name associated with a signal. void UnixResetSignal(ESignals sig); Restore old signal handler for specified signal. void UnixResetSignals(); Restore old signal handlers. Long64_t UnixNow(); Get current time in milliseconds since 0:00 Jan 1 1995. int UnixSetitimer(Long_t ms); Set interval timer to time-out in ms milliseconds. int UnixSelect(Int_t nfds, TFdSet* readready, TFdSet* writeready, Long_t timeout); Wait for events on the file descriptors specified in the readready and; writeready masks or for timeout (in milliseconds) to occur. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. const char * UnixHomedirectory(const char* user = 0); Returns the user's home directory. int UnixMakedir(const char* name); Make a Unix file system directory. Returns 0 in case of success and; -1 if the directory could not be created (either already exists or; illegal path name). void * UnixOpendir(const char* name); Open a directory. const char * UnixGetdirentry(void* dir); Returns the next directory entry. int UnixFilestat(const char* path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int UnixFSstat(const char* path, Long_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:37070,timeout,timeout,37070,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,10,['timeout'],['timeout']
Safety,"re) ;  ; void GetGeometry (Int_t wid, Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Returns position and size of window ""wid"". ;  ; void GetImageSize (Drawable_t id, UInt_t &width, UInt_t &height) override;  Returns the width and height of the image id. ;  ; Window_t GetInputFocus () override;  Returns the window id of the window having the input focus. ;  ; Color_t GetLineColor () const override;  Return the line color. ;  ; Style_t GetLineStyle () const override;  Return the line style. ;  ; Width_t GetLineWidth () const override;  Return the line width. ;  ; Color_t GetMarkerColor () const override;  Return the marker color. ;  ; Size_t GetMarkerSize () const override;  Return the marker size. ;  ; Style_t GetMarkerStyle () const override;  Return the marker style. ;  ; Handle_t GetNativeEvent () const override;  Returns the current native event handle. ;  ; Window_t GetParent (Window_t id) const override;  might be thread unsafe (?) ;  ; void GetPasteBuffer (Window_t id, Atom_t atom, TString &text, Int_t &nchar, Bool_t del) override;  Gets contents of the paste buffer ""atom"" into the string ""text"". ;  ; ULong_t GetPixel (Color_t cindex) override;  Returns pixel value associated to specified ROOT color number ""cindex"". ;  ; void GetPlanes (Int_t &nplanes) override;  Returns the maximum number of planes. ;  ; Window_t GetPrimarySelectionOwner () override;  Returns the window id of the current owner of the primary selection. ;  ; Int_t GetProperty (Window_t, Atom_t, Long_t, Long_t, Bool_t, Atom_t, Atom_t *, Int_t *, ULong_t *, ULong_t *, unsigned char **) override;  Returns the actual type of the property; the actual format of the property; the number of 8-bit, 16-bit, or 32-bit items transferred; the number of bytes remaining to be read in the property; and a pointer to the data actually returned. ;  ; void GetRegionBox (Region_t reg, Rectangle_t *rect) override;  Returns smallest enclosing rectangle. ;  ; void GetRGB (Int_t index, Float_t &r, Float_t &g, Fl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:12243,unsafe,unsafe,12243,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['unsafe'],['unsafe']
Safety,"re; Double_t xmin, xmax, ymin, ymax, zmin, zmax;. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Int_t IsOnBoundary(Double_t* point) const; Check if a point in local sphere coordinates is close to a boundary within; shape tolerance. Return values:; 0 - not close to boundary; 1 - close to Rmin boundary; 2 - close to Rmax boundary; 3,4 - close to phi1/phi2 boundary; 5,6 - close to theta1/theta2 boundary. Bool_t IsPointInside(Double_t* point, Bool_t checkR = kTRUE, Bool_t checkTh = kTRUE, Bool_t checkPh = kTRUE) const; Check if a point is inside radius/theta/phi ranges for the spherical sector. Bool_t Contains(Double_t* point) const; test if point is inside this sphere; check Rmin<=R<=Rmax. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the sphere; Check if the bounding box is crossed within the requested distance. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the sphere. Double_t DistToSphere(Double_t* point, Double_t* dir, Double_t rsph, Bool_t check = kTRUE, Bool_t firstcross = kTRUE) const; compute distance to sphere of radius rsph. Direction has to be a unit vector. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide all range of iaxis in range/step cells. const char * GetAxisName(Int_t iaxis) const; Returns name of axis IAXIS. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoSphere.html:13837,safe,safe,13837,root/html528/TGeoSphere.html,https://root.cern,https://root.cern/root/html528/TGeoSphere.html,3,['safe'],['safe']
Safety,"reamerInfo being called from multiple thread; 4623 // on that same TClass object.; 4624 //; 4625 // Summary: need careful review but risk of problem is extremely low.; 4626 ; 4627 R__LOCKGUARD(gInterpreterMutex);; 4628 ; 4629 return GetStreamerInfoImpl(version, isTransient);; 4630};; 4631 ; 4632// Implementation of/for TStreamerInfo::GetStreamerInfo.; 4633// This routine assumes the global lock has been taken.; 4634TVirtualStreamerInfo* TClass::GetStreamerInfoImpl(Int_t version, Bool_t silent) const; 4635{; 4636 // Warning: version may be -1 for an emulated class, or -2 if the; 4637 // user requested the emulated streamerInfo for an abstract; 4638 // base class, even though we have a dictionary for it.; 4639 ; 4640 if ((version < -1) || (version >= (fStreamerInfo->GetSize()-1))) {; 4641 Error(""GetStreamerInfo"", ""class: %s, attempting to access a wrong version: %d"", GetName(), version);; 4642 // FIXME: Shouldn't we go to -1 here, or better just abort?; 4643 version = fClassVersion;; 4644 }; 4645 ; 4646 TVirtualStreamerInfo *sinfo = (TVirtualStreamerInfo *)fStreamerInfo->At(version);; 4647 ; 4648 if (!sinfo && (version != fClassVersion)) {; 4649 // When the requested version does not exist we return; 4650 // the TVirtualStreamerInfo for the currently loaded class version.; 4651 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4652 // Note: This is done for STL collections; 4653 // Note: fClassVersion could be -1 here (for an emulated class).; 4654 // This is also the code path take for unversioned classes.; 4655 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4656 }; 4657 ; 4658 if (!sinfo) {; 4659 // We just were not able to find a streamer info, we have to make a new one.; 4660 TMmallocDescTemp setreset;; 4661 sinfo = TVirtualStreamerInfo::Factory()->NewInfo(const_cast<TClass*>(this));; 4662 fStreamerInfo->AddAtAndExpand(sinfo, fClassVersion);; 4663 if (gDebug > 0) {; 4664 printf(""Creating StreamerInfo for class: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:176063,abort,abort,176063,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['abort'],['abort']
Safety,"reamerInfo being called from multiple thread; 4690 // on that same TClass object.; 4691 //; 4692 // Summary: need careful review but risk of problem is extremely low.; 4693 ; 4694 R__LOCKGUARD(gInterpreterMutex);; 4695 ; 4696 return GetStreamerInfoImpl(version, isTransient);; 4697};; 4698 ; 4699// Implementation of/for TStreamerInfo::GetStreamerInfo.; 4700// This routine assumes the global lock has been taken.; 4701TVirtualStreamerInfo* TClass::GetStreamerInfoImpl(Int_t version, Bool_t silent) const; 4702{; 4703 // Warning: version may be -1 for an emulated class, or -2 if the; 4704 // user requested the emulated streamerInfo for an abstract; 4705 // base class, even though we have a dictionary for it.; 4706 ; 4707 if ((version < -1) || (version >= (fStreamerInfo->GetSize()-1))) {; 4708 Error(""GetStreamerInfo"", ""class: %s, attempting to access a wrong version: %d"", GetName(), version);; 4709 // FIXME: Shouldn't we go to -1 here, or better just abort?; 4710 version = fClassVersion;; 4711 }; 4712 ; 4713 TVirtualStreamerInfo *sinfo = (TVirtualStreamerInfo *)fStreamerInfo->At(version);; 4714 ; 4715 if (!sinfo && (version != fClassVersion)) {; 4716 // When the requested version does not exist we return; 4717 // the TVirtualStreamerInfo for the currently loaded class version.; 4718 // FIXME: This arguably makes no sense, we should warn and return nothing instead.; 4719 // Note: This is done for STL collections; 4720 // Note: fClassVersion could be -1 here (for an emulated class).; 4721 // This is also the code path take for unversioned classes.; 4722 sinfo = (TVirtualStreamerInfo*) fStreamerInfo->At(fClassVersion);; 4723 }; 4724 ; 4725 if (!sinfo) {; 4726 // We just were not able to find a streamer info, we have to make a new one.; 4727 TMmallocDescTemp setreset;; 4728 sinfo = TVirtualStreamerInfo::Factory()->NewInfo(const_cast<TClass*>(this));; 4729 fStreamerInfo->AddAtAndExpand(sinfo, fClassVersion);; 4730 if (gDebug > 0) {; 4731 printf(""Creating StreamerInfo for class: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:178814,abort,abort,178814,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['abort'],['abort']
Safety,"reamerInfo in the given slot.; 7318/// Update the slot accordingly.; 7319 ; 7320void TClass::RemoveStreamerInfo(Int_t slot); 7321{; 7322 if (fStreamerInfo->GetSize() >= slot) {; 7323 R__LOCKGUARD(gInterpreterMutex);; 7324 TVirtualStreamerInfo *info = (TVirtualStreamerInfo*)fStreamerInfo->At(slot);; 7325 fStreamerInfo->RemoveAt(fClassVersion);; 7326 if (fLastReadInfo.load() == info); 7327 fLastReadInfo = nullptr;; 7328 if (fCurrentInfo.load() == info); 7329 fCurrentInfo = nullptr;; 7330 delete info;; 7331 if (fState == kEmulated && fStreamerInfo->GetEntries() == 0) {; 7332 fState = kForwardDeclared;; 7333 }; 7334 }; 7335}; 7336 ; 7337////////////////////////////////////////////////////////////////////////////////; 7338/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7339/// classes in the class hierarchy that overload TObject::Hash do call; 7340/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7341/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7342/// This routines is used for a small subset of the class for which we need; 7343/// the answer before gROOT is properly initialized.; 7344 ; 7345Bool_t ROOT::Internal::HasConsistentHashMember(const char *cname); 7346{; 7347 // Hand selection of correct classes, those classes should be; 7348 // cross-checked in testHashRecursiveRemove.cxx; 7349 static const char *handVerified[] = {; 7350 ""TEnvRec"", ""TDataType"", ""TObjArray"", ""TList"", ""THashList"",; 7351 ""TClass"", ""TCling"", ""TInterpreter"", ""TMethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7352 ""TCheckHashRecursiveRemoveConsistency"", ""TGWindow"",; 7353 ""TDirectory"", ""TDirectoryFile"", ""TObject"", ""TH1"",; 7354 ""TQClass"", ""TGlobal"" };; 7355 ; 7356 if (cname && cname[0]) {; 7357 for (auto cursor : handVerified) {; 7358 if (strcmp(cname, cursor) == 0); 7359 return true;; 7360 }; 7361 }; 7362 return false;; 7363}; 7364 ; 7365///////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:281708,safe,safe,281708,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['safe'],['safe']
Safety,"reamerInfo in the given slot.; 7385/// Update the slot accordingly.; 7386 ; 7387void TClass::RemoveStreamerInfo(Int_t slot); 7388{; 7389 if (fStreamerInfo->GetSize() >= slot) {; 7390 R__LOCKGUARD(gInterpreterMutex);; 7391 TVirtualStreamerInfo *info = (TVirtualStreamerInfo*)fStreamerInfo->At(slot);; 7392 fStreamerInfo->RemoveAt(fClassVersion);; 7393 if (fLastReadInfo.load() == info); 7394 fLastReadInfo = nullptr;; 7395 if (fCurrentInfo.load() == info); 7396 fCurrentInfo = nullptr;; 7397 delete info;; 7398 if (fState == kEmulated && fStreamerInfo->GetEntries() == 0) {; 7399 fState = kForwardDeclared;; 7400 }; 7401 }; 7402}; 7403 ; 7404////////////////////////////////////////////////////////////////////////////////; 7405/// Return true is the Hash/RecursiveRemove setup is consistent, i.e. when all; 7406/// classes in the class hierarchy that overload TObject::Hash do call; 7407/// ROOT::CallRecursiveRemoveIfNeeded in their destructor.; 7408/// i.e. it is safe to call the Hash virtual function during the RecursiveRemove operation.; 7409/// This routines is used for a small subset of the class for which we need; 7410/// the answer before gROOT is properly initialized.; 7411 ; 7412Bool_t ROOT::Internal::HasConsistentHashMember(const char *cname); 7413{; 7414 // Hand selection of correct classes, those classes should be; 7415 // cross-checked in testHashRecursiveRemove.cxx; 7416 static const char *handVerified[] = {; 7417 ""TEnvRec"", ""TDataType"", ""TObjArray"", ""TList"", ""THashList"",; 7418 ""TClass"", ""TCling"", ""TInterpreter"", ""TMethod"", ""ROOT::Internal::TCheckHashRecursiveRemoveConsistency"",; 7419 ""TCheckHashRecursiveRemoveConsistency"", ""TGWindow"",; 7420 ""TDirectory"", ""TDirectoryFile"", ""TObject"", ""TH1"",; 7421 ""TQClass"", ""TGlobal"" };; 7422 ; 7423 if (cname && cname[0]) {; 7424 for (auto cursor : handVerified) {; 7425 if (strcmp(cname, cursor) == 0); 7426 return true;; 7427 }; 7428 }; 7429 return false;; 7430}; 7431 ; 7432///////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:284459,safe,safe,284459,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['safe'],['safe']
Safety,"reate a two-dimensional TEfficiency object with; 104- name = ""eff""; 105- title = ""my efficiency""; 106- axis titles: x, y and LaTeX-formatted epsilon as a label for Z axis; 107- 10 bins with constant bin width (= 1) along X axis starting at 0 (lower edge; 108 from the first bin) up to 10 (upper edge of last bin); 109- 20 bins with constant bin width (= 0.5) along Y axis starting at -5 (lower; 110 edge from the first bin) up to 5 (upper edge of last bin); 111 ; 112 TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;y;#epsilon"",10,0,10,20,-5,5);; 113 ; 114If you already have two histograms filled with the number of passed and total; 115events, you will use the constructor TEfficiency(const TH1& passed,const TH1& total); 116to construct the TEfficiency object. The histograms ""passed"" and ""total"" have; 117to fulfill the conditions mentioned in TEfficiency::CheckConsistency, otherwise the construction will fail.; 118As the histograms already exist, the new TEfficiency is by default **not** attached; 119to the current directory to avoid duplication of data. If you want to store the; 120new object anyway, you can either write it directly by calling TObject::Write or attach it to a directory using TEfficiency::SetDirectory.; 121This also applies to TEfficiency objects created by the copy constructor TEfficiency::TEfficiency(const TEfficiency& rEff).; 122 ; 123\anchor EFF02a; 124### Example 1; 125 ; 126~~~~~~~~~~~~~~~{.cpp}; 127TEfficiency* pEff = 0;; 128TFile* pFile = new TFile(""myfile.root"",""recreate"");; 129 ; 130//h_pass and h_total are valid and consistent histograms; 131if(TEfficiency::CheckConsistency(h_pass,h_total)); 132{; 133 pEff = new TEfficiency(h_pass,h_total);; 134 // this will write the TEfficiency object to ""myfile.root""; 135 // AND pEff will be attached to the current directory; 136 pEff->Write();; 137}; 138~~~~~~~~~~~~~~~; 139 ; 140\anchor EFF02b; 141### Example 2; 142 ; 143~~~~~~~~~~~~~~~{.cpp}; 144TEfficiency* pEff = 0;; 145TFile* pFile = new TFile(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:5400,avoid,avoid,5400,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['avoid'],['avoid']
Safety,"reate an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; virtual void GetOptions (Int_t *argc, char **argv);  Get and handle command line options. ;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:2867,timeout,timeout,2867,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['timeout'],['timeout']
Safety,"reateChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. Double_t getVal(const RooArgSet& set) const; { return _fast ? _value : getValV(&set) ; }. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create integral over observables in iset in range named rangeName. return createIntegral(iset,0,0,rangeName). RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet& nset, const char* rangeName = 0) const; Create integral over observables in iset in range named rangeName with integrand normalized over observables in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:79564,unsafe,unsafe,79564,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['unsafe'],['unsafe']
Safety,"reated baskets.Definition TBranch.h:123; TBranch::Browsevoid Browse(TBrowser *b) overrideBrowser interface.Definition TBranch.cxx:699; TBranch::SetCompressionAlgorithmvoid SetCompressionAlgorithm(Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal)Set compression algorithm.Definition TBranch.cxx:2763; TBranch::SetEntryOffsetLenvirtual void SetEntryOffsetLen(Int_t len, bool updateSubBranches=false)Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and...Definition TBranch.cxx:2821; TBranch::FindLeafvirtual TLeaf * FindLeaf(const char *name)Find the leaf corresponding to the name 'searchname'.Definition TBranch.cxx:1081; TBranch::fCacheInfoCacheInfo_t fCacheInfo! Hold info about which basket are in the cache and if they have been retrieved from the cache.Definition TBranch.h:158; TBranch::GetListOfBasketsTObjArray * GetListOfBaskets()Definition TBranch.h:245; TBranch::SetBufferAddressvirtual void SetBufferAddress(TBuffer *entryBuffer)Set address of this branch directly from a TBuffer to avoid streaming.Definition TBranch.cxx:2745; TBranch::GetEntriesLong64_t GetEntries() constDefinition TBranch.h:251; TBranch::fNleavesInt_t fNleaves! Number of leavesDefinition TBranch.h:128; TBranch::fSplitLevelInt_t fSplitLevelBranch split level.Definition TBranch.h:127; TBranch::WriteBasketImplInt_t WriteBasketImpl(TBasket *basket, Int_t where, ROOT::Internal::TBranchIMTHelper *)Write the current basket to disk and return the number of bytes written to the file.Definition TBranch.cxx:3202; TBranch::UpdateFilevirtual void UpdateFile()Refresh the value of fDirectory (i.e.Definition TBranch.cxx:3304; TBranch::fBasketBytesInt_t * fBasketBytes[fMaxBaskets] Length of baskets on fileDefinition TBranch.h:141; TBranch::fNextBasketEntryLong64_t fNextBasketEntry! Next entry that will requires us to go to the next basketDefinition TBranch.h:132; TBranch::IsAutoDeletebool IsAutoDelete() constReturn true if an existing object in a TBranc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:135240,avoid,avoid,135240,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['avoid'],['avoid']
Safety,"reated via socketpair(). TUDPSocket(const TUDPSocket& s); TUDPSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUDPSocket.html:13234,timeout,timeout,13234,root/html534/TUDPSocket.html,https://root.cern,https://root.cern/root/html534/TUDPSocket.html,3,['timeout'],['timeout']
Safety,"rec);; event->Add(trdrec);; event->Add(globrec);; tracker->Add(tpcrec);; tracker->Add(itsrec);; run->Add(pstats);; ; gROOT->GetListOfBrowsables()->Add(aliroot,""aliroot"");; new TBrowser;; }; gROOT#define gROOTDefinition TROOT.h:406; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TTask<div class=""legacybox""><h2>Legacy Code</h2> TTask is a legacy interface: there will be no bug fixes n...Definition TTask.h:35; TTask::TTaskTTask()Default constructor invoked when reading a TTask object from a file.Definition TTask.cxx:98; TTask::Addvirtual void Add(TTask *task)Add TTask to this.Definition TTask.cxx:176; . Definition at line 35 of file TTask.h. Public Member Functions;  TTask ();  Default constructor invoked when reading a TTask object from a file. ;  ;  TTask (const char *name, const char *title);  Standard constructor. ;  ;  TTask (const TTask &task);  Copy constructor. ;  ; virtual ~TTask ();  Delete a task and its subtasks. ;  ; virtual void Abort ();  Abort current tree of tasks. ;  ; virtual void Add (TTask *task);  Add TTask to this. ;  ; void Browse (TBrowser *b) override;  Browse the list of tasks. ;  ; virtual void CleanTasks ();  Reset tasks state: breakpoints and execute flags also invokes the Clear function of each task to clear all data structures created by a previous execution of a task. ;  ; void Clear (Option_t *option="""") override;  Recursively call the Clear function of this task and its subtasks. ;  ; virtual void Continue ();  Resume execution at the current break point. ;  ; virtual void Exec (Option_t *option);  Dummy Execute. ;  ; virtual void ExecuteTask (Option_t *option=""0"");  Execute main task and its subtasks. ;  ; virtual void ExecuteTasks (Option_t *option);  Execute all the subtasks of a task. ;  ; Int_t GetBreakin () const;  ; Int_t GetBreakout () const;  ; TList * GetListOfTasks () const;  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; Bool_t IsFolder () const override;  Returns kTRU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:4042,Abort,Abort,4042,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,2,['Abort'],['Abort']
Safety,"received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Definition at line 867 of file TUDPSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TUDPSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 898 of file TUDPSocket.cxx. ◆ Select(). Int_t TUDPSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 407 of file TUDPSocket.cxx. ◆ Send() [1/4]. Int_t TUDPSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Definition at line 464 of file TUDPSocket.cxx. ◆ Send() [2/4]. Int_t TUDPSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:29100,timeout,timeout,29100,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['timeout'],['timeout']
Safety,"rectives). virtual . Directives has the same syntax as the argument of SetMakeSharedLib but is used to create an executable. ; This creation is used as a means to output a list of unresolved symbols, when loading a shared library has failed. The required variable is $ExeName rather than $SharedLib, e.g.: gSystem->SetMakeExe(; ""g++ -Wall -fPIC $IncludePath $SourceFiles; -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");; TSystem::SetMakeExevirtual void SetMakeExe(const char *directives)Directives has the same syntax as the argument of SetMakeSharedLib but is used to create an executabl...Definition TSystem.cxx:4093. Definition at line 4093 of file TSystem.cxx. ◆ SetMakeSharedLib(). void TSystem::SetMakeSharedLib ; (; const char * ; directives). virtual . Directives should contain the description on how to compile and link a shared lib. ; This description can be any valid shell command, including the use of ';' to separate several instructions. However, shell specific construct should be avoided. In particular this description can contain environment variables, like $ROOTSYS (or ROOTSYS% on windows). Five special variables will be expanded before execution:; Variable name Expands to; ------------- ----------; $SourceFiles Name of source files to be compiled; $SharedLib Name of the shared library being created; $LibName Name of shared library without extension; $BuildDir Directory where the files will be created; $IncludePath value of fIncludePath; $LinkedLibs value of fLinkedLibs; $DepLibs libraries on which this library depends on; $ObjectFiles Name of source files to be compiler with; their extension changed to .o or .obj; $Opt location of the optimization/debug options; set fFlagsDebug and fFlagsOpt; onOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void onDefinition TGWin32VirtualXProxy.cxx:106; valueOption_t Option_t TPoint TPoint const char Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:88558,avoid,avoided,88558,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['avoid'],['avoided']
Safety,"rectory->WriteTObject(this); //nbytes will be 0 if Write failed (disk space exceeded); 1523 if (nbytes && key && strcmp(ClassName(), key->GetClassName()) == 0) {; 1524 key->Delete();; 1525 delete key;; 1526 }; 1527 }; 1528 // save StreamerInfo; 1529 TFile *file = fDirectory->GetFile();; 1530 if (file) file->WriteStreamerInfo();; 1531 ; 1532 if (opt.Contains(""saveself"")) {; 1533 fDirectory->SaveSelf();; 1534 //the following line is required in case GetUserInfo contains a user class; 1535 //for which the StreamerInfo must be written. One could probably be a bit faster (Rene); 1536 if (file) file->WriteHeader();; 1537 }; 1538 ; 1539 return nbytes;; 1540}; 1541 ; 1542namespace {; 1543 // This error message is repeated several times in the code. We write it once.; 1544 const char* writeStlWithoutProxyMsg = ""The class requested (%s) for the branch \""%s\""""; 1545 "" is an instance of an stl collection and does not have a compiled CollectionProxy.""; 1546 "" Please generate the dictionary for this collection (%s) to avoid to write corrupted data."";; 1547}; 1548 ; 1549////////////////////////////////////////////////////////////////////////////////; 1550/// Same as TTree::Branch() with added check that addobj matches className.; 1551///; 1552/// \see TTree::Branch() for other details.; 1553///; 1554 ; 1555TBranch* TTree::BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); 1556{; 1557 TClass* claim = TClass::GetClass(classname);; 1558 if (!ptrClass) {; 1559 if (claim && claim->GetCollectionProxy() && dynamic_cast<TEmulatedCollectionProxy*>(claim->GetCollectionProxy())) {; 1560 Error(""Branch"", writeStlWithoutProxyMsg,; 1561 claim->GetName(), branchname, claim->GetName());; 1562 return nullptr;; 1563 }; 1564 return Branch(branchname, classname, (void*) addobj, bufsize, splitlevel);; 1565 }; 1566 TClass* actualClass = nullptr;; 1567 void** addr = (void**) addobj;; 1568 if (addr) {; 1569 actualClass = ptrClass->GetA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:57450,avoid,avoid,57450,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['avoid'],['avoid']
Safety,"red singular in the solving stage when a diagonal element of the decomposed matrix is smaller than fTol. Here an important point is raised. The Decompose() method is successful as long no zero diagonal element is encountered. Therefore, the user could perform decomposition and only after this step worry about the tolerance number.; If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices or vectors that are invalid. If one would like to monitor the tolerance parameter but not have the code stop in case of a number smaller than fTol, one could proceed as follows:; TVectorD b = ..;; TMatrixD a = ..;; .; TDecompLU lu(a);; Bool_t ok;; TVectorD x = lu.Solve(b,ok);; Int_t nr = 0;; while (!ok) {; lu.SetMatrix(a);; lu.SetTol(0.1*lu.GetTol());; if (nr++ > 10) break;; x = lu.Solve(b,ok);; }; if (x.IsValid()); cout << ""solved with tol ="" << lu.GetTol() << endl;; else; cout << ""solving failed "" << endl;; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix. In this case, the user will have to reduce the tolerance number by this factor. (For CPU time saving we decided not to make this an automatic procedure).; 14.6.2 Condition number; The numerical accuracy of the solution x in Ax = b can be accurately estimated by calculating the condition number k of matrix \(A\), which is defined as:; \(k = ||A||_{1}||A^{-1}||_{1}\) where \(||A||_{1} = \underset{j}{max}(\sum_{i}|A_{ij}|)\); A good rule of thumb is that if the matrix condition number is 10n, the accuracy in x is 15 - n digits for double precision.; Hager devised an iterative method (W.W. Hager, Condition estimators, SIAM J. Sci. Stat. Comp., 5 (1984), pp. 311-316) to determine \(||A^{-1}||_{1}\) without actually having to calculate \(A^{-1}\). It is used when calling Condition().; A code example below shows the usage of the condition number. The matrix \(A\) is a (10x10) Hilbert matrix tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:794338,detect,detect,794338,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['detect'],['detect']
Safety,"ree:$Id$; 2// Author: Rene Brun 05/02/97; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TSelector; 13#define ROOT_TSelector; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TSelector //; 19// //; 20// A utility class for Trees selections. //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24 ; 25#include ""TObject.h""; 26#include ""TString.h""; 27#include ""TSelectorList.h""; 28 ; 29class TTree;; 30 ; 31class TSelector : public TObject {; 32 ; 33public:; 34 enum EAbort { kContinue, kAbortProcess, kAbortFile };; 35 ; 36protected:; 37 Long64_t fStatus; ///< Selector status; 38 EAbort fAbort; ///< Abort status; 39 TString fOption; ///< Option given to TTree::Process; 40 TObject *fObject; ///<! Current object if processing object (vs. TTree); 41 TList *fInput; ///< List of objects available during processing; 42 TSelectorList *fOutput; ///<! List of objects created during processing; 43 ; 44private:; 45 TSelector(const TSelector&); // not implemented; 46 TSelector& operator=(const TSelector&); // not implemented; 47 ; 48public:; 49 TSelector();; 50 ~TSelector() override;; 51 ; 52 virtual int Version() const { return 0; }; 53 virtual void Init(TTree *) { }; 54 virtual void Begin(TTree *) { }; 55 virtual void SlaveBegin(TTree *) { }; 56 bool Notify() override { return true; }; 57 const char *GetOption() const override { return fOption.Data(); }; 58 virtual Long64_t GetStatus() const { return fStatus; }; 59 virtual Int_t GetEntry(Long64_t /*entry*/, Int_t /*getall*/ = 0) { return 0; }; 60 virtual bool ProcessCut(Long64_t /*entry*/);; 61 vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8h_source.html:1238,Abort,Abort,1238,doc/master/TSelector_8h_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8h_source.html,1,['Abort'],['Abort']
Safety,"reference. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const; Fills array with n random points located on the line segments of the shape mesh.; The output array must be provided with a length of minimum 3*npoints. Returns; true if operation is implemented. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. Int_t GetByteCount() const; {return 56;}. TGeoConeSeg(); constructors. Double_t GetPhi1() const; {return fPhi1;}. Double_t GetPhi2() const; {return fPhi2;}. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoConeSeg.html:21898,safe,safe,21898,root/html534/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoConeSeg.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"reference. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const; Fills array with n random points located on the line segments of the shape mesh.; The output array must be provided with a length of minimum 3*npoints. Returns; true if operation is implemented. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. Int_t GetByteCount() const; {return 56;}. TGeoConeSeg(); constructors. Double_t GetPhi1() const; {return fPhi1;}. Double_t GetPhi2() const; {return fPhi2;}. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoConeSeg.html:23650,safe,safe,23650,root/html604/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html604/TGeoConeSeg.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"reference. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const; Fills array with n random points located on the line segments of the shape mesh.; The output array must be provided with a length of minimum 3*npoints. Returns; true if operation is implemented. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. Int_t GetByteCount() const; {return 56;}. TGeoConeSeg(); constructors. Double_t GetPhi1() const; {return fPhi1;}. Double_t GetPhi2() const; {return fPhi2;}. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoConeSeg.html:23650,safe,safe,23650,root/html602/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html602/TGeoConeSeg.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"reference. For instance, for a box having DX, DY and DZ half-lengths a point will be considered inside if :; | -DX <= point[0] <= DX; | -DY <= point[1] <= DY; | -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t</h4> safe) computes the distance to exiting a shape from a given point INSIDE, along a given direction. The direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of IACT input parameter : :IACT = 0 => compute only safe distance and fill it at the location given by SAFESAFEIACT = 1 => a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned..IACT = 2 => compute both safe distance and distance to exiting, ignoring the proposed step..IACT > 2 => compute only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t</h4> safe) computes the distance to entering a shape from a given point OUTSIDE. Acts in the same way as B). Double_t Safety(const Double_t *point[3], Bool_t inside); compute maximum shift of a point in any direction that does not change its INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point have to be properly supplied.; Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside); returns director cosines of normal to the crossed shape surface from a given point towards a direction. One has to specify if the point is inside or outside shape. According to this, the normal will be outwards or inwards shape respectively. Normal components are statically stored by shape class, so it has to be copied after retrieval in a diffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:5524,safe,safe,5524,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['safe'],['safe']
Safety,"reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMD5.h 33386 2010-05-05 13:41:15Z rdm $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMD5.html:4708,safe,safely,4708,root/html528/TMD5.html,https://root.cern,https://root.cern/root/html528/TMD5.html,2,['safe'],['safely']
Safety,"reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMD5.h 33386 2010-05-05 13:41:15Z rdm $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMD5.html:4708,safe,safely,4708,root/html530/TMD5.html,https://root.cern,https://root.cern/root/html530/TMD5.html,2,['safe'],['safely']
Safety,"reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMD5.h 33386 2010-05-05 13:41:15Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMD5.html:4708,safe,safely,4708,root/html532/TMD5.html,https://root.cern,https://root.cern/root/html532/TMD5.html,2,['safe'],['safely']
Safety,"rence< InvokeResult_t< F, T... > >::value &&!std::is_void< InvokeResult_t< F, T... > >::value >;  type definition used in templated functions for not allowing mapping functions that return references or void. ;  . #include <ROOT/TThreadExecutor.hxx>. Inheritance diagram for ROOT::TThreadExecutor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TThreadExecutor() [1/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; UInt_t ; nThreads = 0u). explicit . Class constructor. ; If the scheduler is active (e.g. because another TThreadExecutor is in flight, or ROOT::EnableImplicitMT() was called), work with the current pool of threads. If not, initialize the pool of threads, spawning nThreads. nThreads' default value, 0, initializes the pool with as many logical threads as are available in the system (see NLogicalCores in RTaskArenaWrapper.cxx).; At construction time, TThreadExecutor automatically enables ROOT's thread-safety locks as per calling ROOT::EnableThreadSafety(). ; Definition at line 149 of file TThreadExecutor.cxx. ◆ TThreadExecutor() [2/2]. ROOT::TThreadExecutor::TThreadExecutor ; (; const TThreadExecutor & ; ). delete . Member Function Documentation. ◆ Foreach() [1/5]. template<class F , class T > . void ROOT::TThreadExecutor::Foreach ; (; F ; func, . const std::vector< T > & ; args, . unsigned ; nChunks = 0 . ). Execute a function in parallel over the elements of a immutable vector, dividing the execution in nChunks. ; Parameters. funcFunction to be executed on the elements of the vector passed as second parameter. ; argsImmutable vector of elements passed as an argument to func. ; nChunksNumber of chunks to split the input data for processing. . Definition at line 231 of file TThreadExecutor.hxx. ◆ Foreach() [2/5]. template<class F , class INTEGER > . void ROOT::TThreadExecutor::Foreach ; (; F ; func, . ROOT::TSeq< INTEGER > ; args, . unsigned ; nChunks = 0 . ). Execute a fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html:16178,safe,safety,16178,doc/v632/classROOT_1_1TThreadExecutor.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadExecutor.html,2,['safe'],['safety']
Safety,"renced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TObjArrayfAjiarray of pointers to predictions of real template distributions; Double_tfChisquareTemplate fit chisquare; TH1*fDatapointer to the ""data"" histogram to be fitted to; vector<Int_t>fExcludedBinsbins excluded from the fit; Bool_tfFitDoneflags whether a valid fit has been performed; ROOT::Fit::Fitter*fFractionFitterpointer to Fitter class; Double_t*fFractionstemplate fractions scaled to the ""data"" histogram statistics; Int_tfHighLimitXlast bin in X dimension; Int_tfHighLimitYlast bin in Y dimension; Int_tfHighLimitZlast bin in Z dimension; Double_tfIntegralData""data"" histogram content integral over allowed fit range; Double_t*fIntegralMCssame for template histograms (weights not taken into account); Int_tfLowLimitXfirst bin in X dimension; Int_tfLowLimitYfirst bin in Y dimension; Int_tfLowLimitZfirst bin in Z dimension; TObjArrayfMCsarray of pointers to template histograms; Int_tfNDFNumber of degrees of freedom in the fit; Int_tfNparnumber of fit parameters; Int_tfNpfitsNumber of points used in the fit; TH1*fPlotpointer to histogram containing summed template predictions; TObjArrayfWeightsarray of pointers to corresponding weight factors (may be null). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFractionFitter(); TFractionFitter default constructor. TFractionFitter(TH1* data, TObjArray* MCs, Option_t* option = """"); TFractionFitter constructor. Does a complete initialisation (including; consistency checks, default fit range as the whole histogram but without; under- and overflows, and declaration of the fit p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:11876,predict,predictions,11876,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,4,['predict'],['predictions']
Safety,"rent iteration over this formula for this entry (i.e. varies from 0 to Length$).; Length$(formula ) : return the total number of element of the formula given as a parameter.; Sum$(formula ) : return the sum of the value of the elements of the formula given as a parameter. For example the mean for all the elements in one entry can be calculated with: Sum$(formula )/Length$(formula ); Min$(formula ) : return the minimum (within one TTree entry) of the value of the elements of the formula given as a parameter.; Max$(formula ) : return the maximum (within one TTree entry) of the value of the elements of the formula given as a parameter.; MinIf$(formula,condition); MaxIf$(formula,condition) : return the minimum (maximum) (within one TTree entry) of the value of the elements of the formula given as a parameter if they match the condition. If no element matches the condition, the result is zero. To avoid the resulting peak at zero, use the pattern: tree->Draw(""MinIf$(formula,condition)"",""condition"");; which will avoid calculation MinIf$ for the entries that have no match for the condition.; Alt$(primary,alternate) : return the value of ""primary"" if it is available for the current iteration otherwise return the value of ""alternate"". For example, with arr1[3] and arr2[2] tree->Draw(""arr1+Alt$(arr2,0)"");; will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0 Or with a variable size array arr3 tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1) As a comparison tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; will draw the sum arr3 for the index 0 to 2 only if the actual_size_of_arr3 is greater or equal to 3. Note that the array in 'primary' is flattened/linearized thus using Alt$ with multi-dimensional arrays of different dimensions in unlikely to yield the expected results. To visualize a bit more what elements would be matched by TTree::Draw, TTree::Scan can be used: tree->Scan(""arr1:Alt$(arr2,0)"")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:125828,avoid,avoid,125828,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,4,['avoid'],['avoid']
Safety,rent node; Bool_tfCurrentOverlapping! flags the type of the current node; TGeoVolume*fCurrentVolume! current volume; Double_tfDirection[3]! current direction; TGeoHMatrix*fDivMatrix! current local matrix of the selected division cell; TGeoNode*fForcedNode! current point is supposed to be inside this node; TGeoManager*fGeometry! current geometry; TGeoHMatrix*fGlobalMatrix! current pointer to cached global matrix; Bool_tfIsEntering! flag if current step just got into a new node; Bool_tfIsExiting! flag that current track is about to leave current node; Bool_tfIsNullStep! flag that last geometric step was null; Bool_tfIsOnBoundary! flag that current point is on some boundary; Bool_tfIsOutside! flag that current point is outside geometry; Bool_tfIsSameLocation! flag that a new point is in the same node as previous; Bool_tfIsStepEntering! flag that next geometric step will enter new volume; Bool_tfIsStepExiting! flaag that next geometric step will exit current volume; TGeoNode*fLastNode! last searched node; Double_tfLastPoint[3]! last point for which safety was computed; Double_tfLastSafety! last computed safety radius; Int_tfLevel! current geometry level;; Int_tfNextDaughterIndex! next daughter index after FindNextBoundary; TGeoNode*fNextNode! next node that will be crossed; Int_tfNmany! number of overlapping nodes on current branch; Double_tfNormal[3]! cosine of incident angle on current checked surface; Int_t*fOverlapClusters! internal array for overlaps; Int_tfOverlapMark! current recursive position in fOverlapClusters; Int_tfOverlapSize! current size of fOverlapClusters; TStringfPath! path to current node; Double_tfPoint[3]! current point; Double_tfSafety! safety radius from current point; Bool_tfSearchOverlaps! flag set when an overlapping cluster is searched; Bool_tfStartSafe! flag a safe start for point classification; Double_tfStep! step to be done from current point and direction; Int_tfThreadId! thread id for this navigator; TGeoNode*fTopNode! top physical node.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigator.html:11815,safe,safety,11815,root/html602/TGeoNavigator.html,https://root.cern,https://root.cern/root/html602/TGeoNavigator.html,8,['safe'],"['safe', 'safety']"
Safety,"rent value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classxRooProjectedPdf.html:10812,safe,safely,10812,doc/master/classxRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classxRooProjectedPdf.html,3,['safe'],['safely']
Safety,replayer interface for a user.; TRecorderInactive Represents state of TRecorder after its creation; TRecorderPaused Represents state of TRecorder when paused; TRecorderRecording Represents state of TRecorder when recording events; TRecorderReplaying Represents state of TRecorder when replaying; TRecorderState Abstract class that defines interface for a state of recorder; TRedirectOutputGuard Exception safe output redirection; TRef Persistent Reference link to a TObject; TRefArray An array of references to TObjects; TRefArrayIter Object array iterator; TRefCnt ; TRefTable Table of referenced objects during an I/O operation; TRegexp Regular expression class; TRemoteObject A remote object; TResponseTable Generic Geant detector response table; TRint ROOT Interactive Application Interface; TRobustEstimator Minimum Covariance Determinant Estimator; TRolke ; TRootApplication ROOT native GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TRuby Ruby/ROOT interface; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class ; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summury infor,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:114126,safe,safe,114126,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,"['detect', 'safe']","['detector', 'safe']"
Safety,"resentative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<PDF*>*fPDFBgdlist of PDFs (background); vector<PDF*>*fPDFSiglist of PDFs (signal) ; Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodLikelihood.html:18231,avoid,avoid,18231,root/html528/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodLikelihood.html,1,['avoid'],['avoid']
Safety,"resize (all others). The expected values are: . Implements TVirtualPad.; Definition at line 6350 of file TPad.cxx. ◆ StartEditing(). virtual void TPad::StartEditing ; (; ). inlinevirtual . Definition at line 417 of file TPad.h. ◆ Streamer(). void TPad::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TSlider.; Definition at line 6713 of file TPad.cxx. ◆ StreamerNVirtual(). void TPad::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 419 of file TPad.h. ◆ Update(). void TPad::Update ; (; ). overridevirtual . Update pad. ; Implements TVirtualPad.; Definition at line 2935 of file TPad.cxx. ◆ UpdateAsync(). void TPad::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2947 of file TPad.cxx. ◆ UseCurrentStyle(). void TPad::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in pad. ; Reimplemented from TObject.; Definition at line 6927 of file TPad.cxx. ◆ UtoAbsPixel(). Int_t TPad::UtoAbsPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7459 of file TPad.cxx. ◆ UtoPixel(). Int_t TPad::UtoPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to pixel. ; Implements TVirtualPad.; Definition at line 7433 of file TPad.cxx. ◆ VtoAbsPixel(). Int_t TPad::VtoAbsPixel ; (; Double_t ; v); const. overridevirtual . Convert Y NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7467 of file TPad.cxx. ◆ VtoPixel(). Int_t TPad::VtoPixel ; (; Double_t ; v); const. overridevirtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:127593,avoid,avoid,127593,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['avoid'],['avoid']
Safety,"rest = kRead); Set interest mask for socket sock to interest. If the socket is not; in the active list move it or add it there.; If interest=kRead then we want to monitor the socket for read readiness,; if interest=kWrite then we monitor the socket for write readiness,; if interest=kRead|kWrite then we monitor both read and write readiness. void Remove(TSocket* sock); Remove a socket from the monitor. void RemoveAll(); Remove all sockets from the monitor. void Activate(TSocket* sock); Activate a de-activated socket. void ActivateAll(); Activate all de-activated sockets. void DeActivate(TSocket* sock); De-activate a socket. void DeActivateAll(); De-activate all activated sockets. TSocket * Select(); Return pointer to socket for which an event is waiting.; Select can be interrupt by a call to Interrupt() (e.g. connected with a; Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable; in such a case.; Return 0 in case of error. TSocket * Select(Long_t timeout); Return pointer to socket for which an event is waiting.; Wait a maximum of timeout milliseconds.; If return is due to timeout it returns (TSocket *)-1.; Select() can be interrupt by a call to Interrupt() (e.g. connected with a; Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable; in such a case.; Return 0 in case of any other error situation. Int_t Select(TList* rdready, TList* wrready, Long_t timeout); Return numbers of sockets that are ready for reading or writing.; Wait a maximum of timeout milliseconds.; Return 0 if timed-out. Return < 0 in case of error.; If rdready and/or wrready are not 0, the lists of sockets with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:11629,timeout,timeout,11629,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,6,['timeout'],['timeout']
Safety,"restore previous behaviour.; 874 ; 875void TUnixSystem::ResetSignal(ESignals sig, Bool_t reset); 876{; 877 if (reset); 878 UnixResetSignal(sig);; 879 else; 880 UnixSignal(sig, SigHandler);; 881}; 882 ; 883////////////////////////////////////////////////////////////////////////////////; 884/// Reset signals handlers to previous behaviour.; 885 ; 886void TUnixSystem::ResetSignals(); 887{; 888 UnixResetSignals();; 889}; 890 ; 891////////////////////////////////////////////////////////////////////////////////; 892/// If ignore is true ignore the specified signal, else restore previous; 893/// behaviour.; 894 ; 895void TUnixSystem::IgnoreSignal(ESignals sig, Bool_t ignore); 896{; 897 UnixIgnoreSignal(sig, ignore);; 898}; 899 ; 900////////////////////////////////////////////////////////////////////////////////; 901/// When the argument is true the SIGALRM signal handler is set so that; 902/// interrupted syscalls will not be restarted by the kernel. This is; 903/// typically used in case one wants to put a timeout on an I/O operation.; 904/// By default interrupted syscalls will always be restarted (for all; 905/// signals). This can be controlled for each a-synchronous TTimer via; 906/// the method TTimer::SetInterruptSyscalls().; 907 ; 908void TUnixSystem::SigAlarmInterruptsSyscalls(Bool_t set); 909{; 910 UnixSigAlarmInterruptsSyscalls(set);; 911}; 912 ; 913////////////////////////////////////////////////////////////////////////////////; 914/// Return the bitmap of conditions that trigger a floating point exception.; 915 ; 916Int_t TUnixSystem::GetFPEMask(); 917{; 918 Int_t mask = 0;; 919 ; 920#if defined(R__LINUX) && !defined(__powerpc__); 921#if defined(__GLIBC__) && (__GLIBC__>2 || __GLIBC__==2 && __GLIBC_MINOR__>=1); 922 ; 923#if __GLIBC_MINOR__>=3; 924 ; 925 Int_t oldmask = fegetexcept();; 926 ; 927#else; 928 fenv_t oldenv;; 929 fegetenv(&oldenv);; 930 fesetenv(&oldenv);; 931#if __ia64__; 932 Int_t oldmask = ~oldenv;; 933#else; 934 Int_t oldmask = ~oldenv.__control_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:27319,timeout,timeout,27319,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['timeout'],['timeout']
Safety,"resultPtr.GetValue() << std::endl;; 1270}; 1271~~~; 1272 ; 1273See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1274for a more complete example.; 1275 ; 1276#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1277 ; 1278Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1279executes the callable on the values of those columns for each event that passes all upstream selections.; 1280It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1281evaluates the root mean square of column ""x"":; 1282~~~{.cpp}; 1283// Single-thread evaluation of RMS of column ""x"" using Foreach; 1284double sumSq = 0.;; 1285unsigned int n = 0;; 1286df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1287std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1288~~~; 1289In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1290thread will execute the expression concurrently.; 1291The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1292this is probably too much head-scratch for such a simple operation.; 1293 ; 1294ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1295additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1296guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1297executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1298We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1299~~~{.cpp}; 1300// Thread-safe evaluation of RMS of column ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:74698,safe,safety,74698,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['safe'],['safety']
Safety,"resultPtr.GetValue() << std::endl;; 1310}; 1311~~~; 1312 ; 1313See the Book() method for more information and [this tutorial](https://root.cern/doc/master/df018__customActions_8C.html); 1314for a more complete example.; 1315 ; 1316#### Injecting arbitrary code in the event loop with Foreach() and ForeachSlot(); 1317 ; 1318Foreach() takes a callable (lambda expression, free function, functor...) and a list of columns and; 1319executes the callable on the values of those columns for each event that passes all upstream selections.; 1320It can be used to perform actions that are not already available in the interface. For example, the following snippet; 1321evaluates the root mean square of column ""x"":; 1322~~~{.cpp}; 1323// Single-thread evaluation of RMS of column ""x"" using Foreach; 1324double sumSq = 0.;; 1325unsigned int n = 0;; 1326df.Foreach([&sumSq, &n](double x) { ++n; sumSq += x*x; }, {""x""});; 1327std::cout << ""rms of x: "" << std::sqrt(sumSq / n) << std::endl;; 1328~~~; 1329In multi-thread runs, users are responsible for the thread-safety of the expression passed to Foreach():; 1330thread will execute the expression concurrently.; 1331The code above would need to employ some resource protection mechanism to ensure non-concurrent writing of `rms`; but; 1332this is probably too much head-scratch for such a simple operation.; 1333 ; 1334ForeachSlot() can help in this situation. It is an alternative version of Foreach() for which the function takes an; 1335additional ""processing slot"" parameter besides the columns it should be applied to. RDataFrame; 1336guarantees that ForeachSlot() will invoke the user expression with different `slot` parameters for different concurrent; 1337executions (see [Special helper columns: rdfentry_ and rdfslot_](\ref helper-cols) for more information on the slot parameter).; 1338We can take advantage of ForeachSlot() to evaluate a thread-safe root mean square of column ""x"":; 1339~~~{.cpp}; 1340// Thread-safe evaluation of RMS of column ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:76378,safe,safety,76378,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['safe'],['safety']
Safety,"return !fIsRootFile; }; 261 virtual Bool_t IsOpen() const;; 262 void ls(Option_t *option="""") const override;; 263 virtual void MakeFree(Long64_t first, Long64_t last);; 264 virtual void MakeProject(const char *dirname, const char *classes=""*"",; 265 Option_t *option=""new""); // *MENU*; 266 virtual void Map(Option_t *opt); // *MENU*; 267 virtual void Map() { Map(""""); }; // *MENU*; 268 virtual Bool_t Matches(const char *name);; 269 virtual Bool_t MustFlush() const {return fMustFlush;}; 270 void Paint(Option_t *option="""") override;; 271 void Print(Option_t *option="""") const override;; 272 virtual Bool_t ReadBufferAsync(Long64_t offs, Int_t len);; 273 virtual Bool_t ReadBuffer(char *buf, Int_t len);; 274 virtual Bool_t ReadBuffer(char *buf, Long64_t pos, Int_t len);; 275 virtual Bool_t ReadBuffers(char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);; 276 virtual void ReadFree();; 277 virtual TProcessID *ReadProcessID(UShort_t pidf);; 278 virtual void ReadStreamerInfo();; 279 virtual Int_t Recover();; 280 virtual Int_t ReOpen(Option_t *mode);; 281 virtual void Seek(Long64_t offset, ERelativeTo pos = kBeg);; 282 virtual void SetCacheRead(TFileCacheRead *cache, TObject *tree = nullptr, ECacheAction action = kDisconnect);; 283 virtual void SetCacheWrite(TFileCacheWrite *cache);; 284 virtual void SetCompressionAlgorithm(Int_t algorithm = ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);; 285 virtual void SetCompressionLevel(Int_t level = ROOT::RCompressionSetting::ELevel::kUseMin);; 286 virtual void SetCompressionSettings(Int_t settings = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);; 287 virtual void SetEND(Long64_t last) { fEND = last; }; 288 virtual void SetOffset(Long64_t offset, ERelativeTo pos = kBeg);; 289 virtual void SetOption(Option_t *option="">"") { fOption = option; }; 290 virtual void SetReadCalls(Int_t readcalls = 0) { fReadCalls = readcalls; }; 291 virtual void ShowStreamerInfo();; 292 Int_t Sizeof() const override;; 293 void SumBuffer(Int_t bufsize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:13831,Recover,Recover,13831,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['Recover'],['Recover']
Safety,"return 0;; 1931 ; 1932 TString stem(fname);; 1933 // Remove extension if any, ignore files with extension not being .h*; 1934 Int_t where = stem.Last('.');; 1935 if (where != kNPOS) {; 1936 if (stem.EndsWith("".so"") || stem.EndsWith("".sl"") ||; 1937 stem.EndsWith("".dl"") || stem.EndsWith("".a"") ||; 1938 stem.EndsWith("".dll"", TString::kIgnoreCase)); 1939 return 0;; 1940 stem.Remove(where);; 1941 }; 1942 ; 1943 TString className = gSystem->BaseName(stem);; 1944 TClass* cla = R__GetClassIfKnown(className);; 1945 if (!cla) {; 1946 // Try again with modifications to the file name:; 1947 className = stem;; 1948 className.ReplaceAll(""/"", ""::"");; 1949 className.ReplaceAll(""\\"", ""::"");; 1950 if (className.Contains("":::"")) {; 1951 // ""C:\dir"" becomes ""C:::dir"".; 1952 // fname corresponds to whatever is stated after #include and; 1953 // a full path name usually means that it's not a regular #include; 1954 // but e.g. a "".L"", so we can assume that this is not a header of; 1955 // a class in a namespace (a global-namespace class would have been; 1956 // detected already before).; 1957 return 0;; 1958 }; 1959 cla = R__GetClassIfKnown(className);; 1960 }; 1961 ; 1962 if (!cla) {; 1963 return 0;; 1964 }; 1965 ; 1966 // cla is valid, check wether it's actually in the header of the same name:; 1967 if (cla->GetDeclFileLine() <= 0) return 0; // to a void an error with VisualC++; 1968 TString decfile = gSystem->BaseName(cla->GetDeclFileName());; 1969 if (decfile != gSystem->BaseName(fname)) {; 1970 return 0;; 1971 }; 1972 return 1;; 1973}; 1974 ; 1975////////////////////////////////////////////////////////////////////////////////; 1976/// Initialize operating system interface.; 1977 ; 1978void TROOT::InitSystem(); 1979{; 1980 if (gSystem == nullptr) {; 1981#if defined(R__UNIX); 1982#if defined(R__HAS_COCOA); 1983 gSystem = new TMacOSXSystem;; 1984#else; 1985 gSystem = new TUnixSystem;; 1986#endif; 1987#elif defined(R__WIN32); 1988 gSystem = new TWinNTSystem;; 1989#else; 1990 gSystem = new",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:75339,detect,detected,75339,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['detect'],['detected']
Safety,"return 0;; 212 }; 213 ; 214 void HandleReferencedTObject(TBuffer &buf, void *addr, const TConfiguration *config) {; 215 TBitsConfiguration *conf = (TBitsConfiguration*)config;; 216 UShort_t pidf;; 217 buf >> pidf;; 218 pidf += buf.GetPidOffset();; 219 TProcessID *pid = buf.ReadProcessID(pidf);; 220 if (pid!=0) {; 221 TObject *obj = (TObject*)( ((char*)addr) + conf->fObjectOffset);; 222 UInt_t gpid = pid->GetUniqueID();; 223 UInt_t uid;; 224 if (gpid>=0xff) {; 225 uid = obj->GetUniqueID() | 0xff000000;; 226 } else {; 227 uid = ( obj->GetUniqueID() & 0xffffff) + (gpid<<24);; 228 }; 229 obj->SetUniqueID(uid);; 230 pid->PutObjectWithID(obj);; 231 }; 232 }; 233 ; 234 template <>; 235 INLINE_TEMPLATE_ARGS Int_t ReadBasicType<BitsMarker>(TBuffer &buf, void *addr, const TConfiguration *config); 236 {; 237 UInt_t *x = (UInt_t*)( ((char*)addr) + config->fOffset );; 238 // Idea: Implement buf.ReadBasic/Primitive to avoid the return value; 239 // Idea: This code really belongs inside TBuffer[File]; 240 const UInt_t isonheap = *x & TObject::kIsOnHeap; // Record how this instance was actually allocated.; 241 buf >> *x;; 242 *x |= isonheap | TObject::kNotDeleted; // by definition de-serialized object are not yet deleted.; 243 ; 244 if ((*x & kIsReferenced) != 0) {; 245 HandleReferencedTObject(buf,addr,config);; 246 }; 247 return 0;; 248 }; 249 ; 250 template <typename T>; 251 INLINE_TEMPLATE_ARGS Int_t WriteBasicType(TBuffer &buf, void *addr, const TConfiguration *config); 252 {; 253 T *x = (T *)(((char *)addr) + config->fOffset);; 254 // Idea: Implement buf.ReadBasic/Primitive to avoid the return value; 255 buf << *x;; 256 return 0;; 257 }; 258 ; 259 INLINE_TEMPLATE_ARGS Int_t WriteTextTNamed(TBuffer &buf, void *addr, const TConfiguration *config); 260 {; 261 void *x = (void *)(((char *)addr) + config->fOffset);; 262 // Idea: Implement buf.ReadBasic/Primitive to avoid the return value; 263 buf.StreamObject(x, TNamed::Class(), TNamed::Class());; 264 return 0;; 265 }; 266 ; 267 INLI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:8657,avoid,avoid,8657,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['avoid'],['avoid']
Safety,"return fDrawCameraCenter; }. void PickCameraCenter(); { fPushAction = kPushCamCenter; RefreshPadEditor(this); }. void PickAnnotate(); { fPushAction = kPushAnnotate; RefreshPadEditor(this); }. TGLCameraOverlay* GetCameraOverlay() const; { return fCameraOverlay; }. void SetCameraOverlay(TGLCameraOverlay* m); { fCameraOverlay = m; }. Bool_t GetStereo() const; Stereo. { return fStereo; }. Float_t GetStereoZeroParallax() const; { return fStereoZeroParallax; }. Float_t GetStereoEyeOffsetFac() const; { return fStereoEyeOffsetFac; }. Float_t GetStereoFrustumAsymFac() const; { return fStereoFrustumAsymFac; }. void SetStereoZeroParallax(Float_t f); { fStereoZeroParallax = f; }. void SetStereoEyeOffsetFac(Float_t f); { fStereoEyeOffsetFac = f; }. void SetStereoFrustumAsymFac(Float_t f); { fStereoFrustumAsymFac = f; }. EPushAction GetPushAction() const; Push / drag action. { return fPushAction; }. EDragAction GetDragAction() const; { return fDragAction; }. Float_t GetMaxSceneDrawTimeHQ() const; Draw and selection; Scene rendering timeouts. { return fMaxSceneDrawTimeHQ; }. Float_t GetMaxSceneDrawTimeLQ() const; { return fMaxSceneDrawTimeLQ; }. void SetMaxSceneDrawTimeHQ(Float_t t); { fMaxSceneDrawTimeHQ = t; }. void SetMaxSceneDrawTimeLQ(Float_t t); { fMaxSceneDrawTimeLQ = t; }. const char* GetPictureFileName() const; { return fPictureFileName.Data(); }. void SetPictureFileName(const TString& f); { fPictureFileName = f; }. Float_t GetFader() const; { return fFader; }. void SetFader(Float_t x); { fFader = x; }. Bool_t GetIgnoreSizesOnUpdate() const; { return fIgnoreSizesOnUpdate; }. void SetIgnoreSizesOnUpdate(Bool_t v); { fIgnoreSizesOnUpdate = v; }. Bool_t GetResetCamerasOnUpdate() const; { return fResetCamerasOnUpdate; }. void SetResetCamerasOnUpdate(Bool_t v); { fResetCamerasOnUpdate = v; }. void Activated(); { Emit(""Activated()""); }. void DoubleClicked(); { Emit(""DoubleClicked()""); }. TGEventHandler * GetEventHandler() const; { return fEventHandler; }. TGedEditor* GetGedEdito",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLViewer.html:41291,timeout,timeouts,41291,root/html604/TGLViewer.html,https://root.cern,https://root.cern/root/html604/TGLViewer.html,1,['timeout'],['timeouts']
Safety,"rge"", ""object of type %s at index %d not matching object of type %s in input list"",; 255 object->ClassName(), indobj, objtomerge->ClassName());; 256 SafeDelete(templist);; 257 return 0;; 258 }; 259 // Add object at index indobj in the temporary list; 260 if (mergeable) {; 261 templist->Add(objtomerge);; 262 nmerged++;; 263 } else {; 264 // Just add it to the dedicated temp list for later addition to the current list; 265 if (!notmergeable && IsA()); 266 notmergeable = (TSeqCollection*)IsA()->New();; 267 if (notmergeable); 268 notmergeable->Add(objtomerge);; 269 else; 270 Warning(""Merge"", ""temp list for non mergeable objects not created!"");; 271 }; 272 }; 273 // Merge current object with objects in the temporary list; 274 if (mergeable) {; 275 callEnv.SetParam((Longptr_t) templist);; 276 callEnv.Execute(object);; 277 SafeDelete(templist);; 278 }; 279 indobj++;; 280 }; 281 ; 282 // Add the non-mergeable objects, if any; 283 if (notmergeable && notmergeable->GetSize() > 0) {; 284 TIter nxnm(notmergeable);; 285 while (auto onm = nxnm()); 286 Add(onm->Clone());; 287 SafeDelete(notmergeable);; 288 }; 289 ; 290 return nmerged;; 291}; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TClass.h; TCollection.h; gCollectionMutexR__EXTERN TVirtualMutex * gCollectionMutexDefinition TCollection.h:45; TMethodCall.h; TSeqCollection.h; TVirtualMutex.h; R__LOCKGUARD2#define R__LOCKGUARD2(mutex)Definition TVirtualMutex.h:96; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TCollectionCollection abstract base clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeqCollection_8cxx_source.html:9558,Safe,SafeDelete,9558,doc/master/TSeqCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSeqCollection_8cxx_source.html,4,['Safe'],['SafeDelete']
Safety,"rgetDir = __null); construction from weight file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); Cuts can only handle classification with 2 classes. void Init( void ); default initialisation called by all constructors. ~MethodCuts( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; Method <string> Minimisation method; available values are: MC Monte Carlo <default>; GA Genetic Algorithm; SA Simulated annealing. EffMethod <string> Efficiency selection method; available values are: EffSel <default>; EffPDF. VarProp <string> Property of variable 1 for the MC method (taking precedence over the; globale setting. The same values as for the global option are available. Variables 1..10 can be; set this way. CutRangeMin/Max <float> user-defined ranges in which cuts are varied. void ProcessOptions(); process user options; sanity check, do not allow the input variables to be normalised, because this; only creates problems when interpreting the cuts. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); cut evaluation: returns 1.0 if event passed, 0.0 otherwise. void PrintCuts(Double_t effS) const; print cuts. Double_t GetCuts(Double_t effS, Double_t* cutMin, Double_t* cutMax) const; retrieve cut values for given signal efficiency; assume vector of correct size !!. Double_t GetCuts(Double_t effS, vector<Double_t>& cutMin, vector<Double_t>& cutMax) const; retrieve cut values for given signal efficiency. void Train( void ); training method: here the cuts are optimised for the training sample. void TestClassification(); nothing to test. Double_t EstimatorFunction(Int_t ievt1, Int_t ievt2); for full event scan. Double_t EstimatorFunction(vector<Double_t>& ); returns estimator for ""cut fitness"" used by GA. Double_t ComputeEstimator(vector<Double_t>& ); returns estimator for ""cut fitness"" used by GA; there are two requirements:; 1) the sign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodCuts.html:24082,sanity check,sanity check,24082,root/html602/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodCuts.html,2,['sanity check'],['sanity check']
Safety,"rgs() methods to advertise the algorithms they provide.; 1521 ; 1522Int_t RooAbsPdf::getGenerator(const RooArgSet &/*directVars*/, RooArgSet &/*generatedVars*/, bool /*staticInitOK*/) const; 1523{; 1524 return 0 ;; 1525}; 1526 ; 1527 ; 1528 ; 1529////////////////////////////////////////////////////////////////////////////////; 1530/// Interface for one-time initialization to setup the generator for the specified code.; 1531 ; 1532void RooAbsPdf::initGenerator(Int_t /*code*/); 1533{; 1534}; 1535 ; 1536 ; 1537 ; 1538////////////////////////////////////////////////////////////////////////////////; 1539/// Interface for generation of an event using the algorithm; 1540/// corresponding to the specified code. The meaning of each code is; 1541/// defined by the getGenerator() implementation. The default; 1542/// implementation does nothing.; 1543 ; 1544void RooAbsPdf::generateEvent(Int_t /*code*/); 1545{; 1546}; 1547 ; 1548 ; 1549 ; 1550////////////////////////////////////////////////////////////////////////////////; 1551/// Check if given observable can be safely generated using the; 1552/// pdfs internal generator mechanism (if that existsP). Observables; 1553/// on which a PDF depends via more than route are not safe; 1554/// for use with internal generators because they introduce; 1555/// correlations not known to the internal generator; 1556 ; 1557bool RooAbsPdf::isDirectGenSafe(const RooAbsArg& arg) const; 1558{; 1559 // Arg must be direct server of self; 1560 if (!findServer(arg.GetName())) return false ;; 1561 ; 1562 // There must be no other dependency routes; 1563 for (const auto server : _serverList) {; 1564 if(server == &arg) continue;; 1565 if(server->dependsOn(arg)) {; 1566 return false ;; 1567 }; 1568 }; 1569 ; 1570 return true ;; 1571}; 1572 ; 1573 ; 1574////////////////////////////////////////////////////////////////////////////////; 1575/// Generate a new dataset containing the specified variables with events sampled from our distribution.; 1576/// \param",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:75978,safe,safely,75978,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['safe'],['safely']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsAnaConvPdf.h>. Inheritance diagram for RooAbsAnaConvPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsAnaConvPdf() [1/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; ). Default constructor, required for persistence. ; Definition at line 85 of file RooAbsAnaConvPdf.cxx. ◆ RooAbsAnaConvPdf() [2/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; const char * ; name, . const char * ; title, . const RooResolutionModel & ; model, . RooRealVar & ; cVar . ). Constructor. ; The supplied resolution model must be constructed with the same convoluted variable as this physics model ('convVar') ; Definition at line 97 of file RooAbsAnaConvPdf.cxx. ◆ RooAbsAnaConvPdf() [3/3]. RooAbsAnaConvPdf::RooAbsAnaConvPdf ; (; const RooAbsAnaConvPdf & ; other, . const char * ; name = nullptr . ). Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsAnaConvPdf.html:78644,Avoid,Avoids,78644,doc/master/classRooAbsAnaConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsAnaConvPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsCachedPdf.h>. Inheritance diagram for RooAbsCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ CacheElem. using RooAbsCachedPdf::CacheElem = PdfCacheElem. Definition at line 86 of file RooAbsCachedPdf.h. Constructor & Destructor Documentation. ◆ RooAbsCachedPdf() [1/3]. RooAbsCachedPdf::RooAbsCachedPdf ; (; ). inline . Definition at line 29 of file RooAbsCachedPdf.h. ◆ RooAbsCachedPdf() [2/3]. RooAbsCachedPdf::RooAbsCachedPdf ; (; const char * ; name, . const char * ; title, . int ; ipOrder = 0 . ). Constructor. ; Definition at line 45 of file RooAbsCachedPdf.cxx. ◆ RooAbsCachedPdf() [3/3]. RooAbsCachedPdf::RooAbsCachedPdf ; (; const RooAbsCachedPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 57 of file RooAbsCachedPdf.cxx. Member Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:76506,Avoid,Avoids,76506,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of exten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddPdf.html:78024,Avoid,Avoids,78024,doc/master/classRooAddPdf.html,https://root.cern,https://root.cern/doc/master/classRooAddPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooArgusBG.h>. Inheritance diagram for RooArgusBG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooArgusBG() [1/5]. RooArgusBG::RooArgusBG ; (; ). inline . Definition at line 24 of file RooArgusBG.h. ◆ RooArgusBG() [2/5]. RooArgusBG::RooArgusBG ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . RooAbsReal & ; _m0, . RooAbsReal & ; _c, . RooAbsReal & ; _p . ). inline . Definition at line 26 of file RooArgusBG.h. ◆ RooArgusBG() [3/5]. RooArgusBG::RooArgusBG ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . RooAbsReal & ; _m0, . RooAbsReal & ; _c . ). inline . Definition at line 30 of file RooArgusBG.h. ◆ RooArgusBG() [4/5]. RooArgusBG::RooArgusBG ; (; const char * ; name, . const char * ; title, . RooAbsReal::Ref ; _m, . RooAbsReal::Ref ; _",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:73563,Avoid,Avoids,73563,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBifurGauss.h>. Inheritance diagram for RooBifurGauss:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBifurGauss() [1/3]. RooBifurGauss::RooBifurGauss ; (; ). inline . Definition at line 24 of file RooBifurGauss.h. ◆ RooBifurGauss() [2/3]. RooBifurGauss::RooBifurGauss ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _sigmaL, . RooAbsReal & ; _sigmaR . ). Definition at line 34 of file RooBifurGauss.cxx. ◆ RooBifurGauss() [3/3]. RooBifurGauss::RooBifurGauss ; (; const RooBifurGauss & ; other, . const char * ; name = nullptr . ). Definition at line 47 of file RooBifurGauss.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooBifurGauss::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:73137,Avoid,Avoids,73137,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBreitWigner.h>. Inheritance diagram for RooBreitWigner:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBreitWigner() [1/3]. RooBreitWigner::RooBreitWigner ; (; ). inline . Definition at line 27 of file RooBreitWigner.h. ◆ RooBreitWigner() [2/3]. RooBreitWigner::RooBreitWigner ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _width . ). Definition at line 36 of file RooBreitWigner.cxx. ◆ RooBreitWigner() [3/3]. RooBreitWigner::RooBreitWigner ; (; const RooBreitWigner & ; other, . const char * ; name = nullptr . ). Definition at line 48 of file RooBreitWigner.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooBreitWigner::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . );",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBreitWigner.html:73109,Avoid,Avoids,73109,doc/master/classRooBreitWigner.html,https://root.cern,https://root.cern/doc/master/classRooBreitWigner.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBukinPdf.h>. Inheritance diagram for RooBukinPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBukinPdf() [1/3]. RooBukinPdf::RooBukinPdf ; (; ). inline . Definition at line 32 of file RooBukinPdf.h. ◆ RooBukinPdf() [2/3]. RooBukinPdf::RooBukinPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _Xp, . RooAbsReal & ; _sigp, . RooAbsReal & ; _xi, . RooAbsReal & ; _rho1, . RooAbsReal & ; _rho2 . ). Construct a Bukin PDF. ; Parameters. nameThe name of the PDF for RooFit's bookkeeping. ; titleThe title for e.g. plotting it. ; _xThe variable. ; _XpThe peak position. ; _sigpThe peak width as FWHM divided by 2*sqrt(2*log(2))=2.35 ; _xiPeak asymmetry. Use values around 0. ; _rho1Left tail. Use slightly negative starting values. ; _rho2Right tail.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBukinPdf.html:73316,Avoid,Avoids,73316,doc/master/classRooBukinPdf.html,https://root.cern,https://root.cern/doc/master/classRooBukinPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCBShape.h>. Inheritance diagram for RooCBShape:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCBShape() [1/3]. RooCBShape::RooCBShape ; (; ). inline . Definition at line 26 of file RooCBShape.h. ◆ RooCBShape() [2/3]. RooCBShape::RooCBShape ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . RooAbsReal & ; _m0, . RooAbsReal & ; _sigma, . RooAbsReal & ; _alpha, . RooAbsReal & ; _n . ). Definition at line 39 of file RooCBShape.cxx. ◆ RooCBShape() [3/3]. RooCBShape::RooCBShape ; (; const RooCBShape & ; other, . const char * ; name = nullptr . ). Definition at line 53 of file RooCBShape.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooCBShape::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:73127,Avoid,Avoids,73127,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction1Binding.h>. Inheritance diagram for RooCFunction1PdfBinding< VO, VI >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction1PdfBinding() [1/3]. template<class VO , class VI > . RooCFunction1PdfBinding< VO, VI >::RooCFunction1PdfBinding ; (; ). inline . Definition at line 283 of file RooCFunction1Binding.h. ◆ RooCFunction1PdfBinding() [2/3]. template<class VO , class VI > . RooCFunction1PdfBinding< VO, VI >::RooCFunction1PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI) ; _func, . RooAbsReal & ; _x . ). Definition at line 320 of file RooCFunction1Binding.h. ◆ RooCFunction1PdfBinding() [3/3]. template<class VO , class VI > . RooCFunction1PdfBinding< VO, VI >::RooCFunction1PdfBinding ; (; const RooCFunction1PdfBinding< VO, VI > & ; other, . cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction1PdfBinding.html:73132,Avoid,Avoids,73132,doc/master/classRooCFunction1PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction1PdfBinding.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction2Binding.h>. Inheritance diagram for RooCFunction2PdfBinding< VO, VI1, VI2 >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction2PdfBinding() [1/3]. template<class VO , class VI1 , class VI2 > . RooCFunction2PdfBinding< VO, VI1, VI2 >::RooCFunction2PdfBinding ; (; ). inline . Definition at line 297 of file RooCFunction2Binding.h. ◆ RooCFunction2PdfBinding() [2/3]. template<class VO , class VI1 , class VI2 > . RooCFunction2PdfBinding< VO, VI1, VI2 >::RooCFunction2PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI1, VI2) ; _func, . RooAbsReal & ; _x, . RooAbsReal & ; _y . ). Definition at line 334 of file RooCFunction2Binding.h. ◆ RooCFunction2PdfBinding() [3/3]. template<class VO , class VI1 , class VI2 > . RooCFunction2PdfBinding< VO, VI1, VI2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction2PdfBinding.html:73209,Avoid,Avoids,73209,doc/master/classRooCFunction2PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction2PdfBinding.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction3Binding.h>. Inheritance diagram for RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction3PdfBinding() [1/3]. template<class VO , class VI1 , class VI2 , class VI3 > . RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::RooCFunction3PdfBinding ; (; ). inline . Definition at line 310 of file RooCFunction3Binding.h. ◆ RooCFunction3PdfBinding() [2/3]. template<class VO , class VI1 , class VI2 , class VI3 > . RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >::RooCFunction3PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI1, VI2, VI3) ; _func, . RooAbsReal & ; _x, . RooAbsReal & ; _y, . RooAbsReal & ; _z . ). Definition at line 350 of file RooCFunction3Binding.h. ◆ RooCFunction3PdfBinding() [3/3]. template<class VO ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction3PdfBinding.html:73280,Avoid,Avoids,73280,doc/master/classRooCFunction3PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction3PdfBinding.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCFunction4Binding.h>. Inheritance diagram for RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCFunction4PdfBinding() [1/3]. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >::RooCFunction4PdfBinding ; (; ). inline . Definition at line 299 of file RooCFunction4Binding.h. ◆ RooCFunction4PdfBinding() [2/3]. template<class VO , class VI1 , class VI2 , class VI3 , class VI4 > . RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >::RooCFunction4PdfBinding ; (; const char * ; name, . const char * ; title, . VO(*)(VI1, VI2, VI3, VI4) ; _func, . RooAbsReal & ; _x, . RooAbsReal & ; _y, . RooAbsReal & ; _z, . RooAbsReal & ; _w . ). Definition at line 339 of file RooCFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCFunction4PdfBinding.html:73351,Avoid,Avoids,73351,doc/master/classRooCFunction4PdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooCFunction4PdfBinding.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooCachedPdf.h>. Inheritance diagram for RooCachedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCachedPdf() [1/4]. RooCachedPdf::RooCachedPdf ; (; ). inline . Definition at line 22 of file RooCachedPdf.h. ◆ RooCachedPdf() [2/4]. RooCachedPdf::RooCachedPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; _pdf, . const RooArgSet & ; cacheObs . ). Constructor taking name, title and function to be cached and fixed choice of variable to cache. ; To control granularity of the binning of the cache histogram set the desired properties in the binning named ""cache"" in the observables of the function. If the fixed set of cache observables does not match the observables defined in the use context of the p.d.f the cache is still filled completely. Ee.g. when it is specifi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedPdf.html:76757,Avoid,Avoids,76757,doc/master/classRooCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooCachedPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooDstD0BG.h>. Inheritance diagram for RooDstD0BG:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooDstD0BG() [1/3]. RooDstD0BG::RooDstD0BG ; (; ). inline . Definition at line 28 of file RooDstD0BG.h. ◆ RooDstD0BG() [2/3]. RooDstD0BG::RooDstD0BG ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _dm, . RooAbsReal & ; _dm0, . RooAbsReal & ; _c, . RooAbsReal & ; _a, . RooAbsReal & ; _b . ). Definition at line 45 of file RooDstD0BG.cxx. ◆ RooDstD0BG() [3/3]. RooDstD0BG::RooDstD0BG ; (; const RooDstD0BG & ; other, . const char * ; name = nullptr . ). Definition at line 58 of file RooDstD0BG.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooDstD0BG::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDstD0BG.html:73301,Avoid,Avoids,73301,doc/master/classRooDstD0BG.html,https://root.cern,https://root.cern/doc/master/classRooDstD0BG.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooEffProd.h>. Inheritance diagram for RooEffProd:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooEffProd() [1/3]. RooEffProd::RooEffProd ; (; ). inline . Definition at line 22 of file RooEffProd.h. ◆ RooEffProd() [2/3]. RooEffProd::RooEffProd ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf, . RooAbsReal & ; efficiency . ). Constructs the product of the PDF inPdf with the efficiency function inEff. ; Definition at line 33 of file RooEffProd.cxx. ◆ RooEffProd() [3/3]. RooEffProd::RooEffProd ; (; const RooEffProd & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 45 of file RooEffProd.cxx. Member Function Documentation. ◆ Class(). static TClass * RooEffProd::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEffProd.html:73496,Avoid,Avoids,73496,doc/master/classRooEffProd.html,https://root.cern,https://root.cern/doc/master/classRooEffProd.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooEfficiency.h>. Inheritance diagram for RooEfficiency:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooEfficiency() [1/3]. RooEfficiency::RooEfficiency ; (; ). inline . Default constructor. ; Definition at line 28 of file RooEfficiency.h. ◆ RooEfficiency() [2/3]. RooEfficiency::RooEfficiency ; (; const char * ; name, . const char * ; title, . const RooAbsReal & ; effFunc, . const RooAbsCategory & ; cat, . const char * ; sigCatName . ). Construct an N+1 dimensional efficiency p.d.f from an N-dimensional efficiency function and a category cat with two states (0,1) that indicate if a given event should be counted as rejected or accepted respectively. ; Definition at line 49 of file RooEfficiency.cxx. ◆ RooEfficiency() [3/3]. RooEfficiency::RooEfficiency ; (; const RooEfficiency & ; o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooEfficiency.html:73829,Avoid,Avoids,73829,doc/master/classRooEfficiency.html,https://root.cern,https://root.cern/doc/master/classRooEfficiency.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooExponential.h>. Inheritance diagram for RooExponential:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooExponential() [1/3]. RooExponential::RooExponential ; (; ). inline . Definition at line 24 of file RooExponential.h. ◆ RooExponential() [2/3]. RooExponential::RooExponential ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; variable, . RooAbsReal & ; coefficient, . bool ; negateCoefficient = false . ). Definition at line 42 of file RooExponential.cxx. ◆ RooExponential() [3/3]. RooExponential::RooExponential ; (; const RooExponential & ; other, . const char * ; name = nullptr . ). Definition at line 53 of file RooExponential.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooExponential::analyticalIntegral ; (; Int_t ; code, . const char * ; r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooExponential.html:73428,Avoid,Avoids,73428,doc/master/classRooExponential.html,https://root.cern,https://root.cern/doc/master/classRooExponential.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFFTConvPdf.h>. Inheritance diagram for RooFFTConvPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ BufStrat. enum RooFFTConvPdf::BufStrat. EnumeratorExtend ; Mirror ; Flat . Definition at line 47 of file RooFFTConvPdf.h. Constructor & Destructor Documentation. ◆ RooFFTConvPdf() [1/4]. RooFFTConvPdf::RooFFTConvPdf ; (; ). inline . Definition at line 28 of file RooFFTConvPdf.h. ◆ RooFFTConvPdf() [2/4]. RooFFTConvPdf::RooFFTConvPdf ; (; const char * ; name, . const char * ; title, . RooRealVar & ; convVar, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . Int_t ; ipOrder = 2 . ). Constructor for numerical (FFT) convolution of PDFs. ; Parameters. [in]nameName of this PDF ; [in]titleTitle for plotting this PDF ; [in]convVarObservable to convolve the PDFs in . AttentionUse a high number of bins ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:83968,Avoid,Avoids,83968,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFunctor1DBinding.h>. Inheritance diagram for RooFunctor1DPdfBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooFunctor1DPdfBinding() [1/3]. RooFunctor1DPdfBinding::RooFunctor1DPdfBinding ; (; ). inline . Definition at line 60 of file RooFunctor1DBinding.h. ◆ RooFunctor1DPdfBinding() [2/3]. RooFunctor1DPdfBinding::RooFunctor1DPdfBinding ; (; const char * ; name, . const char * ; title, . const ROOT::Math::IBaseFunctionOneDim & ; ftor, . RooAbsReal & ; vars . ). Definition at line 80 of file RooFunctor1DBinding.cxx. ◆ RooFunctor1DPdfBinding() [3/3]. RooFunctor1DPdfBinding::RooFunctor1DPdfBinding ; (; const RooFunctor1DPdfBinding & ; other, . const char * ; name = nullptr . ). Definition at line 89 of file RooFunctor1DBinding.cxx. Member Function Documentation. ◆ Class(). stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html:73076,Avoid,Avoids,73076,doc/master/classRooFunctor1DPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DPdfBinding.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFunctorBinding.h>. Inheritance diagram for RooFunctorPdfBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooFunctorPdfBinding() [1/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; ). default . ◆ RooFunctorPdfBinding() [2/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; const char * ; name, . const char * ; title, . const ROOT::Math::IBaseFunctionMultiDim & ; ftor, . const RooArgList & ; v . ). Create a RooFit PDF that makes ftor usable as a PDF in RooFit. ; Parameters. nameName of the object. ; titleTitle (e.g. for plotting) ; ftorFunctor instance to be evaluated and normalised. ; vRooFit variables to be passed to the function. . Definition at line 108 of file RooFunctorBinding.cxx. ◆ RooFunctorPdfBinding() [3/3]. RooFunctorPdfBinding::RooFunctorPdfBinding ; (; const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctorPdfBinding.html:73906,Avoid,Avoids,73906,doc/master/classRooFunctorPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctorPdfBinding.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGamma.h>. Inheritance diagram for RooGamma:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooGamma() [1/3]. RooGamma::RooGamma ; (; ). inline . Definition at line 22 of file RooGamma.h. ◆ RooGamma() [2/3]. RooGamma::RooGamma ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _gamma, . RooAbsReal & ; _beta, . RooAbsReal & ; _mu . ). Definition at line 61 of file RooGamma.cxx. ◆ RooGamma() [3/3]. RooGamma::RooGamma ; (; const RooGamma & ; other, . const char * ; name = nullptr . ). Definition at line 75 of file RooGamma.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooGamma::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implements the actual analytical integral(s) adv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGamma.html:73851,Avoid,Avoids,73851,doc/master/classRooGamma.html,https://root.cern,https://root.cern/doc/master/classRooGamma.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGaussian.h>. Inheritance diagram for RooGaussian:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooGaussian() [1/4]. RooGaussian::RooGaussian ; (; ). inline . Definition at line 26 of file RooGaussian.h. ◆ RooGaussian() [2/4]. RooGaussian::RooGaussian ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _sigma . ). inline . Definition at line 28 of file RooGaussian.h. ◆ RooGaussian() [3/4]. RooGaussian::RooGaussian ; (; const char * ; name, . const char * ; title, . RooAbsReal::Ref ; _x, . RooAbsReal::Ref ; _mean, . RooAbsReal::Ref ; _sigma . ). Definition at line 36 of file RooGaussian.cxx. ◆ RooGaussian() [4/4]. RooGaussian::RooGaussian ; (; const RooGaussian & ; other, . const char * ; name = nullptr . ). Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGaussian.html:73327,Avoid,Avoids,73327,doc/master/classRooGaussian.html,https://root.cern,https://root.cern/doc/master/classRooGaussian.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooGenericPdf.h>. Inheritance diagram for RooGenericPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooGenericPdf() [1/4]. RooGenericPdf::RooGenericPdf ; (; ). Definition at line 56 of file RooGenericPdf.cxx. ◆ ~RooGenericPdf(). RooGenericPdf::~RooGenericPdf ; (; ). override . Definition at line 58 of file RooGenericPdf.cxx. ◆ RooGenericPdf() [2/4]. RooGenericPdf::RooGenericPdf ; (; const char * ; name, . const char * ; title, . const char * ; formula, . const RooArgList & ; dependents . ). Constructor with a name, title, formula expression and a list of variables. ; Definition at line 86 of file RooGenericPdf.cxx. ◆ RooGenericPdf() [3/4]. RooGenericPdf::RooGenericPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; dependents . ). Constructor with formula ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooGenericPdf.html:74968,Avoid,Avoids,74968,doc/master/classRooGenericPdf.html,https://root.cern,https://root.cern/doc/master/classRooGenericPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooHistConstraint.h>. Inheritance diagram for RooHistConstraint:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooHistConstraint() [1/3]. RooHistConstraint::RooHistConstraint ; (; ). inline . Definition at line 19 of file RooHistConstraint.h. ◆ RooHistConstraint() [2/3]. RooHistConstraint::RooHistConstraint ; (; const char * ; name, . const char * ; title, . const RooArgSet & ; phfSet, . int ; threshold = 1000000 . ). Create a new RooHistConstraint. ; Parameters. [in]nameName of the PDF. This is used to identify it in a likelihood model. ; [in]titleTitle for plotting etc. ; [in]phfSetSet of parametrised histogram functions (RooParamHistFunc). ; [in]thresholdThreshold (bin content) up to which statistical uncertainties are taken into account. . Definition at line 38 of file RooHistCon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistConstraint.html:73524,Avoid,Avoids,73524,doc/master/classRooHistConstraint.html,https://root.cern,https://root.cern/doc/master/classRooHistConstraint.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooHistPdf.h>. Inheritance diagram for RooHistPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooHistPdf() [1/6]. RooHistPdf::RooHistPdf ; (; ). inline . Definition at line 32 of file RooHistPdf.h. ◆ RooHistPdf() [2/6]. RooHistPdf::RooHistPdf ; (; const char * ; name, . const char * ; title, . const RooArgSet & ; vars, . const RooDataHist & ; dhist, . Int_t ; intOrder = 0 . ). Constructor from a RooDataHist. ; RooDataHist dimensions can be either real or discrete. See RooDataHist::RooDataHist for details on the binning. RooHistPdf neither owns or clone 'dhist' and the user must ensure the input histogram exists for the entire life span of this PDF. ; Definition at line 54 of file RooHistPdf.cxx. ◆ RooHistPdf() [3/6]. RooHistPdf::RooHistPdf ; (; const char * ; name, . const char * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:76540,Avoid,Avoids,76540,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooIntegralMorph.h>. Inheritance diagram for RooIntegralMorph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooIntegralMorph() [1/3]. RooIntegralMorph::RooIntegralMorph ; (; ). default . ◆ RooIntegralMorph() [2/3]. RooIntegralMorph::RooIntegralMorph ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _pdf1, . RooAbsReal & ; _pdf2, . RooAbsReal & ; _x, . RooAbsReal & ; _alpha, . bool ; cacheAlpha = false . ). Constructor with observables x, pdf shapes pdf1 and pdf2 which represent the shapes at the end points of the interpolation parameter alpha If doCacheAlpha is true, a two-dimensional cache is constructed in both alpha and x. ; Definition at line 101 of file RooIntegralMorph.cxx. ◆ RooIntegralMorph() [3/3]. RooIntegralMorph::RooIntegralMorph ; (; const RooIntegralMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooIntegralMorph.html:80636,Avoid,Avoids,80636,doc/master/classRooIntegralMorph.html,https://root.cern,https://root.cern/doc/master/classRooIntegralMorph.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooJeffreysPrior.h>. Inheritance diagram for RooJeffreysPrior:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooJeffreysPrior() [1/3]. RooJeffreysPrior::RooJeffreysPrior ; (; ). inline . Definition at line 20 of file RooJeffreysPrior.h. ◆ RooJeffreysPrior() [2/3]. RooJeffreysPrior::RooJeffreysPrior ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; nominal, . const RooArgList & ; paramSet, . const RooArgList & ; obsSet . ). Construct a new JeffreysPrior. ; Parameters. [in]nameName of this object. ; [in]titleTitle (for plotting) ; [in]nominalThe PDF to base Jeffrey's prior on. ; [in]paramSetParameters of the PDF. ; [in]obsSetObservables of the PDF. . Definition at line 38 of file RooJeffreysPrior.cxx. ◆ RooJeffreysPrior() [3/3]. RooJeffreysPrior::RooJeffreysPrior ; (; c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJeffreysPrior.html:73785,Avoid,Avoids,73785,doc/master/classRooJeffreysPrior.html,https://root.cern,https://root.cern/doc/master/classRooJeffreysPrior.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooKeysPdf.h>. Inheritance diagram for RooKeysPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Mirror. enum RooKeysPdf::Mirror. EnumeratorNoMirror ; MirrorLeft ; MirrorRight ; MirrorBoth ; MirrorAsymLeft ; MirrorAsymLeftRight ; MirrorAsymRight ; MirrorLeftAsymRight ; MirrorAsymBoth . Definition at line 26 of file RooKeysPdf.h. Constructor & Destructor Documentation. ◆ RooKeysPdf() [1/4]. RooKeysPdf::RooKeysPdf ; (; ). coverity[UNINIT_CTOR] ; Definition at line 55 of file RooKeysPdf.cxx. ◆ RooKeysPdf() [2/4]. RooKeysPdf::RooKeysPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooDataSet & ; data, . Mirror ; mirror = NoMirror, . double ; rho = 1 . ). cache stuff about x ; Definition at line 63 of file RooKeysPdf.cxx. ◆ RooKeysPdf() [3/4]. RooKeysPdf::RooKeysPdf ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooKeysPdf.html:74838,Avoid,Avoids,74838,doc/master/classRooKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooKeysPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLandau.h>. Inheritance diagram for RooLandau:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooLandau() [1/4]. RooLandau::RooLandau ; (; ). inline . Definition at line 26 of file RooLandau.h. ◆ RooLandau() [2/4]. RooLandau::RooLandau ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _sigma . ). inline . Definition at line 28 of file RooLandau.h. ◆ RooLandau() [3/4]. RooLandau::RooLandau ; (; const char * ; name, . const char * ; title, . RooAbsReal::Ref ; _x, . RooAbsReal::Ref ; _mean, . RooAbsReal::Ref ; _sigma . ). Definition at line 38 of file RooLandau.cxx. ◆ RooLandau() [4/4]. RooLandau::RooLandau ; (; const RooLandau & ; other, . const char * ; name = nullptr . ). Definition at line 49 of file RooLandau.cxx. Membe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLandau.html:73143,Avoid,Avoids,73143,doc/master/classRooLandau.html,https://root.cern,https://root.cern/doc/master/classRooLandau.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLegacyExpPoly.h>. Inheritance diagram for RooLegacyExpPoly:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooLegacyExpPoly() [1/3]. RooLegacyExpPoly::RooLegacyExpPoly ; (; ). inline . Definition at line 20 of file RooLegacyExpPoly.h. ◆ RooLegacyExpPoly() [2/3]. RooLegacyExpPoly::RooLegacyExpPoly ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . int ; lowestOrder = 1 . ). Create a polynomial in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe variable of the polynomial ; [in]coefListThe coefficients \( a_i \) ; [in]lowestOrder[optional] Truncate the sum such that it skips the lower orders: ; \[; 1. + \sum_{i=0}^{\mathrm{coefList.size()}} a_{i} * x^{(i + \mathrm{lowestOrder})",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegacyExpPoly.html:73745,Avoid,Avoids,73745,doc/master/classRooLegacyExpPoly.html,https://root.cern,https://root.cern/doc/master/classRooLegacyExpPoly.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooLognormal.h>. Inheritance diagram for RooLognormal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooLognormal() [1/3]. RooLognormal::RooLognormal ; (; ). inline . Definition at line 19 of file RooLognormal.h. ◆ RooLognormal() [2/3]. RooLognormal::RooLognormal ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _m0, . RooAbsReal & ; _k, . bool ; useStandardParametrization = false . ). Definition at line 40 of file RooLognormal.cxx. ◆ RooLognormal() [3/3]. RooLognormal::RooLognormal ; (; const RooLognormal & ; other, . const char * ; name = nullptr . ). Definition at line 62 of file RooLognormal.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooLognormal::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLognormal.html:73979,Avoid,Avoids,73979,doc/master/classRooLognormal.html,https://root.cern,https://root.cern/doc/master/classRooLognormal.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMomentMorph.h>. Inheritance diagram for RooMomentMorph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Setting. enum RooMomentMorph::Setting. EnumeratorLinear ; NonLinear ; NonLinearPosFractions ; NonLinearLinFractions ; SineLinear . Definition at line 31 of file RooMomentMorph.h. Constructor & Destructor Documentation. ◆ RooMomentMorph() [1/4]. RooMomentMorph::RooMomentMorph ; (; ). coverity[UNINIT_CTOR] ; Definition at line 38 of file RooMomentMorph.cxx. ◆ RooMomentMorph() [2/4]. RooMomentMorph::RooMomentMorph ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _m, . const RooArgList & ; varList, . const RooArgList & ; pdfList, . const RooArgList & ; mrefList, . Setting ; setting = NonLinearPosFractions . ). CTOR. ; Definition at line 70 of file RooMomentMorph.cxx. ◆ Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorph.html:74193,Avoid,Avoids,74193,doc/master/classRooMomentMorph.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorph.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMultiVarGaussian.h>. Inheritance diagram for RooMultiVarGaussian:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooMultiVarGaussian() [1/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; ). inline . Definition at line 34 of file RooMultiVarGaussian.h. ◆ RooMultiVarGaussian() [2/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; const char * ; name, . const char * ; title, . const RooArgList & ; xvec, . const RooArgList & ; mu, . const TMatrixDBase & ; covMatrix . ). Definition at line 44 of file RooMultiVarGaussian.cxx. ◆ RooMultiVarGaussian() [3/6]. RooMultiVarGaussian::RooMultiVarGaussian ; (; const char * ; name, . const char * ; title, . const RooArgList & ; xvec, . const RooFitResult & ; fr, . bool ; reduceToConditional = true . ). Definition at line 77 of file RooMultiVarGaus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:74395,Avoid,Avoids,74395,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNDKeysPdf.h>. Inheritance diagram for RooNDKeysPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ Mirror. enum RooNDKeysPdf::Mirror. EnumeratorNoMirror ; MirrorLeft ; MirrorRight ; MirrorBoth ; MirrorAsymLeft ; MirrorAsymLeftRight ; MirrorAsymRight ; MirrorLeftAsymRight ; MirrorAsymBoth . Definition at line 48 of file RooNDKeysPdf.h. Constructor & Destructor Documentation. ◆ RooNDKeysPdf() [1/9]. RooNDKeysPdf::RooNDKeysPdf ; (; ). default . ◆ RooNDKeysPdf() [2/9]. RooNDKeysPdf::RooNDKeysPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; varList, . const RooDataSet & ; data, . TString ; options = ""ma"", . double ; rho = 1, . double ; nSigma = 3, . bool ; rotate = true, . bool ; sortInput = true . ). Construct N-dimensional kernel estimation p.d.f. ; in observable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNDKeysPdf.html:79157,Avoid,Avoids,79157,doc/master/classRooNDKeysPdf.html,https://root.cern,https://root.cern/doc/master/classRooNDKeysPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNonCentralChiSquare.h>. Inheritance diagram for RooNonCentralChiSquare:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNonCentralChiSquare() [1/3]. RooNonCentralChiSquare::RooNonCentralChiSquare ; (; ). inline . Definition at line 22 of file RooNonCentralChiSquare.h. ◆ RooNonCentralChiSquare() [2/3]. RooNonCentralChiSquare::RooNonCentralChiSquare ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _k, . RooAbsReal & ; _lambda . ). Definition at line 62 of file RooNonCentralChiSquare.cxx. ◆ RooNonCentralChiSquare() [3/3]. RooNonCentralChiSquare::RooNonCentralChiSquare ; (; const RooNonCentralChiSquare & ; other, . const char * ; name = nullptr . ). Definition at line 80 of file RooNonCentralChiSquare.cxx. Member Function Documentation. ◆ analyt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNonCentralChiSquare.html:74481,Avoid,Avoids,74481,doc/master/classRooNonCentralChiSquare.html,https://root.cern,https://root.cern/doc/master/classRooNonCentralChiSquare.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooNumConvPdf.h>. Inheritance diagram for RooNumConvPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooNumConvPdf() [1/3]. RooNumConvPdf::RooNumConvPdf ; (; ). Definition at line 83 of file RooNumConvPdf.cxx. ◆ RooNumConvPdf() [2/3]. RooNumConvPdf::RooNumConvPdf ; (; const char * ; name, . const char * ; title, . RooRealVar & ; convVar, . RooAbsPdf & ; pdf, . RooAbsPdf & ; resmodel . ). Definition at line 89 of file RooNumConvPdf.cxx. ◆ RooNumConvPdf() [3/3]. RooNumConvPdf::RooNumConvPdf ; (; const RooNumConvPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 110 of file RooNumConvPdf.cxx. ◆ ~RooNumConvPdf(). RooNumConvPdf::~RooNumConvPdf ; (; ). override . Destructor. ; Definition at line 129 of file RooNumConvPdf.cxx. Member Function Docume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:76251,Avoid,Avoids,76251,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooParametricStepFunction.h>. Inheritance diagram for RooParametricStepFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooParametricStepFunction() [1/3]. RooParametricStepFunction::RooParametricStepFunction ; (; ). inline . Definition at line 29 of file RooParametricStepFunction.h. ◆ RooParametricStepFunction() [2/3]. RooParametricStepFunction::RooParametricStepFunction ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . TArrayD const & ; limits, . Int_t ; nBins = 1 . ). Constructor. ; Definition at line 91 of file RooParametricStepFunction.cxx. ◆ RooParametricStepFunction() [3/3]. RooParametricStepFunction::RooParametricStepFunction ; (; const RooParametricStepFunction & ; other, . const char * ; name = nullptr . ). Copy c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooParametricStepFunction.html:77239,Avoid,Avoids,77239,doc/master/classRooParametricStepFunction.html,https://root.cern,https://root.cern/doc/master/classRooParametricStepFunction.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPoisson.h>. Inheritance diagram for RooPoisson:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPoisson() [1/4]. RooPoisson::RooPoisson ; (; ). inline . Definition at line 21 of file RooPoisson.h. ◆ RooPoisson() [2/4]. RooPoisson::RooPoisson ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . bool ; noRounding = false . ). inline . Definition at line 23 of file RooPoisson.h. ◆ RooPoisson() [3/4]. RooPoisson::RooPoisson ; (; const char * ; name, . const char * ; title, . RooAbsReal::Ref ; _x, . RooAbsReal::Ref ; _mean, . bool ; noRounding = false . ). Constructor. ; Definition at line 30 of file RooPoisson.cxx. ◆ RooPoisson() [4/4]. RooPoisson::RooPoisson ; (; const RooPoisson & ; other, . const char * ; name = nullptr . ). Copy constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPoisson.html:73352,Avoid,Avoids,73352,doc/master/classRooPoisson.html,https://root.cern,https://root.cern/doc/master/classRooPoisson.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPolynomial.h>. Inheritance diagram for RooPolynomial:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPolynomial() [1/4]. RooPolynomial::RooPolynomial ; (; ). inline . Definition at line 27 of file RooPolynomial.h. ◆ RooPolynomial() [2/4]. RooPolynomial::RooPolynomial ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x . ). Definition at line 83 of file RooPolynomial.cxx. ◆ RooPolynomial() [3/4]. RooPolynomial::RooPolynomial ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . Int_t ; lowestOrder = 1 . ). Create a polynomial in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe variable of the polynomial ; [in]coefListThe coefficients \( a_i \) ; [in]lowestOrde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:73897,Avoid,Avoids,73897,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPowerSum.h>. Inheritance diagram for RooPowerSum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPowerSum() [1/3]. RooPowerSum::RooPowerSum ; (; ). inline . Definition at line 22 of file RooPowerSum.h. ◆ RooPowerSum() [2/3]. RooPowerSum::RooPowerSum ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . const RooArgList & ; expList . ). Create a power law in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe variable of the polynomial ; [in]coefListThe coefficients \( a_i \) ; [in]expListThe exponentials \( b_i \) ; \[; \sum_{i=0}^{n} a_{i} * x^{b_{i}}; \]. This means that RooPowerSum powl(""pow"", ""pow"", x, RooArgList(a1, a2), RooArgList(b1,b2)); RooArgListRooArgList is a contain",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:73381,Avoid,Avoids,73381,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooProjectedPdf.h>. Inheritance diagram for RooProjectedPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooProjectedPdf() [1/3]. RooProjectedPdf::RooProjectedPdf ; (; ). Default constructor. ; Definition at line 44 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [2/3]. RooProjectedPdf::RooProjectedPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _intpdf, . const RooArgSet & ; intObs . ). Construct projection of input pdf '_intpdf' over observables 'intObs'. ; Definition at line 53 of file RooProjectedPdf.cxx. ◆ RooProjectedPdf() [3/3]. RooProjectedPdf::RooProjectedPdf ; (; const RooProjectedPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 80 of file RooProjectedPdf.cxx. Member Function Documentation. ◆ analyticalInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProjectedPdf.html:74289,Avoid,Avoids,74289,doc/master/classRooProjectedPdf.html,https://root.cern,https://root.cern/doc/master/classRooProjectedPdf.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooResolutionModel.h>. Inheritance diagram for RooResolutionModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooResolutionModel() [1/3]. RooResolutionModel::RooResolutionModel ; (; ). inlinedefault . ◆ RooResolutionModel() [2/3]. RooResolutionModel::RooResolutionModel ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; _x . ). Constructor with convolution variable 'x'. ; The convolution variable needs to be convertible to real values, and be able to give information about its range. This is supported by e.g. RooRealVar or RooLinearVar, which accepts offsetting and scaling an observable. ; Definition at line 81 of file RooResolutionModel.cxx. ◆ RooResolutionModel() [3/3]. RooResolutionModel::RooResolutionModel ; (; const RooResolutionModel & ; other, . const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooResolutionModel.html:76335,Avoid,Avoids,76335,doc/master/classRooResolutionModel.html,https://root.cern,https://root.cern/doc/master/classRooResolutionModel.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooSimultaneous.h>. Inheritance diagram for RooSimultaneous:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooSimultaneous() [1/7]. RooSimultaneous::RooSimultaneous ; (; ). inline . Definition at line 58 of file RooSimultaneous.h. ◆ RooSimultaneous() [2/7]. RooSimultaneous::RooSimultaneous ; (; const char * ; name, . const char * ; title, . RooAbsCategoryLValue & ; inIndexCat . ). Constructor with index category. ; PDFs associated with indexCat states can be added after construction with the addPdf() function.; RooSimultaneous can function without having a PDF associated with every single state. The normalization in such cases is taken from the number of registered PDFs, but getVal() will assert if when called for an unregistered index state. ; Definition at line 115 of file RooSimul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:78318,Avoid,Avoids,78318,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooTFnPdfBinding.h>. Inheritance diagram for RooTFnPdfBinding:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooTFnPdfBinding() [1/3]. RooTFnPdfBinding::RooTFnPdfBinding ; (; ). default . ◆ RooTFnPdfBinding() [2/3]. RooTFnPdfBinding::RooTFnPdfBinding ; (; const char * ; name, . const char * ; title, . TF1 * ; func, . const RooArgList & ; list . ). Definition at line 28 of file RooTFnPdfBinding.cxx. ◆ RooTFnPdfBinding() [3/3]. RooTFnPdfBinding::RooTFnPdfBinding ; (; const RooTFnPdfBinding & ; other, . const char * ; name = nullptr . ). Definition at line 38 of file RooTFnPdfBinding.cxx. Member Function Documentation. ◆ Class(). static TClass * RooTFnPdfBinding::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooTFnPdfBinding::Class_Name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnPdfBinding.html:72996,Avoid,Avoids,72996,doc/master/classRooTFnPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnPdfBinding.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooUniform.h>. Inheritance diagram for RooUniform:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooUniform() [1/3]. RooUniform::RooUniform ; (; ). inline . Definition at line 26 of file RooUniform.h. ◆ RooUniform() [2/3]. RooUniform::RooUniform ; (; const char * ; name, . const char * ; title, . const RooArgSet & ; _x . ). Definition at line 32 of file RooUniform.cxx. ◆ RooUniform() [3/3]. RooUniform::RooUniform ; (; const RooUniform & ; other, . const char * ; name = nullptr . ). Definition at line 41 of file RooUniform.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooUniform::analyticalIntegral ; (; Int_t ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integral. ; Reimplemented from RooAbsReal.; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniform.html:72636,Avoid,Avoids,72636,doc/master/classRooUniform.html,https://root.cern,https://root.cern/doc/master/classRooUniform.html,1,['Avoid'],['Avoids']
Safety,"rg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooVoigtian.h>. Inheritance diagram for RooVoigtian:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooVoigtian() [1/3]. RooVoigtian::RooVoigtian ; (; ). inline . Definition at line 24 of file RooVoigtian.h. ◆ RooVoigtian() [2/3]. RooVoigtian::RooVoigtian ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; _x, . RooAbsReal & ; _mean, . RooAbsReal & ; _width, . RooAbsReal & ; _sigma, . bool ; doFast = false . ). Construct a RooVoigtian PDF, which represents the convolution of a Breit-Wigner with a Gaussian. ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; _xThe observable for the PDF. ; _meanThe mean of the distribution. ; _widthThe full width at half maximum (FWHM) of the Breit-Wigner (often referred to as \(\Gamma\) or \(2\ga",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:74178,Avoid,Avoids,74178,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['Avoid'],['Avoids']
Safety,"ri, Int_t& nparx, Int_t& istat); Returns concerning the current status of the minimization; *-* =========================================================; *-* User-called; *-* Namely, it returns:; *-* FMIN: the best function value found so far; *-* FEDM: the estimated vertical distance remaining to minimum; *-* ERRDEF: the value of UP defining parameter uncertainties; *-* NPARI: the number of currently variable parameters; *-* NPARX: the highest (external) parameter number defined by user; *-* ISTAT: a status integer indicating how good is the covariance; *-* matrix: 0= not calculated at all; *-* 1= approximation only, not accurate; *-* 2= full matrix, but forced positive-definite; *-* 3= full accurate covariance matrix; *. void mntiny(volatile Double_t epsp1, Double_t& epsbak); To find the machine precision*-*-*-*-*-*-*-; *-* =============================; *-* Compares its argument with the value 1.0, and returns; *-* the value .TRUE. if they are equal. To find EPSMAC; *-* safely by foiling the Fortran optimizer; *. Bool_t mnunpt(TString& cfname); -*-*Returns .TRUE. if CFNAME contains unprintable characters; *-* ========================================================; *. void mnvert(Double_t* a, Int_t l, Int_t m, Int_t n, Int_t& ifail); Inverts a symmetric matrix*-; *-* ==========================; *-* inverts a symmetric matrix. matrix is first scaled to; *-* have all ones on the diagonal (equivalent to change of units); *-* but no pivoting is done since matrix is positive-definite.; *. void mnwarn(const char* copt, const char* corg, const char* cmes); Prints Warning messages*-*-; *-* =======================; *-* If COPT='W', CMES is a WARning message from CORG.; *-* If COPT='D', CMES is a DEBug message from CORG.; *-* If SET WARnings is in effect (the default), this routine; *-* prints the warning message CMES coming from CORG.; *-* If SET NOWarnings is in effect, the warning message is; *-* stored in a circular buffer of length kMAXMES.; *-* If called with CORG=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMinuit.html:56138,safe,safely,56138,root/html604/TMinuit.html,https://root.cern,https://root.cern/root/html604/TMinuit.html,1,['safe'],['safely']
Safety,"riable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. bool GetCovMatrix(double* cov) const; get covariance matrix. bool GetHessianMatrix(double* h) const; get Hessian - inverse of covariance matrix; just invert it; but need to get the compact form to avoid the zero for the fixed parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix. double GlobalCC(unsigned int ) const; global correlation coefficient for parameter i. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); Perform Minos analysis for the given parameter i. void DoClear(); reset TMinuit. void DoReleaseFixParameter(int ivar); check if a parameter is defined and in case it was fixed released; TMinuit is not able to release free parameters by redefining them; so we need to force the release. void PrintResults(); print-out results using classic Minuit format (mnprin). bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj); contour plot for parameter i and j; need a valid FunctionMinimum otherwise ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMinuitMinimizer.html:9316,avoid,avoid,9316,root/html530/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html530/TMinuitMinimizer.html,1,['avoid'],['avoid']
Safety,"riable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void RetrieveParams(); retrieve from TMinuit minimum parameter values; and errors. void RetrieveErrorMatrix(); get covariance error matrix from TMinuit; when some parameters are fixed filled the corresponding rows and column with zero's. unsigned int NCalls() const; return total number of function calls. double MinValue() const; return minimum function value. double Edm() const; return expected distance from the minimum. unsigned int NFree() const; return number of free parameters. bool GetCovMatrix(double* cov) const; get covariance matrix. bool GetHessianMatrix(double* h) const; get Hessian - inverse of covariance matrix; just invert it; but need to get the compact form to avoid the zero for the fixed parameters. int CovMatrixStatus() const; return status of covariance matrix; status: 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix. double GlobalCC(unsigned int ) const; global correlation coefficient for parameter i. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0); Perform Minos analysis for the given parameter i. void DoClear(); reset TMinuit. void DoReleaseFixParameter(int ivar); check if a parameter is defined and in case it was fixed released; TMinuit is not able to release free parameters by redefining them; so we need to force the release. void PrintResults(); print-out results using classic Minuit format (mnprin). void SuppressMinuitWarnings(bool nowarn = true); suppress Minuit2 warnings. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMinuitMinimizer.html:9364,avoid,avoid,9364,root/html532/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html532/TMinuitMinimizer.html,4,['avoid'],['avoid']
Safety,"riable is stored (i.e. one wants to be able to assign values to it): RooTemplateProxy<RooRealVar> Other template arguments are possible, as long as they derive from RooAbsArg. Increment the class version of the owning class.; Make sure that the right type is passed in the constructor of the proxy.; Always use proxy-> and *proxy to work with the stored object. No need to cast.; Only if necessary If errors about missing symbols connected to RooTemplateProxy appear at link time, a specific template instantiation for RooTemplateProxy is not yet in ROOT's dictionaries. These two lines should be added to the LinkDef.h of the project: #pragma link C++ class RooTemplateProxy<RooMultiCategory>+;; #pragma read sourceClass=""RooCategoryProxy"" targetClass=""RooTemplateProxy<RooMultiCategory>""; Replace RooMultiCategory by the proper type. If the proxy was holding a real-valued object, use sourceClass=""RooRealProxy"".; The first line adds the proxy class to the dictionary, the second line enables reading a legacy RooCategoryProxy from a file, and converting it to the new type-safe proxy. If no old proxies have to be read from files, this line can be omitted.; If the template instantiation that triggered the missing symbols seems to be a very common instantiation, request for it to be added to RooFit by creating a pull request for ROOT. If it is rather uncommon, it is sufficient to add it to the LinkDef.h of the local project only. . Definition at line 152 of file RooTemplateProxy.h. Public Member Functions;  RooTemplateProxy ();  ; template<typename Bool = bool, typename = std::enable_if_t<std::is_same<Bool,bool>::value>> ;  RooTemplateProxy (const char *theName, const char *desc, RooAbsArg *owner, Bool valueServer=true, bool shapeServer=false);  Constructor with owner. ;  ; TClass * IsA () const override;  ; const LValue_t * lvptr (const LValue_t *) const;  Return l-value pointer to contents. ;  ; const LValue_t * lvptr (const RooAbsArg *) const;  Return l-value pointer to contents.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:5120,safe,safe,5120,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['safe'],['safe']
Safety,"riable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf302_utilfuncsDefinition rf302_utilfuncs.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_3' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma' with range [-inf, inf] of the RooGaussian 'model_4' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_1_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_2_Int[x,y]) using numeric integrator RooIntegrator1D to calculate Int(y); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_3_Int[x,y]) using numeric integrator RooIntegrator1D to calcul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf302__utilfuncs_8C.html:5690,safe,safe,5690,doc/master/rf302__utilfuncs_8C.html,https://root.cern,https://root.cern/doc/master/rf302__utilfuncs_8C.html,1,['safe'],['safe']
Safety,"rials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development ROOT 7. For the first time since 20 year (i.e. ever), the ROOT team plans to break backward compatibility for crucial interfaces - once.; This new major version of ROOT will make ROOT much simpler and safer to use: we want to increase clarity and usability.; If you are a physicist, please read on - this is about your ROOT.; The ROOT team will be releasing parts of ROOT 7 throughout the coming years.; Previews will gradually sneak into the ROOT sources, in the namespace ROOT::Experimental for those parts that are not yet cast in stone, and in the namespace ROOT for those that are.; We will use standard C++ types, standard interface behavior (e.g. with respect to ownership and thread safety), good documentation and tests: we are trying to be nice!; Feedback; The main point of the meeting and this page is to solicit your feedback. Most of it has been taken care of in the code already.; Building ROOT 7; Pre-requisites; Support for the c++14 standard is required. Usage of g++ >= 5 or clang >= 3.4 is recommended.; Relevant cmake variables; The CMAKE_CXX_STANDARD cmake variables must be set to at least 14.; Building from source would look similar to this:; $ mkdir root7_build; $ cd roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:2056,safe,safer,2056,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,1,['safe'],['safer']
Safety,"ribe the transformations defined as a composition between a rotation and a translation using the class ROOT::Math::Transform3D. It is important to note that transformations act differently on vectors and points. The vectors only rotate, therefore when applying a transformation (rotation + translation) on a vector, only the rotation operates while the translation has no effect. The Transform3D class interface is similar to the one used in the CLHEP Geometry package (class ).; Lorentz rotation:; generic Lorentz rotation described by a 4x4 matrix containing a 3D rotation part and a boost part (class ROOT::Math::LorentzRotation); a pure boost in an arbitrary direction and described by a 4x4 symmetric matrix or 10 numbers (class ROOT::Math::Boost); boost along the axis:x(ROOT::Math::BoostX), y(ROOT::Math::BoostY) and z(ROOT::Math::BoostZ). 13.12.1.6 Minimal Vector Classes Interface; We have tried to keep the interface to a minimal level by:. Avoiding methods that provide the same functionality but use different names (like getX() and x()).; Minimizing the number of setter methods, avoiding methods, which can be ambiguous and can set the vector classes in an inconsistent state. We provide only methods which set all the coordinates at the same time or set only the coordinates on which the vector is based, for example SetX() for a Cartesian vector. We then enforce the use of transformations as rotations or translations (additions) for modifying the vector contents.; The majority of the functionality, which is present in the CLHEP package, involving operations on two vectors, is moved in separated helper functions (see ROOT::Math::VectorUtil). This has the advantage that the basic interface will remain more stable with time while additional functions can be added easily. 13.12.1.7 Naming Convention; As part of ROOT, the GenVector package adheres to the prescribed ROOT naming convention, with some (approved) exceptions, as described here:. Every class and function is in the R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:725088,Avoid,Avoiding,725088,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Avoid'],['Avoiding']
Safety,"ribute . ; Collaborate with Us . You are hereHome » Development » Git Primer Creating a Pull Request. Prerequisites. You have set up git on our system; You have registered a GitHub account and forked the ROOT repository; You have cloned your forked ROOT repository using git clone https://github.com/<your GitHub username>/root. After you have cloned the repository, you will be on the master branch. Do not make changes to the master branch, as this branch will contain the newest changes in ROOT we will later pull in to our feature branch.; Making your changes; Before implementing your changes, create a new branch that we will work on in isolation from master. In this case, we will name it histogram-race-condition-fix, but you may name it differently according to what your contribution will be.; git checkout -b histogram-race-condition-fix; After implementing your changes, add and commit your changes (More about how to use git here):; git add hist/hist/somefile.cxx; git commit -m ""Avoid race condition on Ubuntu 16.04""; git push --set-upstream origin histogram-race-condition-fix; Your changes are now in your forked repository on GitHub. We will now make the pull request.; Making the pull request on GitHub; If you go to https://github.com/<your GitHub username>/root, you will see a notification saying ""Your recently pushed branches: histogram-race-condition-fix (some minutes ago)"":. You can now hit the green ""Compare & pull request"" button which lets you create the pull request.; Fill in a reasonable description of what your new feature is, and hit ""Create pull request"". A project member will later initiate a build of your pull request and then review your pull request before giving feedback and in the end hopefully merge it. More about how what happens after submitting the pull request can be found in the contributing readme.; Pulling the last changes from upstream/master; Often, there might have been changes in the upstream/master repository that you want to have toget",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/creating-pull-request.html:2801,Avoid,Avoid,2801,d/creating-pull-request.html,https://root.cern,https://root.cern/d/creating-pull-request.html,1,['Avoid'],['Avoid']
Safety,"ride;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; void DrawPolygon (Option_t *option="""");  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Int_t GetNvert () const;  ; Int_t GetNz () const;  ; Double_t GetScale (Int_t i) const;  ; ThreadData_t & GetThreadData () const;  ; Double_t GetX (Int_t i) const;  ; Double_t GetXOffset (Int_t i) const;  ; Double_t GetY (Int_t i) const;  ; Double_t GetYOffset (Int_t i) const;  ; Double_t * GetZ () const;  ; Double_t GetZ (Int_t ipl) const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetCurrentVertices (Double_t x0, Double_t y0, Double_t scale);  ; void SetCurrentZ (Double_t z, Int_t iz);  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buff) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoXtru.html:2815,Safe,Safety,2815,doc/master/classTGeoXtru.html,https://root.cern,https://root.cern/doc/master/classTGeoXtru.html,2,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"ridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoConeSeg. ◆ Contains_v(). void TGeoCone::Contains_v ; (; const Double_t * ; points, . Bool_t * ; inside, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoConeSeg. ◆ DeclFileName(). static const char * TGeoCone::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 96 of file TGeoCone.h. ◆ DistancetoPrimitive(). Int_t TGeoCone::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Computes distance from point (px,py) to the object. ; This member function must be implemented for each graphics primitive. This default function returns a big number (999999). ; Reimplemented from TGeoBBox.; Reimplemented in TGeoConeSeg. ◆ DistFromInside(). Double_t TGeoCone::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoConeSeg. ◆ DistFromInside_v(). void TGeoCone::DistFromInside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoConeSeg. ◆ DistFromInsideS(). static Double_t TGeoCone::DistFromInsideS ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t ; dz, . Double_t ; rmin1, . Double_t ; rmax1, . Double_t ; rmin2, . Double_t ; rmax2 . ). static . ◆ DistFromOutside(). Double_t TGeoCone::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoConeSeg. ◆ DistFromOutside_v(). void TGeoCone::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCone.html:26485,safe,safe,26485,doc/master/classTGeoCone.html,https://root.cern,https://root.cern/doc/master/classTGeoCone.html,1,['safe'],['safe']
Safety,"ridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoTubeSeg. ◆ Contains_v(). void TGeoTube::Contains_v ; (; const Double_t * ; points, . Bool_t * ; inside, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoTubeSeg. ◆ DeclFileName(). static const char * TGeoTube::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 91 of file TGeoTube.h. ◆ DistancetoPrimitive(). Int_t TGeoTube::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Computes distance from point (px,py) to the object. ; This member function must be implemented for each graphics primitive. This default function returns a big number (999999). ; Reimplemented from TGeoBBox.; Reimplemented in TGeoTubeSeg. ◆ DistFromInside(). Double_t TGeoTube::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoTubeSeg. ◆ DistFromInside_v(). void TGeoTube::DistFromInside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoTubeSeg. ◆ DistFromInsideS(). static Double_t TGeoTube::DistFromInsideS ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t ; rmin, . Double_t ; rmax, . Double_t ; dz . ). static . ◆ DistFromOutside(). Double_t TGeoTube::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoTubeSeg. ◆ DistFromOutside_v(). void TGeoTube::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsiz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTube.html:25815,safe,safe,25815,doc/master/classTGeoTube.html,https://root.cern,https://root.cern/doc/master/classTGeoTube.html,1,['safe'],['safe']
Safety,"ries. Function documentation; TDatime(); Create a TDatime and set it to the current time. TDatime(Int_t date, Int_t time); Create a TDatime and set it to the specified date and time.; See Set(Int_t, Int_t) about the date, time format. TDatime(Int_t year, Int_t month, Int_t day, Int_t hour, Int_t min, Int_t sec); Create a TDatime and set it to the specified year, month,; day, time, hour, minute and second. See Set() about the format. TDatime(const char* sqlDateTime); Expects as input a string in SQL date/time compatible format, like:; yyyy-mm-dd hh:mm:ss. Int_t GetDayOfWeek() const; Returns day of week, with Monday being day 1 and Sunday day 7. const char * AsString() const; Return the date & time as a string (ctime() format).; Copy result because it points to a statically allocated string. const char * AsString(char* out) const; Return the date & time as a string (ctime() format).; Result is copied into out (and out is returned). Make sure; out can at least contain 26 characters. Thread safe. const char * AsSQLString() const; Return the date & time in SQL compatible string format, like:; 1997-01-15 20:16:28. The returned string buffer is static and; will be reused. UInt_t Convert(Bool_t toGMT = kFALSE) const; Convert fDatime from TDatime format to the standard time_t format.; If toGMT is true, the time offset of the current local time zone is; subtracted from the returned time_t. One use of such a non-standard time_t; value is to convert a TDatime object that contains local time to GMT,; as in this example:. TDatime now;; now.Set(now.Convert(kTRUE));. Caution: the time_t returned from Convert(kTRUE) is incompatible with; regular Unix time - it contains an artificial, locale-dependent offset. void Copy(TDatime& datime) const; Copy this to datime. void FillBuffer(char*& buffer); Encode Date/Time into buffer, used by I/O system. UInt_t Get() const; Return raw date/time as encoded by TDatime. Note, this value cannot; be used to e.g. calculate time differences, as it is a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDatime.html:3234,safe,safe,3234,root/html528/TDatime.html,https://root.cern,https://root.cern/root/html528/TDatime.html,6,['safe'],['safe']
Safety,"riestotal number of entries to be distributed;; TVirtualPacketizer::EUseEstOptTVirtualPacketizer::fUseEstOptControl usage of estimated values for the progress info; Bool_tTVirtualPacketizer::fValidConstructed properly?. private:. TMap*fAssignedPackMap {worker,packetizer} of lat assignement; TVirtualPacketizer*fCurrentPacketizer being currently processed; TList*fPacketizersPacketizers to be processed; TIter*fPacketizersIterIterator on fPacketizers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerMulti(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerMulti(); Destructor. TDSetElement * GetNextPacket(TSlave* wrk, TMessage* r); Get next packet from the current packetizer.; If the current packetizer is done, move to next.; Retun null when all packetizers are done. TVirtualPacketizer * CreatePacketizer(TDSet* dset, TList* wrks, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Create a packetizer for dataset 'dset'; Return null on failure. TPacketizerMulti(). TPacketizerMulti(const TPacketizerMulti& ). void operator=(const TPacketizerMulti& ). Int_t GetEstEntriesProcessed(Float_t f, Long64_t& ent, Long64_t& bytes, Long64_t& calls). Float_t GetCurrentRate(Bool_t& all). void StopProcess(Bool_t abort). void MarkBad(TSlave* wrk, TProofProgressStatus* st, TList** missing); { if (fCurrent) fCurrent->MarkBad(wrk, st, missing); return; }. Int_t AddProcessed(TSlave* wrk, TProofProgressStatus* st, Double_t lat, TList** missing). Int_t GetActiveWorkers(); { if (fCurrent) return fCurrent->GetActiveWorkers(); return 0; }. » Author: G. Ganis Jan 2010 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Thu Sep 23 20:19:01 2010 » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPacketizerMulti.html:10427,abort,abort,10427,root/html528/TPacketizerMulti.html,https://root.cern,https://root.cern/root/html528/TPacketizerMulti.html,1,['abort'],['abort']
Safety,"rimary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:108945,detect,detector,108945,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['detect'],['detector']
Safety,"rimitive as a C++ statement(s) on output stream ""out"". ;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void Sizeof3D () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Double_t *param);  ;  TGeoBBox (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  ~TGeoBBox () override;  ; Bool_t CouldBeCrossed (const Double_t *point, const Double_t *dir) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; const char * GetAxisName (Int_t iaxis) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetSegsAndPols (TBuffer3D &buffer) const override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPara.html:3964,avoid,avoid,3964,doc/master/classTGeoPara.html,https://root.cern,https://root.cern/doc/master/classTGeoPara.html,1,['avoid'],['avoid']
Safety,"rimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerLocal(Bool_t client = kTRUE); TProofPlayerLocal(const TProofPlayerLocal&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLocal.html:11505,abort,abort,11505,root/html602/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLocal.html,2,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"ring> sArgs = {};; 2954 sArgs.insert(sArgs.begin(), args.begin(), args.end());; 2955 return sArgs;; 2956}; 2957 ; 2958////////////////////////////////////////////////////////////////////////////////; 2959/// INTERNAL function!; 2960/// Used by rootcling to inject interpreter arguments through a C-interface layer.; 2961 ; 2962const char**& TROOT::GetExtraInterpreterArgs() {; 2963 static const char** extraInterpArgs = nullptr;; 2964 return extraInterpArgs;; 2965}; 2966 ; 2967////////////////////////////////////////////////////////////////////////////////; 2968 ; 2969#ifdef ROOTPREFIX; 2970static Bool_t IgnorePrefix() {; 2971 static Bool_t ignorePrefix = gSystem->Getenv(""ROOTIGNOREPREFIX"");; 2972 return ignorePrefix;; 2973}; 2974#endif; 2975 ; 2976////////////////////////////////////////////////////////////////////////////////; 2977/// Get the rootsys directory in the installation. Static utility function.; 2978 ; 2979const TString& TROOT::GetRootSys() {; 2980 // Avoid returning a reference to a temporary because of the conversion; 2981 // between std::string and TString.; 2982 const static TString rootsys = ROOT::FoundationUtils::GetRootSys();; 2983 return rootsys;; 2984}; 2985 ; 2986////////////////////////////////////////////////////////////////////////////////; 2987/// Get the binary directory in the installation. Static utility function.; 2988 ; 2989const TString& TROOT::GetBinDir() {; 2990#ifdef ROOTBINDIR; 2991 if (IgnorePrefix()) {; 2992#endif; 2993 static TString rootbindir;; 2994 if (rootbindir.IsNull()) {; 2995 rootbindir = ""bin"";; 2996 gSystem->PrependPathName(GetRootSys(), rootbindir);; 2997 }; 2998 return rootbindir;; 2999#ifdef ROOTBINDIR; 3000 } else {; 3001 const static TString rootbindir = ROOTBINDIR;; 3002 return rootbindir;; 3003 }; 3004#endif; 3005}; 3006 ; 3007////////////////////////////////////////////////////////////////////////////////; 3008/// Get the library directory in the installation. Static utility function.; 3009 ; 3010const TString& TR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:113425,Avoid,Avoid,113425,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['Avoid'],['Avoid']
Safety,"ring> sArgs = {};; 2958 sArgs.insert(sArgs.begin(), args.begin(), args.end());; 2959 return sArgs;; 2960}; 2961 ; 2962////////////////////////////////////////////////////////////////////////////////; 2963/// INTERNAL function!; 2964/// Used by rootcling to inject interpreter arguments through a C-interface layer.; 2965 ; 2966const char**& TROOT::GetExtraInterpreterArgs() {; 2967 static const char** extraInterpArgs = nullptr;; 2968 return extraInterpArgs;; 2969}; 2970 ; 2971////////////////////////////////////////////////////////////////////////////////; 2972 ; 2973#ifdef ROOTPREFIX; 2974static Bool_t IgnorePrefix() {; 2975 static Bool_t ignorePrefix = gSystem->Getenv(""ROOTIGNOREPREFIX"");; 2976 return ignorePrefix;; 2977}; 2978#endif; 2979 ; 2980////////////////////////////////////////////////////////////////////////////////; 2981/// Get the rootsys directory in the installation. Static utility function.; 2982 ; 2983const TString& TROOT::GetRootSys() {; 2984 // Avoid returning a reference to a temporary because of the conversion; 2985 // between std::string and TString.; 2986 const static TString rootsys = ROOT::FoundationUtils::GetRootSys();; 2987 return rootsys;; 2988}; 2989 ; 2990////////////////////////////////////////////////////////////////////////////////; 2991/// Get the binary directory in the installation. Static utility function.; 2992 ; 2993const TString& TROOT::GetBinDir() {; 2994#ifdef ROOTBINDIR; 2995 if (IgnorePrefix()) {; 2996#endif; 2997 static TString rootbindir;; 2998 if (rootbindir.IsNull()) {; 2999 rootbindir = ""bin"";; 3000 gSystem->PrependPathName(GetRootSys(), rootbindir);; 3001 }; 3002 return rootbindir;; 3003#ifdef ROOTBINDIR; 3004 } else {; 3005 const static TString rootbindir = ROOTBINDIR;; 3006 return rootbindir;; 3007 }; 3008#endif; 3009}; 3010 ; 3011////////////////////////////////////////////////////////////////////////////////; 3012/// Get the library directory in the installation. Static utility function.; 3013 ; 3014const TString& TR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:113672,Avoid,Avoid,113672,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['Avoid'],['Avoid']
Safety,"rint (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const override;  Write all objects in this collection. ;  ; Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) override;  Write all objects in this collection. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOrdCollection.html:8499,safe,safe,8499,doc/master/classTOrdCollection.html,https://root.cern,https://root.cern/doc/master/classTOrdCollection.html,3,['safe'],['safe']
Safety,"rint (Option_t *option, Int_t recurse) const;  Print the collection header and its elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ; void RemoveAll ();  ; virtual void RemoveAll (TCollection *col);  Remove all objects in collection col from this collection. ;  ; void SetCurrentCollection ();  Set this collection to be the globally accessible collection. ;  ; void SetName (const char *name);  ; virtual void SetOwner (Bool_t enable=kTRUE);  Set whether this collection is the owner (enable==true) of its content. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool UseRWLock (Bool_t enable=true);  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Dr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMap.html:8304,safe,safe,8304,doc/master/classTMap.html,https://root.cern,https://root.cern/doc/master/classTMap.html,1,['safe'],['safe']
Safety,"rint (Option_t *option="""") const override;  Print TBranch parameters. ;  ; void PrintCacheInfo () const;  Print the information we have about which basket is currently cached and whether they have been 'used'/'read' from the cache. ;  ; virtual void ReadBasket (TBuffer &b);  Loop on all leaves of this branch to read Basket buffer. ;  ; virtual void Refresh (TBranch *b);  Refresh this branch using new information in b This function is called by TTree::Refresh. ;  ; virtual void Reset (Option_t *option="""");  Reset a Branch. ;  ; virtual void ResetAddress ();  Reset the address of the branch. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Reset a Branch. ;  ; virtual void ResetReadEntry ();  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBasketSize (Int_t buffsize);  Set the basket size The function makes sure that the basket size is greater than fEntryOffsetlen. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; virtual void SetEntryOffsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFirstEntry (Long64_t entry);  set the first entry nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookBranch.html:8231,avoid,avoid,8231,doc/master/classTHbookBranch.html,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html,1,['avoid'],['avoid']
Safety,"riteCurrentRecurse; 148 // << "" lock:"" << this << std::endl;; 149 }; 150 ; 151 // std::cerr << ""#"" << ""0x"" << std::hex << local << "" ended with : "" << std::dec << fWriteCurrentRecurse << "" 0x"" <<; 152 // std::hex << fWriteCurrent.load() << "" lock:"" << this << std::endl;; 153}; 154 ; 155void TCollection::TErrorLock::ReadLock(const TCollection *collection, const char *function); 156{; 157 auto local = std::this_thread::get_id();; 158 ; 159 {; 160 ROOT::Internal::TSpinLockGuard guard(fSpinLockFlag);; 161 fReadSet.insert(local); // this is not thread safe ...; 162 }; 163 ++fReadCurrentRecurse;; 164 ; 165 if (fWriteCurrentRecurse) {; 166 auto holder = fWriteCurrent.load();; 167 if (holder != local) ConflictReport(holder, ""ReadLock with WriteLock taken"", collection, function);; 168 }; 169}; 170 ; 171void TCollection::TErrorLock::ReadUnlock(); 172{; 173 auto local = std::this_thread::get_id();; 174 {; 175 ROOT::Internal::TSpinLockGuard guard(fSpinLockFlag);; 176 fReadSet.erase(local); // this is not thread safe ...; 177 }; 178 --fReadCurrentRecurse;; 179}; 180 ; 181#endif // R__CHECK_COLLECTION_MULTI_ACCESS; 182 ; 183////////////////////////////////////////////////////////////////////////////////; 184/// TNamed destructor.; 185 ; 186TCollection::~TCollection(); 187{; 188 // Required since we overload TObject::Hash.; 189 ROOT::CallRecursiveRemoveIfNeeded(*this);; 190}; 191 ; 192////////////////////////////////////////////////////////////////////////////////; 193/// Add all objects from collection col to this collection.; 194 ; 195void TCollection::AddAll(const TCollection *col); 196{; 197 TIter next(col);; 198 TObject *obj;; 199 ; 200 while ((obj = next())); 201 Add(obj);; 202}; 203 ; 204////////////////////////////////////////////////////////////////////////////////; 205/// Add all arguments to the collection. The list of objects must be; 206/// terminated by 0, e.g.: l.AddVector(o1, o2, o3, o4, 0);; 207 ; 208void TCollection::AddVector(TObject *va_(obj1), ...); 209{; 210 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:6890,safe,safe,6890,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['safe'],['safe']
Safety,"riteFastArray() [12/15]. void TBufferJSON::WriteFastArray ; (; const ULong_t * ; l, . Long64_t ; n . ). finalvirtual . Write array of ULong_t to buffer. ; Implements TBuffer.; Definition at line 3392 of file TBufferJSON.cxx. ◆ WriteFastArray() [13/15]. void TBufferJSON::WriteFastArray ; (; const UShort_t * ; h, . Long64_t ; n . ). finalvirtual . Write array of UShort_t to buffer. ; Implements TBuffer.; Definition at line 3360 of file TBufferJSON.cxx. ◆ WriteFastArray() [14/15]. Int_t TBufferJSON::WriteFastArray ; (; void ** ; startp, . const TClass * ; cl, . Long64_t ; n = 1, . Bool_t ; isPreAlloc = kFALSE, . TMemberStreamer * ; s = nullptr . ). finalvirtual . Recall TBuffer function to avoid gcc warning message. ; Implements TBuffer.; Definition at line 3485 of file TBufferJSON.cxx. ◆ WriteFastArray() [15/15]. void TBufferJSON::WriteFastArray ; (; void * ; start, . const TClass * ; cl, . Long64_t ; n = 1, . TMemberStreamer * ; s = nullptr . ). finalvirtual . Recall TBuffer function to avoid gcc warning message. ; Implements TBuffer.; Definition at line 3432 of file TBufferJSON.cxx. ◆ WriteFastArrayString(). void TBufferJSON::WriteFastArrayString ; (; const Char_t * ; c, . Long64_t ; n . ). finalvirtual . Write array of Char_t to buffer. ; Implements TBuffer.; Definition at line 3336 of file TBufferJSON.cxx. ◆ WriteFloat(). void TBufferJSON::WriteFloat ; (; Float_t ; f). finalvirtual . Writes Float_t value to buffer. ; Implements TBuffer.; Definition at line 3828 of file TBufferJSON.cxx. ◆ WriteInt(). void TBufferJSON::WriteInt ; (; Int_t ; i). finalvirtual . Writes Int_t value to buffer. ; Implements TBuffer.; Definition at line 3774 of file TBufferJSON.cxx. ◆ WriteLong(). void TBufferJSON::WriteLong ; (; Long_t ; l). finalvirtual . Writes Long_t value to buffer. ; Implements TBuffer.; Definition at line 3792 of file TBufferJSON.cxx. ◆ WriteLong64(). void TBufferJSON::WriteLong64 ; (; Long64_t ; l). finalvirtual . Writes Long64_t value to buffer. ; Implements TBuff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:96779,avoid,avoid,96779,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['avoid'],['avoid']
Safety,"rithm associates each; algorithm with a number. There is a utility function to help; to set the value of compress. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; cout << ""Error opening file"" << endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile.Recover: 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced objects of the file being closed; will not be referenced again, it is possible to minimize the size; of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFile.html:27684,Recover,Recover,27684,root/html534/TFile.html,https://root.cern,https://root.cern/root/html534/TFile.html,1,['Recover'],['Recover']
Safety,"rithm associates each; algorithm with a number. There is a utility function to help; to set the value of compress. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; cout << ""Error opening file"" << endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile::Recover 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced objects of the file being closed; will not be referenced again, it is possible to minimize the size; of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFile.html:27001,Recover,Recover,27001,root/html530/TFile.html,https://root.cern,https://root.cern/root/html530/TFile.html,2,['Recover'],['Recover']
Safety,"ritten to the current file so far. Use TDirectoryFile::SetBufferSize to force a given buffer size.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by obj->GetName().; The option can be a combination of:; ""SingleKey""; ""Overwrite""; ""WriteDelete"" Using the ""Overwrite"" option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the ""WriteDelete"" option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. The ""SingleKey"" option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key. An object is read from this directory via TDirectoryFile::Get. The function returns the total number of bytes written to the directory. It returns 0 if the object cannot be written. WARNING: avoid special characters like '^','$','.' in the name as they are used by the regular expression parser (see TRegexp). ; Reimplemented from TDirectory.; Definition at line 1909 of file TDirectoryFile.cxx. Member Data Documentation. ◆ fBufferSize. Int_t TDirectoryFile::fBufferSize {0}. protected . Default buffer size to create new TKeys. ; Definition at line 41 of file TDirectoryFile.h. ◆ fDatimeC. TDatime TDirectoryFile::fDatimeC. protected . Date and time when directory is created. ; Definition at line 37 of file TDirectoryFile.h. ◆ fDatimeM. TDatime TDirectoryFile::fDatimeM. protected . Date and time of last modification. ; Definition at line 38 of file TDirectoryFile.h. ◆ fFile. TFile* TDirectoryFile::fFile {nullptr}. protected . Pointer to current file in memory. ; Definition at line 45 of file TDirectoryFile.h. ◆ fKeys. TList* TDirectoryFile::fKeys {nullptr}. protected . Pointer to keys list in memory. ; Definition at line 46 of file TDirectoryFile.h. ◆ fModified. Bool_t TDirectoryFile::fModifie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile.html:54832,avoid,avoid,54832,doc/master/classTDirectoryFile.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile.html,1,['avoid'],['avoid']
Safety,"rivate:. TSelector(const TSelector&); TSelector&operator=(const TSelector&). Data Members; public:. enum EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortfAbortabort status; TList*fInputlist of objects available during processing; TObject*fObjectcurrent object if processing object (vs. TTree); TStringfOptionoption given to TTree::Process; TSelectorList*fOutputlist of objects created during processing; Long64_tfStatusselector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSelector.html:9091,abort,aborted,9091,root/html528/TSelector.html,https://root.cern,https://root.cern/root/html528/TSelector.html,3,['abort'],['aborted']
Safety,"rix ("") + fDataSetInfo.GetClassInfo(cls)->GetName() + TString("")""));; 624 if (h != 0) {; 625 h->Write();; 626 delete h;; 627 }; 628 }; 629 } else {; 630 m = fDataSetInfo.CorrelationMatrix(""Signal"");; 631 h = fDataSetInfo.CreateCorrelationMatrixHist(m, ""CorrelationMatrixS"", ""Correlation Matrix (signal)"");; 632 if (h != 0) {; 633 h->Write();; 634 delete h;; 635 }; 636 ; 637 m = fDataSetInfo.CorrelationMatrix(""Background"");; 638 h = fDataSetInfo.CreateCorrelationMatrixHist(m, ""CorrelationMatrixB"", ""Correlation Matrix (background)"");; 639 if (h != 0) {; 640 h->Write();; 641 delete h;; 642 }; 643 ; 644 m = fDataSetInfo.CorrelationMatrix(""Regression"");; 645 h = fDataSetInfo.CreateCorrelationMatrixHist(m, ""CorrelationMatrix"", ""Correlation Matrix"");; 646 if (h != 0) {; 647 h->Write();; 648 delete h;; 649 }; 650 }; 651 ; 652 // some default transformations to evaluate; 653 // NOTE: all transformations are destroyed after this test; 654 TString processTrfs = ""I""; //""I;N;D;P;U;G,D;""; 655 ; 656 // plus some user defined transformations; 657 processTrfs = fTransformations;; 658 ; 659 // remove any trace of identity transform - if given (avoid to apply it twice); 660 std::vector<TMVA::TransformationHandler *> trfs;; 661 TransformationHandler *identityTrHandler = 0;; 662 ; 663 std::vector<TString> trfsDef = gTools().SplitString(processTrfs, ';');; 664 std::vector<TString>::iterator trfsDefIt = trfsDef.begin();; 665 for (; trfsDefIt != trfsDef.end(); ++trfsDefIt) {; 666 trfs.push_back(new TMVA::TransformationHandler(fDataSetInfo, ""Factory""));; 667 TString trfS = (*trfsDefIt);; 668 ; 669 // Log() << kINFO << Endl;; 670 Log() << kDEBUG << ""current transformation string: '"" << trfS.Data() << ""'"" << Endl;; 671 TMVA::CreateVariableTransforms(trfS, fDataSetInfo, *(trfs.back()), Log());; 672 ; 673 if (trfS.BeginsWith('I')); 674 identityTrHandler = trfs.back();; 675 }; 676 ; 677 const std::vector<Event *> &inputEvents = fDataSetInfo.GetDataSet()->GetEventCollection();; 678 ; 679 // apply a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:26421,avoid,avoid,26421,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['avoid'],['avoid']
Safety,"rlaps, checkcrossings, ntracks, vertex);; 221}; 222 ; 223////////////////////////////////////////////////////////////////////////////////; 224/// Geometry checking method (see TGeoChecker).; 225 ; 226void TGeoPainter::CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; 227{; 228 fChecker->CheckGeometry(nrays, startx, starty, startz);; 229}; 230 ; 231////////////////////////////////////////////////////////////////////////////////; 232/// Check overlaps for the top volume of the geometry, within a limit OVLP.; 233 ; 234void TGeoPainter::CheckOverlaps(const TGeoVolume *vol, Double_t ovlp, Option_t *option) const; 235{; 236 fChecker->CheckOverlaps(vol, ovlp, option);; 237}; 238 ; 239////////////////////////////////////////////////////////////////////////////////; 240/// Check current point in the geometry.; 241 ; 242void TGeoPainter::CheckPoint(Double_t x, Double_t y, Double_t z, Option_t *option, Double_t safety); 243{; 244 fChecker->CheckPoint(x, y, z, option, safety);; 245}; 246 ; 247////////////////////////////////////////////////////////////////////////////////; 248/// Test for shape navigation methods. Summary for test numbers:; 249/// - 1: DistFromInside/Outside. Sample points inside the shape. Generate; 250/// directions randomly in cos(theta). Compute DistFromInside and move the; 251/// point with bigger distance. Compute DistFromOutside back from new point.; 252/// Plot d-(d1+d2); 253 ; 254void TGeoPainter::CheckShape(TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option); 255{; 256 fChecker->CheckShape(shape, testNo, nsamples, option);; 257}; 258 ; 259////////////////////////////////////////////////////////////////////////////////; 260/// Clear the list of visible volumes; 261/// reset the kVisOnScreen bit for volumes previously in the list; 262 ; 263void TGeoPainter::ClearVisibleVolumes(); 264{; 265 if (!fVisVolumes); 266 return;; 267 TIter next(fVisVolumes);; 268 TGeoVolume *vol;; 269 while ((vol = (TGeoVolume *)n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:8083,safe,safety,8083,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['safe'],['safety']
Safety,"rlo. 2: SetPoissonBkgGaussEff(x,y,em,sde,tau). Background: Poisson; Efficiency: Gaussian. when the background is simultaneously measured; from sidebands (or MC), and; the efficiency is modeled as Gaussian. 3: SetGaussBkgGaussEff(x,bm,em,sde,sdb). Background: Gaussian; Efficiency: Gaussian. when background and efficiency can both be; modeled as Gaussian. 4: SetPoissonBkgKnownEff(x,y,tau,e). Background: Poisson; Efficiency: Known. when the background is simultaneously measured; from sidebands (or MC). 5: SetGaussBkgKnownEff(x,bm,sdb,e). Background: Gaussian; Efficiency: Known. when background is Gaussian. 6: SetKnownBkgBinomEff(x,z,b,m). Background: Known; Efficiency: Binomial. when signal efficiency was determined from Monte Carlo. 7: SetKnownBkgGaussEff(x,em,sde,b). Background: Known; Efficiency: Gaussian. when background is known and efficiency Gaussian. Parameters and further explanation. For all models:. x = number of observed events in the experiment. Efficiency (e or em) is the detection probability for signal.; A low efficiency hence generally means weaker limits.; If the efficiency of an experiment (with analysis cuts) is; dealt with elsewhere, em or e can be set to one. For Poisson background measurements (sideband or MC):. y = number of observed events in background region; tau =; Either: the ratio between signal and background region; in case background is observed.; Or: the ratio between observed and simulated live-time; in case background is determined from MC. For Gaussian efficiency or background:. bm = estimate of the background; sdb = corresponding standard deviation. em = estimate of the efficiency; sde = corresponding standard deviation. If the efficiency scale of dealt with elsewhere,; set em to 1 and sde to the relative uncertainty. For Binomial signal efficiency:. m = number of MC events generated; z = number of MC events observed. For the case of known background expectation or known efficiency:. e = true efficiency (considered known); b = back",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRolke.html:2274,detect,detection,2274,root/html528/TRolke.html,https://root.cern,https://root.cern/root/html528/TRolke.html,6,['detect'],['detection']
Safety,"rm, . Double_t * ; vertex, . Double_t * ; normals . ); const. ◆ GetVisibleCorner(). void TGeoTrd1::GetVisibleCorner ; (; const Double_t * ; point, . Double_t * ; vertex, . Double_t * ; normals . ); const. ◆ InspectShape(). void TGeoTrd1::InspectShape ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ IsA(). TClass * TGeoTrd1::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBBox.; Definition at line 78 of file TGeoTrd1.h. ◆ IsCylType(). Bool_t TGeoTrd1::IsCylType ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 68 of file TGeoTrd1.h. ◆ operator=(). TGeoTrd1 & TGeoTrd1::operator= ; (; const TGeoTrd1 & ; ). protecteddelete . ◆ Safety(). Double_t TGeoTrd1::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Safety_v(). void TGeoTrd1::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SavePrimitive(). void TGeoTrd1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetDimensions(). void TGeoTrd1::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [1/2]. void TGeoTrd1::SetPoints ; (; Double_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoTrd1::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetVertex(). void TGeoTrd1::SetVertex ; (; Double_t * ; vertex); const. ◆ Sizeof3D(). void TGeoTrd1::Sizeof3D ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Streamer(). void TGeoTrd1::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrd1.html:27857,safe,safe,27857,doc/master/classTGeoTrd1.html,https://root.cern,https://root.cern/doc/master/classTGeoTrd1.html,1,['safe'],['safe']
Safety,"rm, . Double_t * ; vertex, . Double_t * ; normals . ); const. ◆ GetVisibleCorner(). void TGeoTrd2::GetVisibleCorner ; (; const Double_t * ; point, . Double_t * ; vertex, . Double_t * ; normals . ); const. ◆ InspectShape(). void TGeoTrd2::InspectShape ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ IsA(). TClass * TGeoTrd2::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBBox.; Definition at line 80 of file TGeoTrd2.h. ◆ IsCylType(). Bool_t TGeoTrd2::IsCylType ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 70 of file TGeoTrd2.h. ◆ operator=(). TGeoTrd2 & TGeoTrd2::operator= ; (; const TGeoTrd2 & ; ). protecteddelete . ◆ Safety(). Double_t TGeoTrd2::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Safety_v(). void TGeoTrd2::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SavePrimitive(). void TGeoTrd2::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetDimensions(). void TGeoTrd2::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [1/2]. void TGeoTrd2::SetPoints ; (; Double_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoTrd2::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetVertex(). void TGeoTrd2::SetVertex ; (; Double_t * ; vertex); const. ◆ Sizeof3D(). void TGeoTrd2::Sizeof3D ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Streamer(). void TGeoTrd2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrd2.html:28080,safe,safe,28080,doc/master/classTGeoTrd2.html,https://root.cern,https://root.cern/doc/master/classTGeoTrd2.html,1,['safe'],['safe']
Safety,"rmal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this tube segment; first check if point is inside the tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Compute distance from inside point to surface of the tube segment (static); Boundary safe algorithm.; Do Z. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube segment; Boundary safe algorithm. Double_t DistFromOutsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); Static method to compute distance to arbitrary tube segment from outside point; Boundary safe algorithm. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube segment; fist localize point w.r.t tube. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this tube segment shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume in case of Z div",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSeg.html:16627,safe,safe,16627,root/html534/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSeg.html,6,['safe'],['safe']
Safety,rmal. Double_t TGeoNavigator::fNormal[3]. private . last computed safety radius ; Definition at line 46 of file TGeoNavigator.h. ◆ fOverlapClusters. Int_t* TGeoNavigator::fOverlapClusters. private . current recursive position in fOverlapClusters ; Definition at line 60 of file TGeoNavigator.h. ◆ fOverlapMark. Int_t TGeoNavigator::fOverlapMark. private . current size of fOverlapClusters ; Definition at line 59 of file TGeoNavigator.h. ◆ fOverlapSize. Int_t TGeoNavigator::fOverlapSize. private . next daughter index after FindNextBoundary ; Definition at line 58 of file TGeoNavigator.h. ◆ fPath. TString TGeoNavigator::fPath. private . current local matrix of the selected division cell ; Definition at line 84 of file TGeoNavigator.h. ◆ fPoint. Double_t TGeoNavigator::fPoint[3]. private . unit vector to current checked shape ; Definition at line 49 of file TGeoNavigator.h. ◆ fSafety. Double_t TGeoNavigator::fSafety. private . step to be done from current point and direction ; Definition at line 44 of file TGeoNavigator.h. ◆ fSearchOverlaps. Bool_t TGeoNavigator::fSearchOverlaps. private . internal array for overlaps ; Definition at line 61 of file TGeoNavigator.h. ◆ fStartSafe. Bool_t TGeoNavigator::fStartSafe. private . flags the type of the current node ; Definition at line 63 of file TGeoNavigator.h. ◆ fStep. Double_t TGeoNavigator::fStep. private . Definition at line 43 of file TGeoNavigator.h. ◆ fThreadId. Int_t TGeoNavigator::fThreadId. private . last safety returned from parallel world (negative if invalid) ; Definition at line 54 of file TGeoNavigator.h. ◆ fTopNode. TGeoNode* TGeoNavigator::fTopNode. private . current node ; Definition at line 76 of file TGeoNavigator.h. Libraries for TGeoNavigator:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoNavigator.h; geom/geom/src/TGeoNavigator.cxx. TGeoNavigator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:51273,safe,safety,51273,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safety']
Safety,"rminate the application. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; virtual void GetOptions (Int_t *argc, char **argv);  Get and handle command line options. ;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url);  The function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:2731,timeout,timeout,2731,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['timeout'],['timeout']
Safety,"rn azimuth and polar angles of the rotated axes:; Double_t tx,ty,tz,px,py,pz;; tx= a.ThetaX();; ...; pz= a.PhiZ();. Setting The Rotations; The member function SetToIdentity() will set the rotation object to the identity (no rotation).; With a minor caveat, the Euler angles of the rotation may be set using SetXEulerAngles() or individually set with SetXPhi(), SetXTheta(), and SetXPsi(). These routines set the Euler angles using the X-convention which is defined by a rotation about the Z-axis, about the new X-axis, and about the new Z-axis. This is the convention used in Landau and Lifshitz, Goldstein and other common physics texts. The Y-convention Euler angles can be set with SetYEulerAngles(), SetYPhi(), SetYTheta(), and SetYPsi(). The caveat is that Euler angles usually define the rotation of the new coordinate system with respect to the original system, however, the TRotation class specifies the rotation of the object in the original system (an active rotation). To recover the usual Euler rotations (ie. rotate the system not the object), you must take the inverse of the rotation.; The member functions SetXAxis(), SetYAxis(), and SetZAxis() will create a rotation which rotates the requested axis of the object to be parallel to a vector. If used with one argument, the rotation about that axis is arbitrary. If used with two arguments, the second variable defines the XY, YZ, or ZX respectively. Inverse rotation; TRotation a,b;; ...; b = a.Inverse(); // b is inverse of a, a is unchanged; b = a.Invert(); // invert a and set b = a; b#define b(i)Definition RSha256.hxx:100; TRotation::InvertTRotation & Invert()Definition TRotation.h:275; TRotation::InverseTRotation Inverse() constDefinition TRotation.h:271. Compound Rotations; The operator * has been implemented in a way that follows the mathematical notation of a product of the two matrices which describe the two consecutive rotations. Therefore the second rotation should be placed first:; r = r2 * r1;. Rotation of TVect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotation.html:4589,recover,recover,4589,doc/master/classTRotation.html,https://root.cern,https://root.cern/doc/master/classTRotation.html,1,['recover'],['recover']
Safety,"rn destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TGeoTessellated (const TGeoTessellated &)=delete;  Temporary map used to deduplicate vertices. ;  ; TGeoTessellated & operator= (const TGeoTessellated &)=delete;  . Private Attributes; bool fClosedBody = false;  Shape fully defined. ;  ; bool fDefined = false;  ; std::vector< TGeoFacet > fFacets;  ; int fNfacets = 0;  ; int fNseg = 0;  ; int fNvert = 0;  ; std::vector< Vertex_t > fVertices;  ; std::multimap< long, int > fVerticesMap;  . Additional Inherited Members;  Public Attributes inherited from TGeoBBox; static Bool_t DO NOT USE !The overlap detection does not work for all cases;  ; static Bool_t DEPRECATED;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGeoBBox; Double_t fDX;  ; Double_t fDY;  ; Double_t fDZ;  ; Double_t fOrigin [3];  ;  Protected Attributes inherited from TGeoSha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:23015,detect,detection,23015,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,1,['detect'],['detection']
Safety,"rn l-value pointer to contents. ; If the contents derive from RooAbsLValue or RooAbsCategoryLValue, the conversion is safe, and the function directly returns the pointer using a static_cast. If the template parameter of this proxy is not an LValue type, then; in a debug build, a dynamic_cast with an assertion is used.; in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies. Deprecated:This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or RooAbsCategoryLValue (+derived types), as arg() will always return the correct type. . Definition at line 407 of file RooTemplateProxy.h. ◆ lvptr() [2/4]. template<class T > . const LValue_t * RooTemplateProxy< T >::lvptr ; (; const RooAbsArg * ; ); const. inline . Return l-value pointer to contents. ; If the contents derive from RooAbsLValue or RooAbsCategoryLValue, the conversion is safe, and the function directly returns the pointer using a static_cast. If the template parameter of this proxy is not an LValue type, then; in a debug build, a dynamic_cast with an assertion is used.; in a release build, a static_cast is forced, irrespective of what the type of the object actually is. This is dangerous, but equivalent to the behaviour before refactoring the RooFit proxies. Deprecated:This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or RooAbsCategoryLValue (+derived types), as arg() will always return the correct type. . Definition at line 415 of file RooTemplateProxy.h. ◆ lvptr() [3/4]. template<class T > . LValue_t * RooTemplateProxy< T >::lvptr ; (; LValue_t * ; ). inline . Return l-value pointer to contents. ; If the contents derive from RooAbsLValue or RooAbsCategoryLValue, the conversion is safe, and the function directly returns the pointer using a static_cast. If the template parameter of this proxy is not an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTemplateProxy.html:24369,safe,safe,24369,doc/master/classRooTemplateProxy.html,https://root.cern,https://root.cern/doc/master/classRooTemplateProxy.html,1,['safe'],['safe']
Safety,"rn pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:9337,avoid,avoid,9337,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['avoid'],['avoid']
Safety,"rn the previous set of conditions. ; Reimplemented from TSystem.; Definition at line 999 of file TUnixSystem.cxx. ◆ SetProgname(). void TUnixSystem::SetProgname ; (; const char * ; name). overridevirtual . Set the application name (from command line, argv[0]) and copy it in gProgName. ; Copy the application pathname in gProgPath. If name is 0 let the system set the actual executable name and path (works on MacOS X and Linux). ; Reimplemented from TSystem.; Definition at line 641 of file TUnixSystem.cxx. ◆ SetSockOpt(). int TUnixSystem::SetSockOpt ; (; int ; sock, . int ; option, . int ; val . ). overridevirtual . Set socket option. ; Reimplemented from TSystem.; Definition at line 3437 of file TUnixSystem.cxx. ◆ SigAlarmInterruptsSyscalls(). void TUnixSystem::SigAlarmInterruptsSyscalls ; (; Bool_t ; set). overridevirtual . When the argument is true the SIGALRM signal handler is set so that interrupted syscalls will not be restarted by the kernel. ; This is typically used in case one wants to put a timeout on an I/O operation. By default interrupted syscalls will always be restarted (for all signals). This can be controlled for each a-synchronous TTimer via the method TTimer::SetInterruptSyscalls(). ; Reimplemented from TSystem.; Definition at line 908 of file TUnixSystem.cxx. ◆ Sleep(). void TUnixSystem::Sleep ; (; UInt_t ; milliSec). overridevirtual . Sleep milliSec milliseconds. ; Reimplemented from TSystem.; Definition at line 1184 of file TUnixSystem.cxx. ◆ StackTrace(). void TUnixSystem::StackTrace ; (; ). overridevirtual . Print a stack trace. ; Reimplemented from TSystem.; Definition at line 2281 of file TUnixSystem.cxx. ◆ Streamer(). void TUnixSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSystem. ◆ StreamerNVirtual(). void TUnixSystem::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 219 of file TUnixSystem.h. ◆ Symlink(). int TUnixSystem::Symlink ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:68752,timeout,timeout,68752,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['timeout'],['timeout']
Safety,"rnal class-to-file map and import the contents of the files, if they are not imported yet. ; Definition at line 1497 of file RooWorkspace.cxx. ◆ Class(). static TClass * RooWorkspace::CodeRepo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooWorkspace::CodeRepo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooWorkspace::CodeRepo::Class_Version ; (; ). inlinestaticconstexpr . Flag indicating that classes compiled OK. ; ReturnsVersion of this class ; Definition at line 217 of file RooWorkspace.h. ◆ compileClasses(). bool RooWorkspace::CodeRepo::compileClasses ; (; ). For all classes in the workspace for which no class definition is found in the ROOT class table extract source code stored in code repository into temporary directory set by setClassFileExportDir(), compile classes and link them with current ROOT session. ; If a compilation error occurs print instructions for user how to fix errors and recover workspace and abort import procedure. ; Definition at line 2684 of file RooWorkspace.cxx. ◆ compiledOK(). bool RooWorkspace::CodeRepo::compiledOK ; (; ); const. inline . Definition at line 182 of file RooWorkspace.h. ◆ DeclFileName(). static const char * RooWorkspace::CodeRepo::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 217 of file RooWorkspace.h. ◆ IsA(). TClass * RooWorkspace::CodeRepo::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 217 of file RooWorkspace.h. ◆ listOfClassNames(). std::string RooWorkspace::CodeRepo::listOfClassNames ; (; ); const. Return STL string with last of class names contained in the code repository. ; Definition at line 2571 of file RooWorkspace.cxx. ◆ Streamer(). void RooWorkspace::CodeRepo::Streamer ; (; TBuffer & ; R__b). overridevirtual . Custom streamer for the workspace. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html:12999,recover,recover,12999,doc/master/classRooWorkspace_1_1CodeRepo.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1CodeRepo.html,2,"['abort', 'recover']","['abort', 'recover']"
Safety,"rnal helper function that returns the line width of the given marker style (0 = filled marker) ;  ; static Style_t GetMarkerStyleBase (Style_t style);  Internal helper function that returns the corresponding marker style with line width 1 for the given style. ;  . Protected Member Functions; Int_t Fill () override;  Fill a Ntuple with current values in fArgs. ;  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (const char *branchname, TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BronchExec (const char *name, const char *classname, void *addobj, bool isptrptr, Int_t bufsize, Int_t splitlevel);  Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. ;  ; virtual Int_t CheckBranchAddressType (TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr);  Check whether or not the address described by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:39818,detect,detection,39818,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,2,['detect'],['detection']
Safety,"rnal subprogram used by Create. ; It initializes ""root part"" of the FOAM of the tree of cells. ; Definition at line 354 of file PDEFoam.cxx. ◆ Initialize(). void TMVA::PDEFoam::Initialize ; (; ). inline . Definition at line 173 of file PDEFoam.h. ◆ IsA(). virtual TClass * TMVA::PDEFoam::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TMVA::PDEFoamDecisionTree, TMVA::PDEFoamDiscriminant, TMVA::PDEFoamEvent, TMVA::PDEFoamMultiTarget, and TMVA::PDEFoamTarget.; Definition at line 273 of file PDEFoam.h. ◆ Log(). MsgLogger & TMVA::PDEFoam::Log ; (; ); const. inline . Definition at line 240 of file PDEFoam.h. ◆ MakeAlpha(). void TMVA::PDEFoam::MakeAlpha ; (; ). protected . Internal subprogram used by Create. ; Provides random vector Alpha 0< Alpha(i) < 1 ; Definition at line 636 of file PDEFoam.cxx. ◆ OutputGrow(). void TMVA::PDEFoam::OutputGrow ; (; Bool_t ; finished = false). protected . Overridden function of PDEFoam to avoid native foam output. ; Draw TMVA-process bar instead. ; Definition at line 1459 of file PDEFoam.cxx. ◆ PeekMax(). Long_t TMVA::PDEFoam::PeekMax ; (; ). protected . Internal subprogram used by Create. ; It finds cell with maximal driver integral for the purpose of the division. This function is overridden by the PDEFoam Class to apply cuts on the number of events in the cell (fNmin) and the cell tree depth (GetMaxDepth() > 0) during cell buildup. ; Definition at line 650 of file PDEFoam.cxx. ◆ PrintCell(). void TMVA::PDEFoam::PrintCell ; (; Long_t ; iCell = 0). Prints geometry of and elements of 'iCell', as well as relations to parent and daughter cells. ; Definition at line 894 of file PDEFoam.cxx. ◆ PrintCells(). void TMVA::PDEFoam::PrintCells ; (; void ; ). Prints geometry of ALL cells of the FOAM. ; Definition at line 941 of file PDEFoam.cxx. ◆ Project2(). TH2D * TMVA::PDEFoam::Project2 ; (; Int_t ; idim1, . Int_t ; idim2, . ECellValue ; cell_value = kValue, . PDEFoamKerne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:33108,avoid,avoid,33108,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['avoid'],['avoid']
Safety,"rnally, randomly, and by accept/reject sampling; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Tue Jun 30 14:33:14 2015 » Last generated: 2015-06-30 14:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooGenContext.html:11590,unsafe,unsafe,11590,root/html602/RooGenContext.html,https://root.cern,https://root.cern/root/html602/RooGenContext.html,1,['unsafe'],['unsafe']
Safety,"rnings; 151 if (f->IsBinary()) {; 152 if (!cl) {; 153 cl = IsA(); // NOLINT: silence clang-tidy warnings; 154 }; 155 TDirectory* motherdir = GetMotherDir();; 156 fSeekParent = f->GetSeekDir();; 157 Int_t nbytes = TDirectoryFile::Sizeof();; 158 TKey *key = new TKey(fName,fTitle,cl,nbytes,motherdir);; 159 fNbytesName = key->GetKeylen();; 160 fSeekDir = key->GetSeekKey();; 161 if (fSeekDir == 0) return;; 162 char *buffer = key->GetBuffer();; 163 TDirectoryFile::FillBuffer(buffer);; 164 Int_t cycle = motherdir ? motherdir->AppendKey(key) : 0;; 165 key->WriteFile(cycle);; 166 } else {; 167 fSeekParent = 0;; 168 fNbytesName = 0;; 169 fSeekDir = f->DirCreateEntry(this);; 170 if (fSeekDir == 0) return;; 171 }; 172 ; 173}; 174 ; 175////////////////////////////////////////////////////////////////////////////////; 176/// Destructor.; 177 ; 178TDirectoryFile::~TDirectoryFile(); 179{; 180 if (fKeys) {; 181 fKeys->Delete(""slow"");; 182 SafeDelete(fKeys);; 183 }; 184 ; 185 TDirectoryFile::CleanTargets();; 186 ; 187 // Delete our content before we become somewhat invalid; 188 // since some those objects (TTree for example) needs information; 189 // from this object. Note that on some platform after the end; 190 // of the body (i.e. thus during ~TDirectory which is also; 191 // contains this code) the execution of 'this->GetFile()' fails; 192 // to return the 'proper' value (because it uses the wrong; 193 // virtual function).; 194 if (fList) {; 195 fList->Delete(""slow"");; 196 SafeDelete(fList);; 197 }; 198 ; 199 if (gDebug) {; 200 Info(""~TDirectoryFile"", ""dtor called for %s"", GetName());; 201 }; 202}; 203 ; 204////////////////////////////////////////////////////////////////////////////////; 205/// Append object to this directory.; 206///; 207/// If replace is true:; 208/// remove any existing objects with the same same (if the name is not """"; 209 ; 210void TDirectoryFile::Append(TObject *obj, Bool_t replace /* = kFALSE */); 211{; 212 if (!obj || !fList) return;; 213 ; 214 TDirectory",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:6214,Safe,SafeDelete,6214,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['Safe'],['SafeDelete']
Safety,"rns -1. void UseCurrentStyle(); Replace current attributes by current style. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Write this object to the current directory. For more see TObject::Write; Write calls TTree::FlushBaskets before writing the tree. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); Write this object to the current directory. For more see TObject::Write; If option & kFlushBasket, call FlushBasket before writing the tree. TTree(const TTree& tt). TTree& operator=(const TTree& tt). void AddTotBytes(Int_t tot); { fTotBytes += tot; }. void AddZipBytes(Int_t zip); { fZipBytes += zip; }. Int_t Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"). Int_t Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99). Int_t Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99). return Branch(const char* name, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); Overload to avoid confusion between this signature and the template instance. Int_t Debug() const; { return fDebug; }. void Draw(Option_t* opt); { Draw(opt, """", """", 1000000000, 0); }. Long64_t GetAutoFlush() const; {return fAutoFlush;}. Long64_t GetAutoSave() const; {return fAutoSave;}. TBranchRef * GetBranchRef() const; { return fBranchRef; }. Long64_t GetCacheSize() const; { return fCacheSize; }. Long64_t GetChainEntryNumber(Long64_t entry) const; { return entry; }. Long64_t GetChainOffset() const; { return fChainOffset; }. Int_t GetDefaultEntryOffsetLen() const; {return fDefaultEntryOffsetLen;}. Long64_t GetDebugMax() const; { return fDebugMax; }. Long64_t GetDebugMin() const; { return fDebugMin; }. TDirectory * GetDirectory() const; { return fDirectory; }. Long64_t GetEntries() const; { return fEntries; }. Long64_t GetEntriesFast() const; { return fEntries; }. Long64_t GetEstimate() const; { return fEstimate; }. Int_t GetEvent(Long64_t entry = 0, Int_t getall = 0); { return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:128660,avoid,avoid,128660,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,1,['avoid'],['avoid']
Safety,"rns -1. void UseCurrentStyle(); Replace current attributes by current style. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Write this object to the current directory. For more see TObject::Write; Write calls TTree::FlushBaskets before writing the tree. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); Write this object to the current directory. For more see TObject::Write; If option & kFlushBasket, call FlushBasket before writing the tree. TTree(const TTree& tt). TTree& operator=(const TTree& tt). void AddTotBytes(Int_t tot); { fTotBytes += tot; }. void AddZipBytes(Int_t zip); { fZipBytes += zip; }. Int_t Branch(TCollection* list, Int_t bufsize = 32000, Int_t splitlevel = 99, const char* name = """"). Int_t Branch(TList* list, Int_t bufsize = 32000, Int_t splitlevel = 99). Int_t Branch(const char* folder, Int_t bufsize = 32000, Int_t splitlevel = 99). return Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); Overload to avoid confusion between this signature and the template instance. Int_t Debug() const; { return fDebug; }. void Draw(Option_t* opt); { Draw(opt, """", """", 1000000000, 0); }. Long64_t GetAutoFlush() const; {return fAutoFlush;}. Long64_t GetAutoSave() const; {return fAutoSave;}. TBranchRef * GetBranchRef() const; { return fBranchRef; }. Long64_t GetCacheSize() const; { return fCacheSize; }. TClusterIterator GetClusterIterator(Long64_t firstentry). Long64_t GetChainEntryNumber(Long64_t entry) const; { return entry; }. Long64_t GetChainOffset() const; { return fChainOffset; }. Int_t GetDefaultEntryOffsetLen() const; {return fDefaultEntryOffsetLen;}. Long64_t GetDebugMax() const; { return fDebugMax; }. Long64_t GetDebugMin() const; { return fDebugMin; }. TDirectory * GetDirectory() const; { return fDirectory; }. Long64_t GetEntries() const; { return fEntries; }. Long64_t GetEntriesFast() const; { return fEntries; }. Long64_t GetEstimate() const; { return fEstimate; }. Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTree.html:134902,avoid,avoid,134902,root/html530/TTree.html,https://root.cern,https://root.cern/root/html530/TTree.html,3,['avoid'],['avoid']
Safety,"rns NULL.; The computed value for the computed distance can be subsequently retrieved from the manager class:; Double_t snext = gGeoManager->GetStep();; Double_t safety = gGeoManager->GetSafeDistance();; TGeoManager::GetSafeDistanceDouble_t GetSafeDistance() constDefinition TGeoManager.h:384; TGeoManager::GetStepDouble_t GetStep() constDefinition TGeoManager.h:386; According the step value, two use cases are possible:. step = TGeoShape::kBig (default behavior; kBig = 1030). In this case, there is no limitation on the search algorithm, the first crossed node is returned and the corresponding distance computed. If the current point is outside geometry and the top node is not crossed, the corresponding distance will be set to kBig and a NULL pointer returned. No additional quantity will be computed.; step < kBig. In this case, the progressive search starting from the current point will be stopped after a distance equal with the supplied step. In addition to the distance to the first crossed boundary, the safety radius is also computed. Whenever the information regarding the maximum required step is known it is recommended to be provided as input parameter in order to speed-up the search. In addition to the distance computation, the method sets an additional flag telling if the current track will enter inside some daughter of the current volume or it will exit inside its container:; Bool_t TGeoManager::IsStepEntering() const;; TGeoManager::IsStepEnteringBool_t IsStepEntering() constDefinition TGeoManager.h:404; A combined task is to first find the distance to the next boundary and then extrapolate the current point/direction with this distance making sure that the boundary was crossed. Finally the goal would be to find the next state after crossing the boundary. The problem can be solved in principle using FindNextBoundary, but the boundary crossing can give unpredictable results due to numerical roundings. The manager class provides a method that allows this combined ta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:84549,safe,safety,84549,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['safe'],['safety']
Safety,"roblem, and one which has been badly parameterized so that individual errors are not very meaningful because they are so highly correlated; Parameter at limit. This condition, signaled by a Minuit warning message, may make both the function minimum and parameter errors unreliable. See the discussion above ‘Getting the right parameter errors with limits’. The best way to be absolutely sure of the errors is to use ‘’independent’’ calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for a ‘’physical’’ function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; 5.9.4.1 A Non-physical Region; On its way to the minimum, MIGRAD may have traversed a region that has unphysical behavior, which is of course not a serious problem as long as it recovers and leaves such a region.; 5.9.4.2 An Underdetermined Problem; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well defined, for example that there are more unknowns than there are data points, or that the parameterization of the fit contains a linear dependence. If this is the case, then Minuit (or any other program) cannot solve your problem uniquely. The error matrix will necessarily be largely meaningless, so the user must remove the under determinedness by reformulating the parameterization. Minuit cannot do this itself.; 5.9.4.3 Numerical Inaccuracies; It is possible that the apparent lack of positive-definiteness is due to excessive round off errors in numerical calculations (in the user function), or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if the parameters are badly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:223543,recover,recovers,223543,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['recover'],['recovers']
Safety,"rojX == GetZaxis() ) {; 2074 stats[2] = stats[7];; 2075 stats[3] = stats[8];; 2076 }; 2077 h1->PutStats(stats);; 2078 }; 2079 else {; 2080 // reset statistics; 2081 h1->ResetStats();; 2082 }; 2083 if (resetEntries) {; 2084 // in case of error calculation (i.e. when Sumw2() is set); 2085 // use the effective entries for the entries; 2086 // since this is the only way to estimate them; 2087 Double_t entries = TMath::Floor( totcont + 0.5); // to avoid numerical rounding; 2088 if (computeErrors) entries = h1->GetEffectiveEntries();; 2089 h1->SetEntries( entries );; 2090 }; 2091 else {; 2092 h1->SetEntries( fEntries );; 2093 }; 2094 ; 2095 return h1;; 2096}; 2097 ; 2098 ; 2099////////////////////////////////////////////////////////////////////////////////; 2100/// internal method performing the projection to a 2D histogram; 2101/// called from TH3::Project3D; 2102 ; 2103TH2D *TH3::DoProject2D(const char* name, const char * title, const TAxis* projX, const TAxis* projY,; 2104 bool computeErrors, bool originalRange,; 2105 bool useUF, bool useOF) const; 2106{; 2107 TH2D *h2 = nullptr;; 2108 ; 2109 // Get range to use as well as bin limits; 2110 Int_t ixmin = std::max(projX->GetFirst(),1);; 2111 Int_t ixmax = std::min(projX->GetLast(),projX->GetNbins());; 2112 Int_t iymin = std::max(projY->GetFirst(),1);; 2113 Int_t iymax = std::min(projY->GetLast(),projY->GetNbins());; 2114 ; 2115 Int_t nx = ixmax-ixmin+1;; 2116 Int_t ny = iymax-iymin+1;; 2117 ; 2118 // Create the histogram, either reseting a preexisting one; 2119 // or creating one from scratch.; 2120 // Does an object with the same name exists?; 2121 TObject *h2obj = gROOT->FindObject(name);; 2122 if (h2obj && h2obj->InheritsFrom(TH1::Class())) {; 2123 if ( h2obj->IsA() != TH2D::Class() ) {; 2124 Error(""DoProject2D"",""Histogram with name %s must be a TH2D and is a %s"",name,h2obj->ClassName());; 2125 return nullptr;; 2126 }; 2127 h2 = (TH2D*)h2obj;; 2128 // reset histogram and its axes; 2129 h2->Reset();; 2130 const TArrayD ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:82456,avoid,avoid,82456,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['avoid'],['avoid']
Safety,"rom TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSelector.h>. Inheritance diagram for TSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAbort. enum TSelector::EAbort. EnumeratorkContinue ; kAbortProcess ; kAbortFile . Definition at line 34 of file TSelector.h. Constructor & Destructor Documentation. ◆ TSelector() [1/2]. TSelector::TSelector ; (; const TSelector & ; ). private . ◆ TSelector() [2/2]. TSelector::TSelector ; (; ). Default selector ctor. ; Definition at line 89 of file TSelector.cxx. ◆ ~TSelector(). TSelector::~TSelector ; (; ). override . Selector destructor. ; Definition at line 102 of file TSelector.cxx. Member Function Documentation. ◆ Abort(). void TSelector::Abort ; (; const char * ; why, . EAbort ; what = kAbortProcess . ). virtual . Abort processing. ; If what = kAbortProcess, the Process() loop will be aborted. If what = kAbortFile, the current file in a chain will be aborted and the processing will continue with the next file, if there is no next file then Process() will be aborted. Abort() can also be called from Begin(), SlaveBegin(), Init() and Notify(). After abort the SlaveTerminate() and Terminate() are always called. The abort flag can be checked in these methods using GetAbort(). ; Definition at line 116 of file TSelector.cxx. ◆ Begin(). virtual void TSelector::Begin ; (; TTree * ; ). inlinevirtual . Reimplemented in TSelEvent, TSelVerifyDataSet, TSelEventGen, TSelHandleDataSet, TProofDraw, h1analysisTreeReader, TProofDrawHist, TProofDrawProfile, TProofDrawProfile2D, TSelHist, TSelectorDraw, TSelectorEntries, and h1analysis.; Definition at line 54 of file TSelector.h. ◆ Class(). static TClass * TSelector::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSelector::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:15434,Abort,Abort,15434,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['Abort'],['Abort']
Safety,"rom sub-string. Check validity of i. char& operator()(Ssiz_t i); Return character at pos i from sub-string. No check on i. TSubString& operator=(const TString& s); Assign string to sub-string. TSubString& operator=(const char* s); Assign char* to sub-string. void ToLower(); Convert sub-string to lower-case. void ToUpper(); Convert sub-string to upper-case. void SubStringError(Ssiz_t , Ssiz_t , Ssiz_t ) const; Output error message. void AssertElement(Ssiz_t i) const; Check to make sure a sub-string index is in range. const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. Ssiz_t Length() const; { return fExtent; }. Ssiz_t Start() const; { return fBegin; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. int operator!() const; { return fBegin == kNPOS; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSubString.html:3592,detect,detecting,3592,root/html602/TSubString.html,https://root.cern,https://root.cern/root/html602/TSubString.html,1,['detect'],['detecting']
Safety,"rom sub-string. Check validity of i. char& operator()(Ssiz_t i); Return character at pos i from sub-string. No check on i. TSubString& operator=(const TString& s); Assign string to sub-string. TSubString& operator=(const char* s); Assign char* to sub-string. void ToLower(); Convert sub-string to lower-case. void ToUpper(); Convert sub-string to upper-case. void SubStringError(Ssiz_t , Ssiz_t , Ssiz_t ) const; Output error message. void AssertElement(Ssiz_t i) const; Check to make sure a sub-string index is in range. const char * Data() const; Return a pointer to the beginning of the substring. Note that the; terminating null is in the same place as for the original; TString, so this method is not appropriate for converting the; TSubString to a string. To do that, construct a TString from the; TSubString. For example:. root [0] TString s(""hello world""); root [1] TSubString sub=s(0, 5); root [2] sub.Data(); (const char* 0x857c8b8)""hello world""; root [3] TString substr(sub); root [4] substr; (class TString)""hello"". char operator[](Ssiz_t i) const; Access to elements of sub-string with bounds checking. { AssertElement(i); return fStr.GetPointer()[fBegin+i]; }. char operator()(Ssiz_t i) const; { return fStr.GetPointer()[fBegin+i]; }. TSubString & operator=(const TSubString& s); { fStr = s.fStr; fBegin = s.fBegin; fExtent = s.fExtent; return *this; }. TSubString(const TString& s, Ssiz_t start, Ssiz_t len); NB: the only constructor is private. Ssiz_t Length() const; { return fExtent; }. Ssiz_t Start() const; { return fBegin; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. int operator!() const; { return fBegin == kNPOS; }. » Author: Fons Rademakers 04/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSubString.html:3673,detect,detecting,3673,root/html604/TSubString.html,https://root.cern,https://root.cern/root/html604/TSubString.html,1,['detect'],['detecting']
Safety,"romVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTVirtualPacketizer::SetFailedPackets(TList* list); virtual voidTVirtualPacketizer::SetInitTime(); static voidTObject::SetObjectStat(Bool_t stat); voidTVirtualPacketizer::SetProgressStatus(TProofProgressStatus* st); voidTVirtualPacketizer::SetTotalEntries(Long64_t ent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTVirtualPacketizer::StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPacketizer.html:5950,abort,abort,5950,root/html530/TPacketizer.html,https://root.cern,https://root.cern/root/html530/TPacketizer.html,8,['abort'],['abort']
Safety,"roofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSlave.html:10892,abort,abort,10892,root/html602/TSlave.html,https://root.cern,https://root.cern/root/html602/TSlave.html,6,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"roposed step is safe.; The next stage is to check if computation of the distance to a give physical object specified by a path was required. If this is the case, the modeller changes the state to point to the required object, converts the current point and direction coordinates to the local frame of this object and computes the distance to its shape. The node returned is the one pointed by the input path in case the shape is crossed; otherwise the returned value is NULL. In case the distance to next crossed boundary is required, the current point has to be physically INSIDE the shape pointed by the current volume. This is only insured in case a call to TGeoManager::FindNode() was performed for the current point. Therefore, the first step is to convert the global current point and direction in the local reference frame of the current volume and to compute the distance to exit its shape from inside. The returned value is again compared to the maximum allowed step (the proposed one) and in case the distance is safe no other action is performed and the proposed step is approved. In case the boundary is closer, the computed distance is taken as maximum allowed step. For optimization purposed, for particles starting very close to the current volume boundary (less than 0.01 microns) and exiting the algorithm stops here.; After computing the distance to exit the current node, the distance to the daughter of the current volume which is crossed next is computed by TGeoManager::FindNextDaughterBoundary(). This computes the distance to all daughter candidates that can be possibly crossed by using volume voxelization. The algorithm is efficient in average only in case the number of daughters is greater than 4. For fewer nodes, a simple loop is performed and the minimum distance (from a point outside each shape) is taken and compared to the maximum allowed step. The step value is again updated if step<stepmax .; A special case is when the current node is declared as possibly overl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:133864,safe,safe,133864,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,2,['safe'],['safe']
Safety,"rorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptHandler(Bool_t on = kTRUE); Set/Unset the interrupt handler. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSlave.html:9591,abort,abort,9591,root/html528/TXSlave.html,https://root.cern,https://root.cern/root/html528/TXSlave.html,3,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"rospected; model = w[""model""]; ; # Generate data from p.d.f. in given observables; data = model.generate(w.set(""observables""), 1000); ; # Fit model to data; model.fitTo(data, PrintLevel=-1); ; # Plot fitted model and data on frame of first (only) observable; frame = (w.set(""observables"").first()).frame(); data.plotOn(frame); model.plotOn(frame); ; # Overlay plot with model with reference parameters as stored in snapshots; w.loadSnapshot(""reference_fit""); model.plotOn(frame, LineColor=""r""); w.loadSnapshot(""reference_fit_bkgonly""); model.plotOn(frame, LineColor=""r"", LineStyle=""--""); ; # Draw the frame on the canvas; c = ROOT.TCanvas(""rf510_wsnamedsets"", ""rf503_wsnamedsets"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.4); frame.Draw(); ; c.SaveAs(""rf510_wsnamedsets.png""); ; # Print workspace contents; w.Print(); ; # Workspace will remain in memory after macro finishes; ROOT.gDirectory.Add(w); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::model; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooChebychev::bkg; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::x; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a0; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::bkgfrac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::sig; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:Objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8py.html:4914,safe,safe,4914,doc/master/rf510__wsnamedsets_8py.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8py.html,1,['safe'],['safe']
Safety,"round; uncertainty. It relates the signal in each channel to a master signal strength times the; expected signal in each channel. For the future, perhaps this method should be extended to include the efficiency terms automatically. void AddExpData(Double_t* sigExp, Double_t* bkgExp, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); Arguements are an array of expected signal, expected background, and relative; background uncertainty (eg. 0.1 for 10% uncertainty), and the number of channels. void AddExpDataWithSideband(Double_t* sigExp, Double_t* bkgExp, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); Arguements are an array of expected signal, expected background, and relative; ratio of background expected in the sideband to that expected in signal region, and the number of channels. RooRealVar* SafeObservableCreation(RooWorkspace* ws, const char* varName, Double_t value); need to be careful here that the range of observable in the dataset is consistent with the one in the workspace; don't rescale unless necessary. If it is necessary, then rescale by x10 or a defined maximum. RooRealVar* SafeObservableCreation(RooWorkspace* ws, const char* varName, Double_t value, Double_t maximum); need to be careful here that the range of observable in the dataset is consistent with the one in the workspace; don't rescale unless necessary. If it is necessary, then rescale by x10 or a defined maximum. void AddData(Double_t* mainMeas, Double_t* bkgMeas, Double_t* db, Int_t nbins, RooWorkspace* ws, const char* dsName = ""NumberCountingData""); Arguments are an array of results from a main measurement, a measured background,; and relative background uncertainty (eg. 0.1 for 10% uncertainty), and the number of channels. void AddDataWithSideband(Double_t* mainMeas, Double_t* sideband, Double_t* tau, Int_t nbins, RooWorkspace* ws, const char* dsName = ""ExpectedNumberCountingData""); Arguements are an arr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html:3962,Safe,SafeObservableCreation,3962,root/html526/RooStats__NumberCountingPdfFactory.html,https://root.cern,https://root.cern/root/html526/RooStats__NumberCountingPdfFactory.html,7,['Safe'],['SafeObservableCreation']
Safety,"roxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAbsMoment.h>. Inheritance diagram for RooAbsMoment:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAbsMoment() [1/3]. RooAbsMoment::RooAbsMoment ; (; ). default . ◆ RooAbsMoment() [2/3]. RooAbsMoment::RooAbsMoment ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func, . RooRealVar & ; x, . Int_t ; order = 1, . bool ; takeRoot = false . ). Definition at line 35 of file RooAbsMoment.cxx. ◆ RooAbsMoment() [3/3]. RooAbsMoment::RooAbsMoment ; (; const RooAbsMoment & ; other, . const char * ; name = nullptr . ). Definition at line 49 of file RooAbsMoment.cxx. Member Function Documentation. ◆ central(). bool RooAbsMoment::central ; (; ); const. inline . Definition at line 35 of file RooAbsMoment.h. ◆ Class(). static TClass * RooAbsMoment::Class ; (; ). static . Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsMoment.html:59839,Avoid,Avoids,59839,doc/master/classRooAbsMoment.html,https://root.cern,https://root.cern/doc/master/classRooAbsMoment.html,1,['Avoid'],['Avoids']
Safety,"roxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooConvCoefVar.h>. Inheritance diagram for RooConvCoefVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooConvCoefVar() [1/3]. RooConvCoefVar::RooConvCoefVar ; (; ). inline . Default constructor. ; Definition at line 32 of file RooConvCoefVar.h. ◆ RooConvCoefVar() [2/3]. RooConvCoefVar::RooConvCoefVar ; (; const char * ; name, . const char * ; title, . const RooAbsAnaConvPdf & ; input, . Int_t ; coefIdx, . const RooArgSet * ; varList = nullptr . ). Constructor given a RooAbsAnaConvPdf a coefficient index and a set with the convoluted observable(s). ; Definition at line 38 of file RooConvCoefVar.cxx. ◆ RooConvCoefVar() [3/3]. RooConvCoefVar::RooConvCoefVar ; (; const RooConvCoefVar & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 53 of file RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvCoefVar.html:59797,Avoid,Avoids,59797,doc/master/classRooConvCoefVar.html,https://root.cern,https://root.cern/doc/master/classRooConvCoefVar.html,1,['Avoid'],['Avoids']
Safety,"roxy;  ; typedef TStlImpProxy< Short_t > TStlShortProxy;  ; typedef TStlImpProxy< UChar_t > TStlUCharProxy;  ; typedef TStlImpProxy< UInt_t > TStlUIntProxy;  ; typedef TStlImpProxy< ULong64_t > TStlULong64Proxy;  ; typedef TStlImpProxy< ULong_t > TStlULongProxy;  ; typedef TStlImpProxy< UShort_t > TStlUShortProxy;  ; typedef TImpProxy< UChar_t > TUCharProxy;  ; typedef TImpProxy< UInt_t > TUIntProxy;  ; typedef TImpProxy< ULong64_t > TULong64Proxy;  ; typedef TImpProxy< ULong_t > TULongProxy;  ; typedef TImpProxy< UShort_t > TUShortProxy;  . Enumerations; enum  ELocation { kOut =0; , kClones; , kSTL; };  0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void EvalParMultiDim (TF1 *func, Double_t *out, const Double_t *x, std::size_t size, std::size_t rows, Double_t *params);  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerEl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal.html:12866,avoid,avoid,12866,doc/master/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal.html,1,['avoid'],['avoid']
Safety,"roxy;  ; typedef TStlImpProxy< Short_t > TStlShortProxy;  ; typedef TStlImpProxy< UChar_t > TStlUCharProxy;  ; typedef TStlImpProxy< UInt_t > TStlUIntProxy;  ; typedef TStlImpProxy< ULong64_t > TStlULong64Proxy;  ; typedef TStlImpProxy< ULong_t > TStlULongProxy;  ; typedef TStlImpProxy< UShort_t > TStlUShortProxy;  ; typedef TImpProxy< UChar_t > TUCharProxy;  ; typedef TImpProxy< UInt_t > TUIntProxy;  ; typedef TImpProxy< ULong64_t > TULong64Proxy;  ; typedef TImpProxy< ULong_t > TULongProxy;  ; typedef TImpProxy< UShort_t > TUShortProxy;  . Enumerations; enum  ELocation { kOut =0; , kClones; , kSTL; };  0 for the general case, 1 when this a split clases inside a TClonesArray, 2 when this is a split classes inside an STL container. More...;  . Functions; tbb::isolated_task_group * CastToTG (void *p);  ; bool ContaineeInheritsFrom (TClass *cl, TClass *base);  Return true if 'cl' inherits from 'base'. ;  ; void DefaultStreamer (TBuffer &R__b, const TClass *cl, void *objpointer);  Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer.h. ;  ; const TQObjectInitBehavior * DefineBehavior (TQObject *, TQObject *);  ; const TInitBehavior * DefineBehavior (void *, void *);  ; bool DeleteChangesMemory ();  ; bool DeleteChangesMemoryImpl ();  ; void DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; const TCollection & EmptyCollection ();  Return an empty collection for use with nullptr TRangeCast. ;  ; void EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void GenericShowMembers (const char *topClassName, void *obj, TMemberInspector &R__insp, bool transientMember);  ; TString GetArrayType (TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container);  ; template<typename T > ; TClass * GetClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html:12728,avoid,avoid,12728,doc/v632/namespaceROOT_1_1Internal.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Internal.html,1,['avoid'],['avoid']
Safety,"roxy< RooArgList >, and RooCollectionProxy< RooArgSet >.; Definition at line 455 of file RooAbsCollection.h. ◆ isOwning(). bool RooAbsCollection::isOwning ; (; ); const. inline . Definition at line 369 of file RooAbsCollection.h. ◆ iterator(). RooLinkedListIter RooAbsCollection::iterator ; (; bool ; dir = kIterForward); const. TIterator-style iteration over contained elements. ; NoteThis iterator is slow. Use begin() and end() or range-based for loop instead. . ◆ makeStructureTag(). void RooAbsCollection::makeStructureTag ; (; ). inlineprotected . Definition at line 417 of file RooAbsCollection.h. ◆ makeTypedStructureTag(). void RooAbsCollection::makeTypedStructureTag ; (; ). inlineprotected . Definition at line 418 of file RooAbsCollection.h. ◆ operator=(). RooAbsCollection & RooAbsCollection::operator= ; (; const RooAbsCollection & ; other). Assign values from the elements in other to our elements. ; WarningThis is not a conventional assignment operator. To avoid confusion, prefer using RooAbsCollection::assign(). ; Definition at line 263 of file RooAbsCollection.cxx. ◆ operator[](). RooAbsArg * RooAbsCollection::operator[] ; (; Storage_t::size_type ; i); const. inline . Definition at line 320 of file RooAbsCollection.h. ◆ overlaps() [1/2]. bool RooAbsCollection::overlaps ; (; const RooAbsCollection & ; otherColl); const. inline . Check if this and other collection have common entries. ; Definition at line 249 of file RooAbsCollection.h. ◆ overlaps() [2/2]. template<typename Iterator_t , typename value_type = typename std::remove_pointer<typename std::iterator_traits<Iterator_t>::value_type>, typename = std::enable_if<std::is_convertible<const value_type*, const RooAbsArg*>::value>> . bool RooAbsCollection::overlaps ; (; Iterator_t ; otherCollBegin, . Iterator_t ; otherCollEnd . ); const. inline . Definition at line 238 of file RooAbsCollection.h. ◆ Print(). void RooAbsCollection::Print ; (; Option_t * ; option = nullptr); const. inlineoverridevirtual . This method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:46866,avoid,avoid,46866,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['avoid'],['avoid']
Safety,"rposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSocket.html:13815,timeout,timeout,13815,root/html534/TSocket.html,https://root.cern,https://root.cern/root/html534/TSocket.html,3,['timeout'],['timeout']
Safety,"rray as a TImage object ;  FITS_tutorial4.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial5.COpen a FITS file whose primary array represents a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:108873,detect,detector,108873,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['detect'],['detector']
Safety,"rrent MARS. Composite shapes may be used.; gGeoManager->SetClippingShape(clip1); One can activate or deactivate clipping at any time: gGeoManager->SetClipping(flag);; Perform ray-tracing:gGeoManager->GetTopVolume()->Raytrace();. One can redo the steps 2-3 as many times as needed. Let us look how the rootgeom.C example looks clipped with a tube. Ray-tracing example with box-clipping. Representing Misalignments of the Ideal Geometry; The ideal positioning of a detector does not match its position in the experimental hall. This generally happens not only for the detector modules, but also for their components. The accurate knowledge of the detector real misalignments can be extremely important for getting close to its designed resolution and the expected tracking efficiency. TGeo offers tools for representing positioning misalignments, applying them to the ideal geometry and performing navigation under these conditions. Detector tracking algorithms can then directly query the geometry for navigation purposes or for retrieving actual misalignment information. Physical Nodes; Physical nodes are the actual ""touchable"" objects in the geometry, representing actually a path of positioned volumes starting with the top node: path=/TOP/A_1/B_4/C_3 , where A, B, C represent names of volumes. The number of physical nodes is given by the total number of possible of branches in the geometry hierarchy. In case of detector geometries and specially for calorimeters this number can be of the order 106-109, therefore it is impossible to create all physical nodes as objects in memory. In TGeo, physical nodes are represented by the class TGeoPhysicalNode and can be created on demand for alignment purposes:; TGeoPhysicalNode(const char* path); TGeoPhysicalNodePhysical nodes are the actual 'touchable' objects in the geometry, representing a path of positioned ...Definition TGeoPhysicalNode.h:35; The knowledge of the path to the objects that need to be misaligned is essential since there is n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:114948,Detect,Detector,114948,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['Detect'],['Detector']
Safety,"rrent file so far.; Use TDirectoryFile::SetBufferSize to force a given buffer size. If a name is specified, it will be the name of the key.; If name is not given, the name of the key will be the name as returned; by obj->GetName(). The option can be a combination of:; ""SingleKey"", ""Overwrite"" or ""WriteDelete""; Using the ""Overwrite"" option a previous key with the same name is; overwritten. The previous key is deleted before writing the new object.; Using the ""WriteDelete"" option a previous key with the same name is; deleted only after the new object has been written. This option; is safer than kOverwrite but it is slower.; The ""SingleKey"" option is only used by TCollection::Write() to write; a container with a single key instead of each object in the container; with its own key. An object is read from this directory via TDirectoryFile::Get. The function returns the total number of bytes written to the directory.; It returns 0 if the object cannot be written. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). Int_t WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); Write object from pointer of class classname in this directory; obj may not derive from TObject; see TDirectoryFile::WriteTObject for comments. VERY IMPORTANT NOTE:; The value passed as 'obj' needs to be from a pointer to the type described by classname; For example with:; TopClass *top;; BottomClass *bottom;; top = bottom;; you can do:; directory->WriteObjectAny(top,""top"",""name of object"");; directory->WriteObjectAny(bottom,""bottom"",""name of object"");; BUT YOU CAN NOT DO (it will fail in particular with multiple inheritance):; directory->WriteObjectAny(top,""bottom"",""name of object"");. We STRONGLY recommend to use; TopClass *top = ....;; directory->WriteObject(top,""name of object""). see laso remarks in TDirectoryFile::WriteTObject. Int_t WriteObjectAny(const void* obj, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDirectoryFile.html:26873,avoid,avoid,26873,root/html528/TDirectoryFile.html,https://root.cern,https://root.cern/root/html528/TDirectoryFile.html,6,['avoid'],['avoid']
Safety,"rrent iteration over this formula for this; entry (i.e. varies from 0 to Length$). Length$(formula): return the total number of element of the formula given as a; parameter.; Sum$(formula): return the sum of the value of the elements of the formula given; as a parameter. For example the mean for all the elements in; one entry can be calculated with:; Sum$(formula)/Length$(formula); Min$(formula): return the minimun (within one TTree entry) of the value of the; elements of the formula given as a parameter.; Max$(formula): return the maximum (within one TTree entry) of the value of the; elements of the formula given as a parameter.; MinIf$(formula,condition); MaxIf$(formula,condition): return the minimum (maximum) (within one TTree entry); of the value of the elements of the formula given as a parameter; if they match the condition. If no element matches the condition,; the result is zero. To avoid the resulting peak at zero, use the; pattern:; tree->Draw(""MinIf$(formula,condition)"",""condition"");; which will avoid calculation MinIf$ for the entries that have no match; for the condition. Alt$(primary,alternate) : return the value of ""primary"" if it is available; for the current iteration otherwise return the value of ""alternate"".; For example, with arr1[3] and arr2[2]; tree->Draw(""arr1+Alt$(arr2,0)"");; will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0; Or with a variable size array arr3; tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1); As a comparison; tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; will draw the sum arr3 for the index 0 to 2 only if the; actual_size_of_arr3 is greater or equal to 3.; Note that the array in 'primary' is flatened/linearilized thus using; Alt$ with multi-dimensional arrays of different dimensions in unlikely; to yield the expected results. To visualize a bit more what elements; would be matched by TTree::Draw, TTree::Scan can be used:; tree->Scan(""arr1:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:76671,avoid,avoid,76671,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,2,['avoid'],['avoid']
Safety,"rrent iteration over this formula for this; entry (i.e. varies from 0 to Length$). Length$(formula): return the total number of element of the formula given as a; parameter.; Sum$(formula): return the sum of the value of the elements of the formula given; as a parameter. For example the mean for all the elements in; one entry can be calculated with:; Sum$(formula)/Length$(formula); Min$(formula): return the minimun (within one TTree entry) of the value of the; elements of the formula given as a parameter.; Max$(formula): return the maximum (within one TTree entry) of the value of the; elements of the formula given as a parameter.; MinIf$(formula,condition); MaxIf$(formula,condition): return the minimum (maximum) (within one TTree entry); of the value of the elements of the formula given as a parameter; if they match the condition. If no element matches the condition,; the result is zero. To avoid the resulting peak at zero, use the; pattern:; tree->Draw(""MinIf$(formula,condition)"",""condition"");; which will avoid calculation MinIf$ for the entries that have no match; for the condition. Alt$(primary,alternate) : return the value of ""primary"" if it is available; for the current iteration otherwise return the value of ""alternate"".; For example, with arr1[3] and arr2[2]; tree->Draw(""arr1+Alt$(arr2,0)"");; will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0; Or with a variable size array arr3; tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1); As a comparison; tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; will draw the sum arr3 for the index 0 to 2 only if the; actual_size_of_arr3 is greater or equal to 3.; Note that the array in 'primary' is flattened/linearized thus using; Alt$ with multi-dimensional arrays of different dimensions in unlikely; to yield the expected results. To visualize a bit more what elements; would be matched by TTree::Draw, TTree::Scan can be used:; tree->Scan(""arr1:A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:79496,avoid,avoid,79496,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,6,['avoid'],['avoid']
Safety,"rride;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; Int_t GetByteCount () const override;  ; Double_t GetDx1 () const;  ; Double_t GetDx2 () const;  ; Double_t GetDy1 () const;  ; Double_t GetDy2 () const;  ; Double_t GetDz () const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetOppositeCorner (const Double_t *point, Int_t inorm, Double_t *vertex, Double_t *normals) const;  ; void GetVisibleCorner (const Double_t *point, Double_t *vertex, Double_t *normals) const;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"".",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrd2.html:2651,Safe,Safety,2651,doc/master/classTGeoTrd2.html,https://root.cern,https://root.cern/doc/master/classTGeoTrd2.html,2,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"rride;; 43 static void ComputeNormalS(const Double_t *point, const Double_t *dir, Double_t *norm, Double_t rmin, Double_t rmax,; 44 Double_t dz);; 45 Bool_t Contains(const Double_t *point) const override;; 46 void Contains_v(const Double_t *points, Bool_t *inside, Int_t vecsize) const override;; 47 static Double_t; 48 DistFromInsideS(const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz);; 49 Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact = 1, Double_t step = TGeoShape::Big(),; 50 Double_t *safe = nullptr) const override;; 51 void DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 52 Double_t *step) const override;; 53 static Double_t; 54 DistFromOutsideS(const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz);; 55 Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact = 1,; 56 Double_t step = TGeoShape::Big(), Double_t *safe = nullptr) const override;; 57 void DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 58 Double_t *step) const override;; 59 static void DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t &b, Double_t &delta);; 60 Int_t DistancetoPrimitive(Int_t px, Int_t py) override;; 61 TGeoVolume *; 62 Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;; 63 const char *GetAxisName(Int_t iaxis) const override;; 64 Double_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;; 65 void GetBoundingCylinder(Double_t *param) const override;; 66 const TBuffer3D &GetBuffer3D(Int_t reqSections, Bool_t localFrame) const override;; 67 Int_t GetByteCount() const override { return 48; }; 68 Bool_t GetPointsOnSegments(Int_t npoints, Double_t *array) const override;; 69 TGeoShape *GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *mat) const override;; 70 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:2615,safe,safe,2615,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['safe'],['safe']
Safety,"rridevirtual . Creates a TBuffer3D describing this shape. ; Coordinates are in local reference frame. ; Reimplemented from TGeoBBox.; Definition at line 266 of file TGeoScaledShape.cxx. ◆ MakeScaledShape(). TGeoShape * TGeoScaledShape::MakeScaledShape ; (; const char * ; name, . TGeoShape * ; shape, . TGeoScale * ; scale . ). static . Create a scaled shape starting from a non-scaled one. ; Definition at line 277 of file TGeoScaledShape.cxx. ◆ Safety(). Double_t TGeoScaledShape::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . computes the closest distance from given point to this shape, according to option. ; The matching point on the shape is stored in spoint. ; Reimplemented from TGeoBBox.; Definition at line 310 of file TGeoScaledShape.cxx. ◆ Safety_v(). void TGeoScaledShape::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Compute safe distance from each of the points in the input array. ; Input: Array of point coordinates, array of statuses for these points, size of the arrays Output: Safety values ; Reimplemented from TGeoBBox.; Definition at line 424 of file TGeoScaledShape.cxx. ◆ SavePrimitive(). void TGeoScaledShape::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox.; Definition at line 322 of file TGeoScaledShape.cxx. ◆ SetPoints() [1/2]. void TGeoScaledShape::SetPoints ; (; Double_t * ; points); const. overridevirtual . Mesh points for scaled shapes. ; Reimplemented from TGeoBBox.; Definition at line 344 of file TGeoScaledShape.cxx. ◆ SetPoints() [2/2]. void TGeoScaledShape::SetPoints ; (; Float_t * ; points); const. overridevirtual . Mesh points for scaled shapes. ; Reimplemented from TGeoBBox.; Definition at line 358 of file TGeoScaledShape.cxx. ◆ SetScale(). void TGeoScaledShape::SetScale ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:32372,safe,safe,32372,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,1,['safe'],['safe']
Safety,"rridevirtual . Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 213 of file TProofPlayer.h. ◆ SetMaxDrawQueries(). void TProofPlayer::SetMaxDrawQueries ; (; Int_t ; max). inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 168 of file TProofPlayer.h. ◆ SetMerging(). void TProofPlayer::SetMerging ; (; Bool_t ; = kTRUE). inlineoverridevirtual . Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 215 of file TProofPlayer.h. ◆ SetOutputFilePath(). void TProofPlayer::SetOutputFilePath ; (; const char * ; fp). inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 220 of file TProofPlayer.h. ◆ SetProcessing(). void TProofPlayer::SetProcessing ; (; Bool_t ; on = kTRUE). Set processing bit according to 'on'. ; Definition at line 274 of file TProofPlayer.cxx. ◆ SetStopTimer(). void TProofPlayer::SetStopTimer ; (; Bool_t ; on = kTRUE, . Bool_t ; abort = kFALSE, . Int_t ; timeout = 0 . ). overridevirtual . Enable/disable the timer to stop/abort processing. ; The 'timeout' is in seconds. ; Implements TVirtualProofPlayer.; Definition at line 323 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayer::SetupFeedback ; (; ). protectedvirtual . Set up feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, and TProofPlayerLite.; Definition at line 1642 of file TProofPlayer.cxx. ◆ StopFeedback(). void TProofPlayer::StopFeedback ; (; ). virtual . Stop feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, and TProofPlayerSlave.; Definition at line 1650 of file TProofPlayer.cxx. ◆ StopProcess(). void TProofPlayer::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). overridevirtual . Stop the process after this event. ; If timeout is positive, start a timer firing after timeout seconds to hard-stop time-expensive even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:41726,timeout,timeout,41726,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['timeout'],['timeout']
Safety,"rridevirtual . Reimplemented from TGeoBBox. ◆ GetNhigh(). const Double_t * TGeoCtub::GetNhigh ; (; ); const. inline . Definition at line 214 of file TGeoTube.h. ◆ GetNlow(). const Double_t * TGeoCtub::GetNlow ; (; ); const. inline . Definition at line 213 of file TGeoTube.h. ◆ GetNmeshVertices(). Int_t TGeoCtub::GetNmeshVertices ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetPointsOnSegments(). Bool_t TGeoCtub::GetPointsOnSegments ; (; Int_t ; npoints, . Double_t * ; array . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetZcoord(). Double_t TGeoCtub::GetZcoord ; (; Double_t ; xc, . Double_t ; yc, . Double_t ; zc . ); const. ◆ InspectShape(). void TGeoCtub::InspectShape ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ IsA(). TClass * TGeoCtub::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBBox.; Definition at line 226 of file TGeoTube.h. ◆ Safety(). Double_t TGeoCtub::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Safety_v(). void TGeoCtub::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SavePrimitive(). void TGeoCtub::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetCtubDimensions(). void TGeoCtub::SetCtubDimensions ; (; Double_t ; rmin, . Double_t ; rmax, . Double_t ; dz, . Double_t ; phi1, . Double_t ; phi2, . Double_t ; lx, . Double_t ; ly, . Double_t ; lz, . Double_t ; tx, . Double_t ; ty, . Double_t ; tz . ). ◆ SetDimensions(). void TGeoCtub::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [1/2]. void TGeoCtub::SetPoints ; (; Double_t * ; points); const. overridevirtual . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:33490,Safe,Safety,33490,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,1,['Safe'],['Safety']
Safety,"rror; doublefNomLumi; TFile*fOut_f; stringstreamfResultsPrefixStr; stringfRowTitle; vector<std::string>fSystToFix; FILE*pFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HistoToWorkspaceFactory(). ~HistoToWorkspaceFactory(). HistoToWorkspaceFactory(string , string , vector<std::string> , double = 200, double = 20, int = 0, int = 6, TFile* = 0). string FilePrefixStr(string ). void ProcessExpectedHisto(TH1* hist, RooWorkspace* proto, string prefix, string productPrefix, string systTerm, double low, double high, int lowBin, int highBin). void AddMultiVarGaussConstraint(RooWorkspace* proto, string prefix, int lowBin, int highBin, vector<std::string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins. void LinInterpWithConstraint(RooWorkspace* proto, TH1* nominal, vector<TH1*> lowHist, vector<TH1*> highHist, vector<std::string> sourceName, string prefix, string productPrefix, string systTerm, int lowBin, int highBin, vector<std::string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins; make list of abstract parameters that interpolate in space of variations; range is set using defined macro (see top of the page). string AddNormFactor(RooWorkspace* , string& , string& , RooStats::HistFactory::EstimateSummary& , bool ). void AddEfficiencyTerms(RooWorkspace* proto, string prefix, string interpName, map<std::string,std::pair<double,double> > systMap, vector<std::string>& likelihoodTermNames, vector<std::string>& totSystTermNames); add variables for all the relative overall uncertainties we expect; range is set using defined macro (see top of the page); string range=""[0,-1,1]"";. void MakeTotalExpected(RooWorkspace* proto, string totName, string , string , int lowBin, int highBin, vector<std::string>& syst_x_expectedPrefixNames, vector<std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html:8861,predict,predictions,8861,root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,1,['predict'],['predictions']
Safety,"rs a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66. Definition at line 66 of file RDFHelpers.cxx. ◆ SaveGraph() [1/2]. template<typename NodeType > . std::string ROOT::RDF::SaveGraph ; (; NodeType ; node). Create a graphviz representation of the dataframe computation graph, return it as a string. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 120 of file RDFHelpers.hxx. ◆ SaveGraph() [2/2]. template<typename NodeType > . void ROOT::RDF::SaveGraph ; (; NodeType ; node, . const std::string & ; outputFile . ). Create a graphviz representation of the dataframe computation graph, write it to the specified file. ; Parameters. [in]nodeany node of the graph. Called on the head (first) node, it prints the entire graph. Otherwise, only the branch the node belongs to. ; [in]outputFilefile where to save the representation. The output can be displayed with a command akin to dot -Tpng output.dot > output.png && open output.png.; Note that ""hanging"" Defines, i.e. Defines without downstream nodes, will not be displayed by SaveGraph as they are effectively optimized away from the computation graph.; Note that SaveGraph is not thread-safe and must not be called concurrently from different threads. ; Definition at line 139 of file RDFHelpers.hxx. ◆ splitInEqualRanges(). v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1RDF.html:15409,safe,safe,15409,doc/master/namespaceROOT_1_1RDF.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1RDF.html,2,['safe'],['safe']
Safety,"rs with the subset of directVars that we can generate events for,; and return a code that specifies the generator algorithm we will use. A code of; zero indicates that we cannot generate any of the directVars (in this case, nothing; should be added to generatedVars). Any non-zero codes will be passed to our generateEvent(); implementation, but otherwise its value is arbitrary. The default implemetation of; this method returns zero. Subclasses will usually implement this method using the; matchArgs() methods to advertise the algorithms they provide. void initGenerator(Int_t code); Interface for one-time initialization to setup the generator for the specified code. void generateEvent(Int_t code); Interface for generation of anan event using the algorithm; corresponding to the specified code. The meaning of each code is; defined by the getGenerator() implementation. The default; implementation does nothing. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Check if given observable can be safely generated using the; pdfs internal generator mechanism (if that existsP). Observables; on which a PDF depends via more than route are not safe; for use with internal generators because they introduce; correlations not known to the internal generator. RooDataHist * generateBinned(const RooArgSet& whatVars, Double_t nEvents, const RooCmdArg& arg1,				 const RooCmdArg& arg2, const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not specified. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. The following named arguments are supported. Name(const char* name) -- Name of the output dataset; Verbose(Bool_t flag) -- Print informational messages during e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:62775,safe,safely,62775,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['safe'],['safely']
Safety,"rs with the subset of directVars that we can generate events for,; and return a code that specifies the generator algorithm we will use. A code of; zero indicates that we cannot generate any of the directVars (in this case, nothing; should be added to generatedVars). Any non-zero codes will be passed to our generateEvent(); implementation, but otherwise its value is arbitrary. The default implemetation of; this method returns zero. Subclasses will usually implement this method using the; matchArgs() methods to advertise the algorithms they provide. void initGenerator(Int_t code); Interface for one-time initialization to setup the generator for the specified code. void generateEvent(Int_t code); Interface for generation of anan event using the algorithm; corresponding to the specified code. The meaning of each code is; defined by the getGenerator() implementation. The default; implementation does nothing. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Check if given observable can be safely generated using the; pdfs internal generator mechanism (if that existsP). Observables; on which a PDF depends via more than route are not safe; for use with internal generators because they introduce; correlations not known to the internal generator. RooDataHist * generateBinned(const RooArgSet& whatVars, Double_t nEvents, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not specified. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. The following named arguments are supported. Name(const char* name) -- Name of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:63762,safe,safely,63762,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,6,['safe'],['safely']
Safety,"rs(-1), // We are still expecting a few evaluation errors.; RooFit::PrintLevel(0))};; ; pdf.plotOn(frame, RooFit::LineColor(kBlue), RooFit::Name(""recovery""));; ; ; ; // Collect results and plot.; // --------------------------------; // We print the two fit results, and plot the fitted curves.; // The curve of the fit without recovery cannot be plotted, because the PDF is undefined if a2 < 0.; fitWithoutRecovery->Print();; std::cout << ""Without recovery, the fitter encountered "" << fitWithoutRecovery->numInvalidNLL(); << "" invalid function values. The parameters are unchanged."" << std::endl;; ; fitWithRecovery->Print();; std::cout << ""With recovery, the fitter encountered "" << fitWithRecovery->numInvalidNLL(); << "" invalid function values, but the parameters are fitted."" << std::endl;; ; TLegend* legend = new TLegend(0.5, 0.7, 0.9, 0.9);; legend->SetBorderSize(0);; legend->SetFillStyle(0);; legend->AddEntry(""data"", ""Data"", ""P"");; legend->AddEntry(""noRecovery"", ""Without recovery (cannot be plotted)"", ""L"");; legend->AddEntry(""recovery"", ""With recovery"", ""L"");; frame->Draw();; legend->Draw();; c->Draw();; }; ; c#define c(i)Definition RSha256.hxx:101; RooDataSet.h; RooFitResult.h; RooGlobalFunc.h; RooMsgService.h; RooPlot.h; RooPolynomial.h; RooRealVar.h; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; TLegend.h; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooMsgService::instancestatic RooMsgService & instance()Return reference to singleton instance.Definition RooMsgService.cxx:345; RooMsgService::getStreamStreamConfig & getStream(Int_t id)Definition RooMsgService.h:161; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:5697,recover,recovery,5697,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,3,['recover'],['recovery']
Safety,"rs(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUpdate(const UChar_t* buf, UInt_t len); static Int_tWriteChecksum(const char* file, const TMD5* md5). private:. voidDecode(UInt_t* out, const UChar_t* in, UInt_t len); voidEncode(UChar_t* out, const UInt_t* in, UInt_t len); voidTransform(UInt_t* buf, const UChar_t* in). Data Members; private:. UInt_tfBits[2]!temp buffer; UInt_tfBuf[4]!temp buffer; UChar_tfDigest[16]message digest; Bool_tfFinalizedtrue if message digest has been finalized; UChar_tfIn[64]!temp buffer; Char_tfString[33]!string representation of digest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMD5(); Create TMD5 object. Set bit count to 0 and buffer to mysterious; initialization constants. TMD5(const UChar_t* digest); Create finalized TMD5 object containing passed in 16 byte digest. TMD5(const TMD5& md5); MD5 copy ctor. Special copy ctor avoids copying unnecessary; temp arrays when finalized. TMD5 & operator=(const TMD5& rhs); MD5 assignment operator. Special assignment operator avoids; copying unnecessary temp arrays when finalized. void Update(const UChar_t* buf, UInt_t len); Update TMD5 object to reflect the concatenation of another buffer full; of bytes. void Final(UChar_t* digest); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context.; Returns digest. void Final(); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context. void Print() const; Print digest in ascii hex form. const char * AsString() const; Return message digest as string. Returns """" in case Final() has; not yet been called. void Encode(UChar_t* out, const UInt_t* in, UInt_t len); Encodes input into output. Assumes len is a multiple of 4. void Decode(UInt_t* out, const UChar_t* in, UInt_t len); Decodes input into output. Assumes len is a multiple of 4. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMD5.html:2383,avoid,avoids,2383,root/html534/TMD5.html,https://root.cern,https://root.cern/root/html534/TMD5.html,1,['avoid'],['avoids']
Safety,"rst();; 334 Int_t ylast = yaxis->GetLast();; 335 ; 336 ; 337 Double_t x, y, z;; 338 Int_t k = 0;; 339 ; 340 for (Int_t i = xfirst; i <= xlast; i++) {; 341 for (Int_t j = yfirst; j <= ylast; j++) {; 342 x = xaxis->GetBinCenter(i);; 343 y = yaxis->GetBinCenter(j);; 344 z = h2->GetBinContent(i, j);; 345 Double_t ez = h2->GetBinError(i, j);; 346 if (z != 0. || ez != 0) {; 347 SetPoint(k, x, y, z);; 348 k++;; 349 }; 350 }; 351 }; 352}; 353 ; 354 ; 355////////////////////////////////////////////////////////////////////////////////; 356/// Graph2D constructor with name, title and three vectors of doubles as input.; 357/// name : name of 2D graph (avoid blanks); 358/// title : 2D graph title; 359/// if title is of the form ""stringt;stringx;stringy;stringz""; 360/// the 2D graph title is set to stringt, the x axis title to stringx,; 361/// the y axis title to stringy,etc; 362 ; 363TGraph2D::TGraph2D(const char *name, const char *title,; 364 Int_t n, Double_t *x, Double_t *y, Double_t *z); 365 : TNamed(name, title), TAttLine(1, 1, 1), TAttFill(0, 1001), fNpoints(n); 366{; 367 Build(n);; 368 ; 369 // Copy the input vectors into local arrays; 370 for (Int_t i = 0; i < fNpoints; ++i) {; 371 fX[i] = x[i];; 372 fY[i] = y[i];; 373 fZ[i] = z[i];; 374 }; 375}; 376 ; 377 ; 378////////////////////////////////////////////////////////////////////////////////; 379/// Graph2D constructor. The arrays fX, fY and fZ should be filled via; 380/// calls to SetPoint; 381 ; 382TGraph2D::TGraph2D(Int_t n); 383 : TNamed(""Graph2D"", ""Graph2D""), TAttLine(1, 1, 1), TAttFill(0, 1001), fNpoints(n); 384{; 385 Build(n);; 386 for (Int_t i = 0; i < fNpoints; i++) {; 387 fX[i] = 0.;; 388 fY[i] = 0.;; 389 fZ[i] = 0.;; 390 }; 391}; 392 ; 393 ; 394////////////////////////////////////////////////////////////////////////////////; 395/// Graph2D constructor reading input from filename; 396/// filename is assumed to contain at least three columns of numbers.; 397/// For files separated by a specific delimiter differen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:12079,avoid,avoid,12079,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['avoid'],['avoid']
Safety,"rsvoid GetMeshNumbers(Int_t &nvert, Int_t &nsegs, Int_t &npols) const override; TGeoTube::IsCylTypeBool_t IsCylType() const overrideDefinition TGeoTube.h:77; TGeoTube::GetByteCountInt_t GetByteCount() const overrideDefinition TGeoTube.h:67; TGeoTube::GetAxisRangeDouble_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const override; TGeoTube::SetTubeDimensionsvoid SetTubeDimensions(Double_t rmin, Double_t rmax, Double_t dz); TGeoTube::MakeBuffer3DTBuffer3D * MakeBuffer3D() const override; TGeoTube::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideComputes distance from point (px,py) to the object.; TGeoTube::DistFromInsideSstatic Double_t DistFromInsideS(const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz); TGeoTube::GetDzvirtual Double_t GetDz() constDefinition TGeoTube.h:74; TGeoTube::SetPointsvoid SetPoints(Float_t *points) const override; TGeoTube::DistFromOutsideDouble_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override; TGeoTube::fRminDouble_t fRminDefinition TGeoTube.h:20; TGeoTube::ComputeNormal_vvoid ComputeNormal_v(const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override; TGeoTube::TGeoTubeTGeoTube(const char *name, Double_t rmin, Double_t rmax, Double_t dz); TGeoTube::fDzDouble_t fDzDefinition TGeoTube.h:22; TGeoTube::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave a primitive as a C++ statement(s) on output stream ""out"".; TGeoTube::ComputeBBoxvoid ComputeBBox() override; TGeoTube::DistFromOutsideSstatic Double_t DistFromOutsideS(const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz); TGeoTube::DistFromInside_vvoid DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override; TGeoTube::operator=TGeoTube & operator=(const TGeoTube &)=de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:24814,safe,safe,24814,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['safe'],['safe']
Safety,"rt); 1143 Remove(0, start);; 1144 if (send != end); 1145 Remove(send - start - (send - end), send - end);; 1146 return *this;; 1147}; 1148 ; 1149////////////////////////////////////////////////////////////////////////////////; 1150/// Resize the string. Truncate or add blanks as necessary.; 1151 ; 1152void TString::Resize(Ssiz_t n); 1153{; 1154 if (n < Length()); 1155 Remove(n); // Shrank; truncate the string; 1156 else; 1157 Append(' ', n-Length()); // Grew or staid the same; 1158}; 1159 ; 1160////////////////////////////////////////////////////////////////////////////////; 1161/// Return a substring of self stripped at beginning and/or end.; 1162 ; 1163TSubString TString::Strip(EStripType st, char c) const; 1164{; 1165 Ssiz_t start = 0; // Index of first character; 1166 Ssiz_t end = Length(); // One beyond last character; 1167 const char *direct = Data(); // Avoid a dereference w dumb compiler; 1168 ; 1169 if (st & kLeading); 1170 while (start < end && direct[start] == c); 1171 ++start;; 1172 if (st & kTrailing); 1173 while (start < end && direct[end-1] == c); 1174 --end;; 1175 if (end == start) start = end = kNPOS; // make the null substring; 1176 return TSubString(*this, start, end-start);; 1177}; 1178 ; 1179////////////////////////////////////////////////////////////////////////////////; 1180/// Change string to lower-case.; 1181 ; 1182void TString::ToLower(); 1183{; 1184 Ssiz_t n = Length();; 1185 char *p = GetPointer();; 1186 while (n--) {; 1187 *p = tolower((unsigned char)*p);; 1188 p++;; 1189 }; 1190}; 1191 ; 1192////////////////////////////////////////////////////////////////////////////////; 1193/// Change string to upper case.; 1194 ; 1195void TString::ToUpper(); 1196{; 1197 Ssiz_t n = Length();; 1198 char *p = GetPointer();; 1199 while (n--) {; 1200 *p = toupper((unsigned char)*p);; 1201 p++;; 1202 }; 1203}; 1204 ; 1205////////////////////////////////////////////////////////////////////////////////; 1206/// Check to make sure a string index is in range.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:35504,Avoid,Avoid,35504,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['Avoid'],['Avoid']
Safety,"rt, Double_t step); --- Divide this trd2 shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Only Z divisions; are supported. For Z divisions just return the pointer to the volume to be; divided. In case a wrong division axis is supplied, returns pointer to; volume that was divided. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; Fills real parameters of a positioned box inside this. Returns 0 if successfull. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void InspectShape() const; print shape parameters. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); set arb8 params in one step :. void SetPoints(Double_t* points) const; create trd2 mesh points. void SetPoints(Float_t* points) const; create trd2 mesh points. void SetVertex(Double_t* vertex) const; set vertex of a corner according to visibility flags. void Sizeof3D() const; fill size of this 3-D object. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd2.html:15519,Safe,Safety,15519,root/html534/TGeoTrd2.html,https://root.cern,https://root.cern/root/html534/TGeoTrd2.html,3,['Safe'],['Safety']
Safety,"rted from a Double_t to a Float_t In case B fTemperature is converted to a 32 bit unsigned integer In case C fCharge is converted to a 2 bits unsigned integer In case D the array elements of fVertex are converted to an unsigned 10 bits integer In case E fChi2 is converted to a Float_t with mantissa truncated precision at 6 bits In case F the fNsp elements of array fPointvalue are converted to an unsigned 32 bit integer Note that the range specifier must follow the dimension specifier. Case B has more precision (9 to 10 significative digits than case A (6 to 7 digits). See TBufferFile::WriteFloat16 for more information.; see example of use of the Double32_t data type in tutorial double32.C . Implements TBuffer.; Definition at line 678 of file TBufferFile.cxx. ◆ WriteFastArray() [1/15]. void TBufferFile::WriteFastArray ; (; const Bool_t * ; b, . Long64_t ; n . ). overridevirtual . Write array of n bools into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 1982 of file TBufferFile.cxx. ◆ WriteFastArray() [2/15]. void TBufferFile::WriteFastArray ; (; const Char_t * ; c, . Long64_t ; n . ). overridevirtual . Write array of n characters into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2010 of file TBufferFile.cxx. ◆ WriteFastArray() [3/15]. void TBufferFile::WriteFastArray ; (; const Double_t * ; d, . Long64_t ; n . ). overridevirtual . Write array of n doubles into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:80948,abort,aborts,80948,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['abort'],['aborts']
Safety,"rtesian2D, based on (x,y);; ROOT::Math::Polar2D, based on (r,phi);. 3D coordinate system classes:. ROOT::Math::Cartesian3D, based on (x,y,z);; ROOT::Math::Polar3D, based on (r,theta,phi);; ROOT::Math::Cylindrical3D, based on (rho,z,phi); ROOT::Math::CylindricalEta3D, based on (rho,eta,phi), where eta is the pseudo-rapidity;. 4D coordinate system classes:. ROOT::Math::PxPyPzE4D, based on based on (px,py,pz,E);; ROOT::Math::PxPyPzM4D, based on based on (px,py,pz,M);; ROOT::Math::PtEtaPhiE4D, based on based on (pt,eta,phi,E);; ROOT::Math::PtEtaPhiM4D, based on based on (pt,eta,phi,M);. Users can define the vectors according to the coordinate type, which is the most efficient for their use. Transformations between the various coordinate systems are available through copy constructors or the assignment (=) operator. For maximum flexibility and minimize memory allocation, the coordinate system classes are templated on the scalar type. To avoid exposing templated parameter to the users, typedefs are defined for all types of vectors based on doubles. See in the examples for all the possible types of vector classes, which can be constructed by users with the available coordinate system types.; 13.12.1.4 Coordinate System Tag; The 2D and 3D points and vector classes can be associated to a tag defining the coordinate system. This can be used to distinguish between vectors of different coordinate systems like global or local vectors. The coordinate system tag is a template parameter of the ROOT::Math::DisplacementVector3D and ROOT::Math::PositionVector3D (and also for 2D classes). A default tag exists for users who do not need this functionality, ROOT::Math::DefaultCoordinateSystemTag.; 13.12.1.5 Transformations; The transformations are modeled using simple (non-template) classes, using double as the scalar type to avoid too large numerical errors. The transformations are grouped in rotations (in 3 dimensions), Lorentz transformations and Poincare transformations, which are tra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:722274,avoid,avoid,722274,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoid']
Safety,"rticle is alive and will continue to be; transported. Int_t NSecondaries() const. get methods - secondaries. Return the number of secondary particles generated in the current step. void GetSecondary(Int_t isec, Int_t& particleId, TLorentzVector& position, TLorentzVector& momentum); Return the parameters of the secondary track number isec produced; in the current step. Int_t StepProcesses(TArrayI& proc) const; Return the VMC code of the process that has produced the secondary; particles in the current step; Return the array of the VMC code of the processes active in the current; step. Bool_t SecondariesAreOrdered() const; Return the information about the transport order needed by the stack. void Gdopt(const char* , const char* ). Geant3 specific methods; !!! to be removed with move to TGeo. Set/modify the drawing options.; Deprecated - G3 only. void SetClipBox(const char* , Double_t = -9999, Double_t = 0, Double_t = -9999, Double_t = 0, Double_t = -9999, Double_t = 0); This function allows subtractions (via boolean operation) of BOX shape; from any part of the detector, therefore showing its inner contents; Deprecated - G3 only. void Gdhead(Int_t , const char* , Double_t = 0); Deprecated - G3 only; Deprecated - G3 only. void Gdman(Double_t , Double_t , const char* ); Deprecated - G3 only. void Init(). Control methods. Initialize MC. void BuildPhysics(); Initialize MC physics. void ProcessEvent(); Process one event. Bool_t ProcessRun(Int_t nevent); Process one run and return true if run has finished successfully,; return false in other cases (run aborted by user). void InitLego(); Set switches for lego transport. TVirtualMCStack* GetStack() const. Get methods. Return the particle stack. { return fStack; }. TVirtualMCDecayer* GetDecayer() const; Return the external decayer. { return fDecayer; }. TRandom* GetRandom() const; Return the random number generator. { return fRandom; }. TVirtualMagField* GetMagField() const; Return the magnetic field. { return fMagField; }. TV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:36667,detect,detector,36667,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,1,['detect'],['detector']
Safety,rts vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00.01 fails to build with geocad support due to conficting function definition; [ROOT-6966] - MacOS 10.9 build cannot run on 10.10; [ROOT-7342] - Conflicting definitions of Printf function; [ROOT-7402] - Fix the inconsistency in ROOT_LINKER_LIBRARY() macro between 5 and 6 versions; [ROOT-7423] - Ac,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:29539,recover,recovery,29539,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['recover'],['recovery']
Safety,"rtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTGeoPcon::DefineSection(Int_t snum, Double_t z, Double_t rmin, Double_t rmax); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tTGeoPcon::DistToSegZ(Double_t* point, Double_t* dir, Int_t& iz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cfio, Double_t sfio, Double_t cdfi) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Double_t&TGeoPcon::Dphi(); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPgon.html:2225,safe,safe,2225,root/html528/TGeoPgon.html,https://root.cern,https://root.cern/root/html528/TGeoPgon.html,2,['safe'],['safe']
Safety,"rtual voidTObject::AppendPad(Option_t* option = """"); static Double_tBig(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidCheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tEpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoShape.html:7761,safe,safe,7761,root/html530/TGeoShape.html,https://root.cern,https://root.cern/root/html530/TGeoShape.html,1,['safe'],['safe']
Safety,"rue"" underlying distribution <m> describing the data <n>. Since <m> is unknown, the data distribution is used instead, lambda = L(y;n) / L(n;n). Note that this ratio is 1 if the fit is perfect. The chi2 value is then computed according to chi2 = -2*ln(lambda). This parameter can be shown to follow a Chi-square distribution. See for example S. Baker and R. Cousins, ""Clarification of the use of chi-square; and likelihood functions in fits to histograms"", Nucl. Instr. Meth. A221, pp. 437-442 (1984) ; Definition at line 883 of file TFractionFitter.cxx. ◆ GetFitter(). ROOT::Fit::Fitter * TFractionFitter::GetFitter ; (; ); const. Give direct access to the underlying fitter class. ; This can be used e.g. to modify parameter values or step sizes. ; Definition at line 319 of file TFractionFitter.cxx. ◆ GetMCPrediction(). TH1 * TFractionFitter::GetMCPrediction ; (; Int_t ; parm); const. Return the adjusted MC template (Aji) for template (parm). ; Note that the (Aji) times fractions only sum to the total prediction of the fit if all weights are 1. Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if the class is deleted ; Definition at line 961 of file TFractionFitter.cxx. ◆ GetNDF(). Int_t TFractionFitter::GetNDF ; (; ); const. return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ; The number of degrees of freedom corresponds to the number of points used in the fit minus the number of templates. ; Definition at line 894 of file TFractionFitter.cxx. ◆ GetPlot(). TH1 * TFractionFitter::GetPlot ; (; ). Return the ""template prediction"" corresponding to the fit result (this is not the same as the weighted sum of template distributions, as template statistical uncertainties are taken into account). ; Note that the name of this histogram will simply be the same as that of the ""data"" histogram, prefixed with the string ""Fraction fit to hist: "". Note also that the hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:27238,predict,prediction,27238,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['predict'],['prediction']
Safety,"rue;; 255 }; 256 }; 257 ; 258 template<class T>; 259 WrappedMultiTF1Templ<T>::WrappedMultiTF1Templ(const WrappedMultiTF1Templ<T> &rhs) :; 260 BaseParamFunc(rhs),; 261 fLinear(rhs.fLinear),; 262 fPolynomial(rhs.fPolynomial),; 263 fOwnFunc(rhs.fOwnFunc),; 264 fFunc(rhs.fFunc),; 265 fDim(rhs.fDim); 266 //fParams(rhs.fParams); 267 {; 268 // copy constructor; 269 if (fOwnFunc) SetAndCopyFunction(rhs.fFunc);; 270 }; 271 ; 272 template<class T>; 273 WrappedMultiTF1Templ<T> &WrappedMultiTF1Templ<T>::operator= (const WrappedMultiTF1Templ<T> &rhs); 274 {; 275 // Assignment operator; 276 if (this == &rhs) return *this; // time saving self-test; 277 fLinear = rhs.fLinear;; 278 fPolynomial = rhs.fPolynomial;; 279 fOwnFunc = rhs.fOwnFunc;; 280 fDim = rhs.fDim;; 281 //fParams = rhs.fParams;; 282 return *this;; 283 }; 284 ; 285 template <class T>; 286 void WrappedMultiTF1Templ<T>::ParameterGradient(const T *x, const double *par, T *grad) const; 287 {; 288 // evaluate the gradient of the function with respect to the parameters; 289 //IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; 290 // BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; 291 // so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters; 292 ; 293 if (!fLinear) {; 294 // need to set parameter values; 295 fFunc->SetParameters(par);; 296 // no need to call InitArgs (it is called in TF1::GradientPar); 297 double prec = this->GetDerivPrecision();; 298 fFunc->GradientPar(x, grad, prec);; 299 } else { // case of linear functions; 300 unsigned int np = NPar();; 301 for (unsigned int i = 0; i < np; ++i); 302 grad[i] = DoParameterDerivative(x, par, i);; 303 }; 304 }; 305 ; 306 // struct for dealing of generic Hessian computation, since it is available only in TFormula; 307 template <class T>; 308 struct GeneralHessianCalc {; 309 static bool Hessian(TF1 *, const T *, const double *, T *); 310 {; 311 Error(""He",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html:10269,avoid,avoid,10269,doc/master/WrappedMultiTF1_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html,1,['avoid'],['avoid']
Safety,"rum. Meth. A372, 469 (1996) [hep-ph/9509307] ; TSVDUnfold implements the singular value decomposition based unfolding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum. ; The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. ; Monte Carlo inputs: . xini: true underlying spectrum (TH1D, n bins) . bini: reconstructed spectrum (TH1D, n bins) . Adet: response matrix (TH2D, nxn bins) . Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitly, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TSVDUnfoldSVD Approach to Data Unfolding.Definition TSVDUnfold.h:46; TSVDUnfold::UnfoldTH1D * Unfold(Int_t kreg)Perform the unfolding with regularisation parameter kreg.Definition TSVDUnfold.cxx:237; where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVDUnfold.html:1303,detect,detector,1303,doc/master/classTSVDUnfold.html,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html,1,['detect'],['detector']
Safety,"rvables, parameters of interest; and nuisance parameters. Defaults:; observables: determined from data,; global observables = explicit obs - obs from data; parameters of interest: empty,; nuisance parameters: all parameters except parameters of interest. We use NULL to mean not set, so we don't want to fill; with empty RooArgSets. void Print(Option_t* option = """") const; print contents of Model on the default print stream; It can be changed using RooPrintable. void SetWS(RooWorkspace& ws); set a workspace that owns all the necessary components for the analysis. RooWorkspace * GetWS() const; get from TRef. void SetSnapshot(const RooArgSet& set); save snaphot in the workspace; and use values passed with the set. const RooArgSet * GetSnapshot() const; Load the snapshot from ws and return the corresponding set with the snapshot values.; User must delete returned RooArgSet. void LoadSnapshot() const; load the snapshot from ws if it exists. void DefineSetInWS(const char* name, const RooArgSet& set); helper functions to avoid code duplication. void ImportPdfInWS(const RooAbsPdf& pdf); internal function to import Pdf in WS. void ImportDataInWS(RooAbsData& data); internal function to import data in WS. Bool_t SetHasOnlyParameters(const RooArgSet& set, const char* errorMsgPrefix = 0). ModelConfig(RooWorkspace* ws = 0). ModelConfig(const char* name, RooWorkspace* ws = 0). ModelConfig(const char* name, const char* title, RooWorkspace* ws = 0). ModelConfig * Clone(const char* name = """") const; clone. void SetWorkspace(RooWorkspace& ws); alias for SetWS(...). { SetWS(ws); }. void SetProtoData(RooAbsData& data); Set the proto DataSet, add to the the workspace if not already there. SetProtoData(const char* name). void SetPdf(const RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. SetPdf(const char* name). void SetPriorPdf(const RooAbsPdf& pdf); Set the Prior Pdf, add to the the workspace if not already there. SetPriorPdf(const char* name). void SetParamet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ModelConfig.html:9685,avoid,avoid,9685,root/html534/RooStats__ModelConfig.html,https://root.cern,https://root.cern/root/html534/RooStats__ModelConfig.html,3,['avoid'],['avoid']
Safety,"rver::BrowseKey ; (; const char * ; keyname). Read key object and send it back to client. ; Definition at line 1010 of file TApplicationServer.cxx. ◆ Class(). static TClass * TApplicationServer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TApplicationServer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TApplicationServer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 94 of file TApplicationServer.h. ◆ DeclFileName(). static const char * TApplicationServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 94 of file TApplicationServer.h. ◆ ErrorHandler(). void TApplicationServer::ErrorHandler ; (; Int_t ; level, . Bool_t ; abort, . const char * ; location, . const char * ; msg . ). staticprotected . The error handler function. ; It prints the message on stderr and if abort is set it aborts the application. ; Definition at line 1088 of file TApplicationServer.cxx. ◆ ExecLogon(). void TApplicationServer::ExecLogon ; (; ). private . Execute logon macro's. ; There are three levels of logon macros that will be executed: the system logon etc/system.rootlogon.C, the global user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward compatibility also the logon macro as specified by the Rint.Logon environment setting, by default ./rootlogon.C, will be executed. No logon macros will be executed when the system is started with the -n option. ; Definition at line 1277 of file TApplicationServer.cxx. ◆ GetHost(). const char * TApplicationServer::GetHost ; (; ); const. inline . Definition at line 73 of file TApplicationServer.h. ◆ GetOptions(). void TApplicationServer::GetOptions ; (; Int_t * ; argc, . char ** ; argv . ). overridevirtual . Get and handle command line options. ; Fixed format: ""protocol url"" ; Reimplemented from TApplication.; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:25056,abort,abort,25056,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,2,['abort'],"['abort', 'aborts']"
Safety,"ry is also computed. This can be retrieved for masterlocal point or vector conversions: TGeoManager::GetNextMatrix(); In case the computation of the normal vector to the next crossed surface is required, using a negative stepmax value is recommended. In this case one can subsequently call a method for fast normal computation:; Double_t *TGeoManager::FindNormalFast(); path 0; In case a path to a given physical object is specified, the distance to its boundary is computed ignoring the rest of the geometry; 18.10.2.1 Output Values; TGeoManager::GetStep(): distance to next boundary.; TGeoManager::GetSafeDistance(): safe distance (in case it was computed).; TGeoManager::IsOnBoundary(): the initial point (x,y,z) was (or was not) on a boundary within TGeoShape::Tolerance().; The algorithm checks first if the computation of safety was required. If this is the case and the global point coordinates did not change from the last query, the last computed safety is taken. Otherwise, the method TGeoManager::Safety () is invoked. A safety value less than TGeoShape::Tolerance() will set the flag IsOnBoundary to true. On the other hand, a safety value bigger than the proposed step will stop the computation of the distance to next boundary, returning the current geometry location with the meaning that the proposed step is safe.; The next stage is to check if computation of the distance to a give physical object specified by a path was required. If this is the case, the modeller changes the state to point to the required object, converts the current point and direction coordinates to the local frame of this object and computes the distance to its shape. The node returned is the one pointed by the input path in case the shape is crossed; otherwise the returned value is NULL. In case the distance to next crossed boundary is required, the current point has to be physically INSIDE the shape pointed by the current volume. This is only insured in case a call to TGeoManager::FindNode() was per",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1028208,Safe,Safety,1028208,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Safe'],['Safety']
Safety,"ry on file; TStringTNamed::fTitleobject title; Int_tfVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKey(); TKey default constructor. TKey(TDirectory* motherDir); TKey default constructor. TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object to read keys.; Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; A TKey object is created to read the keys structure itself. TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for a TObject* and fill output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir, const char* classname, Long64_t filepos); method used in all TKey constructor to initialize basic data fields; filepos is used to calculate correct version number of key; if filepos==-1, end of file position is used. void Browse(TBrowser* b); Read object from disk and call its Browse() method.; If obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TKey.html:9718,avoid,avoid,9718,root/html528/TKey.html,https://root.cern,https://root.cern/root/html528/TKey.html,2,['avoid'],['avoid']
Safety,"ryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void CheckGeometryFull(Bool_t checkoverlaps = kTRUE, Bool_t checkcrossings = kTRUE, Int_t nrays = 10000, const Double_t* vertex = __null); Geometry checking. Opional overlap checkings (by sampling and by mesh). Optional; boundary crossing check + timing per volume. STAGE 1: extensive overlap checking by sampling per volume. Stdout need to be; checked by user to get report, then TGeoVolume::CheckOverlaps(0.01, ""s"") can; be called for the suspicious volumes.; STAGE2 : normal overlap checking using the shapes mesh - fills the list of; overlaps.; STAGE3 : shooting NRAYS rays from VERTEX and counting the total number of; crossings per volume (rays propagated from boundary to boundary until; geometry exit). Timing computed and results stored in a histo.; STAGE4 : shooting 1 mil. random rays inside EACH volume and calling; FindNextBoundary() + Safety() for each call. The timing is normalized by the; number of crossings computed at stage 2 and presented as percentage.; One can get a picture on which are the most ""burned"" volumes during; transportation from geometry point of view. Another plot of the timing per; volume vs. number of daughters is produced.; All histos are saved in the file statistics.root. Int_t PropagateInGeom(Double_t* , Double_t* ); Propagate from START along DIR from boundary to boundary until exiting; geometry. Fill array of hits. void Score(TGeoVolume* , Int_t , Double_t ); Score a hit for VOL. void SetNmeshPoints(Int_t npoints = 1000); Set number of points to be generated on the shape outline when checking for overlaps. Double_t TimingPerVolume(TGeoVolume* ); Compute timing per ""FindNextBoundary"" + ""Safety"" call. Volume must be; in the current path. void CheckGeometry(Int_t nrays, Double_t startx, Double_t starty, Double_t startz) const; Shoot nrays with random directions from starti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoChecker.html:12736,Safe,Safety,12736,root/html602/TGeoChecker.html,https://root.cern,https://root.cern/root/html602/TGeoChecker.html,2,['Safe'],['Safety']
Safety,"ryWithIndex = (1ULL << ( 5 )); , kGetFriend = (1ULL << ( 6 )); , kGetFriendAlias = (1ULL << ( 7 )); , ;   kGetLeaf = (1ULL << ( 8 )); , kLoadTree = (1ULL << ( 9 )); , kPrint = (1ULL << ( 10 )); , kRemoveFriend = (1ULL << ( 11 )); , ;   kSetBranchStatus = (1ULL << ( 12 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TTree; virtual TBranch * BranchImp (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch() with added check that addobj matches className. ;  ; virtual TBranch * BranchImp (const char *branchname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpArr (const char *branchname, EDataType datatype, std::size_t N, void *addobj, Int_t bufsize, Int_t splitlevel);  ; virtual TBranch * BranchImpRef (const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BranchImpRef (const char *branchname, TClass *ptrClass, EDataType datatype, void *addobj, Int_t bufsize, Int_t splitlevel);  Same as TTree::Branch but automatic detection of the class name. ;  ; virtual TBranch * BronchExec (const char *name, const char *classname, void *addobj, bool isptrptr, Int_t bufsize, Int_t splitlevel);  Helper function implementing TTree::Bronch and TTree::Branch(const char *name, T &obj);. ;  ; virtual Int_t CheckBranchAddressType (TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr);  Check whether or not the address described by the last 3 parameters matches the content of the branch. ;  ; Long64_t GetCacheAutoSize (bool withDefault=false);  Used for automatic sizing of the cache. ;  ; virtual TLeaf * GetLeafImpl (const char *branchname, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:47212,detect,detection,47212,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,1,['detect'],['detection']
Safety,"s ();  Static method to check if threads exist. ;  ; static Int_t Exit (void *ret=nullptr);  Static method which terminates the execution of the calling thread. ;  ; static TThread * GetThread (const char *name);  Static method to find a thread by name. ;  ; static TThread * GetThread (Long_t id);  Static method to find a thread by id. ;  ; static Int_t GetTime (ULong_t *absSec, ULong_t *absNanoSec);  Static method to get the current time. ;  ; static void Initialize ();  Initialize the Thread package. ;  ; static Bool_t IsInitialized ();  Return true, if the TThread objects have been initialize. ;  ; static Long_t Join (Long_t id, void **ret=nullptr);  Static method to join a thread by id. ;  ; static Int_t Kill (const char *name);  Static method to kill thread by name. ;  ; static Int_t Kill (Long_t id);  Static method to kill the thread by id. ;  ; static Int_t Lock ();  Static method to lock the main thread mutex. ;  ; static void Printf (const char *fmt,...);  Static method providing a thread safe printf. Appends a newline. ;  ; static void Ps ();  Static method listing the existing threads. ;  ; static void ps ();  ; static TThread * Self ();  Static method returning pointer to current thread. ;  ; static Long_t SelfId ();  Static method returning the id for the current thread. ;  ; static Int_t SetCancelAsynchronous ();  Static method to set the cancellation response type of the calling thread to asynchronous, i.e. ;  ; static Int_t SetCancelDeferred ();  Static method to set the cancellation response type of the calling thread to deferred, i.e. ;  ; static Int_t SetCancelOff ();  Static method to turn off thread cancellation. ;  ; static Int_t SetCancelOn ();  Static method to turn on thread cancellation. ;  ; static Int_t Sleep (ULong_t secs, ULong_t nanos=0);  Static method to sleep the calling thread. ;  ; static Int_t TryLock ();  Static method to try to lock the main thread mutex. ;  ; static void ** Tsd (void *dflt, Int_t k);  Static method returning a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:13103,safe,safe,13103,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['safe'],['safe']
Safety,"s += contLevel->GetSize();; }. nGraphs = 0;. TCanvas* c1 = new TCanvas(""c1"",""Contour List"",610,0,600,600);; c1->SetTopMargin(0.15);; TH2F *hr = new TH2F(""hr"",; ""#splitline{Negative contours are returned first (highest to lowest). Positive contours are returned from}{lowest to highest. On this plot Negative contours are drawn in red and positive contours in blue.}"",; 2, -2, 2, 2, 0, 6.5);. hr->Draw();; Double_t x0, y0, z0;; TLatex l;; l.SetTextSize(0.03);; char val[20];. for(i = 0; i < TotalConts; i++){; contLevel = (TList*)conts->At(i);; if (i<3) z0 = contours[2-i];; else z0 = contours[i];; printf(""Z-Level Passed in as: Z = %f\n"", z0);. // Get first graph from list on curves on this level; curv = (TGraph*)contLevel->First();; for(j = 0; j < contLevel->GetSize(); j++){; curv->GetPoint(0, x0, y0);; if (z0<0) curv->SetLineColor(kRed);; if (z0>0) curv->SetLineColor(kBlue);; nGraphs ++;; printf(""\tGraph: %d -- %d Elements\n"", nGraphs,curv->GetN());. // Draw clones of the graphs to avoid deletions in case the 1st; // pad is redrawn.; gc = (TGraph*)curv->Clone();; gc->Draw(""C"");. sprintf(val,""%g"",z0);; l.DrawLatex(x0,y0,val);; curv = (TGraph*)contLevel->After(curv); // Get Next graph; }; }; c1->Update();; printf(""\n\n\tExtracted %d Contours and %d Graphs \n"", TotalConts, nGraphs );; gStyle->SetTitleW(0.);; gStyle->SetTitleH(0.);; return c1;; }. Double_t SawTooth(Double_t x, Double_t WaveLen){. // This function is specific to a sawtooth function with period; // WaveLen, symmetric about x = 0, and with amplitude = 1. Each segment; // is 1/4 of the wavelength.; //; // |; // /\ |; // / \ |; // / \ |; // / \; // /--------\--------/------------; // |\ /; // | \ /; // | \ /; // | \/; //. Double_t y;; if ( (x < -WaveLen/2) || (x > WaveLen/2)) y = -99999999; // Error X out of bounds; if (x <= -WaveLen/4) {; y = x + 2.0;; } else if ((x > -WaveLen/4) && (x <= WaveLen/4)) {; y = -x ;; } else if (( x > WaveLen/4) && (x <= WaveLen/2)) {; y = x - 2.0;; }; return y;; }; The following opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:42312,avoid,avoid,42312,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,3,['avoid'],['avoid']
Safety,"s = ctxt->fNext = nullptr;; 1424 } else {; 1425 TContext *next = ctxt->fNext;; 1426 ctxt->fPrevious->fNext = next;; 1427 if (next) next->fPrevious = ctxt->fPrevious;; 1428 ctxt->fPrevious = ctxt->fNext = nullptr;; 1429 }; 1430}; 1431 ; 1432////////////////////////////////////////////////////////////////////////////////; 1433/// TDirectory Streamer.; 1434void TDirectory::Streamer(TBuffer &R__b); 1435{; 1436 // Stream an object of class TDirectory.; 1437 ; 1438 UInt_t R__s, R__c;; 1439 if (R__b.IsReading()) {; 1440 Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }; 1441 TNamed::Streamer(R__b);; 1442 R__b >> fMother;; 1443 R__b >> fList;; 1444 fList->UseRWLock();; 1445 fUUID.Streamer(R__b);; 1446 R__b.CheckByteCount(R__s, R__c, TDirectory::IsA());; 1447 } else {; 1448 R__c = R__b.WriteVersion(TDirectory::IsA(), kTRUE);; 1449 TNamed::Streamer(R__b);; 1450 R__b << fMother;; 1451 R__b << fList;; 1452 fUUID.Streamer(R__b);; 1453 R__b.SetByteCount(R__c, kTRUE);; 1454 }; 1455}; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Version_tshort Version_tDefinition RtypesCore.h:65; Long_tlong Long_tDefinition RtypesCore.h:54; Short_tshort Short_tDefinition RtypesCore.h:39; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; Strlen.h; TBrowser.h; TBuffer.h; TClassTable.h; TClass.h; tcling_callfunc_Wrapper_tvoid(* tcling_callfunc_Wrapper_t)(void *, int, void **, void *)Definition TClingCallFunc.h:56; GetCurrentDirecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:50701,Safe,SafeDelete,50701,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,2,['Safe'],['SafeDelete']
Safety,"s Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GEOM; » GEOM; » TGeoVolumeAssembly. class TGeoVolumeAssembly: public TGeoVolume. TGeoVolume - the base class representing solids. Volumes are the basic objects used in building the geometrical hierarchy.; They represent unpositioned objects but store all information about the; placement of the other volumes they may contain. Therefore a volume can; be replicated several times in the geometry. In order to create a volume, one; has to put togeather a shape and a medium which are already defined. Volumes; have to be named by users at creation time. Every different name may represent a; an unique volume object, but may also represent more general a family (class); of volume objects having the same shape type and medium, but possibly; different shape parameters. It is the user's task to provide different names; for different volume families in order to avoid ambiguities at tracking time.; A generic family rather than a single volume is created only in two cases :; when a generic shape is provided to the volume constructor or when a division; operation is applied. Each volume in the geometry stores an unique; ID corresponding to its family. In order to ease-up their creation, the manager; class is providing an API that allows making a shape and a volume in a single step. Volumes are objects that can be visualized, therefore having visibility,; colour, line and fill attributes that can be defined or modified any time after; the volume creation. It is advisable however to define these properties just; after the first creation of a volume namespace, since in case of volume families; any new member created by the modeler inherits these properties. In order to provide navigation features, volumes have to be able to find; the proper container of any point defined in the local reference frame. This; can be the vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolumeAssembly.html:1097,avoid,avoid,1097,root/html528/TGeoVolumeAssembly.html,https://root.cern,https://root.cern/root/html528/TGeoVolumeAssembly.html,3,['avoid'],['avoid']
Safety,"s ONLY and the others; 161MANY as in GEANT3, where this concept was introduced:; 162 1. The part of a MANY node B extruding its container A will never be ""seen""; 163during navigation, as if B was in fact the result of the intersection of A and B.; 164 2. If we have two nodes A (ONLY) and B (MANY) inside the same container, all; 165points in the overlapping region of A and B will be designated as belonging to A.; 166 3. If A an B in the above case were both MANY, points in the overlapping; 167part will be designated to the one defined first. Both nodes must have the; 168same medium.; 169 4. The slices of a divided MANY will be as well MANY.; 170 ; 171One needs to know that navigation inside geometry parts MANY nodes is much; 172slower. Any overlapping part can be defined based on composite shapes - this; 173is always recommended.; 174 ; 175### Replicating volumes; 176 ; 177 What can we do if our chamber contains two identical wires instead of one ?; 178What if then we would need 1000 chambers in our detector ? Should we create; 1792000 wires and 1000 chamber volumes ? No, we will just need to replicate the; 180ones that we have already created.; 181 ; 182~~~ {.cpp}; 183 chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; 184 chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));; 185~~~; 186 ; 187 The 2 nodes that we have created inside chamber will both point to a wire_co; 188object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will; 189want now to place symmetrically 1000 chambers on a pad, following a pattern; 190of 20 rows and 50 columns. One way to do this will be to replicate our chamber; 191by positioning it 1000 times in different positions of the pad. Unfortunately,; 192this is far from being the optimal way of doing what we want.; 193Imagine that we would like to find out which of the 1000 chambers is containing; 194a (x,y,z) point defined in the pad reference. You will never have to do that,; 195since the modeller will take c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:9544,detect,detector,9544,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,1,['detect'],['detector']
Safety,"s TPostScript. Writing several canvases to the same Postscript or PDF file:. if the Postscript or PDF file name finishes with ""("", the file is not closed; if the Postscript or PDF file name finishes with "")"" and the file has been opened; with ""("", the file is closed. Example:. {; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps(""); //write canvas and keep the ps file open; h2.Draw();; c1.Print(""c1.ps""); canvas is added to ""c1.ps""; h3.Draw();; c1.Print(""c1.ps)""); canvas is added to ""c1.ps"" and ps file is closed; }. In the previous example replacing ""ps"" by ""pdf"" will create a multi-pages PDF file. Note that the following sequence writes the canvas to ""c1.ps"" and closes the ps file.:; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps"");. The TCanvas::Print(""file.ps("") mechanism is very useful, but it can be; a little inconvenient to have the action of opening/closing a file; being atomic with printing a page. Particularly if pages are being; generated in some loop one needs to detect the special cases of first; and last page and then munge the argument to Print() accordingly. The ""["" and ""]"" can be used instead of ""("" and "")"". Example:. c1.Print(""file.ps[""); // No actual print, just open file.ps; for (int i=0; i<10; ++i) {; // fill canvas for context i; // ... c1.Print(""file.ps""); // actually print canvas to file; }// end loop; c1.Print(""file.ps]""); // No actual print, just close. As before, the same macro is valid for PDF files. It is possible to print a canvas into an animated GIF file by specifying the; file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN*10ms is delay; between the subimages' display. If NN is ommitted the delay between; subimages is zero. Each picture is added in the animation thanks to a loop; similar to the following one:. for (int i=0; i<10; ++i) {; // fill canvas for context i; // ... c1.Print(""file.gif+5""); // print canvas to GIF file with 50ms delays; }// end loop. The delay between each frame must be specified in each Print() statement.; If t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:52491,detect,detect,52491,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,3,['detect'],['detect']
Safety,"s TPostScript. Writing several canvases to the same Postscript or PDF file:. if the Postscript or PDF file name finishes with ""("", the file is not closed; if the Postscript or PDF file name finishes with "")"" and the file has been opened; with ""("", the file is closed. Example:. {; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps(""); //write canvas and keep the ps file open; h2.Draw();; c1.Print(""c1.ps""); canvas is added to ""c1.ps""; h3.Draw();; c1.Print(""c1.ps)""); canvas is added to ""c1.ps"" and ps file is closed; }. In the previous example replacing ""ps"" by ""pdf"" will create a multi-pages PDF file. Note that the following sequence writes the canvas to ""c1.ps"" and closes the ps file.:; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps"");. The TCanvas::Print(""file.ps("") mechanism is very useful, but it can be; a little inconvenient to have the action of opening/closing a file; being atomic with printing a page. Particularly if pages are being; generated in some loop one needs to detect the special cases of first; and last page and then munge the argument to Print() accordingly. The ""["" and ""]"" can be used instead of ""("" and "")"". Example:. c1.Print(""file.ps[""); // No actual print, just open file.ps; for (int i=0; i<10; ++i) {; // fill canvas for context i; // ... c1.Print(""file.ps""); // actually print canvas to file; }// end loop; c1.Print(""file.ps]""); // No actual print, just close. As before, the same macro is valid for PDF files. It is possible to print a pad into an animated GIF file by specifying the; file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN*10ms is delay; between the subimages' display. If NN is ommitted the delay between; subimages is zero. Each picture is added in the animation thanks to a loop; similar to the following one:. for (int i=0; i<10; ++i) {; // fill canvas for context i; // ... c1.Print(""file.gif+5""); // print canvas to GIF file with 50ms delays; }// end loop. The delay between each frame must be specified in each Print() statement. void Ran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:50395,detect,detect,50395,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,3,['detect'],['detect']
Safety,"s a spectrum (flux vs wavelength) ;  FITS_tutorial6.COpen a FITS file whose primary array represents a spectrum table (flux vs wavelength) and dump its columns ;  ► foam;  foam_demo.C Demonstrate the TFoam class ;  foam_demopers.C This simple macro demonstrates persistency of FOAM object ;  foam_kanwa.C This program can be execute from the command line as folows: ;  ► geom;  assembly.CGeometry detector assembly example ;  building.CDrawing a building where Dept ;  cheongwadae.CDrawing the Cheongwadae building which is the Presidential Residence of the Republic of Korea, using ROOT geometry class ;  csgdemo.CCombinatorial Solid Geometry example ;  geodemo.CGUI to draw the geometry shapes ;  geomAlice.CScript drawing a detector geometry (here ALICE) ;  geomAlice_itsv.CScript drawing a detector geometry (here ITSV from Alice) ;  geomAtlas.CScript drawing a detector geometry (here ATLAS) ;  geomBrahms.CScript drawing a detector geometry (here BRAHMS) ;  geomD0.CScript drawing a detector geometry (here D0) ;  geometry.CExample of the old geometry package (now obsolete) ;  iterplugin.cxx;  lego.CDrawing a figure, made of lego block, using ROOT geometry class ;  mp3player.CDrawing a mp3 type music player, using ROOT geometry class ;  na49.CThis file has been generated automatically via the root utility toroot from an interactive version of GEANT (see ROOT class TGeometry header for an example of use) This shows an example of the old geometry package (now obsolete) ;  na49geomfile.CBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.CThis macro generates with 2 views of the NA49 detector using the old obsolete geometry package ;  parallel_world.CMisaligning geometry generate in many cases overlaps, due to the idealization of the design and the fact that in real life movements of the geometry volumes have constraints and are correlated ;  RadioNuclides.CMacro that demonstrates usage of radioactive elements/materials/mixtures with TGeo pac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:109068,detect,detector,109068,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['detect'],['detector']
Safety,"s an 8 byte quantity, even if it occupies only 4 bytes in memory.; A data member of a class is marked transient on the line of its declaration by a comment beginning with ""//!"". Such members are not written to disk, nor is there any streamerinfo for such a member.; A data member that is a C++ pointer (not to be confused with ""pointers to persistent; objects"" described below) is never written to disk as a pointer value. If it is a pointer to an object, the object itself (or 0 (4 bytes) if the pointer value is NULL) is written. If the declaration line has a comment beginning with ""//->"", this indicates that the pointer value will never be null, which allows a performance optimization. Another optimization is that if two or more pointers pointing to the same object are streamed in the same I/O operation, the object is written only once. The remaining pointers reference the object through a unique object identifier. This saves space and avoids the infinite loop that might otherwise arise if the directed graph of object instance pointer references contains a cycle.; If a data member is a pointer to a simple type, the Streamer presumes it is an array, with the dimension defined in a comment of the form ""//[<length>]"", where length is either an integer constant or a variable that is an integer data member of the class. If a variable is used, it must be defined ahead of its use or in a base class.; The above describes the function of the StreamerInfo record in decomposing a self-identifying object if the user uses the streamer generated by ""rootcint"". There are two reasons why a user may need to write a specialized streamer for a class. One reason is that it may be necessary to execute some code before or after data is read or written, for example, to initialize some non-persistent data members after the persistent data is read. In this case, the custom streamer can use the StreamerInfo record to decompose a self-identifying object in the exact same manner as the generated s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootio.html:8825,avoid,avoids,8825,doc/master/rootio.html,https://root.cern,https://root.cern/doc/master/rootio.html,1,['avoid'],['avoids']
Safety,"s an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. void CreateMenus(); File/Camera/Help menus. void CreateFrames(); Internal frames creation. void SelectionChanged(); Update GUI components for embedded viewer selection change.; Override from TGLViewer. void Show(); Show the viewer. void Close(); Close the viewer - destructed. void DeleteMenuBar(); Delete the menu bar. void DisableCloseMenuEntries(); Deactivate menu entries for closing the GL window and exiting ROOT. void EnableMenuBarHiding(); Enable hiding of menu bar. void DisableMenuBarHiding(); Disable hiding of menu bar. void HandleMenuBarHiding(Event_t* ev); Maybe switch menu-bar / menu-button. void ResetMenuHidingTimer(Bool_t show_menu); Reset the timer for menu-bar hiding. void MenuHidingTimeout(); Action for menu-hiding timeout. void SetMenuHidingTimeout(Long_t timeout); Set global timeout for menu-hiding in mili-seconds.; Static function. Bool_t ProcessFrameMessage(Long_t msg, Long_t parm1, Long_t ); Process GUI message capture by the main GUI frame (TGLSAFrame). void ToggleEditObject(); Toggle state of the 'Edit Object' menu entry. void ToggleOrthoRotate(); Toggle state of the 'Ortho allow rotate' menu entry. void ToggleOrthoDolly(); Toggle state of the 'Ortho allow dolly' menu entry. TGLSAViewer(const TGLSAViewer& ); non-copyable class. const char* GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetLeftVerticalFrame() const; { return fLeftVerticalFrame; }. TGLFormat* GetFormat() const; { return fFormat; }. » Author: Richard Maunder / Timur Pocheptsov » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLSAViewer.h 36895 2010-11-24 11:46:09Z matevz $ » Last generated: 2010-11-26 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:27160,timeout,timeout,27160,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,2,['timeout'],['timeout']
Safety,"s an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. void CreateMenus(); File/Camera/Help menus. void CreateFrames(); Internal frames creation. void SelectionChanged(); Update GUI components for embedded viewer selection change.; Override from TGLViewer. void Show(); Show the viewer. void Close(); Close the viewer - destructed. void DeleteMenuBar(); Delete the menu bar. void DisableCloseMenuEntries(); Deactivate menu entries for closing the GL window and exiting ROOT. void EnableMenuBarHiding(); Enable hiding of menu bar. void DisableMenuBarHiding(); Disable hiding of menu bar. void HandleMenuBarHiding(Event_t* ev); Maybe switch menu-bar / menu-button. void ResetMenuHidingTimer(Bool_t show_menu); Reset the timer for menu-bar hiding. void MenuHidingTimeout(); Action for menu-hiding timeout. void SetMenuHidingTimeout(Long_t timeout); Set global timeout for menu-hiding in mili-seconds.; Static function. Bool_t ProcessFrameMessage(Long_t msg, Long_t parm1, Long_t ); Process GUI message capture by the main GUI frame (TGLSAFrame). void ToggleEditObject(); Toggle state of the 'Edit Object' menu entry. void ToggleOrthoRotate(); Toggle state of the 'Ortho allow rotate' menu entry. void ToggleOrthoDolly(); Toggle state of the 'Ortho allow dolly' menu entry. TGLSAViewer(const TGLSAViewer& ); non-copyable class. const char* GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetLeftVerticalFrame() const; { return fLeftVerticalFrame; }. TGLFormat* GetFormat() const; { return fFormat; }. » Author: Richard Maunder / Timur Pocheptsov » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLSAViewer.h 36895 2010-11-24 11:46:09Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLSAViewer.html:27280,timeout,timeout,27280,root/html530/TGLSAViewer.html,https://root.cern,https://root.cern/root/html530/TGLSAViewer.html,2,['timeout'],['timeout']
Safety,"s an error if it is already created.; This is needed for frame-swapping on mac. void DestroyGLWidget(); Destroy the GLwidget, it is an error if it does not exist.; This is needed for frame-swapping on mac. void CreateMenus(); File/Camera/Help menus. void CreateFrames(); Internal frames creation. void SelectionChanged(); Update GUI components for embedded viewer selection change.; Override from TGLViewer. void Show(); Show the viewer. void Close(); Close the viewer - destructed. void DeleteMenuBar(); Delete the menu bar. void DisableCloseMenuEntries(); Deactivate menu entries for closing the GL window and exiting ROOT. void EnableMenuBarHiding(); Enable hiding of menu bar. void DisableMenuBarHiding(); Disable hiding of menu bar. void HandleMenuBarHiding(Event_t* ev); Maybe switch menu-bar / menu-button. void ResetMenuHidingTimer(Bool_t show_menu); Reset the timer for menu-bar hiding. void MenuHidingTimeout(); Action for menu-hiding timeout. void SetMenuHidingTimeout(Long_t timeout); Set global timeout for menu-hiding in mili-seconds.; Static function. Bool_t ProcessFrameMessage(Long_t msg, Long_t parm1, Long_t ); Process GUI message capture by the main GUI frame (TGLSAFrame). void ToggleEditObject(); Toggle state of the 'Edit Object' menu entry. void ToggleOrthoRotate(); Toggle state of the 'Ortho allow rotate' menu entry. void ToggleOrthoDolly(); Toggle state of the 'Ortho allow dolly' menu entry. TGLSAViewer(const TGLSAViewer& ); non-copyable class. const char* GetName() const; { return ""GLViewer""; }. TGCompositeFrame* GetLeftVerticalFrame() const; { return fLeftVerticalFrame; }. TGLFormat* GetFormat() const; { return fFormat; }. » Author: Richard Maunder / Timur Pocheptsov » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLSAViewer.h 36895 2010-11-24 11:46:09Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLSAViewer.html:27280,timeout,timeout,27280,root/html532/TGLSAViewer.html,https://root.cern,https://root.cern/root/html532/TGLSAViewer.html,2,['timeout'],['timeout']
Safety,"s and streamer info structures All irrelevant data will be cleaned ; Definition at line 559 of file TXMLFile.cxx. ◆ ReadKeysList(). Int_t TXMLFile::ReadKeysList ; (; TDirectory * ; dir, . XMLNodePointer_t ; topnode . ). protected . Read list of keys for directory. ; Definition at line 630 of file TXMLFile.cxx. ◆ ReadStreamerElement(). void TXMLFile::ReadStreamerElement ; (; XMLNodePointer_t ; node, . TStreamerInfo * ; info . ). protected . read and reconstruct single TStreamerElement from xml node ; Definition at line 825 of file TXMLFile.cxx. ◆ Recover(). Int_t TXMLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:66885,recover,recover,66885,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['recover'],['recover']
Safety,"s at low z; 109 ; 110public:; 111 // constructors; 112 TGeoTrap();; 113 TGeoTrap(Double_t dz, Double_t theta, Double_t phi);; 114 TGeoTrap(Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1,; 115 Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);; 116 TGeoTrap(const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1,; 117 Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);; 118 // destructor; 119 ~TGeoTrap() override;; 120 Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact = 1, Double_t step = TGeoShape::Big(),; 121 Double_t *safe = nullptr) const override;; 122 void DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 123 Double_t *step) const override;; 124 Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact = 1,; 125 Double_t step = TGeoShape::Big(), Double_t *safe = nullptr) const override;; 126 void DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 127 Double_t *step) const override;; 128 TGeoVolume *; 129 Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;; 130 Double_t GetTheta() const { return fTheta; }; 131 Double_t GetPhi() const { return fPhi; }; 132 Double_t GetH1() const { return fH1; }; 133 Double_t GetBl1() const { return fBl1; }; 134 Double_t GetTl1() const { return fTl1; }; 135 Double_t GetAlpha1() const { return fAlpha1; }; 136 Double_t GetH2() const { return fH2; }; 137 Double_t GetBl2() const { return fBl2; }; 138 Double_t GetTl2() const { return fTl2; }; 139 Double_t GetAlpha2() const { return fAlpha2; }; 140 TGeoShape *GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *mat) const override;; 141 void SetDimensions(Double_t *param) override;; 142 Double_t Safety(const Double_t *point, Bool_t in = kTRUE) const override;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoArb8_8h_source.html:6563,safe,safe,6563,doc/master/TGeoArb8_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoArb8_8h_source.html,1,['safe'],['safe']
Safety,"s been; badly parameterized so that individual errors are not very meaningful; because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterization of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; underdeterminedness by reformulating the parameterization. MINUIT cannot; do this itself. Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if; ; the parameters are badly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:10146,recover,recovers,10146,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,4,['recover'],['recovers']
Safety,"s been; badly parameterized so that individual errors are not very meaningful; because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them, or compare the calculated; errors with a picture of the function. Theoretically, the covariance; matrix for a ``physical'' function must be positive-definite at the; minimum, although it may not be so for all points far away from the; minimum, even for a well-determined physical problem. Therefore, if MIGRAD; reports that it has found a non-positive-definite covariance matrix, this; may be a sign of one or more of the following:. A non-physical region:. On its way to the minimum, MIGRAD may have traversed a region which has; unphysical behaviour, which is of course not a serious problem as long as; it recovers and leaves such a region. An underdetermined problem:. If the matrix is not positive-definite even at the minimum, this may mean; that the solution is not well-defined, for example that there are more; unknowns than there are data points, or that the parameterization of the; fit contains a linear dependence. If this is the case, then MINUIT (or any; other program) cannot solve your problem uniquely, and the error matrix; will necessarily be largely meaningless, so the user must remove the; underdeterminedness by reformulating the parameterization. MINUIT cannot; do this itself. Numerical inaccuracies:. It is possible that the apparent lack of positive-definiteness is in fact; only due to excessive roundoff errors in numerical calculations in the; user function or not enough precision. This is unlikely in general, but; becomes more likely if the number of free parameters is very large, or if; the parameters are badly sc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:10147,recover,recovers,10147,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,2,['recover'],['recovers']
Safety,"s box shape belonging to volume ""voldiv"" into ndiv equal volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume. In case a wrong division axis is supplied,; returns pointer to volume to be divided. void ComputeBBox(); Compute bounding box - nothing to do in this case. Bool_t Contains(Double_t* point) const; Test if point is inside this shape. Bool_t Contains(const Double_t* point, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin); Test if point is inside this shape. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the box.; Boundary safe algorithm. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); Compute distance from inside point to surface of the box.; Boundary safe algorithm. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the box.; Boundary safe algorithm. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); Compute distance from outside point to surface of the box.; Boundary safe algorithm. const char * GetAxisName(Int_t iaxis) const; Returns name of axis IAXIS. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Double_t GetFacetArea(Int_t index = 0) const; Get area in internal units of the facet with a given index.; Possible index values:; 0 - all facets togeather; 1 to 6 - f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBBox.html:14976,safe,safe,14976,root/html528/TGeoBBox.html,https://root.cern,https://root.cern/root/html528/TGeoBBox.html,3,['safe'],['safe']
Safety,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the usage of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/modules.html:10754,safe,safety,10754,doc/v614/modules.html,https://root.cern,https://root.cern/doc/v614/modules.html,2,['safe'],['safety']
Safety,"s classes"" usage. ;  GUI tutorialsExample code which illustrates how to use the ROOT GUI ;  Histograms tutorialsExamples showing the ""histograms' classes"" usage. ;  HTTP tutorialsExamples showing the HTTP interface ;  Image tutorialsExamples showing the TImage class usage ;  IO tutorialsThese tutorials illustrate some of the capabilities of the ROOT IO subsystem ;  Math tutorialsExamples showing the Math classes ;  Matrix tutorialsExamples showing how to use TMatrix ;  Monte Carlo tutorialsMonte Carlo examples ;  TMemStat tutorialsExamples showing the TMemStat class ;  Multi Layer Perceptron tutorialsExamples showing the Multi Layer Perceptron classes ;  Multicore tutorialsThese examples aim to illustrate the multicore features of ROOT, such as thread awareness and safety, multithreading and multiprocessing ;  Net tutorialsExamples showing the net classes ;  Physics tutorialsPhysics examples ;  ►Proof tutorialsThese examples aim to illustrate the usage of PROOF ;  ProcFileElementsClass to hold information about the processed elements of a file ;  ProofAuxSelector used for auxiliary actions in the PROOF tutorials ;  ProofEventSelector for generic processing with Event ;  ProofEventProcSelector to process trees containing Event structures ;  ProofFriendsSelector to process tree friends ;  ProofNtupleSelector to fill a simple ntuple ;  ProofPythiaSelector to generate Monte Carlo events with Pythia8 ;  ProofSimpleSelector to fill a set of histograms ;  ProofSimpleFileSelector to fill a set of histograms and merging via file ;  ProofStdVecSelector for generic processing with stdlib collections ;  ProofTestsAuxilliary selector used to test PROOF functionality ;  PyRoot tutorialsExamples showing how to write python script for Root ;  Pythia tutorialsExamples showing the pythia usage ;  Quadratic programming package.Example showing the use of the quadratic programming package quadp ;  R tutorialsExamples showing the R interface ;  RooFit TutorialsThese tutorials illustrate t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/modules.html:10499,safe,safety,10499,doc/v610/modules.html,https://root.cern,https://root.cern/doc/v610/modules.html,2,['safe'],['safety']
Safety,"s distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; int. TPaletteAxis inherits from TBox and TPave. The methods allowing to specify the palette position are inherited from these two classes.; The palette can be interactively moved and resized. The context menu can be used to set the axis attributes.; It is possible to select a range on the axis to set the min/max in z; As default labels and ticks are drawn by TGAxis at equidistant (lin or log) points as controlled by SetNdivisions. If option ""CJUST"" is given labels and ticks are justified at the color boundaries defined by the contour levels. In this case no optimization can be done. It is responsibility of the user to adjust minimum, maximum of the histogram and/or the contour levels to get a reasonable look of the plot. Only overlap of the labels is avoided if too many contour levels are used.; This option is especially useful with user defined contours. An example is shown here:; {; gStyle->SetOptStat(0);; auto c = new TCanvas(""c"",""exa_CJUST"",300,10,400,400);; auto hpxpy = new TH2F(""hpxpy"",""py vs px"",40,-4,4,40,-4,4);; // Fill histograms randomly; TRandom3 randomNum;; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; randomNum.Rannor(px,py);; hpxpy->Fill(px,py);; }; hpxpy->SetMaximum(200);; Double_t zcontours[5] = {0, 20, 40, 80, 120};; hpxpy->SetContour(5, zcontours);; hpxpy->GetZaxis()->SetTickSize(0.01);; hpxpy->GetZaxis()->SetLabelOffset(0.01);; gPad->SetRightMargin(0.13);; hpxpy->SetTitle(""User contours, CJUST"");; hpxpy->Draw(""COL Z CJUST"");; }; c#define c(i)Definition RSha256.hxx:101; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteAxis.html:2840,avoid,avoided,2840,doc/master/classTPaletteAxis.html,https://root.cern,https://root.cern/doc/master/classTPaletteAxis.html,1,['avoid'],['avoided']
Safety,"s fills only used elements depending on dimension and type; 404 GetStats(s1);; 405 h1->GetStats(s2);; 406 }; 407 // get number of entries now because afterwards UpdateBinContent will change it; 408 Double_t entries = TMath::Abs( GetEntries() + c1 * h1->GetEntries() );; 409 ; 410 ; 411 // Perform the Add.; 412 Double_t factor = 1;; 413 if (h1p->GetNormFactor() != 0); 414 factor = h1p->GetNormFactor() / h1p->GetSumOfWeights();; 415 for (bin = 0; bin < fNcells; bin++) {; 416 Double_t y = this->RetrieveBinContent(bin) + c1 * h1p->RetrieveBinContent(bin);; 417 UpdateBinContent(bin, y);; 418 if (fSumw2.fN) {; 419 Double_t esq = factor * factor * h1p->GetBinErrorSqUnchecked(bin);; 420 fSumw2.fArray[bin] += c1 * c1 * factor * factor * esq;; 421 }; 422 }; 423 ; 424 // update statistics (do here to avoid changes by SetBinContent); 425 if (resetStats) {; 426 // statistics need to be reset in case coefficient are negative; 427 ResetStats();; 428 } else {; 429 for (Int_t i = 0; i < kNstat; i++) {; 430 if (i == 1) s1[i] += c1 * c1 * s2[i];; 431 else s1[i] += c1 * s2[i];; 432 }; 433 PutStats(s1);; 434 SetEntries(entries);; 435 }; 436 return kTRUE;; 437}; 438 ; 439////////////////////////////////////////////////////////////////////////////////; 440/// Adds the input bin into the partition cell matrix. This method is called; 441/// in AddBin() and ChangePartition().; 442 ; 443void TH2Poly::AddBinToPartition(TH2PolyBin *bin); 444{; 445 // Cell Info; 446 Int_t nl, nr, mb, mt; // Max/min indices of the cells that contain the bin; 447 Double_t xclipl, xclipr, yclipb, yclipt; // x and y coordinates of a cell; 448 Double_t binXmax, binXmin, binYmax, binYmin; // The max/min bin coordinates; 449 ; 450 binXmax = bin->GetXMax();; 451 binXmin = bin->GetXMin();; 452 binYmax = bin->GetYMax();; 453 binYmin = bin->GetYMin();; 454 nl = (Int_t)(floor((binXmin - fXaxis.GetXmin())/fStepX));; 455 nr = (Int_t)(floor((binXmax - fXaxis.GetXmin())/fStepX));; 456 mb = (Int_t)(floor((binYmin - fYaxis.GetXmin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:16317,avoid,avoid,16317,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['avoid'],['avoid']
Safety,"s in the efficiency and background estimate. The signal is always assumed to be Poisson; background may be Poisson, Gaussian, or user-supplied; efficiency may be Binomial, Gaussian, or user-supplied. See publication at Nucl. Instrum. Meth. A551:493-503,2005.; TLimit class computes 95% C.L. limits using the Likelihood ratio semi-Bayesian method ( method; see e.g. T. Junk, NIM A434, p. 435-443, 1999). It takes signal background and data histograms wrapped in a TLimitDataSource as input, and runs a set of Monte Carlo experiments in order to compute the limits. If needed, inputs are fluctuated according to systematic.; 13.14.2 Specialized Classes for Fitting; TFractionFitter fits Monte Carlo (MC) fractions to data histogram (a la HMCMLL, R. Barlow and C. Beeston, Comp. Phys. Comm. 77 (1993) 219-228). It takes into account both data and Monte Carlo statistical uncertainties through a likelihood fit using Poisson statistics. However, the template (MC) predictions are also varied within statistics, leading to additional contributions to the overall likelihood. This leads to many more fit parameters (one per bin per template), but the minimization with respect to these additional parameters is done analytically rather than introducing them as formal fit parameters. Some special care needs to be taken in the case of bins with zero content.; TMultiDimFit implements multi-dimensional function parametrization for multi-dimensional data by fitting them to multi-dimensional data using polynomial or Chebyshev or Legendre polynomial; TSpectrum contains advanced spectra processing functions for 1- and 2-dimensional background estimation, smoothing, deconvolution, peak search and fitting, and orthogonal transformations.; RooFit is a complete toolkit for fitting and data analysis modeling (see the RooFit User Guide at ftp://root.cern.ch/root/doc/RooFit_Users_Manual_2.07-29.pdf); TSplot to disentangle signal from background via an extended maximum likelihood fit and with a tool to acces",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:766388,predict,predictions,766388,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['predict'],['predictions']
Safety,"s not supported for security reasons */; 10518 ; 10519 /* PATCH method (RFC 5789) */; 10520 {""PATCH"", 1, 0, 0, 0, 0},; 10521 /* PATCH method only allowed for CGI/Lua/LSP and callbacks. */; 10522 ; 10523 /* WEBDAV (RFC 2518) */; 10524 {""PROPFIND"", 0, 1, 1, 1, 0},; 10525 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10526 * Some PROPFIND results MAY be cached, with care,; 10527 * as there is no cache validation mechanism for; 10528 * most properties. This method is both safe and; 10529 * idempotent (see Section 9.1 of [RFC2616]). */; 10530 {""MKCOL"", 0, 0, 0, 1, 0},; 10531 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10532 * When MKCOL is invoked without a request body,; 10533 * the newly created collection SHOULD have no; 10534 * members. A MKCOL request message may contain; 10535 * a message body. The precise behavior of a MKCOL; 10536 * request when the body is present is undefined,; 10537 * ... ==> We do not support MKCOL with body data.; 10538 * This method is idempotent, but not safe (see; 10539 * Section 9.1 of [RFC2616]). Responses to this; 10540 * method MUST NOT be cached. */; 10541 ; 10542 /* Methods for write access to files on WEBDAV (RFC 2518) */; 10543 {""LOCK"", 1, 1, 0, 0, 0},; 10544 {""UNLOCK"", 1, 0, 0, 0, 0},; 10545 {""PROPPATCH"", 1, 1, 0, 0, 0},; 10546 ; 10547 /* Unsupported WEBDAV Methods: */; 10548 /* COPY, MOVE (RFC 2518) */; 10549 /* + 11 methods from RFC 3253 */; 10550 /* ORDERPATCH (RFC 3648) */; 10551 /* ACL (RFC 3744) */; 10552 /* SEARCH (RFC 5323) */; 10553 /* + MicroSoft extensions; 10554 * https://msdn.microsoft.com/en-us/library/aa142917.aspx */; 10555 ; 10556 /* REPORT method (RFC 3253) */; 10557 {""REPORT"", 1, 1, 1, 1, 1},; 10558 /* REPORT method only allowed for CGI/Lua/LSP and callbacks. */; 10559 /* It was defined for WEBDAV in RFC 3253, Sec. 3.6; 10560 * (https://tools.ietf.org/html/rfc3253#section-3.6), but seems; 10561 * to be useful for REST in case a ""GET request with body"" is; 10562 * required. */; 10563 ; 10564 {NULL, 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:302888,safe,safe,302888,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['safe'],['safe']
Safety,"s not supported for security reasons */; 10519 ; 10520 /* PATCH method (RFC 5789) */; 10521 {""PATCH"", 1, 0, 0, 0, 0},; 10522 /* PATCH method only allowed for CGI/Lua/LSP and callbacks. */; 10523 ; 10524 /* WEBDAV (RFC 2518) */; 10525 {""PROPFIND"", 0, 1, 1, 1, 0},; 10526 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10527 * Some PROPFIND results MAY be cached, with care,; 10528 * as there is no cache validation mechanism for; 10529 * most properties. This method is both safe and; 10530 * idempotent (see Section 9.1 of [RFC2616]). */; 10531 {""MKCOL"", 0, 0, 0, 1, 0},; 10532 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10533 * When MKCOL is invoked without a request body,; 10534 * the newly created collection SHOULD have no; 10535 * members. A MKCOL request message may contain; 10536 * a message body. The precise behavior of a MKCOL; 10537 * request when the body is present is undefined,; 10538 * ... ==> We do not support MKCOL with body data.; 10539 * This method is idempotent, but not safe (see; 10540 * Section 9.1 of [RFC2616]). Responses to this; 10541 * method MUST NOT be cached. */; 10542 ; 10543 /* Methods for write access to files on WEBDAV (RFC 2518) */; 10544 {""LOCK"", 1, 1, 0, 0, 0},; 10545 {""UNLOCK"", 1, 0, 0, 0, 0},; 10546 {""PROPPATCH"", 1, 1, 0, 0, 0},; 10547 ; 10548 /* Unsupported WEBDAV Methods: */; 10549 /* COPY, MOVE (RFC 2518) */; 10550 /* + 11 methods from RFC 3253 */; 10551 /* ORDERPATCH (RFC 3648) */; 10552 /* ACL (RFC 3744) */; 10553 /* SEARCH (RFC 5323) */; 10554 /* + MicroSoft extensions; 10555 * https://msdn.microsoft.com/en-us/library/aa142917.aspx */; 10556 ; 10557 /* REPORT method (RFC 3253) */; 10558 {""REPORT"", 1, 1, 1, 1, 1},; 10559 /* REPORT method only allowed for CGI/Lua/LSP and callbacks. */; 10560 /* It was defined for WEBDAV in RFC 3253, Sec. 3.6; 10561 * (https://tools.ietf.org/html/rfc3253#section-3.6), but seems; 10562 * to be useful for REST in case a ""GET request with body"" is; 10563 * required. */; 10564 ; 10565 {NULL, 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:302921,safe,safe,302921,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['safe'],['safe']
Safety,"s null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at line 1798 of file TProof.cxx. ◆ CloseProgressDialog(). void TProof::CloseProgressDialog ; (; ). Close progress dialog. ; Definition at line 9283 of file TProof.cxx. ◆ Collect() [1/4]. Int_t TProof::Collect ; (; const TSlave * ; sl, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from slave sl. ; Returns the number of slaves that responded (=1). If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2669 of file TProof.cxx. ◆ Collect() [2/4]. Int_t TProof::Collect ; (; ESlaves ; list = kActive, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). protected . Collect responses from the slave servers. ; Returns the number of slaves that responded. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2727 of file TProof.cxx. ◆ Collect() [3/4]. Int_t TProof::Collect ; (; TList * ; slaves, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:76989,timeout,timeout,76989,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['timeout'],['timeout']
Safety,"s objects within that frame.Definition RooPlot.h:45; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooWorkspacePersistable container for RooFit projects.Definition RooWorkspace.h:43; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf510_wsnamedsetsDefinition rf510_wsnamedsets.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::model; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooChebychev::bkg; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::x; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a0; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::a1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::bkgfrac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::sig; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:Objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:8712,safe,safe,8712,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,1,['safe'],['safe']
Safety,"s of the freed record on the file are overwritten by GAPSIZE; where GAPSIZE = -(Number of bytes occupied by the record). Option compress is used to specify the compression level:; compress = 0 objects written to this file will not be compressed.; compress = 1 minimal compression level but fast. compress = 9 maximal compression level but slow. Note that the compression level may be changed at any time.; The new compression level will only apply to newly written objects.; The function TFile::Map() shows the compression factor; for each object written to this file.; The function TFile::GetCompressionFactor returns the global; compression factor for this file. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; cout << ""Error opening file"" << endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile::Recover 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:26095,detect,detected,26095,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,2,"['Recover', 'detect']","['Recovery', 'detected']"
Safety,"s or step sizes. ; Definition at line 319 of file TFractionFitter.cxx. ◆ GetMCPrediction(). TH1 * TFractionFitter::GetMCPrediction ; (; Int_t ; parm); const. Return the adjusted MC template (Aji) for template (parm). ; Note that the (Aji) times fractions only sum to the total prediction of the fit if all weights are 1. Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if the class is deleted ; Definition at line 961 of file TFractionFitter.cxx. ◆ GetNDF(). Int_t TFractionFitter::GetNDF ; (; ); const. return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ; The number of degrees of freedom corresponds to the number of points used in the fit minus the number of templates. ; Definition at line 894 of file TFractionFitter.cxx. ◆ GetPlot(). TH1 * TFractionFitter::GetPlot ; (; ). Return the ""template prediction"" corresponding to the fit result (this is not the same as the weighted sum of template distributions, as template statistical uncertainties are taken into account). ; Note that the name of this histogram will simply be the same as that of the ""data"" histogram, prefixed with the string ""Fraction fit to hist: "". Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if the class is deleted ; Definition at line 621 of file TFractionFitter.cxx. ◆ GetProb(). Double_t TFractionFitter::GetProb ; (; ); const. return the fit probability ; Definition at line 903 of file TFractionFitter.cxx. ◆ GetRanges(). void TFractionFitter::GetRanges ; (; Int_t & ; minX, . Int_t & ; maxX, . Int_t & ; minY, . Int_t & ; maxY, . Int_t & ; minZ, . Int_t & ; maxZ . ); const. private . Used internally to obtain the bin ranges according to the dimensionality of the histogram and the limits set by hand. ; Definition at line 639 of file TFractionFitter.cxx. ◆ GetResult(). void TFractionFitter::GetResult ; (; Int_t ; parm, . Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:27885,predict,prediction,27885,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['predict'],['prediction']
Safety,"s part of ROOT, the GenVector package adheres to the prescribed ROOT naming convention, with some (approved) exceptions, as described here:. Every class and function is in the ROOT::Math namespace.; Member function names start with upper-case letter, apart some exceptions (see the next section about CLHEP compatibility). 13.12.1.8 Compatibility with CLHEP Vector Classes. For backward compatibility with CLHEP the vector classes can be constructed from a CLHEP HepVector or HepLorentzVector, by using a template constructor, which requires only that the classes implement the accessorsx(), y(), and z() (and t() for the 4D).; We provide vector member function with the same naming convention as CLHEP for the most used functions like x(), y() and z(). 13.12.1.9 Connection to Linear Algebra Package; In some use cases, like in track reconstruction, it is needed to use the content of the vector and rotation classes in conjunction with linear algebra operations. We prefer to avoid any direct dependency to any linear algebra package. However, we provide some hooks to convert to and from linear algebra classes. The vector and the transformation classes have methods which allow to get and set their data members (like SetCoordinates and GetCoordinates) passing either a generic iterator or a pointer to a contiguous set of data, like a C array. This allows an easy connection with the linear algebra package, which in turn, allows creation of matrices using C arrays (like the ROOT TMatrix classes) or iterators (SMatrix classes). Multiplication between linear algebra matrices and GenVector vectors is possible by using the template free functions ROOT::Math::VectorUtil::Mult. This function works for any linear algebra matrix, which implements the operator (i,j) and with first matrix element at i=j=0.; 13.12.2 Example: 3D Vector Classes; To avoid exposing template parameter to the users, typedef’s are defined for all types of vectors based on double’s and float’s. To use them, one must in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:726938,avoid,avoid,726938,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoid']
Safety,"s shown.; 3358 ; 3359Double_t TFormula::DoEval(const double * x, const double * params) const; 3360{; 3361 if(!fReadyToExecute); 3362 {; 3363 Error(""Eval"", ""Formula is invalid and not ready to execute "");; 3364 for (auto it = fFuncs.begin(); it != fFuncs.end(); ++it) {; 3365 TFormulaFunction fun = *it;; 3366 if (!fun.fFound) {; 3367 printf(""%s is unknown.\n"", fun.GetName());; 3368 }; 3369 }; 3370 return TMath::QuietNaN();; 3371 }; 3372 ; 3373 // Lazy initialization is set and needed when reading from a file; 3374 if (!fClingInitialized && fLazyInitialization) {; 3375 // try recompiling the formula. We need to lock because this is not anymore thread safe; 3376 R__LOCKGUARD(gROOTMutex);; 3377 // check again in case another thread has initialized the formula (see ROOT-10994); 3378 if (!fClingInitialized) {; 3379 auto thisFormula = const_cast<TFormula*>(this);; 3380 thisFormula->ReInitializeEvalMethod();; 3381 }; 3382 if (!fClingInitialized) {; 3383 Error(""DoEval"", ""Formula has error and it is not properly initialized "");; 3384 return TMath::QuietNaN();; 3385 }; 3386 }; 3387 ; 3388 if (fLambdaPtr && TestBit(TFormula::kLambda)) {// case of lambda functions; 3389 std::function<double(double *, double *)> & fptr = * ( (std::function<double(double *, double *)> *) fLambdaPtr);; 3390 assert(x);; 3391 //double * v = (x) ? const_cast<double*>(x) : const_cast<double*>(fClingVariables.data());; 3392 double * v = const_cast<double*>(x);; 3393 double * p = (params) ? const_cast<double*>(params) : const_cast<double*>(fClingParameters.data());; 3394 return fptr(v, p);; 3395 }; 3396 ; 3397 ; 3398 Double_t result = 0;; 3399 void* args[2];; 3400 double * vars = (x) ? const_cast<double*>(x) : const_cast<double*>(fClingVariables.data());; 3401 args[0] = &vars;; 3402 if (fNpar <= 0) {; 3403 (*fFuncPtr)(nullptr, 1, args, &result);; 3404 } else {; 3405 double *pars = (params) ? const_cast<double *>(params) : const_cast<double *>(fClingParameters.data());; 3406 args[1] = &pars;; 3407 (*fFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:128356,safe,safe,128356,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['safe'],['safe']
Safety,"s sig, Bool_t ignore = kTRUE); If ignore is true ignore the specified signal, else restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if children have finished. Bool_t CheckDescriptors(); Check if there is activity on some file descriptors and ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnixSystem.html:22997,timeout,timeout,22997,root/html602/TUnixSystem.html,https://root.cern,https://root.cern/root/html602/TUnixSystem.html,2,['timeout'],['timeout']
Safety,"s sig, Bool_t ignore = kTRUE); If ignore is true ignore the specified signal, else restore previous; behaviour. void SigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). Int_t GetFPEMask(); Return the bitmap of conditions that trigger a floating point exception. Int_t SetFPEMask(Int_t mask = kDefaultMask); Set which conditions trigger a floating point exception.; Return the previous set of conditions. void DispatchOneEvent(Bool_t pendingOnly = kFALSE); Dispatch a single event. void Sleep(UInt_t milliSec); Sleep milliSec milliseconds. Int_t Select(TList* active, Long_t timeout); Select on file descriptors. The timeout to is in millisec. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the method can be called again. Returns; -4 in case the list did not contain any file handlers or file handlers; with file descriptor >= 0. Int_t Select(TFileHandler* fh, Long_t timeout); Select on the file descriptor related to file handler h.; The timeout to is in millisec. Returns the number of ready descriptors,; or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; and -3 EBADF. In case of EINTR the errno has been reset and the method; can be called again. Returns -4 in case the file handler is 0 or does; not have a file descriptor >= 0. void DispatchSignals(ESignals sig); Handle and dispatch signals. Bool_t CheckSignals(Bool_t sync); Check if some signals were raised and call their Notify() member. void CheckChilds(); Check if childs have finished. Bool_t CheckDescriptor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:22275,timeout,timeout,22275,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,3,['timeout'],['timeout']
Safety,"s some information about the network in the terminal. void GatherInformations(); Collect information about what is usefull in the network.; This method has to be called first when analyzing a network.; Fills the two analysis trees. void DrawDInput(Int_t i); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; the ith input. void DrawDInputs(); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; each input.; DrawDInputs() draws something that approximates the distribution of the; derivative of the NN w.r.t. each input. That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const char* bg); Draws the distribution of the neural network (using ith neuron).; Two distributions are drawn, for events passing respectively the ""signal""; and ""background"" cuts. Only the test sample is used. TProfile* DrawTruthDeviation(Int_t outnode = 0, Option_t* option = """"); Create a profile of the difference of the MLP output minus the; true value for a given output node outnode, vs the true value for; outnode, for all test data events. This method is mainly useful; when doing regression analysis with the MLP (i.e. not classification,; but continuous truth values).; The resulting TProfile histogram is returned.; It is not drawn if option ""goff"" is specified.; Options are passed to TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMLPAnalyzer.html:7646,risk,risk,7646,root/html534/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html534/TMLPAnalyzer.html,3,['risk'],['risk']
Safety,"s stage. const char * GetPointerName() const; Provide a pointer name containing uid. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute mouse actions on this shape. void Draw(Option_t* option = """"); Draw this shape. void Paint(Option_t* option = """"); Paint this shape. void ClearThreadData() const; {}. void CreateThreadData(Int_t ); {}. void SetOnBoundary(Bool_t ); {;}. Double_t Big(); methods. {return 1.E30;}. Double_t Tolerance(); {return 1.E-10;}. void AfterStreamer(); {}. Double_t Capacity() const. void ComputeBBox(). void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm). void ComputeNormal_v(const Double_t* , const Double_t* , Double_t* , Int_t ); {}. Bool_t Contains(const Double_t* point) const. void Contains_v(const Double_t* , Bool_t* , Int_t ) const; {}. Bool_t CouldBeCrossed(const Double_t* point, const Double_t* dir) const. Int_t DistancetoPrimitive(Int_t px, Int_t py). Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; {}. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; {}. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step). const char * GetAxisName(Int_t iaxis) const. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const. void GetBoundingCylinder(Double_t* param) const. Int_t GetByteCount() const. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const. Int_t GetId() const; {return fShapeId;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const. void GetMeshNumbers(Int_t& , Int_t& , Int_t& ) const; {;}. Int_t GetNmeshVertices() const; {return 0;}. Bool_t IsAssembly() const; {return kFALSE;}. Bool_t IsComposite()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:21179,safe,safe,21179,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,1,['safe'],['safe']
Safety,"s stored in TFiles: for example, these files might not be writeable, just readable. In addition, modifying in place a TTree causes a new TTree instance to be written and the previous one to be deleted. For this reasons, ROOT offers the concept of friends for TTree and TChain: if is good practice to rely on friend trees rather than adding a branch manually. An Example. // A simple example with histograms and a tree; //; // This program creates :; // - a one dimensional histogram; // - a two dimensional histogram; // - a profile histogram; // - a tree; //; // These objects are filled with some random numbers and saved on a file.; ; #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h""; ; //__________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");; ; // Create some histograms and a profile histogram; TH1F hpx(""hpx"",""This is the px distribution"",100,-4,4);; TH2F hpxpy(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile hprof(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);; ; // Define some simple structures; typedef struct {Float_t x,y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; POINT point;; EVENTN eventn;; ; // Create a ROOT Tree; TTree tree(""T"",""An example of ROOT tree with a few branches"");; tree.Branch(""point"",&point,""x:y:z"");; tree.Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree.Branch(""hpx"",""TH1F"",&hpx,128000,0);; ; Float_t px,py,pz;; ; // Here we start a loop on 1000 events; for ( Int_t i=0; i<1000; i++) {; gRandom->Rannor(px,py)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:12210,detect,detector,12210,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['detect'],['detector']
Safety,"s the execution of the calling thread. Int_t Sleep(ULong_t secs, ULong_t nanos = 0); Static method to sleep the calling thread. Int_t GetTime(ULong_t* absSec, ULong_t* absNanoSec); Static method to get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread.; k should be between 0 and kMaxUserThreadSlot for user application.; (and between kMaxUserThreadSlot and kMaxThreadSlot for ROOT libraries).; See ROOT::EThreadSlotReservation. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TThread.html:14261,safe,safe,14261,root/html532/TThread.html,https://root.cern,https://root.cern/root/html532/TThread.html,2,['safe'],['safe']
Safety,"s the execution of the calling thread. Int_t Sleep(ULong_t secs, ULong_t nanos = 0); Static method to sleep the calling thread. Int_t GetTime(ULong_t* absSec, ULong_t* absNanoSec); Static method to get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread.; k should be between 0 and kMaxUserThreadSlot for user application.; (and between kMaxUserThreadSlot and kMaxThreadSlot for ROOT libraries).; See ROOT::EThreadSlotReservation. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread(const TThread& ). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TThread.html:15138,safe,safe,15138,root/html602/TThread.html,https://root.cern,https://root.cern/root/html602/TThread.html,2,['safe'],['safe']
Safety,"s the point on the element that is clicked to move (i) or resize (all others). The expected values are: . Implements TVirtualPad.; Definition at line 6350 of file TPad.cxx. ◆ StartEditing(). virtual void TPad::StartEditing ; (; ). inlinevirtual . Definition at line 417 of file TPad.h. ◆ Streamer(). void TPad::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TSlider.; Definition at line 6713 of file TPad.cxx. ◆ StreamerNVirtual(). void TPad::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 419 of file TPad.h. ◆ Update(). void TPad::Update ; (; ). overridevirtual . Update pad. ; Implements TVirtualPad.; Definition at line 2935 of file TPad.cxx. ◆ UpdateAsync(). void TPad::UpdateAsync ; (; ). overridevirtual . Asynchronous pad update. ; In case of web-based canvas triggers update of the canvas on the client side, but does not wait that real update is completed. Avoids blocking of caller thread. Have to be used if called from other web-based widget to avoid logical dead-locks. In case of normal canvas just canvas->Update() is performed. ; Implements TVirtualPad.; Definition at line 2947 of file TPad.cxx. ◆ UseCurrentStyle(). void TPad::UseCurrentStyle ; (; ). overridevirtual . Force a copy of current style for all objects in pad. ; Reimplemented from TObject.; Definition at line 6927 of file TPad.cxx. ◆ UtoAbsPixel(). Int_t TPad::UtoAbsPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7459 of file TPad.cxx. ◆ UtoPixel(). Int_t TPad::UtoPixel ; (; Double_t ; u); const. overridevirtual . Convert X NDC to pixel. ; Implements TVirtualPad.; Definition at line 7433 of file TPad.cxx. ◆ VtoAbsPixel(). Int_t TPad::VtoAbsPixel ; (; Double_t ; v); const. overridevirtual . Convert Y NDC to absolute pixel. ; Implements TVirtualPad.; Definition at line 7467 of file TPad.cxx. ◆ VtoPixel(). Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:127502,Avoid,Avoids,127502,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Avoid'],['Avoids']
Safety,"s the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::make_unique<RooRealVar>(""var2"", ""var2"", 3.0));; RooAddition addition{""addition"", ""addition"", sumSet};; addition.addOwnedComponents(std::move(sumSet));. Deprecation of legacy iterators; The following methods related to the RooFit legacy iterators are deprecated and will be removed in ROOT 6.34. They s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:11408,avoid,avoid,11408,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['avoid'],['avoid']
Safety,"s the window size in pixels along X; 476/// \param[in] wh is the window size in pixels along Y; 477 ; 478void TCanvas::Constructor(const char *name, const char *title, Int_t wtopx,; 479 Int_t wtopy, Int_t ww, Int_t wh); 480{; 481 if (gThreadXAR) {; 482 void *arr[8];; 483 arr[1] = this; arr[2] = (void*)name; arr[3] = (void*)title;; 484 arr[4] = &wtopx; arr[5] = &wtopy; arr[6] = &ww; arr[7] = &wh;; 485 if ((*gThreadXAR)(""CANV"", 8, arr, nullptr)) return;; 486 }; 487 ; 488 Init();; 489 SetBit(kMenuBar,true);; 490 if (wtopx < 0) {; 491 wtopx = -wtopx;; 492 SetBit(kMenuBar,false);; 493 }; 494 fCw = ww;; 495 fCh = wh;; 496 fCanvasID = -1;; 497 TCanvas *old = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(name);; 498 if (old && old->IsOnHeap()) {; 499 Warning(""Constructor"",""Deleting canvas with same name: %s"",name);; 500 delete old;; 501 }; 502 if (gROOT->IsBatch()) { //We are in Batch mode; 503 fWindowTopX = fWindowTopY = 0;; 504 fWindowWidth = ww;; 505 fWindowHeight = wh;; 506 fCw = ww;; 507 fCh = wh;; 508 fCanvasImp = gBatchGuiFactory->CreateCanvasImp(this, name, fCw, fCh);; 509 if (!fCanvasImp) return;; 510 fBatch = kTRUE;; 511 } else { //normal mode with a screen window; 512 Float_t cx = gStyle->GetScreenFactor();; 513 auto factory = gROOT->IsWebDisplay() ? gBatchGuiFactory : gGuiFactory;; 514 fCanvasImp = factory->CreateCanvasImp(this, name, Int_t(cx*wtopx), Int_t(cx*wtopy), UInt_t(cx*ww), UInt_t(cx*wh));; 515 if (!fCanvasImp) return;; 516 ; 517 if (!gROOT->IsBatch() && fCanvasID == -1); 518 fCanvasID = fCanvasImp->InitWindow();; 519 ; 520 fCanvasImp->ShowMenuBar(TestBit(kMenuBar));; 521 fBatch = kFALSE;; 522 }; 523 ; 524 CreatePainter();; 525 ; 526 fName = GetNewCanvasName(name); // avoid Modified() signal from SetName; 527 SetTitle(title); // requires fCanvasImp set; 528 Build();; 529 ; 530 // Popup canvas; 531 fCanvasImp->Show();; 532}; 533 ; 534////////////////////////////////////////////////////////////////////////////////; 535/// Initialize the TCanvas members.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:16752,avoid,avoid,16752,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['avoid'],['avoid']
Safety,"s the wrapped object and allow to call its methods. ; Definition at line 286 of file TThreadedObject.hxx. ◆ SetAtSlot(). template<class T > . void ROOT::TThreadedObject< T >::SetAtSlot ; (; unsigned ; i, . std::shared_ptr< T > ; v . ). inline . Set the value of a particular slot. ; This method is thread-safe as long as concurrent calls access different slots (i.e. pass a different argument) and no thread accesses slot i via the arrow operator, so mixing usage of SetAtSlot with usage of the arrow operator can be dangerous. ; Definition at line 227 of file TThreadedObject.hxx. ◆ SnapshotMerge(). template<class T > . std::unique_ptr< T > ROOT::TThreadedObject< T >::SnapshotMerge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called many times. It does create a new instance of class T to represent the ""Sum"" object. This method is not thread safe: correct or acceptable behaviours depend on the nature of T and of the merging function. ; Definition at line 312 of file TThreadedObject.hxx. Member Data Documentation. ◆ fDirectories. template<class T > . std::deque<TDirectory*> ROOT::TThreadedObject< T >::fDirectories. private . A TDirectory per slot. ; Definition at line 332 of file TThreadedObject.hxx. ◆ fgMaxSlots. template<class T > . constexpr const TNumSlots ROOT::TThreadedObject< T >::fgMaxSlots {64}. staticconstexpr . The initial number of empty processing slots that a TThreadedObject is constructed with by default. ; Deprecated: TThreadedObject grows as more slots are required. ; Definition at line 155 of file TThreadedObject.hxx. ◆ fIsMerged. template<class T > . bool ROOT::TThreadedObject< T >::fIsMerged. private . Remember if the objects have been merged already. ; Definition at line 335 of file TThreadedObject.hxx. ◆ fModel. template<class T > . std::unique_ptr<T> ROOT::TThreadedObject< T >::fModel. private . Use to store a ""model"" of the object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:9270,safe,safe,9270,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,2,['safe'],['safe']
Safety,"s to be distributed;; TVirtualPacketizer::EUseEstOptTVirtualPacketizer::fUseEstOptControl usage of estimated values for the progress info; Bool_tTVirtualPacketizer::fValidConstructed properly?. private:. TMap*fAssignedPackMap {worker,packetizer} of lat assignement; TVirtualPacketizer*fCurrentPacketizer being currently processed; TList*fPacketizersPacketizers to be processed; TIter*fPacketizersIterIterator on fPacketizers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerMulti(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerMulti(); Destructor. TDSetElement * GetNextPacket(TSlave* wrk, TMessage* r); Get next packet from the current packetizer.; If the current packetizer is done, move to next.; Retun null when all packetizers are done. TVirtualPacketizer * CreatePacketizer(TDSet* dset, TList* wrks, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Create a packetizer for dataset 'dset'; Return null on failure. TPacketizerMulti(). TPacketizerMulti(const TPacketizerMulti& ). void operator=(const TPacketizerMulti& ). Int_t GetEstEntriesProcessed(Float_t f, Long64_t& ent, Long64_t& bytes, Long64_t& calls). Float_t GetCurrentRate(Bool_t& all). void StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE). void MarkBad(TSlave* wrk, TProofProgressStatus* st, TList** missing); { if (fCurrent) fCurrent->MarkBad(wrk, st, missing); return; }. Int_t AddProcessed(TSlave* wrk, TProofProgressStatus* st, Double_t lat, TList** missing). Int_t GetActiveWorkers(); { if (fCurrent) return fCurrent->GetActiveWorkers(); return 0; }. » Author: G. Ganis Jan 2010 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Mon Jul 4 15:35:36 2011 » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPacketizerMulti.html:10532,abort,abort,10532,root/html530/TPacketizerMulti.html,https://root.cern,https://root.cern/root/html530/TPacketizerMulti.html,1,['abort'],['abort']
Safety,"s to be distributed;; TVirtualPacketizer::EUseEstOptTVirtualPacketizer::fUseEstOptControl usage of estimated values for the progress info; Bool_tTVirtualPacketizer::fValidConstructed properly?. private:. TMap*fAssignedPackMap {worker,packetizer} of lat assignement; TVirtualPacketizer*fCurrentPacketizer being currently processed; TList*fPacketizersPacketizers to be processed; TIter*fPacketizersIterIterator on fPacketizers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerMulti(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerMulti(); Destructor. TDSetElement * GetNextPacket(TSlave* wrk, TMessage* r); Get next packet from the current packetizer.; If the current packetizer is done, move to next.; Retun null when all packetizers are done. TVirtualPacketizer * CreatePacketizer(TDSet* dset, TList* wrks, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Create a packetizer for dataset 'dset'; Return null on failure. TPacketizerMulti(). TPacketizerMulti(const TPacketizerMulti& ). void operator=(const TPacketizerMulti& ). Int_t GetEstEntriesProcessed(Float_t f, Long64_t& ent, Long64_t& bytes, Long64_t& calls). Float_t GetCurrentRate(Bool_t& all). void StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE). void MarkBad(TSlave* wrk, TProofProgressStatus* st, TList** missing); { if (fCurrent) fCurrent->MarkBad(wrk, st, missing); return; }. Int_t AddProcessed(TSlave* wrk, TProofProgressStatus* st, Double_t lat, TList** missing). Int_t GetActiveWorkers(); { if (fCurrent) return fCurrent->GetActiveWorkers(); return 0; }. » Author: G. Ganis Jan 2010 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Thu Nov 3 20:20:59 2011 » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPacketizerMulti.html:10532,abort,abort,10532,root/html532/TPacketizerMulti.html,https://root.cern,https://root.cern/root/html532/TPacketizerMulti.html,1,['abort'],['abort']
Safety,"s to send to each processor. The TTree::Process method is used to specify the selector and the entries. Before we can use TTree::Process we need to make a selector. We can call the TTree::MakeSelector method. It creates two files similar to TTree::MakeClass.; In the resulting files is a class that is a descendent of TSelector and implements the following methods:. TSelector::Begin() - this method is called every time a loop over the tree starts. This is a convenient place to create your histograms.; TSelector::Notify() - it is called at the first entry of a new tree in a chain.; TSelector::Process() - it is called to process an event. It is the user’s responsibility to read the corresponding entry in memory (may be just a partial read). Once the entry is in memory one can apply a selection and if the event is selected histograms can be filled. Processing stops when this function returns kFALSE. It combines the methods TSelector::ProcessCut() and TSelector::ProcessFill() in one, avoiding the necessity to maintain the state in the class to communicate between these two functions. It reduces the information that needs to be shared between them and promotes a more granular data access by reading branches as they are needed.; TSelector::Terminate() - it is called at the end of a loop on a TTree. This is a convenient place to draw and fit your histograms.; TSelector::Version() - this function provides backward compatibility for old versions and support for the future upgrades.; The TSelector, unlike the resulting class from MakeClass, separates the processing into a ProcessCut() and ProcessFill(), so we can limit reading of branches to the ones we need.; When a selector is used with a TChain in methods Process(), ProcessFill(), ProcessCut(), you must use the pointer to the current TTree to call the method GetEntry(entry). The parameter entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use. fChain-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:644512,avoid,avoiding,644512,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoiding']
Safety,"s updates timer; TNtuple*fProgressPerf{Active workers, evt rate, MBs read} as a function of processing time; TProofProgressStatus*fProgressStatuspointer to status in the player.; Float_tfReportPeriodTime between reports if nothing changes (estimated proc time / 100); TMap*fSlaveStatsslave status, keyed by correspondig TSlave; TTimefStartTimetime offset; Bool_tfStopTermination of Process() requested?; Float_tfTimeUpdttime between updates; Long64_tfTotalEntriestotal number of entries to be distributed;; TVirtualPacketizer::EUseEstOptfUseEstOptControl usage of estimated values for the progress info; Bool_tfValidConstructed properly?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualPacketizer(TList* input, TProofProgressStatus* st = 0); Constructor. ~TVirtualPacketizer(); Destructor. Long64_t GetEntries(Bool_t tree, TDSetElement* e); Get entries. TDSetElement * GetNextPacket(TSlave* sl, TMessage* r); Get next packet. void StopProcess(Bool_t abort); Stop process. TDSetElement* CreateNewPacket(TDSetElement* base, Long64_t first, Long64_t num); Creates a new TDSetElement from from base packet starting from; the first entry with num entries.; The function returns a new created objects which have to be deleted. Bool_t HandleTimer(TTimer* timer); Send progress message to client. void SetInitTime(); Set the initialization time. TVirtualPacketizer(TList* input, TProofProgressStatus* st = 0). void operator=(const TVirtualPacketizer& ). Bool_t IsValid() const; { return fValid; }. Long64_t GetEntriesProcessed() const; { return (fProgressStatus? fProgressStatus->GetEntries() : 0); }. Int_t GetEstEntriesProcessed(Float_t , Long64_t& ent, Long64_t& bytes, Long64_t& calls); { ent = GetEntriesProcessed(); bytes = GetBytesRead(); calls = GetReadCalls(); return 0; }. Float_t GetCurrentRate(Bool_t& all); { all = kTRUE; return (fProgressStatus? fProgressStatus->GetCurrentRate() : 0.); }. Long64_t GetTotalEntries() const; { return fTotalEnt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualPacketizer.html:8901,abort,abort,8901,root/html528/TVirtualPacketizer.html,https://root.cern,https://root.cern/root/html528/TVirtualPacketizer.html,1,['abort'],['abort']
Safety,"s() [7/9]. TGraphErrors::TGraphErrors ; (; const TGraphErrors & ; gr). TGraphErrors copy constructor. ; Definition at line 170 of file TGraphErrors.cxx. ◆ TGraphErrors() [8/9]. TGraphErrors::TGraphErrors ; (; const TH1 * ; h). TGraphErrors constructor importing its parameters from the TH1 object passed as argument. ; Definition at line 204 of file TGraphErrors.cxx. ◆ TGraphErrors() [9/9]. TGraphErrors::TGraphErrors ; (; const char * ; filename, . const char * ; format = ""%lg %lg %lg %lg"", . Option_t * ; option = """" . ). GraphErrors constructor reading input from filename. ; filename is assumed to contain at least 2 columns of numbers; Convention for format (default=""%lg %lg %lg %lg""). format = lg lg read only 2 first columns into X,Y; format = lg lg lg read only 3 first columns into X,Y and EY; format = lg lg lg lg read only 4 first columns into X,Y,EX,EY. For files separated by a specific delimiter different from ' ' and \\t (e.g. ; in csv files) you can avoid using %*s to bypass this delimiter by explicitly specify the option argument, e.g. option="" \\t,;"" for columns of figures separated by any of these characters (‘’ ', '\t', ',', ';') used once (e.g.""1;1"") or in a combined way ("" 1;,;; 1""`).; Note in that case, the instantiation is about 2 times slower. In case a delimiter is specified, the format ""%lg %lg %lg"" will read X,Y,EX. ; Definition at line 235 of file TGraphErrors.cxx. ◆ ~TGraphErrors(). TGraphErrors::~TGraphErrors ; (; ). override . TGraphErrors default destructor. ; Definition at line 368 of file TGraphErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; ex = 0., . Double_t ; ey = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 377 of file TGraphErrors.cxx. ◆ Allocate(). Double_t ** TGraphErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:36957,avoid,avoid,36957,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['avoid'],['avoid']
Safety,"s(roots);; 1628 } else {; 1629 ::Error(""TEntryList::Scan"", ""object entry-list '%s' not found or not loadable!"", key->GetName());; 1630 }; 1631 }; 1632 }; 1633 // Close the file; 1634 fl->Close();; 1635 delete fl;; 1636 ; 1637 // Done; 1638 return nrs;; 1639}; 1640 ; 1641////////////////////////////////////////////////////////////////////////////////; 1642/// Custom streamer for class TEntryList to handle the different interpretation; 1643/// of fFileName between version 1 and >1 .; 1644 ; 1645void TEntryList::Streamer(TBuffer &b); 1646{; 1647 if (b.IsReading()) {; 1648 UInt_t R__s, R__c;; 1649 Version_t R__v = b.ReadVersion(&R__s, &R__c);; 1650 b.ReadClassBuffer(TEntryList::Class(), this, R__v, R__s, R__c);; 1651 if (R__v <= 1) {; 1652 // The filename contained also the protocol and host: this was dropped; 1653 // in version > 1 to allow re-localization; 1654 GetFileName(fFileName.Data(), fFileName);; 1655 }; 1656 } else {; 1657 b.WriteClassBuffer(TEntryList::Class(), this);; 1658 }; 1659}; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; Version_tshort Version_tDefinition RtypesCore.h:65; Ssiz_tint Ssiz_tDefinition RtypesCore.h:67; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBuffer.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TEntryListBlock.h; GetCommonStringstatic Int_t GetCommonString(TString a, TString b, TString &c)Get in 'c' the string in common at the beginning of 'a' and 'b'.Definition TEntryList.cxx:1516; operator||TEntryList operator||(TEntryList &elist1, TEntryList &elist2)Definition TEntryList.cxx:1385; TEntryList.h; TError.h; R__ASSERT#def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEntryList_8cxx_source.html:55289,Safe,SafeDelete,55289,doc/master/TEntryList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEntryList_8cxx_source.html,2,['Safe'],['SafeDelete']
Safety,"s) constFill node copy numbers of current branch into an array.Definition TGeoNavigator.cxx:444; TGeoNavigator::CheckPathBool_t CheckPath(const char *path) constCheck if a geometry path is valid without changing the state of the navigator.Definition TGeoNavigator.cxx:256; TGeoNavigator::SetOutsidevoid SetOutside(Bool_t flag=kTRUE)Definition TGeoNavigator.h:148; TGeoNavigator::SetStartSafevoid SetStartSafe(Bool_t flag=kTRUE)Definition TGeoNavigator.h:136; TGeoNavigator::IsEnteringBool_t IsEntering() constDefinition TGeoNavigator.h:140; TGeoNavigator::GetMotherMatrixTGeoHMatrix * GetMotherMatrix(Int_t up=1) constDefinition TGeoNavigator.h:156; TGeoNavigator::fCurrentVolumeTGeoVolume * fCurrentVolumecache of statesDefinition TGeoNavigator.h:74; TGeoNavigator::fLastNodeTGeoNode * fLastNodetop physical nodeDefinition TGeoNavigator.h:77; TGeoNavigator::SetCldirCheckedvoid SetCldirChecked(Double_t *dir)Definition TGeoNavigator.h:193; TGeoNavigator::fThreadIdInt_t fThreadIdlast safety returned from parallel world (negative if invalid)Definition TGeoNavigator.h:54; TGeoNavigator::LocalToMasterBombvoid LocalToMasterBomb(const Double_t *local, Double_t *master) constDefinition TGeoNavigator.h:237; TGeoNavigator::SetPWSafetyCachingstatic void SetPWSafetyCaching(Bool_t b)Definition TGeoNavigator.h:231; TGeoNavigator::GetPWSafetyEstimateFromCacheDouble_t GetPWSafetyEstimateFromCache(Double_t cpoint[3]) constDefinition TGeoNavigator.h:208; TGeoNavigator::fDirectionDouble_t fDirection[3]current pointDefinition TGeoNavigator.h:50; TGeoNavigator::PopDummyvoid PopDummy(Int_t ipop=9999)Definition TGeoNavigator.h:280; TGeoNavigator::GetTouchedClusterInt_t GetTouchedCluster(Int_t start, Double_t *point, Int_t *check_list, Int_t ncheck, Int_t *result)Make the cluster of overlapping nodes in a voxel, containing point in reference of the mother.Definition TGeoNavigator.cxx:2245; TGeoNavigator::FindNextBoundaryTGeoNode * FindNextBoundary(Double_t stepmax=TGeoShape::Big(), const char *path="""",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:26145,safe,safety,26145,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,1,['safe'],['safety']
Safety,"s). Sometimes it is much easier to create a volume having a given shape in one; step, since shapes are not direcly linked in the geometrical tree but volumes; are :. TGeoVolume *vol_box = gGeoManager->MakeBox(""BOX_VOL"", ""mat1"", halfX, halfY, halfZ);; TGeoVolume *vol_tub = gGeoManager->MakeTube(""TUB_VOL"", ""mat2"", rmin, rmax, halfZ);; ... (see MakeXXX() utilities in TGeoManager class). Shape queries. Note that global queries related to a geometry are handled by the manager class.; However, shape-related queries might be sometimes usefull. A) Bool_t TGeoShape::Contains(Double_t *point[3]); - this method returns true if POINT is actually inside the shape. The point; has to be defined in the local shape reference. For instance, for a box having; DX, DY and DZ half-lengths a point will be considered inside if :; | -DX <= point[0] <= DX; | -DY <= point[1] <= DY; | -DZ <= point[2] <= DZ. B) Double_t TGeoShape::DistFromInside(Double_t *point[3], Double_t *dir[3],; Int_t iact, Double_t step, Double_t *safe); - computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :; IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; IACT > 2 => compute only the distance to exiting, ignoring anything else. C) Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3],; Int_t iact, Double_t step, Double_t *safe); - computes the distance to entering a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoShape.html:4062,safe,safe,4062,root/html528/TGeoShape.html,https://root.cern,https://root.cern/root/html528/TGeoShape.html,3,['safe'],['safe']
Safety,"s);  ; static void MeanSquaredErrorGradients (TMatrixT< AReal > &dY, const TMatrixT< AReal > &Y, const TMatrixT< AReal > &output, const TMatrixT< AReal > &weights);  ; static AReal CrossEntropy (const TMatrixT< AReal > &Y, const TMatrixT< AReal > &output, const TMatrixT< AReal > &weights);  Sigmoid transformation is implicitly applied, thus output should hold the linear activations of the last layer in the net. ;  ; static void CrossEntropyGradients (TMatrixT< AReal > &dY, const TMatrixT< AReal > &Y, const TMatrixT< AReal > &output, const TMatrixT< AReal > &weights);  ; static AReal SoftmaxCrossEntropy (const TMatrixT< AReal > &Y, const TMatrixT< AReal > &output, const TMatrixT< AReal > &weights);  Softmax transformation is implicitly applied, thus output should hold the linear activations of the last layer in the net. ;  ; static void SoftmaxCrossEntropyGradients (TMatrixT< AReal > &dY, const TMatrixT< AReal > &Y, const TMatrixT< AReal > &output, const TMatrixT< AReal > &weights);  ; Output Functions; Output functions transform the activations output of the output layer in the network to a valid prediction YHat for the desired usage of the network, e.g.; the identity function for regression or the sigmoid transformation for two-class classification. . static void Sigmoid (TMatrixT< AReal > &YHat, const TMatrixT< AReal > &);  ; static void Softmax (TMatrixT< AReal > &YHat, const TMatrixT< AReal > &);  ; Regularization; For each regularization type, two functions are required, one named <Type>Regularization that evaluates the corresponding regularization functional for a given weight matrix and the Add<Type>RegularizationGradients, that adds the regularization component in the gradients to the provided matrix. . static AReal L1Regularization (const TMatrixT< AReal > &W);  ; static void AddL1RegularizationGradients (TMatrixT< AReal > &A, const TMatrixT< AReal > &W, AReal weightDecay);  ; static AReal L2Regularization (const TMatrixT< AReal > &W);  ; static void AddL2R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:11932,predict,prediction,11932,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,1,['predict'],['prediction']
Safety,"s)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelector.html:9836,Abort,Abort,9836,root/html602/TSelector.html,https://root.cern,https://root.cern/root/html602/TSelector.html,4,['Abort'],['Abort']
Safety,"s)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfActivetrue if task is active; Int_tfBreakin=1 if a break point set at task extry; Int_tfBreakout=1 if a break point set at task exit; Bool_tfHasExecutedTrue if task has executed; TStringTNamed::fNameobject identifier; TStringfOptionOption specified in ExecuteTask; TList*fTasksList of Tasks; TStringTNamed::fTitleobject title; static TTask*fgBeginTaskpointer to task initiator; static TTask*fgBreakPointpointer to current break point. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TTask. Function documentation; TTask(); Default constructor invoked when reading a TTask object from a file. TTask(const char* name, const char* title); Standard constructor. TTask& operator=(const TTask& tt); assignment operator (PLEASE DO NOT USE THIS IS WRONG). TTask(const TTask& task); Copy constructor. ~TTask(); Delete a task and its subtasks. void Abort(); Abort current tree of tasks.; After this call, the tree of tasks is ready to be executed again.; The application must take care of cleaning data structures created; by previous executions. void Browse(TBrowser* b); Browse the list of tasks.; It is recommended to add the top level task to the list of; ROOT browsables by:; gROOT->GetListOfBrowsables()->Add(myTopLevelTask). void CleanTasks(); Reset tasks state: breakpoints and execute flags; also invokes the Clear function of each task to clear all data; structures created by a previous execution of a task. void Clear(Option_t* option = """"); Recursively call the Clear function of this task and its subtasks.; The Clear function must be implemented for each derived class; to clear all data structures created by a previous execution of a task.; This function is automatically called by the CleanTasks function. void Continue(); Resume execution at the current break point. void Exec(Option_t* option); Dummy Execute.; This function must be redefined in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTask.html:9959,Abort,Abort,9959,root/html602/TTask.html,https://root.cern,https://root.cern/root/html602/TTask.html,4,['Abort'],['Abort']
Safety,"s)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelector.html:10039,abort,aborted,10039,root/html602/TSelector.html,https://root.cern,https://root.cern/root/html602/TSelector.html,4,['abort'],['aborted']
Safety,"s*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); voidComputeTwist(); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tDistToPlane(Double_t* point, Double_t* dir, Int_t ipl, Bool_t in) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoArb8.html:2827,safe,safe,2827,root/html532/TGeoArb8.html,https://root.cern,https://root.cern/root/html532/TGeoArb8.html,1,['safe'],['safe']
Safety,"s, Double_t *dists, Int_t vecsize,; 143 Double_t *step) const override;; 144 TGeoVolume *; 145 Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;; 146 Double_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;; 147 void GetBoundingCylinder(Double_t *param) const override;; 148 const TBuffer3D &GetBuffer3D(Int_t reqSections, Bool_t localFrame) const override;; 149 Int_t GetByteCount() const override { return 56; }; 150 Bool_t GetPointsOnSegments(Int_t npoints, Double_t *array) const override;; 151 TGeoShape *GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *mat) const override;; 152 Int_t GetNmeshVertices() const override;; 153 void GetMeshNumbers(Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;; 154 Double_t GetPhi1() const { return fPhi1; }; 155 Double_t GetPhi2() const { return fPhi2; }; 156 void InspectShape() const override;; 157 TBuffer3D *MakeBuffer3D() const override;; 158 Double_t Safety(const Double_t *point, Bool_t in = kTRUE) const override;; 159 void Safety_v(const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;; 160 static Double_t SafetyS(const Double_t *point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1,; 161 Double_t phi2, Int_t skipz = 0);; 162 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 163 void SetTubsDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);; 164 void SetDimensions(Double_t *param) override;; 165 void SetPoints(Double_t *points) const override;; 166 void SetPoints(Float_t *points) const override;; 167 void SetSegsAndPols(TBuffer3D &buff) const override;; 168 void Sizeof3D() const override;; 169 ; 170 ClassDefOverride(TGeoTubeSeg, 2) // cylindrical tube segment class; 171};; 172 ; 173class TGeoCtub : public TGeoTubeSeg {; 174protected:; 175 // data members; 176 Double_t fNlow[3]; // normal to lower cut plane; 177 Double_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:8580,Safe,Safety,8580,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['Safe'],['Safety']
Safety,"s, an extrusion behavior is dependent on the track parameters, which is a highly undesirable effect.; B) We will call ""overlaps"" only the regions in space contained by more than one node inside the same container. The owner of such regions cannot be determined based on hierarchical considerations; therefore they will be considered as belonging to the node from which the current track is coming from.; When coming from their container, the ownership is totally unpredictable. Again, the ownership of overlapping regions highly depends on the current track parameters.; We must say that even the overlaps of type A) and B) are allowed in case the corresponding nodes are created using TGeoVolume::AddNodeOverlap() method. Navigation is performed in such cases by giving priority to the non-overlapping nodes. The modeller has to perform an additional search through the overlapping candidates. These are detected automatically during the geometry closing procedure in order to optimize the algorithm, but we will stress that extensive usage of this feature leads to a drastic deterioration of performance. In the following we will focus on the non-declared overlaps of type A) and B) since this is the main source of errors during tracking. These are generally non-intended overlaps due to coding mistakes or bad geometry design. The checking package is loaded together with the painter classes and contains an automated overlap checker. Overlap checking; This can be activated both at volume level (checking for illegal overlaps only one level inside a given volume) and from the geometry manager level (checking full geometry):; myVolume->CheckOverlaps(precision, option);; gGeoManager->CheckOverlaps(precision);; myNode->CheckOverlaps(precision);; TGeoManager::CheckOverlapsvoid CheckOverlaps(Double_t ovlp=0.1, Option_t *option="""")Check all geometry for illegal overlaps within a limit OVLP.Definition TGeoManager.cxx:3869; Here precision represents the desired maximum accepted overlap value in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:101013,detect,detected,101013,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['detect'],['detected']
Safety,"s, but may take (much) longer to calculate NoteTo include the uncertainty from the expected number of events, the Normalization() argument with ScaleType RooAbsReal::RelativeExpected has to be passed, e.g. pdf.plotOn(frame, VisualizeError(fitResult), Normalization(1.0, RooAbsReal::RelativeExpected));; RooAbsReal::RelativeExpected@ RelativeExpectedDefinition RooAbsReal.h:276. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma . Reimplemented from RooAbsPdf.; Definition at line 133 of file RooAbsPdf.cxx. ◆ plotOn() [5/5]. RooPlot * RooSimultaneous::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. overridevirtual . Back-end for plotOn() implementation on RooSimultaneous which needs special handling because a RooSimultaneous PDF cannot project out its index category via integration. ; plotOn() will abort if this is requested without providing a projection dataset. ; Reimplemented from RooAbsPdf.; Definition at line 597 of file RooSimultaneous.cxx. ◆ selectNormalization(). void RooSimultaneous::selectNormalization ; (; const RooArgSet * ; normSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Needed here because a RooSimultaneous works like a RooAddPdf when plotted ; Reimplemented from RooAbsReal.; Definition at line 938 of file RooSimultaneous.cxx. ◆ selectNormalizationRange(). void RooSimultaneous::selectNormalizationRange ; (; const char * ; normRange2 = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Needed here because a RooSimultaneous works like a RooAddPdf when plotted ; Reimplemented from RooAbsReal.; Definition at line 950 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimultaneous.html:98098,abort,abort,98098,doc/master/classRooSimultaneous.html,https://root.cern,https://root.cern/doc/master/classRooSimultaneous.html,1,['abort'],['abort']
Safety,"s, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoParaboloid&operator=(const TGeoParaboloid&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetParaboloidDimensions(Double_t rlo, Double_t rhi, Double_t dz); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoParaboloid.html:9030,Safe,SafetyPhi,9030,root/html534/TGeoParaboloid.html,https://root.cern,https://root.cern/root/html534/TGeoParaboloid.html,1,['Safe'],['SafetyPhi']
Safety,"s, double margin=0.) const;  Method to find potentially relevant candidate bounding boxes for safety calculation given a point. ;  ; std::pair< double, double > GetLoopSafetyCandidates (double point[3], std::vector< int > &candidates, double margin=0.) const;  Method to find potentially relevant candidate bounding boxes for safety calculation given a point. ;  ; void InitSafetyVoxel (TGeoVoxelGridIndex const &);  Method to initialize the safety voxel at a specific 3D voxel (grid) index. ;  ; Double_t SafetyBVH (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (using pure BVH traversal, mainly for debugging/fallback since VoxelSafety should be faster) ;  ; Double_t SafetyLoop (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (trivial loop version for comparison/debugging) ;  ; Double_t SafetyOrig (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (original version based on TGeoVoxelFinder) ;  ; void TestVoxelGrid ();  ; Double_t VoxelSafety (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world used BVH structure with addiditional on-the-fly 3D grid/voxel caching —> essentially an O(1) algorithm !) ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoParallelWorld.h>. Inheritance diagram for TGeoParallelWorld:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ AccelerationMode. enum class TGeoParallelWorld::AccelerationMode. strong . EnumeratorkVoxelFinder ; kBVH . Definition at line 28 of file TGeoParallelWorld.h. Constructor & Destructor Documentation. ◆ TGeoParallelWorld() [1/3]. TGeoParallelWorld::TGeoParallelWorld ; (; const TGeoParallelWorld & ; ). protecteddelete . switch between different algorithm implementations . ◆ TGeoParallelWorld() [2/3]. TGeoParallelWorld::TGeoParall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:16587,safe,safety,16587,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,1,['safe'],['safety']
Safety,"s. ; At the moment two engine kinds are supported:. civetweb or http (default); fastcgi. Examples: // creates civetweb web server with http port 8080; serv->CreateEngine(""http:8080"");; serv->CreateEngine(""civetweb:8080"");; serv->CreateEngine("":8080"");; // creates fastcgi server with port 9000; serv->CreateEngine(""fastcgi:9000"");; One could apply additional parameters, using URL syntax: serv->CreateEngine(""http:8080?thrds=10""); . Definition at line 419 of file THttpServer.cxx. ◆ CreateItem(). Bool_t THttpServer::CreateItem ; (; const char * ; fullname, . const char * ; title . ). Create item in sniffer. ; Definition at line 1455 of file THttpServer.cxx. ◆ CreateServerThread(). void THttpServer::CreateServerThread ; (; ). Creates special thread to process all requests, directed to http server. ; Should be used with care - only dedicated instance of TRootSniffer is allowed By default THttpServer allows to access global lists pointers gROOT or gFile. To be on the safe side, all kind of such access performed from the main thread. Therefore usage of specialized thread means that no any global pointers will be accessible by THttpServer ; Definition at line 515 of file THttpServer.cxx. ◆ DeclFileName(). static const char * THttpServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 198 of file THttpServer.h. ◆ ExecuteHttp(). Bool_t THttpServer::ExecuteHttp ; (; std::shared_ptr< THttpCallArg > ; arg). Execute HTTP request. ; Executes http request, specified in THttpCallArg structure.; Method can be called from any thread Actual execution will be done in main ROOT thread, where analysis code is running. ; Definition at line 642 of file THttpServer.cxx. ◆ ExecuteWS(). Bool_t THttpServer::ExecuteWS ; (; std::shared_ptr< THttpCallArg > & ; arg, . Bool_t ; external_thrd = kFALSE, . Bool_t ; wait_process = kFALSE . ). Execute WS request. ; Execute WS related operation. ; Definition at line 1299 of file THttpServer.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpServer.html:23725,safe,safe,23725,doc/master/classTHttpServer.html,https://root.cern,https://root.cern/doc/master/classTHttpServer.html,1,['safe'],['safe']
Safety,"s. ;  ; void SetImageAutoSave (Bool_t s);  ; void SetImageCount (Int_t ic);  ; void SetImageGUIBaseName (const TString &gname);  ; void SetImageGUIOutMode (Int_t m);  Set output mode for GUI operation: 1 - animated gif; 2 - a series of pngs. ;  ; void SetImageName (const TString &name);  ; void SetRotateScene (Bool_t rotateScene);  ; void SetWDolly (Double_t w);  ; void SetWPhi (Double_t w);  ; void SetWTheta (Double_t w);  ; void Start ();  Start the auto-rotator. ;  ; void StartImageAutoSave (const TString &filename);  Start saving into a set of images. ;  ; void StartImageAutoSaveAnimatedGif (const TString &filename);  Start saving into animated gif. ;  ; void StartImageAutoSaveWithGUISettings ();  Start auto-saving images as set-up via GUI. ;  ; void Stop ();  Stop the auto-rotator. ;  ; void StopImageAutoSave ();  Stops automatic saving of images. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Timeout ();  Called on every timer timeout. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLAutoRotator.html:2878,Timeout,Timeout,2878,doc/master/classTGLAutoRotator.html,https://root.cern,https://root.cern/doc/master/classTGLAutoRotator.html,2,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"s. For large systems this kind of defensive measures can make quite a difference in compile time. Also never include a header file when a forward declaration is enough. On include header files for base classes or classes that are used by value in the class definition.; Implementation file layout; Each implementation file has the following layout:. Module identification line; Author line; Copyright notice; Class description comments (see above); Header file includes; Actual method implementation. For a typical example see TObject.cxx.; Note the mandatory method separator line:; ////////////////////////////////////////; exactly 80 characters long.; Preferred Coding Style; Here we describe our preferred coding style. Coding style is very personal and we don't want to force our views on anybody. But for any contributions to the ROOT system that we have to maintain we would like you to follow our coding style.; Indentation; To be able to keep as much code as possible in the visible part of the editor of to avoid over abundant line wrapping we use indentation of 3 spaces. No tabs since they give the code always a different look depending on the tab settings of the original coder. If everything looks nicely lined up with a tab setting of 4 spaces, it does not look so nicely anymore when the tab setting is changed to 3, 5, etc. spaces.; Placing Braces and Spaces; The other issue that always comes up in C/C++ styling is the placement of braces and spaces. Unlike the indent size, there are few technical reasons to choose one placement strategy over the other, but the preferred way, as shown to us by the prophets Kernighan and Ritchie, is to put the opening brace last on the line, and put the closing brace first, thus:; if (x is true) {; we do y; }; However, there is one special case, namely functions: they have the opening brace at the beginning of the next line, thus:; int function (int x); {; body of function; }; Functions are special (you can't nest them in C/C++).; Note t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:6848,avoid,avoid,6848,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,1,['avoid'],['avoid']
Safety,"s. In order to reduce the ensemble size,; : the value can then be increased.; : ; : II. TUNING OF THE FITTING:; : ; : ␛[1mGDPathEveFrac ␛[0m: fraction of events in path evaluation; : Increasing this fraction will improve the path; : finding. However, a too high value will give few; : unique events available for error estimation.; : It is recommended to use the default = 0.5.; : ␛[1mGDTau ␛[0m: cutoff parameter tau; : By default this value is set to -1.0.; : This means that the cut off parameter is; : automatically estimated. In most cases; : this should be fine. However, you may want; : to fix this value if you already know it; : and want to reduce on training time.; : ␛[1mGDTauPrec ␛[0m: precision of estimated tau; : Increase this precision to find a more; : optimum cut-off parameter.; : ␛[1mGDNStep ␛[0m: number of steps in path search; : If the number of steps is too small, then; : the program will give a warning message.; : ; : III. WARNING MESSAGES; : ; : ␛[1mRisk(i+1)>=Risk(i) in path␛[0m; : ␛[1mChaotic behaviour of risk evolution.␛[0m; : The error rate was still decreasing at the end; : By construction the Risk should always decrease.; : However, if the training sample is too small or; : the model is overtrained, such warnings can; : occur.; : The warnings can safely be ignored if only a; : few (<3) occur. If more warnings are generated,; : the fitting fails.; : A remedy may be to increase the value; : ␛[1mGDValidEveFrac␛[0m to 1.0 (or a larger value).; : In addition, if ␛[1mGDPathEveFrac␛[0m is too high; : the same warnings may occur since the events; : used for error estimation are also used for; : path estimation.; : Another possibility is to modify the model - ; : See above on tuning the rule ensemble.; : ; : ␛[1mThe error rate was still decreasing at the end of the path␛[0m; : Too few steps in path! Increase ␛[1mGDNSteps␛[0m.; : ; : ␛[1mReached minimum early in the search␛[0m; : Minimum was found early in the fitting. This; : may indicate that the used ste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:55969,Risk,Risk,55969,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,2,"['Risk', 'risk']","['Risk', 'risk']"
Safety,"s. To alleviate this, the new class RooBinSamplingPdf has been added to RooFit. Also see arxiv:2012.02746.; More accurate residual and pull distributions; When making residual or pull distributions with RooPlot::residHist or RooPlot::pullHist, the histogram is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loadin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:22034,recover,recover,22034,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['recover'],['recover']
Safety,"s.; 8214 //; 8215 // fClusterRangeEnd contains the last entries number of a cluster range.; 8216 // In particular this means that the 'next' cluster starts at fClusterRangeEnd[]+1; 8217 // fClusterSize contains the size in number of entries of all the cluster; 8218 // within the given range.; 8219 // The last range (and the only one if fNClusterRange is zero) start at; 8220 // fNClusterRange[fNClusterRange-1]+1 and ends at the end of the TTree. The; 8221 // size of the cluster in this range is given by the value of fAutoFlush.; 8222 //; 8223 // For example printing the beginning and end of each the ranges can be done by:; 8224 //; 8225 // Printf(""%-16s %-16s %-16s %5s"",; 8226 // ""Cluster Range #"", ""Entry Start"", ""Last Entry"", ""Size"");; 8227 // Int_t index= 0;; 8228 // Long64_t clusterRangeStart = 0;; 8229 // if (fNClusterRange) {; 8230 // for( ; index < fNClusterRange; ++index) {; 8231 // Printf(""%-16d %-16lld %-16lld %5lld"",; 8232 // index, clusterRangeStart, fClusterRangeEnd[index], fClusterSize[index]);; 8233 // clusterRangeStart = fClusterRangeEnd[index] + 1;; 8234 // }; 8235 // }; 8236 // Printf(""%-16d %-16lld %-16lld %5lld"",; 8237 // index, prevEntry, fEntries - 1, fAutoFlush);; 8238 //; 8239 ; 8240 // Note: We store the entry number corresponding to the end of the cluster; 8241 // rather than its start in order to avoid using the array if the cluster; 8242 // size never varies (If there is only one value of AutoFlush for the whole TTree).; 8243 ; 8244 if( fAutoFlush != autof) {; 8245 if ((fAutoFlush > 0 || autof > 0) && fFlushedBytes) {; 8246 // The mechanism was already enabled, let's record the previous; 8247 // cluster if needed.; 8248 MarkEventCluster();; 8249 }; 8250 fAutoFlush = autof;; 8251 }; 8252}; 8253 ; 8254////////////////////////////////////////////////////////////////////////////////; 8255/// Mark the previous event as being at the end of the event cluster.; 8256///; 8257/// So, if fEntries is set to 10 (and this is the first cluster) when MarkEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:320805,avoid,avoid,320805,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['avoid'],['avoid']
Safety,"s.CScript illustrating the use of transparency with ||-Coord ;  radialgradients.CThis tutorial demonstrates how to use radial gradients, custom colors, transparency ;  transp.CThis demo shows how to use transparency ;  transp_text.CThis macro is based on labels1.C by Rene Brun ;  transparentpad.CThis macro demonstrates semi-transparent pads ;  ► cont;  cnt001_basictseq.C Example showing possible usages of the TSeq class ;  TListAndSTL.C This is an example of using TList with STL algoritms in CLING ;  ► eve;  alice_esd.CComplex example showing ALICE ESD track visualization ;  alice_esd_html_summary.CHtml table and event summary for alice_esd.C ;  alice_esd_split.CComplex example showing ALICE ESD visualization in several views ;  alice_vsd.CComplex example showing ALICE VSD visualization ;  annotation.CDemonstrates usage of TGLAnnotation class ;  arrow.CDemonstrates usage of TEveArrow class ;  arrow_standalone.CHow to use EVE without the standard window ;  assembly.CGeometry detector assembly example ;  box.CDemonstrates usage of TEveBox class ;  boxset.CDemonstrates usage of TEveBoxSet class ;  boxset_cones.CDemonstrates usage of 'cone' mode in TEveBoxSet class ;  calo_detail.CCalorimeter detailed view by using TEveCaloDataVec as data-source ;  calorimeters.CDemonstrates usage of EVE calorimetry classes ;  camera_restore.C;  compound.CDemonstrates usage of EVE compound objects - class TEveCompound ;  csgdemo.CCombinatorial Solid Geometry example ;  geom_alias.CDemonstates usage of geometry aliases - merge ALICE ITS with ATLAS MUON ;  geom_alice_its.CShows geometry of ALICE ITS ;  geom_alice_tpc.CShows geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:101166,detect,detector,101166,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['detect'],['detector']
Safety,"s.find(lvs->GetName()) ;; 853 if (tmp) {; 854 leafNodes.remove(*tmp) ;; 855 leafNodes.add(*lvs) ;; 856 }; 857 }; 858 }; 859 }; 860 ; 861 // check if this arg is also in the projection set; 862 if(nullptr != projectedVars && projectedVars->find(arg->GetName())) {; 863 coutE(Plotting) << ClassName() << ""::"" << GetName() << "":createPlotProjection: \"""" << arg->GetName(); 864 << ""\"" cannot be both a dependent and a projected variable."" << std::endl;; 865 return nullptr;; 866 }; 867 }; 868 ; 869 // Remove the projected variables from the list of leaf nodes, if necessary.; 870 if(nullptr != projectedVars) leafNodes.remove(*projectedVars,true);; 871 ; 872 // Make a deep-clone of ourself so later operations do not disturb our original state; 873 cloneSet = new RooArgSet;; 874 if (RooArgSet(*this).snapshot(*cloneSet, true)) {; 875 coutE(Plotting) << ""RooAbsPdf::createPlotProjection("" << GetName() << "") Couldn't deep-clone PDF, abort,"" << std::endl ;; 876 return nullptr ;; 877 }; 878 RooAbsReal *theClone= static_cast<RooAbsReal*>(cloneSet->find(GetName()));; 879 ; 880 // The remaining entries in our list of leaf nodes are the external; 881 // dependents (x) and parameters (p) of the projection. Patch them back; 882 // into the theClone. This orphans the nodes they replace, but the orphans; 883 // are still in the cloneList and so will be cleaned up eventually.; 884 //cout << ""redirection leafNodes : "" ; leafNodes.Print(""1"") ;; 885 ; 886 std::unique_ptr<RooArgSet> plotLeafNodes{leafNodes.selectCommon(dependentVars)};; 887 theClone->recursiveRedirectServers(*plotLeafNodes,false,false,false);; 888 ; 889 // Create the set of normalization variables to use in the projection integrand; 890 RooArgSet normSet(dependentVars);; 891 if(nullptr != projectedVars) normSet.add(*projectedVars);; 892 if(nullptr != condObs) {; 893 normSet.remove(*condObs,true,true) ;; 894 }; 895 ; 896 // Try to create a valid projection integral. If no variables are to be projected,; 897 // create a null project",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:35051,abort,abort,35051,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['abort'],['abort']
Safety,"s/Minuit; (If you want to check out a tagged version SEAL_x_x_x of MINUIT, then do; $ cvs co -r SEAL\_x\_x\_x MathLibs/Minuit ); 3.4 Create a tar.gz from CVS; Once the sources are checked out from the CVS code repository,. change to the directory:; $ cd MathLibs/Minuit; run autogen:; $ ./autogen; create a new directory:; $ cd ..; $ mkdir Minuit-BUILD; $ cd Minuit-BUILD/; run configure:; $ ../Minuit/configure; create the tar.gz:; $ make dist. This will create a Minuit-x.x.x.tar.gz which can be distributed and used as described above.; 3.5 M versions; The version numbers of M follow the release numbers of the SEAL project @bib-SEAL at CERN @bib-CERN.; 3.5.1 From to; The program is entirely written in standard portable . M does not depend on any external library. In its minimal usage the user must only provide an implementation of the FCNBase class to M and parameters and uncertainties in form of std::vector containers.; 3.5.2 Memory allocation and thread safety; Differently to the version of M , the version has its own memory manager (StackAllocator. The user can select between the standard dynamic memory allocation and deallocation (default) and performance-optimized stack–like allocation (optional). However, the library is not thread save using stack–allocation.; 3.5.3 M parameters; Differently to the version of M there is no limit on the number of parameters, variable or non-variable. Memory allocation is done dynamically according to the actual needs and “on demand”. There is no protection against an upper limit on the number of parameters, however the “technological” limitations of M can be seen around a maximum of 15 free parameters at a time.; 3.6 Interference with other packages; The new M has been designed to interfere as little as possible with other programs or packages which may be loaded at the same time. M is thread safe by default. Optionally the user can select a different way of dynamically allocating memory in the class StackAllacator for M , in whic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:30672,safe,safety,30672,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['safe'],['safety']
Safety,"s:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::IBaseParam. class ROOT::Math::IBaseParam. Documentation for the abstract class IBaseParam.; It defines the interface for dealing with the function parameters; This is used only for internal convinience, to avoid redefining the Parameter API; for the one and the multi-dim functions.; Concrete class should derive from ROOT::Math::IParamFunction and not from this class. @ingroup ParamFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseParam(); virtual unsigned intNPar() const; ROOT::Math::IBaseParam&operator=(const ROOT::Math::IBaseParam&); virtual stringParameterName(unsigned int i) const; virtual const double*Parameters() const; virtual voidSetParameters(const double* p). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IBaseParam(). Virtual Destructor (no operations). {}. const double * Parameters() const. Access the parameter values. void SetParameters(const double* p). Set the parameter values; @param p vector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. unsigned int NPar() const. Return the number of Parameters. std::string ParameterName(unsigned int i) const. Return the name of the i-th parameter (starting from zero); Overwrite if want to avoid the default name (""Par_0, Par_1, ...""). » Author: L. Moneta Tue Nov 14 14:20:07 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__IBaseParam.html:1663,avoid,avoid,1663,root/html534/ROOT__Math__IBaseParam.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__IBaseParam.html,1,['avoid'],['avoid']
Safety,"s; Added correct treatment of extended term in asymptotically correct method for uncertainty determination in the presence of weights. This improvement will allow for extended unbinned maximum likelihood fits to use the asymptotically correct method when using the RooFit::AsymptoticError() command argument in RooAbsPdf::fitTo(). See also this writeup on extended weighted fits that is also linked from the reference guide. The pull request that introduced this feature might also be a good reference.; Compile your code with memory safe interfaces; If you define the ROOFIT_MEMORY_SAFE_INTERFACES preprocessor macro, the RooFit interface changes in a way such that memory leaks are avoided.; The most prominent effect of this change is that many functions that used to return an owning pointer (e.g., a pointer to an object that you need to manually delete) are then returning a std::unique_pt for automatic memory management.; For example this code would not compile anymore, because there is the risk that the caller forgets to delete params:; RooArgSet * params = pdf.getParameters(nullptr);; If you wrap such return values in a std::unique_ptr, then your code will compile both with and without memory safe interfaces:; std::unique_ptr<RooArgSet> params{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:9657,risk,risk,9657,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['risk'],['risk']
Safety,"s; public:. enum TBuffer::EMode { kRead; kWrite; };; enum TBuffer::[unnamed] { kIsOwner; kCannotHandleMemberWiseStreaming; kInitialSize; kMinimalSize; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringfArraySepar! depending from compression level, "", "" or "",""; char*TBuffer::fBufCurCurrent position in buffer; char*TBuffer::fBufMaxEnd of buffer; Int_tTBuffer::fBufSizeSize of buffer; char*TBuffer::fBufferBuffer used to store objects; vector<TVirtualArray*>TBuffer::fCacheStackStack of pointers to the cache where to temporarily store the value of 'missing' data members; Int_tfCompact! 0 - no any compression, 1 - no spaces in the begin, 2 - no new lines, 3 - no spaces at all; Bool_tfExpectedChain! flag to resolve situation when several elements of same basic type stored as FastArray; unsigned intfJsonrCnt! counter for all objects and arrays; map<const void*,unsigned>fJsonrMap! map of recorded objects, used in JsonR to restore references; Bool_tTBuffer::fModeRead or write mode; TStringfNumericLocale! stored value of setlocale(LC_NUMERIC), which should be recovered at the end; TStringfOutBuffer! main output buffer for json code; TString*fOutput! current output buffer for json code; TObject*TBuffer::fParentPointer to parent object owning this buffer; ReAllocCharFun_tTBuffer::fReAllocFunc! Realloc function to be used when extending the buffer.; TStringfSemicolon! depending from compression level, "" : "" or "":""; TObjArrayfStack! stack of streamer infos; TStringfValue! buffer for current value; Int_tTBuffer::fVersionBuffer format version; static const char*fgFloatFmt! printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBufferJSON(); Creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBufferJSON.html:19659,recover,recovered,19659,root/html534/TBufferJSON.html,https://root.cern,https://root.cern/root/html534/TBufferJSON.html,1,['recover'],['recovered']
Safety,"s;}; 367 ; 368 /**; 369 Change R - Polar3D coordinates only; 370 */; 371 DisplacementVector3D<CoordSystem, Tag>& SetR (Scalar rr) { fCoordinates.SetR(rr); return *this;}; 372 ; 373 /**; 374 Change Theta - Polar3D coordinates only; 375 */; 376 DisplacementVector3D<CoordSystem, Tag>& SetTheta (Scalar ang) { fCoordinates.SetTheta(ang); return *this;}; 377 ; 378 /**; 379 Change Phi - Polar3D or CylindricalEta3D coordinates; 380 */; 381 DisplacementVector3D<CoordSystem, Tag>& SetPhi (Scalar ang) { fCoordinates.SetPhi(ang); return *this;}; 382 ; 383 /**; 384 Change Rho - CylindricalEta3D coordinates only; 385 */; 386 DisplacementVector3D<CoordSystem, Tag>& SetRho (Scalar rr) { fCoordinates.SetRho(rr); return *this;}; 387 ; 388 /**; 389 Change Eta - CylindricalEta3D coordinates only; 390 */; 391 DisplacementVector3D<CoordSystem, Tag>& SetEta (Scalar etaval) { fCoordinates.SetEta(etaval); return *this;}; 392 ; 393 ; 394 // ------ Operations combining two vectors ------; 395 // -- need to have the specialized version in order to avoid; 396 ; 397 /**; 398 Return the scalar (dot) product of two displacement vectors.; 399 It is possible to perform the product for any type of vector coordinates,; 400 but they must have the same coordinate system tag; 401 */; 402 template< class OtherCoords >; 403 Scalar Dot( const DisplacementVector3D<OtherCoords,Tag> & v) const {; 404 return X()*v.X() + Y()*v.Y() + Z()*v.Z();; 405 }; 406 /**; 407 Return the scalar (dot) product of two vectors.; 408 It is possible to perform the product for any classes; 409 implementing x(), y() and z() member functions; 410 */; 411 template< class OtherVector >; 412 Scalar Dot( const OtherVector & v) const {; 413 return X()*v.x() + Y()*v.y() + Z()*v.z();; 414 }; 415 ; 416 /**; 417 Return vector (cross) product of two displacement vectors,; 418 as a vector in the coordinate system of this class.; 419 It is possible to perform the product for any type of vector coordinates,; 420 but they must have the same coordi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html:12551,avoid,avoid,12551,doc/master/GenVector_2DisplacementVector3D_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2DisplacementVector3D_8h_source.html,1,['avoid'],['avoid']
Safety,"sA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; 'cl' is a pointer to the TClass object that corresponds to the 'pointer type' used to retrieve the value 'obj'; For example with: TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::TNamedTNamed()Definition TNamed.h:36; mTMarker mDefinition textangle.C:8; and the global IsA function would be called with TObject::Class() as the first parameter and the exact numerical value in the pointer 'o'.; In other word, inside the global IsA function. it is safe to C-style cast the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6300 of file TClass.cxx. ◆ SetImplFileName(). void TClass::SetImplFileName ; (; const char * ; implFileName). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6744 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 6969 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 6985 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:117513,safe,safe,117513,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['safe'],['safe']
Safety,"sA(). void TClass::SetGlobalIsA ; (; IsAGlobalFunc_t ; func). This function installs a global IsA function for this class. ; The global IsA function will be used if there is no local IsA function (fIsA); A global IsA function has the signature:; TClass *func( TClass *cl, const void *obj);; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; 'cl' is a pointer to the TClass object that corresponds to the 'pointer type' used to retrieve the value 'obj'; For example with: TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::TNamedTNamed()Definition TNamed.h:36; mTMarker mDefinition textangle.C:8; and the global IsA function would be called with TObject::Class() as the first parameter and the exact numerical value in the pointer 'o'.; In other word, inside the global IsA function. it is safe to C-style cast the value of 'obj' into a pointer to the class described by 'cl'. ; Definition at line 6367 of file TClass.cxx. ◆ SetImplFileName(). void TClass::SetImplFileName ; (; const char * ; implFileName). inline . Definition at line 560 of file TClass.h. ◆ SetLastReadInfo(). void TClass::SetLastReadInfo ; (; TVirtualStreamerInfo * ; info). inline . Definition at line 445 of file TClass.h. ◆ SetMemberStreamer(). void TClass::SetMemberStreamer ; (; const char * ; name, . MemberStreamerFunc_t ; strm . ). Install a new member streamer (p will be copied). ; Definition at line 6811 of file TClass.cxx. ◆ SetMerge(). void TClass::SetMerge ; (; ROOT::MergeFunc_t ; mergeFunc). Install a new wrapper around 'Merge'. ; Definition at line 7036 of file TClass.cxx. ◆ SetNew(). void TClass::SetNew ; (; ROOT::NewFunc_t ; newFunc). Install a new wrapper around 'new'. ; Definition at line 7052 of file TClass.cxx. ◆ SetNewArray(). void TClass::SetNewArray ; (; ROOT::NewArrFunc_t ; newArrayFunc). Install a new wrapper around 'new []'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:117514,safe,safe,117514,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['safe'],['safe']
Safety,"sArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddModel.h>. Inheritance diagram for RooAddModel:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ pRooArgList. typedef RooArgList* RooAddModel::pRooArgList. protected . Definition at line 106 of file RooAddModel.h. Constructor & Destructor Documentation. ◆ RooAddModel() [1/3]. RooAddModel::RooAddModel ; (; ). Definition at line 63 of file RooAddModel.cxx. ◆ RooAddModel() [2/3]. RooAddModel::RooAddModel ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . const RooArgList & ; inCoefList, . bool ; ownPdfList = false . ). Generic constructor from list of PDFs and list of coefficients. ; Each pdf list element (i) is paired with coefficient list element (i). The number of coefficients must be either equal to the number of PDFs, in which case extended MLL fitting is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:78572,Avoid,Avoids,78572,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['Avoid'],['Avoids']
Safety,"sBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Bool_tfIgnoreDupignore duplicates, don't issue warning; TStringfRcNameresource file base name; THashList*fTablehash table containing env records. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEnv(const char* name = """"); Create a resource table and read the (possibly) three resource files, i.e; $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>), $HOME/<name> and; ./<name>. ROOT always reads "".rootrc"" (in TROOT::InitSystem()). You can; read additional user defined resource files by creating addtional TEnv; objects. By setting the shell variable ROOTENV_NO_HOME=1 the reading of; the $HOME/<name> resource file will be skipped. This might be useful in; case the home directory resides on an automounted remote file system; and one wants to avoid the file system from being mounted. ~TEnv(); Delete the resource table. const char * Getvalue(const char* name); Returns the character value for a named resouce. Int_t GetValue(const char* name, Int_t dflt); Returns the integer value for a resource. If the resource is not found; return the dflt value. Double_t GetValue(const char* name, Double_t dflt); Returns the double value for a resource. If the resource is not found; return the dflt value. const char * GetValue(const char* name, const char* dflt); Returns the character value for a named resouce. If the resource is; not found the dflt value is returned. TEnvRec * Lookup(const char* n); Loop over all resource records and return the one with name.; Return 0 in case name is not in the resoucre table. void Print(Option_t* option = """") const; Print all resources or the global, user or local resources separately. void PrintEnv(EEnvLevel level = kEnvAll) const; Print all resources for a certain le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEnv.html:8635,avoid,avoid,8635,root/html528/TEnv.html,https://root.cern,https://root.cern/root/html528/TEnv.html,4,['avoid'],['avoid']
Safety,"sDeclsMap_t &headersClassesMap,; 3379 const std::string &detectedUmbrella,; 3380 bool payLoadOnly = false); 3381{; 3382 std::string headerName;; 3383 ; 3384 if (genreflex::verbose); 3385 std::cout << ""Class-headers Mapping:\n"";; 3386 std::string headersClassesMapString = """";; 3387 for (auto const & classHeaders : headersClassesMap) {; 3388 if (genreflex::verbose); 3389 std::cout << "" o "" << classHeaders.first << "" --> "";; 3390 headersClassesMapString += ""\"""";; 3391 headersClassesMapString += classHeaders.first + ""\"""";; 3392 for (auto const & header : classHeaders.second) {; 3393 headerName = (detectedUmbrella == header || payLoadOnly) ? ""payloadCode"" : ""\"""" + header + ""\"""";; 3394 headersClassesMapString += "", "" + headerName;; 3395 if (genreflex::verbose); 3396 std::cout << "", "" << headerName;; 3397 if (payLoadOnly); 3398 break;; 3399 }; 3400 if (genreflex::verbose); 3401 std::cout << std::endl;; 3402 headersClassesMapString += "", \""@\"",\n"";; 3403 }; 3404 headersClassesMapString += ""nullptr"";; 3405 return headersClassesMapString;; 3406}; 3407 ; 3408////////////////////////////////////////////////////////////////////////////////; 3409 ; 3410bool IsImplementationName(const std::string &filename); 3411{; 3412 return !ROOT::TMetaUtils::IsHeaderName(filename);; 3413}; 3414 ; 3415////////////////////////////////////////////////////////////////////////////////; 3416/// Check if the argument is a sane cling argument. Performing the following checks:; 3417/// 1) It does not start with ""--"" and is not the --param option.; 3418 ; 3419bool IsCorrectClingArgument(const std::string& argument); 3420{; 3421 if (ROOT::TMetaUtils::BeginsWith(argument,""--"") && !ROOT::TMetaUtils::BeginsWith(argument,""--param"")) return false;; 3422 return true;; 3423}; 3424 ; 3425////////////////////////////////////////////////////////////////////////////////; 3426bool NeedsSelection(const char* name); 3427{; 3428 static const std::vector<std::string> namePrfxes {; 3429 ""array<"",; 3430 ""unique_ptr<""};; 34",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:134948,detect,detectedUmbrella,134948,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['detect'],['detectedUmbrella']
Safety,"sGenerated;  ; TMacro * fGenerateFun;  ; Long64_t fNEvents;  ; Int_t fNTracks;  ; Int_t fNTracksMax;  ; Int_t fRegenerate;  ; TObject * fTotalGen;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TSelector; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . #include <TSelEventGen.h>. Inheritance diagram for TSelEventGen:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSelEventGen(). TSelEventGen::TSelEventGen ; (; ). pointer to the analyzed TTree or TChain ; Constructor. ; Definition at line 44 of file TSelEventGen.cxx. ◆ ~TSelEventGen(). TSelEventGen::~TSelEventGen ; (; ). inlineoverride . Definition at line 59 of file TSelEventGen.h. Member Function Documentation. ◆ Begin(). void TSelEventGen::Begin ; (; TTree * ; ). overridevirtual . The Begin() fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEventGen.html:13347,Abort,Abort,13347,doc/master/classTSelEventGen.html,https://root.cern,https://root.cern/doc/master/classTSelEventGen.html,1,['Abort'],['Abort']
Safety,"sInfo (const TClass *cl);  Specify class which typename will not be stored in JSON Several classes can be configured To exclude typeinfo for all classes, call TBufferJSON::SetTypenameTag("""") ;  ; void SetStreamerElementNumber (TStreamerElement *elem, Int_t comp_type) final;  Function is called from TStreamerInfo WriteBuffer and ReadBuffer functions and add/verify next element of json structure This calls allows separate data, correspondent to one class member, from another. ;  ; void SetTypenameTag (const char *tag=""_typename"");  Configures _typename tag in JSON structures By default ""_typename"" field in JSON structures used to store class information One can specify alternative tag like ""$typename"" or ""xy"", but such JSON can not be correctly used in JSROOT If empty string is provided, class information will not be stored. ;  ; void SetTypeversionTag (const char *tag=nullptr);  Configures _typeversion tag in JSON One can specify name of the JSON tag like ""_typeversion"" or ""$tv"" which will be used to store class version Such tag can be used to correctly recover objects from JSON If empty string is provided (default), class version will not be stored. ;  ; void SkipObjectAny () final;  Skip any kind of object from buffer. ;  ; TString StoreObject (const void *obj, const TClass *cl);  Store provided object as JSON structure Allows to configure different TBufferJSON properties before converting object into JSON Actual object class must be specified here Method can be safely called once - after that TBufferJSON instance must be destroyed Code should look like: ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void StreamObject (TObject *obj) override;  ; void StreamObject (void *obj, const char *className, const TClass *onFileClass=nullptr) override;  stream object to/from buffer ;  ; void StreamObject (void *obj, const std::type_info &typeinfo, const TClass *onFileClass=nullp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:13423,recover,recover,13423,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['recover'],['recover']
Safety,"sManager::fAddr. private . ! HTTP address of the server ; Definition at line 46 of file RWebWindowsManager.hxx. ◆ fAssgnExec. std::unique_ptr<TExec> ROOT::RWebWindowsManager::fAssgnExec. private . ! special exec to assign thread id via ProcessEvents ; Definition at line 55 of file RWebWindowsManager.hxx. ◆ fDeleteCallback. WebWindowDeleteCallback_t ROOT::RWebWindowsManager::fDeleteCallback. private . ! function called when RWebWindow is destroyed ; Definition at line 57 of file RWebWindowsManager.hxx. ◆ fExternalProcessEvents. bool ROOT::RWebWindowsManager::fExternalProcessEvents {false}. private . ! indicate that there are external process events engine ; Definition at line 54 of file RWebWindowsManager.hxx. ◆ fIdCnt. unsigned ROOT::RWebWindowsManager::fIdCnt {0}. private . ! counter for identifiers ; Definition at line 50 of file RWebWindowsManager.hxx. ◆ fLaunchTmout. float ROOT::RWebWindowsManager::fLaunchTmout {30.}. private . ! timeout in seconds to start browser process, default 30s ; Definition at line 53 of file RWebWindowsManager.hxx. ◆ fMutex. std::recursive_mutex ROOT::RWebWindowsManager::fMutex. private . ! main mutex, used for window creations ; Definition at line 49 of file RWebWindowsManager.hxx. ◆ fServer. std::unique_ptr<THttpServer> ROOT::RWebWindowsManager::fServer. private . ! central communication with the all used displays ; Definition at line 45 of file RWebWindowsManager.hxx. ◆ fSessionKey. std::string ROOT::RWebWindowsManager::fSessionKey. private . ! secret session key used on client to code connections keys ; Definition at line 47 of file RWebWindowsManager.hxx. ◆ fShowCallback. WebWindowShowCallback_t ROOT::RWebWindowsManager::fShowCallback. private . ! function called for each RWebWindow::Show call ; Definition at line 56 of file RWebWindowsManager.hxx. ◆ fUseHttpThrd. bool ROOT::RWebWindowsManager::fUseHttpThrd {false}. private . ! use special thread for THttpServer ; Definition at line 51 of file RWebWindowsManager.hxx. ◆ fUseSenderThr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html:22939,timeout,timeout,22939,doc/master/classROOT_1_1RWebWindowsManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindowsManager.html,1,['timeout'],['timeout']
Safety,"sName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; virtual Double_t GetDX () const;  ; virtual Double_t GetDY () const;  ; virtual Double_t GetDZ () const;  ; virtual Double_t GetFacetArea (Int_t index=0) const;  ; Int_t GetFittingBox (const TGeoBBox *parambox, TGeoMatrix *mat, Double_t &dx, Double_t &dy, Double_t &dz) const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; void InspectShape () const override;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; TBuffer3D * MakeBuffer3D () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void SetPoints (Double_t *points) const override;  ; void SetPoints (Float_t *points) const override;  ; void SetSegsAndPols (TBuffer3D &buffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBBox.html:3367,Safe,Safety,3367,doc/master/classTGeoBBox.html,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html,2,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"sOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoConeSeg&operator=(const TGeoConeSeg&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tSafetyS(const Double_t* point, Bool_t in, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidTGeoCone::SetConeDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); voidSetConsDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoConeSeg.html:9991,Safe,SafetyPhi,9991,root/html534/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoConeSeg.html,1,['Safe'],['SafetyPhi']
Safety,"sOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoTubeSeg&operator=(const TGeoTubeSeg&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tSafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTubeSeg.html:10057,Safe,SafetyPhi,10057,root/html534/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html534/TGeoTubeSeg.html,1,['Safe'],['SafetyPhi']
Safety,"sRead(Long64_t bytes = 0); { fgBytesRead = bytes; }. void SetFileBytesWritten(Long64_t bytes = 0); { fgBytesWrite = bytes; }. void SetFileReadCalls(Int_t readcalls = 0); { fgReadCalls = readcalls; }. Long64_t GetFileCounter(); { return fgFileCounter; }. void IncrementFileCounter(); { fgFileCounter++; }. Bool_t SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); Sets the directory where to locally stage/cache remote files.; If the directory is not writable by us return kFALSE. const char * GetCacheFileDir(); Get the directory where to locally stage/cache remote files. Bool_t ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); We try to shrink the cache to the desired size.; With the clenupinterval you can specify the minimum amount of time after; the previous cleanup before the cleanup operation is repeated in; the cache directory. UInt_t SetOpenTimeout(UInt_t timeout); Sets open timeout time (in ms). Returns previous timeout value. UInt_t GetOpenTimeout(); Returns open timeout (in ms). Bool_t SetOnlyStaged(Bool_t onlystaged); Sets only staged flag. Returns previous value of flag.; When true we check before opening the file if it is staged, if not,; the open fails. Bool_t GetOnlyStaged(); Returns staged only flag. Bool_t Matches(const char* name); Return kTRUE if 'url' matches the coordinates of this file.; The check is implementation dependent and may need to be overload; by each TFile implememtation relying on this check.; The default implementation checks the file name only. const TUrl * GetEndpointUrl(const char* name); Get final URL for file being opened asynchronously.; Returns 0 is the information is not yet available. void CpProgress(Long64_t bytesread, Long64_t size, TStopwatch& watch); Print file copy progress. Bool_t Cp(const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); Allows to copy this file to the dst URL. Returns kTRUE in case of success,; kFALSE otherwise. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFile.html:53055,timeout,timeout,53055,root/html532/TFile.html,https://root.cern,https://root.cern/root/html532/TFile.html,4,['timeout'],['timeout']
Safety,"sRead(Long64_t bytes = 0); { fgBytesRead = bytes; }. void SetFileBytesWritten(Long64_t bytes = 0); { fgBytesWrite = bytes; }. void SetFileReadCalls(Int_t readcalls = 0); { fgReadCalls = readcalls; }. Long64_t GetFileCounter(); { return fgFileCounter; }. void IncrementFileCounter(); { fgFileCounter++; }. Bool_t SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); Sets the directory where to locally stage/cache remote files.; If the directory is not writable by us return kFALSE. const char * GetCacheFileDir(); Get the directory where to locally stage/cache remote files. Bool_t ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); We try to shrink the cache to the desired size.; With the clenupinterval you can specify the minimum amount of time after; the previous cleanup before the cleanup operation is repeated in; the cache directory. UInt_t SetOpenTimeout(UInt_t timeout); Sets open timeout time (in ms). Returns previous timeout value. UInt_t GetOpenTimeout(); Returns open timeout (in ms). Bool_t SetOnlyStaged(Bool_t onlystaged); Sets only staged flag. Returns previous value of flag.; When true we check before opening the file if it is staged, if not,; the open fails. Bool_t GetOnlyStaged(); Returns staged only flag. Bool_t Matches(const char* name); Return kTRUE if 'url' matches the coordinates of this file.; The check is implementation dependent and may need to be overload; by each TFile implememtation relying on this check.; The default implementation checks the file name only. const TUrl * GetEndpointUrl(const char* name); Get final URL for file being opened asynchronously.; Returns 0 is the information is not yet available. void CpProgress(Long64_t bytesread, Long64_t size, TStopwatch& watch); Print file copy progress. Bool_t Cp(const char* src, const char* dst, Bool_t progressbar = kTRUE, UInt_t buffersize = 1000000); Allows to copy file from src to dst URL. Returns kTRUE in case of success,; k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:50268,timeout,timeout,50268,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,2,['timeout'],['timeout']
Safety,sTestStatistic::_nGofNumber of sub-contexts; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; Int_tRooAbsTestStatistic::_numSetsTotal number of partitions in parallel calculation mode; Double_tRooAbsTestStatistic::_offset! Offset; Double_tRooAbsTestStatistic::_offsetCarry! avoids loss of precision; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_optimized!; RooAbsData*RooAbsOptTestStatistic::_origDataOriginal data; RooAbsReal*RooAbsOptTestStatistic::_origFuncOriginal function; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; RooRefArrayRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; RooArgSet_rrvArgsSet of real-valued observables; TIterator*_rrvIter! Iterator over set of real-valued observables; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsA,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooXYChi2Var.html:41401,avoid,avoids,41401,root/html602/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html602/RooXYChi2Var.html,2,['avoid'],['avoids']
Safety,"s_nodecay;; 1614 using ret_type = typename TTraits::CallableTraits<decltype(f)>::ret_type;; 1615 ForeachSlot(RDFInternal::AddSlotParameter<ret_type>(f, arg_types()), columns);; 1616 }; 1617 ; 1618 // clang-format off; 1619 ////////////////////////////////////////////////////////////////////////////; 1620 /// \brief Execute a user-defined function requiring a processing slot index on each entry (*instant action*).; 1621 /// \param[in] f Function, lambda expression, functor class or any other callable object performing user defined calculations.; 1622 /// \param[in] columns Names of the columns/branches in input to the user function.; 1623 ///; 1624 /// Same as `Foreach`, but the user-defined function takes an extra; 1625 /// `unsigned int` as its first parameter, the *processing slot index*.; 1626 /// This *slot index* will be assigned a different value, `0` to `poolSize - 1`,; 1627 /// for each thread of execution.; 1628 /// This is meant as a helper in writing thread-safe `Foreach`; 1629 /// actions when using `RDataFrame` after `ROOT::EnableImplicitMT()`.; 1630 /// The user-defined processing callable is able to follow different; 1631 /// *streams of processing* indexed by the first parameter.; 1632 /// `ForeachSlot` works just as well with single-thread execution: in that; 1633 /// case `slot` will always be `0`.; 1634 ///; 1635 /// ### Example usage:; 1636 /// ~~~{.cpp}; 1637 /// myDf.ForeachSlot([](unsigned int s, int i){ std::cout << ""Slot "" << s << "": ""<< i << std::endl;}, {""myIntColumn""});; 1638 /// ~~~; 1639 // clang-format on; 1640 template <typename F>; 1641 void ForeachSlot(F f, const ColumnNames_t &columns = {}); 1642 {; 1643 using ColTypes_t = TypeTraits::RemoveFirstParameter_t<typename TTraits::CallableTraits<F>::arg_types>;; 1644 constexpr auto nColumns = ColTypes_t::list_size;; 1645 ; 1646 const auto validColumnNames = GetValidatedColumnNames(nColumns, columns);; 1647 CheckAndFillDSColumns(validColumnNames, ColTypes_t());; 1648 ; 1649 using Helper_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:91312,safe,safe,91312,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['safe'],['safe']
Safety,"safe;; 10502 int is_idempotent;; 10503 int is_cacheable;; 10504};; 10505 ; 10506 ; 10507/* https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods */; 10508static const struct mg_http_method_info http_methods[] = {; 10509 /* HTTP (RFC 2616) */; 10510 {""GET"", 0, 1, 1, 1, 1},; 10511 {""POST"", 1, 1, 0, 0, 0},; 10512 {""PUT"", 1, 0, 0, 1, 0},; 10513 {""DELETE"", 0, 0, 0, 1, 0},; 10514 {""HEAD"", 0, 0, 1, 1, 1},; 10515 {""OPTIONS"", 0, 0, 1, 1, 0},; 10516 {""CONNECT"", 1, 1, 0, 0, 0},; 10517 /* TRACE method (RFC 2616) is not supported for security reasons */; 10518 ; 10519 /* PATCH method (RFC 5789) */; 10520 {""PATCH"", 1, 0, 0, 0, 0},; 10521 /* PATCH method only allowed for CGI/Lua/LSP and callbacks. */; 10522 ; 10523 /* WEBDAV (RFC 2518) */; 10524 {""PROPFIND"", 0, 1, 1, 1, 0},; 10525 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10526 * Some PROPFIND results MAY be cached, with care,; 10527 * as there is no cache validation mechanism for; 10528 * most properties. This method is both safe and; 10529 * idempotent (see Section 9.1 of [RFC2616]). */; 10530 {""MKCOL"", 0, 0, 0, 1, 0},; 10531 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10532 * When MKCOL is invoked without a request body,; 10533 * the newly created collection SHOULD have no; 10534 * members. A MKCOL request message may contain; 10535 * a message body. The precise behavior of a MKCOL; 10536 * request when the body is present is undefined,; 10537 * ... ==> We do not support MKCOL with body data.; 10538 * This method is idempotent, but not safe (see; 10539 * Section 9.1 of [RFC2616]). Responses to this; 10540 * method MUST NOT be cached. */; 10541 ; 10542 /* Methods for write access to files on WEBDAV (RFC 2518) */; 10543 {""LOCK"", 1, 1, 0, 0, 0},; 10544 {""UNLOCK"", 1, 0, 0, 0, 0},; 10545 {""PROPPATCH"", 1, 1, 0, 0, 0},; 10546 ; 10547 /* Unsupported WEBDAV Methods: */; 10548 /* COPY, MOVE (RFC 2518) */; 10549 /* + 11 methods from RFC 3253 */; 10550 /* ORDERPATCH (RFC 3648) */; 10551 /* ACL (RFC 3744) */; 10552 /* SEA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:302358,safe,safe,302358,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['safe'],['safe']
Safety,"safe;; 10503 int is_idempotent;; 10504 int is_cacheable;; 10505};; 10506 ; 10507 ; 10508/* https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods */; 10509static const struct mg_http_method_info http_methods[] = {; 10510 /* HTTP (RFC 2616) */; 10511 {""GET"", 0, 1, 1, 1, 1},; 10512 {""POST"", 1, 1, 0, 0, 0},; 10513 {""PUT"", 1, 0, 0, 1, 0},; 10514 {""DELETE"", 0, 0, 0, 1, 0},; 10515 {""HEAD"", 0, 0, 1, 1, 1},; 10516 {""OPTIONS"", 0, 0, 1, 1, 0},; 10517 {""CONNECT"", 1, 1, 0, 0, 0},; 10518 /* TRACE method (RFC 2616) is not supported for security reasons */; 10519 ; 10520 /* PATCH method (RFC 5789) */; 10521 {""PATCH"", 1, 0, 0, 0, 0},; 10522 /* PATCH method only allowed for CGI/Lua/LSP and callbacks. */; 10523 ; 10524 /* WEBDAV (RFC 2518) */; 10525 {""PROPFIND"", 0, 1, 1, 1, 0},; 10526 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10527 * Some PROPFIND results MAY be cached, with care,; 10528 * as there is no cache validation mechanism for; 10529 * most properties. This method is both safe and; 10530 * idempotent (see Section 9.1 of [RFC2616]). */; 10531 {""MKCOL"", 0, 0, 0, 1, 0},; 10532 /* http://www.webdav.org/specs/rfc4918.html, 9.1:; 10533 * When MKCOL is invoked without a request body,; 10534 * the newly created collection SHOULD have no; 10535 * members. A MKCOL request message may contain; 10536 * a message body. The precise behavior of a MKCOL; 10537 * request when the body is present is undefined,; 10538 * ... ==> We do not support MKCOL with body data.; 10539 * This method is idempotent, but not safe (see; 10540 * Section 9.1 of [RFC2616]). Responses to this; 10541 * method MUST NOT be cached. */; 10542 ; 10543 /* Methods for write access to files on WEBDAV (RFC 2518) */; 10544 {""LOCK"", 1, 1, 0, 0, 0},; 10545 {""UNLOCK"", 1, 0, 0, 0, 0},; 10546 {""PROPPATCH"", 1, 1, 0, 0, 0},; 10547 ; 10548 /* Unsupported WEBDAV Methods: */; 10549 /* COPY, MOVE (RFC 2518) */; 10550 /* + 11 methods from RFC 3253 */; 10551 /* ORDERPATCH (RFC 3648) */; 10552 /* ACL (RFC 3744) */; 10553 /* SEA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:302391,safe,safe,302391,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['safe'],['safe']
Safety,"sage on stderr and if abort is set it aborts the application. Replaces the minimal error handler of TError.h as part of the gROOT construction. TError's minimal handler is put back in place during the gROOT destruction. Noteabort() is only called if abort_bool is true and level < gErrorIgnoreLevel ; Definition at line 102 of file TErrorDefaultHandler.cxx. ◆ Error(). void Error ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case an error occurred. ; Definition at line 185 of file TError.cxx. ◆ ErrorHandler(). void ErrorHandler ; (; int ; level, . const char * ; location, . const char * ; fmt, . std::va_list ; va . ). General error handler function. It calls the user set error handler. ; Definition at line 109 of file TError.cxx. ◆ Fatal(). void Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). Use this function in case of a fatal error. It will abort the program. ; WarningFatal() will not abort the program if gErrorIgnoreLevel > kFatal; but for all reasonable settings it will abort. . Definition at line 244 of file TError.cxx. ◆ GetErrorHandler(). ErrorHandlerFunc_t GetErrorHandler ; (; ). Returns the current error handler function. ; Definition at line 100 of file TError.cxx. ◆ Info(). void Info ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function for informational messages. ; Definition at line 218 of file TError.cxx. ◆ MayNotUse(). void MayNotUse ; (; const char * ; method). This function can be used in classes that should override a certain function, but in the inherited class the function makes no sense. ; Definition at line 168 of file TError.cxx. ◆ Obsolete(). void Obsolete ; (; const char * ; function, . const char * ; asOfVers, . const char * ; removedFromVers . ). Use this function to declare a function obsolete. ; Specify as of which version the method is obsolete and as from which version it will be removed. ; Definition at line 177 of file TError.cxx. ◆ Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:6825,abort,abort,6825,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,2,['abort'],['abort']
Safety,"samples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidDistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTube.html:2594,safe,safe,2594,root/html532/TGeoTube.html,https://root.cern,https://root.cern/root/html532/TGeoTube.html,1,['safe'],['safe']
Safety,"saved in the high bits of fSeekPdir; Long64_tfSeekKeyLocation of object on file; Long64_tfSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tfVersionKey version identifier. private:. static TKey::EStatusBitskIsDirectoryFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKey(); TKey default constructor. TKey(TDirectory* motherDir); TKey default constructor. TKey(TDirectory* motherDir, const TKey& orig, UShort_t pidOffset); Copy a TKey from its original directory to the new 'motherDir'. TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir = 0); Create a TKey object to read keys.; Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; A TKey object is created to read the keys structure itself. TKey(const char* name, const char* title, const TClass* cl, Int_t nbytes, TDirectory* motherDir); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TString& name, const TString& title, const TClass* cl, Int_t nbytes, TDirectory* motherDir); Create a TKey object with the specified name, title for the given class. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const TObject* obj, const char* name, Int_t bufsize, TDirectory* motherDir); Create a TKey object for a TObject* and fill output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TKey.html:10196,avoid,avoid,10196,root/html602/TKey.html,https://root.cern,https://root.cern/root/html602/TKey.html,2,['avoid'],['avoid']
Safety,"sc.emplace_back(node ? node->GetNumber() - offset : 0);; 529 TGeoVolume *vol = node ? node->GetVolume() : topvolume;; 530 ; 531 auto &desc = fDesc[cnt++];; 532 ; 533 sortarr.emplace_back(&desc);; 534 ; 535 desc.name = node ? node->GetName() : vol->GetName();; 536 ; 537 auto shape = dynamic_cast<TGeoBBox *>(vol->GetShape());; 538 if (shape) {; 539 desc.vol = TMath::Sqrt(shape->GetDX() * shape->GetDX() + shape->GetDY() * shape->GetDY() +; 540 shape->GetDZ() * shape->GetDZ());; 541 desc.nfaces = CountShapeFaces(shape);; 542 }; 543 ; 544 CopyMaterialProperties(vol, desc);; 545 ; 546 auto chlds = node ? node->GetNodes() : vol->GetNodes();; 547 ; 548 PackMatrix(desc.matr, node ? node->GetMatrix() : nullptr);; 549 ; 550 if (chlds); 551 for (int n = 0; n <= chlds->GetLast(); ++n) {; 552 auto chld = dynamic_cast<TGeoNode *>(chlds->At(n));; 553 desc.chlds.emplace_back(chld->GetNumber() - offset);; 554 }; 555 }; 556 ; 557 // recover numbers; 558 cnt = 0;; 559 for (auto node : fNodes) {; 560 auto number = numbers[cnt++];; 561 if (node); 562 node->SetNumber(number);; 563 }; 564 ; 565 // sort in volume descent order; 566 std::sort(sortarr.begin(), sortarr.end(), [](RGeomNode *a, RGeomNode *b) { return a->vol > b->vol; });; 567 ; 568 cnt = 0;; 569 for (auto &elem : sortarr) {; 570 fSortMap.emplace_back(elem->id);; 571 elem->sortid = cnt++; // keep place in sorted array to correctly apply cut; 572 }; 573 ; 574 MarkVisible(); // set visibility flags; 575 ; 576 ProduceIdShifts();; 577}; 578 ; 579/////////////////////////////////////////////////////////////////////; 580/// Get volume for specified nodeid; 581/// If specific volume was configured, it will be returned for nodeid==0; 582 ; 583TGeoVolume *RGeomDescription::GetVolume(int nodeid); 584{; 585 auto node = fNodes[nodeid];; 586 if (node); 587 return node->GetVolume();; 588 return nodeid == 0 ? fDrawVolume : nullptr;; 589}; 590 ; 591/////////////////////////////////////////////////////////////////////; 592/// Set visibility flag f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:14779,recover,recover,14779,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['recover'],['recover']
Safety,"scribing current object ; Reimplemented from TVirtualMapFile.; Definition at line 118 of file TMapFile.h. ◆ IsFolder(). Bool_t TMapFile::IsFolder ; (; ); const. overridevirtual . Returns kTRUE in case object is a folder (i.e. contains browsable lists). ; Reimplemented from TObject.; Definition at line 1057 of file TMapFile.cxx. ◆ IsWritable(). Bool_t TMapFile::IsWritable ; (; ); const. inline . Definition at line 101 of file TMapFile.h. ◆ ls(). void TMapFile::ls ; (; Option_t * ; option = """"); const. overridevirtual . List contents of TMapFile. ; Reimplemented from TObject.; Definition at line 1103 of file TMapFile.cxx. ◆ MapToAddress(). void * TMapFile::MapToAddress ; (; ). staticprotected . Return the base address at which we would like the next TMapFile's mapped data to start. ; For now, we let the system decide (start address 0). There are a lot of issues to deal with here to make this work reasonably, including:; Avoid memory collisions with existing mapped address spaces; Reclaim address spaces when their mmalloc heaps are unmapped; When mmalloc heaps are shared between processes they have to be mapped at the same addresses in each. Once created, a mmalloc heap that is to be mapped back in must be mapped at the original address. I.e. each TMapFile will expect to be remapped at it's original address. This becomes a problem if the desired address is already in use. ; Definition at line 1231 of file TMapFile.cxx. ◆ operator delete(). void TMapFile::operator delete ; (; void * ; ptr). Need special ""operator delete"" in which we close the shared memory. ; This has to be done after the dtor chain has been finished. ; Definition at line 1247 of file TMapFile.cxx. ◆ operator new() [1/2]. void * TMapFile::operator new ; (; size_t ; sz). inline . Definition at line 81 of file TMapFile.h. ◆ operator new() [2/2]. void * TMapFile::operator new ; (; size_t ; sz, . void * ; vp . ). inline . Definition at line 83 of file TMapFile.h. ◆ operator new[]() [1/2]. void * TMapFile::op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:25455,Avoid,Avoid,25455,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['Avoid'],['Avoid']
Safety,"se class for event management and navigation.; TEveException Exception-type thrown by Eve classes.; TEveFrameBox Description of a 2D or 3D frame that can be used to visually group a set of objects.; TEveFrameBoxGL GL-renderer for TEveFrameBox class.; TEveGDoubleValuator Composite GUI element for selection of range (label, two number-entries and double-slider).; TEveGListTreeEditorFrame Composite GUI frame for parallel display of a TGListTree and TEveGedEditor.; TEveGTriVecValuator Composite GUI element for setting three numerical values (label, three number-entries).; TEveGValuator Composite GUI element for single value selection (supports label, number-entry and slider).; TEveGValuatorBase Base class for composite GUI elements for setting of numeric values.; TEveGedEditor Specialization of TGedEditor for proper update propagation to TEveManager.; TEveGedNameFrame Top name-frame used in EVE.; TEveGedNameTextButton Button for GED name-frame.; TEveGeoManagerHolder Exception-safe wrapper for temporary setting of gGeoManager variable.; TEveGeoNode Wrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement.; TEveGeoNodeEditor Editor for TEveGeoNode class.; TEveGeoPolyShape A shape with arbitrary tesselation for visualization of CSG shapes.; TEveGeoShape Wrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for NLT projections).; TEveGeoShapeExtract Globally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts.; TEveGeoShapeProjected ; TEveGeoTopNode Top-level TEveGeoNode with a pointer to TGeoManager and controls for steering of TGeoPainter.; TEveGeoTopNodeEditor Editor for TEveGeoTopNode class.; TEveGridStepper Provide discrete position coordinates for placement of objects on regular grids.; TEveGridStepperEditor Editor for TEveGridStepper class.; TEveGridStepperSubEditor Sub-edit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:58568,safe,safe,58568,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,7,['safe'],['safe']
Safety,"se energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 30568 2009-10-06 07:17:59Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_double_.html:8210,avoid,avoid,8210,root/html526/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_double_.html,1,['avoid'],['avoid']
Safety,"se energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__PxPyPzM4D_double_.html:8210,avoid,avoid,8210,root/html528/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__PxPyPzM4D_double_.html,1,['avoid'],['avoid']
Safety,"se energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__PxPyPzM4D_double_.html:8212,avoid,avoid,8212,root/html530/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__PxPyPzM4D_double_.html,1,['avoid'],['avoid']
Safety,"se energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_double_.html:8212,avoid,avoid,8212,root/html532/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_double_.html,1,['avoid'],['avoid']
Safety,"se of kNoBlock and; errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer; (EPIPE || ECONNRESET). int SendRaw(int sock, const void* buffer, int length, int flag); Send exactly length bytes from buffer. Use opt to send out-of-band; data (see TSocket). Returns the number of bytes sent or -1 in case of; error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). int SetSockOpt(int sock, int option, int val); Set socket option. int GetSockOpt(int sock, int option, int* val); Get socket option. void UnixSignal(ESignals sig, void* h); Set a signal handler for a signal. void UnixIgnoreSignal(ESignals sig, Bool_t ignore); If ignore is true ignore the specified signal, else restore previous; behaviour. void UnixSigAlarmInterruptsSyscalls(Bool_t set); When the argument is true the SIGALRM signal handler is set so that; interrupted syscalls will not be restarted by the kernel. This is; typically used in case one wants to put a timeout on an I/O operation.; By default interrupted syscalls will always be restarted (for all; signals). This can be controlled for each a-synchronous TTimer via; the method TTimer::SetInterruptSyscalls(). const char * UnixSigname(ESignals sig); Return the signal name associated with a signal. void UnixResetSignal(ESignals sig); Restore old signal handler for specified signal. void UnixResetSignals(); Restore old signal handlers. Long64_t UnixNow(); Get current time in milliseconds since 0:00 Jan 1 1995. int UnixSetitimer(Long_t ms); Set interval timer to time-out in ms milliseconds. int UnixSelect(Int_t nfds, TFdSet* readready, TFdSet* writeready, Long_t timeout); Wait for events on the file descriptors specified in the readready and; writeready masks or for timeout (in milliseconds) to occur. Returns; the number of ready descriptors, or 0 in case of timeout, or < 0 in; case of an error, with -2 being EINTR and -3 EBADF. In case of EINTR; the errno has been reset and the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:36404,timeout,timeout,36404,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,3,['timeout'],['timeout']
Safety,"se of the main TTree!"";; 1256 Error(""AddFriend"", msg, reshuffledTreeName, friendTree.GetName());; 1257 return false;; 1258 }; 1259 return true;; 1260}; 1261 ; 1262////////////////////////////////////////////////////////////////////////////////; 1263/// Add a TFriendElement to the list of friends.; 1264///; 1265/// This function:; 1266/// - opens a file if filename is specified; 1267/// - reads a Tree with name treename from the file (current directory); 1268/// - adds the Tree to the list of friends; 1269/// see other AddFriend functions; 1270///; 1271/// A TFriendElement TF describes a TTree object TF in a file.; 1272/// When a TFriendElement TF is added to the list of friends of an; 1273/// existing TTree T, any variable from TF can be referenced in a query; 1274/// to T.; 1275///; 1276/// A tree keeps a list of friends. In the context of a tree (or a chain),; 1277/// friendship means unrestricted access to the friends data. In this way; 1278/// it is much like adding another branch to the tree without taking the risk; 1279/// of damaging it. To add a friend to the list, you can use the TTree::AddFriend; 1280/// method. The tree in the diagram below has two friends (friend_tree1 and; 1281/// friend_tree2) and now has access to the variables a,b,c,i,j,k,l and m.; 1282///; 1283/// \image html ttree_friend1.png; 1284///; 1285/// The AddFriend method has two parameters, the first is the tree name and the; 1286/// second is the name of the ROOT file where the friend tree is saved.; 1287/// AddFriend automatically opens the friend file. If no file name is given,; 1288/// the tree called ft1 is assumed to be in the same file as the original tree.; 1289///; 1290/// tree.AddFriend(""ft1"",""friendfile1.root"");; 1291/// If the friend tree has the same name as the original tree, you can give it; 1292/// an alias in the context of the friendship:; 1293///; 1294/// tree.AddFriend(""tree1 = tree"",""friendfile1.root"");; 1295/// Once the tree has friends, we can use TTree::Draw as if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:45831,risk,risk,45831,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['risk'],['risk']
Safety,"se {; 3536 fprintf(file, ""%s(const_cast<%s &>( rhs ).%s)\n"",element->GetName(),protoname.Data(),element->GetName());; 3537 }; 3538 }; 3539 }; 3540 }; 3541 fprintf(file,""{\n"");; 3542 fprintf(file,"" // This is NOT a copy constructor. This is actually a move constructor (for stl container's sake).\n"");; 3543 fprintf(file,"" // Use at your own risk!\n"");; 3544 fprintf(file,"" (void)rhs; // avoid warning about unused parameter\n"");; 3545 ; 3546 R__WriteMoveBodyPointersArrays(file, protoname, next);; 3547}; 3548 ; 3549////////////////////////////////////////////////////////////////////////////////; 3550/// Write down the body of the 'move' constructor.; 3551 ; 3552static void R__WriteOddOperatorEqualBody(FILE *file, const TString &protoname, TIter &next); 3553{; 3554 fprintf(file,""{\n"");; 3555 fprintf(file,"" // This is NOT a copy operator=. This is actually a move operator= (for stl container's sake).\n"");; 3556 fprintf(file,"" // Use at your own risk!\n"");; 3557 fprintf(file,"" (void)rhs; // avoid warning about unused parameter\n"");; 3558 ; 3559 TStreamerElement *element = 0;; 3560 next.Reset();; 3561 while ((element = (TStreamerElement*)next())) {; 3562 if (element->IsBase()) {; 3563 fprintf(file, "" %s::operator=(const_cast<%s &>( rhs ));\n"", element->GetName(),protoname.Data());; 3564 } else {; 3565 if (element->GetArrayLength() <= 1) {; 3566 if (R__IsUniquePtr(element)) {; 3567 fprintf(file, "" %s = std::move((const_cast<%s &>( rhs ).%s));\n"",element->GetName(),protoname.Data(),element->GetName());; 3568 } else {; 3569 fprintf(file, "" %s = (const_cast<%s &>( rhs ).%s);\n"",element->GetName(),protoname.Data(),element->GetName());; 3570 }; 3571 }; 3572 }; 3573 }; 3574 ; 3575 R__WriteMoveBodyPointersArrays(file, protoname, next);; 3576 ; 3577 fprintf(file, "" return *this;\n"");; 3578}; 3579 ; 3580////////////////////////////////////////////////////////////////////////////////; 3581 ; 3582static void R__WriteDestructorBody(FILE *file, TIter &next); 3583{; 3584 TStreamerElement *e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:144239,risk,risk,144239,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,2,"['avoid', 'risk']","['avoid', 'risk']"
Safety,"se(). Int_t TBasket::ReadBasketBuffersUncompressedCase ; (; ). private . By-passing buffer unzipping has been requested and is possible (only 1 entry in this basket). ; Definition at line 358 of file TBasket.cxx. ◆ ReadBasketBuffersUnzip(). Int_t TBasket::ReadBasketBuffersUnzip ; (; char * ; buffer, . Int_t ; size, . bool ; mustFree, . TFile * ; file . ). private . We always create the TBuffer for the basket but it hold the buffer from the cache. ; Definition at line 380 of file TBasket.cxx. ◆ ReadBasketBytes(). Int_t TBasket::ReadBasketBytes ; (; Long64_t ; pos, . TFile * ; file . ). Read basket buffers in memory and cleanup. ; Read first bytes of a logical record starting at position pos return record length (first 4 bytes of record). ; Definition at line 698 of file TBasket.cxx. ◆ ReadResetBuffer(). void TBasket::ReadResetBuffer ; (; Int_t ; basketnumber). protectedvirtual . Reset the read basket TBuffer memory allocation if needed. ; This allows to reduce the number of memory allocation while avoiding to always use the maximum size. ; Definition at line 733 of file TBasket.cxx. ◆ ResetEntryOffset(). void TBasket::ResetEntryOffset ; (; ). private . Definition at line 441 of file TBasket.cxx. ◆ SetBranch(). void TBasket::SetBranch ; (; TBranch * ; branch). inline . Definition at line 148 of file TBasket.h. ◆ SetNevBufSize(). void TBasket::SetNevBufSize ; (; Int_t ; n). inline . Definition at line 149 of file TBasket.h. ◆ SetReadMode(). void TBasket::SetReadMode ; (; ). virtual . Set read mode of basket. ; Definition at line 925 of file TBasket.cxx. ◆ SetWriteMode(). void TBasket::SetWriteMode ; (; ). virtual . Set write mode of basket. ; Definition at line 934 of file TBasket.cxx. ◆ Streamer(). void TBasket::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TObject.; Reimplemented in TBasketSQL.; Definition at line 943 of file TBasket.cxx. ◆ StreamerNVirtual(). void TBasket::StreamerNVirtual ; (; TBuffer & ; ClassDef_Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasket.html:28485,avoid,avoiding,28485,doc/master/classTBasket.html,https://root.cern,https://root.cern/doc/master/classTBasket.html,1,['avoid'],['avoiding']
Safety,"seconds.; 5914 * This will allow to stop the server after some seconds, instead; 5915 * of having to wait for a long socket timeout. */; 5916 int ms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5917 ; 5918 int check_pollerr = 0;; 5919 if ((n == 1) && ((pfd[0].events & POLLERR) == 0)) {; 5920 /* If we wait for only one file descriptor, wait on error as well */; 5921 pfd[0].events |= POLLERR;; 5922 check_pollerr = 1;; 5923 }; 5924 ; 5925 do {; 5926 int result;; 5927 ; 5928 if (!STOP_FLAG_IS_ZERO(&*stop_flag)) {; 5929 /* Shut down signal */; 5930 return -2;; 5931 }; 5932 ; 5933 if ((milliseconds >= 0) && (milliseconds < ms_now)) {; 5934 ms_now = milliseconds;; 5935 }; 5936 ; 5937 result = poll(pfd, n, ms_now);; 5938 if (result != 0) {; 5939 /* Poll returned either success (1) or error (-1).; 5940 * Forward both to the caller. */; 5941 if ((check_pollerr); 5942 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5943 == POLLERR)) {; 5944 /* One and only file descriptor returned error */; 5945 return -1;; 5946 }; 5947 return result;; 5948 }; 5949 ; 5950 /* Poll returned timeout (0). */; 5951 if (milliseconds > 0) {; 5952 milliseconds -= ms_now;; 5953 }; 5954 ; 5955 } while (milliseconds > 0);; 5956 ; 5957 /* timeout: return 0 */; 5958 return 0;; 5959}; 5960 ; 5961 ; 5962/* Write data to the IO channel - opened file descriptor, socket or SSL; 5963 * descriptor.; 5964 * Return value:; 5965 * >=0 .. number of bytes successfully written; 5966 * -1 .. timeout; 5967 * -2 .. error; 5968 */; 5969static int; 5970push_inner(struct mg_context *ctx,; 5971 FILE *fp,; 5972 SOCKET sock,; 5973 SSL *ssl,; 5974 const char *buf,; 5975 int len,; 5976 double timeout); 5977{; 5978 uint64_t start = 0, now = 0, timeout_ns = 0;; 5979 int n, err;; 5980 unsigned ms_wait = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5981 ; 5982#if defined(_WIN32); 5983 typedef int len_t;; 5984#else; 5985 typedef size_t len_t;; 5986#endif; 5987 ; 5988 if (timeout > 0) {; 5989 now = mg_get_current_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:174671,timeout,timeout,174671,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['timeout'],['timeout']
Safety,"seconds.; 5915 * This will allow to stop the server after some seconds, instead; 5916 * of having to wait for a long socket timeout. */; 5917 int ms_now = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5918 ; 5919 int check_pollerr = 0;; 5920 if ((n == 1) && ((pfd[0].events & POLLERR) == 0)) {; 5921 /* If we wait for only one file descriptor, wait on error as well */; 5922 pfd[0].events |= POLLERR;; 5923 check_pollerr = 1;; 5924 }; 5925 ; 5926 do {; 5927 int result;; 5928 ; 5929 if (!STOP_FLAG_IS_ZERO(&*stop_flag)) {; 5930 /* Shut down signal */; 5931 return -2;; 5932 }; 5933 ; 5934 if ((milliseconds >= 0) && (milliseconds < ms_now)) {; 5935 ms_now = milliseconds;; 5936 }; 5937 ; 5938 result = poll(pfd, n, ms_now);; 5939 if (result != 0) {; 5940 /* Poll returned either success (1) or error (-1).; 5941 * Forward both to the caller. */; 5942 if ((check_pollerr); 5943 && ((pfd[0].revents & (POLLIN | POLLOUT | POLLERR)); 5944 == POLLERR)) {; 5945 /* One and only file descriptor returned error */; 5946 return -1;; 5947 }; 5948 return result;; 5949 }; 5950 ; 5951 /* Poll returned timeout (0). */; 5952 if (milliseconds > 0) {; 5953 milliseconds -= ms_now;; 5954 }; 5955 ; 5956 } while (milliseconds > 0);; 5957 ; 5958 /* timeout: return 0 */; 5959 return 0;; 5960}; 5961 ; 5962 ; 5963/* Write data to the IO channel - opened file descriptor, socket or SSL; 5964 * descriptor.; 5965 * Return value:; 5966 * >=0 .. number of bytes successfully written; 5967 * -1 .. timeout; 5968 * -2 .. error; 5969 */; 5970static int; 5971push_inner(struct mg_context *ctx,; 5972 FILE *fp,; 5973 SOCKET sock,; 5974 SSL *ssl,; 5975 const char *buf,; 5976 int len,; 5977 double timeout); 5978{; 5979 uint64_t start = 0, now = 0, timeout_ns = 0;; 5980 int n, err;; 5981 unsigned ms_wait = SOCKET_TIMEOUT_QUANTUM; /* Sleep quantum in ms */; 5982 ; 5983#if defined(_WIN32); 5984 typedef int len_t;; 5985#else; 5986 typedef size_t len_t;; 5987#endif; 5988 ; 5989 if (timeout > 0) {; 5990 now = mg_get_current_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:174703,timeout,timeout,174703,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['timeout'],['timeout']
Safety,"section(const char* expr1, const char* expr2); Constructor. TGeoIntersection(TGeoShape* left, TGeoShape* right, TGeoMatrix* lmat = 0, TGeoMatrix* rmat = 0); Constructor providing pointers to components. ~TGeoIntersection(); Destructor; --- deletion of components handled by TGeoManager class. void ComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); Compute bounding box corresponding to a intersection of two shapes. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. Bool_t Contains(const Double_t* point) const; Find if a intersection of two shapes contains a given point. Int_t DistanceToPrimitive(Int_t px, Int_t py); Compute minimum distance to shape vertices. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point inside to the shape boundary. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point outside to the shape. Int_t GetNpoints(); Returns number of vertices for the composite shape described by this intersection. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; Compute safety distance for a union node;. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void Sizeof3D() const; Register 3D size of this shape. TGeoBoolNode& operator=(const TGeoIntersection& ). EGeoBoolType GetBooleanOperator() const. TGeoIntersection(); constructors. » Author: Andrei Gheata 30/05/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoIntersection.html:10219,safe,safe,10219,root/html604/TGeoIntersection.html,https://root.cern,https://root.cern/root/html604/TGeoIntersection.html,3,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"section(const char* expr1, const char* expr2); Constructor. TGeoIntersection(TGeoShape* left, TGeoShape* right, TGeoMatrix* lmat = 0, TGeoMatrix* rmat = 0); Constructor providing pointers to components. ~TGeoIntersection(); Destructor; --- deletion of components handled by TGeoManager class. void ComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); Compute bounding box corresponding to a intersection of two shapes. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. Bool_t Contains(const Double_t* point) const; Find if a intersection of two shapes contains a given point. Int_t DistanceToPrimitive(Int_t px, Int_t py); Compute minimum distance to shape vertices. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point inside to the shape boundary. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point outside to the shape. Int_t GetNpoints(); Returns number of vertices for the composite shape described by this intersection. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; Compute safety distance for a union node;. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void Sizeof3D() const; Register 3D size of this shape. TGeoBoolNode& operator=(const TGeoIntersection& ). EGeoBoolType GetBooleanOperator() const. TGeoIntersection(); constructors. » Author: Andrei Gheata 30/05/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoIntersection.html:10219,safe,safe,10219,root/html602/TGeoIntersection.html,https://root.cern,https://root.cern/root/html602/TGeoIntersection.html,3,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"sed in degrees.; A poly-line is a set of joint segments. It is defined by a set of N points in a 2D space. Its constructor is:; TPolyLine(Int_t n,Double_t* x,Double_t* y,Option_t* option); Where n is the number of points, and x and y are arrays of n elements with the coordinates of the points. TPolyLine can be used by it self, but is also a base class for other objects, such as curly arcs.; 9.4.2 Circles and Ellipses; An ellipse can be truncated and rotated. It is defined by its center (x1,y1) and two radii r1 and r2. A minimum and maximum angle may be specified (phimin,phimax). The ellipse may be rotated with an angle theta. All these angles are in degrees. The attributes of the outline line are set via TAttLine, of the fill area - via TAttFill class. They are described in “Graphical Objects Attributes”. Different types of ellipses. When an ellipse sector is drawn only, the lines between the center and the end points of the sector are drawn by default. By specifying the drawn option “only”, these lines can be avoided. Alternatively, the method SetNoEdges() can be called. To remove completely the ellipse outline, specify zero (0) as a line style.; The TEllipse constructor is:; TEllipse(Double_t x1, Double_t y1, Double_t r1, Double_t r2,; Double_t phimin, Double_t phimax, Double_t theta); An ellipse may be created with:; root[] e = new TEllipse(0.2,0.2,0.8,0.3); root[] e->Draw(); 9.4.3 Rectangles; The class TBox defines a rectangle. It is a base class for many different higher-level graphical primitives. Its bottom left coordinates x1, y1 and its top right coordinates x2, y2, defines a box. The constructor is:; TBox(Double_t x1,Double_t y1,Double_t x2,Double_t y2); It may be used as in:; root[] b = new TBox(0.2,0.2,0.8,0.3); root[] b->SetFillColor(5); root[] b->Draw(). A rectangle with a border. A TWbox is a rectangle (TBox) with a border size and a border mode. The attributes of the outline line and of the fill area are described in “Graphical Objects Attributes”; 9.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:321961,avoid,avoided,321961,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoided']
Safety,"see AddFriend(const char *, const char *). Long64_t AutoSave(Option_t* option = """"); AutoSave tree header every fAutoSave bytes. When large Trees are produced, it is safe to activate the AutoSave; procedure. Some branches may have buffers holding many entries.; AutoSave is automatically called by TTree::Fill when the number of bytes; generated since the previous AutoSave is greater than fAutoSave bytes.; This function may also be invoked by the user, for example every; N entries.; Each AutoSave generates a new key on the file.; Once the key with the tree header has been written, the previous cycle; (if any) is deleted. Note that calling TTree::AutoSave too frequently (or similarly calling; TTree::SetAutoSave with a small value) is an expensive operation.; You should make tests for your own application to find a compromise; between speed and the quantity of information you may loose in case of; a job crash. In case your program crashes before closing the file holding this tree,; the file will be automatically recovered when you will connect the file; in UPDATE mode.; The Tree will be recovered at the status corresponding to the last AutoSave. if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; This allows another process to analyze the Tree while the Tree is being filled. if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; the current basket are closed-out and written to disk individually. By default the previous header is deleted after having written the new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occurred while writing; the header to the file. How to write a Tree in one process and view it from another process. The follo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:40687,recover,recovered,40687,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['recover'],['recovered']
Safety,"see AddFriend(const char *, const char *). Long64_t AutoSave(Option_t* option = """"); AutoSave tree header every fAutoSave bytes. When large Trees are produced, it is safe to activate the AutoSave; procedure. Some branches may have buffers holding many entries.; AutoSave is automatically called by TTree::Fill when the number of bytes; generated since the previous AutoSave is greater than fAutoSave bytes.; This function may also be invoked by the user, for example every; N entries.; Each AutoSave generates a new key on the file.; Once the key with the tree header has been written, the previous cycle; (if any) is deleted. Note that calling TTree::AutoSave too frequently (or similarly calling; TTree::SetAutoSave with a small value) is an expensive operation.; You should make tests for your own application to find a compromize; between speed and the quantity of information you may loose in case of; a job crash. In case your program crashes before closing the file holding this tree,; the file will be automatically recovered when you will connect the file; in UPDATE mode.; The Tree will be recovered at the status corresponding to the last AutoSave. if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; This allows another process to analyze the Tree while the Tree is being filled. if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; the current basket are closed-out and written to disk individually. By default the previous header is deleted after having written the new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occured while writing; the header to the file. How to write a Tree in one process and view it from another process. The follow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:38542,recover,recovered,38542,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['recover'],['recovered']
Safety,"semiaxis length. TGeoParaboloid(const char* name, Double_t rlo, Double_t rhi, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoParaboloid(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = rlo; param[1] = rhi; param[2] = dz. ~TGeoParaboloid(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside the elliptical tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each vertex. Double_t DistToParaboloid(Double_t* point, Double_t* dir) const; Compute distance from a point to the parabola given by:; z = a*rsq + b; rsq = x*x+y*y. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the paraboloid. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the paraboloid and safe distance. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the paraboloid along one axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void InspectShape() const; print shape parameters. TBuffer3D * MakeBuffer3D() const; Creates a TBuffer3D describing *this* shape.; Coordinates are in local reference frame. void SetSegsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoParaboloid.html:12998,safe,safe,12998,root/html528/TGeoParaboloid.html,https://root.cern,https://root.cern/root/html528/TGeoParaboloid.html,1,['safe'],['safe']
Safety,"sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. void ReleaseMonitor(TMonitor* mon); Release the used monitor to be used, making sure to delete newly created; monitors. Int_t Collect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:42135,timeout,timeout,42135,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,9,['timeout'],['timeout']
Safety,"sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. void ReleaseMonitor(TMonitor* mon); Release the used monitor to be used, making sure to delete newly created; monitors. Int_t Collect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection.; Collect also stops its execution from time to time to check for new; workers in Dynamic Startup mode. Int_t PollForNewWorkers(); Asks the PROOF ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:45991,timeout,timeout,45991,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,9,['timeout'],['timeout']
Safety,"ser (Firefox, Chrome, Opera, Safari, IE11) and browse objects created in application. By default, the server can access files, canvases, and histograms via the gROOT pointer. All those objects can be displayed with JSROOT graphics.; There is a server snapshot of running macro tutorials/http/httpserver.C from ROOT tutorials.; One could specify several options when creating http server. They could be add as additional URL parameters to the constructor arguments like:; auto serv = new THttpServer(""http:8080?loopback&thrds=2"");; Following URL parameters are supported:. Name; Description. thrds=N; number of threads used by the civetweb (default is 10). top=name; configure top name, visible in the web browser. auth_file=filename; authentication file name, created with htdigets utility. auth_domain=domain; authentication domain. loopback; bind specified port to loopback 127.0.0.1 address. debug; enable debug mode, server returns html page with request info. websocket_timeout=tm; set web sockets timeout in seconds (default 300). websocket_disable; disable web sockets handling (default enabled). cors=domain; define value for CORS header “Access-Control-Allow-Origin” in server response. log=filename; configure civetweb log file. max_age=value; configures “Cache-Control: max_age=value” http header for all file-related requests, default 3600. nocache; try to fully disable cache control for file requests. winsymlinks=no; do not resolve symbolic links on file system (Windows only), default true. dirlisting=no; enable/disable directory listing for browsing filesystem (default no). If necessary, one could bind http server to specific IP address like:; new THttpServer(""http:192.168.1.17:8080""); One also can provide extra arguments for THttpServer itself:. Name; Description. readonly, ro; use server in read-only mode (default). readwrite, rw; use server in read-write mode. global; let scan global directories for canvases and files (default). noglobal; disable scan of global directori",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:2161,timeout,timeout,2161,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,1,['timeout'],['timeout']
Safety,"sers in other groups, and on the analysis; of historical logging data (i.e. usage of CPU by the group in a; previous time slot, as recorded in TPerfStats::WriteQueryLog()). Currently the group priority is obtained by a query in a SQL DB; table proofpriority, which has the format:; CREATE TABLE proofpriority (; id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,; group VARCHAR(32) NOT NULL,; priority INT; ). Int_t SendAsynMessage(const char* msg, Bool_t lf = kTRUE); Send an asychronous message to the master / client .; Masters will forward up the message to the client.; The client prints 'msg' of stderr and adds a '\n'/'\r' depending on; 'lf' being kTRUE (default) or kFALSE.; Returns the return value from TSocket::Send(TMessage &) . void FlushLogFile(); Reposition the read pointer in the log file to the very end.; This allows to ""hide"" useful debug messages during normal operations; while preserving the possibility to have them in case of problems. void HandleException(Int_t sig); Exception handler: we do not try to recover here, just exit. Int_t HandleDataSets(TMessage* mess, TString* slb = 0); Handle here requests about datasets. void HandleSubmerger(TMessage* mess); Handle a message of type kPROOF_SUBMERGER. void HandleFork(TMessage* mess); Cloning itself via fork. Not implemented. Int_t Fork(); Fork a child.; If successful, return 0 in the child process and the child pid in the parent; process. The child pid is registered for reaping.; Return <0 in the parent process in case of failure. void ResolveKeywords(TString& fname, const char* path = 0); Replace <ord>, <user>, <u>, <group>, <stag>, <qnum> and <file> placeholders in fname. Int_t GetSessionStatus(); Return the status of this session:; 0 idle; 1 running; 2 being terminated (currently unused); 3 queued; 4 idle timed-out (not set in here but in TIdleTOTimer::Notify); This is typically run in the reader thread, so access needs to be protected. Int_t UpdateSessionStatus(Int_t xst = -1); Update the session status in the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:28774,recover,recover,28774,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,1,['recover'],['recover']
Safety,"set in ASCII form to given stream. A line is written for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent=kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent=kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent=kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Mon Dec 7 13:45:58 2009 » Last generated: 2009-12-07 13:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:21945,abort,abort,21945,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,1,['abort'],['abort']
Safety,"set. Efficient analysis in Python; Class reference. Cheat sheet; These are the operations which can be performed with RDataFrame. Transformations; Transformations are a way to manipulate the data. Transformation Description . Alias() Introduce an alias for a particular column name. . DefaultValueFor() If the value of the input column is missing, provide a default value instead. . Define() Create a new column in the dataset. Example usages include adding a column that contains the invariant mass of a particle, or a selection of elements of an array (e.g. only the pts of ""good"" muons). . DefinePerSample() Define a new column that is updated when the input sample changes, e.g. when switching tree being processed in a chain. . DefineSlot() Same as Define(), but the user-defined function must take an extra unsigned int slot as its first parameter. slot will take a different value, 0 to nThreads - 1, for each thread of execution. This is meant as a helper in writing thread-safe Define() transformation when using RDataFrame after ROOT::EnableImplicitMT(). DefineSlot() works just as well with single-thread execution: in that case slot will always be 0. . DefineSlotEntry() Same as DefineSlot(), but the entry number is passed in addition to the slot number. This is meant as a helper in case the expression depends on the entry number. For details about entry numbers in multi-threaded runs, see here. . Filter() Filter rows based on user-defined conditions. . FilterAvailable() Specialized Filter. If the value of the input column is available, keep the entry, otherwise discard it. . FilterMissing() Specialized Filter. If the value of the input column is missing, keep the entry, otherwise discard it. . Range() Filter rows based on entry number (single-thread only). . Redefine() Overwrite the value and/or type of an existing column. See Define() for more information. . RedefineSlot() Overwrite the value and/or type of an existing column. See DefineSlot() for more information. . Rede",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:3604,safe,safe,3604,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['safe'],['safe']
Safety,"setBit(UInt_t f); virtual voidRestorePreviousQuery(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tSavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCurrentQuery(TQueryResult* q); virtual voidSetDispatchTimer(Bool_t on = kTRUE); virtual voidSetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetExitStatus(TVirtualProofPlayer::EExitStatus); virtual voidSetInitTime(); virtual voidSetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOutputFilePath(const char* fp); virtual voidSetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TVirtualProofPlayer(); TVirtualProofPlayer(const TVirtualProofPlayer&); virtual voidUpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidUpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualProofPlayer.html:10219,abort,abort,10219,root/html602/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html602/TVirtualProofPlayer.html,2,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"seudo-rapidity.; Users can define the Vectors according to the coordinate type which is most efficient for their use. Transformations between the various coordinate systems are available through copy constructors or the assignment operator =. The coordinate system classes are templated on the scalar type for maximum flexibility, and to minimize memory usage for some use cases. Coordinate System Tag; The 2D and 3D point and vector classes can be associated to a tag defining the coordinate system. This can be used to distinguish between vectors of different coordinate systems like global or local vectors. The coordinate system tag is a template parameter of the ROOT::Math::DisplacementVector3D (and ROOT::Math::DisplacementVector2D) and ROOT::Math::PositionVector3D (and ROOT::Math::PositionVector2D) classes. A default tag, ROOT::Math::DefaultCoordinateSystemTag, exists for users who don't need this functionality. Concrete Vector typedefs; To avoid exposing templated parameters to the users, typedefs are defined for all types of vectors based an doubles and floats. The table below lists the double versions; the float counterpart ends on an extra F, such as ROOT::Math::XYPointF instead of ROOT::Math::XYPoint. Point2D; Type definitions for points in two dimensions, based on ROOT::Math::PositionVector2D, are defined by Math/Point2D.h:. ROOT::Math::XYPoint vector based on x,y coordinates (cartesian); ROOT::Math::Polar2DPoint vector based on r,phi coordinates (polar). Vector2D; Type definitions for vectors in two dimensions, based on ROOT::Math::DisplacementVector2D, are defined by Math/Vector2D.h:. ROOT::Math::XYVector vector based on x,y coordinates (cartesian); ROOT::Math::Polar2DVector vector based on r,phi coordinates (polar). Point3D; Type definitions for points in three dimensions, based on ROOT::Math::PositionVector3D, are defined by Math/Point3D.h:. ROOT::Math::XYZPoint point based on x,y,z coordinates (cartesian); ROOT::Math::Polar3DPoint point based on r,theta,phi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__GenVector.html:3486,avoid,avoid,3486,doc/master/group__GenVector.html,https://root.cern,https://root.cern/doc/master/group__GenVector.html,1,['avoid'],['avoid']
Safety,"sformation package.Definition TGeoMatrix.h:38; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoShape::Bigstatic Double_t Big()Definition TGeoShape.h:87; TGeoTrapDefinition TGeoArb8.h:96; TGeoTrap::~TGeoTrap~TGeoTrap() override; TGeoTrap::TGeoTrapTGeoTrap(const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); TGeoTrap::fTl2Double_t fTl2Definition TGeoArb8.h:107; TGeoTrap::GetTl1Double_t GetTl1() constDefinition TGeoArb8.h:134; TGeoTrap::GetPhiDouble_t GetPhi() constDefinition TGeoArb8.h:131; TGeoTrap::fBl2Double_t fBl2Definition TGeoArb8.h:106; TGeoTrap::fAlpha2Double_t fAlpha2Definition TGeoArb8.h:108; TGeoTrap::SetDimensionsvoid SetDimensions(Double_t *param) override; TGeoTrap::DistFromInsideDouble_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override; TGeoTrap::SafetyDouble_t Safety(const Double_t *point, Bool_t in=kTRUE) const override; TGeoTrap::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave a primitive as a C++ statement(s) on output stream ""out"".; TGeoTrap::fBl1Double_t fBl1Definition TGeoArb8.h:102; TGeoTrap::DistFromInside_vvoid DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override; TGeoTrap::fH1Double_t fH1Definition TGeoArb8.h:101; TGeoTrap::Safety_vvoid Safety_v(const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override; TGeoTrap::fPhiDouble_t fPhiDefinition TGeoArb8.h:100; TGeoTrap::GetAlpha2Double_t GetAlpha2() constDefinition TGeoArb8.h:139; TGeoTrap::GetThetaDouble_t GetTheta() constDefinition TGeoArb8.h:130; TGeoTrap::TGeoTrapTGeoTrap(); TGeoTrap::TGeoTrapTGeoTrap(Double_t dz, Double_t theta, Double_t phi); TGeoTrap::fTl1Double_t fTl1Definition TGeoArb8.h:103; TGeoTrap::f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoArb8_8h_source.html:18009,safe,safe,18009,doc/master/TGeoArb8_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoArb8_8h_source.html,2,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"sh_back(TMath::Max( (UInt_t)V[ivar].Length(), minL ));; 952 maxL = TMath::Max( vLengths.back(), maxL );; 953 }; 954 ; 955 // count column length; 956 UInt_t clen = maxL+1;; 957 for (UInt_t icol=0; icol<nvar; icol++) clen += vLengths[icol]+1;; 958 ; 959 // bar line; 960 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 961 logger << Endl;; 962 ; 963 // title bar; 964 logger << setw(maxL+1) << "" "";; 965 for (UInt_t icol=0; icol<nvar; icol++) logger << setw(vLengths[icol]+1) << V[icol];; 966 logger << Endl;; 967 ; 968 // the numbers; 969 for (UInt_t irow=0; irow<nvar; irow++) {; 970 logger << setw(maxL) << V[irow] << "":"";; 971 for (UInt_t icol=0; icol<nvar; icol++) {; 972 logger << setw(vLengths[icol]+1) << TString::Format( ""%+1.3f"", M(irow,icol) );; 973 }; 974 logger << Endl;; 975 }; 976 ; 977 // bar line; 978 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 979 logger << Endl;; 980}; 981 ; 982////////////////////////////////////////////////////////////////////////////////; 983/// formatted output of matrix (with labels); 984 ; 985void TMVA::Tools::FormattedOutput( const TMatrixD& M,; 986 const std::vector<TString>& vert, const std::vector<TString>& horiz,; 987 MsgLogger& logger ); 988{; 989 // sanity check: matrix must be quadratic; 990 UInt_t nvvar = vert.size();; 991 UInt_t nhvar = horiz.size();; 992 ; 993 // get length of each variable, and maximum length; 994 UInt_t minL = 7;; 995 UInt_t maxL = minL;; 996 std::vector<UInt_t> vLengths;; 997 for (UInt_t ivar=0; ivar<nvvar; ivar++) {; 998 vLengths.push_back(TMath::Max( (UInt_t)vert[ivar].Length(), minL ));; 999 maxL = TMath::Max( vLengths.back(), maxL );; 1000 }; 1001 ; 1002 // count column length; 1003 UInt_t minLh = 7;; 1004 UInt_t maxLh = minLh;; 1005 std::vector<UInt_t> hLengths;; 1006 for (UInt_t ivar=0; ivar<nhvar; ivar++) {; 1007 hLengths.push_back(TMath::Max( (UInt_t)horiz[ivar].Length(), minL ));; 1008 maxLh = TMath::Max( hLengths.back(), maxLh );; 1009 }; 1010 ; 1011 UInt_t clen = maxLh+1;; 1012 for (UInt_t icol=0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:34159,sanity check,sanity check,34159,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['sanity check'],['sanity check']
Safety,"shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2); 2: Safety test. Sample points inside the bounding and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; Distance to boundary is bigger than safety. void ShapeDistances(TGeoShape* shape, Int_t nsamples, Option_t* option); Test TGeoShape::DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute d1 = DistFromInside and move the; point on the boundary. Compute DistFromOutside and propagate with d2 making sure that; the shape is not re-entered. Swap direction and call DistFromOutside that; should fall back on the same point on the boundary (at d2). Propagate back on boundary; then compute DistFromInside that should be bigger than d1.; Plot d-(d1+d2). void ShapeSafety(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of safe distance for a given shape.; Sample points inside the 2x bounding box and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; distance to boundary is bigger than safety. void ShapeNormal(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of the normal for a given shape.; Sample points inside the shape. Generate directions randomly in cos(theta); and propagate to boundary. Compute normal and safety at crossing point, plot; the point and generate a random direction so that (dir) dot (norm) <0. TH2F * LegoPlot(Int_t ntheta = 60, Double_t themin = 0., Double_t themax = 180., Int_t nphi = 90, Double_t phimin = 0., Double_t phimax = 360., Double_t rmin = 0., Double_t rmax = 9999999, Option_t* option = """"); Generate a lego plot fot the top volume, according to option. void RandomPoints(TGeoVolume* vol, Int_t npoints, Option_t* option); Draw random points in the bounding box of a volume. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoChecker.html:15707,safe,safe,15707,root/html530/TGeoChecker.html,https://root.cern,https://root.cern/root/html530/TGeoChecker.html,5,['safe'],['safe']
Safety,"should have full path to the item. ;  ; Bool_t CreateItem (const char *fullname, const char *title);  Create item element. ;  ; void CreateOwnTopFolder ();  Create own TFolder structures independent from gROOT This allows to have many independent TRootSniffer instances At the same time such sniffer lost access to all global lists and folders. ;  ; virtual void * FindInHierarchy (const char *path, TClass **cl=nullptr, TDataMember **member=nullptr, Int_t *chld=nullptr);  Search element with specified path Returns pointer on element Optionally one could obtain element class, member description and number of childs. ;  ; TObject * FindTObjectInHierarchy (const char *path);  Search element in hierarchy, derived from TObject. ;  ; const char * GetAutoLoad () const;  return name of configured autoload scripts (or 0) ;  ; const char * GetItemField (const char *fullname, const char *name);  Return field for specified item. ;  ; virtual ULong_t GetItemHash (const char *itemname);  Get hash function for specified item used to detect any changes in the specified object. ;  ; virtual ULong_t GetStreamerInfoHash ();  ; TFolder * GetTopFolder (Bool_t force=kFALSE);  Returns top TFolder instance for the sniffer. ;  ; Bool_t HasRestriction (const char *item_name);  Made fast check if item with specified name is in restriction list If returns true, requires precise check with CheckRestriction() method. ;  ; TClass * IsA () const override;  ; Bool_t IsReadOnly () const;  Returns readonly mode. ;  ; Bool_t IsScanGlobalDir () const;  Returns true when sniffer allowed to scan global directories. ;  ; virtual Bool_t IsStreamerInfoItem (const char *);  ; Bool_t Produce (const std::string &path, const std::string &file, const std::string &options, std::string &res);  Method produce different kind of data out of object. ;  ; Bool_t RegisterCommand (const char *cmdname, const char *method, const char *icon);  Register command which can be executed from web interface. ;  ; Bool_t RegisterObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:2251,detect,detect,2251,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,1,['detect'],['detect']
Safety,"shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to gStyle->SetOptFit(111). Statistics box editing; The following example show how to remove and add a line in a statistics box.; ; TCanvas *statsEditing() {; // Create and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();; ; // Retrieve the stat box; TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *listOfLines = ps->GetListOfLines();; ; // Remove the RMS line; TText *tconst = ps->GetLineWith(""RMS"");; listOfLines->Remove(tconst);; ; // Add a new line in the stat box.; // Note that ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->SetTextColor(kRed);; listOfLines->Add(myt);; ; // the following line is needed to avoid that the automatic redrawing of stats; h->SetStats(0);; ; se->Modified();; return se;; }; kRed@ kRedDefinition Rtypes.h:66; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatevoid Update() overrideUpdate canvas pad buffers.Definition TCanvas.cxx:2489; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveStats.html:7713,avoid,avoid,7713,doc/master/classTPaveStats.html,https://root.cern,https://root.cern/doc/master/classTPaveStats.html,1,['avoid'],['avoid']
Safety,"sian PDF"", y, meany, sigmay); ; # Construct uncorrelated product pdf; # -------------------------------------------------------------------; ; # Multiply gaussx and gaussy into a two-dimensional pdf gaussxy; gaussxy = ROOT.RooProdPdf(""gaussxy"", ""gaussx*gaussy"", [gaussx, gaussy]); ; # Sample pdf, plot projection on x and y; # ---------------------------------------------------------------------------; ; # Generate 10000 events in x and y from gaussxy; data = gaussxy.generate({x, y}, 10000); ; # Plot x distribution of data and projection of gaussxy x = Int(dy); # gaussxy(x,y); xframe = x.frame(Title=""X projection of gauss(x)*gauss(y)""); data.plotOn(xframe); gaussxy.plotOn(xframe); ; # Plot x distribution of data and projection of gaussxy y = Int(dx); # gaussxy(x,y); yframe = y.frame(Title=""Y projection of gauss(x)*gauss(y)""); data.plotOn(yframe); gaussxy.plotOn(yframe); ; # Make canvas and draw ROOT.RooPlots; c = ROOT.TCanvas(""rf304_uncorrprod"", ""rf304_uncorrprod"", 800, 400); c.Divide(2); c.cd(1); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.4); xframe.Draw(); c.cd(2); ROOT.gPad.SetLeftMargin(0.15); yframe.GetYaxis().SetTitleOffset(1.4); yframe.Draw(); ; c.SaveAs(""rf304_uncorrprod.png""); [#0] WARNING:InputArguments -- The parameter 'sigmax' with range [-inf, inf] of the RooGaussian 'gaussx' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigmay' with range [-inf, inf] of the RooGaussian 'gaussy' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsReal::plotOn(gaussxy) plot on x integrates over variables (y); [#1] INFO:Plotting -- RooAbsReal::plotOn(gaussxy) plot on y integrates over variables (x); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf304_uncorrprod.py. tutorialsroofitrf304_uncorrprod.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf304__uncorrprod_8py.html:2339,safe,safe,2339,doc/master/rf304__uncorrprod_8py.html,https://root.cern,https://root.cern/doc/master/rf304__uncorrprod_8py.html,2,['safe'],['safe']
Safety,"sibility() : set volume visibility.; 198 - TGeoVolume::VisibleDaughters() : set daughters visibility.; 199All these actions automatically updates the current view if any.; 200 ; 201### Checking the geometry; 202 ; 203 Several checking methods are accessible from the volume context menu. They; 204generally apply only to the visible parts of the drawn geometry in order to; 205ease geometry checking, and their implementation is in the TGeoChecker class; 206from the painting package.; 207 ; 208#### Checking a given point.; 209 Can be called from TGeoManager::CheckPoint(Double_t x, Double_t y, Double_t z).; 210This method is drawing the daughters of the volume containing the point one; 211level down, printing the path to the deepest physical node holding this point.; 212It also computes the closest distance to any boundary. The point will be drawn; 213in red, as well as a sphere having this closest distance as radius. In case a; 214non-zero distance is given by the user as fifth argument of CheckPoint, this; 215distance will be used as radius of the safety sphere.; 216 ; 217\image html geom_checkpoint.jpg; 218 ; 219#### Shooting random points.; 220 Can be called from TGeoVolume::RandomPoints() (context menu function) and; 221it will draw this volume with current visualization settings. Random points; 222are generated in the bounding box of the top drawn volume. The points are; 223classified and drawn with the color of their deepest container. Only points; 224in visible nodes will be drawn.; 225 ; 226\image html geom_random1.jpg; 227 ; 228 ; 229#### Raytracing.; 230 Can be called from TGeoVolume::RandomRays() (context menu of volumes) and; 231will shoot rays from a given point in the local reference frame with random; 232directions. The intersections with displayed nodes will appear as segments; 233having the color of the touched node. Drawn geometry will be then made invisible; 234in order to enhance rays.; 235 ; 236\image html geom_random2.jpg; 237*/; 238 ; 239#include <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:12022,safe,safety,12022,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['safe'],['safety']
Safety,"side the polygon. void ConvexCheck(); Check polygon convexity. void Draw(Option_t* option = """"); Draw the polygon. void FinishPolygon(); Decompose polygon in a convex outscribed part and a list of daughter; polygons that have to be substracted to get the actual one. void GetVertices(Double_t* x, Double_t* y) const; Fill list of vertices into provided arrays. void GetConvexVertices(Double_t* x, Double_t* y) const; Fill list of vertices of the convex outscribed polygon into provided arrays. Bool_t IsRightSided(const Double_t* point, Int_t ind1, Int_t ind2) const; Check if POINT is right-sided with respect to the segment defined by IND1 and IND2. Bool_t IsSegConvex(Int_t i1, Int_t i2 = -1) const; Check if a segment [0..fNvert-1] belongs to the outscribed convex pgon. Bool_t IsIllegalCheck() const; Check for illegal crossings between non-consecutive segments. void OutscribedConvex(); Compute indices for the outscribed convex polygon. Double_t Safety(const Double_t* point, Int_t& isegment) const; Compute minimum distance from POINT to any segment. Returns segment index. void SetNextIndex(Int_t index = -1); Sets the next polygone index. If index<0 sets all indices consecutive; in increasing order. void SetXY(Double_t* x, Double_t* y); Set X/Y array pointer for the polygon and daughters. TGeoPolygon(); constructors. Int_t GetNvert() const; {return fNvert;}. Int_t GetNconvex() const; {return fNconvex;}. Double_t * GetX(); {return fX;}. Double_t * GetY(); {return fY;}. Bool_t IsClockwise() const; {return !TObject::TestBit(kGeoACW);}. Bool_t IsConvex() const; {return TObject::TestBit(kGeoConvex);}. Bool_t IsFinished() const; {return TObject::TestBit(kGeoFinishPolygon);}. void SetConvex(Bool_t flag = kTRUE); {TObject::SetBit(kGeoConvex,flag);}. » Author: Mihaela Gheata 05/01/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPolygon.html:9056,Safe,Safety,9056,root/html534/TGeoPolygon.html,https://root.cern,https://root.cern/root/html534/TGeoPolygon.html,1,['Safe'],['Safety']
Safety,"side the polygon. void ConvexCheck(); Check polygon convexity. void Draw(Option_t* option = """"); Draw the polygon. void FinishPolygon(); Decompose polygon in a convex outscribed part and a list of daughter; polygons that have to be substracted to get the actual one. void GetVertices(Double_t* x, Double_t* y) const; Fill list of vertices into provided arrays. void GetConvexVertices(Double_t* x, Double_t* y) const; Fill list of vertices of the convex outscribed polygon into provided arrays. Bool_t IsRightSided(const Double_t* point, Int_t ind1, Int_t ind2) const; Check if POINT is right-sided with respect to the segment defined by IND1 and IND2. Bool_t IsSegConvex(Int_t i1, Int_t i2 = -1) const; Check if a segment [0..fNvert-1] belongs to the outscribed convex pgon. Bool_t IsIllegalCheck() const; Check for illegal crossings between non-consecutive segments. void OutscribedConvex(); Compute indices for the outscribed convex polygon. Double_t Safety(const Double_t* point, Int_t& isegment) const; Compute minimum distance from POINT to any segment. Returns segment index. void SetNextIndex(Int_t index = -1); Sets the next polygone index. If index<0 sets all indices consecutive; in increasing order. void SetXY(Double_t* x, Double_t* y); Set X/Y array pointer for the polygon and daughters. TGeoPolygon(); constructors. Int_t GetNvert() const; {return fNvert;}. Int_t GetNconvex() const; {return fNconvex;}. Double_t * GetX(); {return fX;}. Double_t * GetY(); {return fY;}. Bool_t IsClockwise() const; {return !TObject::TestBit(kGeoACW);}. Bool_t IsConvex() const; {return TObject::TestBit(kGeoConvex);}. Bool_t IsFinished() const; {return TObject::TestBit(kGeoFinishPolygon);}. void SetConvex(Bool_t flag = kTRUE); {TObject::SetBit(kGeoConvex,flag);}. » Author: Mihaela Gheata 05/01/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoPolygon.html:9598,Safe,Safety,9598,root/html604/TGeoPolygon.html,https://root.cern,https://root.cern/root/html604/TGeoPolygon.html,1,['Safe'],['Safety']
Safety,"side the polygon. void ConvexCheck(); Check polygon convexity. void Draw(Option_t* option = """"); Draw the polygon. void FinishPolygon(); Decompose polygon in a convex outscribed part and a list of daughter; polygons that have to be substracted to get the actual one. void GetVertices(Double_t* x, Double_t* y) const; Fill list of vertices into provided arrays. void GetConvexVertices(Double_t* x, Double_t* y) const; Fill list of vertices of the convex outscribed polygon into provided arrays. Bool_t IsRightSided(const Double_t* point, Int_t ind1, Int_t ind2) const; Check if POINT is right-sided with respect to the segment defined by IND1 and IND2. Bool_t IsSegConvex(Int_t i1, Int_t i2 = -1) const; Check if a segment [0..fNvert-1] belongs to the outscribed convex pgon. Bool_t IsIllegalCheck() const; Check for illegal crossings between non-consecutive segments. void OutscribedConvex(); Compute indices for the outscribed convex polygon. Double_t Safety(const Double_t* point, Int_t& isegment) const; Compute minimum distance from POINT to any segment. Returns segment index. void SetNextIndex(Int_t index = -1); Sets the next polygone index. If index<0 sets all indices consecutive; in increasing order. void SetXY(Double_t* x, Double_t* y); Set X/Y array pointer for the polygon and daughters. TGeoPolygon(); constructors. Int_t GetNvert() const; {return fNvert;}. Int_t GetNconvex() const; {return fNconvex;}. Double_t * GetX(); {return fX;}. Double_t * GetY(); {return fY;}. Bool_t IsClockwise() const; {return !TObject::TestBit(kGeoACW);}. Bool_t IsConvex() const; {return TObject::TestBit(kGeoConvex);}. Bool_t IsFinished() const; {return TObject::TestBit(kGeoFinishPolygon);}. void SetConvex(Bool_t flag = kTRUE); {TObject::SetBit(kGeoConvex,flag);}. » Author: Mihaela Gheata 05/01/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoPolygon.html:9598,Safe,Safety,9598,root/html602/TGeoPolygon.html,https://root.cern,https://root.cern/root/html602/TGeoPolygon.html,1,['Safe'],['Safety']
Safety,"sidePolygon(). static Bool_t TGeoArb8::InsidePolygon ; (; Double_t ; x, . Double_t ; y, . Double_t * ; pts . ). static . ◆ InspectShape(). void TGeoArb8::InspectShape ; (; ); const. overridevirtual . Implements TGeoShape. ◆ IsA(). TClass * TGeoArb8::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TGeoTrap, and TGeoGtra.; Definition at line 93 of file TGeoArb8.h. ◆ IsCylType(). Bool_t TGeoArb8::IsCylType ; (; ); const. inlineoverridevirtual . Implements TGeoShape.; Definition at line 73 of file TGeoArb8.h. ◆ IsSamePoint(). static Bool_t TGeoArb8::IsSamePoint ; (; const Double_t * ; p1, . const Double_t * ; p2 . ). inlinestatic . Definition at line 74 of file TGeoArb8.h. ◆ IsTwisted(). Bool_t TGeoArb8::IsTwisted ; (; ); const. inline . Definition at line 80 of file TGeoArb8.h. ◆ operator=(). TGeoArb8 & TGeoArb8::operator= ; (; const TGeoArb8 & ; ). protecteddelete . ◆ Safety(). Double_t TGeoArb8::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Implements TGeoShape.; Reimplemented in TGeoTrap, and TGeoGtra. ◆ Safety_v(). void TGeoArb8::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoShape.; Reimplemented in TGeoTrap, and TGeoGtra. ◆ SafetyToFace(). Double_t TGeoArb8::SafetyToFace ; (; const Double_t * ; point, . Int_t ; iseg, . Bool_t ; in . ); const. ◆ SavePrimitive(). void TGeoArb8::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Reimplemented in TGeoTrap, and TGeoGtra. ◆ SetDimensions(). void TGeoArb8::SetDimensions ; (; Double_t * ; param). overridevirtual . Implements TGeoShape.; Reimplemented in TGeoTrap, and TGeoGtra. ◆ SetDz(). void TGeoArb8::SetDz ; (; Double_t ; dz). inline . Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoArb8.html:31564,Safe,Safety,31564,doc/master/classTGeoArb8.html,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html,1,['Safe'],['Safety']
Safety,"signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; TVirtualProofPlayer * MakePlayer (const char *player=0, TSocket *s=0) override;  Construct a TProofPlayer object. ;  ; Bool_t StartSlaves (Bool_t) override;  Start up PROOF submasters. ;  ; void ValidateDSet (TDSet *dset) override;  Validate a TDSet. ;  ;  Protected Member Functions inherited from TProof;  TProof ();  Protected constructor to be used by classes deriving from TProof (they have to call Init themselves and override StartSlaves appropriately). ;  ; Int_t AddWorkers (TList *wrks);  Works on the master node only. ;  ; Int_t AssertPath (const char *path, Bool_t writable);  Make sure that 'path' exists; if 'writable' is kTRUE, make also sure that the path is writable. ;  ; Int_t Collect (ESlaves list=kActive, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; Int_t Collect (TList *slaves, Long_t timeout=-1, Int_t endtype=-1, Bool_t deactonfail=kFALSE);  Collect responses from the slave servers. ;  ; TSlave * CreateSlave (const char *url, const char *ord, Int_t perf, const char *image, const char *workdir);  Create a new TSlave of type TSlave::kSlave. ;  ; TSlave * CreateSubmaster (const char *url, const char *ord, const char *image, const char *msd, Int_t nwk=1);  Create a new TSlave of type TSlave::kMaster. ;  ; TList * GetEnabledPackages () const;  ; TList * GetListOfActiveSlaves () const;  ; TVirtualProofPlayer * GetPlayer () const;  ; TPluginHandler * GetProgressDialog () const;  ; Int_t GetSandbox (TString &sb, Bool_t assert=kFALSE, const char *rc=0);  Set the sandbox path from ' Proof.Sandbox' or the alternative var 'rc'. ;  ; void HandleLibIncPath (const char *what, Bool_t add, const char *dirs);  Handle lib, inc search paths modification request. ;  ; Int_t HandleOutputOptions (TString &opt, TString &target, Int_t action);  Extract from opt information about output handling settings. ;  ; Int_t In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofSuperMaster.html:35597,timeout,timeout,35597,doc/master/classTProofSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofSuperMaster.html,1,['timeout'],['timeout']
Safety,"signals; 6398 * (see signal(7)).; 6399 * => stay in the while loop */; 6400 } else {; 6401 DEBUG_TRACE(""recv() failed, error %d"", err);; 6402 return -2;; 6403 }; 6404#endif; 6405 }; 6406 ; 6407 /* Timeout occurred, but no data available. */; 6408 return -1;; 6409}; 6410 ; 6411 ; 6412static int; 6413pull_all(FILE *fp, struct mg_connection *conn, char *buf, int len); 6414{; 6415 int n, nread = 0;; 6416 double timeout = -1.0;; 6417 uint64_t start_time = 0, now = 0, timeout_ns = 0;; 6418 ; 6419 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 6420 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 6421 }; 6422 if (timeout <= 0.0) {; 6423 timeout = strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 6424 / 1000.0;; 6425 }; 6426 start_time = mg_get_current_time_ns();; 6427 timeout_ns = (uint64_t)(timeout * 1.0E9);; 6428 ; 6429 while ((len > 0) && STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6430 n = pull_inner(fp, conn, buf + nread, len, timeout);; 6431 if (n == -2) {; 6432 if (nread == 0) {; 6433 nread = -1; /* Propagate the error */; 6434 }; 6435 break;; 6436 } else if (n == -1) {; 6437 /* timeout */; 6438 if (timeout >= 0.0) {; 6439 now = mg_get_current_time_ns();; 6440 if ((now - start_time) <= timeout_ns) {; 6441 continue;; 6442 }; 6443 }; 6444 break;; 6445 } else if (n == 0) {; 6446 break; /* No more data to read */; 6447 } else {; 6448 nread += n;; 6449 len -= n;; 6450 }; 6451 }; 6452 ; 6453 return nread;; 6454}; 6455 ; 6456 ; 6457static void; 6458discard_unread_request_data(struct mg_connection *conn); 6459{; 6460 char buf[MG_BUF_LEN];; 6461 ; 6462 while (mg_read(conn, buf, sizeof(buf)) > 0); 6463 ;; 6464}; 6465 ; 6466 ; 6467static int; 6468mg_read_inner(struct mg_connection *conn, void *buf, size_t len); 6469{; 6470 int64_t content_len, n, buffered_len, nread;; 6471 int64_t len64 =; 6472 (int64_t)((len > INT_MAX) ? INT_MAX : len); /* since the return value is; 6473 * int, we may not read more; 6474 * bytes */; 6475 const char *body;; 64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:187453,timeout,timeout,187453,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,3,['timeout'],['timeout']
Safety,"signals; 6399 * (see signal(7)).; 6400 * => stay in the while loop */; 6401 } else {; 6402 DEBUG_TRACE(""recv() failed, error %d"", err);; 6403 return -2;; 6404 }; 6405#endif; 6406 }; 6407 ; 6408 /* Timeout occurred, but no data available. */; 6409 return -1;; 6410}; 6411 ; 6412 ; 6413static int; 6414pull_all(FILE *fp, struct mg_connection *conn, char *buf, int len); 6415{; 6416 int n, nread = 0;; 6417 double timeout = -1.0;; 6418 uint64_t start_time = 0, now = 0, timeout_ns = 0;; 6419 ; 6420 if (conn->dom_ctx->config[REQUEST_TIMEOUT]) {; 6421 timeout = atoi(conn->dom_ctx->config[REQUEST_TIMEOUT]) / 1000.0;; 6422 }; 6423 if (timeout <= 0.0) {; 6424 timeout = strtod(config_options[REQUEST_TIMEOUT].default_value, NULL); 6425 / 1000.0;; 6426 }; 6427 start_time = mg_get_current_time_ns();; 6428 timeout_ns = (uint64_t)(timeout * 1.0E9);; 6429 ; 6430 while ((len > 0) && STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6431 n = pull_inner(fp, conn, buf + nread, len, timeout);; 6432 if (n == -2) {; 6433 if (nread == 0) {; 6434 nread = -1; /* Propagate the error */; 6435 }; 6436 break;; 6437 } else if (n == -1) {; 6438 /* timeout */; 6439 if (timeout >= 0.0) {; 6440 now = mg_get_current_time_ns();; 6441 if ((now - start_time) <= timeout_ns) {; 6442 continue;; 6443 }; 6444 }; 6445 break;; 6446 } else if (n == 0) {; 6447 break; /* No more data to read */; 6448 } else {; 6449 nread += n;; 6450 len -= n;; 6451 }; 6452 }; 6453 ; 6454 return nread;; 6455}; 6456 ; 6457 ; 6458static void; 6459discard_unread_request_data(struct mg_connection *conn); 6460{; 6461 char buf[MG_BUF_LEN];; 6462 ; 6463 while (mg_read(conn, buf, sizeof(buf)) > 0); 6464 ;; 6465}; 6466 ; 6467 ; 6468static int; 6469mg_read_inner(struct mg_connection *conn, void *buf, size_t len); 6470{; 6471 int64_t content_len, n, buffered_len, nread;; 6472 int64_t len64 =; 6473 (int64_t)((len > INT_MAX) ? INT_MAX : len); /* since the return value is; 6474 * int, we may not read more; 6475 * bytes */; 6476 const char *body;; 64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:187485,timeout,timeout,187485,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,3,['timeout'],['timeout']
Safety,"signing Programs - Name conventions. Name conventions; Select C++ identifiers (including types, functions, and classes) carefully. When a programmer sees a name, it might be out of context; choose names to enhance readability and comprehension. A name that seems cute or easy to type can cause trouble to someone trying to decipher code. Remember, code is read many more times than it is written; err on the side of long, readable names. Internal code names should not appear anywhere in the interfaces to the system. Even inside your implementation, it's better to use the prosaic form if there is one.; To make the scope of names explicit, Taligent uses the following conventions. Name conventions. Identifier. Convention. Example. Types. Begin with a capital letter. Boolean. Base classes. Begin with T. TContainerView. Mixin classes. Begin with M; ; see ""Multiple inheritance"" on page 44. MPrintable. Enumeration types. Begin with E. EFreezeLevel. Raw C types. Avoid using C types; see ""Avoid raw C types with dimensions"" on page 66. Virtual base classes. Begin with V, rather than T or M. VBaseClass. Members. Begin with f for field1; ; functions begin with a capital letter. fViewList, DrawSelf(). Static variables. Begin with g; applies to static variables in functions and global variables (excluding static data members of a class). gDeviceList. Static data members. Begin with fg; includes class globals. TView::fgTokenClient. Locals and parameters. Begin with a word whose initial letter is lowercase; local automatic variables only, treat statics like globals. seed, port, ; theCurrentArea. Constants. Begin with k; including names of enumeration constants and constant statics. kMenuCommand. Acronyms. All uppercase. TNBPName, not TNbpName. Template arguments. Begin with A. AType. Getters and setters. Begin with Set..., Get..., or Is... (Boolean); use sparingly (see ""Structification"" on page 50). SetLast(), GetNext(), IsDone(). Allocator and adopters. Begin with Create..., Copy..., A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_63.html:989,Avoid,Avoid,989,TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_63.html,https://root.cern,https://root.cern/TaligentDocs/TaligentOnline/DocumentRoot/1.0/Docs/books/WM/WM_63.html,2,['Avoid'],['Avoid']
Safety,"sional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=""0.15"" >; </Axis>; </Axis>; </Axis>; </BinningNode>; </BinningNode>; <BinningNode name=""generator"" firstbin=""1"" factor=""1"">; <BinningNode name=""signal"" firstbin=""1"" factor=""1"">; ; <Bin location=""underflow"" >; <Bin width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"" >; ; <Bin location=""underflow"" >; <Bin width=""1.5"" >; <Bin width=""1"" >; <Bin width=""1.5"" >; <Bin location=""overflow"" >; </Axis>; </Axis>; </BinningNode>; <BinningNode name=""background"" firstbin=""26"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinningXML.html:1576,detect,detector,1576,doc/master/classTUnfoldBinningXML.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html,2,['detect'],"['detector', 'detectordistribution']"
Safety,"sistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoNavigator.h>. Inheritance diagram for TGeoNavigator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGeoNavigator() [1/3]. TGeoNavigator::TGeoNavigator ; (; const TGeoNavigator & ; ). protecteddelete . ◆ TGeoNavigator() [2/3]. TGeoNavigator::TGeoNavigator ; (; ). global mode is caching enabled for parallel world safety calls ; Constructor. ; Definition at line 57 of file TGeoNavigator.cxx. ◆ TGeoNavigator() [3/3]. TGeoNavigator::TGeoNavigator ; (; TGeoManager * ; geom). Constructor. ; Definition at line 109 of file TGeoNavigator.cxx. ◆ ~TGeoNavigator(). TGeoNavigator::~TGeoNavigator ; (; ). override . Destructor. ; Definition at line 169 of file TGeoNavigator.cxx. Member Function Documentation. ◆ BuildCache(). void TGeoNavigator::BuildCache ; (; Bool_t ; dummy = kFALSE, . Bool_t ; nodeid = kFALSE . ). Builds the cache for physical nodes and global matrices. ; Definition at line 182 of file TGeoNavigator.cxx. ◆ cd(). Bool_t TGeoNavigator::cd ; (; const char * ; path = """"). Browse the tree of nodes starting from top node according to pathname. ; Changes the path accordingly. The path is changed to point to the top node in case of failure. ; Definition at line 210 of file TGeoNavigator.cxx. ◆ CdDown() [1/2]. void TGeoNavigator::CdDown ; (; Int_t ; index). Make a daughter of current no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:22607,safe,safety,22607,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safety']
Safety,"sition of a section plane, rmin and rmax at this z. Double_t GetZ(Int_t ipl) const; Return the Z coordinate for segment ipl. void GetPlaneNormal(const Double_t* vert, Double_t* norm) const; Returns normal vector to the planar quadrilateral defined by vector VERT.; The normal points outwards the xtru. void GetPlaneVertices(Int_t iz, Int_t ivert, Double_t* vert) const; Returns (x,y,z) of 3 vertices of the surface defined by Z sections (iz, iz+1); and polygon vertices (ivert, ivert+1). No range check. Bool_t IsPointInsidePlane(Double_t* point, Double_t* vert, Double_t* norm) const; Check if the quadrilateral defined by VERT contains a coplanar POINT. void InspectShape() const; Print actual Xtru parameters. TBuffer3D * MakeBuffer3D() const; Creates a TBuffer3D describing *this* shape.; Coordinates are in local reference frame. void SetSegsAndPols(TBuffer3D& buff) const; Fill TBuffer3D structure for segments and polygons. Double_t SafetyToSector(Double_t* point, Int_t iz, Double_t safmin); Compute safety to sector iz, returning also the closest segment index. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint.; ---> localize the Z segment. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetCurrentZ(Double_t z, Int_t iz); Recompute current section vertices for a given Z position within range of section iz. void SetCurrentVertices(Double_t x0, Double_t y0, Double_t scale); Set current vertex coordinates according X0, Y0 and SCALE. void SetDimensions(Double_t* param); param[0] = nz // number of z planes. param[1] = z1 // Z position of first plane; param[2] = x1 // X position of first plane; param[3] = y1 // Y position of first plane; param[4] = scale1 // scale factor for first plane. param[4*(nz-1]+1] = zn; param[4*(nz-1)+2] = xn; param[4*(nz-1)+3] = yn; pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoXtru.html:17011,Safe,SafetyToSector,17011,root/html528/TGeoXtru.html,https://root.cern,https://root.cern/root/html528/TGeoXtru.html,2,"['Safe', 'safe']","['SafetyToSector', 'safety']"
Safety,"size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTFile::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectoryFile::Purge(Short_t nkeep = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectoryFile::ReadAll(Option_t* option = """"); virtual Bool_tTNetFile::ReadBuffer(char* buf, Int_t len); virtual Bool_tTNetFile::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Bool_tTFile::ReadBufferAsync(Long64_t offs, Int_t len); virtual Bool_tTNetFile::ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); virtual voidTFile::ReadFree(); virtual Int_tTDirectoryFile::ReadKeys(Bool_t forceRead = kTRUE); virtual TProcessID*TFile::ReadProcessID(UShort_t pidf); virtual voidTFile::ReadStreamerInfo(); virtual Int_tTDirectoryFile::ReadTObject(TObject* obj, const char* keyname); virtual Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTNetFile::ReOpen(Option_t* mode); virtual voidTDirectoryFile::ResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTNetFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TCastorFile.html:11978,Recover,Recover,11978,root/html532/TCastorFile.html,https://root.cern,https://root.cern/root/html532/TCastorFile.html,1,['Recover'],['Recover']
Safety,"size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTFile::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTDirectoryFile::Purge(Short_t nkeep = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectoryFile::ReadAll(Option_t* option = """"); virtual Bool_tTNetFile::ReadBuffer(char* buf, Int_t len); virtual Bool_tTNetFile::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Bool_tTFile::ReadBufferAsync(Long64_t offs, Int_t len); virtual Bool_tTNetFile::ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); virtual voidTFile::ReadFree(); virtual Int_tTDirectoryFile::ReadKeys(Bool_t forceRead = kTRUE); virtual TProcessID*TFile::ReadProcessID(UShort_t pidf); virtual voidTFile::ReadStreamerInfo(); virtual Int_tTDirectoryFile::ReadTObject(TObject* obj, const char* keyname); virtual Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTNetFile::ReOpen(Option_t* mode); voidTObject::ResetBit(UInt_t f); virtual voidTFile::ResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTNetFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t forceCacheread = kFALSE); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCastorFile.html:11751,Recover,Recover,11751,root/html530/TCastorFile.html,https://root.cern,https://root.cern/root/html530/TCastorFile.html,1,['Recover'],['Recover']
Safety,"size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTFile::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual voidTDirectoryFile::Purge(Short_t nkeep = 1); virtual voidTDirectory::pwd() const; virtual Int_tTObject::Read(const char* name); virtual voidTDirectoryFile::ReadAll(Option_t* option = """"); virtual Bool_tTFile::ReadBuffer(char* buf, Int_t len); virtual Bool_tTFile::ReadBuffer(char* buf, Long64_t pos, Int_t len); virtual Bool_tTFile::ReadBufferAsync(Long64_t offs, Int_t len); virtual Bool_tTFile::ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); virtual voidTFile::ReadFree(); virtual Int_tTDirectoryFile::ReadKeys(Bool_t forceRead = kTRUE); virtual TProcessID*TFile::ReadProcessID(UShort_t pidf); virtual voidTFile::ReadStreamerInfo(); virtual Int_tTDirectoryFile::ReadTObject(TObject* obj, const char* keyname); virtual Int_tTFile::Recover(); virtual voidTDirectory::RecursiveRemove(TObject* obj); virtual TObject*TDirectory::Remove(TObject*); virtual Int_tTFile::ReOpen(Option_t* mode); virtual voidResetAfterMerge(TFileMergeInfo*); voidTObject::ResetBit(UInt_t f); virtual voidResetErrno() const; virtual voidTDirectoryFile::rmdir(const char* name); virtual voidTDirectoryFile::Save(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual Int_tTDirectoryFile::SaveObjectAs(const TObject* obj, const char* filename = """", Option_t* option = """") const; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTDirectoryFile::SaveSelf(Bool_t force = kFALSE); virtual voidTFile::Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTDirectoryFile::SetBufferSize(Int_t bufsize); static Bool_tTFile::SetCacheFileDir(const char* cacheDir, Bool_t operateDisconnected = kTRUE, Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMemFile.html:11065,Recover,Recover,11065,root/html532/TMemFile.html,https://root.cern,https://root.cern/root/html532/TMemFile.html,4,['Recover'],['Recover']
Safety,"sizeof(Double_t));; 198 }; 199 void SetLastSafetyForPoint(Double_t safe, Double_t x, Double_t y, Double_t z); 200 {; 201 fLastSafety = safe;; 202 fLastPoint[0] = x;; 203 fLastPoint[1] = y, fLastPoint[2] = z;; 204 }; 205 ; 206 // Check if we have a cached safety value from parallel world, and if this can still be used.; 207 // Return negative value if no cache available.; 208 Double_t GetPWSafetyEstimateFromCache(Double_t cpoint[3]) const; 209 {; 210 // disregard too small or invalid safeties; 211 if (fLastPWSafety < TGeoShape::Tolerance()) {; 212 return -1.;; 213 }; 214 const auto d0 = fLastPWSaftyPnt[0] - cpoint[0];; 215 const auto d1 = fLastPWSaftyPnt[1] - cpoint[1];; 216 const auto d2 = fLastPWSaftyPnt[2] - cpoint[2];; 217 const auto d_sq = d0 * d0 + d1 * d1 + d2 * d2;; 218 // if we have moved too much return -1 as ""invalid""; 219 if (d_sq >= (fLastPWSafety * fLastPWSafety)) {; 220 return -1.;; 221 }; 222 // or return a reasonable cache estimate for safety; 223 return fLastPWSafety - std::sqrt(d_sq);; 224 }; 225 ; 226 // Wrapper for getting the safety from the parallel world.; 227 // Takes care of caching mechanics and talking to the Safety function of parallel world.; 228 Double_t GetPWSafety(Double_t cpoint[3], Double_t saf_max);; 229 ; 230 // enable/disable parallel world safety caching; 231 static void SetPWSafetyCaching(Bool_t b) { fgUsePWSafetyCaching = b; }; 232 static Bool_t IsPWSafetyCaching() { return fgUsePWSafetyCaching; }; 233 ; 234 //--- point/vector reference frame conversion; 235 void LocalToMaster(const Double_t *local, Double_t *master) const { fCache->LocalToMaster(local, master); }; 236 void LocalToMasterVect(const Double_t *local, Double_t *master) const { fCache->LocalToMasterVect(local, master); }; 237 void LocalToMasterBomb(const Double_t *local, Double_t *master) const { fCache->LocalToMasterBomb(local, master); }; 238 void MasterToLocal(const Double_t *master, Double_t *local) const { fCache->MasterToLocal(master, local); }; 239 void Maste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:11010,safe,safety,11010,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,2,['safe'],['safety']
Safety,"skets TTree::Fill will replace fAutoFlush by the current value of fEntries.; Calling this function with autof<0 is interesting when it is hard to estimate the size of one entry. This value is also independent of the Tree.; The Tree is initialized with fAutoFlush=-30000000, ie that, by default, the first AutoFlush will be done when 30 MBytes of data are written to the file. CASE 3 : autof = 0; The AutoFlush mechanism is disabled.; Flushing the buffers at regular intervals optimize the location of consecutive entries on the disk by creating clusters of baskets.; A cluster of baskets is a set of baskets that contains all the data for a (consecutive) set of entries and that is stored consecutively on the disk. When reading all the branches, this is the minimum set of baskets that the TTreeCache will read. ; Definition at line 8191 of file TTree.cxx. ◆ SetAutoSave(). void TTree::SetAutoSave ; (; Long64_t ; autos = -300000000). virtual . In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ; This function may be called before filling a TTree to specify when the branch buffers and TTree header are flushed to disk as part of TTree::Fill(). The default is -300000000, ie the TTree will write data to disk once it exceeds 300 MBytes. CASE 1: If fAutoSave is positive the watermark is reached when a multiple of fAutoSave entries have been filled. CASE 2: If fAutoSave is negative the watermark is reached when -fAutoSave bytes can be written to the file. CASE 3: If fAutoSave is 0, AutoSave() will never be called automatically as part of TTree::Fill(). ; Definition at line 8337 of file TTree.cxx. ◆ SetBasketSize(). void TTree::SetBasketSize ; (; const char * ; bname, . Int_t ; buffsize = 16000 . ). virtual . Set a branch's basket size. ; bname is the name of a branch. if bname=""*"", apply to all branches.; if bname=""xxx*"", apply to all branches with name starting with xxx. see TRegexp for wildcarding options buffsize = branc ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:200761,recover,recover,200761,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['recover'],['recover']
Safety,"skets TTree::Fill will replace fAutoFlush by the current value of fEntries.; Calling this function with autof<0 is interesting when it is hard to estimate the size of one entry. This value is also independent of the Tree.; The Tree is initialized with fAutoFlush=-30000000, ie that, by default, the first AutoFlush will be done when 30 MBytes of data are written to the file. CASE 3 : autof = 0; The AutoFlush mechanism is disabled.; Flushing the buffers at regular intervals optimize the location of consecutive entries on the disk by creating clusters of baskets.; A cluster of baskets is a set of baskets that contains all the data for a (consecutive) set of entries and that is stored consecutively on the disk. When reading all the branches, this is the minimum set of baskets that the TTreeCache will read. ; Definition at line 8196 of file TTree.cxx. ◆ SetAutoSave(). void TTree::SetAutoSave ; (; Long64_t ; autos = -300000000). virtual . In case of a program crash, it will be possible to recover the data in the tree up to the last AutoSave point. ; This function may be called before filling a TTree to specify when the branch buffers and TTree header are flushed to disk as part of TTree::Fill(). The default is -300000000, ie the TTree will write data to disk once it exceeds 300 MBytes. CASE 1: If fAutoSave is positive the watermark is reached when a multiple of fAutoSave entries have been filled. CASE 2: If fAutoSave is negative the watermark is reached when -fAutoSave bytes can be written to the file. CASE 3: If fAutoSave is 0, AutoSave() will never be called automatically as part of TTree::Fill(). ; Definition at line 8342 of file TTree.cxx. ◆ SetBasketSize(). void TTree::SetBasketSize ; (; const char * ; bname, . Int_t ; buffsize = 16000 . ). virtual . Set a branch's basket size. ; bname is the name of a branch. if bname=""*"", apply to all branches.; if bname=""xxx*"", apply to all branches with name starting with xxx. see TRegexp for wildcarding options buffsize = branc ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:203252,recover,recover,203252,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['recover'],['recover']
Safety,"slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:42677,timeout,timeout,42677,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['timeout'],['timeout']
Safety,"slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection.; Collect also stops its execution from time to time to check for new; workers in Dynamic Startup mode. Int_t PollForNewWorkers(); Asks the PROOF Serv for new workers in Dynamic Startup mode and activates; them. Returns the number of new workers found, or <0 on errors. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:46533,timeout,timeout,46533,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['timeout'],['timeout']
Safety,"slog ; (; ELogLevel ; level, . const char * ; mess . ). virtual . Send mess to syslog daemon. ; Level is the logging level and mess the message that will be written on the log. ; Reimplemented in TUnixSystem.; Definition at line 1686 of file TSystem.cxx. ◆ TempDirectory(). const char * TSystem::TempDirectory ; (; ); const. virtual . Return a user configured or systemwide directory to create temporary files in. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1482 of file TSystem.cxx. ◆ TempFileName(). FILE * TSystem::TempFileName ; (; TString & ; base, . const char * ; dir = nullptr, . const char * ; suffix = nullptr . ). virtual . Create a secure temporary file by appending a unique 6 letter string to base. ; The file will be created in a standard (system) directory or in the directory provided in dir. Optionally one can provide suffix append to the final name - like extension "".txt"" or "".html"". The full filename is returned in base and a filepointer is returned for safely writing to the file (this avoids certain security problems). Returns 0 in case of error. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1499 of file TSystem.cxx. ◆ Umask(). int TSystem::Umask ; (; Int_t ; mask). virtual . Set the process file creation mode mask. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 1517 of file TSystem.cxx. ◆ UnixPathName(). const char * TSystem::UnixPathName ; (; const char * ; name). virtual . Convert from a local pathname to a Unix pathname. ; E.g. from \user\root to /user/root. ; Reimplemented in TWinNTSystem.; Definition at line 1063 of file TSystem.cxx. ◆ Unlink(). int TSystem::Unlink ; (; const char * ; name). virtual . Unlink, i.e. ; remove, a file.; If the file is currently open by the current or another process, the behavior of this function is implementation-defined (in particular, POSIX systems unlink the file name, while Windows does not allow the file to be deleted and the operation is a no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:95223,safe,safely,95223,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,2,"['avoid', 'safe']","['avoids', 'safely']"
Safety,"snext, Double_t& rxy); Compute distance from POINT to semiplane defined by PHI angle along DIR. Computes; also radius at crossing point. This might be negative in case the crossing is; on the other side of the semiplane. Bool_t IsSameWithinTolerance(Double_t a, Double_t b); Check if two numbers differ with less than a tolerance. Bool_t IsSegCrossing(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t x3, Double_t y3, Double_t x4, Double_t y4); Check if segments (A,B) and (C,D) are crossing,; where: A(x1,y1), B(x2,y2), C(x3,y3), D(x4,y4). Double_t DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); compute distance from point (inside phi) to both phi planes. Return minimum. void NormalPhi(Double_t* point, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); Static method to compute normal to phi planes. Double_t SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); Static method to compute safety w.r.t a phi corner defined by cosines/sines; of the angles phi1, phi2. void SetShapeBit(UInt_t f, Bool_t set); Equivalent of TObject::SetBit. TGeoMatrix * GetTransform(); Returns current transformation matrix that applies to shape. void SetTransform(TGeoMatrix* matrix); Set current transformation matrix that applies to shape. void TransformPoints(Double_t* points, UInt_t NbPoints) const; Tranform a set of points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections, Bool_t localFrame) const; Fill the supplied buffer, with sections in desired frame; See TBuffer3D.h for explanation of sections, frame etc. Int_t GetBasicColor() const; Get the basic color (0-7). const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Stub implementation to avoid forcing implementation at this stage. const char * GetPointerName() const; Provide a pointer name containing uid. void ExecuteEvent(Int_t event, Int_t px, In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoShape.html:17662,Safe,SafetyPhi,17662,root/html528/TGeoShape.html,https://root.cern,https://root.cern/root/html528/TGeoShape.html,6,"['Safe', 'safe']","['SafetyPhi', 'safety']"
Safety,"socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:13587,timeout,timeout,13587,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,3,['timeout'],['timeout']
Safety,"sponded (=1). If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2669 of file TProof.cxx. ◆ Collect() [2/4]. Int_t TProof::Collect ; (; ESlaves ; list = kActive, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). protected . Collect responses from the slave servers. ; Returns the number of slaves that responded. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2727 of file TProof.cxx. ◆ Collect() [3/4]. Int_t TProof::Collect ; (; TList * ; slaves, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). protected . Collect responses from the slave servers. ; Returns the number of slaves that responded. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2696 of file TProof.cxx. ◆ Collect() [4/4]. Int_t TProof::Collect ; (; TMonitor * ; mon, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from the slave servers. ; Returns the number of messages received. Can be 0 if there are no active slaves. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. Collect also stops its execution from time to time to check for new workers in Dynamic Startup mode. ; Definition at line 2756 of file TProof.cxx. ◆ CollectInputFrom(). Int_t TProof::CollectInputFrom ; (; TSocket * ; s, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect and analyze available input from socket s. ; Returns 0 on success, -1 if any failur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:78100,timeout,timeout,78100,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['timeout'],['timeout']
Safety,"ss * IsA () const override;  ; Int_t RegularizeBins (int start, int step, int nbin, ERegMode regmode);  add regularisation conditions for a group of bins ;  ; Int_t RegularizeBins2D (int start_bin, int step1, int nbin1, int step2, int nbin2, ERegMode regmode);  add regularisation conditions for 2d unfolding ;  ; Int_t RegularizeCurvature (int left_bin, int center_bin, int right_bin, Double_t scale_left=1.0, Double_t scale_right=1.0);  add a regularisation condition on the curvature of three truth bin ;  ; Int_t RegularizeDerivative (int left_bin, int right_bin, Double_t scale=1.0);  add a regularisation condition on the difference of two truth bin ;  ; Int_t RegularizeSize (int bin, Double_t scale=1.0);  add a regularisation condition on the magnitude of a truth bin ;  ; virtual Int_t ScanLcurve (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **lCurve, TSpline **logTauX=nullptr, TSpline **logTauY=nullptr, TSpline **logTauCurvature=nullptr);  scan the L curve, determine tau and unfold at the final value of tau ;  ; virtual Int_t ScanSURE (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **logTauSURE=nullptr, TGraph **df_chi2A=nullptr, TGraph **lCurve=nullptr);  minimize Stein's unbiased risk estimator ""SURE"" using successive calls to DoUnfold at various tau. ;  ; void SetBias (const TH1 *bias);  set bias vector ;  ; void SetConstraint (EConstraint constraint);  set type of area constraint ;  ; void SetEpsMatrix (Double_t eps);  set numerical accuracy for Eigenvalue analysis when inverting matrices with rank problems ;  ; virtual Int_t SetInput (const TH1 *hist_y, Double_t scaleBias=0.0, Double_t oneOverZeroError=0.0, const TH2 *hist_vyy=nullptr, const TH2 *hist_vyy_inv=nullptr);  Define input data for subsequent calls to DoUnfold(tau) ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:8217,risk,risk,8217,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['risk'],['risk']
Safety,"ss address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual TInetAddress GetLocalInetAddress ();  Return internet address of local host to which the socket is bound. ;  ; virtual Int_t GetLocalPort ();  Return the local port # to which the socket is bound. ;  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; virtual Int_t SendObject (const TObject *obj, Int_t kind=kMESS_OBJECT);  Send an object. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetServ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:4090,timeout,timeout,4090,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['timeout'],['timeout']
Safety,"ss from the list and map of classesDefinition TClass.cxx:520; TClass::GetClassInfoClassInfo_t * GetClassInfo() constDefinition TClass.h:433; TClass::InheritsFromBool_t InheritsFrom(const char *cl) const overrideReturn kTRUE if this class inherits from a class with name ""classname"".Definition TClass.cxx:4874; TClass::GetDeclFileNameconst char * GetDeclFileName() constReturn name of the file containing the declaration of this class.Definition TClass.cxx:3463; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:2968; TCollectionCollection abstract base class.Definition TCollection.h:65; TCollection::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRemove object from this collection and recursively remove the object from all other objects (and coll...Definition TCollection.cxx:574; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::AddAllvirtual void AddAll(const TCollection *col)Add all objects from collection col to this collection.Definition TCollection.cxx:195; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TCollection::Addvirtual void Add(TObject *obj)=0; TCollection::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TCollection.cxx:312; TCollection::Deletevoid Delete(Option_t *option="""") override=0Delete this object.; TCollection::Clearvoid Clear(Option_t *option="""") override=0; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TColorThe color creation and management class.Definition TColor.h:21; TColor::InitializeColorsstatic void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:132188,safe,safe,132188,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['safe'],['safe']
Safety,"ss from the list and map of classesDefinition TClass.cxx:585; TClass::GetClassInfoClassInfo_t * GetClassInfo() constDefinition TClass.h:433; TClass::InheritsFromBool_t InheritsFrom(const char *cl) const overrideReturn kTRUE if this class inherits from a class with name ""classname"".Definition TClass.cxx:4941; TClass::GetDeclFileNameconst char * GetDeclFileName() constReturn name of the file containing the declaration of this class.Definition TClass.cxx:3530; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TCollectionCollection abstract base class.Definition TCollection.h:65; TCollection::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRemove object from this collection and recursively remove the object from all other objects (and coll...Definition TCollection.cxx:574; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::AddAllvirtual void AddAll(const TCollection *col)Add all objects from collection col to this collection.Definition TCollection.cxx:195; TCollection::SetOwnervirtual void SetOwner(Bool_t enable=kTRUE)Set whether this collection is the owner (enable==true) of its content.Definition TCollection.cxx:746; TCollection::Addvirtual void Add(TObject *obj)=0; TCollection::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TCollection.cxx:312; TCollection::Deletevoid Delete(Option_t *option="""") override=0Delete this object.; TCollection::Clearvoid Clear(Option_t *option="""") override=0; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TColorThe color creation and management class.Definition TColor.h:21; TColor::InitializeColorsstatic void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:132364,safe,safe,132364,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['safe'],['safe']
Safety,ss  TAxis3D;  The 3D axis painter class. More...;  ; class  TBRIK;  A box with faces perpendicular to the axes. More...;  ; class  TCONE;  A conical tube. More...;  ; class  TCONS;  A segment of a conical tube. More...;  ; class  TCTUB;  A cut tube with 11 parameters. More...;  ; class  TELTU;  A cylinder with an elliptical section. More...;  ; class  TGeometry;  TGeometry description. More...;  ; class  TGTRA;  A general twisted trapezoid. More...;  ; class  THelix;  THelix has two different constructors. More...;  ; class  THYPE;  An hyperboloid (not implemented) More...;  ; class  TMarker3DBox;  A special 3-D marker designed for event display. More...;  ; class  TMaterial;  Manages a detector material. More...;  ; class  TMixture;  Manages a detector mixture. More...;  ; class  TNode;  TNode description. More...;  ; class  TNodeDiv;  Description of parameters to divide a 3-D geometry object. More...;  ; class  TPARA;  A parallelepiped. More...;  ; class  TPCON;  A polycone. More...;  ; class  TPGON;  A polygon. More...;  ; class  TPoints3DABC;  Abstract class to define Arrays of 3D points. More...;  ; class  TPointSet3D;  TPolyMarker3D using TPointSet3DGL for direct OpenGL rendering. More...;  ; class  TPolyLine3D;  A 3-dimensional polyline. More...;  ; class  TPolyMarker3D;  A 3D polymarker. More...;  ; class  TRotMatrix;  Manages a detector rotation matrix. More...;  ; class  TShape;  This is the base class for all geometry shapes. More...;  ; class  TSPHE;  A Sphere. More...;  ; class  TTRAP;  A general trapezoid. More...;  ; class  TTRD1;  A trapezoid with the x dimension varying along z. More...;  ; class  TTRD2;  A trapezoid with both x and y dimensions varying along z. More...;  ; class  TTUBE;  A tube. More...;  ; class  TTUBS;  A segment of a tube. More...;  ; class  TView3D;  The 3D view class. More...;  ; class  TXTRU;  A poly-extrusion. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__g3d.html:1591,detect,detector,1591,doc/master/group__g3d.html,https://root.cern,https://root.cern/doc/master/group__g3d.html,1,['detect'],['detector']
Safety,"ss(const char *Name, void *&LookupCtx); 7715{; 7716 // The call to FindSpecialObject might induces any kind of use; 7717 // of the interpreter ... (library loading, function calling, etc.); 7718 // ... and we _know_ we are in the middle of parsing, so let's make; 7719 // sure to save the state and then restore it.; 7720 ; 7721 if (gDirectory) {; 7722 auto iSpecObjMap = fSpecialObjectMaps.find(gDirectory);; 7723 if (iSpecObjMap != fSpecialObjectMaps.end()) {; 7724 auto iSpecObj = iSpecObjMap->second.find(Name);; 7725 if (iSpecObj != iSpecObjMap->second.end()) {; 7726 LookupCtx = gDirectory;; 7727 return iSpecObj->second;; 7728 }; 7729 }; 7730 }; 7731 ; 7732 // Save state of the PP; 7733 Sema &SemaR = fInterpreter->getSema();; 7734 ASTContext& C = SemaR.getASTContext();; 7735 Preprocessor &PP = SemaR.getPreprocessor();; 7736 Parser& P = const_cast<Parser&>(fInterpreter->getParser());; 7737 Preprocessor::CleanupAndRestoreCacheRAII cleanupRAII(PP);; 7738 Parser::ParserCurTokRestoreRAII savedCurToken(P);; 7739 // After we have saved the token reset the current one to something which; 7740 // is safe (semi colon usually means empty decl); 7741 Token& Tok = const_cast<Token&>(P.getCurToken());; 7742 Tok.setKind(tok::semi);; 7743 ; 7744 // We can't PushDeclContext, because we go up and the routine that pops; 7745 // the DeclContext assumes that we drill down always.; 7746 // We have to be on the global context. At that point we are in a; 7747 // wrapper function so the parent context must be the global.; 7748 Sema::ContextAndScopeRAII pushedDCAndS(SemaR, C.getTranslationUnitDecl(),; 7749 SemaR.TUScope);; 7750 ; 7751 TObject* specObj = gROOT->FindSpecialObject(Name, LookupCtx);; 7752 if (specObj) {; 7753 if (!LookupCtx) {; 7754 Error(""GetObjectAddress"", ""Got a special object without LookupCtx!"");; 7755 } else {; 7756 fSpecialObjectMaps[LookupCtx][Name] = specObj;; 7757 }; 7758 }; 7759 return specObj;; 7760}; 7761 ; 7762////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:302182,safe,safe,302182,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['safe'],['safe']
Safety,"ss*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoTubeSeg.html:2766,safe,safe,2766,root/html532/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html532/TGeoTubeSeg.html,1,['safe'],['safe']
Safety,"ss*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual Bool_tContains(const Double_t* point) const; virtual voidTObject::Copy(TObject& object) const; voidCreateThreadData(Int_t nthreads); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceToPrimitive(Int_t px, Int_t py); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGeoBoolNode::EGeoBoolTypeGetBooleanOperator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TGeoMatrix*GetLeftMatrix() const; TGeoShape*GetLeftShape() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBoolNode.html:2560,safe,safe,2560,root/html534/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html534/TGeoBoolNode.html,3,['safe'],['safe']
Safety,"ssModel, RooJohnson, RooLandau, RooLegacyExpPoly, RooLognormal, RooNovosibirsk, RooPoisson, RooPolynomial, RooPowerSum, RooVoigtian, RooAddModel, RooAddPdf, RooPolyVar, RooRatio, RooTruthModel, RooNormalizedPdf, and RooFixedProdPdf.; Definition at line 548 of file RooAbsArg.h. ◆ canNodeBeCached(). virtual CacheMode RooAbsArg::canNodeBeCached ; (; ); const. inlinevirtual . Reimplemented in RooLagrangianMorphFunc, RooAddPdf, RooProdPdf, RooProduct, RooRealSumFunc, and RooRealSumPdf.; Definition at line 384 of file RooAbsArg.h. ◆ changeServer(). void RooAbsArg::changeServer ; (; RooAbsArg & ; server, . bool ; valueProp, . bool ; shapeProp . ). Change dirty flag propagation mask for specified server. ; Definition at line 438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50118,abort,abort,50118,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['abort'],['abort']
Safety,"ss_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void BuildKDEPDF ();  creates high-binned reference histogram to be used instead of the PDF for speed reasons ;  ; void BuildSplinePDF ();  build the PDF from the original histograms ;  ; void CheckHist () const;  sanity check: compare PDF with original histogram ;  ; void FillHistToGraph ();  Simple conversion. ;  ; void FillSplineToHist ();  creates high-binned reference histogram to be used instead of the PDF for speed reasons ;  ; void FindBinInverse (const TH1 *histogram, Int_t &lowerBin, Int_t &higherBin, Double_t &lowerBinValue, Double_t &higherBinValue, Double_t y, Bool_t isMonotonouslyIncreasingFunction=kFALSE) const;  find bin from value on ordinate ;  ; Double_t GetIntegral () const;  computes normalisation ;  ; Double_t GetPdfHistBinWidth () const;  ; MsgLogger & Log () const;  ; void SmoothHistogram ();  ; Bool_t UseHistogram () const;  . Static Private Member Functions; static PDF *& GetThisPdfThreadLocal ();  ; static Double_t IGetVal (Double_t *, Double_t *);  static external auxiliary function (integrand) ;  ; static PDF * ThisPDF (void);  . Private Attributes; TString fBorderMethodString;  ; Bool_t fCheckHis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDF.html:14957,sanity check,sanity check,14957,doc/master/classTMVA_1_1PDF.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDF.html,1,['sanity check'],['sanity check']
Safety,"ssed ;  ; TGeoManager * fGeometry;  flag that last geometric step was null ;  ; TGeoHMatrix * fGlobalMatrix;  current stored global matrix ;  ; Bool_t fIsEntering;  flag a safe start for point classification ;  ; Bool_t fIsExiting;  flag if current step just got into a new node ;  ; Bool_t fIsNullStep;  flag that a new point is in the same node as previous ;  ; Bool_t fIsOnBoundary;  flag that current point is outside geometry ;  ; Bool_t fIsOutside;  flag that next geometric step will exit current volume ;  ; Bool_t fIsSameLocation;  flag that current point is on some boundary ;  ; Bool_t fIsStepEntering;  flag that current track is about to leave current node ;  ; Bool_t fIsStepExiting;  flag that next geometric step will enter new volume ;  ; TGeoNode * fLastNode;  top physical node ;  ; Double_t fLastPoint [3];  current direction ;  ; Double_t fLastPWSafety {-1};  last point for which parallel world safety was ""evaluated"" ;  ; Double_t fLastPWSaftyPnt [3];  last point for which safety was computed ;  ; Double_t fLastSafety;  safety radius from current point ;  ; Int_t fLevel;  thread id for this navigator ;  ; Int_t fNextDaughterIndex;  number of overlapping nodes on current branch ;  ; TGeoNode * fNextNode;  last searched node ;  ; Int_t fNmany;  current geometry level; ;  ; Double_t fNormal [3];  last computed safety radius ;  ; Int_t * fOverlapClusters;  current recursive position in fOverlapClusters ;  ; Int_t fOverlapMark;  current size of fOverlapClusters ;  ; Int_t fOverlapSize;  next daughter index after FindNextBoundary ;  ; TString fPath;  current local matrix of the selected division cell ;  ; Double_t fPoint [3];  unit vector to current checked shape ;  ; Double_t fSafety;  step to be done from current point and direction ;  ; Bool_t fSearchOverlaps;  internal array for overlaps ;  ; Bool_t fStartSafe;  flags the type of the current node ;  ; Double_t fStep;  ; Int_t fThreadId;  last safety returned from parallel world (negative if invalid) ;  ; TGeoN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:20293,safe,safety,20293,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safety']
Safety,"ssible to exclude individual bins from the fit through fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering. Any bins excluded in this way can be included again using the corresponding fit->IncludeBin(bin #);; ; Weights histograms; Weights histograms (for a motivation see the above publication) can be specified for the individual MC sources through fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. Obtaining fit results; The fit is carried out through Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits that converged, parameter values and errors can be obtained through fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which is not the same as a simple weighted sum of the input Monte Carlo distributions) can be obtained by TH1* result = fit->GetPlot();; ; Using different histograms; It is possible to change the histogram being fitted through fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms; however, it should be done with care as any settings are taken over from the previous fit. In addition, neither the dimensionality nor the numbers of bins of the histograms should change (in that case it is better to instantiate a new TFractionFitter object). Errors; Any serious inconsistency results in an error. ; Definition at line 27 of file TFractionFitter.h. Public Member Functions;  TFractionFitter ();  TFractionFitter default constructor. ;  ;  TFractionFitter (TH1 *data, TObjArray *MCs, Option_t *option="""");  TFractionFitter constructor. ;  ;  ~TFractionFitter () override;  TFractionFitter default destructor. ;  ; void Constrain (Int_t parm, Double_t low, Double_t high);  Constrain the values of parameter number <pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:5689,predict,prediction,5689,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['predict'],['prediction']
Safety,"ssible to use also the function ROOT::Math::SolveChol(matrix, vector) which will be faster than performing the inversion ; Definition at line 446 of file SMatrix.icc. ◆ InvertFast(). template<class T , unsigned int D1, unsigned int D2, class R > . bool ROOT::Math::SMatrix< T, D1, D2, R >::InvertFast. inline . Fast inversion of a square Matrix ( this method changes the current matrix). ; Return true if inversion is successful. The method used is based on direct inversion using the Cramer rule for matrices upto 5x5. Afterwards the same default algorithm of Invert() is used. Note that this method is faster but can suffer from much larger numerical accuracy when the condition of the matrix is large ; Definition at line 429 of file SMatrix.icc. ◆ IsInUse(). template<class T , unsigned int D1, unsigned int D2, class R > . bool ROOT::Math::SMatrix< T, D1, D2, R >::IsInUse ; (; const T * ; p); const. Function to check if a matrix is sharing same memory location of the passed pointer This function is used by the expression templates to avoid the alias problem during expression evaluation. ; When the matrix is in use, for example in operations like A = B * A, a temporary object storing the intermediate result is automatically created when evaluating the expression. ; Definition at line 895 of file SMatrix.icc. ◆ LowerBlock(). template<class T , unsigned int D1, unsigned int D2, class R > . SVector< T, D1 *(D2+1)/2 > ROOT::Math::SMatrix< T, D1, D2, R >::LowerBlock. return the lower Triangular block of the matrices (including the diagonal) as a vector of sizes N = D1 * (D1 + 1)/2. ; It works only for square matrices with D1==D2, otherwise it will produce a compile error ; Definition at line 826 of file SMatrix.icc. ◆ operator!=() [1/3]. template<class T , unsigned int D1, unsigned int D2, class R > . template<class A , class R2 > . bool ROOT::Math::SMatrix< T, D1, D2, R >::operator!= ; (; const Expr< A, T, D1, D2, R2 > & ; rhs); const. inline . element wise comparison ; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html:25547,avoid,avoid,25547,doc/master/classROOT_1_1Math_1_1SMatrix.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html,1,['avoid'],['avoid']
Safety,"st =0; The method above returns kTRUE if the point *point is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; The method computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:5911,safe,safe,5911,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,2,"['SAFE', 'safe']","['SAFE', 'safe']"
Safety,"st Double_t * ; xbins, . Int_t ; nbinsy, . const Double_t * ; ybins . ). protected . Constructor for Double_t variable bin size 2-D histograms. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type double and size nbinsx+1 ; [in]nbinsynumber of bins ; [in]ybinsarray of low-edges for each bin. This is an array of type double and size nbinsy+1 . Definition at line 183 of file TH2.cxx. ◆ TH2() [6/7]. TH2::TH2 ; (; const char * ; name, . const char * ; title, . Int_t ; nbinsx, . const Float_t * ; xbins, . Int_t ; nbinsy, . const Float_t * ; ybins . ). protected . Constructor for variable bin size (along X and Y axis) 2-D histograms using input arrays of type float. ; Parameters. [in]namename of histogram (avoid blanks) ; [in]titlehistogram title. If title is of the form stringt;stringx;stringy;stringz the histogram title is set to stringt, the x axis title to stringx, the y axis title to stringy, etc. ; [in]nbinsxnumber of bins ; [in]xbinsarray of low-edges for each bin. This is an array of type float and size nbinsx+1 ; [in]nbinsynumber of bins ; [in]ybinsarray of low-edges for each bin. This is an array of type float and size nbinsy+1 . Definition at line 213 of file TH2.cxx. ◆ TH2() [7/7]. TH2::TH2 ; (; const TH2 & ; ). privatedelete . ◆ ~TH2(). TH2::~TH2 ; (; ). override . Destructor. ; Definition at line 230 of file TH2.cxx. Member Function Documentation. ◆ AddBinContent() [1/4]. void TH2::AddBinContent ; (; Int_t ; bin). overridevirtual . Increment bin content by 1. ; Passing an out-of-range bin leads to undefined behavior ; Reimplemented from TH1.; Reimplemented in TH2C, TH2S, TH2I, TH2L, TH2F, and TH2D.; Definition at line 238 of file TH2.cxx. ◆ AddBinContent() [2/4]. void TH2::AddBinC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:60780,avoid,avoid,60780,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['avoid'],['avoid']
Safety,"st RooAbsData* set); Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names of the variable list; of the supplied data set (the dependents). The caller of this; function is responsible for deleting the returned argset.; The complement of this function is getObservables(). RooArgSet* getObservables(const RooArgSet* dataList, Bool_t valueOnly); Create a list of leaf nodes in the arg tree starting with; ourself as top node that match any of the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& testArg, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:22524,abort,abort,22524,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,1,['abort'],['abort']
Safety,"st TGLVector3 &norm2, const TGLVector3 &norm3);  Draw textured triangle. ;  ; void Rgl::DrawFaceTextured (const TGLVertex3 &v1, const TGLVertex3 &v2, const TGLVertex3 &v3, Double_t t1, Double_t t2, Double_t t3, Double_t z, const TGLVector3 &normal);  Draw textured triangle on a plane. ;  ; void Rgl::DrawQuadFilled (const Double_t *v0, const Double_t *v1, const Double_t *v2, const Double_t *v3, const Double_t *normal);  Draw quad face. ;  ; void Rgl::DrawQuadFilled (const TGLVertex3 &v0, const TGLVertex3 &v1, const TGLVertex3 &v2, const TGLVertex3 &v3, const TGLVector3 &normal);  Draw quad face. ;  ; void Rgl::DrawQuadOutline (const TGLVertex3 &v1, const TGLVertex3 &v2, const TGLVertex3 &v3, const TGLVertex3 &v4);  Draw quad outline. ;  ; void Rgl::DrawQuadStripWithRadialGradientFill (unsigned nPoints, const Double_t *inner, const Double_t *innerRGBA, const Double_t *outer, const Double_t *outerRGBA);  TODO: is it possible to use GLdouble to avoid problems with Double_t/GLdouble if they are not the same type? ;  ; void Rgl::DrawSmoothFace (const TGLVertex3 &v1, const TGLVertex3 &v2, const TGLVertex3 &v3, const TGLVector3 &norm1, const TGLVector3 &norm2, const TGLVector3 &norm3);  Draws triangle face, each vertex has its own averaged normal. ;  ; void Rgl::DrawSphere (TGLQuadric *quadric, Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax);  Cylinder for lego3. ;  ; void Rgl::DrawTransparentBox (Double_t xMin, Double_t xMax, Double_t yMin, Double_t yMax, Double_t zMin, Double_t zMax, Int_t fp);  Draws lego's bar as a 3d box. ;  ; void Rgl::DrawTrapezoid (const Double_t ver[][2], Double_t zMin, Double_t zMax, Bool_t color=kTRUE);  ; void Rgl::DrawTrapezoid (const Double_t ver[][3]);  ; void Rgl::DrawTrapezoidTextured (const Double_t ver[][2], Double_t zMin, Double_t zMax, Double_t texMin, Double_t texMax);  In polar coordinates, box became trapezoid. ;  ; void Rgl::DrawTrapezoidTextured (const Double_t ver[][3], Double_t texMin, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGLUtil_8h.html:5157,avoid,avoid,5157,doc/master/TGLUtil_8h.html,https://root.cern,https://root.cern/doc/master/TGLUtil_8h.html,1,['avoid'],['avoid']
Safety,"st TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); voidComputeTwist(); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tDistToPlane(Double_t* point, Double_t* dir, Int_t ipl, Bool_t in) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoArb8.html:2550,safe,safe,2550,root/html528/TGeoArb8.html,https://root.cern,https://root.cern/root/html528/TGeoArb8.html,1,['safe'],['safe']
Safety,"st TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidTGeoTube::ComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoTube::DistFromInsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoTube::DistFromOutsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Int_tDistToHype(const Double_t* point, const Double_t* dir, Double_t* s, Bool_t inner, Bool_t in) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistTo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:3396,safe,safe,3396,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,3,['safe'],['safe']
Safety,"st TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidTGeoTube::ComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoTube::DistFromInsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoTube::DistFromOutsideS(const Double_t* point, const Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoEltu.html:2416,safe,safe,2416,root/html534/TGeoEltu.html,https://root.cern,https://root.cern/root/html534/TGeoEltu.html,3,['safe'],['safe']
Safety,"st and last point; 1732 Int_t dpx = px - gPad->XtoAbsPixel(gPad->XtoPad(fX[0]));; 1733 Int_t dpy = py - gPad->YtoAbsPixel(gPad->XtoPad(fY[0]));; 1734 if (dpx * dpx + dpy * dpy < 25) ipoint = 0;; 1735 else ipoint = fNpoints;; 1736 }; 1737 ; 1738 ; 1739 InsertPointBefore(ipoint, gPad->AbsPixeltoX(px), gPad->AbsPixeltoY(py));; 1740 ; 1741 gPad->Modified();; 1742 return ipoint;; 1743}; 1744 ; 1745 ; 1746////////////////////////////////////////////////////////////////////////////////; 1747/// Insert a new point with coordinates (x,y) before the point number `ipoint`.; 1748 ; 1749void TGraph::InsertPointBefore(Int_t ipoint, Double_t x, Double_t y); 1750{; 1751 if (ipoint < 0) {; 1752 Error(""TGraph"", ""Inserted point index should be >= 0"");; 1753 return;; 1754 }; 1755 ; 1756 if (ipoint > fNpoints) {; 1757 Error(""TGraph"", ""Inserted point index should be <= %d"", fNpoints);; 1758 return;; 1759 }; 1760 ; 1761 if (ipoint == fNpoints) {; 1762 SetPoint(ipoint, x, y);; 1763 return;; 1764 }; 1765 ; 1766 Double_t **ps = ExpandAndCopy(fNpoints + 1, ipoint);; 1767 CopyAndRelease(ps, ipoint, fNpoints++, ipoint + 1);; 1768 ; 1769 // To avoid redefinitions in descendant classes; 1770 FillZero(ipoint, ipoint + 1);; 1771 ; 1772 fX[ipoint] = x;; 1773 fY[ipoint] = y;; 1774}; 1775 ; 1776 ; 1777////////////////////////////////////////////////////////////////////////////////; 1778/// Integrate the TGraph data within a given (index) range.; 1779/// Note that this function computes the area of the polygon enclosed by the points of the TGraph.; 1780/// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; 1781/// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; 1782/// with the first one. It is clear that the order of the point is essential in defining the polygon.; 1783/// Also note that the segments should not intersect.; 1784///; 1785/// NB:; 1786/// - if last=-1 (default) last i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:63121,avoid,avoid,63121,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['avoid'],['avoid']
Safety,"st char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * ApplicationName () const;  ; Int_t Argc () const;  ; char ** Argv () const;  ; char * Argv (Int_t index) const;  Return specified argument. ;  ; void ClearInputFiles ();  Clear list containing macro files passed as program arguments. ;  ; EExitOnException ExitOnException (EExitOnException opt=kExit);  Set the exit on exception option. ;  ; virtual TApplicationImp * GetApplicationImp ();  ; TApplication * GetAppRemote () const;  ; const char * GetIdleCommand () const;  ; TString GetSetup ();  It gets the ROOT installation setup as TString. ;  ; TSignalHandler * GetSignalHandler () const;  ; virtual void HandleException (Int_t sig);  Handle exceptions (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; virtual void HandleIdleTimer ();  Handle idle timeout. ;  ; virtual Bool_t HandleTermInput ();  ; virtual void Hide ();  ; virtual void Iconify ();  ; virtual void Init ();  ; void InitializeGraphics (Bool_t only_web=kFALSE);  Initialize the graphics environment. ;  ; TObjArray * InputFiles () const;  ; virtual Bool_t IsCmdThread ();  ; Bool_t IsRunning () const;  ; virtual void KeyPressed (Int_t key);  Emit signal when console keyboard key was pressed. ;  ; virtual void LineProcessed (const char *line);  Emit signal when a line has been processed. ;  ; virtual void Lower ();  ; void ls (Option_t *option="""") const override;  Show available sessions. ;  ; Bool_t NoLogoOpt () const;  ; Bool_t NoLogOpt () const;  ; virtual void Open ();  ; void OpenForumTopic (const TString &type);  It opens a Forum topic in a web browser with prefilled ROOT version. ;  ; void OpenGitHubIssue (const TString &type);  It opens a GitHub issue in a web browser with prefilled ROOT version. ;  ; void OpenInBrowser (const TString &url)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:3464,timeout,timeout,3464,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,2,['timeout'],['timeout']
Safety,"st char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TObjArray fAji;  Array of pointers to predictions of real template distributions. ;  ; Double_t fChisquare;  Template fit chisquare. ;  ; std::vector< Int_t > fExcludedBins;  Bins excluded from the fit. ;  ; Bool_t fFitDone;  Flags whether a valid fit has been performed. ;  ; Int_t fHighLimitX;  Last bin in X dimension. ;  ; Int_t fHighLimitY;  Last bin in Y dimension. ;  ; Int_t fHighLimitZ;  Last bin in Z dimension. ;  ; Int_t fLowLimitX;  First bin in X dimension. ;  ; Int_t fLowLimitY;  First bin in Y dimension. ;  ; Int_t fLowLimitZ;  First bin in Z dimension. ;  ; Int_t fNDF;  Number of degrees of freedom in the fit. ;  ; Int_t fNpar;  number of fit parameters ;  ; Int_t fNpfits;  Number of points used in the fit. ;  ; Histograms; TH1 * fData;  Pointer to the ""data"" histogram to be fitted to. ;  ; TObjArray fMCs;  Array of pointers to template histograms. ;  ; TObjArray fWeights;  Array of pointers to corresponding weight factors (may be null) ;  ; Double_t fIntegralData;  ""data"" histogram content integral o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:17876,predict,predictions,17876,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['predict'],['predictions']
Safety,"st char* , Int_t , UInt_t ); Interface to basic system I/O routines. { return 0; }. Int_t SysClose(Int_t ); { return 0; }. Int_t SysRead(Int_t , void* , Int_t ); { return 0; }. Int_t SysWrite(Int_t , const void* , Int_t ); { return 0; }. Long64_t SysSeek(Int_t , Long64_t , Int_t ); { return 0; }. Int_t SysStat(Int_t , Long_t* , Long64_t* , Long_t* , Long_t* ); { return 0; }. Int_t SysSync(Int_t ); { return 0; }. TXMLFile(). void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. Int_t GetIOVersion() const; { return fIOVersion; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char* = ""*"", Option_t* = ""new""); {}. void Map(); {}. void Paint(Option_t* = """"); {}. void Print(Option_t* = """") const; {}. Bool_t ReadBuffer(char* , Int_t ); { return kFALSE; }. Bool_t ReadBuffer(char* , Long64_t , Int_t ); { return kFALSE; }. void ReadFree(); {}. Int_t Recover(); { return 0; }. void Seek(Long64_t , TFile::ERelativeTo = kBeg); {}. void SetEND(Long64_t ); {}. Int_t Sizeof() const; { return 0; }. Bool_t WriteBuffer(const char* , Int_t ); { return kFALSE; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0); { return 0; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0) const; { return 0; }. void WriteFree(); {}. void WriteHeader(); {}. » Author: Sergey Linev 10.05.2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/xml:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXMLFile.html:36077,Recover,Recover,36077,root/html604/TXMLFile.html,https://root.cern,https://root.cern/root/html604/TXMLFile.html,1,['Recover'],['Recover']
Safety,"st char* , Int_t , UInt_t ); Interface to basic system I/O routines. { return 0; }. Int_t SysClose(Int_t ); { return 0; }. Int_t SysRead(Int_t , void* , Int_t ); { return 0; }. Int_t SysWrite(Int_t , const void* , Int_t ); { return 0; }. Long64_t SysSeek(Int_t , Long64_t , Int_t ); { return 0; }. Int_t SysStat(Int_t , Long_t* , Long64_t* , Long_t* , Long_t* ); { return 0; }. Int_t SysSync(Int_t ); { return 0; }. TXMLFile(). void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. Int_t GetIOVersion() const; { return fIOVersion; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char* = ""*"", Option_t* = ""new""); {}. void Map(); {}. void Paint(Option_t* = """"); {}. void Print(Option_t* = """") const; {}. Bool_t ReadBuffer(char* , Int_t ); { return kFALSE; }. Bool_t ReadBuffer(char* , Long64_t , Int_t ); { return kFALSE; }. void ReadFree(); {}. Int_t Recover(); { return 0; }. void Seek(Long64_t , TFile::ERelativeTo = kBeg); {}. void SetEND(Long64_t ); {}. Int_t Sizeof() const; { return 0; }. Bool_t WriteBuffer(const char* , Int_t ); { return kFALSE; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0); { return 0; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0) const; { return 0; }. void WriteFree(); {}. void WriteHeader(); {}. » Author: Sergey Linev 10.05.2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/xml:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLFile.html:36077,Recover,Recover,36077,root/html602/TXMLFile.html,https://root.cern,https://root.cern/root/html602/TXMLFile.html,1,['Recover'],['Recover']
Safety,"st char* SQLDefaultTableType() const; { return fOtherTypes[12]; }. TSQLFile(). Bool_t GetUseSuffixes() const; configuration of SQL. { return fUseSuffixes; }. Int_t GetArrayLimit() const; { return fArrayLimit; }. void SkipArrayLimit(); { SetArrayLimit(-1); }. const char* GetTablesType() const; { return fTablesType.Data(); }. Int_t GetUseTransactions() const; { return fUseTransactions; }. Int_t GetUseIndexes() const; { return fUseIndexes; }. Int_t GetQuerisCounter() const; { return fQuerisCounter; }. void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char* = ""*"", Option_t* = ""new""); {}. void Map(); {}. void Paint(Option_t* = """"); {}. void Print(Option_t* = """") const; {}. Bool_t ReadBuffer(char* , Int_t ); { return kFALSE; }. Bool_t ReadBuffer(char* , Long64_t , Int_t ); { return kFALSE; }. void ReadFree(); {}. Int_t Recover(); { return 0; }. void Seek(Long64_t , TFile::ERelativeTo = kBeg); {}. void SetEND(Long64_t ); {}. Int_t Sizeof() const; { return 0; }. Bool_t WriteBuffer(const char* , Int_t ); { return kFALSE; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0); { return 0; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0) const; { return 0; }. void WriteFree(); {}. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSQLFile.html:50963,Recover,Recover,50963,root/html604/TSQLFile.html,https://root.cern,https://root.cern/root/html604/TSQLFile.html,1,['Recover'],['Recover']
Safety,"st char* SQLDefaultTableType() const; { return fOtherTypes[12]; }. TSQLFile(). Bool_t GetUseSuffixes() const; configuration of SQL. { return fUseSuffixes; }. Int_t GetArrayLimit() const; { return fArrayLimit; }. void SkipArrayLimit(); { SetArrayLimit(-1); }. const char* GetTablesType() const; { return fTablesType.Data(); }. Int_t GetUseTransactions() const; { return fUseTransactions; }. Int_t GetUseIndexes() const; { return fUseIndexes; }. Int_t GetQuerisCounter() const; { return fQuerisCounter; }. void DrawMap(const char* = ""*"", Option_t* = """"); {}. void FillBuffer(char*& ); {}. void Flush(); {}. Long64_t GetEND() const; { return 0; }. Int_t GetErrno() const; { return 0; }. void ResetErrno() const; {}. Int_t GetNfree() const; { return 0; }. Int_t GetNbytesInfo() const; {return 0; }. Int_t GetNbytesFree() const; {return 0; }. Long64_t GetSeekFree() const; {return 0; }. Long64_t GetSeekInfo() const; {return 0; }. Long64_t GetSize() const; { return 0; }. void MakeFree(Long64_t , Long64_t ); {}. void MakeProject(const char* , const char* = ""*"", Option_t* = ""new""); {}. void Map(); {}. void Paint(Option_t* = """"); {}. void Print(Option_t* = """") const; {}. Bool_t ReadBuffer(char* , Int_t ); { return kFALSE; }. Bool_t ReadBuffer(char* , Long64_t , Int_t ); { return kFALSE; }. void ReadFree(); {}. Int_t Recover(); { return 0; }. void Seek(Long64_t , TFile::ERelativeTo = kBeg); {}. void SetEND(Long64_t ); {}. Int_t Sizeof() const; { return 0; }. Bool_t WriteBuffer(const char* , Int_t ); { return kFALSE; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0); { return 0; }. Int_t Write(const char* = 0, Int_t = 0, Int_t = 0) const; { return 0; }. void WriteFree(); {}. » Author: Sergey Linev 20/11/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sql:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLFile.html:50963,Recover,Recover,50963,root/html602/TSQLFile.html,https://root.cern,https://root.cern/root/html602/TSQLFile.html,1,['Recover'],['Recover']
Safety,"st char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoSphere&operator=(const TGeoSphere&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); voidSetDimensions(Double_t* param, Int_t nparam); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumberOfDivisions(Int_t p); static voidTObject::SetObjectS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoSphere.html:8749,Safe,SafetyPhi,8749,root/html602/TGeoSphere.html,https://root.cern,https://root.cern/root/html602/TGeoSphere.html,2,['Safe'],['SafetyPhi']
Safety,"st char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual Bool_tPaintComposite(Option_t* option = """") const; virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterYourself(); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t*); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCompositeShape.html:14218,Safe,SafetyPhi,14218,root/html602/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html602/TGeoCompositeShape.html,2,['Safe'],['SafetyPhi']
Safety,"st of persistent data members.Definition TClass.cxx:2098; TClass::IsTObjectBool_t IsTObject() constReturn kTRUE is the class inherits from TObject.Definition TClass.cxx:6005; TClass::GetStreamerInfoTVirtualStreamerInfo * GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constreturns a pointer to the TVirtualStreamerInfo object for version If the object does not exist,...Definition TClass.cxx:4666; TClass::GetBaseClassOffsetInt_t GetBaseClassOffset(const TClass *toBase, void *address=nullptr, bool isDerivedObject=true)Definition TClass.cxx:2858; TClass::GetCollectionProxyTVirtualCollectionProxy * GetCollectionProxy() constReturn the proxy describing the collection (if any).Definition TClass.cxx:2964; TClass::GetClassstatic TClass * GetClass(const char *name, Bool_t load=kTRUE, Bool_t silent=kFALSE)Static method returning pointer to TClass of the specified class name.Definition TClass.cxx:3035; TCollection::Classstatic TClass * Class(); TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TDatimeThis class stores the date and time with a precision of one second in an unsigned 32 bit word (950130...Definition TDatime.h:37; TDatime::FillBuffervoid FillBuffer(char *&buffer)Encode Date/Time into buffer, used by I/O system.Definition TDatime.cxx:229; TDatime::AsSQLStringconst char * AsSQLString() constReturn the date & time in SQL compatible string format, like: 1997-01-15 20:16:28.Definition TDatime.cxx:152; TDatime::SizeofInt_t Sizeof() constDefinition TDatime.h:81; TDatime::Streamervirtual void Streamer(TBuffer &)Stream a object of type TDatime.Definition TDatime.cxx:416; TDatime::Setvoid Set()Set Date/Time to current time as reported by the system.Definition TDatime.cxx:289; TDatime::ReadBuffervoid ReadBuffer(char *&buffer)Deco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:82242,safe,safe,82242,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['safe'],['safe']
Safety,"st of protocol numbers (e.g., TCP==6) see:; 15013 * https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml; 15014 */; 15015 if ((so.sock =; 15016 socket(so.lsa.sa.sa_family,; 15017 SOCK_STREAM,; 15018 (ip_version == 99) ? (/* LOCAL */ 0) : (/* TCP */ 6))); 15019 == INVALID_SOCKET) {; 15020 ; 15021 mg_cry_ctx_internal(phys_ctx,; 15022 ""cannot create socket (entry %i)"",; 15023 portsTotal);; 15024 continue;; 15025 }; 15026 ; 15027#if defined(_WIN32); 15028 /* Windows SO_REUSEADDR lets many procs binds to a; 15029 * socket, SO_EXCLUSIVEADDRUSE makes the bind fail; 15030 * if someone already has the socket -- DTL */; 15031 /* NOTE: If SO_EXCLUSIVEADDRUSE is used,; 15032 * Windows might need a few seconds before; 15033 * the same port can be used again in the; 15034 * same process, so a short Sleep may be; 15035 * required between mg_stop and mg_start.; 15036 */; 15037 if (setsockopt(so.sock,; 15038 SOL_SOCKET,; 15039 SO_EXCLUSIVEADDRUSE,; 15040 (SOCK_OPT_TYPE)&on,; 15041 sizeof(on)); 15042 != 0) {; 15043 ; 15044 /* Set reuse option, but don't abort on errors. */; 15045 mg_cry_ctx_internal(; 15046 phys_ctx,; 15047 ""cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)"",; 15048 portsTotal);; 15049 }; 15050#else; 15051 if (setsockopt(so.sock,; 15052 SOL_SOCKET,; 15053 SO_REUSEADDR,; 15054 (SOCK_OPT_TYPE)&on,; 15055 sizeof(on)); 15056 != 0) {; 15057 ; 15058 /* Set reuse option, but don't abort on errors. */; 15059 mg_cry_ctx_internal(; 15060 phys_ctx,; 15061 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15062 portsTotal);; 15063 }; 15064#endif; 15065 ; 15066#if defined(USE_X_DOM_SOCKET); 15067 if (ip_version == 99) {; 15068 /* Unix domain socket */; 15069 } else; 15070#endif; 15071 ; 15072 if (ip_version > 4) {; 15073 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15074#if defined(USE_IPV6); 15075 if (ip_version > 6) {; 15076 if (so.lsa.sa.sa_family == AF_INET6; 15077 && setsockopt(so.sock,; 15078 IPPROTO_IPV6,; 15079 IPV6_V6ONLY,; 15080 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:445274,abort,abort,445274,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['abort'],['abort']
Safety,"st of protocol numbers (e.g., TCP==6) see:; 15014 * https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml; 15015 */; 15016 if ((so.sock =; 15017 socket(so.lsa.sa.sa_family,; 15018 SOCK_STREAM,; 15019 (ip_version == 99) ? (/* LOCAL */ 0) : (/* TCP */ 6))); 15020 == INVALID_SOCKET) {; 15021 ; 15022 mg_cry_ctx_internal(phys_ctx,; 15023 ""cannot create socket (entry %i)"",; 15024 portsTotal);; 15025 continue;; 15026 }; 15027 ; 15028#if defined(_WIN32); 15029 /* Windows SO_REUSEADDR lets many procs binds to a; 15030 * socket, SO_EXCLUSIVEADDRUSE makes the bind fail; 15031 * if someone already has the socket -- DTL */; 15032 /* NOTE: If SO_EXCLUSIVEADDRUSE is used,; 15033 * Windows might need a few seconds before; 15034 * the same port can be used again in the; 15035 * same process, so a short Sleep may be; 15036 * required between mg_stop and mg_start.; 15037 */; 15038 if (setsockopt(so.sock,; 15039 SOL_SOCKET,; 15040 SO_EXCLUSIVEADDRUSE,; 15041 (SOCK_OPT_TYPE)&on,; 15042 sizeof(on)); 15043 != 0) {; 15044 ; 15045 /* Set reuse option, but don't abort on errors. */; 15046 mg_cry_ctx_internal(; 15047 phys_ctx,; 15048 ""cannot set socket option SO_EXCLUSIVEADDRUSE (entry %i)"",; 15049 portsTotal);; 15050 }; 15051#else; 15052 if (setsockopt(so.sock,; 15053 SOL_SOCKET,; 15054 SO_REUSEADDR,; 15055 (SOCK_OPT_TYPE)&on,; 15056 sizeof(on)); 15057 != 0) {; 15058 ; 15059 /* Set reuse option, but don't abort on errors. */; 15060 mg_cry_ctx_internal(; 15061 phys_ctx,; 15062 ""cannot set socket option SO_REUSEADDR (entry %i)"",; 15063 portsTotal);; 15064 }; 15065#endif; 15066 ; 15067#if defined(USE_X_DOM_SOCKET); 15068 if (ip_version == 99) {; 15069 /* Unix domain socket */; 15070 } else; 15071#endif; 15072 ; 15073 if (ip_version > 4) {; 15074 /* Could be 6 for IPv6 onlyor 10 (4+6) for IPv4+IPv6 */; 15075#if defined(USE_IPV6); 15076 if (ip_version > 6) {; 15077 if (so.lsa.sa.sa_family == AF_INET6; 15078 && setsockopt(so.sock,; 15079 IPPROTO_IPV6,; 15080 IPV6_V6ONLY,; 15081 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:445307,abort,abort,445307,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['abort'],['abort']
Safety,"st! [4] tangents of twist angles ; Double_tfTwistAngletwist angle in degrees; Double_tTGeoArb8::fXY[8][2]list of vertices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtra(); Default ctor. TGeoGtra(Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); Constructor. TGeoGtra(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); Constructor providing the name of the shape. ~TGeoGtra(); Destructor. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the shape. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the shape. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; In case shape has some negative parameters, these has to be computed; in order to fit the mother. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; Computes the closest distance from given point to this shape. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set all arb8 params in one step.; param[0] = dz; param[1] = theta; param[2] = phi; param[3] = h1; param[4] = bl1; param[5] = tl1; param[6] = alpha1; param[7] = h2; param[8] = bl2; param[9] = tl2; param[10] = alpha2; param[11] = twist. TGeoGtra(); constructors. Double_t GetTwistAngle() const; {return fTwistAngle;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoArb8.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoGtra.html:15195,safe,safe,15195,root/html530/TGeoGtra.html,https://root.cern,https://root.cern/root/html530/TGeoGtra.html,2,['safe'],['safe']
Safety,"st! [4] tangents of twist angles ; Double_tfTwistAngletwist angle in degrees; Double_tTGeoArb8::fXY[8][2]list of vertices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtra(); Default ctor. TGeoGtra(Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); Constructor. TGeoGtra(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t twist, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); Constructor providing the name of the shape. ~TGeoGtra(); Destructor. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the shape. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the shape. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; In case shape has some negative parameters, these has to be computed; in order to fit the mother. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set all arb8 params in one step.; param[0] = dz; param[1] = theta; param[2] = phi; param[3] = h1; param[4] = bl1; param[5] = tl1; param[6] = alpha1; param[7] = h2; param[8] = bl2; param[9] = tl2; param[10] = alpha2; param[11] = twist. TGeoGtra(); constructors. Double_t GetTwistAngle() const; {return fTwistAngle;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoArb8.h 34058 2010-06-22 12:59:51Z agheata $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGtra.html:15017,safe,safe,15017,root/html528/TGeoGtra.html,https://root.cern,https://root.cern/root/html528/TGeoGtra.html,1,['safe'],['safe']
Safety,"st; # ---------------------------------------------------------------------; ; # Associated nsig/nbkg as expected number of events with sig/bkg; esig = ROOT.RooExtendPdf(""esig"", ""extended signal pdf"", sig, nsig); ebkg = ROOT.RooExtendPdf(""ebkg"", ""extended background pdf"", bkg, nbkg); ; # Sum extended components without coefs; # -------------------------------------------------------------------------; ; # Construct sum of two extended pdf (no coefficients required); model2 = ROOT.RooAddPdf(""model2"", ""(g1+g2)+a"", [ebkg, esig]); ; # Draw the frame on the canvas; c = ROOT.TCanvas(""rf202_extendedmlfit"", ""rf202_extendedmlfit"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.4); xframe.Draw(); ; c.SaveAs(""rf202_extendedmlfit.png""); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] IN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf202__extendedmlfit_8py.html:4020,safe,safe,4020,doc/master/rf202__extendedmlfit_8py.html,https://root.cern,https://root.cern/doc/master/rf202__extendedmlfit_8py.html,1,['safe'],['safe']
Safety,"st; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEventIter&operator=(const TEventIter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStopProcess(Bool_t abort); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEventIter.html:4461,abort,abort,4461,root/html528/TEventIter.html,https://root.cern,https://root.cern/root/html528/TEventIter.html,1,['abort'],['abort']
Safety,"st; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidTGeoTube::ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoTube::DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoTube::DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Int_tDistToHype(Double_t* point, Double_t* dir, Double_t* s, Bool_t inner) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHype.html:3184,safe,safe,3184,root/html528/TGeoHype.html,https://root.cern,https://root.cern/root/html528/TGeoHype.html,1,['safe'],['safe']
Safety,"st; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidTGeoTube::ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoTube::DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoTube::DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Int_tDistToHype(Double_t* point, Double_t* dir, Double_t* s, Bool_t inner, Bool_t in) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoHype.html:3272,safe,safe,3272,root/html530/TGeoHype.html,https://root.cern,https://root.cern/root/html530/TGeoHype.html,2,['safe'],['safe']
Safety,"st; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidTGeoTube::ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoTube::DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoTube::DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoEltu.html:2204,safe,safe,2204,root/html528/TGeoEltu.html,https://root.cern,https://root.cern/root/html528/TGeoEltu.html,3,['safe'],['safe']
Safety,"st;  ; size_t GetInputWidth () const;  ; Layer_t * GetLayerAt (size_t i);  Get the layer in the vector of layers at position i. ;  ; const Layer_t * GetLayerAt (size_t i) const;  ; std::vector< Layer_t * > & GetLayers ();  ; const std::vector< Layer_t * > & GetLayers () const;  ; ELossFunction GetLossFunction () const;  ; size_t GetOutputWidth () const;  ; ERegularization GetRegularization () const;  ; Scalar_t GetWeightDecay () const;  ; void Initialize ();  DAE functions. ;  ; bool IsTraining () const;  ; Scalar_t Loss (const Matrix_t &groundTruth, const Matrix_t &weights, bool includeRegularization=true) const;  Function for evaluating the loss, based on the activations stored in the last layer. ;  ; Scalar_t Loss (Tensor_t &input, const Matrix_t &groundTruth, const Matrix_t &weights, bool inTraining=false, bool includeRegularization=true);  Function for evaluating the loss, based on the propagation of the given input. ;  ; void Prediction (Matrix_t &predictions, EOutputFunction f) const;  Prediction based on activations stored in the last layer. ;  ; void Prediction (Matrix_t &predictions, Tensor_t &input, EOutputFunction f);  Prediction for the given inputs, based on what network learned. ;  ; void Print () const;  Print the Deep Net Info. ;  ; Scalar_t RegularizationTerm () const;  Function for computing the regularizaton term to be added to the loss function .  ; void ResetTraining ();  Function that reset some training flags after looping all the events but not the weights. ;  ; void SetBatchDepth (size_t batchDepth);  ; void SetBatchHeight (size_t batchHeight);  ; void SetBatchSize (size_t batchSize);  Setters. ;  ; void SetBatchWidth (size_t batchWidth);  ; void SetDropoutProbabilities (const std::vector< Double_t > &probabilities);  ; void SetInitialization (EInitialization I);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetLossFunction (ELossFunction J);  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:6467,Predict,Prediction,6467,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,3,"['Predict', 'predict']","['Prediction', 'predictions']"
Safety,"stInterval; 1630 << std::setw(12) << elapsed_testing.count(); 1631 << std::setw(12) << 1. / eventTime; 1632 << std::setw(12) << convergenceCount; 1633 << Endl;; 1634 ; 1635 if (converged) {; 1636 Log() << Endl;; 1637 }; 1638 tstart = std::chrono::system_clock::now();; 1639 }; 1640 ; 1641 // if (stepCount % 10 == 0 || converged) {; 1642 if (converged && debug) {; 1643 Log() << ""Final Deep Net Weights for phase "" << trainingPhase << "" epoch "" << nTrainEpochs; 1644 << Endl;; 1645 auto & weights_tensor = deepNet.GetLayerAt(0)->GetWeights();; 1646 auto & bias_tensor = deepNet.GetLayerAt(0)->GetBiases();; 1647 for (size_t l = 0; l < weights_tensor.size(); ++l); 1648 weights_tensor[l].Print();; 1649 bias_tensor[0].Print();; 1650 }; 1651 ; 1652 }; 1653 ; 1654 trainingPhase++;; 1655 } // end loop on training Phase; 1656}; 1657 ; 1658////////////////////////////////////////////////////////////////////////////////; 1659void MethodDL::Train(); 1660{; 1661 if (fInteractive) {; 1662 Log() << kFATAL << ""Not implemented yet"" << Endl;; 1663 return;; 1664 }; 1665 ; 1666 // using for training same scalar type defined for the prediction; 1667 if (this->GetArchitectureString() == ""GPU"") {; 1668#ifdef R__HAS_TMVAGPU; 1669 Log() << kINFO << ""Start of deep neural network training on GPU."" << Endl << Endl;; 1670#ifdef R__HAS_CUDNN; 1671 TrainDeepNet<DNN::TCudnn<ScalarImpl_t> >();; 1672#else; 1673 TrainDeepNet<DNN::TCuda<ScalarImpl_t>>();; 1674#endif; 1675#else; 1676 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 1677 ""you have CUDA installed and it was successfully ""; 1678 ""detected by CMAKE.""; 1679 << Endl;; 1680 return;; 1681#endif; 1682 } else if (this->GetArchitectureString() == ""CPU"") {; 1683#ifdef R__HAS_TMVACPU; 1684 // note that number of threads used for BLAS might be different; 1685 // e.g use openblas_set_num_threads(num_threads) for OPENBLAS backend; 1686 Log() << kINFO << ""Start of deep neural network training on CPU using MT, nthreads = ""; 1687 << gConfig().G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:65983,predict,prediction,65983,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['predict'],['prediction']
Safety,"stNo, Int_t nsamples = 10000, Option_t *option = """");; 96 virtual void ComputeBBox() = 0;; 97 virtual void ComputeNormal(const Double_t *point, const Double_t *dir, Double_t *norm) = 0;; 98 virtual void ComputeNormal_v(const Double_t *, const Double_t *, Double_t *, Int_t) {}; 99 virtual Bool_t Contains(const Double_t *point) const = 0;; 100 virtual void Contains_v(const Double_t *, Bool_t *, Int_t) const {}; 101 virtual Bool_t CouldBeCrossed(const Double_t *point, const Double_t *dir) const = 0;; 102 Int_t DistancetoPrimitive(Int_t px, Int_t py) override = 0;; 103 virtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact = 1,; 104 Double_t step = TGeoShape::Big(), Double_t *safe = nullptr) const = 0;; 105 virtual void DistFromInside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) const {}; 106 virtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact = 1,; 107 Double_t step = TGeoShape::Big(), Double_t *safe = nullptr) const = 0;; 108 virtual void DistFromOutside_v(const Double_t *, const Double_t *, Double_t *, Int_t, Double_t *) const {}; 109 static Double_t DistToPhiMin(const Double_t *point, const Double_t *dir, Double_t s1, Double_t c1, Double_t s2,; 110 Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE);; 111 virtual TGeoVolume *; 112 Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) = 0;; 113 void Draw(Option_t *option = """") override; // *MENU*; 114 void ExecuteEvent(Int_t event, Int_t px, Int_t py) override;; 115 virtual const char *GetAxisName(Int_t iaxis) const = 0;; 116 virtual Double_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const = 0;; 117 virtual void GetBoundingCylinder(Double_t *param) const = 0;; 118 virtual const TBuffer3D &GetBuffer3D(Int_t reqSections, Bool_t localFrame) const;; 119 virtual Int_t GetByteCount() const = 0;; 120 virtual Bool_t GetPointsOnSegments(Int_t npoints, Double_t *array)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:3926,safe,safe,3926,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,1,['safe'],['safe']
Safety,stStatistic::_nGofNumber of sub-contexts ; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; Int_tRooAbsTestStatistic::_numSetsTotal number of partitions in parallel calculation mode; Double_tRooAbsTestStatistic::_offset! Offset; Double_tRooAbsTestStatistic::_offsetCarry! avoids loss of precision; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_optimized!; RooAbsData*RooAbsOptTestStatistic::_origDataOriginal data ; RooAbsReal*RooAbsOptTestStatistic::_origFuncOriginal function ; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; RooRefArrayRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; RooArgSet_rrvArgsSet of real-valued observables; TIterator*_rrvIter! Iterator over set of real-valued observables; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooA,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooXYChi2Var.html:39758,avoid,avoids,39758,root/html534/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html534/RooXYChi2Var.html,1,['avoid'],['avoids']
Safety,"stancetoPrimitive(). Int_t TGeoTorus::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Computes distance from point (px,py) to the object. ; This member function must be implemented for each graphics primitive. This default function returns a big number (999999). ; Reimplemented from TGeoBBox. ◆ DistFromInside(). Double_t TGeoTorus::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ DistFromInside_v(). void TGeoTorus::DistFromInside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ DistFromOutside(). Double_t TGeoTorus::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ DistFromOutside_v(). void TGeoTorus::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Divide(). TGeoVolume * TGeoTorus::Divide ; (; TGeoVolume * ; voldiv, . const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step . ). overridevirtual . Reimplemented from TGeoBBox. ◆ GetAxisName(). const char * TGeoTorus::GetAxisName ; (; Int_t ; iaxis); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetAxisRange(). Double_t TGeoTorus::GetAxisRange ; (; Int_t ; iaxis, . Double_t & ; xlo, . Double_t & ; xhi . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetBoundingCylinder(). void TGeoTorus::GetBoundingCylinder ; (; Double_t * ; param); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetBuffer3D(). const TBuffer3D ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTorus.html:26245,safe,safe,26245,doc/master/classTGeoTorus.html,https://root.cern,https://root.cern/doc/master/classTGeoTorus.html,1,['safe'],['safe']
Safety,"start, Double_t step); --- Divide this trd2 shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Only Z divisions; are supported. For Z divisions just return the pointer to the volume to be; divided. In case a wrong division axis is supplied, returns pointer to; volume that was divided. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; Fills real parameters of a positioned box inside this. Returns 0 if successfull. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void InspectShape() const; print shape parameters. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); set arb8 params in one step :. void SetPoints(Double_t* points) const; create trd2 mesh points. void SetPoints(Float_t* points) const; create trd2 mesh points. void SetVertex(Double_t* vertex) const; set vertex of a corner according to visibility flags. void Sizeof3D() const; fill size of this 3-D object. TGeoTrd2(); methods; constructors. Int_t GetByteCount() const; {return 56;}. Double_t GetDx1() const; {return fDx1;}. Double_t GetDx2() const; {return fDx2;}. Double_t GetDy1() const; {return fDy1;}. Double_t GetDy2() const; {return fDy2;}. Double_t GetDz() const; {return fDz;}. Bool_t IsCylType() const; {return kFALSE;}. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademake",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTrd2.html:14311,Safe,Safety,14311,root/html528/TGeoTrd2.html,https://root.cern,https://root.cern/root/html528/TGeoTrd2.html,3,['Safe'],['Safety']
Safety,"static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPara.html:2167,safe,safe,2167,root/html530/TGeoPara.html,https://root.cern,https://root.cern/root/html530/TGeoPara.html,3,['safe'],['safe']
Safety,"static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tTGeoBBox::Capacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoShapeAssembly.html:1804,safe,safe,1804,root/html530/TGeoShapeAssembly.html,https://root.cern,https://root.cern/root/html530/TGeoShapeAssembly.html,1,['safe'],['safe']
Safety,"static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TBuffer3D*fBuff1Buffer containing mesh vertices for first volume; TBuffer3D*fBuff2Buffer containing mesh vertices for second volume; Bool_t*fFlags! Array of flags per volume.; Bool_tfFullCheckFull overlap checking; TGeoManager*fGeoManagerpointer to geometry manager; Int_tfNchecks! Number of checks for current volume; Int_tfNmeshPoints! Number of points on mesh to be checked; TGeoNode*fSelectedNode! Selected node for overlap checking; TStopwatch*fTimer! Timer; Double_t*fVal1! Array of number of crossings per volume.; Double_t*fVal2! Array of timing per volume.; TGeoVolume*fVsafevolume to which a safety sphere node was added. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoChecker(); Default constructor. TGeoChecker(TGeoManager* geom); Constructor for a given geometry. ~TGeoChecker(); Destructor. void OpProgress(const char* opname, Long64_t current, Long64_t size, TStopwatch* watch = 0, Bool_t last = kFALSE, Bool_t refresh = kFALSE, const char* msg = """"); Print current operation progress. void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.); Check pushes and pulls needed to cross the next boundary with respect to the; position given by FindNextBoundary. If radius is not mentioned the full bounding; box will be sampled. void CheckBoundaryReference(Int_t icheck = -1); Check the boundary errors reference file created by CheckBoundaryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void Check",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoChecker.html:10901,safe,safety,10901,root/html602/TGeoChecker.html,https://root.cern,https://root.cern/root/html602/TGeoChecker.html,2,['safe'],['safety']
Safety,"static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoTubeSeg; static Double_t Capacity (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ComputeNormalS (const Double_t *point, const Double_t *dir, Double_t *norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2);  ; static const char * DeclFileName ();  ; static Double_t DistFromInsideS (const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi);  ; static Double_t DistFromOutsideS (const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi);  ; static Double_t SafetyS (const Double_t *point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Int_t skipz=0);  ;  Static Public Member Functions inherited from TGeoTube; static Double_t Capacity (Double_t rmin, Double_t rmax, Double_t dz);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ComputeNormalS (const Double_t *point, const Double_t *dir, Double_t *norm, Double_t rmin, Double_t rmax, Double_t dz);  ; static const char * DeclFileName ();  ; static Double_t DistFromInsideS (const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz);  ; static Double_t DistFromOutsideS (const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax, Double_t dz);  ; static void DistToTube (Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t &b, Double_t &delta);  ; static Double_t SafetyS (const Double_t *point, Bool_t in, Double_t rmin, Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:19151,Safe,SafetyS,19151,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,1,['Safe'],['SafetyS']
Safety,"static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoEltu&operator=(const TGeoEltu&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEltuDimensions(Double_t a, Double_t b, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoEltu.html:9218,Safe,SafetyS,9218,root/html534/TGeoEltu.html,https://root.cern,https://root.cern/root/html534/TGeoEltu.html,1,['Safe'],['SafetyS']
Safety,"std::chrono::system_clock::now();; 1064 ; 1065 if (fInteractive) {; 1066 fInteractive->AddPoint(stepCount, trainingError, testError);; 1067 fIPyCurrentIter = 100.0 * minimizer.GetConvergenceCount(); 1068 / minimizer.GetConvergenceSteps ();; 1069 if (fExitFromTraining) break;; 1070 } else {; 1071 Log() << std::setw(10) << stepCount << "" | ""; 1072 << std::setw(12) << trainingError; 1073 << std::setw(12) << testError; 1074 << std::setw(12) << nFlops / seconds; 1075 << std::setw(12) << minimizer.GetConvergenceCount() << Endl;; 1076 if (converged) {; 1077 Log() << Endl;; 1078 }; 1079 }; 1080 }; 1081 }; 1082 for (size_t l = 0; l < net.GetDepth(); l++) {; 1083 fNet.GetLayer(l).GetWeights() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetWeights();; 1084 fNet.GetLayer(l).GetBiases() = (TMatrixT<Scalar_t>) net.GetLayer(l).GetBiases();; 1085 }; 1086 }; 1087 ; 1088#else // DNNCUDA flag not set.; 1089 ; 1090 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 1091 ""you have CUDA installed and it was successfully ""; 1092 ""detected by CMAKE."" << Endl;; 1093#endif // DNNCUDA; 1094}; 1095 ; 1096////////////////////////////////////////////////////////////////////////////////; 1097 ; 1098void TMVA::MethodDNN::TrainCpu(); 1099{; 1100 ; 1101#ifdef DNNCPU // Included only if DNNCPU flag is set.; 1102 Log() << kINFO << ""Start of neural network training on CPU."" << Endl << Endl;; 1103 ; 1104 size_t nValidationSamples = GetNumValidationSamples();; 1105 size_t nTrainingSamples = GetEventCollection(Types::kTraining).size() - nValidationSamples;; 1106 size_t nTestSamples = nValidationSamples;; 1107 ; 1108 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 1109 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 1110 ; 1111 fNet.Initialize(fWeightInitialization);; 1112 ; 1113 size_t trainingPhase = 1;; 1114 for (TTrainingSettings & settings : fTrainingSettings) {; 1115 ; 1116 if (fInteractive){; 1117 fInteractive->ClearGraphs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:39140,detect,detected,39140,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['detect'],['detected']
Safety,"std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same order as the tags. ; [in]inputColumnsthe names of the columns to be passed to the callable. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". colName is used if none is provided. NoteThis overload ensures that the ambiguity between C++20 string, vector<string> construction from init list is avoided.; See alsoThis Vary() overload for more information. ; Definition at line 972 of file RInterface.hxx. ◆ Vary() [6/11]. template<typename Proxied , typename DataSource = void> . template<typename F > . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; std::initializer_list< std::string > ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona callable that evaluates the varied values for the specified columns. The callable can take any column values as input, similarly to what happens during Filter and Define calls. It must return an RVec of varied values, one for each variation tag, in the same orde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:145288,avoid,avoided,145288,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['avoid'],['avoided']
Safety,"std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_key>#<session_key> When. ;  ; std::string GetUserArgs () const;  Returns configured user arguments for web window See SetUserArgs method for more details. ;  ; unsigned GetWidth () const;  returns configured window width (0 - default) actual window width can be different ;  ; int GetX () const;  returns configured window X position (-1 - default) ;  ; int GetY () const;  returns configured window Y position (-1 - default) ;  ; bool HasConnection (unsigned connid=0, bool only_active=true) const;  returns true if specified connection ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RWebWindow.html:3770,timeout,timeout,3770,doc/master/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RWebWindow.html,1,['timeout'],['timeout']
Safety,"std::vector< unsigned > GetConnections (unsigned excludeid=0) const;  returns vector with all existing connections ids One also can exclude specified connection from return result, which can be useful to be able reply too all but this connections ;  ; unsigned GetConnLimit () const;  returns configured connections limit (0 - default) ;  ; unsigned GetDisplayConnection () const;  Returns first connection id where window is displayed It could be that connection(s) not yet fully established - but also not timed out Batch jobs will be ignored here Returns 0 if connection not exists. ;  ; unsigned GetHeight () const;  returns configured window height (0 - default) ;  ; unsigned GetId () const;  Returns ID for the window - unique inside window manager. ;  ; std::shared_ptr< RWebWindowsManager > GetManager () const;  Returns window manager. ;  ; unsigned GetMaxQueueLength () const;  Return maximal queue length of data which can be held by window. ;  ; float GetOperationTmout () const;  Returns timeout for synchronous WebWindow operations. ;  ; std::string GetRelativeAddr (const RWebWindow &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; std::string GetRelativeAddr (const std::shared_ptr< RWebWindow > &win) const;  Returns relative URL address for the specified window Address can be required if one needs to access data from one window into another window Used for instance when inserting panel into canvas. ;  ; int GetSendQueueLength (unsigned connid) const;  Returns send queue length for specified connection. ;  ; THttpServer * GetServer ();  Return THttpServer instance serving requests to the window. ;  ; std::string GetUrl (bool remote=true);  Return URL string to connect web window URL typically includes extra parameters required for connection with the window like http://localhost:9635/win1/?key=<connection_k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html:3769,timeout,timeout,3769,doc/v632/classROOT_1_1RWebWindow.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebWindow.html,1,['timeout'],['timeout']
Safety,"step. Returns pointer; to created division cell volume in case of Y divisions. For Z divisions just; return the pointer to the volume to be divided. In case a wrong; division axis is supplied, returns pointer to volume that was divided. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; Fills real parameters of a positioned box inside this. Returns 0 if successfull. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; in case shape has some negative parameters, these has to be computed; in order to fit the mother. void InspectShape() const; print shape parameters. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); set trd1 params in one step :. void SetVertex(Double_t* vertex) const; set vertex of a corner according to visibility flags. void SetPoints(Double_t* points) const; create arb8 mesh points. void SetPoints(Float_t* points) const; create arb8 mesh points. void Sizeof3D() const; fill size of this 3-D object. TGeoTrd1(); methods; constructors. Int_t GetByteCount() const; {return 52;}. Double_t GetDx1() const; {return fDx1;}. Double_t GetDx2() const; {return fDx2;}. Double_t GetDy() const; {return fDy;}. Double_t GetDz() const; {return fDz;}. Bool_t IsCylType() const; {return kFALSE;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTrd1.html:14156,Safe,Safety,14156,root/html528/TGeoTrd1.html,https://root.cern,https://root.cern/root/html528/TGeoTrd1.html,3,['Safe'],['Safety']
Safety,"stepmax) const; Performs ray propagation between Z segments. Bool_t SliceCrossingIn(const Double_t* point, const Double_t* dir, Int_t ipl, Int_t nphi, Int_t* iphi, Double_t* sphi, Double_t& snext, Double_t stepmax) const; Check boundary crossing inside phi slices. Return distance snext to first crossing; if smaller than stepmax.; Protection in case point is in phi gap or close to phi boundaries and exiting. Bool_t SliceCrossing(const Double_t* point, const Double_t* dir, Int_t nphi, Int_t* iphi, Double_t* sphi, Double_t& snext, Double_t stepmax) const; Check boundary crossing inside phi slices. Return distance snext to first crossing; if smaller than stepmax. Bool_t IsCrossingSlice(const Double_t* point, const Double_t* dir, Int_t iphi, Double_t sstart, Int_t& ipl, Double_t& snext, Double_t stepmax) const; Check crossing of a given pgon slice, from a starting point inside the slice. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the polygone. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this polygone shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume in case of Z divisions. Phi divisions are; allowed only if nedges%ndiv=0 and create polygone ""segments"" with nedges/ndiv edges.; Z divisions can be performed if the divided range is in between two consecutive Z planes.; In case a wrong division axis is supplied, returns pointer to volume that was divided. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. void Inspect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPgon.html:18200,safe,safe,18200,root/html534/TGeoPgon.html,https://root.cern,https://root.cern/root/html534/TGeoPgon.html,3,['safe'],['safe']
Safety,stic calculation; Int_tRooAbsTestStatistic::_nGofNumber of sub-contexts ; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; Int_tRooAbsTestStatistic::_numSetsTotal number of partitions in parallel calculation mode; Double_tRooAbsTestStatistic::_offset! Offset; Double_tRooAbsTestStatistic::_offsetCarry! avoids loss of precision; Double_t_offsetCarrySaveW2!; Double_t_offsetSaveW2!; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_optimized!; RooAbsData*RooAbsOptTestStatistic::_origDataOriginal data ; RooAbsReal*RooAbsOptTestStatistic::_origFuncOriginal function ; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; RooRefArrayRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of serve,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:40094,avoid,avoids,40094,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,1,['avoid'],['avoids']
Safety,"stoToWorkspaceFactoryFast(); {}. ~HistoToWorkspaceFactoryFast(). HistoToWorkspaceFactoryFast(RooStats::HistFactory::Measurement& Meas). void ConfigureWorkspaceForMeasurement(const string& ModelName, RooWorkspace* ws_single, RooStats::HistFactory::Measurement& measurement). RooWorkspace* MakeSingleChannelModel(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel). RooWorkspace* MakeCombinedModel(RooStats::HistFactory::Measurement& measurement). void ProcessExpectedHisto(TH1* hist, RooWorkspace* proto, string prefix, string productPrefix, string systTerm). void AddMultiVarGaussConstraint(RooWorkspace* proto, string prefix, int lowBin, int highBin, vector<std::string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins. void LinInterpWithConstraint(RooWorkspace* proto, TH1* nominal, vector<RooStats::HistFactory::HistoSys,allocator<RooStats::HistFactory::HistoSys> > , string prefix, string productPrefix, string systTerm, vector<std::string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins; require dimension >=1 or <=3. { fObsNameVec.push_back(fObsName); }. string AddNormFactor(RooWorkspace* proto, string& channel, string& sigmaEpsilon, RooStats::HistFactory::Sample& sample, bool doRatio). void AddEfficiencyTerms(RooWorkspace* proto, string prefix, string interpName, vector<RooStats::HistFactory::OverallSys,allocator<RooStats::HistFactory::OverallSys> >& systList, vector<std::string>& likelihoodTermNames, vector<std::string>& totSystTermNames); add variables for all the relative overall uncertainties we expect; range is set using defined macro (see top of the page). void MakeTotalExpected(RooWorkspace* proto, string totName, vector<std::string>& syst_x_expectedPrefixNames, vector<std::string>& normByNames); for ith bin calculate totN_i = lumi * s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:9974,predict,predictions,9974,root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,1,['predict'],['predictions']
Safety,"stricted using; fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also; fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through; fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding; fit->IncludeBin(bin #);. Weights histograms. Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through; fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. Obtaining fit results. The fit is carried out through; Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through; fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by; TH1* result = fit->GetPlot();. Using different histograms. It is possible to change the histogram being fitted through; fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through; fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). Errors. Any serious inconsistency results in an error. Function Members (Methods); public:. TFractionFitter(); TFractionFitter(TH1* data, TObjArray* MCs, Option_t* option = """"); virtual~TFractionFitter(); voidTObject::AbstractMethod(const char* method) const; virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFractionFitter.html:4609,predict,prediction,4609,root/html530/TFractionFitter.html,https://root.cern,https://root.cern/root/html530/TFractionFitter.html,3,['predict'],['prediction']
Safety,"stricted using; fit->SetRangeY(first bin #, last bin #);; fit->ReleaseRangeY();; and for 3D histograms also; fit->SetRangeZ(first bin #, last bin #);; fit->ReleaseRangeZ();; It is also possible to exclude individual bins from the fit through; fit->ExcludeBin(bin #);; where the given bin number is assumed to follow the TH1::GetBin() numbering.; Any bins excluded in this way can be included again using the corresponding; fit->IncludeBin(bin #);. Weights histograms. Weights histograms (for a motivation see the above publication) can be specified; for the individual MC sources through; fit->SetWeight(parameter #, pointer to weights histogram);; and unset by specifying a null pointer. Obtaining fit results. The fit is carried out through; Int_t status = fit->Fit();; where status is the code returned from the ""MINIMIZE"" command. For fits; that converged, parameter values and errors can be obtained through; fit->GetResult(parameter #, value, error);; and the histogram corresponding to the total Monte Carlo prediction (which; is not the same as a simple weighted sum of the input Monte Carlo distributions); can be obtained by; TH1* result = fit->GetPlot();. Using different histograms. It is possible to change the histogram being fitted through; fit->SetData(TH1* data);; and to change the template histogram for a given parameter number through; fit->SetMC(parameter #, TH1* MC);; This can speed up code in case of multiple data or template histograms;; however, it should be done with care as any settings are taken over from; the previous fit. In addition, neither the dimensionality nor the numbers of; bins of the histograms should change (in that case it is better to instantiate; a new TFractionFitter object). Errors. Any serious inconsistency results in an error. Function Members (Methods); public:. virtual~TFractionFitter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:4619,predict,prediction,4619,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,2,['predict'],['prediction']
Safety,"stroy_range(this->begin(), this->end());; 1058 if (!this->isSmall()); 1059 free(this->begin());; 1060 }; 1061 this->fBeginX = RHS.fBeginX;; 1062 this->fSize = RHS.fSize;; 1063 this->fCapacity = RHS.fCapacity;; 1064 RHS.resetToSmall();; 1065 return *this;; 1066 }; 1067 ; 1068 // If we already have sufficient space, assign the common elements, then; 1069 // destroy any excess.; 1070 size_t RHSSize = RHS.size();; 1071 size_t CurSize = this->size();; 1072 if (CurSize >= RHSSize) {; 1073 // Assign common elements.; 1074 iterator NewEnd = this->begin();; 1075 if (RHSSize); 1076 NewEnd = std::move(RHS.begin(), RHS.end(), NewEnd);; 1077 ; 1078 // Destroy excess elements and trim the bounds.; 1079 if (this->Owns()); 1080 this->destroy_range(NewEnd, this->end());; 1081 this->set_size(RHSSize);; 1082 ; 1083 // Clear the RHS.; 1084 RHS.clear();; 1085 ; 1086 return *this;; 1087 }; 1088 ; 1089 // If we have to grow to have enough elements, destroy the current elements.; 1090 // This allows us to avoid copying them during the grow.; 1091 // From the original LLVM implementation:; 1092 // FIXME: this may not actually make any sense if we can efficiently move; 1093 // elements.; 1094 if (this->capacity() < RHSSize) {; 1095 if (this->Owns()) {; 1096 // Destroy current elements.; 1097 this->destroy_range(this->begin(), this->end());; 1098 }; 1099 this->set_size(0);; 1100 CurSize = 0;; 1101 this->grow(RHSSize);; 1102 } else if (CurSize) {; 1103 // Otherwise, use assignment for the already-constructed elements.; 1104 std::move(RHS.begin(), RHS.begin() + CurSize, this->begin());; 1105 }; 1106 ; 1107 // Move-construct the new elements in place.; 1108 this->uninitialized_move(RHS.begin() + CurSize, RHS.end(), this->begin() + CurSize);; 1109 ; 1110 // Set end.; 1111 this->set_size(RHSSize);; 1112 ; 1113 RHS.clear();; 1114 return *this;; 1115}; 1116 ; 1117template <typename T>; 1118bool IsSmall(const ROOT::VecOps::RVec<T> &v); 1119{; 1120 return v.isSmall();; 1121}; 1122 ; 1123template <typen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:37849,avoid,avoid,37849,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['avoid'],['avoid']
Safety,"structor. TGeoHype(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying hyperboloid parameters. TGeoHype(const char* name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying parameters and name. TGeoHype(Double_t* params); Default constructor specifying a list of parameters; param[0] = dz; param[1] = rin; param[2] = stin; param[3] = rout; param[4] = stout. ~TGeoHype(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); Compute bounding box of the hyperboloid. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the hyperboloid. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the hyperboloid. Int_t DistToHype(Double_t* point, Double_t* dir, Double_t* s, Bool_t inner) const; Compute distance from an arbitrary point to inner/outer surface of hyperboloid.; Returns number of positive solutions. S[2] contains the solutions. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Cannot divide hyperboloids. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2, dZ. TGeoShape * GetMakeRuntimeShape(TGeoShape*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHype.html:14684,safe,safe,14684,root/html528/TGeoHype.html,https://root.cern,https://root.cern/root/html528/TGeoHype.html,1,['safe'],['safe']
Safety,"structor. TGeoHype(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying hyperboloid parameters. TGeoHype(const char* name, Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Constructor specifying parameters and name. TGeoHype(Double_t* params); Default constructor specifying a list of parameters; param[0] = dz; param[1] = rin; param[2] = stin; param[3] = rout; param[4] = stout. ~TGeoHype(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); Compute bounding box of the hyperboloid. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the hyperboloid. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the hyperboloid. Int_t DistToHype(Double_t* point, Double_t* dir, Double_t* s, Bool_t inner, Bool_t in) const; Compute distance from an arbitrary point to inner/outer surface of hyperboloid.; Returns number of positive solutions. S[2] contains the solutions. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Cannot divide hyperboloids. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2, dZ. TGeoShape * GetMakeRuntimeShape",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoHype.html:14883,safe,safe,14883,root/html530/TGeoHype.html,https://root.cern,https://root.cern/root/html530/TGeoHype.html,2,['safe'],['safe']
Safety,"subbranches = kFALSE); Remove the branch b from the Tree cache.; if subbranches is true all the branches of the subbranches are; also removed from the cache. void AddClone(TTree* ); Add a cloned tree to our list of trees to be notified whenever we change; our branch addresses or when we are deleted. TFriendElement* AddFriend(const char* treename, const char* filename = """"); Add a TFriendElement to the list of friends. This function:; -opens a file if filename is specified; -reads a Tree with name treename from the file (current directory); -adds the Tree to the list of friends; see other AddFriend functions. A TFriendElement TF describes a TTree object TF in a file.; When a TFriendElement TF is added to the the list of friends of an; existing TTree T, any variable from TF can be referenced in a query; to T. A tree keeps a list of friends. In the context of a tree (or a chain),; friendship means unrestricted access to the friends data. In this way; it is much like adding another branch to the tree without taking the risk; of damaging it. To add a friend to the list, you can use the TTree::AddFriend; method. The tree in the diagram below has two friends (friend_tree1 and; friend_tree2) and now has access to the variables a,b,c,i,j,k,l and m. /*; ; */. The AddFriend method has two parameters, the first is the tree name and the; second is the name of the ROOT file where the friend tree is saved.; AddFriend automatically opens the friend file. If no file name is given,; the tree called ft1 is assumed to be in the same file as the original tree. tree.AddFriend(""ft1"",""friendfile1.root"");; If the friend tree has the same name as the original tree, you can give it; an alias in the context of the friendship:. tree.AddFriend(""tree1 = tree"",""friendfile1.root"");; Once the tree has friends, we can use TTree::Draw as if the friend's; variables were in the original tree. To specify which tree to use in; the Draw method, use the syntax:. <treeName>.<branchname>.<varname>; If the var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:37953,risk,risk,37953,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,2,['risk'],['risk']
Safety,"success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at line 1798 of file TProof.cxx. ◆ CloseProgressDialog(). void TProof::CloseProgressDialog ; (; ). Close progress dialog. ; Definition at line 9283 of file TProof.cxx. ◆ Collect() [1/4]. Int_t TProof::Collect ; (; const TSlave * ; sl, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from slave sl. ; Returns the number of slaves that responded (=1). If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2669 of file TProof.cxx. ◆ Collect() [2/4]. Int_t TProof::Collect ; (; ESlaves ; list = kActive, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). protected . Collect responses from the slave servers. ; Returns the number of slaves that responded. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the message that stops this collection. ; Definition at line 2727 of file TProof.cxx. ◆ Collect() [3/4]. Int_t TProof::Collect ; (; TList * ; slaves, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). protected . Collect responses from the slave servers. ; Returns the number of slaves that responded. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:77162,timeout,timeout,77162,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['timeout'],['timeout']
Safety,"sult histogram:; - number of events - in case of classification with 2 separate; foams or multi-target regression; - discriminator - in case of classification with one; unified foam; - target - in case of mono-target regression. - ker - kGaus, kNone (warning: Gaus may be very slow!). - nbin - number of bins in x and y direction of result histogram. Returns:; a 2-dimensional histogram. Double_t GetProjectionCellValue(TMVA::PDEFoamCell* cell, Int_t idim1, Int_t idim2, TMVA::ECellValue cv); Helper function for projection function Project2(). It returns; the cell value of 'cell' corresponding to the given option 'cv'.; The two dimensions are needed for weighting the return value,; because Project2() projects the foam to two dimensions. Double_t GetCellElement(TMVA::PDEFoamCell* cell, UInt_t i); Returns cell element i of cell 'cell'. void SetCellElement(TMVA::PDEFoamCell* cell, UInt_t i, Double_t value); Set cell element i of cell to value. void OutputGrow(Bool_t finished = false); Overridden function of PDEFoam to avoid native foam output.; Draw TMVA-process bar instead. void RootPlot2dim(const TString& filename, TString opt, Bool_t CreateCanvas = kTRUE, Bool_t colors = kTRUE, Bool_t log_colors = kFALSE); Debugging tool which plots the cells of a 2-dimensional PDEFoam; as rectangles in C++ format readable for ROOT. Parameters:; - filename - filename of ouput root macro. - opt - cell_value, rms, rms_ov_mean; If cell_value is set, the following values will be filled into; the result histogram:; - number of events - in case of classification with 2 separate; foams or multi-target regression; - discriminator - in case of classification with one; unified foam; - target - in case of mono-target regression; If none of {cell_value, rms, rms_ov_mean} is given, the cells; will not be filled.; If 'opt' contains the string 'cellnumber', the index of; each cell is draw in addition. - CreateCanvas - whether to create a new canvas or not. - colors - whether to fill cells with colors o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:26337,avoid,avoid,26337,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['avoid'],['avoid']
Safety,"t * FindNormalFast()Computes fast normal to next crossed boundary, assuming that the current point is close enough to the...Definition TGeoManager.cxx:2799; path 0; In case a path to a given physical object is specified, the distance to its boundary is computed ignoring the rest of the geometry; Output Values; TGeoManager::GetStep(): distance to next boundary.; TGeoManager::GetSafeDistance(): safe distance (in case it was computed).; TGeoManager::IsOnBoundary(): the initial point (x,y,z) was (or was not) on a boundary within TGeoShape::Tolerance().; The algorithm checks first if the computation of safety was required. If this is the case and the global point coordinates did not change from the last query, the last computed safety is taken. Otherwise, the method TGeoManager::Safety () is invoked. A safety value less than TGeoShape::Tolerance() will set the flag IsOnBoundary to true. On the other hand, a safety value bigger than the proposed step will stop the computation of the distance to next boundary, returning the current geometry location with the meaning that the proposed step is safe.; The next stage is to check if computation of the distance to a give physical object specified by a path was required. If this is the case, the modeller changes the state to point to the required object, converts the current point and direction coordinates to the local frame of this object and computes the distance to its shape. The node returned is the one pointed by the input path in case the shape is crossed; otherwise the returned value is NULL. In case the distance to next crossed boundary is required, the current point has to be physically INSIDE the shape pointed by the current volume. This is only insured in case a call to TGeoManager::FindNode() was performed for the current point. Therefore, the first step is to convert the global current point and direction in the local reference frame of the current volume and to compute the distance to exit its shape from inside. The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:132671,safe,safety,132671,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,2,['safe'],"['safe', 'safety']"
Safety,"t * GetQueryResult(const char* ref). void RemoveQueryResult(const char* ref). void SetCurrentQuery(TQueryResult* q). void SetMaxDrawQueries(Int_t max). void RestorePreviousQuery(). Int_t AddOutputObject(TObject* obj). void AddOutput(TList* out). void StoreOutput(TList* out). void StoreFeedback(TObject* slave, TList* out). void Progress(Long64_t total, Long64_t processed). void Progress(TSlave* , Long64_t total, Long64_t processed). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti). void Progress(TProofProgressInfo* ). void Progress(TSlave* , TProofProgressInfo* ). void Feedback(TList* objs). TDrawFeedback * CreateDrawFeedback(TProof* p). void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt). void DeleteDrawFeedback(TDrawFeedback* f). TDSetElement * GetNextPacket(TSlave* slave, TMessage* r). Int_t ReinitSelector(TQueryResult* qr). void UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax). Bool_t IsClient() const. EExitStatus GetExitStatus() const. void SetExitStatus(TVirtualProofPlayer::EExitStatus ). Long64_t GetEventsProcessed() const. void AddEventsProcessed(Long64_t ev). TProofProgressStatus* GetProgressStatus() const. void SetDispatchTimer(Bool_t on = kTRUE). void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0). Long64_t GetCacheSize(). Int_t GetLearnEntries(). void UpdateProgressInfo(). TVirtualPacketizer * GetPacketizer() const; { return 0; }. void SetOutputFilePath(const char* fp). Int_t SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE). » Author: Fons Rademakers 15/03/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualProofPlayer.html:15753,abort,abort,15753,root/html602/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html602/TVirtualProofPlayer.html,2,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"t *point, const Double_t *dir, Double_t *norm) override;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Int_t DistToHype (const Double_t *point, const Double_t *dir, Double_t *s, Bool_t inner, Bool_t in) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; Bool_t GetPointsOnSegments (Int_t, Double_t *) const override;  ; Double_t GetStIn () const;  ; Double_t GetStOut () const;  ; Bool_t HasInner () const;  ; void InspectSh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHype.html:1330,safe,safe,1330,doc/master/classTGeoHype.html,https://root.cern,https://root.cern/doc/master/classTGeoHype.html,3,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"t *point[3], Double_t *dir[3],; Int_t iact, Double_t step, Double_t *safe); - computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :; IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; IACT > 2 => compute only the distance to exiting, ignoring anything else. C) Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3],; Int_t iact, Double_t step, Double_t *safe); - computes the distance to entering a shape from a given point OUTSIDE. Acts; in the same way as B). D) Double_t Safety(Double_t *point[3], Bool_t inside). - compute maximum shift of a point in any direction that does not change its; INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point; have to be properly supplied. E) Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside). - returns director cosines of normal to the crossed shape surface from a; given point towards a direction. One has to specify if the point is inside; or outside shape. According to this, the normal will be outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retreival in a different array. Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis.; The general rule is tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoShape.html:5012,safe,safe,5012,root/html528/TGeoShape.html,https://root.cern,https://root.cern/root/html528/TGeoShape.html,3,['safe'],['safe']
Safety,"t *point[3], Double_t *dir[3],; Int_t iact, Double_t step, Double_t *safe); - computes the distance to exiting a shape from a given point INSIDE, along; a given direction. The direction is given by its director cosines with respect; to the local shape coordinate system. This method provides additional; information according the value of IACT input parameter :; IACT = 0 => compute only safe distance and fill it at the location; given by SAFE; IACT = 1 => a proposed STEP is supplied. The safe distance is computed; first. If this is bigger than STEP than the proposed step; is approved and returned by the method since it does not; cross the shape boundaries. Otherwise, the distance to; exiting the shape is computed and returned.; IACT = 2 => compute both safe distance and distance to exiting, ignoring; the proposed step.; IACT > 2 => compute only the distance to exiting, ignoring anything else. C) Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3],; Int_t iact, Double_t step, Double_t *safe); - computes the distance to entering a shape from a given point OUTSIDE. Acts; in the same way as B). D) Double_t Safety(const Double_t *point[3], Bool_t inside). - compute maximum shift of a point in any direction that does not change its; INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point; have to be properly supplied. E) Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside). - returns director cosines of normal to the crossed shape surface from a; given point towards a direction. One has to specify if the point is inside; or outside shape. According to this, the normal will be outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retreival in a different array. Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis.; The general rule ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:5018,safe,safe,5018,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,3,['safe'],['safe']
Safety,"t * ; inside, . Int_t ; vecsize . ); const. overridevirtual . Check the inside status for each of the points in the array. ; Input: Array of point coordinates + vector size Output: Array of Booleans for the inside of each point ; Reimplemented from TGeoBBox.; Definition at line 575 of file TGeoShapeAssembly.cxx. ◆ DeclFileName(). static const char * TGeoShapeAssembly::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 64 of file TGeoShapeAssembly.h. ◆ DistancetoPrimitive(). Int_t TGeoShapeAssembly::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . compute closest distance from point px,py to each vertex. Should not be called. ; Reimplemented from TGeoBBox.; Definition at line 243 of file TGeoShapeAssembly.cxx. ◆ DistFromInside(). Double_t TGeoShapeAssembly::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Compute distance from inside point to surface of the hyperboloid. ; Reimplemented from TGeoBBox.; Definition at line 251 of file TGeoShapeAssembly.cxx. ◆ DistFromInside_v(). void TGeoShapeAssembly::DistFromInside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Compute distance from array of input points having directions specified by dirs. Store output in dists. ; Reimplemented from TGeoBBox.; Definition at line 595 of file TGeoShapeAssembly.cxx. ◆ DistFromOutside(). Double_t TGeoShapeAssembly::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . compute distance from outside point to surface of the hyperboloid. ; fVolume->SetNextNodeIndex(-1); ; Reimplemented from TGeoBBox.; Definition at line 262 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShapeAssembly.html:26534,safe,safe,26534,doc/master/classTGeoShapeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoShapeAssembly.html,1,['safe'],['safe']
Safety,"t * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:21945,timeout,timeout,21945,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['timeout'],['timeout']
Safety,"t 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags. Release 6.06/08; Released on September 1, 2016; Core. Prevent race condition in the creation of the list of base classes (but avoiding to publish the list too early). Hist. Resolved issues with inconsistent handling of the ‘gaus’ function in TFormula [[ROT-8105]]. Bugs fixed in this release. [ROOT-8105] - TFormula does not always handle ‘gaus’ correctly.; [ROOT-8239] - “python: free(): invalid next size (fast)” in PyROOT 6.06.02 and patches; [ROOT-8270] - C++14; [ROOT-8293] - CMake does not find Castor libraries; [ROOT-8328] - patches used by art; [ROOT-8307] - Crash when leaving ROOT from GUI menu item.; [ROOT-8332] - support linked libraries paths with spaces in aclic. HEAD of the v6-06-00-patches branch; Changes will be part of the future 6.06/10. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:32783,avoid,avoiding,32783,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['avoid'],['avoiding']
Safety,"t ; (; ). inline . Definition at line 264 of file TGeoNavigator.h. ◆ PopPoint() [2/2]. Bool_t TGeoNavigator::PopPoint ; (; Int_t ; index). inline . Definition at line 272 of file TGeoNavigator.h. ◆ PushPath(). Int_t TGeoNavigator::PushPath ; (; Int_t ; startlevel = 0). inline . Definition at line 246 of file TGeoNavigator.h. ◆ PushPoint(). Int_t TGeoNavigator::PushPoint ; (; Int_t ; startlevel = 0). inline . Definition at line 263 of file TGeoNavigator.h. ◆ ResetAll(). void TGeoNavigator::ResetAll ; (; ). Reset the navigator. ; Definition at line 2708 of file TGeoNavigator.cxx. ◆ ResetState(). void TGeoNavigator::ResetState ; (; ). Reset current state flags. ; Definition at line 1643 of file TGeoNavigator.cxx. ◆ Safety(). Double_t TGeoNavigator::Safety ; (; Bool_t ; inside = kFALSE). Compute safe distance from the current point. ; This represent the distance from POINT to the closest boundary. ; Definition at line 1689 of file TGeoNavigator.cxx. ◆ SafetyOverlaps(). void TGeoNavigator::SafetyOverlaps ; (; ). protected . Compute safe distance from the current point within an overlapping node. ; Definition at line 1846 of file TGeoNavigator.cxx. ◆ SearchNode(). TGeoNode * TGeoNavigator::SearchNode ; (; Bool_t ; downwards = kFALSE, . const TGeoNode * ; skipnode = nullptr . ). Returns the deepest node containing fPoint, which must be set a priori. ; Check if parallel world navigation is enabled ; Definition at line 1924 of file TGeoNavigator.cxx. ◆ SetCheckingOverlaps(). void TGeoNavigator::SetCheckingOverlaps ; (; Bool_t ; flag = kTRUE). inline . Definition at line 147 of file TGeoNavigator.h. ◆ SetCldirChecked(). void TGeoNavigator::SetCldirChecked ; (; Double_t * ; dir). inline . Definition at line 193 of file TGeoNavigator.h. ◆ SetCurrentDirection() [1/2]. void TGeoNavigator::SetCurrentDirection ; (; const Double_t * ; dir). inline . Definition at line 185 of file TGeoNavigator.h. ◆ SetCurrentDirection() [2/2]. void TGeoNavigator::SetCurrentDirection ; (; Double_t ; n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:41581,Safe,SafetyOverlaps,41581,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['Safe'],['SafetyOverlaps']
Safety,"t = 0); virtual~TGeoUnion(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoBoolNode::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceToPrimitive(Int_t px, Int_t py); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGeoBoolNode::EGeoBoolTypeGetBooleanOperator() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoUnion.html:2382,safe,safe,2382,root/html532/TGeoUnion.html,https://root.cern,https://root.cern/root/html532/TGeoUnion.html,1,['safe'],['safe']
Safety,"t = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. void ReleaseMonitor(TMonitor* mon); Release the used monitor to be used, making sure to delete newly created; monitors. Int_t Collect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:41776,timeout,timeout,41776,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,18,['timeout'],['timeout']
Safety,"t > & ; biasGradients . ). protectedvirtual . Update the biases, given the current bias gradients. ; Implements TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >.; Definition at line 158 of file Adagrad.h. ◆ UpdateWeights(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . auto TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::UpdateWeights ; (; size_t ; layerIndex, . std::vector< Matrix_t > & ; weights, . const std::vector< Matrix_t > & ; weightGradients . ). protectedvirtual . Update the weights, given the current weight gradients. ; Implements TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >.; Definition at line 126 of file Adagrad.h. Member Data Documentation. ◆ fEpsilon. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fEpsilon. protected . The Smoothing term used to avoid division by zero. ; Definition at line 51 of file Adagrad.h. ◆ fPastSquaredBiasGradients. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fPastSquaredBiasGradients. protected . The sum of the square of the past bias gradients associated with the deep net. ; Definition at line 56 of file Adagrad.h. ◆ fPastSquaredWeightGradients. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . std::vector<std::vector<Matrix_t> > TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >::fPastSquaredWeightGradients. protected . The sum of the square of the past weight gradients associated with the deep net. ; Definition at line 54 of file Adagrad.h. ◆ fWorkBiasTensor. template<typename Architecture_t , typename Layer_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:8024,avoid,avoid,8024,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['avoid'],['avoid']
Safety,"t Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the shape. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; In case shape has some negative parameters, these has to be computed; in order to fit the mother. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; Computes the closest distance from given point to this shape. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set all arb8 params in one step.; param[0] = dz; param[1] = theta; param[2] = phi; param[3] = h1; param[4] = bl1; param[5] = tl1; param[6] = alpha1; param[7] = h2; param[8] = bl2; param[9] = tl2; param[10] = alpha2; param[11] = twist. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoGtra(); constructors. Double_t GetTwistAngle() const; {return fTwistAngle;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoGtra.html:17523,safe,safe,17523,root/html534/TGeoGtra.html,https://root.cern,https://root.cern/root/html534/TGeoGtra.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"t Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); Double_tDaxis(const Double_t* pt, const Double_t* dir, Double_t t) const; Double_tDDaxis(const Double_t* pt, const Double_t* dir, Double_t t) const; Double_tDDDaxis(const Double_t* pt, const Double_t* dir, Double_t t) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTorus.html:2890,safe,safe,2890,root/html534/TGeoTorus.html,https://root.cern,https://root.cern/root/html534/TGeoTorus.html,3,['safe'],['safe']
Safety,"t Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tTGeoBBox::DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoBBox::DistFromInside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); virtual voidTGeoBBox::DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; virtual Double_tTGeoBBox::DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoBBox::DistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); virtual voidTGeoBBox::DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*TGeoBBox::Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveGeoPolyShape.html:2789,safe,safe,2789,root/html534/TEveGeoPolyShape.html,https://root.cern,https://root.cern/root/html534/TEveGeoPolyShape.html,3,['safe'],['safe']
Safety,"t Layout manager for number entry widget; TGNumberFormat Class defining namespace for several enums used by TGNumberEntry; TGObject ROOT GUI base class; TGPack Horizontal or vertical stack of frames.; TGPasswdDialog Dialog for entering passwords; TGPicture Pictures and icons used by the GUI classes; TGPictureButton A picture button widget; TGPicturePool Picture and icon cache; TGPopupMenu Popup menu; TGPosition Position object (x and y are Int_t); TGPrintDialog Print dialog used by TGTextEdit widget; TGProgressBar Progress bar abstract base class; TGQt Interface to Qt GUI; TGRadioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:77685,safe,safe,77685,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,5,['safe'],['safe']
Safety,"t ReadBuffer(char* buf, Int_t len); Override TNetFile::ReadBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Pass through to TNetFile implementation which will call back eventually; to our ReadBuffer with 2 arguments to deal with xrootd errors. Bool_t ReadBufferAsync(Long64_t offs, Int_t len); Implementation dealing with the xrootd server.; Returns kTRUE in case of errors.; This is the same as TXNetFile::ReadBuffer but using the async; call from xrootd. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReadBuffer; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure.; Note: This is the overloading made in TXNetFile. If ReadBuffers; is supported by xrootd it will try to get the whole list from one single; call avoiding the latency of multiple calls. Bool_t WriteBuffer(const char* buffer, Int_t BufferLength); Override TNetFile::WriteBuffer to deal with the xrootd server.; Returns kTRUE in case of errors. void Init(Bool_t create); Initialize the file. Makes sure that the file is really open before; calling TFile::Init. It may block. Bool_t IsOpen() const; Return kTRUE if the file is open, kFALSE otherwise. TFile::EAsyncOpenStatus GetAsyncOpenStatus(); Return status of asynchronous request. Int_t ReOpen(const Option_t* mode); Re-open the file (see TNetFile::ReOpen() or TFile::ReOpen(); for more details). void Close(const Option_t* opt = """"); Close the file (see TNetFile::Close() or TFile::Close(); for more details). void Flush(); Flushes un-written data. Int_t SysStat(Int_t fd, Long_t* id, Long64_t* size, Long_t* flags, Long_t* modtime); Override TNetFile::SysStat (see parent's method for more details). Int_t SysClose(Int_t fd); Override TNetFile::SysClose (see paren",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFile.html:29512,avoid,avoiding,29512,root/html602/TXNetFile.html,https://root.cern,https://root.cern/root/html602/TXNetFile.html,2,['avoid'],['avoiding']
Safety,"t RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:69928,predict,prediction,69928,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,2,['predict'],['prediction']
Safety,"t T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void ErrorHandler (Int_t level, Bool_t abort, const char *location, const char *msg);  The PROOF error handler function. ;  ; static void FilterLocalroot (TString &path, const char *url=""root://dum/"");  If 'path' is local and 'dsrv' is Xrootd, apply 'path.Localroot' settings, if any. ;  ; static TMap * GetDataSetNodeMap (TFileCollection *fc, TString &emsg);  Get a map {server-name, list-of-files} for collection 'fc' to be used in TPacketizerFile. ;  ; static void GetLocalServer (TString &dsrv);  Extract LOCALDATASERVER info in 'dsrv'. ;  ; static Float_t GetMemHWM ();  MemHWM getter. ;  ; static Float_t GetMemStop ();  MemStop getter. ;  ; static Long_t GetResMemMax ();  ResMemMax getter. ;  ; static Long_t GetVirtMemMax ();  VirtMemMax getter. ;  ; static Bool_t IsActive ();  Static function that returns kTRUE in case we are a PROOF server. ;  ; static Int_t RegisterDataSets (TList *in, TList *out, TDataSetManager *dsm, TString &e);  Register TFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:18833,abort,abort,18833,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['abort'],['abort']
Safety,"t TGeoMaterial * ; mat); const. Find if a given material duplicates an existing one. ; Definition at line 2992 of file TGeoManager.cxx. ◆ FindNextBoundary(). TGeoNode * TGeoManager::FindNextBoundary ; (; Double_t ; stepmax = TGeoShape::Big(), . const char * ; path = """", . Bool_t ; frombdr = kFALSE . ). Find distance to next boundary and store it in fStep. ; Returns node to which this boundary belongs. If PATH is specified, compute only distance to the node to which PATH points. If STEPMAX is specified, compute distance only in case fSafety is smaller than this value. STEPMAX represent the step to be made imposed by other reasons than geometry (usually physics processes). Therefore in this case this method provides the answer to the question : ""Is STEPMAX a safe step ?"" returning a NULL node and filling fStep with a big number. In case frombdr=kTRUE, the isotropic safety is set to zero.; Note : safety distance for the current point is computed ONLY in case STEPMAX is specified, otherwise users have to call explicitly TGeoManager::Safety() if they want this computed for the current point. ; Definition at line 2755 of file TGeoManager.cxx. ◆ FindNextBoundaryAndStep(). TGeoNode * TGeoManager::FindNextBoundaryAndStep ; (; Double_t ; stepmax = TGeoShape::Big(), . Bool_t ; compsafe = kFALSE . ). Compute distance to next boundary within STEPMAX. ; If no boundary is found, propagate current point along current direction with fStep=STEPMAX. Otherwise propagate with fStep=SNEXT (distance to boundary) and locate/return the next node. ; Definition at line 2736 of file TGeoManager.cxx. ◆ FindNextDaughterBoundary(). TGeoNode * TGeoManager::FindNextDaughterBoundary ; (; Double_t * ; point, . Double_t * ; dir, . Int_t & ; idaughter, . Bool_t ; compmatrix = kFALSE . ). Computes as fStep the distance to next daughter of the current volume. ; The point and direction must be converted in the coordinate system of the current volume. The proposed step limit is fStep. ; Definition at line 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:85830,safe,safety,85830,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,2,"['Safe', 'safe']","['Safety', 'safety']"
Safety,"t TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assigning it with the original. TIter & operator=(const TIter& rhs); Assigning an TIter to another. This involves allocatiing a new TIterator; of the right sub class and assigning it with the original. TIter & Begin(); Pointing to the first element of the container. TIter End(); Pointing to the element after the last - to a nullptr value in our case. TObject * operator()(const char *name). TIter(); { }. TIter(const TCollection* col, Bool_t dir = kIterForward); { }. TIter(TIterator* it); { }. virtual ~TIter(); { SafeDelete(fIterator); }. TObject * Next(); { return fIterator ? fIterator->Next() : nullptr; }. const TCollection * GetCollection() const; { return fIterator ? fIterator->GetCollection() : nullptr; }. Option_t * GetOption() const; { return fIterator ? fIterator->GetOption() : """"; }. void Reset(); { if (fIterator) fIterator->Reset(); }. TIter & operator++(); { Next(); return *this; }. Bool_t operator==(const TIter& aIter) const. Bool_t operator!=(const TIter& aIter) const. TObject * operator*() const; { return fIterator ? *(*fIterator): nullptr; }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-02 16:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TIter.html:2660,Safe,SafeDelete,2660,root/html604/TIter.html,https://root.cern,https://root.cern/root/html604/TIter.html,1,['Safe'],['SafeDelete']
Safety,"t TIter& rhs); Bool_toperator==(const TIter& aIter) const; voidReset(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TIter(TIterator* it); TIter(const TIter& iter); TIter(const TCollection* col, Bool_t dir = kIterForward). protected:. TIter(). Data Members; private:. TIterator*fIteratorcollection iterator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TIter(const TIter& iter); Copy a TIter. This involves allocating a new TIterator of the right; sub class and assigning it with the original. TIter & operator=(const TIter& rhs); Assigning an TIter to another. This involves allocatiing a new TIterator; of the right sub class and assigning it with the original. TIter & Begin(); Pointing to the first element of the container. TIter End(); Pointing to the element after the last - to a nullptr value in our case. TObject * operator()(const char *name). TIter(); { }. TIter(const TCollection* col, Bool_t dir = kIterForward); { }. TIter(TIterator* it); { }. virtual ~TIter(); { SafeDelete(fIterator); }. TObject * Next(); { return fIterator ? fIterator->Next() : nullptr; }. const TCollection * GetCollection() const; { return fIterator ? fIterator->GetCollection() : nullptr; }. Option_t * GetOption() const; { return fIterator ? fIterator->GetOption() : """"; }. void Reset(); { if (fIterator) fIterator->Reset(); }. TIter & operator++(); { Next(); return *this; }. Bool_t operator==(const TIter& aIter) const. Bool_t operator!=(const TIter& aIter) const. TObject * operator*() const; { return fIterator ? *(*fIterator): nullptr; }. » Author: Fons Rademakers 13/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id$ » Last generated: 2015-06-30 15:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TIter.html:2660,Safe,SafeDelete,2660,root/html602/TIter.html,https://root.cern,https://root.cern/root/html602/TIter.html,1,['Safe'],['SafeDelete']
Safety,"t TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; namechar name[80]Definition TGX11.cxx:110; TNamed.h; TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TGeoBBoxDefinition TGeoBBox.h:17; TGeoHMatrixMatrix class used for computing global transformations Should NOT be used for node definition.Definition TGeoMatrix.h:458; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoShape::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) override=0Computes distance from point (px,py) to the object.; TGeoShape::SetOnBoundaryvoid SetOnBoundary(Bool_t)Definition TGeoShape.h:76; TGeoShape::ComputeNormalvirtual void ComputeNormal(const Double_t *point, const Double_t *dir, Double_t *norm)=0; TGeoShape::TestShapeBitsInt_t TestShapeBits(UInt_t f) constDefinition TGeoShape.h:168; TGeoShape::GetBuffer3Dvirtual const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) constStub implementation to avoid forcing implementation at this stage.Definition TGeoShape.cxx:735; TGeoShape::SetIdvoid SetId(Int_t id)Definition TGeoShape.h:155; TGeoShape::fShapeBitsUInt_t fShapeBitsDefinition TGeoShape.h:72; TGeoShape::Bigstatic Double_t Big()Definition TGeoShape.h:87; TGeoShape::GetAxisRangevirtual Double_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const =0; TGeoShape::GetBasicColorInt_t GetBasicColor() constGet the basic color (0-7).Definition TGeoShape.cxx:718; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; TGeoShape::IsSegCrossingstatic Bool_t IsSegCrossing(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Double_t x3, Double_t y3, Double_t x4, Double_t y4)Check if segments (A,B) and (C,D) are crossing, where: A(x1,y1), B(x2,y2), C(x3,y3),...Definition TGeoShape.cxx:349; TGeoShape::CreateThreadDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:10965,avoid,avoid,10965,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,1,['avoid'],['avoid']
Safety,"t TTree* t, bool dir = kIterForward);; 729 TTreeFriendLeafIter(const TTreeFriendLeafIter &iter);; 730 ~TTreeFriendLeafIter() override { SafeDelete(fLeafIter); SafeDelete(fTreeIter); }; 731 TIterator &operator=(const TIterator &rhs) override;; 732 TTreeFriendLeafIter &operator=(const TTreeFriendLeafIter &rhs);; 733 ; 734 const TCollection *GetCollection() const override { return nullptr; }; 735 Option_t *GetOption() const override;; 736 TObject *Next() override;; 737 void Reset() override { SafeDelete(fLeafIter); SafeDelete(fTreeIter); }; 738 bool operator !=(const TIterator&) const override {; 739 // TODO: Implement me; 740 return false;; 741 }; 742 bool operator !=(const TTreeFriendLeafIter&) const {; 743 // TODO: Implement me; 744 return false;; 745 }; 746 TObject *operator*() const override {; 747 // TODO: Implement me; 748 return nullptr;; 749 }; 750 ClassDefOverride(TTreeFriendLeafIter,0) //Linked list iterator; 751 };; 752 ; 753 ; 754#endif; Compression.h; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Int_tint Int_tDefinition RtypesCore.h:45; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; Option_tconst char Option_tDefinition RtypesCore.h:66; BIT#define BIT(n)Definition Rtypes.h:90; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TArrayD.h; TArrayI.h; TAttFill.h; TAttLine.h; TAttMarker.h; TBranch.h; TClass.h; kIterForwardconst Bool_t kIterForwardDefinition TCollection.h:42; TDataType.h; EDataTypeEDataTypeDefinition TDataType.h:28; kOther_t@ kOther_tDefinition TDataType.h:32; TDirectory.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; N#define N; wwinID wDefinition TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:41684,Safe,SafeDelete,41684,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,2,['Safe'],['SafeDelete']
Safety,"t UploadPackageOnClient(const char* package, TProof::EUploadPackageOpt opt, TMD5* md5); Upload a package on the client in ~/.proof/packages.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; Additional files to be uploaded (or updated, if needed) can be specified; after a comma, e.g. ""mymacro.C+,thisheader.h,thatheader.h"".; If existing in the same directory, a header basename(macro).h or .hh, is also; uploaded.; The default is to load the macro also on the client; notOnClient can be used; to avoid loading on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'lib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:68746,avoid,avoid,68746,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['avoid'],['avoid']
Safety,"t UploadPackageOnClient(const char* package, TProof::EUploadPackageOpt opt, TMD5* md5); Upload a package on the client in ~/.proof/packages.; The 'opt' allows to specify whether the .PAR should be just unpacked; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; Additional files to be uploaded (or updated, if needed) can be specified; after a comma, e.g. ""mymacro.C+,thisheader.h,thatheader.h"".; If existing in the same directory, a header basename(macro).h or .hh, is also; uploaded.; The default is to load the macro also on the client; notOnClient can be used; to avoid loading on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:78611,avoid,avoid,78611,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['avoid'],['avoid']
Safety,"t be located. ;  ; virtual TDSetElement * Next (Long64_t totalEntries=-1);  Returns next TDSetElement. ;  ; void Print (Option_t *option="""") const override;  Print TDSet basic or full data. When option=""a"" print full data. ;  ; virtual Long64_t Process (const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Process TDSet on currently active PROOF session. ;  ; virtual Long64_t Process (TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Process TDSet on currently active PROOF session. ;  ; Int_t Remove (TDSetElement *elem, Bool_t deleteElem=kTRUE);  Remove TDSetElement 'elem' from the list. ;  ; virtual void Reset ();  Reset or initialize access to the elements. ;  ; void SetDirectory (const char *dir);  Set/change directory. ;  ; virtual void SetEntryList (TObject *aList);  Set entry (or event) list for this data set. ;  ; void SetLookedUp ();  Flag all the elements as looked-up, so to avoid opening the files if the functionality is not supported. ;  ; void SetObjName (const char *objname);  Set/change object name. ;  ; void SetSrvMaps (TList *srvmaps=0);  Set (or unset) the list for mapping servers coordinate for files. ;  ; void SetWriteV3 (Bool_t on=kTRUE);  Set/Reset the 'OldStreamer' bit in this instance and its elements. ;  ; virtual void StartViewer ();  Start the TTreeViewer on this TTree. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TDSet. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Validate ();  Validate the TDSet by opening files. ;  ; void Validate (TDSet *dset);  Validate the TDSet against another TDSet. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDSet.html:5931,avoid,avoid,5931,doc/master/classTDSet.html,https://root.cern,https://root.cern/doc/master/classTDSet.html,1,['avoid'],['avoid']
Safety,"t bin boundaries: [10,600] --> [0,600]; [#0] PROGRESS:Caching -- creating cache from getCache function for 0x915c650; [#0] PROGRESS:Caching -- current storage has size 10; [#0] PROGRESS:ObjectHandling -- observable: pTV; [#0] PROGRESS:ObjectHandling -- binWidth: binWidth_pTV; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf_over_wrap_pdf_Int[pTV]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_wrap_pdf_over_wrap_pdf_Int[pTV]_pseudo_dh) Summation contains a RooNLLVar, using its error level; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0 cHl3=0 cHq3=-0.0202918; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0376648, denominator=wrap_pdf_Int[pTV]=10358.6; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0376648, denominator=wrap_pdf_Int[pTV]=10358.6; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=0.0376648, denominator=wrap_pdf_Int[pTV]=10358.6; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=0.0376648, denominator=wrap_pdf_Int[pTV]=10358.6; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.213672 cHl3=1.97898 cHq3=0.00773174; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.0882577, denominator=wrap_pdf_Int[pTV]=4536.67; getLo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html:6397,recover,recover,6397,doc/master/rf712__lagrangianmorphfit_8py.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html,1,['recover'],['recover']
Safety,"t c2, Double_t s2); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tTGeoBBox::Safety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidTGeoBBox::Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTGeoBBox::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFromFaceSet(TGLFaceSet* fs); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGeoPolyShape.html:8766,safe,safe,8766,root/html602/TEveGeoPolyShape.html,https://root.cern,https://root.cern/root/html602/TEveGeoPolyShape.html,2,['safe'],['safe']
Safety,"t char * ; msg . ). The default error handler function. ; It prints the message on stderr and if abort is set it aborts the application. Replaces the minimal error handler of TError.h as part of the gROOT construction. TError's minimal handler is put back in place during the gROOT destruction. Noteabort() is only called if abort_bool is true and level < gErrorIgnoreLevel ; Definition at line 102 of file TErrorDefaultHandler.cxx. ◆ Error(). void Error ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case an error occurred. ; Definition at line 185 of file TError.cxx. ◆ ErrorHandler(). void ErrorHandler ; (; int ; level, . const char * ; location, . const char * ; fmt, . std::va_list ; va . ). General error handler function. It calls the user set error handler. ; Definition at line 109 of file TError.cxx. ◆ Fatal(). void Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). Use this function in case of a fatal error. It will abort the program. ; WarningFatal() will not abort the program if gErrorIgnoreLevel > kFatal; but for all reasonable settings it will abort. . Definition at line 244 of file TError.cxx. ◆ GetErrorHandler(). ErrorHandlerFunc_t GetErrorHandler ; (; ). Returns the current error handler function. ; Definition at line 100 of file TError.cxx. ◆ Info(). void Info ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function for informational messages. ; Definition at line 218 of file TError.cxx. ◆ MayNotUse(). void MayNotUse ; (; const char * ; method). This function can be used in classes that should override a certain function, but in the inherited class the function makes no sense. ; Definition at line 168 of file TError.cxx. ◆ Obsolete(). void Obsolete ; (; const char * ; function, . const char * ; asOfVers, . const char * ; removedFromVers . ). Use this function to declare a function obsolete. ; Specify as of which version the method is obsolete and as from which vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:6780,abort,abort,6780,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['abort'],['abort']
Safety,"t char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGeoXtru (const TGeoXtru &)=delete;  mutex for thread data ;  ; Double_t DistToPlane (const Double_t *point, const Double_t *dir, Int_t iz, Int_t ivert, Double_t stepmax, Bool_t in) const;  ; void GetPlaneNormal (const Double_t *vert, Double_t *norm) const;  ; void GetPlaneVertices (Int_t iz, Int_t ivert, Double_t *vert) const;  ; Bool_t IsPointInsidePlane (const Double_t *point, Double_t *vert, Double_t *norm) const;  ; TGeoXtru & operator= (const TGeoXtru &)=delete;  ; Double_t SafetyToSector (const Double_t *point, Int_t iz, Double_t safmin, Bool_t in);  ; void SetIz (Int_t iz);  ; void SetSeg (Int_t iseg);  ;  Protected Member Functions inherited from TGeoBBox;  TGeoBBox (const TGeoBBox &)=delete;  ; void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections, Bool_t localFrame) const override;  Fill the supplied buffer, with sections in desired frame See TBuffer3D.h for explanation of sections, frame etc. ;  ; TGeoBBox & operator= (const TGeoBBox &)=delete;  ;  Protected Member Functions inherited from TGeoShape; Int_t GetBasicColor () const;  Get the basic color (0-7). ;  ; void SetOnBoundary (Bool_t);  ; void TransformPoints (Double_t *points, UInt_t NbPoints) const;  Tranform a set of points (LocalToMaster) ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoXtru.html:19472,Safe,SafetyToSector,19472,doc/master/classTGeoXtru.html,https://root.cern,https://root.cern/doc/master/classTGeoXtru.html,1,['Safe'],['SafetyToSector']
Safety,"t char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoHype&operator=(const TGeoHype&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; Double_tRadiusHypeSq(Double_t z, Bool_t inner) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); Double_tSafetyToHype(const Double_t* point, Bool_t inner, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHypeDimensi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:10188,safe,safe,10188,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,1,['safe'],['safe']
Safety,"t char* method) const; static voidTGeoShape::NormalPhi(Double_t* point, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tTGeoBBox::Safety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTGeoBBox::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFromFaceSet(TGLFaceSet* fs); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGeoBBox::SetPoints(Double_t* points) const; virtual voidTGeoBBox::SetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoPolyShape.html:7828,Safe,SafetyPhi,7828,root/html528/TEveGeoPolyShape.html,https://root.cern,https://root.cern/root/html528/TEveGeoPolyShape.html,1,['Safe'],['SafetyPhi']
Safety,"t char* method) const; static voidTGeoShape::NormalPhi(Double_t* point, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tTGeoTrap::Safety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); Double_tTGeoArb8::SafetyToFace(Double_t* point, Int_t iseg, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoArb8::SetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidTGeoArb8::SetPlaneVertices(Double_t zpl, Double_t* vertices) const; virtual voidTGeoArb8::Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGtra.html:9459,Safe,SafetyPhi,9459,root/html528/TGeoGtra.html,https://root.cern,https://root.cern/root/html528/TGeoGtra.html,1,['Safe'],['SafetyPhi']
Safety,"t char* par) const; Get specified parameter. A parameter set via SetParameter() is either; a TParameter or a TNamed or 0 in case par is not defined. void DeleteParameters(const char* wildcard); Delete the input list parameters specified by a wildcard (e.g. PROOF_*); or exact name (e.g. PROOF_MaxSlavesPerNode). void ShowParameters(const char* wildcard = ""PROOF_*"") const; Show the input list parameters specified by the wildcard.; Default is the special PROOF control parameters (PROOF_*). void AddFeedback(const char* name); Add object to feedback list. void RemoveFeedback(const char* name); Remove object from feedback list. void ClearFeedback(); Clear feedback list. void ShowFeedback() const; Show items in feedback list. TList * GetFeedbackList() const; Return feedback list. TTree * GetTreeHeader(TDSet* tdset); Creates a tree header (a tree with nonexisting files) object for; the DataSet. TDrawFeedback * CreateDrawFeedback(); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. TList * GetOutputNames(); FIXME: to be written. void Browse(TBrowser* b); Build the PROOF's structure in the browser. void SetPlayer(TVirtualProofPlayer* player); Set a new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:75022,avoid,avoids,75022,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['avoid'],['avoids']
Safety,"t char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. Int_tBroadcast(const TMessage& mess); Int_tBroadcast(Int_t kind, Int_t type = kRRT_Undef); Int_tBroadcast(const char* mess, Int_t kind = kMESS_STRING, Int_t type = kRRT_Undef); Int_tBroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Int_tBroadcastRaw(const void* buffer, Int_t length); Bool_tCheckFile(const char* file, Long_t modtime); Int_tCollect(Long_t timeout = -1); Int_tCollectInput(); voidRecvLogFile(Int_t size). Data Members; public:. enum ESendFileOpt { kAscii; kBinary; kForce; };; enum EStatusBits { kCollecting; };; enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TApplication::EExitOnException { kDontExit; kExit; kAbort; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for sup",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationRemote.html:11751,timeout,timeout,11751,root/html528/TApplicationRemote.html,https://root.cern,https://root.cern/root/html528/TApplicationRemote.html,4,['timeout'],['timeout']
Safety,"t char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. Int_tBroadcast(const TMessage& mess); Int_tBroadcast(Int_t kind, Int_t type = kRRT_Undef); Int_tBroadcast(const char* mess, Int_t kind = kMESS_STRING, Int_t type = kRRT_Undef); Int_tBroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Int_tBroadcastRaw(const void* buffer, Int_t length); Bool_tCheckFile(const char* file, Long_t modtime); Int_tCollect(Long_t timeout = -1); Int_tCollectInput(); voidRecvLogFile(Int_t size). Data Members; public:. enum ESendFileOpt { kAscii; kBinary; kForce; };; enum EStatusBits { kCollecting; };; enum TApplication::EStatusBits { kProcessRemotely; kDefaultApplication; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationRemote.html:11660,timeout,timeout,11660,root/html526/TApplicationRemote.html,https://root.cern,https://root.cern/root/html526/TApplicationRemote.html,1,['timeout'],['timeout']
Safety,"t char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTApplication::Help(const char* line); virtual voidTApplication::LoadGraphicsLibs(); virtual voidTApplication::MakeBatch(); voidTObject::MakeZombie(); static TApplication*TApplication::Open(const char* url, Int_t debug, const char* script); static Int_tTApplication::ParseRemoteLine(const char* ln, TString& hostdir, TString& user, Int_t& dbg, TString& script); virtual Long_tTApplication::ProcessRemote(const char* line, Int_t* error = 0); voidTApplication::SetSignalHandler(TSignalHandler* sh). private:. Int_tBroadcast(const TMessage& mess); Int_tBroadcast(Int_t kind, Int_t type = kRRT_Undef); Int_tBroadcast(const char* mess, Int_t kind = kMESS_STRING, Int_t type = kRRT_Undef); Int_tBroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Int_tBroadcastRaw(const void* buffer, Int_t length); Bool_tCheckFile(const char* file, Long_t modtime); Int_tCollect(Long_t timeout = -1); Int_tCollectInput(); voidRecvLogFile(Int_t size). Data Members; public:. static TApplication::EExitOnExceptionTApplication::kAbort; static TApplicationRemote::ESendFileOptkAscii; static TApplicationRemote::ESendFileOptkBinary; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TApplicationRemote::EStatusBitskCollecting; static TApplication::EStatusBitsTApplication::kDefaultApplication; static TApplication::EExitOnExceptionTApplication::kDontExit; static TApplication::EExitOnExceptionTApplication::kExit; static TApplication::EFileBitsTApplication::kExpression; static TApplicationRemote::ESendFileOptkForce; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anony",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationRemote.html:11986,timeout,timeout,11986,root/html602/TApplicationRemote.html,https://root.cern,https://root.cern/root/html602/TApplicationRemote.html,2,['timeout'],['timeout']
Safety,"t constructor. TGeoCompositeShape(const char* name, TGeoBoolNode* node); Constructor with a Boolean node. ~TGeoCompositeShape(); destructor. Double_t Capacity() const; Computes capacity of this shape [length^3] by sampling with 1% error. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Computes normal vector in POINT to the composite shape. Bool_t Contains(const Double_t* point) const; Tests if point is inside the shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to this composite shape.; Check if the bounding box is crossed within the requested distance. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to outside of this composite shape. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide all range of iaxis in range/step cells. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. void InspectShape() const; print shape parameters. void MakeNode(const char* expression); Make a booleann node according to the top level boolean operation of expression.; Propagates signal to branches until expression is fully decomposed.; printf(""Making node for : %s\n"", expression);. Bool_t PaintComposite(Option_t* option = """") const; Paint this composite shape into the current 3D viewer; Returns bool flag indicating if the caller should continue to; paint child objects. void RegisterYourself(); Register the shape and all components to TGeoManager class. Double_t Safety(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCompositeShape.html:19650,safe,safe,19650,root/html534/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html534/TGeoCompositeShape.html,3,['safe'],['safe']
Safety,"t dz, Double_t phi1, Double_t phi2); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); static voidTGeoTube::DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTubeSeg.html:2630,safe,safe,2630,root/html528/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html528/TGeoTubeSeg.html,1,['safe'],['safe']
Safety,"t entries = fEntries;; 6314 Double_t *oldBins = new Double_t[nbins+2];; 6315 Int_t bin, i;; 6316 for (bin=0;bin<nbins+2;bin++) oldBins[bin] = RetrieveBinContent(bin);; 6317 Double_t *oldErrors = nullptr;; 6318 if (fSumw2.fN != 0) {; 6319 oldErrors = new Double_t[nbins+2];; 6320 for (bin=0;bin<nbins+2;bin++) oldErrors[bin] = GetBinError(bin);; 6321 }; 6322 // rebin will not include underflow/overflow if new axis range is larger than old axis range; 6323 if (xbins) {; 6324 if (xbins[0] < fXaxis.GetXmin() && oldBins[0] != 0 ); 6325 Warning(""Rebin"",""underflow entries will not be used when rebinning"");; 6326 if (xbins[newbins] > fXaxis.GetXmax() && oldBins[nbins+1] != 0 ); 6327 Warning(""Rebin"",""overflow entries will not be used when rebinning"");; 6328 }; 6329 ; 6330 ; 6331 // create a clone of the old histogram if newname is specified; 6332 TH1 *hnew = this;; 6333 if ((newname && strlen(newname) > 0) || xbins) {; 6334 hnew = (TH1*)Clone(newname);; 6335 }; 6336 ; 6337 //reset can extend bit to avoid an axis extension in SetBinContent; 6338 UInt_t oldExtendBitMask = hnew->SetCanExtend(kNoAxis);; 6339 ; 6340 // save original statistics; 6341 Double_t stat[kNstat];; 6342 GetStats(stat);; 6343 bool resetStat = false;; 6344 // change axis specs and rebuild bin contents array::RebinAx; 6345 if(!xbins && (newbins*ngroup != nbins)) {; 6346 xmax = fXaxis.GetBinUpEdge(newbins*ngroup);; 6347 resetStat = true; //stats must be reset because top bins will be moved to overflow bin; 6348 }; 6349 // save the TAttAxis members (reset by SetBins); 6350 Int_t nDivisions = fXaxis.GetNdivisions();; 6351 Color_t axisColor = fXaxis.GetAxisColor();; 6352 Color_t labelColor = fXaxis.GetLabelColor();; 6353 Style_t labelFont = fXaxis.GetLabelFont();; 6354 Float_t labelOffset = fXaxis.GetLabelOffset();; 6355 Float_t labelSize = fXaxis.GetLabelSize();; 6356 Float_t tickLength = fXaxis.GetTickLength();; 6357 Float_t titleOffset = fXaxis.GetTitleOffset();; 6358 Float_t titleSize = fXaxis.GetTitleSize();; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:250110,avoid,avoid,250110,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['avoid'],['avoid']
Safety,"t exist return -inf, +inf ; Definition at line 115 of file DataRange.h. ◆ GetRange() [6/6]. void ROOT::Fit::DataRange::GetRange ; (; unsigned int ; irange, . unsigned int ; icoord, . double & ; xmin, . double & ; xmax . ); const. inline . get the i-th range for given coordinate. ; If range does not exist return -inf, +inf ; Definition at line 104 of file DataRange.h. ◆ IsInside() [1/2]. bool ROOT::Fit::DataRange::IsInside ; (; const double * ; x); const. inline . check if a multi-dimpoint is inside the range ; Definition at line 211 of file DataRange.h. ◆ IsInside() [2/2]. bool ROOT::Fit::DataRange::IsInside ; (; double ; x, . unsigned int ; icoord = 0 . ); const. check if a point is inside the range for the given coordinate ; Definition at line 146 of file DataRange.cxx. ◆ IsSet(). bool ROOT::Fit::DataRange::IsSet ; (; ); const. inline . return true if a range has been set in any of the coordinates i.e. ; when it is not [-inf,+inf] for all coordinates Avoid in case of multi-dim to loop on all the coordinated and ask the size ; Definition at line 80 of file DataRange.h. ◆ NDim(). unsigned int ROOT::Fit::DataRange::NDim ; (; ); const. inline . get range dimension ; Definition at line 65 of file DataRange.h. ◆ operator()(). std::pair< double, double > ROOT::Fit::DataRange::operator() ; (; unsigned int ; icoord = 0, . unsigned int ; irange = 0 . ); const. return the i-th range for the coordinate icoord. ; Useful method when only one range is present for the given coordinate ; Definition at line 78 of file DataRange.cxx. ◆ Ranges(). const RangeSet & ROOT::Fit::DataRange::Ranges ; (; unsigned int ; icoord = 0); const. inline . return the vector of ranges for the coordinate icoord ; Definition at line 89 of file DataRange.h. ◆ SetRange() [1/4]. void ROOT::Fit::DataRange::SetRange ; (; double ; xmin, . double ; xmax . ). inline . set a range [xmin,xmax] for the first coordinate icoord ; Definition at line 186 of file DataRange.h. ◆ SetRange() [2/4]. void ROOT::Fit::DataRang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html:10358,Avoid,Avoid,10358,doc/master/classROOT_1_1Fit_1_1DataRange.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html,1,['Avoid'],['Avoid']
Safety,"t fAlpha1; // angle between centers of x edges an y axis at low z; 105 Double_t fH2; // half length in y at high z; 106 Double_t fBl2; // half length in x at high z and y low edge; 107 Double_t fTl2; // half length in x at high z and y high edge; 108 Double_t fAlpha2; // angle between centers of x edges an y axis at low z; 109 ; 110public:; 111 // constructors; 112 TGeoTrap();; 113 TGeoTrap(Double_t dz, Double_t theta, Double_t phi);; 114 TGeoTrap(Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1,; 115 Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);; 116 TGeoTrap(const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1,; 117 Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);; 118 // destructor; 119 ~TGeoTrap() override;; 120 Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact = 1, Double_t step = TGeoShape::Big(),; 121 Double_t *safe = nullptr) const override;; 122 void DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 123 Double_t *step) const override;; 124 Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact = 1,; 125 Double_t step = TGeoShape::Big(), Double_t *safe = nullptr) const override;; 126 void DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 127 Double_t *step) const override;; 128 TGeoVolume *; 129 Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;; 130 Double_t GetTheta() const { return fTheta; }; 131 Double_t GetPhi() const { return fPhi; }; 132 Double_t GetH1() const { return fH1; }; 133 Double_t GetBl1() const { return fBl1; }; 134 Double_t GetTl1() const { return fTl1; }; 135 Double_t GetAlpha1() const { return fAlpha1; }; 136 Double_t GetH2() const { return fH2; }; 137 Double_t GetBl2() const { return fBl2; }; 138",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoArb8_8h_source.html:6250,safe,safe,6250,doc/master/TGeoArb8_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoArb8_8h_source.html,1,['safe'],['safe']
Safety,"t from other external MC for simulation, therefore it does not contain any constraints related to physics. However, the package defines a number of hooks for tracking, such as media, materials, magnetic field or track state flags, in order to allow interfacing to tracking MC's. The final goal is to be able to use the same geometry for several purposes, such as tracking, reconstruction or visualization, taking advantage of the ROOT features related to bookkeeping, I/O, histogramming, browsing and GUI's.; The geometrical modeler is the most important component of the package and it provides answers to the basic questions like ""Where am I ?"" or ""How far; from the next boundary ?"", but also to more complex ones like ""How far from; the closest surface ?"" or ""Which is the next crossing along a helix ?"".; The architecture of the modeler is a combination between a GEANT-like containment scheme and a normal CSG binary tree at the level of shapes. An important common feature of all detector geometry descriptions is the mother-daughter concept. This is the most natural approach when tracking is concerned and imposes a set of constraints to the way geometry is defined. Constructive solid geometry composition is used only in order to create more complex shapes from an existing set of primitives through boolean operations. This feature is not implemented yet but in future full definition of boolean expressions will be supported.; Practically every geometry defined in GEANT style can be mapped by the modeler. The basic components used for building the logical hierarchy of the geometry are called ""volumes"" and ""nodes"". Volumes (sometimes called ""solids"") are fully defined geometrical objects having a given shape and medium and possibly containing a list of nodes. Nodes represent just positioned instances of volumes inside a container volume and they are not directly defined by user. They are automatically created as a result of adding one volume inside other or dividing a volume. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:1789,detect,detector,1789,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['detect'],['detector']
Safety,"t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const TClass *oldClass, TClass *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerSTL.html:3672,detect,detected,3672,doc/master/classTStreamerSTL.html,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html,2,['detect'],['detected']
Safety,"t implementing the operator()(const double * x, const double * p) in an interface-like IParamFunction with a vector storing and caching internally the parameter values ;  CWrappedParamFunctionGenWrappedParamGenFunction class to wrap any multi-dimensional function implementing the operator()(const double * ) in an interface-like IParamFunction, by fixing some of the variables and define them as parameters ;  CWrappedTF1Class to Wrap a ROOT Function class (like TF1) in a IParamFunction interface of one dimensions to be used in the ROOT::Math numerical algorithms The wrapper does not own bby default the TF1 pointer, so it assumes it exists during the wrapper lifetime ;  NMathMore;  ►NMeta;  ►NSelection;  CClassAttributesUsed to specify attributes of classes in the ""DictSelection"" syntax ;  CKeepFirstTemplateArgumentsUsed to specify the number of arguments to be kept ;  CMemberAttributesUsed to specify attributes of data members in the ""DictSelection"" syntax ;  CSelectNoInstanceUsed to avoid to select all instances of a template ;  NMinuit;  ►NMinuit2;  CABObj;  CABObj< sym, LASymMatrix, double >;  CABObj< vec, LAVector, double >;  CABProd;  CABSum;  CAlgebraicProdType;  CAlgebraicProdType< gen, gen >;  CAlgebraicProdType< gen, sym >;  CAlgebraicProdType< gen, vec >;  CAlgebraicProdType< sym, gen >;  CAlgebraicProdType< sym, sym >;  CAlgebraicProdType< sym, vec >;  CAlgebraicProdType< T, T >;  CAlgebraicProdType< vec, gen >;  CAlgebraicProdType< vec, sym >;  CAlgebraicSumType;  CAlgebraicSumType< gen, vec >;  CAlgebraicSumType< sym, vec >;  CAlgebraicSumType< T, T >;  CAlgebraicSumType< vec, gen >;  CAlgebraicSumType< vec, sym >;  CAnalyticalGradientCalculator;  CBasicFunctionGradient;  ►CBasicFunctionMinimumResult of the minimization; both internal and external (MnUserParameterState) representation available For the parameters at the Minimum ;  CMnAboveMaxEdm;  CMnReachedCallLimit;  ►CBasicMinimumErrorInternal Class containing the error information on the estimated min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:67813,avoid,avoid,67813,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['avoid'],['avoid']
Safety,"t is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN() [3/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23332,avoid,avoid,23332,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['avoid'],['avoid']
Safety,"t leaves.; 5781 ; 5782void TTree::InitializeBranchLists(bool checkLeafCount); 5783{; 5784 Int_t nbranches = fBranches.GetEntriesFast();; 5785 ; 5786 // The special branch fBranchRef needs to be processed sequentially:; 5787 // we add it once only.; 5788 if (fBranchRef && fBranchRef != fSeqBranches[0]) {; 5789 fSeqBranches.push_back(fBranchRef);; 5790 }; 5791 ; 5792 // The branches to be processed sequentially are those that are the leaf count of another branch; 5793 if (checkLeafCount) {; 5794 for (Int_t i = 0; i < nbranches; i++) {; 5795 TBranch* branch = (TBranch*)fBranches.UncheckedAt(i);; 5796 auto leafCount = ((TLeaf*)branch->GetListOfLeaves()->At(0))->GetLeafCount();; 5797 if (leafCount) {; 5798 auto countBranch = leafCount->GetBranch();; 5799 if (std::find(fSeqBranches.begin(), fSeqBranches.end(), countBranch) == fSeqBranches.end()) {; 5800 fSeqBranches.push_back(countBranch);; 5801 }; 5802 }; 5803 }; 5804 }; 5805 ; 5806 // Any branch that is not a leaf count can be safely processed in parallel when reading; 5807 // We need to reset the vector to make sure we do not re-add several times the same branch.; 5808 if (!checkLeafCount) {; 5809 fSortedBranches.clear();; 5810 }; 5811 for (Int_t i = 0; i < nbranches; i++) {; 5812 Long64_t bbytes = 0;; 5813 TBranch* branch = (TBranch*)fBranches.UncheckedAt(i);; 5814 if (std::find(fSeqBranches.begin(), fSeqBranches.end(), branch) == fSeqBranches.end()) {; 5815 bbytes = branch->GetTotBytes(""*"");; 5816 fSortedBranches.emplace_back(bbytes, branch);; 5817 }; 5818 }; 5819 ; 5820 // Initially sort parallel branches by size; 5821 std::sort(fSortedBranches.begin(),; 5822 fSortedBranches.end(),; 5823 [](std::pair<Long64_t,TBranch*> a, std::pair<Long64_t,TBranch*> b) {; 5824 return a.first > b.first;; 5825 });; 5826 ; 5827 for (size_t i = 0; i < fSortedBranches.size(); i++) {; 5828 fSortedBranches[i].first = 0LL;; 5829 }; 5830}; 5831 ; 5832////////////////////////////////////////////////////////////////////////////////; 5833/// S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:229197,safe,safely,229197,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['safe'],['safely']
Safety,"t line 213 of file TProofPlayer.h. ◆ SetMaxDrawQueries(). void TProofPlayer::SetMaxDrawQueries ; (; Int_t ; max). inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 168 of file TProofPlayer.h. ◆ SetMerging(). void TProofPlayer::SetMerging ; (; Bool_t ; = kTRUE). inlineoverridevirtual . Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 215 of file TProofPlayer.h. ◆ SetOutputFilePath(). void TProofPlayer::SetOutputFilePath ; (; const char * ; fp). inlineoverridevirtual . Implements TVirtualProofPlayer.; Definition at line 220 of file TProofPlayer.h. ◆ SetProcessing(). void TProofPlayer::SetProcessing ; (; Bool_t ; on = kTRUE). Set processing bit according to 'on'. ; Definition at line 274 of file TProofPlayer.cxx. ◆ SetStopTimer(). void TProofPlayer::SetStopTimer ; (; Bool_t ; on = kTRUE, . Bool_t ; abort = kFALSE, . Int_t ; timeout = 0 . ). overridevirtual . Enable/disable the timer to stop/abort processing. ; The 'timeout' is in seconds. ; Implements TVirtualProofPlayer.; Definition at line 323 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayer::SetupFeedback ; (; ). protectedvirtual . Set up feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, and TProofPlayerLite.; Definition at line 1642 of file TProofPlayer.cxx. ◆ StopFeedback(). void TProofPlayer::StopFeedback ; (; ). virtual . Stop feedback (may not be used in this class). ; Reimplemented in TProofPlayerLocal, TProofPlayerRemote, and TProofPlayerSlave.; Definition at line 1650 of file TProofPlayer.cxx. ◆ StopProcess(). void TProofPlayer::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). overridevirtual . Stop the process after this event. ; If timeout is positive, start a timer firing after timeout seconds to hard-stop time-expensive events. ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 287",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:41819,timeout,timeout,41819,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['timeout'],['timeout']
Safety,"t line 539 of file TGeoBoolNode.cxx. ◆ DeclFileName(). static const char * TGeoUnion::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 128 of file TGeoBoolNode.h. ◆ DistanceToPrimitive(). Int_t TGeoUnion::DistanceToPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute minimum distance to shape vertices. ; Implements TGeoBoolNode.; Definition at line 607 of file TGeoBoolNode.cxx. ◆ DistFromInside(). Double_t TGeoUnion::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = 0, . Double_t * ; safe = nullptr . ); const. overridevirtual . Computes distance from a given point inside the shape to its boundary. ; Implements TGeoBoolNode.; Definition at line 616 of file TGeoBoolNode.cxx. ◆ DistFromOutside(). Double_t TGeoUnion::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = 0, . Double_t * ; safe = nullptr . ); const. overridevirtual . Compute distance from a given outside point to the shape. ; Implements TGeoBoolNode.; Definition at line 746 of file TGeoBoolNode.cxx. ◆ GetBooleanOperator(). EGeoBoolType TGeoUnion::GetBooleanOperator ; (; ); const. inlineoverridevirtual . Implements TGeoBoolNode.; Definition at line 118 of file TGeoBoolNode.h. ◆ GetNpoints(). Int_t TGeoUnion::GetNpoints ; (; ). overridevirtual . Returns number of vertices for the composite shape described by this union. ; Implements TGeoBoolNode.; Definition at line 778 of file TGeoBoolNode.cxx. ◆ IsA(). TClass * TGeoUnion::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBoolNode.; Definition at line 128 of file TGeoBoolNode.h. ◆ MakeClone(). TGeoBoolNode * TGeoUnion::MakeClone ; (; ); const. overridevirtual . Make a clone of this. Pointers are preserved. ; Implements TGeoBoolNode.; Definition at line 432 of file TGeoBoolNode.cxx. ◆ Paint(). void T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoUnion.html:16889,safe,safe,16889,doc/master/classTGeoUnion.html,https://root.cern,https://root.cern/doc/master/classTGeoUnion.html,1,['safe'],['safe']
Safety,"t md5 and compare against md5 in map, if not same return kTRUE.; if no, get file's md5 and modtime and store in file map, ask slave if file exists with specific md5, if yes return kFALSE, if no return kTRUE. Returns kTRUE in case file needs to be send, returns kFALSE in case file is already on remote node. . Definition at line 674 of file TApplicationRemote.cxx. ◆ Class(). static TClass * TApplicationRemote::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TApplicationRemote::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TApplicationRemote::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 117 of file TApplicationRemote.h. ◆ Collect(). Int_t TApplicationRemote::Collect ; (; Long_t ; timeout = -1). private . Collect responses from the remote server. ; Returns the number of messages received. If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). ; Definition at line 326 of file TApplicationRemote.cxx. ◆ CollectInput(). Int_t TApplicationRemote::CollectInput ; (; ). private . Collect and analyze available input from the socket. ; Returns 0 on success, -1 if any failure occurs. ; Definition at line 394 of file TApplicationRemote.cxx. ◆ DeclFileName(). static const char * TApplicationRemote::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TApplicationRemote.h. ◆ Interrupt(). void TApplicationRemote::Interrupt ; (; Int_t ; type = kRRI_Hard). Send interrupt OOB byte to server. ; Returns 0 if ok, -1 in case of error ; Definition at line 937 of file TApplicationRemote.cxx. ◆ IsA(). TClass * TApplicationRemote::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TApplication.; Definition at line 117 of file TApplicationRemote.h. ◆ IsFolder(). Bool_t TApplica",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationRemote.html:27199,timeout,timeout,27199,doc/master/classTApplicationRemote.html,https://root.cern,https://root.cern/doc/master/classTApplicationRemote.html,3,['timeout'],['timeout']
Safety,"t nTargets = DataInfo().GetNTargets();; 1970 R__ASSERT(nTargets == fYHat->GetNcols());; 1971 ; 1972 std::vector<Float_t> output(nTargets);; 1973 for (size_t i = 0; i < nTargets; i++); 1974 output[i] = (*fYHat)(0, i);; 1975 ; 1976 // ned to transform back output values; 1977 if (fRegressionReturnVal == NULL); 1978 fRegressionReturnVal = new std::vector<Float_t>(nTargets);; 1979 R__ASSERT(fRegressionReturnVal->size() == nTargets);; 1980 ; 1981 // N.B. one should cache here temporary event class; 1982 Event *evT = new Event(*GetEvent());; 1983 for (size_t i = 0; i < nTargets; ++i) {; 1984 evT->SetTarget(i, output[i]);; 1985 }; 1986 const Event *evT2 = GetTransformationHandler().InverseTransform(evT);; 1987 for (size_t i = 0; i < nTargets; ++i) {; 1988 (*fRegressionReturnVal)[i] = evT2->GetTarget(i);; 1989 }; 1990 delete evT;; 1991 return *fRegressionReturnVal;; 1992}; 1993//////////////////////////////////////////////////////////////////////////; 1994/// Get the multi-class output values for a single event; 1995//////////////////////////////////////////////////////////////////////////; 1996const std::vector<Float_t> &TMVA::MethodDL::GetMulticlassValues(); 1997{; 1998 ; 1999 FillInputTensor();; 2000 ; 2001 fNet->Prediction(*fYHat, fXInput, fOutputFunction);; 2002 ; 2003 size_t nClasses = DataInfo().GetNClasses();; 2004 R__ASSERT(nClasses == fYHat->GetNcols());; 2005 ; 2006 if (fMulticlassReturnVal == NULL) {; 2007 fMulticlassReturnVal = new std::vector<Float_t>(nClasses);; 2008 }; 2009 R__ASSERT(fMulticlassReturnVal->size() == nClasses);; 2010 ; 2011 for (size_t i = 0; i < nClasses; i++) {; 2012 (*fMulticlassReturnVal)[i] = (*fYHat)(0, i);; 2013 }; 2014 return *fMulticlassReturnVal;; 2015}; 2016 ; 2017////////////////////////////////////////////////////////////////////////////////; 2018/// Evaluate the DeepNet on a vector of input values stored in the TMVA Event class; 2019/// Here we will evaluate using a default batch size and the same architecture used for ; 2020/// ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:79499,Predict,Prediction,79499,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Predict'],['Prediction']
Safety,"t of memory; closing connection"");; 12527 break;; 12528 }; 12529 }; 12530 ; 12531 /* Copy the mask before we shift the queue and destroy it */; 12532 if (mask_len > 0) {; 12533 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12534 } else {; 12535 memset(mask, 0, sizeof(mask));; 12536 }; 12537 ; 12538 /* Read frame payload from the first message in the queue into; 12539 * data and advance the queue by moving the memory in place. */; 12540 DEBUG_ASSERT(body_len >= header_len);; 12541 if (data_len + (uint64_t)header_len > (uint64_t)body_len) {; 12542 mop = buf[0]; /* current mask and opcode */; 12543 /* Overflow case */; 12544 len = body_len - header_len;; 12545 memcpy(data, buf + header_len, len);; 12546 error = 0;; 12547 while ((uint64_t)len < data_len) {; 12548 n = pull_inner(NULL,; 12549 conn,; 12550 (char *)(data + len),; 12551 (int)(data_len - len),; 12552 timeout);; 12553 if (n <= -2) {; 12554 error = 1;; 12555 break;; 12556 } else if (n > 0) {; 12557 len += (size_t)n;; 12558 } else {; 12559 /* Timeout: should retry */; 12560 /* TODO: retry condition */; 12561 }; 12562 }; 12563 if (error) {; 12564 mg_cry_internal(; 12565 conn,; 12566 ""%s"",; 12567 ""Websocket pull failed; closing connection"");; 12568 if (data != mem) {; 12569 mg_free(data);; 12570 }; 12571 break;; 12572 }; 12573 ; 12574 conn->data_len = conn->request_len;; 12575 ; 12576 } else {; 12577 ; 12578 mop = buf[0]; /* current mask and opcode, overwritten by; 12579 * memmove() */; 12580 ; 12581 /* Length of the message being read at the front of the; 12582 * queue. Cast to 31 bit is OK, since we limited; 12583 * data_len before. */; 12584 len = (size_t)data_len + header_len;; 12585 ; 12586 /* Copy the data payload into the data pointer for the; 12587 * callback. Cast to 31 bit is OK, since we; 12588 * limited data_len */; 12589 memcpy(data, buf + header_len, (size_t)data_len);; 12590 ; 12591 /* Move the queue forward len bytes */; 12592 memmove(buf, buf + len, body_len - len);; 12593 ; 12594 /* Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:364631,timeout,timeout,364631,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"t of memory; closing connection"");; 12528 break;; 12529 }; 12530 }; 12531 ; 12532 /* Copy the mask before we shift the queue and destroy it */; 12533 if (mask_len > 0) {; 12534 memcpy(mask, buf + header_len - mask_len, sizeof(mask));; 12535 } else {; 12536 memset(mask, 0, sizeof(mask));; 12537 }; 12538 ; 12539 /* Read frame payload from the first message in the queue into; 12540 * data and advance the queue by moving the memory in place. */; 12541 DEBUG_ASSERT(body_len >= header_len);; 12542 if (data_len + (uint64_t)header_len > (uint64_t)body_len) {; 12543 mop = buf[0]; /* current mask and opcode */; 12544 /* Overflow case */; 12545 len = body_len - header_len;; 12546 memcpy(data, buf + header_len, len);; 12547 error = 0;; 12548 while ((uint64_t)len < data_len) {; 12549 n = pull_inner(NULL,; 12550 conn,; 12551 (char *)(data + len),; 12552 (int)(data_len - len),; 12553 timeout);; 12554 if (n <= -2) {; 12555 error = 1;; 12556 break;; 12557 } else if (n > 0) {; 12558 len += (size_t)n;; 12559 } else {; 12560 /* Timeout: should retry */; 12561 /* TODO: retry condition */; 12562 }; 12563 }; 12564 if (error) {; 12565 mg_cry_internal(; 12566 conn,; 12567 ""%s"",; 12568 ""Websocket pull failed; closing connection"");; 12569 if (data != mem) {; 12570 mg_free(data);; 12571 }; 12572 break;; 12573 }; 12574 ; 12575 conn->data_len = conn->request_len;; 12576 ; 12577 } else {; 12578 ; 12579 mop = buf[0]; /* current mask and opcode, overwritten by; 12580 * memmove() */; 12581 ; 12582 /* Length of the message being read at the front of the; 12583 * queue. Cast to 31 bit is OK, since we limited; 12584 * data_len before. */; 12585 len = (size_t)data_len + header_len;; 12586 ; 12587 /* Copy the data payload into the data pointer for the; 12588 * callback. Cast to 31 bit is OK, since we; 12589 * limited data_len */; 12590 memcpy(data, buf + header_len, (size_t)data_len);; 12591 ; 12592 /* Move the queue forward len bytes */; 12593 memmove(buf, buf + len, body_len - len);; 12594 ; 12595 /* Ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:364664,timeout,timeout,364664,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"t of objects created during processing; TTreeFormula*fSelectPointer to selection formula; TStringfSelection; TStatus*fStatus; Long64_tTSelector::fStatusselector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void SlaveBegin(TTree* ); Executed by each slave before processing. Bool_t ProcessSingle(Long64_t , Int_t ); Processes a single variable from an entry. Bool_t Process(Long64_t ); Executed for each entry. void SlaveTerminate(void); Executed by each slave after the processing has finished,; before returning the results to the client. void Terminate(void); Executed by the client after getting the processing retults. void ClearFormula(); Delete internal buffers. void SetCanvas(const char* objname); Move to a canvas named <name>_canvas; create the canvas if not existing.; Used to avoid screwing up existing plots when non default names are used; for the final objects. void SetDrawAtt(TObject* o); Set the drawing attributes from the input list. void SetError(const char* sub, const char* mesg); Sets the error status. Bool_t CompileVariables(); Compiles each variable from fTreeDrawArgsParser for the tree fTree.; Return kFALSE if any of the variable is not compilable. void DoFill(Long64_t entry, Double_t w, const Double_t* v). void DefVar(). int Version() const; { return 1; }. » Author: Maarten Ballintijn 24/09/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id: TProofDraw.h 30068 2009-09-08 15:19:38Z ganis $ » Last generated: 2010-10-05 21:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofDraw.html:8087,avoid,avoid,8087,root/html528/TProofDraw.html,https://root.cern,https://root.cern/root/html528/TProofDraw.html,1,['avoid'],['avoid']
Safety,"t of signals from this object; TObject*fObjectobject to be notified (if any); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfSynctrue if synchrounous timer; TTimefTimetime out time in ms; UInt_tfTimeIDthe system ID of this timer (for WIN32); Bool_tfTimeouttrue if timer has timed out; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TSysEvtHandler. ←; TTimer. ←. TProcessEventTimer. Function documentation; TTimer(Long_t milliSec = 0, Bool_t mode = kTRUE); Create timer that times out in ms milliseconds. If milliSec is 0; then the timeout will be the minimum timeout (see TSystem::ESysConstants,; i.e. 10 ms). If mode == kTRUE then the timer is synchronous else; a-synchronous. The default is synchronous. Add a timer to the system; eventloop by calling TurnOn(). Set command to be executed from Notify(); or set the object whose HandleTimer() method will be called via Notify(),; derive from TTimer and override Notify() or connect slots to the; signals Timeout(), TurnOn() and TurnOff(). TTimer(TObject* obj, Long_t milliSec, Bool_t mode = kTRUE); Create timer that times out in ms milliseconds. If mode == kTRUE then; the timer is synchronous else a-synchronous. The default is synchronous.; Add a timer to the system eventloop by calling TurnOn().; The object's HandleTimer() will be called by Notify(). TTimer(const char* command, Long_t milliSec, Bool_t mode = kTRUE); Create timer that times out in ms milliseconds. If mode == kTRUE then; the timer is synchronous else a-synchronous. The default is synchronous.; Add a timer to the system eventloop by calling TurnOn().; The interpreter will execute command from Notify(). Bool_t CheckTimer(const TTime& now); Check if timer timed out. Bool_t Notify(); Notify when timer times out. The timer is always reset. To stop; the timer call TurnOff(). Make sure to call Reset() also in derived; Notify() so timers will keep wor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTimer.html:12586,Timeout,Timeout,12586,root/html602/TTimer.html,https://root.cern,https://root.cern/root/html602/TTimer.html,2,['Timeout'],['Timeout']
Safety,"t of simple variables, contents of a folder, contents of a TList, or an array of objects. Let’s see some examples. To follow along you will need the shared library libEvent.so. First, check if it is in $ROOTSYS/test. If it is, copy it to your own area. If it is not there, you have to build it by typing make in $ROOTSYS/test.; 12.9 Adding a Branch to Hold a List of Variables; As in the very first example (cernstaff.root.root) the data we want to save is a list of simple variables, such as integers or floats. In this case, we use the following TTree::Branch signature:; tree->Branch(""Ev_Branch"",&event,; ""temp/F:ntrack/I:nseg:nvtex:flag/i"");; The first parameter is the branch name.; The second parameter is the address from which the first variable is to be read. In the code above, “event” is a structure with one float and three integers and one unsigned integer. You should not assume that the compiler aligns the elements of a structure without gaps. To avoid alignment problems, you need to use structures with same length members. If your structure does not qualify, you need to create one branch for each element of the structure.; The leaf name is NOT used to pick the variable out of the structure, but is only used as the name for the leaf. This means that the list of variables needs to be in a structure in the order described in the third parameter.; This third parameter is a string describing the leaf list. Each leaf has a name and a type separated by a “/” and it is separated from the next leaf by a “:”.; <Variable>/<type>:<Variable>/<type>; The example on the next line has two leafs: a floating-point number called temp and an integer named ntrack.; ""temp/F:ntrack/I:""; The type can be omitted and if no type is given, the same type as the previous variable is assumed. This leaf list has three integers called ntrack, nseg, and nvtex.; ""ntrack/I:nseg:nvtex""; There is one more rule: when no type is given for the very first leaf, it becomes a float (F). This leaf list has ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:538198,avoid,avoid,538198,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoid']
Safety,"t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetActive(Long_t timeout = -1) const; Int_tGetDeActive() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfActives() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*GetListOfDeActives() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:4430,timeout,timeout,4430,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,4,['timeout'],['timeout']
Safety,"t paths. ; Definition at line 134 of file TError.h. Typedef Documentation. ◆ ErrorHandlerFunc_t. typedef void(* ErrorHandlerFunc_t) (int level, Bool_t abort, const char *location, const char *msg). Definition at line 71 of file TError.h. Function Documentation. ◆ AbstractMethod(). void AbstractMethod ; (; const char * ; method). This function can be used in abstract base classes in case one does not want to make the class a ""real"" (in C++ sense) ABC. ; If this function is called it will warn the user that the function should have been overridden. ; Definition at line 159 of file TError.cxx. ◆ Break(). void Break ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case an error occurred. ; Definition at line 207 of file TError.cxx. ◆ DefaultErrorHandler(). void DefaultErrorHandler ; (; Int_t ; level, . Bool_t ; abort_bool, . const char * ; location, . const char * ; msg . ). The default error handler function. ; It prints the message on stderr and if abort is set it aborts the application. Replaces the minimal error handler of TError.h as part of the gROOT construction. TError's minimal handler is put back in place during the gROOT destruction. Noteabort() is only called if abort_bool is true and level < gErrorIgnoreLevel ; Definition at line 102 of file TErrorDefaultHandler.cxx. ◆ Error(). void Error ; (; const char * ; location, . const char * ; msgfmt, .  ; ... . ). Use this function in case an error occurred. ; Definition at line 185 of file TError.cxx. ◆ ErrorHandler(). void ErrorHandler ; (; int ; level, . const char * ; location, . const char * ; fmt, . std::va_list ; va . ). General error handler function. It calls the user set error handler. ; Definition at line 109 of file TError.cxx. ◆ Fatal(). void Fatal ; (; const char * ; location, . const char * ; fmt, .  ; ... . ). Use this function in case of a fatal error. It will abort the program. ; WarningFatal() will not abort the program if gErrorIgnoreLevel > kFatal; but fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:5881,abort,abort,5881,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,2,['abort'],"['abort', 'aborts']"
Safety,"t priority, TProof::ESlaves list = kAllUnique); Int_tBroadcastGroupPriority(const char* grp, Int_t priority, TList* workers); Int_tBroadcastObject(const TObject* obj, Int_t kind, TList* slaves); Int_tBroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT, TProof::ESlaves list = kActive); Int_tBroadcastRaw(const void* buffer, Int_t length, TList* slaves); Int_tBroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Int_tBuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT, TList* workers = 0); Int_tBuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = kCheckROOT); Bool_tCheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp | kCpBin)); voidCleanGDirectory(TList* ol); voidClearDataProgress(Int_t r, Int_t t); Int_tCollect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Int_tCollect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Int_tCollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Bool_tCreateMerger(TSlave* sl, Int_t port); voidDeActivateAsyncInput(); Int_tDisablePackage(const char* package); Int_tDisablePackageOnClient(const char* package); Int_tDisablePackages(); Int_tExec(const char* cmd, TProof::ESlaves list, Bool_t plusMaster); voidFinalizationDone(); Int_tFindNextFreeMerger(); TSlave*FindSlave(TSocket* s) const; virtual voidFindUniqueSlaves(); Int_tGetActiveMergersCount(); static TList*GetDataSetSrvMaps(const TString& srvmaps); TList*GetListOfBadSlaves() const; TList*GetListOfInactiveSlaves() const; TList*GetListOfSlaves() const; TList*GetListOfUniqueSlaves() const; Int_tGetNumberOfActiveSlaves() const; Int_tGetNumberOfBadSlaves() const; Int_tGetNumberOfInactiveSlaves() const; Int_tGetNumberOfSlaves() const; Int_tGetNumberOfUniqueSlaves() const; Int_tGetQueryReference(Int_t qry, TString& ref); Int_tGoMoreParallel(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:23318,timeout,timeout,23318,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['timeout'],['timeout']
Safety,"t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm, Double_t sm, Double_t cdfi); TGeoTubeSeg::fC2Double_t fC2Definition TGeoTube.h:103; TGeoTubeSeg::ContainsBool_t Contains(const Double_t *point) const override; TGeoTubeSeg::ComputeBBoxvoid ComputeBBox() override; TGeoTubeSeg::DistFromOutside_vvoid DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override; TGeoTubeSeg::TGeoTubeSegTGeoTubeSeg(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); TGeoTubeSeg::fCdfiDouble_t fCdfiDefinition TGeoTube.h:106; TGeoTubeSeg::fCmDouble_t fCmDefinition TGeoTube.h:105; TGeoTubeSeg::DistFromInsideDouble_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override; TGeoTubeSeg::TGeoTubeSegTGeoTubeSeg(const char *name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); TGeoTubeSeg::SetPointsvoid SetPoints(Float_t *points) const override; TGeoTubeSeg::GetBoundingCylindervoid GetBoundingCylinder(Double_t *param) const override; TGeoTubeSeg::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideComputes distance from point (px,py) to the object.; TGeoTubeSeg::InitTrigonometryvoid InitTrigonometry(); TGeoTubeSeg::DivideTGeoVolume * Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override; TGeoTubeSeg::GetByteCountInt_t GetByteCount() const overrideDefinition TGeoTube.h:149; TGeoTubeSeg::SafetyDouble_t Safety(const Double_t *point, Bool_t in=kTRUE) const override; TGeoTubeSeg::SetTubsDimensionsvoid SetTubsDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2); TGeoTubeSeg::GetPhi2Double_t GetPhi2() constDefinition TGeoTube.h:155; TGeoTubeSeg::fC1Double_t fC1Definition TGeoTube.h:101; TGeoTubeSeg::GetNmeshVerticesInt_t GetNmeshVertices() const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:20642,safe,safe,20642,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['safe'],['safe']
Safety,"t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoCtub&operator=(const TGeoCtub&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTubeSeg::SafetyS(Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Int_t skipz = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidSetCtubDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCtub.html:9287,Safe,SafetyS,9287,root/html528/TGeoCtub.html,https://root.cern,https://root.cern/root/html528/TGeoCtub.html,1,['Safe'],['SafetyS']
Safety,"t should fall back on the same point on the boundary (at d2). Propagate back on boundary then compute DistFromInside that should be bigger than d1. Plot d-(d1+d2) ; Definition at line 1771 of file TGeoChecker.cxx. ◆ ShapeNormal(). void TGeoChecker::ShapeNormal ; (; TGeoShape * ; shape, . Int_t ; nsamples, . Option_t * ; option . ). Check of validity of the normal for a given shape. ; Sample points inside the shape. Generate directions randomly in cos(theta) and propagate to boundary. Compute normal and safety at crossing point, plot the point and generate a random direction so that (dir) dot (norm) <0. ; Definition at line 2014 of file TGeoChecker.cxx. ◆ ShapeSafety(). void TGeoChecker::ShapeSafety ; (; TGeoShape * ; shape, . Int_t ; nsamples, . Option_t * ; option . ). Check of validity of safe distance for a given shape. ; Sample points inside the 2x bounding box and compute safety. Generate directions randomly in cos(theta) and compute distance to boundary. Check if distance to boundary is bigger than safety. ; Definition at line 1940 of file TGeoChecker.cxx. ◆ ShootRay(). Double_t * TGeoChecker::ShootRay ; (; Double_t * ; start, . Double_t ; dirx, . Double_t ; diry, . Double_t ; dirz, . Double_t * ; array, . Int_t & ; nelem, . Int_t & ; dim, . Double_t * ; endpoint = nullptr . ); const. Shoot one ray from start point with direction (dirx,diry,dirz). ; Fills input array with points just after boundary crossings. ; Definition at line 2614 of file TGeoChecker.cxx. ◆ Streamer(). void TGeoChecker::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoChecker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TGeoChecker.h. ◆ Test(). void TGeoChecker::Test ; (; Int_t ; npoints, . Option_t * ; option . ). Check time of finding ""Where am I"" for n points. ; Definition at line 2709 of file TGeoChecker.cxx. ◆ TestOverlaps(). void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:27981,safe,safety,27981,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['safe'],['safety']
Safety,"t sock, void* buffer, int length); virtual intRecvRaw(int sock, void* buffer, int length, int flag); virtual Int_tRedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); virtual TFileHandler*RemoveFileHandler(TFileHandler* fh); voidTSystem::RemoveOnExit(TObject* obj); virtual TSignalHandler*RemoveSignalHandler(TSignalHandler* sh); virtual TStdExceptionHandler*TSystem::RemoveStdExceptionHandler(TStdExceptionHandler* eh); virtual TTimer*RemoveTimer(TTimer* ti); virtual intRename(const char* from, const char* to); voidTObject::ResetBit(UInt_t f); static voidTSystem::ResetErrno(); virtual voidResetSignal(ESignals sig, Bool_t reset = kTRUE); virtual voidResetTimer(TTimer* ti); virtual voidTSystem::Run(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelect(TList* active, Long_t timeout); virtual Int_tSelect(TFileHandler* fh, Long_t timeout); virtual intSendBuf(int sock, const void* buffer, int length); virtual intSendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidSetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDynamicPath(const char* lib); virtual voidSetenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tSetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs(const char* linkedLibs); virtual voidTSystem::SetMakeExe(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TUnixSystem.html:11024,timeout,timeout,11024,root/html530/TUnixSystem.html,https://root.cern,https://root.cern/root/html530/TUnixSystem.html,2,['timeout'],['timeout']
Safety,"t start (cm). See also comments*; float phi0; /* azimuthal angle at start (deg) *; float z0; /* z-coord. at start (cm) *; float psi; /* azimuthal angle of pT vector (deg) *; float tanl; /* tan(dip) =pz/pt at start *; float invpt; /* 1/pt at start (GeV/c)^(-1) *; float curvature; /* Track curvature (1/cm) *; float covar[15]; /* full covariance matrix *; float chisq[2]; /* Chi-square per degree of freedom *; float x_first[3]; /* coord. of first measured point (cm) *; float x_last[3]; /* coord. of last measured point (cm) *; float length; /* from first to last point (cm) *; float impact; /* primary vertex (cm) *; unsigned long map[2]; /* extrap. info. (see preceding comments)*; int id; /* Primary key (see comments) *; int iflag; /* bitmask quality info. (see comments) *; int det_id; /* Detector id information *; int method; /* Track finding/fitting method, packed *; int pid; /* Geant particle ID for assumed mass *; int n_point; /* SVT, TPC, FTPC component #s are packed *; int n_max_point; /* SVT, TPC, FTPC component #s are packed *; int n_fit_point; /* SVT, TPC, FTPC component #s are packed *; int icharge; /* Particle charge in units of |e| *; int id_start_vertex; /* final fit and primary track candidates *; } DST_TRACK_ST;. class St_dst_track : public TTable; {; public:; ClassDefTable(St_dst_track,dst_track_st); ClassDef(St_dst_track,2) //C++ wrapper for <dst_track> StAF table; };; #endif. where the CPP macro defines several convinient methods for the; ""table"" class (see: $ROOTSYS/table/inc/Ttypes.h for details:. #define ClassDefTable(className,structName); protected:; static TTableDescriptor *fgColDescriptors;; virtual TTableDescriptor *GetDescriptorPointer() const { return fgColDescriptors;}; virtual void SetDescriptorPointer(TTableDescriptor *list) const { fgColDescriptors = list;}; public:; typedef structName* iterator;; className() : TTable(_QUOTE_(className),sizeof(structName)) {SetType(_QUOTE_(structName));}; className(const char *name) : TTable(name,sizeof(stru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTable.html:1954,Detect,Detector,1954,root/html534/TTable.html,https://root.cern,https://root.cern/root/html534/TTable.html,5,['Detect'],['Detector']
Safety,"t std::vector< Float_t > &) const;  Find cell that contains 'xvec' (in foam coordinates [0,1]). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::map< Int_t, Float_t > &) const;  Find all cells, that contain the coordinates specified in txvec. ;  ; void FindCells (const std::map< Int_t, Float_t > &, PDEFoamCell *, std::vector< PDEFoamCell * > &) const;  This is a helper function for std::vector<PDEFoamCell*> FindCells(...) and a generalisation of PDEFoamCell* FindCell(). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::vector< Float_t > &) const;  Find all cells, that contain txvec. ;  ; Double_t GetCellElement (const PDEFoamCell *cell, UInt_t i) const;  Returns cell element i of cell 'cell'. ;  ; PDEFoamDensityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html:15097,avoid,avoid,15097,doc/master/classTMVA_1_1PDEFoamEvent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html,1,['avoid'],['avoid']
Safety,"t std::vector< Float_t > &) const;  Find cell that contains 'xvec' (in foam coordinates [0,1]). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::map< Int_t, Float_t > &) const;  Find all cells, that contain the coordinates specified in txvec. ;  ; void FindCells (const std::map< Int_t, Float_t > &, PDEFoamCell *, std::vector< PDEFoamCell * > &) const;  This is a helper function for std::vector<PDEFoamCell*> FindCells(...) and a generalisation of PDEFoamCell* FindCell(). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::vector< Float_t > &) const;  Find all cells, that contain txvec. ;  ; Double_t GetCellElement (const PDEFoamCell *cell, UInt_t i) const;  Returns cell element i of cell 'cell'. ;  ; PDEFoamDensityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; SeparationBase * fSepType;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html:16241,avoid,avoid,16241,doc/master/classTMVA_1_1PDEFoamDecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html,1,['avoid'],['avoid']
Safety,"t std::vector< Float_t > &) const;  Find cell that contains 'xvec' (in foam coordinates [0,1]). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::map< Int_t, Float_t > &) const;  Find all cells, that contain the coordinates specified in txvec. ;  ; void FindCells (const std::map< Int_t, Float_t > &, PDEFoamCell *, std::vector< PDEFoamCell * > &) const;  This is a helper function for std::vector<PDEFoamCell*> FindCells(...) and a generalisation of PDEFoamCell* FindCell(). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::vector< Float_t > &) const;  Find all cells, that contain txvec. ;  ; Double_t GetCellElement (const PDEFoamCell *cell, UInt_t i) const;  Returns cell element i of cell 'cell'. ;  ; PDEFoamDensityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:15499,avoid,avoid,15499,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['avoid'],['avoid']
Safety,"t std::vector< Float_t > &) const;  Find cell that contains 'xvec' (in foam coordinates [0,1]). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::map< Int_t, Float_t > &) const;  Find all cells, that contain the coordinates specified in txvec. ;  ; void FindCells (const std::map< Int_t, Float_t > &, PDEFoamCell *, std::vector< PDEFoamCell * > &) const;  This is a helper function for std::vector<PDEFoamCell*> FindCells(...) and a generalisation of PDEFoamCell* FindCell(). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::vector< Float_t > &) const;  Find all cells, that contain txvec. ;  ; Double_t GetCellElement (const PDEFoamCell *cell, UInt_t i) const;  Returns cell element i of cell 'cell'. ;  ; PDEFoamDensityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ETargetSelection fTargetSelection;  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BAC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamMultiTarget.html:16860,avoid,avoid,16860,doc/master/classTMVA_1_1PDEFoamMultiTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamMultiTarget.html,1,['avoid'],['avoid']
Safety,"t std::vector< Float_t > &) const;  Find cell that contains 'xvec' (in foam coordinates [0,1]). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::map< Int_t, Float_t > &) const;  Find all cells, that contain the coordinates specified in txvec. ;  ; void FindCells (const std::map< Int_t, Float_t > &, PDEFoamCell *, std::vector< PDEFoamCell * > &) const;  This is a helper function for std::vector<PDEFoamCell*> FindCells(...) and a generalisation of PDEFoamCell* FindCell(). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::vector< Float_t > &) const;  Find all cells, that contain txvec. ;  ; Double_t GetCellElement (const PDEFoamCell *cell, UInt_t i) const;  Returns cell element i of cell 'cell'. ;  ; PDEFoamDensityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fClass;  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html:15278,avoid,avoid,15278,doc/master/classTMVA_1_1PDEFoamDiscriminant.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html,1,['avoid'],['avoid']
Safety,"t std::vector< Float_t > &) const;  Find cell that contains 'xvec' (in foam coordinates [0,1]). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::map< Int_t, Float_t > &) const;  Find all cells, that contain the coordinates specified in txvec. ;  ; void FindCells (const std::map< Int_t, Float_t > &, PDEFoamCell *, std::vector< PDEFoamCell * > &) const;  This is a helper function for std::vector<PDEFoamCell*> FindCells(...) and a generalisation of PDEFoamCell* FindCell(). ;  ; std::vector< TMVA::PDEFoamCell * > FindCells (const std::vector< Float_t > &) const;  Find all cells, that contain txvec. ;  ; Double_t GetCellElement (const PDEFoamCell *cell, UInt_t i) const;  Returns cell element i of cell 'cell'. ;  ; PDEFoamDensityBase * GetDistr () const;  ; void Grow ();  Internal subprogram used by Create. ;  ; void InitCells ();  Internal subprogram used by Create. ;  ; void MakeAlpha ();  Internal subprogram used by Create. ;  ; void OutputGrow (Bool_t finished=false);  Overridden function of PDEFoam to avoid native foam output. ;  ; Long_t PeekMax ();  Internal subprogram used by Create. ;  ; void SetCellElement (PDEFoamCell *cell, UInt_t i, Double_t value);  Set cell element i of cell to value. ;  ; template<typename T > ; T Sqr (T x) const;  ; void Varedu (Double_t[5], Int_t &, Double_t &, Double_t &);  Internal subprogram used by Create. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; UInt_t fTarget;  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILIT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html:15726,avoid,avoid,15726,doc/master/classTMVA_1_1PDEFoamTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html,1,['avoid'],['avoid']
Safety,"t this is a folder not just the title. You fill the tree by placing the data into the folder structure and calling TTree::Fill.; 12.7.2 Tree and TRef Objects; MyTree->BranchRef();; This call requests the construction of an optional branch supporting table of references (TRefTable). This branch (TBranchRef) will keep all the information needed to find the branches containing referenced objects at each Tree::Fill, the branch numbers containing the referenced objects are saved in the table of references. When the Tree header is saved (via TTree::Write for example), the branch is saved, keeping the information with the pointers to the branches having referenced objects. Enabling this optional table, allow TTree::Draw to automatically load the branches needed to dereference a TRef (or TRefArray) object.; 12.7.3 Autosave; Autosave gives the option to save all branch buffers every n byte. We recommend using Autosave for large acquisitions. If the acquisition fails to complete, you can recover the file and all the contents since the last Autosave. To set the number of bytes between Autosave you can use the TTree::SetAutosave() method. You can also call TTree::Autosave in the acquisition loop every nentry.; 12.7.4 Trees with Circular Buffers; When a TTree is memory resident, you set it up so that it retains retain only the last few entries. For example, this can be very useful for monitoring purpose.; void TTree::SetCircular(Long64_t maxEntries);; where maxEntries is the maximum number of entries to be kept in the buffers. When the number of entries exceeds this value, the first entries in the Tree are deleted and the buffers used again. An example of a script using a circular buffer is shown below:; void circular() {; gROOT->cd(); //make sure that the Tree is memory resident; TTree *T = new TTree(""T"",""test circular buffers"");; TRandom r;; Float_t px,py,pz;; Double_t random;; UShort_t i;; T->Branch(""px"",&px,""px/F"");; T->Branch(""py"",&py,""py/F"");; T->Branch(""pz"",&pz,""pz/F"");; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:532179,recover,recover,532179,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['recover'],['recover']
Safety,"t title; Double_tfTsumwTotal Sum of weights; Double_tfTsumw2Total Sum of squares of weights; Double_tfTsumwxTotal Sum of weight*X; Double_tfTsumwx2Total Sum of weight*X*X; TAxisfXaxisX axis descriptor; TAxisfYaxisY axis descriptor; TAxisfZaxisZ axis descriptor; static Bool_tfgAddDirectory!flag to add histograms to the directory; static Int_tfgBufferSize!default buffer size for automatic histograms; static Bool_tfgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tfgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH1(); Histogram default constructor. ~TH1(); Histogram default destructor. TH1(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup); Normal constructor for fix bin size histograms. Creates the main histogram structure:; name : name of histogram (avoid blanks); title : histogram title; if title is of the form ""stringt;stringx;stringy;stringz""; the histogram title is set to stringt,; the x axis title to stringy, the y axis title to stringy, etc.; nbins : number of bins; xlow : low edge of first bin; xup : upper edge of last bin (not included in last bin). When an histogram is created, it is automatically added to the list; of special objects in the current directory.; To find the pointer to this histogram in the current directory; by its name, do:; TH1F *h1 = (TH1F*)gDirectory->FindObject(name);. TH1(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins); Normal constructor for variable bin size histograms. Creates the main histogram structure:; name : name of histogram (avoid blanks); title : histogram title; if title is of the form ""stringt;stringx;stringy;stringz""; the histogram title is set to stringt,; the x axis title to stringx, the y axis title to stringy, etc.; nbins : number of bins; xbins : array of low-edges for each bin; This is an array of size nbins+1. TH1(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:40191,avoid,avoid,40191,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['avoid'],['avoid']
Safety,"t to avoid derefencing; 131 // the iterator all the time and redefine the 'address' of the; 132 // iterator as the iterator itself. This requires special handling; 133 // in the looper (see TStreamerInfoAction) but is much faster.; 134 template <typename T> struct Iterators<std::vector<T>, false> {; 135 typedef std::vector<T> Cont_t;; 136 typedef Cont_t *PCont_t;; 137 typedef typename Cont_t::iterator iterator;; 138 ; 139 static void create(void *coll, void **begin_arena, void **end_arena, TVirtualCollectionProxy*) {; 140 PCont_t c = PCont_t(coll);; 141 if (c->empty()) {; 142 *begin_arena = nullptr;; 143 *end_arena = nullptr;; 144 return;; 145 }; 146 *begin_arena = &(*c->begin());; 147#ifdef R__VISUAL_CPLUSPLUS; 148 *end_arena = &(*(c->end()-1)) + 1; // On windows we can not dererence the end iterator at all.; 149#else; 150 // coverity[past_the_end] Safe on other platforms; 151 *end_arena = &(*c->end());; 152#endif; 153 }; 154 static void* copy(void *dest, const void *source) {; 155 *(void**)dest = *(void**)(const_cast<void*>(source));; 156 return dest;; 157 }; 158 static void* next(void * /* iter_loc */, const void * /* end_loc */) {; 159 // Should not be used.; 160 // In the case of vector, so that the I/O can perform better,; 161 // the begin_arena and the end_arena are *not* set to the; 162 // address of any iterator rather they are set to the value of; 163 // the beginning (and end) address of the vector's data.; 164 // Hence this routine (which takes the value of fBegin) can; 165 // *not* update where its points to (which in the case of vector; 166 // would require update the value of fBegin).; 167 R__ASSERT(0 && ""Intentionally not implemented, do not use."");; 168 return nullptr;; 169 }; 170 static void destruct1(void * /* iter_ptr */) {; 171 // Nothing to do; 172 }; 173 static void destruct2(void * /* begin_ptr */, void * /* end_ptr */) {; 174 // Nothing to do; 175 }; 176 };; 177 ; 178 template <typename Cont_t> struct Iterators<Cont_t, /* large= */ true > {;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:5067,Safe,Safe,5067,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['Safe'],['Safe']
Safety,"t to the TStreamerInfo.; 995 if (oldcl); 996 oldcl->SetUnloaded();; 997 TClassTable::Remove(cname);; 998 }; 999}; 1000 ; 1001////////////////////////////////////////////////////////////////////////////////; 1002/// Global function to register the implementation file and line of; 1003/// a class template (i.e. NOT a concrete class).; 1004 ; 1005TNamed *ROOT::RegisterClassTemplate(const char *name, const char *file,; 1006 Int_t line); 1007{; 1008 static TList table;; 1009 static Bool_t isInit = []() {; 1010 table.SetOwner(kTRUE);; 1011 table.UseRWLock();; 1012 return true;; 1013 }();; 1014 (void)isInit;; 1015 ; 1016 TString classname(name);; 1017 Ssiz_t loc = classname.Index(""<"");; 1018 if (loc >= 1); 1019 classname.Remove(loc);; 1020 TNamed *reg = (TNamed*)table.FindObject(classname);; 1021 if (file) {; 1022 if (reg); 1023 reg->SetTitle(file);; 1024 else {; 1025 reg = new TNamed((const char*)classname, file);; 1026 table.Add(reg);; 1027 }; 1028 reg->SetUniqueID(line);; 1029 }; 1030 return reg;; 1031}; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Bool_tbool Bool_tDefinition RtypesCore.h:63; Version_tshort Version_tDefinition RtypesCore.h:65; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Short_tshort Short_tDefinition RtypesCore.h:39; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:101; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:124; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:100; Option_tconst char Option_tDefinition RtypesCore.h:66; DictFuncPtr_tTClass *(* DictFuncPtr_t)()Definition Rtypes.h:80; ClassImp#define ClassImp(name)Definition Rtypes.h:377; TClassEdit.h; GetClassTableMutexstatic std::mutex & GetClassTableMutex()Definition TClassTable.cxx:60; gClassTableTClassTable * gClassTableDefinition TClassTable.cxx:47; ClassCompstatic int ClassComp(const void *a, const void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClassTable_8cxx_source.html:33694,Safe,SafeDelete,33694,doc/v632/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClassTable_8cxx_source.html,2,['Safe'],['SafeDelete']
Safety,"t to the TStreamerInfo.; 995 if (oldcl); 996 oldcl->SetUnloaded();; 997 TClassTable::Remove(cname);; 998 }; 999}; 1000 ; 1001////////////////////////////////////////////////////////////////////////////////; 1002/// Global function to register the implementation file and line of; 1003/// a class template (i.e. NOT a concrete class).; 1004 ; 1005TNamed *ROOT::RegisterClassTemplate(const char *name, const char *file,; 1006 Int_t line); 1007{; 1008 static TList table;; 1009 static Bool_t isInit = []() {; 1010 table.SetOwner(kTRUE);; 1011 table.UseRWLock();; 1012 return true;; 1013 }();; 1014 (void)isInit;; 1015 ; 1016 TString classname(name);; 1017 Ssiz_t loc = classname.Index(""<"");; 1018 if (loc >= 1); 1019 classname.Remove(loc);; 1020 TNamed *reg = (TNamed*)table.FindObject(classname);; 1021 if (file) {; 1022 if (reg); 1023 reg->SetTitle(file);; 1024 else {; 1025 reg = new TNamed((const char*)classname, file);; 1026 table.Add(reg);; 1027 }; 1028 reg->SetUniqueID(line);; 1029 }; 1030 return reg;; 1031}; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; Bool_tbool Bool_tDefinition RtypesCore.h:63; Version_tshort Version_tDefinition RtypesCore.h:65; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Short_tshort Short_tDefinition RtypesCore.h:39; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; DictFuncPtr_tTClass *(* DictFuncPtr_t)()Definition Rtypes.h:85; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TClassEdit.h; GetClassTableMutexstatic std::mutex & GetClassTableMutex()Definition TClassTable.cxx:60; gClassTableTClassTable * gClassTableDefinition TClassTable.cxx:47; ClassCompstatic int ClassComp(const void *a, const void *b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:33695,Safe,SafeDelete,33695,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,2,['Safe'],['SafeDelete']
Safety,"t to the corresponding directory. TFile* pFile = new TFile(""passed.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyPassedHisto();; copy->SetDirectory(gDirectory);; pFile->Write();; TEfficiency::GetCopyPassedHistoTH1 * GetCopyPassedHisto() constReturns a cloned version of fPassedHistogram.Definition TEfficiency.cxx:2617; TH1::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default, when a histogram is created, it is added to the list of histogram objects in the current ...Definition TH1.cxx:8937. Definition at line 2617 of file TEfficiency.cxx. ◆ GetCopyTotalHisto(). TH1 * TEfficiency::GetCopyTotalHisto ; (; ); const. Returns a cloned version of fTotalHistogram. ; Notes:; The histogram is filled with unit weights. You might want to scale it with the global weight GetWeight().; The returned object is owned by the user who has to care about the deletion of the new TH1 object.; This histogram is by default NOT attached to the current directory to avoid duplication of data. If you want to store it automatically during the next TFile::Write() command, you have to attach it to the corresponding directory. TFile* pFile = new TFile(""total.root"",""update"");; TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; TH1* copy = pEff->GetCopyTotalHisto();; copy->SetDirectory(gDirectory);; pFile->Write();. Definition at line 2647 of file TEfficiency.cxx. ◆ GetDimension(). Int_t TEfficiency::GetDimension ; (; ); const. returns the dimension of the current TEfficiency object ; Definition at line 2659 of file TEfficiency.cxx. ◆ GetDirectory(). TDirectory * TEfficiency::GetDirectory ; (; ); const. inline . Definition at line 116 of file TEfficiency.h. ◆ GetEfficiency(). Double_t TEfficiency::GetEfficiency ; (; Int_t ; bin); const. Returns the efficiency in the given global bin. ; Note:; The estimated efficiency depends on the chosen statistic option: for frequentist ones: \( \hat{\varepsilon} = \frac{passed}{total}",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency.html:95013,avoid,avoid,95013,doc/master/classTEfficiency.html,https://root.cern,https://root.cern/doc/master/classTEfficiency.html,1,['avoid'],['avoid']
Safety,"t tx) {; 354 ; 355 /*; 356 Computation of p-values according to ; 357 ""K-Sample Anderson-Darling Tests"" by F.W. Scholz ; 358 and M.A. Stephens (1987), Journal of the American Statistical Association, ; 359 Vol 82, No. 399, pp 918-924.; 360 Code from kSamples package from R (author F. Scholtz); 361 ; 362 This function uses the upper T_m quantiles as obtained via simulation of; 363 the Anderson-Darling test statistics (Nsim = 2*10^6) with sample sizes n=500; 364 for each sample, and after standardization, in order to emulate the Table 1 ; 365 values given in the above reference. However, here we estimate p-quantiles; 366 for p = .00001,.00005,.0001,.0005,.001,.005,.01,.025,.05,.075,; 367 .1,.2,.3,.4,.5,.6,.7,.8,.9,.925,.95,.975,.99,.9925,.995,.9975,.999,; 368 .99925,.9995,.99975,.9999,.999925,.99995,.999975,.99999; 369 First the appropriate p-quantiles are determined from those simulated; 370 for ms = 1,2,3,4,6,8,10, Inf, interpolating to the given value of m. ; 371 Since we use only m=2 we avoid this interpolation. ; 372 ; 373 Next linear inetrpolation to find the observed p value given the observed test statistic value. ; 374 We use interpolation in the test statistic -> log((1-p)/p) domain; 375 and we extrapolatelinearly) beyond p = .00001 and .99999.; 376 */; 377 ; 378 // sample values ; 379 //double ms[] = { 1, 2, 3, 4, 6, 8, 10, TMath::Infinity() };; 380 //int ns = ms.size();; 381 const int ns = 8;; 382 double ts[ ] = { -1.1954, -1.5806, -1.8172, ; 383 -2.0032, -2.2526, -2.4204, -2.5283, -4.2649, -1.1786, -1.5394, ; 384 -1.7728, -1.9426, -2.1685, -2.3288, -2.4374, -3.8906, -1.166, ; 385 -1.5193, -1.7462, -1.9067, -2.126, -2.2818, -2.3926, -3.719, ; 386 -1.1407, -1.4659, -1.671, -1.8105, -2.0048, -2.1356, -2.2348, ; 387 -3.2905, -1.1253, -1.4371, -1.6314, -1.7619, -1.9396, -2.0637, ; 388 -2.1521, -3.0902, -1.0777, -1.3503, -1.5102, -1.6177, -1.761, ; 389 -1.8537, -1.9178, -2.5758, -1.0489, -1.2984, -1.4415, -1.5355, ; 390 -1.6625, -1.738, -1.7936, -2.3263, -0.9978",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:13029,avoid,avoid,13029,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['avoid'],['avoid']
Safety,"t value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; TClass * IsA () const override;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNormalizedPdf.html:10061,safe,safely,10061,doc/master/classRooNormalizedPdf.html,https://root.cern,https://root.cern/doc/master/classRooNormalizedPdf.html,1,['safe'],['safely']
Safety,"t vertex of a corner according to visibility flags. void Sizeof3D() const; fill size of this 3-D object. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoTrd2(); methods; constructors. Int_t GetByteCount() const; {return 56;}. Double_t GetDx1() const; {return fDx1;}. Double_t GetDx2() const; {return fDx2;}. Double_t GetDy1() const; {return fDy1;}. Double_t GetDy2() const; {return fDy2;}. Double_t GetDz() const; {return fDz;}. Bool_t IsCylType() const; {return kFALSE;}. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd2.html:17222,safe,safe,17222,root/html534/TGeoTrd2.html,https://root.cern,https://root.cern/root/html534/TGeoTrd2.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"t vertex of a corner according to visibility flags. void Sizeof3D() const; fill size of this 3-D object. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoTrd2(); methods; constructors. Int_t GetByteCount() const; {return 56;}. Double_t GetDx1() const; {return fDx1;}. Double_t GetDx2() const; {return fDx2;}. Double_t GetDy1() const; {return fDy1;}. Double_t GetDy2() const; {return fDy2;}. Double_t GetDz() const; {return fDz;}. Bool_t IsCylType() const; {return kFALSE;}. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTrd2.html:18976,safe,safe,18976,root/html604/TGeoTrd2.html,https://root.cern,https://root.cern/root/html604/TGeoTrd2.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"t vertex of a corner according to visibility flags. void Sizeof3D() const; fill size of this 3-D object. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoTrd2(); methods; constructors. Int_t GetByteCount() const; {return 56;}. Double_t GetDx1() const; {return fDx1;}. Double_t GetDx2() const; {return fDx2;}. Double_t GetDy1() const; {return fDy1;}. Double_t GetDy2() const; {return fDy2;}. Double_t GetDz() const; {return fDz;}. Bool_t IsCylType() const; {return kFALSE;}. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTrd2.html:18976,safe,safe,18976,root/html602/TGeoTrd2.html,https://root.cern,https://root.cern/root/html602/TGeoTrd2.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"t with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2); 2: Safety test. Sample points inside the bounding and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; Distance to boundary is bigger than safety. void ShapeDistances(TGeoShape* shape, Int_t nsamples, Option_t* option); Test TGeoShape::DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute d1 = DistFromInside and move the; point on the boundary. Compute DistFromOutside and propagate with d2 making sure that; the shape is not re-entered. Swap direction and call DistFromOutside that; should fall back on the same point on the boundary (at d2). Propagate back on boundary; then compute DistFromInside that should be bigger than d1.; Plot d-(d1+d2). void ShapeSafety(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of safe distance for a given shape.; Sample points inside the 2x bounding box and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; distance to boundary is bigger than safety. void ShapeNormal(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of the normal for a given shape.; Sample points inside the shape. Generate directions randomly in cos(theta); and propagate to boundary. Compute normal and safety at crossing point, plot; the point and generate a random direction so that (dir) dot (norm) <0. TH2F * LegoPlot(Int_t ntheta = 60, Double_t themin = 0., Double_t themax = 180., Int_t nphi = 90, Double_t phimin = 0., Double_t phimax = 360., Double_t rmin = 0., Double_t rmax = 9999999, Option_t* option = """"); Generate a lego plot fot the top volume, according to option. void RandomPoints(TGeoVolume* vol, Int_t npoints, Option_t* option); Draw random points in the bounding box of a volume. void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz); Randomly sho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoChecker.html:15794,safe,safety,15794,root/html530/TGeoChecker.html,https://root.cern,https://root.cern/root/html530/TGeoChecker.html,2,['safe'],['safety']
Safety,"t with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2); 2: Safety test. Sample points inside the bounding and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; Distance to boundary is bigger than safety. void ShapeDistances(TGeoShape* shape, Int_t nsamples, Option_t* option); Test TGeoShape::DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute d1 = DistFromInside and move the; point on the boundary. Compute DistFromOutside and propagate with d2 making sure that; the shape is not re-entered. Swap direction and call DistFromOutside that; should fall back on the same point on the boundary (at d2). Propagate back on boundary; then compute DistFromInside that should be bigger than d1.; Plot d-(d1+d2). void ShapeSafety(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of safe distance for a given shape.; Sample points inside the 2x bounding box and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; distance to boundary is bigger than safety. void ShapeNormal(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of the normal for a given shape.; Sample points inside the shape. Generate directions randomly in cos(theta); and propagate to boundary. Compute normal and safety at crossing point, plot; the point and generate a random direction so that (dir) dot (norm) <0. TH2F * LegoPlot(Int_t ntheta = 60, Double_t themin = 0., Double_t themax = 180., Int_t nphi = 90, Double_t phimin = 0., Double_t phimax = 360., Double_t rmin = 0., Double_t rmax = 9999999, Option_t* option = """"); Generate a lego plot fot the top volume, according to option. void RandomPoints(TGeoVolume* vol, Int_t npoints, Option_t* option); Draw random points in the bounding box of a volume. void RandomRays(Int_t nrays, Double_t startx, Double_t starty, Double_t startz, const char* t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoChecker.html:15913,safe,safety,15913,root/html534/TGeoChecker.html,https://root.cern,https://root.cern/root/html534/TGeoChecker.html,3,['safe'],['safety']
Safety,"t zero=0);  Divide entries of two vectors. ;  . Private Attributes; Class members; Int_t fNdim;  ! Truth and reconstructed dimensions ;  ; Int_t fDdim;  ! Derivative for curvature matrix ;  ; Bool_t fNormalize;  ! Normalize unfolded spectrum to 1 ;  ; Int_t fKReg;  ! Regularisation parameter ;  ; TH1D * fDHist;  ! Distribution of d (for checking regularization) ;  ; TH1D * fSVHist;  ! Distribution of singular values ;  ; TH2D * fXtau;  ! Computed regularized covariance matrix ;  ; TH2D * fXinv;  ! Computed inverse of covariance matrix ;  ; Input histos; const TH1D * fBdat;  Measured distribution (data) ;  ; TH2D * fBcov;  Covariance matrix of measured distribution (data) ;  ; const TH1D * fBini;  Reconstructed distribution (MC) ;  ; const TH1D * fXini;  Truth distribution (MC) ;  ; const TH2D * fAdet;  Detector response matrix. ;  ; Evaluation of covariance matrices; TH1D * fToyhisto;  ! Toy MC histogram ;  ; TH2D * fToymat;  ! Toy MC detector response matrix ;  ; Bool_t fToyMode;  ! Internal switch for covariance matrix propagation ;  ; Bool_t fMatToyMode;  ! Internal switch for evaluation of statistical uncertainties from response matrix ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int leve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVDUnfold.html:16291,detect,detector,16291,doc/master/classTSVDUnfold.html,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html,1,['detect'],['detector']
Safety,"t().getBinary();; 7183 ; 7184 std::set<string> DedupSet;; 7185 std::string Result = lib + ' ';; 7186 for (const auto &S : BinObjFile->symbols()) {; 7187 uint32_t Flags = llvm::cantFail(S.getFlags());; 7188 // Skip defined symbols: we have them.; 7189 if (!(Flags & llvm::object::SymbolRef::SF_Undefined)); 7190 continue;; 7191 // Skip undefined weak symbols: if we don't have them we won't need them.; 7192 // `__gmon_start__` being a typical example.; 7193 if (Flags & llvm::object::SymbolRef::SF_Weak); 7194 continue;; 7195 llvm::Expected<StringRef> SymNameErr = S.getName();; 7196 if (!SymNameErr) {; 7197 Warning(""GetSharedLibDepsForModule"", ""Failed to read symbol"");; 7198 continue;; 7199 }; 7200 llvm::StringRef SymName = SymNameErr.get();; 7201 if (SymName.empty()); 7202 continue;; 7203 ; 7204 if (BinObjFile->isELF()) {; 7205 // Skip the symbols which are part of the C/C++ runtime and have a; 7206 // fixed library version. See binutils ld VERSION. Those reside in; 7207 // 'system' libraries, which we avoid in FindLibraryForSymbol.; 7208 if (SymName.contains(""@GLIBCXX"") || SymName.contains(""@CXXABI"") ||; 7209 SymName.contains(""@GLIBC"") || SymName.contains(""@GCC"")); 7210 continue;; 7211 ; 7212 // Those are 'weak undefined' symbols produced by gcc. We can; 7213 // ignore them.; 7214 // FIXME: It is unclear whether we can ignore all weak undefined; 7215 // symbols:; 7216 // http://lists.llvm.org/pipermail/llvm-dev/2017-October/118177.html; 7217 static constexpr llvm::StringRef RegisterClasses(""_Jv_RegisterClasses"");; 7218 static constexpr llvm::StringRef RegisterCloneTable(""_ITM_registerTMCloneTable"");; 7219 static constexpr llvm::StringRef DeregisterCloneTable(""_ITM_deregisterTMCloneTable"");; 7220 if (SymName == RegisterClasses ||; 7221 SymName == RegisterCloneTable ||; 7222 SymName == DeregisterCloneTable); 7223 continue;; 7224 }; 7225 ; 7226 // If we can find the address of the symbol, we have loaded it. Skip.; 7227 if (skipLoadedLibs) {; 7228 std::string SymNameForDlsym",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:281866,avoid,avoid,281866,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['avoid'],['avoid']
Safety,"t(Option_t* option); Paint method. TGeoIntersection(); Default constructor. TGeoIntersection(const char* expr1, const char* expr2); Constructor. TGeoIntersection(TGeoShape* left, TGeoShape* right, TGeoMatrix* lmat = 0, TGeoMatrix* rmat = 0); Constructor providing pointers to components. ~TGeoIntersection(); Destructor; --- deletion of components handled by TGeoManager class. void ComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); Compute bounding box corresponding to a intersection of two shapes. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. Bool_t Contains(const Double_t* point) const; Find if a intersection of two shapes contains a given point. Int_t DistanceToPrimitive(Int_t px, Int_t py); Compute minimum distance to shape vertices. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point inside to the shape boundary. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point outside to the shape. Int_t GetNpoints(); Returns number of vertices for the composite shape described by this intersection. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; Compute safety distance for a union node;. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void Sizeof3D() const; Register 3D size of this shape. EGeoBoolType GetBooleanOperator() const. » Author: Andrei Gheata 30/05/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoIntersection.html:9593,safe,safe,9593,root/html534/TGeoIntersection.html,https://root.cern,https://root.cern/root/html534/TGeoIntersection.html,3,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"t);; 1209 TFileHandler *h = nullptr;; 1210 while ((h = (TFileHandler *) next())) {; 1211 Int_t fd = h->GetFd();; 1212 if (fd > -1) {; 1213 if (h->HasReadInterest()) {; 1214 rd.Set(fd);; 1215 mxfd = TMath::Max(mxfd, fd);; 1216 }; 1217 if (h->HasWriteInterest()) {; 1218 wr.Set(fd);; 1219 mxfd = TMath::Max(mxfd, fd);; 1220 }; 1221 h->ResetReadyMask();; 1222 }; 1223 }; 1224 if (mxfd > -1); 1225 rc = UnixSelect(mxfd+1, &rd, &wr, to);; 1226 ; 1227 // Set readiness bits; 1228 if (rc > 0) {; 1229 next.Reset();; 1230 while ((h = (TFileHandler *) next())) {; 1231 Int_t fd = h->GetFd();; 1232 if (rd.IsSet(fd)); 1233 h->SetReadReady();; 1234 if (wr.IsSet(fd)); 1235 h->SetWriteReady();; 1236 }; 1237 }; 1238 ; 1239 return rc;; 1240}; 1241 ; 1242////////////////////////////////////////////////////////////////////////////////; 1243/// Select on the file descriptor related to file handler h.; 1244/// The timeout to is in millisec. Returns the number of ready descriptors,; 1245/// or 0 in case of timeout, or < 0 in case of an error, with -2 being EINTR; 1246/// and -3 EBADF. In case of EINTR the errno has been reset and the method; 1247/// can be called again. Returns -4 in case the file handler is 0 or does; 1248/// not have a file descriptor >= 0.; 1249 ; 1250Int_t TUnixSystem::Select(TFileHandler *h, Long_t to); 1251{; 1252 Int_t rc = -4;; 1253 ; 1254 TFdSet rd, wr;; 1255 Int_t mxfd = -1;; 1256 Int_t fd = -1;; 1257 if (h) {; 1258 fd = h->GetFd();; 1259 if (fd > -1) {; 1260 if (h->HasReadInterest()); 1261 rd.Set(fd);; 1262 if (h->HasWriteInterest()); 1263 wr.Set(fd);; 1264 h->ResetReadyMask();; 1265 mxfd = fd;; 1266 rc = UnixSelect(mxfd+1, &rd, &wr, to);; 1267 }; 1268 }; 1269 ; 1270 // Fill output lists, if required; 1271 if (rc > 0) {; 1272 if (rd.IsSet(fd)); 1273 h->SetReadReady();; 1274 if (wr.IsSet(fd)); 1275 h->SetWriteReady();; 1276 }; 1277 ; 1278 return rc;; 1279}; 1280 ; 1281//---- handling of system events -----------------------------------------------; 1282 ; 1283///////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:38129,timeout,timeout,38129,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['timeout'],['timeout']
Safety,"t);; 4089 if (reload || name.empty()) {; 4090 // We could not generate the alternate; 4091 SetWithoutClassInfoState(cl);; 4092 return;; 4093 }; 4094 }; 4095 ; 4096 bool instantiateTemplate = !cl->TestBit(TClass::kUnloading);; 4097 // FIXME: Rather than adding an option to the TClingClassInfo, we should consider combining code; 4098 // that is currently in the caller (like SetUnloaded) that disable AutoLoading and AutoParsing and; 4099 // code is in the callee (disabling template instantiation) and end up with a more explicit class:; 4100 // TClingClassInfoReadOnly.; 4101 TClingClassInfo* info = new TClingClassInfo(GetInterpreterImpl(), name.c_str(), instantiateTemplate);; 4102 if (!info->IsValid()) {; 4103 SetWithoutClassInfoState(cl);; 4104 delete info;; 4105 return;; 4106 }; 4107 cl->fClassInfo = (ClassInfo_t*)info; // Note: We are transferring ownership here.; 4108 // In case a class contains an external enum, the enum will be seen as a; 4109 // class. We must detect this special case and make the class a Zombie.; 4110 // Here we assume that a class has at least one method.; 4111 // We can NOT call TClass::Property from here, because this method; 4112 // assumes that the TClass is well formed to do a lot of information; 4113 // caching. The method SetClassInfo (i.e. here) is usually called during; 4114 // the building phase of the TClass, hence it is NOT well formed yet.; 4115 Bool_t zombieCandidate = kFALSE;; 4116 if (; 4117 info->IsValid() &&; 4118 !(info->Property() & (kIsClass | kIsStruct | kIsNamespace)); 4119 ) {; 4120 zombieCandidate = kTRUE;; 4121 }; 4122 if (!info->IsLoaded()) {; 4123 if (info->Property() & (kIsNamespace)) {; 4124 // Namespaces can have info but no corresponding CINT dictionary; 4125 // because they are auto-created if one of their contained; 4126 // classes has a dictionary.; 4127 zombieCandidate = kTRUE;; 4128 }; 4129 // this happens when no dictionary is available; 4130 delete info;; 4131 cl->fClassInfo = nullptr;; 4132 }; 4133 if (zo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:158899,detect,detect,158899,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['detect'],['detect']
Safety,"t)skeys;; 792 }; 793 if (versiondir > 1) fUUID.ReadBuffer(buffer);; 794 ; 795 //*-*---------read TKey::FillBuffer info; 796 buffer_keyloc += sizeof(Int_t); // Skip NBytes;; 797 Version_t keyversion;; 798 frombuf(buffer_keyloc, &keyversion);; 799 // Skip ObjLen, DateTime, KeyLen, Cycle, SeekKey, SeekPdir; 800 if (keyversion > 1000) {; 801 // Large files; 802 buffer_keyloc += 2*sizeof(Int_t)+2*sizeof(Short_t)+2*sizeof(Long64_t);; 803 } else {; 804 buffer_keyloc += 2*sizeof(Int_t)+2*sizeof(Short_t)+2*sizeof(Int_t);; 805 }; 806 TString cname;; 807 cname.ReadBuffer(buffer_keyloc);; 808 cname.ReadBuffer(buffer_keyloc); // fName.ReadBuffer(buffer); file may have been renamed; 809 fTitle.ReadBuffer(buffer_keyloc);; 810 delete [] header;; 811 if (fNbytesName < 10 || fNbytesName > 10000) {; 812 Error(""Init"",""cannot read directory info of file %s"", GetName());; 813 goto zombie;; 814 }; 815 ; 816 //*-* -------------Check if file is truncated; 817 Long64_t size;; 818 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy warnings; 819 Error(""Init"", ""cannot stat the file %s"", GetName());; 820 goto zombie;; 821 }; 822 ; 823 //*-* -------------Check if, in case of inconsistencies, we are requested to; 824 //*-* -------------attempt recovering the file; 825 Bool_t tryrecover = (gEnv->GetValue(""TFile.Recover"", 1) == 1) ? kTRUE : kFALSE;; 826 ; 827 //*-* -------------Check if we need to enable forward compatible with version; 828 //*-* -------------prior to v6.30; 829 if (gEnv->GetValue(""TFile.v630forwardCompatibility"", 0) == 1); 830 SetBit(k630forwardCompatibility);; 831 ; 832 //*-* -------------Read keys of the top directory; 833 if (fSeekKeys > fBEGIN && fEND <= size) {; 834 //normal case. Recover only if file has no keys; 835 TDirectoryFile::ReadKeys(kFALSE);; 836 gDirectory = this;; 837 if (!GetNkeys()) {; 838 if (tryrecover) {; 839 Recover(); // NOLINT: silence clang-tidy warnings; 840 } else {; 841 Error(""Init"", ""file %s has no keys"", GetName());; 842 goto zombie;; 843 }",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:30079,recover,recovering,30079,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['recover'],['recovering']
Safety,"t){; 670 if (fCurrent->Enter(localentry)) {; 671 if (fLists); 672 fN++;; 673 return true;; 674 }; 675 }; 676 }; 677 return false;; 678 ; 679}; 680 ; 681bool TEntryList::Enter(Long64_t localentry, const char *treename, const char *filename); 682{; 683 SetTree(treename, filename);; 684 if (fCurrent) {; 685 if (fCurrent->Enter(localentry)) {; 686 if (fLists); 687 fN++;; 688 return true;; 689 }; 690 }; 691 return false;; 692}; 693 ; 694/////////////////////////////////////////////////////////////////////////////; 695/// \brief Enter all entries in a range in the TEntryList.; 696/// \param[in] start starting entry to enter.; 697/// \param[in] end ending entry to enter.; 698/// \param[in] tree passed as is to TEntryList::Enter.; 699/// \param[in] step step increase of the loop entering the entries.; 700///; 701/// This is a helper function that enters all entries between \p start; 702/// (inclusive) and \p end (exclusive) to the TEntryList in a loop. It; 703/// is useful also in PyROOT to avoid having to do the same in a Python loop.; 704 ; 705void TEntryList::EnterRange(Long64_t start, Long64_t end, TTree *tree, UInt_t step); 706{; 707 for (auto entry = start; entry < end; entry += step) {; 708 this->Enter(entry, tree);; 709 }; 710}; 711 ; 712////////////////////////////////////////////////////////////////////////////////; 713/// Remove entry \#entry from the list; 714/// - When tree = 0, removes from the current list; 715/// - When tree != 0, finds the list, corresponding to this tree; 716/// - When tree is a chain, the entry is assumed to be global index and the local; 717/// entry is recomputed from the treeoffset information of the chain; 718 ; 719bool TEntryList::Remove(Long64_t entry, TTree *tree); 720{; 721 if (entry < 0); 722 return false;; 723 if (!tree) {; 724 if (!fLists) {; 725 if (!fBlocks) return false;; 726 TEntryListBlock *block = nullptr;; 727 Long64_t nblock = entry/kBlockSize;; 728 block = (TEntryListBlock*)fBlocks->UncheckedAt(nblock);; 729 if (!block)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEntryList_8cxx_source.html:23815,avoid,avoid,23815,doc/master/TEntryList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEntryList_8cxx_source.html,1,['avoid'],['avoid']
Safety,"t* local) const; Convert the point coordinates from mother reference to local reference system. void MasterToLocalVect(const Double_t* master, Double_t* local) const; Convert a vector from mother reference to local reference system. void LocalToMaster(const Double_t* local, Double_t* master) const; Convert the point coordinates from local reference system to mother reference. void LocalToMasterVect(const Double_t* local, Double_t* master) const; Convert a vector from local reference system to mother reference. void ls(Option_t* option = """") const; Print the path (A/B/C/...) to this node on stdout. void Paint(Option_t* option = """"); Paint this node and its content according to visualization settings. void PrintCandidates() const; print daughters candidates for containing current point; cd();. void PrintOverlaps() const; print possible overlapping nodes; if (!IsOverlapping()) {printf(""node %s is ONLY\n"", GetName()); return;}. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape. void SetOverlaps(Int_t* ovlp, Int_t novlp); set the list of overlaps for this node (ovlp must be created with operator new). void SetVisibility(Bool_t vis = kTRUE); Set visibility of the node (obsolete). void VisibleDaughters(Bool_t vis = kTRUE); Set visibility of the daughters (obsolete). void cd() const; {;}. Int_t GetByteCount() const; {return 44;}. TGeoNode * GetDaughter(Int_t ind) const; {return fVolume->GetNode(ind);}. TGeoMatrix * GetMatrix() const. Int_t GetColour() const; {return fVolume->GetLineColor();}. Int_t GetIndex() const; {return 0;}. TGeoPatternFinder * GetFinder() const; {return 0;}. TGeoMedium * GetMedium() const; {return fVolume->GetMedium();}. TGeoVolume * GetMotherVolume() const; {return fMother;}. Int_t GetNdaughters() const; {return fVolume->GetNdaughters();}. TObjArray * GetNodes() const; {return fVolume->GetNodes();}. Int_t GetNumber() const; {return fNumber;}. Int_t * GetOverlaps(Int_t& novlp) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNode.html:16416,Safe,Safety,16416,root/html534/TGeoNode.html,https://root.cern,https://root.cern/root/html534/TGeoNode.html,3,['Safe'],['Safety']
Safety,"t* out); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. void HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. void HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; prioroty is a number (0 - 100) determined by a scheduler (third; party process) based on some basic priority the group has, e.g.; we might want to give users in a specific grou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:26714,abort,abort,26714,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,2,['abort'],"['abort', 'aborts']"
Safety,"t* qr); virtual voidTProofPlayer::RemoveQueryResult(const char* ref); voidTObject::ResetBit(UInt_t f); virtual voidTProofPlayer::RestorePreviousQuery(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerLite.html:10522,abort,abort,10522,root/html528/TProofPlayerLite.html,https://root.cern,https://root.cern/root/html528/TProofPlayerLite.html,4,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"t, Bool_t in = kTRUE) const; Computes the closest distance from given point to this shape. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set all arb8 params in one step.; param[0] = dz; param[1] = theta; param[2] = phi; param[3] = h1; param[4] = bl1; param[5] = tl1; param[6] = alpha1; param[7] = h2; param[8] = bl2; param[9] = tl2; param[10] = alpha2. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoArb8& operator=(const TGeoTrap& ). TGeoTrap(); constructors. Double_t GetTheta() const; {return fTheta;}. Double_t GetPhi() const; {return fPhi;}. Double_t GetH1() const; {return fH1;}. Double_t GetBl1() const; {return fBl1;}. Double_t GetTl1() const; {return fTl1;}. Double_t GetAlpha1() const; {return fAlpha1;}. Double_t GetH2() const; {return fH2;}. Double_t GetBl2() const; {return fBl2;}. Double_t GetTl2() const; {return fTl2;}. Double_t GetAlpha2() const; {return fAlpha2;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTrap.html:19546,safe,safe,19546,root/html604/TGeoTrap.html,https://root.cern,https://root.cern/root/html604/TGeoTrap.html,2,['safe'],['safe']
Safety,"t, Bool_t in = kTRUE) const; Computes the closest distance from given point to this shape. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetDimensions(Double_t* param); Set all arb8 params in one step.; param[0] = dz; param[1] = theta; param[2] = phi; param[3] = h1; param[4] = bl1; param[5] = tl1; param[6] = alpha1; param[7] = h2; param[8] = bl2; param[9] = tl2; param[10] = alpha2. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoArb8& operator=(const TGeoTrap& ). TGeoTrap(); constructors. Double_t GetTheta() const; {return fTheta;}. Double_t GetPhi() const; {return fPhi;}. Double_t GetH1() const; {return fH1;}. Double_t GetBl1() const; {return fBl1;}. Double_t GetTl1() const; {return fTl1;}. Double_t GetAlpha1() const; {return fAlpha1;}. Double_t GetH2() const; {return fH2;}. Double_t GetBl2() const; {return fBl2;}. Double_t GetTl2() const; {return fTl2;}. Double_t GetAlpha2() const; {return fAlpha2;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTrap.html:19546,safe,safe,19546,root/html602/TGeoTrap.html,https://root.cern,https://root.cern/root/html602/TGeoTrap.html,2,['safe'],['safe']
Safety,"t, Double_t* dir, Double_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoShapeAssembly&operator=(const TGeoShapeAssembly&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidRecomputeBoxLast(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoShapeAssembly.html:7384,Safe,SafetyPhi,7384,root/html528/TGeoShapeAssembly.html,https://root.cern,https://root.cern/root/html528/TGeoShapeAssembly.html,1,['Safe'],['SafetyPhi']
Safety,"t, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSlave.html:11361,abort,abort,11361,root/html602/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSlave.html,1,['abort'],['abort']
Safety,"t, std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > &nets, TString layerString, TString delim);  Pases the layer string and creates the appropriate max pool layer. ;  ; template<typename Architecture_t , typename Layer_t > ; void ParseRecurrentLayer (ERecurrentLayerType type, DNN::TDeepNet< Architecture_t, Layer_t > &deepNet, std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > &nets, TString layerString, TString delim);  Pases the layer string and creates the appropriate rnn layer. ;  ; template<typename Architecture_t , typename Layer_t > ; void ParseReshapeLayer (DNN::TDeepNet< Architecture_t, Layer_t > &deepNet, std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > &nets, TString layerString, TString delim);  Pases the layer string and creates the appropriate reshape layer. ;  ; template<typename Architecture_t > ; std::vector< Double_t > PredictDeepNet (Long64_t firstEvt, Long64_t lastEvt, size_t batchSize, Bool_t logProgress);  perform prediction of the deep neural network using batches (called by GetMvaValues) ;  ; void ProcessOptions ();  ; template<typename Architecture_t > ; void TrainDeepNet ();  train of deep neural network using the defined architecture ;  . Private Attributes; TString fArchitectureString;  The string defining the architecture: CPU or GPU. ;  ; size_t fBatchDepth;  The depth of the batch used to train the deep net. ;  ; size_t fBatchHeight;  The height of the batch used to train the deep net. ;  ; TString fBatchLayoutString;  The string defining the layout of the batch. ;  ; size_t fBatchWidth;  The width of the batch used to train the deep net. ;  ; bool fBuildNet;  Flag to control whether to build fNet, the stored network used for the evaluation. ;  ; TString fErrorStrategy;  The string defining the error strategy for training. ;  ; TString fInputLayoutString;  The string defining the layout of the input. ;  ; std::vector< size_t > fInputShape;  Contains the batch size (no. ;  ; TString fLayoutString;  The string defining t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:30928,Predict,PredictDeepNet,30928,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,2,"['Predict', 'predict']","['PredictDeepNet', 'prediction']"
Safety,"t. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ;  ; virtual ~TSocket ();  ; virtual void Close (Option_t *opt="""");  Close the socket. ;  ; UInt_t GetBytesRecv () const;  ; UInt_t GetBytesSent () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; virtual Int_t GetDescriptor () const;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetInetAddress () const;  ; TTimeStamp GetLastUsage ();  ; virtual Int_t GetOption (ESockOptions opt, Int_t &val);  Get socket options. Returns -1 in case of error. ;  ; Int_t GetPort () const;  ; Int_t GetRemoteProtocol () const;  ; TSecContext * GetSecContext () const;  ; const char * GetService () const;  ; Int_t GetServType () const;  ; Int_t GetTcpWindowSize () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsAuthenticated () const;  ; virtual Bool_t IsValid () const;  ; virtual Int_t Reconnect ();  ; virtual Int_t Select (Int_t interest=kRead, Long_t timeout=-1);  Waits for this socket to change status. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; virtual Int_t SetOption (ESockOptions opt, Int_t val);  Set socket options. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetService (const char *service);  ; void SetServType (Int_t st);  ; void SetUrl (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPServerSocket.html:4685,timeout,timeout,4685,doc/master/classTPServerSocket.html,https://root.cern,https://root.cern/doc/master/classTPServerSocket.html,2,['timeout'],['timeout']
Safety,"t. inline . Definition at line 73 of file TGeoPara.h. ◆ GetTyz(). Double_t TGeoPara::GetTyz ; (; ); const. inline . Definition at line 74 of file TGeoPara.h. ◆ GetX(). Double_t TGeoPara::GetX ; (; ); const. inline . Definition at line 66 of file TGeoPara.h. ◆ GetY(). Double_t TGeoPara::GetY ; (; ); const. inline . Definition at line 67 of file TGeoPara.h. ◆ GetZ(). Double_t TGeoPara::GetZ ; (; ); const. inline . Definition at line 68 of file TGeoPara.h. ◆ InspectShape(). void TGeoPara::InspectShape ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ IsA(). TClass * TGeoPara::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBBox.; Definition at line 85 of file TGeoPara.h. ◆ IsCylType(). Bool_t TGeoPara::IsCylType ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 76 of file TGeoPara.h. ◆ operator=(). TGeoPara & TGeoPara::operator= ; (; const TGeoPara & ; ). protecteddelete . ◆ Safety(). Double_t TGeoPara::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Safety_v(). void TGeoPara::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SavePrimitive(). void TGeoPara::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetDimensions(). void TGeoPara::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [1/2]. void TGeoPara::SetPoints ; (; Double_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoPara::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Sizeof3D(). void TGeoPara::Sizeof3D ; (; ); const. overridevirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPara.html:28219,Safe,Safety,28219,doc/master/classTGeoPara.html,https://root.cern,https://root.cern/doc/master/classTGeoPara.html,1,['Safe'],['Safety']
Safety,"t. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionQueryFrame.html:23016,abort,aborted,23016,root/html602/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html602/TSessionQueryFrame.html,2,['abort'],['aborted']
Safety,"t.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check for new-style empty pcm with key named “EMPTY” created since commit 90047b0cba6fd295f5c5722749a0d043fbc11ea5.; Do not insert macro definition of ROOTCLING into the pch. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258; Fix detection of errors that appears in nested TTreeFormula ROOT-8218; Avoid autoparse looking for default constructor in TTreeCloner::CopyStreamerInfos(). Bugs fixed in this release. [ROOT-6753] - PROOF-Lite doesn’t find TSelector type from an already loaded library; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-8038] - [patch] “for e in getSTLLikeCollection()” crashes pyroot; [ROOT-8166] - Update INSTALL to reflect CMake; [ROOT-8184] - Error building XrdSysPthread with GCC 6.1; [ROOT-8197] - rootcp not preserving kSingleKey; [ROOT-8205] - TSystem::ExpandPathName is not thread safe; [ROOT-8207] - tmva/tmva/CMakeLists.txt unnecessarily includes TreeViewer; [ROOT-8217] - TMinuit::TMinuit data race; [ROOT-8218] - Detection of TTreeFormula without breaking formula; [ROOT-8221] - Enum value kKey_Shift not accessible from python with ROOT 6; [ROOT-8226] - CMake 3.5.2: circular dependency libMathMore; [ROOT-8231] - _GLIBCXX_USE_CXX11_ABI=0 should be propagated into root-config –cflags",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:31632,detect,detection,31632,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,2,"['Avoid', 'detect']","['Avoid', 'detection']"
Safety,"t.; The TBuffer object is filled via the class::Streamer function.; If the file is compressed (default) a second buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Definition at line 69 of file T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer.html:58787,safe,safer,58787,doc/master/classTBuffer.html,https://root.cern,https://root.cern/doc/master/classTBuffer.html,1,['safe'],['safer']
Safety,"t.; The TBuffer object is filled via the class::Streamer function.; If the file is compressed (default) a second buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented from TObject.; Reimplemented in TSQLFile, TXML",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:52251,safe,safer,52251,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,2,['safe'],['safer']
Safety,"t.; The TBuffer object is filled via the class::Streamer function.; If the file is compressed (default) a second buffer is created to hold the compressed buffer.; Reservation of the corresponding space in the file by looking in the TFree list of free blocks of the file.; The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object. By default, the buffersize will be taken from the average buffer size of all objects written to the current file so far.; If a name is specified, it will be the name of the key. If name is not given, the name of the key will be the name as returned by GetName().; The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete Using the kOverwrite option a previous key with the same name is overwritten. The previous key is deleted before writing the new object. Using the kWriteDelete option a previous key with the same name is deleted only after the new object has been written. This option is safer than kOverwrite but it is slower. NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile– the space is simply freed up to be overwritten; in the case of a TTree, it is more complicated. If one opens a TTree, appends some entries, then writes it out, the behaviour is effectively the same. If, however, one creates a new TTree and writes it out in this way, only the metadata is replaced, effectively making the old data invisible without deleting it. TTree::Delete() can be used to mark all disk space occupied by a TTree as free before overwriting its metadata this way. The kSingleKey option is only used by TCollection::Write() to write a container with a single key instead of each object in the container with its own key.; An object is read from the file into memory via TKey::Read() or via TObject::Read().; The function returns the total number of bytes written to the file. It returns 0 if the object cannot be written. ; Reimplemented in TSQLFile, TXMLFile, TDirectory, TBuffer, TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:118086,safe,safer,118086,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,2,['safe'],['safer']
Safety,"t::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie; FILE*pFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HistoToWorkspaceFactory(). ~HistoToWorkspaceFactory(). HistoToWorkspaceFactory(string , string , vector<string> , double = 200, double = 20, int = 0, int = 6, TFile* = 0). string FilePrefixStr(string ). void ProcessExpectedHisto(TH1* hist, RooWorkspace* proto, string prefix, string productPrefix, string systTerm, double low, double high, int lowBin, int highBin). void AddMultiVarGaussConstraint(RooWorkspace* proto, string prefix, int lowBin, int highBin, vector<string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins. void LinInterpWithConstraint(RooWorkspace* proto, TH1* nominal, vector<TH1*> lowHist, vector<TH1*> highHist, vector<string> sourceName, string prefix, string productPrefix, string systTerm, int lowBin, int highBin, vector<string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins; make list of abstract parameters that interpolate in space of variations; range is set using defined macro (see top of the page). string AddNormFactor(RooWorkspace* , string& , string& , RooStats::HistFactory::EstimateSummary& , bool ). void AddEfficiencyTerms(RooWorkspace* proto, string prefix, string interpName, map<string,pair<double,double> > systMap, vector<string>& likelihoodTermNames, vector<string>& totSystTermNames); add variables for all the relative overall uncertainties we expect; range is set using defined macro (see top of the page); string range=""[0,-1,1]"";. void MakeTotalExpected(RooWorkspace* proto, string totName, string , string , int lowBin, int highBin, vector<string>& syst_x_expectedPrefixNames, vector<string>& normByNames); for ith bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__HistoToWorkspaceFactory.html:9384,predict,predictions,9384,root/html602/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__HistoToWorkspaceFactory.html,2,['predict'],['predictions']
Safety,"t::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTProofServ::EnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidTProofServ::ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidTProofServ::FilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTProofServ::FlushLogFile(); TObject*TProofServ::Get(const char* namecycle); Int_tTProofServ::GetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServLite.html:4171,abort,abort,4171,root/html602/TProofServLite.html,https://root.cern,https://root.cern/root/html602/TProofServLite.html,2,['abort'],['abort']
Safety,"t::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual Bool_tPaintComposite(Option_t* option = """") const; virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRegisterYourself(); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t*); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoCompositeShape.html:14164,safe,safe,14164,root/html602/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html602/TGeoCompositeShape.html,2,['safe'],['safe']
Safety,"t::RecoverFromUndefinedRegions(0.), // This is how RooFit behaved prior to ROOT 6.24; RooFit::PrintEvalErrors(-1), // We are expecting a lot of evaluation errors. -1 switches off printing.; RooFit::PrintLevel(-1))};; ; pdf.plotOn(frame, RooFit::LineColor(kRed), RooFit::Name(""noRecovery""));; ; ; ; // RooFit since ROOT 6.24; // --------------------------------; // The minimiser gets information about the ""badness"" of the violation of the function definition. It uses this; // to find its way out of the disallowed parameter regions.; std::cout << ""\n\n\n-------------- Starting second fit ---------------\n\n"" << std::endl;; ; // Reset the parameters such that the PDF is again undefined.; a1.setVal(10.);; a2.setVal(-1.);; ; // Fit again, but pass recovery information to the minimiser:; std::unique_ptr<RooFitResult> fitWithRecovery{pdf.fitTo(*data, RooFit::Save(),; RooFit::RecoverFromUndefinedRegions(1.), // The magnitude of the recovery information can be chosen here.; // Higher values mean more aggressive recovery.; RooFit::PrintEvalErrors(-1), // We are still expecting a few evaluation errors.; RooFit::PrintLevel(0))};; ; pdf.plotOn(frame, RooFit::LineColor(kBlue), RooFit::Name(""recovery""));; ; ; ; // Collect results and plot.; // --------------------------------; // We print the two fit results, and plot the fitted curves.; // The curve of the fit without recovery cannot be plotted, because the PDF is undefined if a2 < 0.; fitWithoutRecovery->Print();; std::cout << ""Without recovery, the fitter encountered "" << fitWithoutRecovery->numInvalidNLL(); << "" invalid function values. The parameters are unchanged."" << std::endl;; ; fitWithRecovery->Print();; std::cout << ""With recovery, the fitter encountered "" << fitWithRecovery->numInvalidNLL(); << "" invalid function values, but the parameters are fitted."" << std::endl;; ; TLegend* legend = new TLegend(0.5, 0.7, 0.9, 0.9);; legend->SetBorderSize(0);; legend->SetFillStyle(0);; legend->AddEntry(""data"", ""Data"", ""P"");; legend->Ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:4682,recover,recovery,4682,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,1,['recover'],['recovery']
Safety,"t::RecursiveRemove(TObject* obj); virtual intRecvBuf(int sock, void* buffer, int length); virtual intRecvRaw(int sock, void* buffer, int length, int flag); virtual Int_tRedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); virtual TFileHandler*RemoveFileHandler(TFileHandler* fh); voidTSystem::RemoveOnExit(TObject* obj); virtual TSignalHandler*RemoveSignalHandler(TSignalHandler* sh); virtual TStdExceptionHandler*TSystem::RemoveStdExceptionHandler(TStdExceptionHandler* eh); virtual TTimer*RemoveTimer(TTimer* ti); virtual intRename(const char* from, const char* to); voidTObject::ResetBit(UInt_t f); static voidTSystem::ResetErrno(); virtual voidResetSignal(ESignals sig, Bool_t reset = kTRUE); virtual voidResetTimer(TTimer* ti); virtual voidTSystem::Run(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelect(TList* active, Long_t timeout); virtual Int_tSelect(TFileHandler* fh, Long_t timeout); virtual intSendBuf(int sock, const void* buffer, int length); virtual intSendRaw(int sock, const void* buffer, int length, int flag); virtual voidTSystem::SetAclicMode(TSystem::EAclicMode mode); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTSystem::SetBuildDir(const char* build_dir, Bool_t isflat = kFALSE); virtual voidSetDisplay(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetDynamicPath(const char* lib); virtual voidSetenv(const char* name, const char* value); voidTSystem::SetErrorStr(const char* errstr); virtual voidTSystem::SetFlagsDebug(const char*); virtual voidTSystem::SetFlagsOpt(const char*); virtual Int_tSetFPEMask(Int_t mask = kDefaultMask); virtual voidTSystem::SetIncludePath(const char* includePath); virtual voidTSystem::SetLinkdefSuffix(const char* suffix); virtual voidTSystem::SetLinkedLibs(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TUnixSystem.html:10969,timeout,timeout,10969,root/html530/TUnixSystem.html,https://root.cern,https://root.cern/root/html530/TUnixSystem.html,2,['timeout'],['timeout']
Safety,"t::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSlave(TSocket* socket = 0); TProofPlayerSlave(TProofPlayerSlave&&); TProofPlayerSlave(const TProofPlayerSlave&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerSlave.html:11428,timeout,timeout,11428,root/html604/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html,1,['timeout'],['timeout']
Safety,"t::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); RooAbsCollection*RooAbsCollection::snapshot(Bool_t deepCopy = kTRUE) const; Bool_tRooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact). protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooArgList(); Default constructor. RooArgList(const RooArgSet& set); C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgList.html:11663,safe,safeDeleteList,11663,root/html526/RooArgList.html,https://root.cern,https://root.cern/root/html526/RooArgList.html,1,['safe'],['safeDeleteList']
Safety,"t; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. Int_t GetByteCount() const; {return 100;}. Double_t GetDz() const; {return fDz;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* , TGeoMatrix* ) const; {return 0;}. Double_t * GetVertices(); {return &fXY[0][0];}. Bool_t IsCylType() const; {return kFALSE;}. Bool_t IsSamePoint(const Double_t* p1, const Double_t* p2); {return (TMath::Abs(p1[0]-p2[0])<1.E-16 && TMath::Abs(p1[1]-p2[1])<1.E-16)?kTRUE:kFALSE;}. Bool_t IsTwisted() const; {return (fTwist==0)?kFALSE:kTRUE;}. void SetDz(Double_t dz); {fDz = dz;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoArb8.html:19449,Safe,Safety,19449,root/html534/TGeoArb8.html,https://root.cern,https://root.cern/root/html534/TGeoArb8.html,1,['Safe'],['Safety']
Safety,"t; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. Int_t GetByteCount() const; {return 100;}. Double_t GetDz() const; {return fDz;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* , TGeoMatrix* ) const; {return 0;}. Double_t * GetVertices(); {return &fXY[0][0];}. Bool_t IsCylType() const; {return kFALSE;}. Bool_t IsSamePoint(const Double_t* p1, const Double_t* p2); {return (TMath::Abs(p1[0]-p2[0])<1.E-16 && TMath::Abs(p1[1]-p2[1])<1.E-16)?kTRUE:kFALSE;}. Bool_t IsTwisted() const; {return (fTwist==0)?kFALSE:kTRUE;}. void SetDz(Double_t dz); {fDz = dz;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 15:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoArb8.html:21236,Safe,Safety,21236,root/html604/TGeoArb8.html,https://root.cern,https://root.cern/root/html604/TGeoArb8.html,1,['Safe'],['Safety']
Safety,"t; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. Int_t GetByteCount() const; {return 100;}. Double_t GetDz() const; {return fDz;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* , TGeoMatrix* ) const; {return 0;}. Double_t * GetVertices(); {return &fXY[0][0];}. Bool_t IsCylType() const; {return kFALSE;}. Bool_t IsSamePoint(const Double_t* p1, const Double_t* p2); {return (TMath::Abs(p1[0]-p2[0])<1.E-16 && TMath::Abs(p1[1]-p2[1])<1.E-16)?kTRUE:kFALSE;}. Bool_t IsTwisted() const; {return (fTwist==0)?kFALSE:kTRUE;}. void SetDz(Double_t dz); {fDz = dz;}. » Author: Andrei Gheata 24/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoArb8.html:21236,Safe,Safety,21236,root/html602/TGeoArb8.html,https://root.cern,https://root.cern/root/html602/TGeoArb8.html,1,['Safe'],['Safety']
Safety,"t; Compute capacity [length^3] of this shape. void ComputeBBox(); compute bounding box of the pcon. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this shape. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. void DrawPolygon(Option_t* option = """"); Draw the section polygon. Double_t DistToPlane(const Double_t* point, const Double_t* dir, Int_t iz, Int_t ivert, Double_t stepmax, Bool_t in) const; Compute distance to a Xtru lateral surface. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the polycone; locate Z segment. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube; Warning(""DistFromOutside"", ""not implemented"");. Bool_t DefinePolygon(Int_t nvert, const Double_t* xv, const Double_t* yv); Creates the polygon representing the blueprint of any Xtru section.; nvert = number of vertices >2; xv[nvert] = array of X vertex positions; yv[nvert] = array of Y vertex positions; *NOTE* should be called before DefineSection or ctor with 'param'. void DefineSection(Int_t snum, Double_t z, Double_t x0 = 0., Double_t y0 = 0., Double_t scale = 1.); defines z position of a section plane, rmin and rmax at this z. Double_t GetZ(Int_t ipl) const; Return the Z coordinate for segment ipl. void GetPlaneNormal(const Double_t* vert, Double_t* norm) const; Returns normal vector to the planar quadrilateral defined by vector VERT.; The normal points outwards the xtru. void GetPlaneVertices(Int_t iz, Int_t ivert, Double_t* vert) const; Returns (x,y,z) of 3 vertices of the surface defined by Z section",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoXtru.html:16921,safe,safe,16921,root/html534/TGeoXtru.html,https://root.cern,https://root.cern/root/html534/TGeoXtru.html,3,['safe'],['safe']
Safety,"t; Computes capacity of the shape in [length^3]. Double_t Capacity(Double_t rmin, Double_t rmax, Double_t dz); Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Compute distance from inside point to surface of the tube (static); Boundary safe algorithm.; compute distance to surface; Do Z. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the tube; Boundary safe algorithm. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t rmax, Double_t dz); Static method to compute distance from outside point to a tube with given parameters; Boundary safe algorithm.; check Z planes. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the tube and safe distance; Boundary safe algorithm.; fist localize point w.r.t tube. void DistToTube(Double_t rsq, Double_t nsq, Double_t rdotn, Double_t radius, Double_t& b, Double_t& delta); Static method computing the distance to a tube with given radius, starting from; POINT along DIR director cosines. The distance is computed as :; RSQ = point[0]*point[0]+point[1]*point[1]; NSQ = dir[0]*dir[0]+dir[1]*dir[1] ---> should NOT be 0 !!!; RDOTN = point[0]*dir[0]+point[1]*d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTube.html:13759,safe,safe,13759,root/html528/TGeoTube.html,https://root.cern,https://root.cern/root/html528/TGeoTube.html,6,['safe'],['safe']
Safety,t;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveGeoTopNodeData;  ; class  REveGeoTopNodeViz;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:6716,safe,safe,6716,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['safe'],['safe']
Safety,t;  ; class  REveCalo2D;  ; class  REveCalo3D;  ; class  REveCaloData;  ; class  REveCaloDataHist;  ; class  REveCaloDataSelector;  ; class  REveCaloDataSliceSelector;  ; class  REveCaloDataVec;  ; class  REveCaloLego;  ; class  REveCaloViz;  ; class  REveChunkManager;  ; class  REveChunkVector;  ; class  REveClient;  ; class  REveCluster;  REveCluster Reconstructed cluster (also used in VSD). More...;  ; class  REveCollectionCompound;  ; class  REveCompound;  ; class  REveCompoundProjected;  ; class  REveDataCollection;  ; class  REveDataColumn;  ; class  REveDataItem;  ; class  REveDataItemList;  ; class  REveDataProxyBuilderBase;  ; class  REveDataSimpleProxyBuilder;  ; class  REveDataSimpleProxyBuilderTemplate;  ; class  REveDataTable;  ; class  REveDigitSet;  ; class  REveElement;  ; class  REveEllipsoid;  ; class  REveEllipsoidProjected;  ; class  REveException;  REveException Exception-type thrown by Eve classes. More...;  ; class  REveFrameBox;  ; class  REveGeoManagerHolder;  REveGeoManagerHolder Exception-safe global variable holders. More...;  ; class  REveGeoPolyShape;  ; class  REveGeoShape;  ; class  REveGeoShapeExtract;  ; class  REveGeoShapeProjected;  ; class  REveHit;  REveHit Monte Carlo hit (also used in VSD). More...;  ; class  REveJetCone;  ; class  REveJetConeProjected;  ; class  REveLine;  REveLine An arbitrary polyline with fixed line and marker attributes. More...;  ; class  REveLineProjected;  ; class  REveMagField;  REveMagField Abstract interface to magnetic field. More...;  ; class  REveMagFieldConst;  REveMagFieldConst Interface to constant magnetic field. More...;  ; class  REveMagFieldDuo;  REveMagFieldDuo Interface to magnetic field with two different values depending on radius. More...;  ; class  REveManager;  ; class  REveMCRecCrossRef;  REveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD). More...;  ; class  REveMCTrack;  REveMCTrack. More...;  ; class  REvePathMarkT;  Special-point on track: More...; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:6893,safe,safe,6893,doc/v632/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html,1,['safe'],['safe']
Safety,"t;; 2733 offset += baseclass->Size();; 2734 } else if (element->IsA() == TStreamerSTL::Class()) {; 2735 TStreamerSTL *base = (TStreamerSTL*)element;; 2736 TClass *baseclass = base->GetClassPointer();; 2737 if (!baseclass) return -1;; 2738 Int_t subOffset = baseclass->GetBaseClassOffsetRecurse(cl);; 2739 if (subOffset == -2) return -2;; 2740 if (subOffset != -1) return offset+subOffset;; 2741 offset += baseclass->Size();; 2742 ; 2743 } else {; 2744 Error(""GetBaseClassOffsetRecurse"",""Unexpected element type for base class: %s\n"",element->IsA()->GetName());; 2745 }; 2746 }; 2747 }; 2748 return -1;; 2749 }; 2750 }; 2751 ; 2752 TClass *c;; 2753 Int_t off;; 2754 TBaseClass *inh;; 2755 TObjLink *lnk = nullptr;; 2756 if (fBase.load() == nullptr); 2757 lnk = GetListOfBases()->FirstLink();; 2758 else; 2759 lnk = fBase.load()->FirstLink();; 2760 ; 2761 // otherwise look at inheritance tree; 2762 while (lnk) {; 2763 inh = (TBaseClass *)lnk->GetObject();; 2764 //use option load=kFALSE to avoid a warning like:; 2765 //""Warning in <TClass::TClass>: no dictionary for class TRefCnt is available""; 2766 //We can not afford to not have the class if it exist, so we; 2767 //use kTRUE.; 2768 c = inh->GetClassPointer(kTRUE); // kFALSE);; 2769 if (c) {; 2770 if (cl == c) {; 2771 if ((inh->Property() & kIsVirtualBase) != 0); 2772 return -2;; 2773 return inh->GetDelta();; 2774 }; 2775 off = c->GetBaseClassOffsetRecurse(cl);; 2776 if (off == -2) return -2;; 2777 if (off != -1) {; 2778 return off + inh->GetDelta();; 2779 }; 2780 }; 2781 lnk = lnk->Next();; 2782 }; 2783 return -1;; 2784}; 2785 ; 2786////////////////////////////////////////////////////////////////////////////////; 2787/// - Return data member offset to the base class ""cl"".; 2788/// - Returns -1 in case ""cl"" is not a base class.; 2789/// Takes care of multiple inheritance.; 2790 ; 2791Int_t TClass::GetBaseClassOffset(const TClass *toBase, void *address, bool isDerivedObject); 2792{; 2793 // Warning(""GetBaseClassOffset"",""Requires th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:103520,avoid,avoid,103520,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avoid'],['avoid']
Safety,"t;; 2800 offset += baseclass->Size();; 2801 } else if (element->IsA() == TStreamerSTL::Class()) {; 2802 TStreamerSTL *base = (TStreamerSTL*)element;; 2803 TClass *baseclass = base->GetClassPointer();; 2804 if (!baseclass) return -1;; 2805 Int_t subOffset = baseclass->GetBaseClassOffsetRecurse(cl);; 2806 if (subOffset == -2) return -2;; 2807 if (subOffset != -1) return offset+subOffset;; 2808 offset += baseclass->Size();; 2809 ; 2810 } else {; 2811 Error(""GetBaseClassOffsetRecurse"",""Unexpected element type for base class: %s\n"",element->IsA()->GetName());; 2812 }; 2813 }; 2814 }; 2815 return -1;; 2816 }; 2817 }; 2818 ; 2819 TClass *c;; 2820 Int_t off;; 2821 TBaseClass *inh;; 2822 TObjLink *lnk = nullptr;; 2823 if (fBase.load() == nullptr); 2824 lnk = GetListOfBases()->FirstLink();; 2825 else; 2826 lnk = fBase.load()->FirstLink();; 2827 ; 2828 // otherwise look at inheritance tree; 2829 while (lnk) {; 2830 inh = (TBaseClass *)lnk->GetObject();; 2831 //use option load=kFALSE to avoid a warning like:; 2832 //""Warning in <TClass::TClass>: no dictionary for class TRefCnt is available""; 2833 //We can not afford to not have the class if it exist, so we; 2834 //use kTRUE.; 2835 c = inh->GetClassPointer(kTRUE); // kFALSE);; 2836 if (c) {; 2837 if (cl == c) {; 2838 if ((inh->Property() & kIsVirtualBase) != 0); 2839 return -2;; 2840 return inh->GetDelta();; 2841 }; 2842 off = c->GetBaseClassOffsetRecurse(cl);; 2843 if (off == -2) return -2;; 2844 if (off != -1) {; 2845 return off + inh->GetDelta();; 2846 }; 2847 }; 2848 lnk = lnk->Next();; 2849 }; 2850 return -1;; 2851}; 2852 ; 2853////////////////////////////////////////////////////////////////////////////////; 2854/// - Return data member offset to the base class ""cl"".; 2855/// - Returns -1 in case ""cl"" is not a base class.; 2856/// Takes care of multiple inheritance.; 2857 ; 2858Int_t TClass::GetBaseClassOffset(const TClass *toBase, void *address, bool isDerivedObject); 2859{; 2860 // Warning(""GetBaseClassOffset"",""Requires th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:106271,avoid,avoid,106271,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avoid'],['avoid']
Safety,"t;; TQueryResult*fQueryInstance of TQueryResult currently processed; TList*fQueryResultsList of TQueryResult; TStatus*fSelStatus! status of query in progress; TSelector*fSelector! the latest selector; TClass*fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*fStopTimerTimer associated with a stop request; TMutex*fStopTimerMtxTo protect the stop timer; Long64_tfTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fAutoBinsMap of min/max values by name for slaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofPlayer(TProof* proof = 0); Default ctor. ~TProofPlayer(); Destructor. void SetProcessing(Bool_t on = kTRUE); Set processing bit according to 'on'. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop the process after this event. If timeout is positive, start; a timer firing after timeout seconds to hard-stop time-expensive; events. void SetDispatchTimer(Bool_t on = kTRUE); Enable/disable the timer to dispatch pening events while processing. void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); Enable/disable the timer to stop/abort processing.; The 'timeout' is in seconds. void AddQueryResult(TQueryResult* q); Add query result to the list, making sure that there are no; duplicates. void RemoveQueryResult(const char* ref); Remove all query result instances referenced 'ref' from; the list of results. TQueryResult * GetQueryResult(const char* ref); Get query result instances referenced 'ref' from; the list of results. void SetCurrentQuery(TQueryResult* q); Set current query and save previous value. void AddInput(TObject* inp); Add object to input list. void ClearInput(); Clear input list. TObject * GetOutput(const char* name) const; Get output ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayer.html:14099,abort,abort,14099,root/html528/TProofPlayer.html,https://root.cern,https://root.cern/root/html528/TProofPlayer.html,6,"['abort', 'timeout']","['abort', 'timeout']"
Safety,"tBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGLViewer::SetCameraOverlay(TGLCameraOverlay* m); voidTGLViewer::SetClearColor(Color_t col); voidTGLViewerBase::SetClip(TGLClip* p); voidTGLViewer::SetClipAutoUpdate(Bool_t x); voidTGLViewer::SetCurrentCamera(TGLViewer::ECameraType camera); voidTGLViewer::SetDrawCameraCenter(Bool_t x); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLViewer::SetEventHandler(TGEventHandler* handler); voidTGLViewer::SetFader(Float_t x); virtual voidTGLViewer::SetGedEditor(TGedEditor* ed); voidTGLViewer::SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); voidTGLViewer::SetIgnoreSizesOnUpdate(Bool_t v); voidTGLViewer::SetLineScale(Float_t s); voidTGLViewerBase::SetLOD(Short_t lod); voidTGLViewer::SetMaxSceneDrawTimeHQ(Float_t t); voidTGLViewer::SetMaxSceneDrawTimeLQ(Float_t t); static voidSetMenuHidingTimeout(Long_t timeout); static voidTObject::SetObjectStat(Bool_t stat); voidTGLViewerBase::SetOLLineW(Float_t w); voidTGLViewer::SetOrthoCamera(TGLViewer::ECameraType camera, Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); voidTGLViewer::SetPerspectiveCamera(TGLViewer::ECameraType camera, Double_t fov, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); voidTGLViewer::SetPictureFileName(const TString& f); voidTGLViewer::SetPointScale(Float_t s); voidTGLViewer::SetResetCamerasOnUpdate(Bool_t v); voidTGLViewer::SetSmartRefresh(Bool_t smart_ref); voidTGLViewer::SetSmoothLines(Bool_t s); voidTGLViewer::SetSmoothPoints(Bool_t s); voidTGLViewer::SetStereo(Bool_t s); voidTGLViewer::SetStereoEyeOffsetFac(Float_t f); voidTGLViewer::SetStereoFrustumAsymFac(Float_t f); voidTGLViewer::SetStereoZeroParallax(Float_t f); voidTGLViewerBase::SetStyle(Short_t st); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGLViewerBase::SetWFLineW(Float_t w); voidShow(); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:15283,timeout,timeout,15283,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,4,['timeout'],['timeout']
Safety,"tBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGLViewer::SetCameraOverlay(TGLCameraOverlay* m); voidTGLViewer::SetClearColor(Color_t col); voidTGLViewerBase::SetClip(TGLClip* p); voidTGLViewer::SetClipAutoUpdate(Bool_t x); voidTGLViewer::SetCurrentCamera(TGLViewer::ECameraType camera); voidTGLViewer::SetDrawCameraCenter(Bool_t x); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLViewer::SetEventHandler(TGEventHandler* handler); voidTGLViewer::SetFader(Float_t x); virtual voidTGLViewer::SetGedEditor(TGedEditor* ed); voidTGLViewer::SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); voidTGLViewer::SetIgnoreSizesOnUpdate(Bool_t v); voidTGLViewer::SetLineScale(Float_t s); voidTGLViewerBase::SetLOD(Short_t lod); voidTGLViewer::SetMaxSceneDrawTimeHQ(Float_t t); voidTGLViewer::SetMaxSceneDrawTimeLQ(Float_t t); static voidSetMenuHidingTimeout(Long_t timeout); static voidTObject::SetObjectStat(Bool_t stat); voidTGLViewerBase::SetOLLineW(Float_t w); voidTGLViewer::SetOrthoCamera(TGLViewer::ECameraType camera, Double_t zoom, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); voidTGLViewer::SetPerspectiveCamera(TGLViewer::ECameraType camera, Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); voidTGLViewer::SetPictureFileName(const TString& f); voidTGLViewer::SetPointScale(Float_t s); voidTGLViewer::SetResetCamerasOnUpdate(Bool_t v); voidTGLViewer::SetSmartRefresh(Bool_t smart_ref); voidTGLViewer::SetSmoothLines(Bool_t s); voidTGLViewer::SetSmoothPoints(Bool_t s); voidTGLViewer::SetStereo(Bool_t s); voidTGLViewer::SetStereoEyeOffsetFac(Float_t f); voidTGLViewer::SetStereoFrustumAsymFac(Float_t f); voidTGLViewer::SetStereoZeroParallax(Float_t f); voidTGLViewerBase::SetStyle(Short_t st); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGLViewerBase::SetWFLineW(Float_t w); voidShow()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLSAViewer.html:15691,timeout,timeout,15691,root/html602/TGLSAViewer.html,https://root.cern,https://root.cern/root/html602/TGLSAViewer.html,1,['timeout'],['timeout']
Safety,"tBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGLViewer::SetCameraOverlay(TGLCameraOverlay* m); voidTGLViewer::SetClearColor(Color_t col); voidTGLViewerBase::SetClip(TGLClip* p); voidTGLViewer::SetClipAutoUpdate(Bool_t x); voidTGLViewer::SetCurrentCamera(TGLViewer::ECameraType camera); voidTGLViewer::SetDrawCameraCenter(Bool_t x); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLViewer::SetEventHandler(TGEventHandler* handler); voidTGLViewer::SetFader(Float_t x); virtual voidTGLViewer::SetGedEditor(TGedEditor* ed); voidTGLViewer::SetGuideState(Int_t axesType, Bool_t axesDepthTest, Bool_t referenceOn, const Double_t* referencePos); voidTGLViewer::SetIgnoreSizesOnUpdate(Bool_t v); voidTGLViewer::SetLineScale(Float_t s); voidTGLViewerBase::SetLOD(Short_t lod); voidTGLViewer::SetMaxSceneDrawTimeHQ(Float_t t); voidTGLViewer::SetMaxSceneDrawTimeLQ(Float_t t); static voidSetMenuHidingTimeout(Long_t timeout); static voidTObject::SetObjectStat(Bool_t stat); voidTGLViewerBase::SetOLLineW(Float_t w); voidTGLViewer::SetOrthoCamera(TGLViewer::ECameraType camera, Double_t zoom, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); voidTGLViewer::SetPerspectiveCamera(TGLViewer::ECameraType camera, Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); voidTGLViewer::SetPictureFileName(const TString& f); voidTGLViewer::SetPointScale(Float_t s); voidTGLViewer::SetResetCamerasOnUpdate(Bool_t v); voidTGLViewer::SetSmartRefresh(Bool_t smart_ref); voidTGLViewer::SetSmoothLines(Bool_t s); voidTGLViewer::SetSmoothPoints(Bool_t s); voidTGLViewer::SetStereo(Bool_t stereo, Bool_t quad_buf = kTRUE); voidTGLViewer::SetStereoEyeOffsetFac(Float_t f); voidTGLViewer::SetStereoFrustumAsymFac(Float_t f); voidTGLViewer::SetStereoZeroParallax(Float_t f); voidTGLViewerBase::SetStyle(Short_t st); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGLViewerBase::Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLSAViewer.html:15691,timeout,timeout,15691,root/html604/TGLSAViewer.html,https://root.cern,https://root.cern/root/html604/TGLSAViewer.html,1,['timeout'],['timeout']
Safety,"tDaily = (TTree*)f->Get(name);; TStockDaily *data = 0;; tDaily->SetBranchAddress(""daily"",&data);; TBranch *b_closeAdj = tDaily->GetBranch(""fCloseAdj"");; TBranch *b_date = tDaily->GetBranch(""fDate"");; ; //read only the ""adjusted close"" branch for all entries; const Int_t nrEntries = (Int_t)tDaily->GetEntries();; TArrayF closeAdj(nrEntries);; for (Int_t i = 0; i < nrEntries; i++) {; b_date->GetEntry(i);; b_closeAdj->GetEntry(i);; if (data->fDate >= sDay && data->fDate <= eDay); closeAdj[i] = data->fCloseAdj/100.;; }; ; TArrayF *r = new TArrayF(nrEntries-1);; for (Int_t i = 1; i < nrEntries; i++); // (*r)[i-1] = closeAdj[i]-closeAdj[i-1];; (*r)[i-1] = closeAdj[i]/closeAdj[i-1];; ; return *r;; }; ; #ifndef __MAKECINT__; //---------------------------------------------------------------------------; TVectorD OptimalInvest(Double_t riskFactor,TVectorD r,TMatrixDSym Covar); {; // what the quadratic programming package will do:; //; // minimize c^T x + ( 1/2 ) x^T Q x; // subject to A x = b; // clo <= C x <= cup; // xlo <= x <= xup; // what we want :; //; // maximize c^T x - k ( 1/2 ) x^T Q x; // subject to sum_x x_i = 1; // 0 <= x_i; ; // We have nrStocks weights to determine,; // 1 equality- and 0 inequality- equations (the simple square boundary; // condition (xlo <= x <= xup) does not count); ; const Int_t nrVar = nrStocks;; const Int_t nrEqual = 1;; const Int_t nrInEqual = 0;; ; // flip the sign of the objective function because we want to maximize; TVectorD c = -1.*r;; TMatrixDSym Q = riskFactor*Covar;; ; // equality equation; TMatrixD A(nrEqual,nrVar); A = 1;; TVectorD b(nrEqual); b = 1;; ; // inequality equation; //; // - although not applicable in the current situation since nrInEqual = 0, one; // has to specify not only clo and cup but also an index vector iclo and icup,; // whose values are either 0 or 1 . If iclo[j] = 1, the lower boundary condition; // is active on x[j], etc. ...; ; TMatrixD C (nrInEqual,nrVar);; TVectorD clo (nrInEqual);; TVectorD cup (nrInEqual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/portfolio_8C.html:7662,risk,riskFactor,7662,doc/master/portfolio_8C.html,https://root.cern,https://root.cern/doc/master/portfolio_8C.html,1,['risk'],['riskFactor']
Safety,"tFactory.h:233; TMVA::DataSetFactory::fWeightFormulastd::vector< TTreeFormula * > fWeightFormulaweightsDefinition DataSetFactory.h:232; TMVA::DataSetFactory::fCurrentTreeTTree * fCurrentTreethe tree, events are currently read fromDefinition DataSetFactory.h:224; TMVA::DataSetFactory::VerboseBool_t Verbose()Definition DataSetFactory.h:209; TMVA::DataSetFactory::LogMsgLogger & Log() constDefinition DataSetFactory.h:236; TMVA::DataSetFactory::BuildInitialDataSetDataSet * BuildInitialDataSet(DataSetInfo &, TMVA::DataInputHandler &)if no entries, than create a DataSet with one Event which uses dynamic variables (pointers to variabl...Definition DataSetFactory.cxx:202; TMVA::DataSetFactory::DataSetFactoryDataSetFactory()constructorDefinition DataSetFactory.cxx:93; TMVA::DataSetFactory::EventVectorOfClassesOfTreeTypestd::map< Types::ETreeType, EventVectorOfClasses > EventVectorOfClassesOfTreeTypeDefinition DataSetFactory.h:120; TMVA::DataSetFactory::fCurrentEvtIdxUInt_t fCurrentEvtIdxthe current event (to avoid reading of the same event)Definition DataSetFactory.h:225; TMVA::DataSetFactory::ChangeToNewTreevoid ChangeToNewTree(TreeInfo &, const DataSetInfo &)While the data gets copied into the local training and testing trees, the input tree can change (for ...Definition DataSetFactory.cxx:293; TMVA::DataSetFactory::EventVectorOfTreeTypestd::map< Types::ETreeType, EventVector > EventVectorOfTreeTypeDefinition DataSetFactory.h:121; TMVA::DataSetFactory::fScaleWithPreselEffBool_t fScaleWithPreselEffhow to deal with requested #events in connection with preselection cutsDefinition DataSetFactory.h:221; TMVA::DataSetFactory::fInputTableFormulasstd::vector< std::pair< TTreeFormula *, Int_t > > fInputTableFormulas! input variables expression for arraysDefinition DataSetFactory.h:229; TMVA::DataSetFactory::BuildEventVectorvoid BuildEventVector(DataSetInfo &dsi, DataInputHandler &dataInput, EventVectorOfClassesOfTreeType &eventsmap, EvtStatsPerClass &eventCounts)build empty event ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8h_source.html:10902,avoid,avoid,10902,doc/master/DataSetFactory_8h_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8h_source.html,1,['avoid'],['avoid']
Safety,"tFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. void ReleaseMonitor(TMonitor* mon); Release the used monitor to be used, making sure to delete newly created; monitors. Int_t Collect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:41979,timeout,timeout,41979,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['timeout'],['timeout']
Safety,"tGlobalSRPPwd (Bool_t srppwd);  Set global SRP passwd flag to be used for authentication to rootd or proofd. ;  ; static void SetGlobalUser (const char *user);  Set global user name to be used for authentication to rootd or proofd. ;  ; static void SetGlobusAuthHook (GlobusAuth_t func);  Set Globus authorization function. ;  ; static void SetKrb5AuthHook (Krb5Auth_t func);  Set kerberos5 authorization function. ;  ; static void SetPromptUser (Bool_t promptuser);  Set global PromptUser flag. ;  ; static void SetReadHomeAuthrc (Bool_t readhomeauthrc);  Set flag controlling the reading of $HOME/.rootauthrc. ;  ; static void SetRSAInit (Int_t init=1);  Static method setting RSA initialization flag. ;  ; static Int_t SetRSAPublic (const char *rsapubexport, Int_t klen);  Store RSA public keys from export string rsaPubExport. ;  ; static void SetSecureAuthHook (SecureAuth_t func);  Set secure authorization function. ;  ; static void SetTimeOut (Int_t to);  Set timeout (active if > 0) ;  ; static void Show (Option_t *opt=""S"");  Print info about the authentication sector. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; Int_t ClearAuth (TString &user, TString &passwd, Bool_t &pwhash);  UsrPwd client authentication code. ;  ; Int_t GenRSAKeys ();  Generate a valid pair of private/public RSA keys to protect for authentication token exchange. ;  ; Bool_t GetPwHash () const;  ; char * GetRandString (Int_t Opt, Int_t Len);  Allocates and fills a 0 terminated buffer of length len+1 with len ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAuthenticate.html:16238,timeout,timeout,16238,doc/master/classTAuthenticate.html,https://root.cern,https://root.cern/doc/master/classTAuthenticate.html,1,['timeout'],['timeout']
Safety,"tHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RModel::Streamer; [#15139] - cmake option -Dall=YES breaks the cmake; [#15118] - jsoninterface does not build if provided with RapidYAML; [#15108] - Turn off clang-format for Linkdef files; [#15090] - TClass::GetClassInfo() is not thread safe; [#15077] - Passing different floating point types to RVec utility functions; [#15048] - [ntuple] Handling of virtual inheritance broken; [#15040] - RDataFrame Inaccurate example of progress bar from documentation; [#15028] - RDataFrame Unable to cacheread remote file; [#15027] - spurrious cmake message about AfterImage with -Dminimal=ON; [#14981] - RVecs leak memory with np.asarray in pyROOT; [#14964] - ROOT-HEAD fails with “cling interactive line includer >>>: fatal error: module file ‘[snip]/Vc.pcm’ not found: module file not found”; [#14958] - ROOT_HEAD failed with error message: Fail to detect cryptographic random generator; [#14921] - ROOT Fails to build macOS 14.4 arm64 Xcode 15.3; [#14914] - VecOps::Take with default argument doesn’t check correctly the out of boundary condition; [#14910] - hadd issue when using parallelization together with in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:25795,safe,safe,25795,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['safe'],['safe']
Safety,"tIndex); 408 {; 409 k++;; 410 offset2=1;; 411 continue;; 412 }; 413 fFunction2->SetParameter(k, params[i - offset2]);; 414 equalParams &= (fParams2[k - offset2] == params[i - offset2]);; 415 fParams2[k - offset2] = params[i - offset2];; 416 k++;; 417 }; 418 ; 419 if (!equalParams) fFlagGraph = false; // to indicate we need to re-do the convolution; 420}; 421 ; 422////////////////////////////////////////////////////////////////////////////////; 423/// Set the parameter values for the convolution function.; 424 ; 425void TF1Convolution::SetParameters(Double_t p0, Double_t p1, Double_t p2, Double_t p3,; 426 Double_t p4, Double_t p5, Double_t p6, Double_t p7); 427{; 428 Double_t params[]={p0,p1,p2,p3,p4,p5,p6,p7};; 429 TF1Convolution::SetParameters(params);; 430}; 431 ; 432////////////////////////////////////////////////////////////////////////////////; 433/// Set the fraction of extra range used when doing an FFT convolution.; 434/// The extra range is often needed to avoid mirroring effect of the resulting convolution; 435/// function at the borders.; 436/// By default an extra range of 0.1 is used.; 437 ; 438void TF1Convolution::SetExtraRange(Double_t percentage); 439{; 440 if (percentage<0) return;; 441 double range = fXmax - fXmin;; 442 fXmin -= percentage * range;; 443 fXmax += percentage * range;; 444 fFlagGraph = false; // to indicate we need to re-do the convolution; 445}; 446 ; 447////////////////////////////////////////////////////////////////////////////////; 448/// Set the actual range used for the convolution.; 449/// In case a or b are -inf or +inf and FFT convolution is used, then the; 450/// range of the first function will be used and extended by the default extra range fraction.; 451 ; 452void TF1Convolution::SetRange(Double_t a, Double_t b); 453{; 454 if (a >= b) {; 455 Warning(""SetRange"", ""Invalid range: %f >= %f"", a, b);; 456 return;; 457 }; 458 ; 459 fXmin = a;; 460 fXmax = b;; 461 if (fFlagFFT && ( a==-TMath::Infinity() || b==TMath::Infinity() ) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1Convolution_8cxx_source.html:16140,avoid,avoid,16140,doc/master/TF1Convolution_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1Convolution_8cxx_source.html,1,['avoid'],['avoid']
Safety,"tMinimization(). template<class ObjFunc_t > . bool ROOT::Fit::Fitter::DoWeightMinimization ; (; std::unique_ptr< ObjFunc_t > ; f, . const ROOT::Math::IMultiGenFunction * ; chifunc = nullptr . ). protected . Definition at line 845 of file Fitter.cxx. ◆ EvalFCN(). bool ROOT::Fit::Fitter::EvalFCN ; (; ). Perform a simple FCN evaluation. ; FitResult will be modified and contain the value of the FCN ; Definition at line 288 of file Fitter.cxx. ◆ ExamineFCN(). void ROOT::Fit::Fitter::ExamineFCN ; (; ). protected . look at the user provided FCN and get data and model function is they derive from ROOT::Fit FCN classes ; Definition at line 979 of file Fitter.cxx. ◆ Fit() [1/5]. bool ROOT::Fit::Fitter::Fit ; (; const BinData & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Note that the provided input data are copied in the Fitter class. Use the next function (passing a shared_ptr to the BinData class if you want to avoid copying. ; Definition at line 157 of file Fitter.h. ◆ Fit() [2/5]. template<class Data , class Function , class cond = typename std::enable_if<!(std::is_same<Function, ROOT::EExecutionPolicy>::value || std::is_same<Function, int>::value), Function>::type> . bool ROOT::Fit::Fitter::Fit ; (; const Data & ; data, . const Function & ; func, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . fit a data set using any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecuti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:21792,avoid,avoid,21792,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['avoid'],['avoid']
Safety,"tNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 309 ; 310 /////////////////////////////////////////////////////////////////////////; 311 /// returns true if only native (own-created) connections are allowed; 312 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 313 ; 314 /////////////////////////////////////////////////////////////////////////; 315 /// Configure if authentication key in connection string is required; 316 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 317 ; 318 /////////////////////////////////////////////////////////////////////////; 319 /// returns true if authentication string is required; 320 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 321 ; 322 /////////////////////////////////////////////////////////////////////////; 323 /// Configure if window can access local files via currentdir/ path of http server; 324 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 325 ; 326 /////////////////////////////////////////////////////////////////////////; 327 /// returns true if window can access local files via currentdir/ path of http server; 328 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 329 ; 330 void SetClientVersion(const std::string &vers);; 331 ; 332 std::string GetClientVersion() const;; 333 ; 334 void SetUserArgs(const std::string &args);; 335 ; 336 std::string GetUserArgs() const;; 337 ; 338 int NumConnections(bool with_pending = false) const;; 339 ; 340 unsigned GetConnectionId(int num = 0) const;; 341 ; 342 std::vector<unsigned> GetConnections(unsigned excludeid = 0) const;; 343 ; 344 bool HasConnection(unsigned connid = 0, bool only_active = true) const;; 345 ; 346 void CloseConnections();; 347 ; 348 void CloseConnection(unsigned connid);; 349 ; 350 /// Returns timeout for synchronous WebWindow operations; 351 float GetOperationTmout() const { return fOperationTmout; }; 352 ; 353 /// Set timeout for synchronous WebWindow operations; 354 void SetOperationTmout(float tm = 50.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:16195,timeout,timeout,16195,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,2,['timeout'],['timeout']
Safety,"tNativeOnlyConn(bool on = true) { fNativeOnlyConn = on; }; 312 ; 313 /////////////////////////////////////////////////////////////////////////; 314 /// returns true if only native (own-created) connections are allowed; 315 bool IsNativeOnlyConn() const { return fNativeOnlyConn; }; 316 ; 317 /////////////////////////////////////////////////////////////////////////; 318 /// Configure if authentication key in connection string is required; 319 void SetRequireAuthKey(bool on) { fRequireAuthKey = on; }; 320 ; 321 /////////////////////////////////////////////////////////////////////////; 322 /// returns true if authentication string is required; 323 bool IsRequireAuthKey() const { return fRequireAuthKey; }; 324 ; 325 /////////////////////////////////////////////////////////////////////////; 326 /// Configure if window can access local files via currentdir/ path of http server; 327 void SetUseCurrentDir(bool on = true) { fUseCurrentDir = on; }; 328 ; 329 /////////////////////////////////////////////////////////////////////////; 330 /// returns true if window can access local files via currentdir/ path of http server; 331 bool IsUseCurrentDir() const { return fUseCurrentDir; }; 332 ; 333 void SetClientVersion(const std::string &vers);; 334 ; 335 std::string GetClientVersion() const;; 336 ; 337 void SetUserArgs(const std::string &args);; 338 ; 339 std::string GetUserArgs() const;; 340 ; 341 int NumConnections(bool with_pending = false) const;; 342 ; 343 unsigned GetConnectionId(int num = 0) const;; 344 ; 345 std::vector<unsigned> GetConnections(unsigned excludeid = 0) const;; 346 ; 347 bool HasConnection(unsigned connid = 0, bool only_active = true) const;; 348 ; 349 void CloseConnections();; 350 ; 351 void CloseConnection(unsigned connid);; 352 ; 353 /// Returns timeout for synchronous WebWindow operations; 354 float GetOperationTmout() const { return fOperationTmout; }; 355 ; 356 /// Set timeout for synchronous WebWindow operations; 357 void SetOperationTmout(float tm = 50.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:16346,timeout,timeout,16346,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,2,['timeout'],['timeout']
Safety,"tOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; virtual Bool_t HasCounter () const;  ; virtual void Init (TVirtualStreamerInfo *obj=nullptr);  Initliaze the element. ;  ; virtual Bool_t IsaPointer () const;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetArrayDim (Int_t dim);  Set number of array dimensions. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerString.html:3027,detect,detected,3027,doc/master/classTStreamerString.html,https://root.cern,https://root.cern/doc/master/classTStreamerString.html,1,['detect'],['detected']
Safety,"tParentClass(clParent);; 6339 fBranches.Add(branch);; 6340 } else if (elemClass->InheritsFrom(TClonesArray::Class())) {; 6341 // Splitting something derived from TClonesArray.; 6342 Int_t subSplitlevel = splitlevel-1;; 6343 if (btype == 31 || btype == 41 || elem->CannotSplit()) {; 6344 // -- We split the sub-branches of a TClonesArray or an STL container only once.; 6345 subSplitlevel = 0;; 6346 }; 6347 TBranchElement* branch = new TBranchElement(this, branchname, sinfo, elemID, ptr + offset, basketsize, subSplitlevel, btype);; 6348 branch->SetParentClass(clParent);; 6349 fBranches.Add(branch);; 6350 } else {; 6351 // Splitting a normal class.; 6352 // FIXME: We are eliding the class we are splitting here,; 6353 // i.e., we do not create a branch for it, so the; 6354 // branch hierarchy does not match the class hierarchy.; 6355 // Note: clParent is the class which contains a data member of; 6356 // the class type which we are splitting.; 6357 // Note: We can use parent class (clParent) != branch class (elemClass) to detection elision.; 6358 Int_t unroll = Unroll(branchname, clParent, elemClass, ptr + offset, basketsize, splitlevel-1+splitSTLP, btype);; 6359 if (unroll < 0) {; 6360 // FIXME: We could not split because we are abstract, should we be doing this?; 6361 TBranchElement* branch = new TBranchElement(this, branchname, sinfo, elemID, ptr + offset, basketsize, 0, btype);; 6362 branch->SetParentClass(clParent);; 6363 fBranches.Add(branch);; 6364 }; 6365 }; 6366 }; 6367 else if( elem->GetClassPointer() &&; 6368 elem->GetClassPointer()->GetCollectionProxy() &&; 6369 elem->GetClassPointer()->GetCollectionProxy()->HasPointers() &&; 6370 splitSTLP && fType != 4 ); 6371 {; 6372 ; 6373 TBranchSTL* branch = new TBranchSTL( this, branchname,; 6374 elem->GetClassPointer()->GetCollectionProxy(),; 6375 basketsize, splitlevel - 1+splitSTLP, sinfo, elemID );; 6376 branch->SetAddress( ptr+offset );; 6377 fBranches.Add( branch );; 6378 }; 6379 else if ((elem->IsA() == TStreamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:239831,detect,detection,239831,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['detect'],['detection']
Safety,"tStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteBuffer(const char* buf, Long64_t pos, Int_t len). protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TFileCacheWrite(const TFileCacheWrite&); TFileCacheWrite&operator=(const TFileCacheWrite&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. char*fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tfBufferSizeAllocated size of fBuffer; TFile*fFilePointer to file; Int_tfNtotTotal size of cached blocks; Bool_tfRecursiveflag to avoid recursive calls; Long64_tfSeekStartSeek value of first block in cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileCacheWrite(); Default Constructor. TFileCacheWrite(TFile* file, Int_t buffersize); Creates a TFileCacheWrite data structure.; The write cache will be connected to file.; The size of the cache will be buffersize,; if buffersize < 10000 a default size of 512 Kbytes is used. ~TFileCacheWrite(); Destructor. Bool_t Flush(); Flush the current write buffer to the file.; Returns kTRUE in case of error. void Print(Option_t* option = """") const; Print class internal structure. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Called by the read cache to check if the requested data is not; in the write cache buffer.; Returns -1 if data not in write cache,; 0 otherwise. Int_t WriteBuffer(const char* buf, Long64_t pos, Int_t len); Write buffer at position pos in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileCacheWrite.html:6048,avoid,avoid,6048,root/html528/TFileCacheWrite.html,https://root.cern,https://root.cern/root/html528/TFileCacheWrite.html,4,['avoid'],['avoid']
Safety,"tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoShapeAssembly&operator=(const TGeoShapeAssembly&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidRecomputeBoxLast(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPols(TBuffer3D& buff) const; voidTG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoShapeAssembly.html:7572,Safe,SafetyPhi,7572,root/html530/TGeoShapeAssembly.html,https://root.cern,https://root.cern/root/html530/TGeoShapeAssembly.html,2,['Safe'],['SafetyPhi']
Safety,"tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidResetAll(); voidTObject::ResetBit(UInt_t f); voidResetState(); Double_tSafety(Bool_t inside = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetCurrentDirection(const Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); voidSetCurrentPoint(const Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLastPoint(Double_t x, Double_t y, Double_t z); voidSetLastSafetyForPoint(Double_t safe, const Double_t* point); voidSetLastSafetyForPoint(Double_t safe, Double_t x, Double_t y, Double_t z); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutside(Bool_t flag = kTRUE); voidSetStartSafe(Bool_t flag = kTRUE); voidSetStep(Double_t step); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; TGeoNode*Step(Bool_t is_geom = kTRUE, Bool_t cross = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGeoNavigator(); TGeoNavigator(TGeoManager* geom); voidTopToMaster(const Double_t* top, Double_t* master) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoNavigator.html:8196,safe,safe,8196,root/html602/TGeoNavigator.html,https://root.cern,https://root.cern/root/html602/TGeoNavigator.html,2,['safe'],['safe']
Safety,"tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidResetAll(); voidTObject::ResetBit(UInt_t f); voidResetState(); Double_tSafety(Bool_t inside = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetCurrentDirection(const Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); voidSetCurrentPoint(const Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLastPoint(Double_t x, Double_t y, Double_t z); voidSetLastSafetyForPoint(Double_t safe, const Double_t* point); voidSetLastSafetyForPoint(Double_t safe, Double_t x, Double_t y, Double_t z); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutside(Bool_t flag = kTRUE); voidSetStartSafe(Bool_t flag = kTRUE); voidSetStep(Double_t step); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); TGeoNode*Step(Bool_t is_geom = kTRUE, Bool_t cross = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTopToMaster(const Double_t* top, Double_t* master) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t buf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNavigator.html:8275,safe,safe,8275,root/html534/TGeoNavigator.html,https://root.cern,https://root.cern/root/html534/TGeoNavigator.html,1,['safe'],['safe']
Safety,"tTProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerRemote(TProof* proof = 0); TProofPlayerRemote(const TProofPlayerRemote&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerRemote.html:11197,timeout,timeout,11197,root/html604/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html604/TProofPlayerRemote.html,1,['timeout'],['timeout']
Safety,"tTProofPlayer::SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidSetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidSetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerRemote.html:11292,timeout,timeout,11292,root/html534/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html534/TProofPlayerRemote.html,1,['timeout'],['timeout']
Safety,"tTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; TNamed::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an object using the Streamer facility.Definition TNamed.cxx:74; RooFit::ComponentsRooCmdArg Components(Args_t &&... argsOrArgSet)Definition RooGlobalFunc.h:128; RooFit::InvisibleRooCmdArg Invisible(bool inv=true)Definition RooGlobalFunc.cxx:276; RooFit::LineColorRooCmdArg LineColor(Color_t color)Definition RooGlobalFunc.cxx:215; RooFit::LineStyleRooCmdArg LineStyle(Style_t style)Definition RooGlobalFunc.cxx:240; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf205_compplotDefinition rf205_compplot.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2,sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bk",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf205__compplot_8C.html:6861,safe,safe,6861,doc/master/rf205__compplot_8C.html,https://root.cern,https://root.cern/doc/master/rf205__compplot_8C.html,1,['safe'],['safe']
Safety,"tVar()->GetName() << ""'. Ignoring ..."" << std::endl;; 2090 continue;; 2091 }; 2092 rangeLim.push_back(frame->getPlotVar()->getRange(thisRangeName));; 2093 }; 2094 adjustNorm = true ;; 2095 hasCustomRange = true ;; 2096 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") p.d.f. curve is normalized using explicit choice of ranges '"" << pc.getString(""normRangeName"", """", false) << ""'"" << endl ;; 2097 ; 2098 nameSuffix.append(""_NormRange["" + std::string(pc.getString(""rangeName"")) + ""]"");; 2099 ; 2100 }; 2101 ; 2102 if (hasCustomRange && adjustNorm) {; 2103 // If overlapping ranges were given, remove them now; 2104 const std::size_t oldSize = rangeLim.size();; 2105 removeRangeOverlap(rangeLim);; 2106 ; 2107 if (oldSize != rangeLim.size() && !pc.hasProcessed(""NormRange"")) {; 2108 // User gave overlapping ranges. This leads to double-counting events and integrals, and must; 2109 // therefore be avoided. If a NormRange has been given, the overlap is already gone.; 2110 // It's safe to plot even with overlap now.; 2111 coutE(Plotting) << ""Requested plot/integration ranges overlap. For correct plotting, new ranges ""; 2112 ""will be defined."" << std::endl;; 2113 auto plotVar = dynamic_cast<RooRealVar*>(frame->getPlotVar());; 2114 assert(plotVar);; 2115 std::string rangesNoOverlap;; 2116 for (auto it = rangeLim.begin(); it != rangeLim.end(); ++it) {; 2117 std::stringstream rangeName;; 2118 rangeName << ""Remove_overlap_range_"" << it - rangeLim.begin();; 2119 plotVar->setRange(rangeName.str().c_str(), it->first, it->second);; 2120 if (!rangesNoOverlap.empty()); 2121 rangesNoOverlap += "","";; 2122 rangesNoOverlap += rangeName.str();; 2123 }; 2124 ; 2125 auto rangeArg = static_cast<RooCmdArg*>(cmdList.FindObject(""RangeWithName""));; 2126 if (rangeArg) {; 2127 rangeArg->setString(0, rangesNoOverlap.c_str());; 2128 } else {; 2129 plotRange = std::make_unique<RooCmdArg>(RooFit::Range(rangesNoOverlap.c_str()));; 2130 cmdList.Add(plotRange.get());; 2131 }; 2132 }; 2133 ; 2134 double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:103879,safe,safe,103879,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['safe'],['safe']
Safety,"t[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; ... (remaining 14 messages suppressed); ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=-3.35967 cHl3=-9.58704 cHq3=-6.27461; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=486.968, denominator=wrap_pdf_Int[pTV]=829530; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=486.968, denomi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:13598,recover,recover,13598,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['recover'],['recover']
Safety,"t_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t bytesDefinition TGWin32VirtualXProxy.cxx:245; srcOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t srcDefinition TGWin32VirtualXProxy.cxx:164; namechar name[80]Definition TGX11.cxx:110; TRWSpinLock.hxx; TUrl.h; ROOT::Internal::RConcurrentHashColl::HashValueDefinition RConcurrentHashColl.hxx:36; ROOT::Internal::RConcurrentHashCollThis class is a thread-safe associative collection connecting a 256 bits digest/hash to a collection ...Definition RConcurrentHashColl.hxx:30; TArchiveFileClass describing an archive file containing multiple sub-files, like a ZIP or TAR archive.Definition TArchiveFile.h:24; TArrayCArray of chars or bytes (8 bits per element).Definition TArrayC.h:27; TBasketManages buffers for branches of a Tree.Definition TBasket.h:34; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TDirectoryFileA ROOT file is structured in Directories (like a file system).Definition TDirectoryFile.h:32; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileCacheReadA cache when reading files over the network.Definition TFileCacheRead.h:22; TFileCacheWriteA cache when writing files over the network.Definition TFileCacheWrite.h:19; TFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:23600,safe,safe,23600,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['safe'],['safe']
Safety,"t_t TColor::GetColorPalette(Int_t i); 1506{; 1507 Int_t ncolors = fgPalette.fN;; 1508 if (ncolors == 0) return 0;; 1509 Int_t icol = i%ncolors;; 1510 if (icol < 0) icol = 0;; 1511 return fgPalette.fArray[icol];; 1512}; 1513 ; 1514////////////////////////////////////////////////////////////////////////////////; 1515/// Static function returning the current active palette.; 1516 ; 1517const TArrayI& TColor::GetPalette(); 1518{; 1519 return fgPalette;; 1520}; 1521 ; 1522////////////////////////////////////////////////////////////////////////////////; 1523/// Static function returning number of colors in the color palette.; 1524 ; 1525Int_t TColor::GetNumberOfColors(); 1526{; 1527 return fgPalette.fN;; 1528}; 1529 ; 1530////////////////////////////////////////////////////////////////////////////////; 1531/// Static method returning kTRUE if some new colors have been defined after; 1532/// initialisation or since the last call to this method. This allows to avoid; 1533/// the colors and palette streaming in TCanvas::Streamer if not needed.; 1534/// If method called once with set_always_on = 1, all next canvases will be; 1535// saved with color palette - disregard if new colors created or not.; 1536/// To reset such mode, just call methoid once with set_always_on = -1; 1537 ; 1538Bool_t TColor::DefinedColors(Int_t set_always_on); 1539{; 1540 if (set_always_on > 0); 1541 gLastDefinedColors = -1;; 1542 else if (set_always_on < 0); 1543 gLastDefinedColors = gDefinedColors;; 1544 ; 1545 if (gLastDefinedColors < 0); 1546 return kTRUE;; 1547 ; 1548 // After initialization gDefinedColors == 649. If it is bigger it means some new; 1549 // colors have been defined; 1550 Bool_t hasChanged = (gDefinedColors - gLastDefinedColors) > 50;; 1551 gLastDefinedColors = gDefinedColors;; 1552 return hasChanged;; 1553}; 1554 ; 1555////////////////////////////////////////////////////////////////////////////////; 1556/// Return pixel value corresponding to this color. This pixel value can; 1557//",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:56186,avoid,avoid,56186,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['avoid'],['avoid']
Safety,"t_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayerRemote::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayerRemote::SetMerging(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTProofPlayerRemote::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayerRemote::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayerRemote::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofPlayerSuperMaster(TProof* proof = 0); TProofPlayerSuperMaster(const TProofPlayerSuperMaster&); virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerSuperMaster.html:11726,timeout,timeout,11726,root/html604/TProofPlayerSuperMaster.html,https://root.cern,https://root.cern/root/html604/TProofPlayerSuperMaster.html,1,['timeout'],['timeout']
Safety,"t_t iaxis) const. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const. void GetBoundingCylinder(Double_t* param) const. Int_t GetByteCount() const. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const. Int_t GetId() const; {return fShapeId;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const. void GetMeshNumbers(Int_t& , Int_t& , Int_t& ) const; {;}. Int_t GetNmeshVertices() const; {return 0;}. Bool_t IsAssembly() const; {return kFALSE;}. Bool_t IsComposite() const; {return kFALSE;}. Bool_t IsCylType() const. Bool_t IsReflected() const; {return kFALSE;}. Bool_t IsRunTimeShape() const; {return TestShapeBit(kGeoRunTimeShape);}. Bool_t IsValid() const; {return !TestShapeBit(kGeoInvalidShape);}. Bool_t IsValidBox() const. void InspectShape() const. TBuffer3D * MakeBuffer3D() const; {return 0;}. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const. void Safety_v(const Double_t* , const Bool_t* , Double_t* , Int_t ) const; {}. void SetDimensions(Double_t* param). void SetId(Int_t id); {fShapeId = id;}. void SetPoints(Double_t* points) const. void SetPoints(Float_t* points) const. void SetSegsAndPols(TBuffer3D& buff) const. void SetRuntime(Bool_t flag = kTRUE); {SetShapeBit(kGeoRunTimeShape, flag);}. void Sizeof3D() const. void SetShapeBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetShapeBit(UInt_t f); { fShapeBits &= ~(f & kBitMask32); }. Bool_t TestShapeBit(UInt_t f) const; { return (Bool_t) ((fShapeBits & f) != 0); }. Int_t TestShapeBits(UInt_t f) const; { return (Int_t) (fShapeBits & f); }. void InvertShapeBit(UInt_t f); { fShapeBits ^= f & kBitMask32; }. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:22473,Safe,Safety,22473,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,1,['Safe'],['Safety']
Safety,"t_t iaxis) const. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const. void GetBoundingCylinder(Double_t* param) const. Int_t GetByteCount() const. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const. Int_t GetId() const; {return fShapeId;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const. void GetMeshNumbers(Int_t& , Int_t& , Int_t& ) const; {;}. Int_t GetNmeshVertices() const; {return 0;}. Bool_t IsAssembly() const; {return kFALSE;}. Bool_t IsComposite() const; {return kFALSE;}. Bool_t IsCylType() const. Bool_t IsReflected() const; {return kFALSE;}. Bool_t IsRunTimeShape() const; {return TestShapeBit(kGeoRunTimeShape);}. Bool_t IsValid() const; {return !TestShapeBit(kGeoInvalidShape);}. Bool_t IsValidBox() const. void InspectShape() const. TBuffer3D * MakeBuffer3D() const; {return 0;}. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const. void Safety_v(const Double_t* , const Bool_t* , Double_t* , Int_t ) const; {}. void SetDimensions(Double_t* param). void SetId(Int_t id); {fShapeId = id;}. void SetPoints(Double_t* points) const. void SetPoints(Float_t* points) const. void SetSegsAndPols(TBuffer3D& buff) const. void SetRuntime(Bool_t flag = kTRUE); {SetShapeBit(kGeoRunTimeShape, flag);}. void Sizeof3D() const. void SetShapeBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetShapeBit(UInt_t f); { fShapeBits &= ~(f & kBitMask32); }. Bool_t TestShapeBit(UInt_t f) const; { return (Bool_t) ((fShapeBits & f) != 0); }. Int_t TestShapeBits(UInt_t f) const; { return (Int_t) (fShapeBits & f); }. void InvertShapeBit(UInt_t f); { fShapeBits ^= f & kBitMask32; }. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoShape.html:24046,Safe,Safety,24046,root/html604/TGeoShape.html,https://root.cern,https://root.cern/root/html604/TGeoShape.html,1,['Safe'],['Safety']
Safety,"t_t iaxis) const. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const. void GetBoundingCylinder(Double_t* param) const. Int_t GetByteCount() const. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const. Int_t GetId() const; {return fShapeId;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const. void GetMeshNumbers(Int_t& , Int_t& , Int_t& ) const; {;}. Int_t GetNmeshVertices() const; {return 0;}. Bool_t IsAssembly() const; {return kFALSE;}. Bool_t IsComposite() const; {return kFALSE;}. Bool_t IsCylType() const. Bool_t IsReflected() const; {return kFALSE;}. Bool_t IsRunTimeShape() const; {return TestShapeBit(kGeoRunTimeShape);}. Bool_t IsValid() const; {return !TestShapeBit(kGeoInvalidShape);}. Bool_t IsValidBox() const. void InspectShape() const. TBuffer3D * MakeBuffer3D() const; {return 0;}. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const. void Safety_v(const Double_t* , const Bool_t* , Double_t* , Int_t ) const; {}. void SetDimensions(Double_t* param). void SetId(Int_t id); {fShapeId = id;}. void SetPoints(Double_t* points) const. void SetPoints(Float_t* points) const. void SetSegsAndPols(TBuffer3D& buff) const. void SetRuntime(Bool_t flag = kTRUE); {SetShapeBit(kGeoRunTimeShape, flag);}. void Sizeof3D() const. void SetShapeBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetShapeBit(UInt_t f); { fShapeBits &= ~(f & kBitMask32); }. Bool_t TestShapeBit(UInt_t f) const; { return (Bool_t) ((fShapeBits & f) != 0); }. Int_t TestShapeBits(UInt_t f) const; { return (Int_t) (fShapeBits & f); }. void InvertShapeBit(UInt_t f); { fShapeBits ^= f & kBitMask32; }. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoShape.html:24046,Safe,Safety,24046,root/html602/TGeoShape.html,https://root.cern,https://root.cern/root/html602/TGeoShape.html,1,['Safe'],['Safety']
Safety,"t_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; static Bool_tContains(const Double_t* point, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin); virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoBBox.html:3641,safe,safe,3641,root/html532/TGeoBBox.html,https://root.cern,https://root.cern/root/html532/TGeoBBox.html,1,['safe'],['safe']
Safety,"t_t vecsize) const override;; 129 Int_t DistancetoPrimitive(Int_t px, Int_t py) override;; 130 static Double_t DistFromInsideS(const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax,; 131 Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm,; 132 Double_t sm, Double_t cdfi);; 133 Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact = 1, Double_t step = TGeoShape::Big(),; 134 Double_t *safe = nullptr) const override;; 135 void DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 136 Double_t *step) const override;; 137 static Double_t DistFromOutsideS(const Double_t *point, const Double_t *dir, Double_t rmin, Double_t rmax,; 138 Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cm,; 139 Double_t sm, Double_t cdfi);; 140 Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact = 1,; 141 Double_t step = TGeoShape::Big(), Double_t *safe = nullptr) const override;; 142 void DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize,; 143 Double_t *step) const override;; 144 TGeoVolume *; 145 Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;; 146 Double_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;; 147 void GetBoundingCylinder(Double_t *param) const override;; 148 const TBuffer3D &GetBuffer3D(Int_t reqSections, Bool_t localFrame) const override;; 149 Int_t GetByteCount() const override { return 56; }; 150 Bool_t GetPointsOnSegments(Int_t npoints, Double_t *array) const override;; 151 TGeoShape *GetMakeRuntimeShape(TGeoShape *mother, TGeoMatrix *mat) const override;; 152 Int_t GetNmeshVertices() const override;; 153 void GetMeshNumbers(Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;; 154 Double_t GetPhi1() const { return fPhi1; }; 155 Double_t GetPhi2() const { return fPhi2; }; 156 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:7480,safe,safe,7480,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['safe'],['safe']
Safety,"t_t& isegment) const; Get index of the edge of the quadrilater represented by vert closest to point.; If [P1,P2] is the closest segment and P is the point, the function returns the fraction of the; projection of (P1P) over (P1P2). If projection of P is not in range [P1,P2] return -1. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; Test if point is inside this shape.; first check Z range. Double_t DistToPlane(Double_t* point, Double_t* dir, Int_t ipl, Bool_t in) const; Computes distance to plane ipl :; ipl=0 : points 0,4,1,5; ipl=1 : points 1,5,2,6; ipl=2 : points 2,6,3,7; ipl=3 : points 3,7,0,4. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Computes distance from outside point to surface of the shape. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the shape. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide this shape along one axis. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get shape range on a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2; --- first compute rmin/rmax. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const; Fills real parameters of a positioned box inside this arb8. Returns 0 if successfull. void GetPlaneNormal(Double_t* p1, Double_t* p2, Double_t* p3, Double_t* norm); Computes normal to plane defined by P1, P2 and P3. Bool_t GetPointsOnFacet(Int_t , Int_t , Double_t* ) const; Fills array with n random points located on the surface of inde",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoArb8.html:14567,safe,safe,14567,root/html528/TGeoArb8.html,https://root.cern,https://root.cern/root/html528/TGeoArb8.html,3,['safe'],['safe']
Safety,"t_t, value_ptr*> {; 81 static void* get(typename Cont_t::iterator &iter) {; 82 return (void*)(*iter);; 83 }; 84 };; 85 ; 86 /** @class ROOT::Detail::TCollectionProxyInfo::Iterators; 87 *; 88 * Small helper to implement the function to create,access and destroy; 89 * iterators.; 90 *; 91 **/; 92 ; 93 template <typename Cont_t, bool large = false>; 94 struct Iterators {; 95 typedef Cont_t *PCont_t;; 96 typedef typename Cont_t::iterator iterator;; 97 ; 98 static void create(void *coll, void **begin_arena, void **end_arena, TVirtualCollectionProxy*) {; 99 PCont_t c = PCont_t(coll);; 100 new (*begin_arena) iterator(c->begin());; 101 new (*end_arena) iterator(c->end());; 102 }; 103 static void* copy(void *dest_arena, const void *source_ptr) {; 104 iterator *source = (iterator *)(source_ptr);; 105 new (dest_arena) iterator(*source);; 106 return dest_arena;; 107 }; 108 static void* next(void *iter_loc, const void *end_loc) {; 109 iterator *end = (iterator *)(end_loc);; 110 iterator *iter = (iterator *)(iter_loc);; 111 if (*iter != *end) {; 112 void *result = IteratorValue<Cont_t, typename Cont_t::value_type>::get(*iter);; 113 ++(*iter);; 114 return result;; 115 }; 116 return nullptr;; 117 }; 118 static void destruct1(void *iter_ptr) {; 119 iterator *start = (iterator *)(iter_ptr);; 120 start->~iterator();; 121 }; 122 static void destruct2(void *begin_ptr, void *end_ptr) {; 123 iterator *start = (iterator *)(begin_ptr);; 124 iterator *end = (iterator *)(end_ptr);; 125 start->~iterator();; 126 end->~iterator();; 127 }; 128 };; 129 ; 130 // For Vector we take an extra short cut to avoid derefencing; 131 // the iterator all the time and redefine the 'address' of the; 132 // iterator as the iterator itself. This requires special handling; 133 // in the looper (see TStreamerInfoAction) but is much faster.; 134 template <typename T> struct Iterators<std::vector<T>, false> {; 135 typedef std::vector<T> Cont_t;; 136 typedef Cont_t *PCont_t;; 137 typedef typename Cont_t::iterator ite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:4210,avoid,avoid,4210,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['avoid'],['avoid']
Safety,"t_t> TClass::fgClassCount;; 173 ; 174static bool IsFromRootCling() {; 175 // rootcling also uses TCling for generating the dictionary ROOT files.; 176 const static bool foundSymbol = dlsym(RTLD_DEFAULT, ""usedToIdentifyRootClingByDlSym"");; 177 return foundSymbol;; 178}; 179 ; 180// Implementation of the TDeclNameRegistry; 181 ; 182////////////////////////////////////////////////////////////////////////////////; 183/// TDeclNameRegistry class constructor.; 184 ; 185TClass::TDeclNameRegistry::TDeclNameRegistry(Int_t verbLevel): fVerbLevel(verbLevel); 186{; 187 // MSVC doesn't support fSpinLock=ATOMIC_FLAG_INIT; in the class definition; 188 std::atomic_flag_clear( &fSpinLock );; 189}; 190 ; 191////////////////////////////////////////////////////////////////////////////////; 192/// Extract this part of the name; 193/// 1. Templates `ns::%ns2::,,,::%THISPART<...`; 194/// 2. Namespaces,classes `ns::%ns2::,,,::%THISPART`; 195 ; 196void TClass::TDeclNameRegistry::AddQualifiedName(const char *name); 197{; 198 // Sanity check; 199 auto strLen = name ? strlen(name) : 0;; 200 if (strLen == 0) return;; 201 // find <. If none, put end of string; 202 const char* endCharPtr = strchr(name, '<');; 203 endCharPtr = !endCharPtr ? &name[strLen] : endCharPtr;; 204 // find last : before the <. If not found, put begin of string; 205 const char* beginCharPtr = endCharPtr;; 206 while (beginCharPtr!=name){; 207 if (*beginCharPtr==':'){; 208 beginCharPtr++;; 209 break;; 210 }; 211 beginCharPtr--;; 212 }; 213 beginCharPtr = beginCharPtr!=endCharPtr ? beginCharPtr : name;; 214 std::string s(beginCharPtr, endCharPtr);; 215 if (fVerbLevel>1); 216 printf(""TDeclNameRegistry::AddQualifiedName Adding key %s for class/namespace %s\n"", s.c_str(), name);; 217 ROOT::Internal::TSpinLockGuard slg(fSpinLock);; 218 fClassNamesSet.insert(s);; 219}; 220 ; 221////////////////////////////////////////////////////////////////////////////////; 222 ; 223Bool_t TClass::TDeclNameRegistry::HasDeclName(const char *name) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:7244,Sanity check,Sanity check,7244,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['Sanity check'],['Sanity check']
Safety,"t_t ; value). protected . converts UShort_t to string and add to json value buffer ; Definition at line 3987 of file TBufferJSON.cxx. ◆ JsonWriteCollection(). void TBufferJSON::JsonWriteCollection ; (; TCollection * ; obj, . const TClass * ; objClass . ). protected . store content of ROOT collection ; Definition at line 1600 of file TBufferJSON.cxx. ◆ JsonWriteConstChar(). void TBufferJSON::JsonWriteConstChar ; (; const char * ; value, . Int_t ; len = -1, . const char * ; = nullptr . ). protected . writes string value, processing all kind of special characters ; Definition at line 4025 of file TBufferJSON.cxx. ◆ JsonWriteFastArray(). template<typename T > . void TBufferJSON::JsonWriteFastArray ; (; const T * ; arr, . Long64_t ; arrsize, . const char * ; typname, . void(TBufferJSON::*)(const T *, Int_t, const char *) ; method . ). protected . Template method to write array of arbitrary dimensions Different methods can be used for store last array dimension - either JsonWriteArrayCompress<T>() or JsonWriteConstChar() ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Definition at line 3258 of file TBufferJSON.cxx. ◆ JsonWriteMember(). TString TBufferJSON::JsonWriteMember ; (; const void * ; ptr, . TDataMember * ; member, . TClass * ; memberClass, . Int_t ; arraylen . ). protected . Convert single data member to JSON structures Returns string with converted member. ; Definition at line 1007 of file TBufferJSON.cxx. ◆ JsonWriteObject(). void TBufferJSON::JsonWriteObject ; (; const void * ; obj, . const TClass * ; objClass, . Bool_t ; check_map = kTRUE . ). protected . Write object to buffer If object was written before, only pointer will be stored If check_map==kFALSE, object will be stored in any case and pointer will not be registered in the map. ; Definition at line 1323 of file TBufferJSON.cxx. ◆ PerformPostProcessing(). void TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:68564,abort,aborts,68564,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['abort'],['aborts']
Safety,"ta master version is important; 1223 // it allows to detect if streamer info was modified; 1224 const char *parname = fSniffer->IsStreamerInfoItem(arg->fPathName.Data()) ? ""BVersion"" : ""MVersion"";; 1225 arg->AddHeader(parname, TString::Format(""%u"", (unsigned)fSniffer->GetStreamerInfoHash()).Data());; 1226 }; 1227 ; 1228 // try to avoid caching on the browser; 1229 arg->AddNoCacheHeader();; 1230 ; 1231 // potentially add cors headers; 1232 if (IsCors()); 1233 arg->AddHeader(""Access-Control-Allow-Origin"", GetCors());; 1234 if (IsCorsCredentials()); 1235 arg->AddHeader(""Access-Control-Allow-Credentials"", GetCorsCredentials());; 1236}; 1237 ; 1238////////////////////////////////////////////////////////////////////////////////; 1239/// Register object in folders hierarchy; 1240///; 1241/// See TRootSniffer::RegisterObject() for more details; 1242 ; 1243Bool_t THttpServer::Register(const char *subfolder, TObject *obj); 1244{; 1245 return fSniffer->RegisterObject(subfolder, obj);; 1246}; 1247 ; 1248////////////////////////////////////////////////////////////////////////////////; 1249/// Unregister object in folders hierarchy; 1250///; 1251/// See TRootSniffer::UnregisterObject() for more details; 1252 ; 1253Bool_t THttpServer::Unregister(TObject *obj); 1254{; 1255 return fSniffer->UnregisterObject(obj);; 1256}; 1257 ; 1258////////////////////////////////////////////////////////////////////////////////; 1259/// Register WS handler to the THttpServer; 1260///; 1261/// Only such handler can be used in multi-threaded processing of websockets; 1262 ; 1263void THttpServer::RegisterWS(std::shared_ptr<THttpWSHandler> ws); 1264{; 1265 std::lock_guard<std::mutex> grd(fWSMutex);; 1266 fWSHandlers.emplace_back(ws);; 1267}; 1268 ; 1269////////////////////////////////////////////////////////////////////////////////; 1270/// Unregister WS handler to the THttpServer; 1271 ; 1272void THttpServer::UnregisterWS(std::shared_ptr<THttpWSHandler> ws); 1273{; 1274 std::lock_guard<std::mutex> grd(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:39109,avoid,avoid,39109,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['avoid'],['avoid']
Safety,"ta member to the expect set of list. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; const TList * GetListForObject (const char *name) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; const TList * GetListForObject (const TObject *obj) const;  Return the THashTable's list (bucket) in which obj can be found based on its hash; see THashTable::GetListForObject(). ;  ; void Rehash (Int_t newCapacity);  Rehash the hashlist. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool UseRWLock (Bool_t enable=true) override;  Set this collection to use a RW lock upon access, making it thread safe. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; TObject * First () const override;  Return the first object in the list. Returns 0 when list is empty. ;  ; virtual TObjLink * FirstLink () const;  ; TObject ** GetObjectRef (const TObject *obj) const override;  Return address of pointer to obj. ;  ; Bool_t IsAscending ();  ; TObject * La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfDataMembers.html:5798,safe,safe,5798,doc/master/classTListOfDataMembers.html,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html,1,['safe'],['safe']
Safety,"ta()));; 1196 ; 1197 arg->SetXml();; 1198 } else if (filename == ""h.json"") {; 1199 TString res;; 1200 TRootSnifferStoreJson store(res, arg->fQuery.Index(""compact"") != kNPOS);; 1201 const char *topname = fTopName.Data();; 1202 if (arg->fTopName.Length() > 0); 1203 topname = arg->fTopName.Data();; 1204 fSniffer->ScanHierarchy(topname, arg->fPathName.Data(), &store);; 1205 arg->SetContent(std::string(res.Data()));; 1206 arg->SetJson();; 1207 } else if (fSniffer->Produce(arg->fPathName.Data(), filename.Data(), arg->fQuery.Data(), arg->fContent)) {; 1208 // define content type base on extension; 1209 arg->SetContentType(GetMimeType(filename.Data()));; 1210 } else {; 1211 // miss request, user may process; 1212 MissedRequest(arg.get());; 1213 }; 1214 ; 1215 if (arg->Is404()); 1216 return;; 1217 ; 1218 if (iszip); 1219 arg->SetZipping(THttpCallArg::kZipAlways);; 1220 ; 1221 if (filename == ""root.bin"") {; 1222 // only for binary data master version is important; 1223 // it allows to detect if streamer info was modified; 1224 const char *parname = fSniffer->IsStreamerInfoItem(arg->fPathName.Data()) ? ""BVersion"" : ""MVersion"";; 1225 arg->AddHeader(parname, TString::Format(""%u"", (unsigned)fSniffer->GetStreamerInfoHash()).Data());; 1226 }; 1227 ; 1228 // try to avoid caching on the browser; 1229 arg->AddNoCacheHeader();; 1230 ; 1231 // potentially add cors headers; 1232 if (IsCors()); 1233 arg->AddHeader(""Access-Control-Allow-Origin"", GetCors());; 1234 if (IsCorsCredentials()); 1235 arg->AddHeader(""Access-Control-Allow-Credentials"", GetCorsCredentials());; 1236}; 1237 ; 1238////////////////////////////////////////////////////////////////////////////////; 1239/// Register object in folders hierarchy; 1240///; 1241/// See TRootSniffer::RegisterObject() for more details; 1242 ; 1243Bool_t THttpServer::Register(const char *subfolder, TObject *obj); 1244{; 1245 return fSniffer->RegisterObject(subfolder, obj);; 1246}; 1247 ; 1248/////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:38830,detect,detect,38830,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['detect'],['detect']
Safety,"ta(), s1.Length(), s2.Data(), s2.Length()) ; }. TString & ReplaceAll(const TString& s1, const char* s2); { return ReplaceAll(s1.Data(), s1.Length(), s2, s2 ? strlen(s2) : 0); }. TString & ReplaceAll(const char* s1, const TString& s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2.Data(), s2.Length()); }. TString & ReplaceAll(const char* s1, const char* s2); { return ReplaceAll(s1, s1 ? strlen(s1) : 0, s2, s2 ? strlen(s2) : 0); }. TString & Swap(TString& other); Swap the contents of other and this without reallocation. char & operator()(Ssiz_t i); { return GetPointer()[i]; }. char operator()(Ssiz_t i) const; { return GetPointer()[i]; }. char & operator[](Ssiz_t i); { AssertElement(i); return GetPointer()[i]; }. char operator[](Ssiz_t i) const; { AssertElement(i); return GetPointer()[i]; }. TSubString & operator=(const char* s). char & operator()(Ssiz_t i). char operator()(Ssiz_t i) const. const char * Data() const. Ssiz_t Length() const; { return fExtent; }. Bool_t IsNull() const; For detecting null substrings. { return fBegin == kNPOS; }. TString(const char* a1, Ssiz_t n1, const char* a2, Ssiz_t n2); Special concatenation constructor. Ssiz_t Align(Ssiz_t s); { return (s + (kAlignment-1)) & ~(kAlignment-1); }. Ssiz_t Recommend(Ssiz_t s); { return (s < kMinCap ? kMinCap : Align(s+1)) - 1; }. Bool_t IsLong() const; { return Bool_t(fRep.fShort.fSize & kShortMask); }. void SetShortSize(Ssiz_t s); { fRep.fShort.fSize = (unsigned char)(s << 1); }. Ssiz_t GetShortSize() const; { return fRep.fShort.fSize >> 1; }. void SetLongSize(Ssiz_t s); { fRep.fLong.fSize = s; }. Ssiz_t GetLongSize() const; { return fRep.fLong.fSize; }. void SetSize(Ssiz_t s); { IsLong() ? SetLongSize(s) : SetShortSize(s); }. void SetLongCap(Ssiz_t s); { fRep.fLong.fCap = kLongMask | s; }. Ssiz_t GetLongCap() const; { return fRep.fLong.fCap & ~kLongMask; }. void SetLongPointer(char* p); { fRep.fLong.fData = p; }. char * GetLongPointer(); { return fRep.fLong.fData; }. const char * GetLongPointer() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TString.html:26089,detect,detecting,26089,root/html604/TString.html,https://root.cern,https://root.cern/root/html604/TString.html,1,['detect'],['detecting']
Safety,"ta(); voidTProof::ShowDataSet(const char* dataset = """", const char* opt = ""filter:SsCc""); virtual voidShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidShowDataSets(const char* uri = """", const char* = 0); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tVerifyDataSet(const char* uri, const char* = 0); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:18316,timeout,timeout,18316,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,2,['timeout'],['timeout']
Safety,"taFrame will execute in each worker thread concurrently on that thread's partial result.; 335 ///; 336 /// \param[in] everyNEvents Frequency at which the callback will be called by each thread, as a number of events processed; 337 /// \param[in] callback A callable with signature `void(unsigned int, Value_t&)` where Value_t is the type of the value contained in this RResultPtr; 338 /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; 339 ///; 340 /// See `OnPartialResult` for a generic explanation of the callback mechanism.; 341 /// Compared to `OnPartialResult`, this method has two major differences:; 342 /// - all worker threads invoke the callback once every specified number of events. The event count is per-thread,; 343 /// and callback invocation might happen concurrently (i.e. the callback must be thread-safe); 344 /// - the callable must take an extra `unsigned int` parameter corresponding to a multi-thread ""processing slot"":; 345 /// this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the; 346 /// callback concurrently but always with different `slot` numbers.; 347 /// - a value of 0 for everyNEvents indicates the callback must be executed once _per slot_.; 348 ///; 349 /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; 350 /// \code; 351 /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; 352 /// std::string progress;; 353 /// std::mutex bar_mutex;; 354 /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; 355 /// std::lock_guard<std::mutex> lg(bar_mutex);; 356 /// progress.push_back('#');; 357 /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; 358 /// });; 359 /// std::cout << ""Analysis running..."" << std::endl;; 360 /// *c; // trigger the event loop by accessing an action's result; 361 /// std",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RResultPtr_8hxx_source.html:15284,safe,safe,15284,doc/master/RResultPtr_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RResultPtr_8hxx_source.html,2,['safe'],['safe']
Safety,"taSet(const char* dataset = """", const char* opt = ""filter:SsCc""); virtual voidTProof::ShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidTProof::ShowDataSets(const char* uri = """", const char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofCondor(const TProofCondor&); TProofCondor(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:19036,timeout,timeout,19036,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,2,['timeout'],['timeout']
Safety,"taSet(const char* dataset = """", const char* opt = ""filter:SsCc""); virtual voidTProof::ShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidTProof::ShowDataSets(const char* uri = """", const char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofSuperMaster.html:18871,timeout,timeout,18871,root/html602/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofSuperMaster.html,2,['timeout'],['timeout']
Safety,"tain algorithm,; you may want to try another algorithm and compare the results.; One solution is to add a new branch, fill it, and save the tree.; The code below adds a simple branch to an existing tree.; Note the kOverwrite option in the Write method, it overwrites the; existing tree. If it is not specified, two copies of the tree headers; are saved. void tree3AddBranch(){; TFile f(""tree3.root"", ""update"");. Float_t new_v;; TTree *t3 = (TTree*)f->Get(""t3"");; TBranch *newBranch = t3->Branch(""new_v"", &new_v, ""new_v/F"");. //read the number of entries in the t3; Long64_t nentries = t3->GetEntries();. for (Long64_t i = 0; i < nentries; i++){; new_v= gRandom->Gaus(0, 1);; newBranch->Fill();; }; // save only the new version of the tree; t3->Write("""", TObject::kOverwrite);; }; Adding a branch is often not possible because the tree is in a read-only; file and you do not have permission to save the modified tree with the; new branch. Even if you do have the permission, you risk losing the; original tree with an unsuccessful attempt to save the modification.; Since trees are usually large, adding a branch could extend it over the; 2GB limit. In this case, the attempt to write the tree fails, and the; original data is erased.; In addition, adding a branch to a tree enlarges the tree and increases; the amount of memory needed to read an entry, and therefore decreases; the performance. For these reasons, ROOT offers the concept of friends for trees (and chains).; We encourage you to use TTree::AddFriend rather than adding a branch manually. /*. */. A simple example with histograms and a tree*-*-*-; *-* ===========================================. This program creates :; - a one dimensional histogram; - a two dimensional histogram; - a profile histogram; - a tree. These objects are filled with some random numbers and saved on a file. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:7878,risk,risk,7878,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,6,['risk'],['risk']
Safety,"tained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& ); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. CodeRepo(const RooWorkspace::CodeRepo& other, RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Sat Jun 20 17:31:19 2015 » Last generated: 2015-06-20 17:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooWorkspace__CodeRepo.html:8185,avoid,avoid,8185,root/html604/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html604/RooWorkspace__CodeRepo.html,1,['avoid'],['avoid']
Safety,"tained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& ); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. CodeRepo(const RooWorkspace::CodeRepo& other, RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Tue Jun 30 14:38:14 2015 » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooWorkspace__CodeRepo.html:8185,avoid,avoid,8185,root/html602/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html602/RooWorkspace__CodeRepo.html,1,['avoid'],['avoid']
Safety,"tained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& ); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. CodeRepo(const RooWorkspace::CodeRepo& other, RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Tue Mar 10 17:21:16 2015 » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace__CodeRepo.html:7652,avoid,avoid,7652,root/html534/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html534/RooWorkspace__CodeRepo.html,1,['avoid'],['avoid']
Safety,"tained in this RResultPtr; 338 /// \return this RResultPtr, to allow chaining of OnPartialResultSlot with other calls; 339 ///; 340 /// See `OnPartialResult` for a generic explanation of the callback mechanism.; 341 /// Compared to `OnPartialResult`, this method has two major differences:; 342 /// - all worker threads invoke the callback once every specified number of events. The event count is per-thread,; 343 /// and callback invocation might happen concurrently (i.e. the callback must be thread-safe); 344 /// - the callable must take an extra `unsigned int` parameter corresponding to a multi-thread ""processing slot"":; 345 /// this is a ""helper value"" to simplify writing thread-safe callbacks: different worker threads might invoke the; 346 /// callback concurrently but always with different `slot` numbers.; 347 /// - a value of 0 for everyNEvents indicates the callback must be executed once _per slot_.; 348 ///; 349 /// For example, the following snippet prints out a thread-safe progress bar of the events processed by RDataFrame; 350 /// \code; 351 /// auto c = tdf.Count(); // any action would do, but `Count` is the most lightweight; 352 /// std::string progress;; 353 /// std::mutex bar_mutex;; 354 /// c.OnPartialResultSlot(nEvents / 100, [&progress, &bar_mutex](unsigned int, ULong64_t &) {; 355 /// std::lock_guard<std::mutex> lg(bar_mutex);; 356 /// progress.push_back('#');; 357 /// std::cout << ""\r["" << std::left << std::setw(100) << progress << ']' << std::flush;; 358 /// });; 359 /// std::cout << ""Analysis running..."" << std::endl;; 360 /// *c; // trigger the event loop by accessing an action's result; 361 /// std::cout << ""\nDone!"" << std::endl;; 362 /// \endcode; 363 // clang-format on; 364 RResultPtr<T> &OnPartialResultSlot(ULong64_t everyNEvents, std::function<void(unsigned int, T &)> callback); 365 {; 366 ThrowIfNull();; 367 auto actionPtr = fActionPtr;; 368 auto c = [actionPtr, callback](unsigned int slot) {; 369 auto partialResult = static_cast<Value_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RResultPtr_8hxx_source.html:15772,safe,safe,15772,doc/master/RResultPtr_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RResultPtr_8hxx_source.html,1,['safe'],['safe']
Safety,"tains(""N"")) { // option ""N"" is not store fit function; 2573 TF1* pFunc = (TF1*)f1->IsA()->New();; 2574 f1->Copy(*pFunc);; 2575 ; 2576 if(bDeleteOld) {; 2577 TIter next(fFunctions);; 2578 TObject* obj = nullptr;; 2579 while((obj = next())) {; 2580 if(obj->InheritsFrom(TF1::Class())) {; 2581 fFunctions->Remove(obj);; 2582 delete obj;; 2583 }; 2584 }; 2585 }; 2586 // create list if necessary; 2587 if(!fFunctions); 2588 fFunctions = new TList();; 2589 ; 2590 fFunctions->Add(pFunc);; 2591 }; 2592 ; 2593 return result;; 2594}; 2595 ; 2596////////////////////////////////////////////////////////////////////////////////; 2597/// Returns a cloned version of fPassedHistogram; 2598///; 2599/// Notes:; 2600/// - The histogram is filled with unit weights. You might want to scale; 2601/// it with the global weight GetWeight().; 2602/// - The returned object is owned by the user who has to care about the; 2603/// deletion of the new TH1 object.; 2604/// - This histogram is by default NOT attached to the current directory; 2605/// to avoid duplication of data. If you want to store it automatically; 2606/// during the next TFile::Write() command, you have to attach it to; 2607/// the corresponding directory.; 2608///; 2609/// ~~~~~~~{.cpp}; 2610/// TFile* pFile = new TFile(""passed.root"",""update"");; 2611/// TEfficiency* pEff = (TEfficiency*)gDirectory->Get(""my_eff"");; 2612/// TH1* copy = pEff->GetCopyPassedHisto();; 2613/// copy->SetDirectory(gDirectory);; 2614/// pFile->Write();; 2615/// ~~~~~~~; 2616 ; 2617TH1* TEfficiency::GetCopyPassedHisto() const; 2618{; 2619 // do not add cloned histogram to gDirectory; 2620 TDirectory::TContext ctx(nullptr);; 2621 TH1* tmp = (TH1*)(fPassedHistogram->Clone());; 2622 ; 2623 return tmp;; 2624}; 2625 ; 2626////////////////////////////////////////////////////////////////////////////////; 2627/// Returns a cloned version of fTotalHistogram; 2628///; 2629/// Notes:; 2630/// - The histogram is filled with unit weights. You might want to scale; 2631/// ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:104886,avoid,avoid,104886,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['avoid'],['avoid']
Safety,"tandalone viewer, bound to supplied 'pad'. ;  ;  ~TGLSAViewer () override;  Destroy standalone viewer object. ;  ; void Close ();  Close the viewer - destructed. ;  ; void CreateGLWidget () override;  Create a GLwidget, it is an error if it is already created. ;  ; void DeleteMenuBar ();  Delete the menu bar. ;  ; void DestroyGLWidget () override;  Destroy the GLwidget, it is an error if it does not exist. ;  ; void DisableCloseMenuEntries ();  Deactivate menu entries for closing the GL window and exiting ROOT. ;  ; void DisableMenuBarHiding ();  Disable hiding of menu bar. ;  ; void EnableMenuBarHiding ();  Enable hiding of menu bar. ;  ; TGLFormat * GetFormat () const;  ; TGCompositeFrame * GetFrame () const;  Return the main-frame. ;  ; TGCompositeFrame * GetLeftVerticalFrame () const;  ; const char * GetName () const override;  Returns name of object. ;  ; void HandleMenuBarHiding (Event_t *ev);  Maybe switch menu-bar / menu-button. ;  ; TClass * IsA () const override;  ; void MenuHidingTimeout ();  Action for menu-hiding timeout. ;  ; Bool_t ProcessFrameMessage (Long_t msg, Long_t parm1, Long_t);  Process GUI message capture by the main GUI frame (TGLSAFrame). ;  ; void SelectionChanged () override;  Update GUI components for embedded viewer selection change. ;  ; void Show ();  Show the viewer. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void ToggleEditObject ();  Toggle state of the 'Edit Object' menu entry. ;  ; void ToggleOrthoDolly ();  Toggle state of the 'Ortho allow dolly' menu entry. ;  ; void ToggleOrthoRotate ();  Toggle state of the 'Ortho allow rotate' menu entry. ;  ;  Public Member Functions inherited from TGLViewer;  TGLViewer (TVirtualPad *pad);  ;  TGLViewer (TVirtualPad *pad, Int_t x, Int_t y, Int_t width, Int_t height);  ;  ~TGLViewer () override;  Destroy viewer object. ;  ; virtual void Activated ();  ; void AddCompositeOp (UInt_t) overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:3545,timeout,timeout,3545,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['timeout'],['timeout']
Safety,"taset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TTableDescriptor * GetDescriptorPointer() const; return column descriptor. void SetDescriptorPointer(TTableDescriptor* list); set table descriptor. void SetCommentsSetName(const char* name = "".comments""); set comments name. void Streamer(TBuffer& ); The custom Streamer for this table. TTableDescriptor(const TTable* parentTable); to be documented. TTableDescriptor(TClass* classPtr); Create a descriptor of the C-structure defined by TClass; TClass *classPtr must be a valid pointer to TClass object for; ""plain"" C_struture only !!!. ~TTableDescriptor(); class destructor. Int_t AddAt(const void* c); Append one row pointed by ""c"" to the descriptor. void AddAt(const void* c, Int_t i); Add one row pointed by ""c"" to the ""i""-th row of the descriptor. void AddAt(TDataSet* dataset, Int_t idx = 0); Add one dataset to the descriptor.; There is no new implementation here.; One needs it to avoid the ""hidden method"" compilation warning. void AddAt(const tableDescriptor_st& element, const char* comment, Int_t indx); Add the descriptor element followed by its commentText; at the indx-th position of the descriptor (counted from zero). TString CreateLeafList() const; Create a list of leaf to be useful for TBranch::TBranch ctor. void Init(TClass* classPtr); Create a descriptor of the C-structure defined by TClass; TClass *classPtr must be a valid pointer to TClass object for; ""plain"" C_structure only !!!. void LearnTable(const TTable* parentTable); to be documented. void LearnTable(TClass* classPtr). LearnTable() creates an array of the descriptors for elements of the row. It creates a descriptor of the C-structure defined by TClass; TClass *classPtr must be a valid pointer to TClass object for; ""plain"" C-structure only !!!. This is to introduce an artificial restriction demanded by STAR database group. 1. the name may be 31 symbols at most; 2. the number the dimension is 3 at most. To lift",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTableDescriptor.html:17886,avoid,avoid,17886,root/html604/TTableDescriptor.html,https://root.cern,https://root.cern/root/html604/TTableDescriptor.html,1,['avoid'],['avoid']
Safety,"tasets, a situation very common in HEP data analysis ;  df017_vecOpsHEP.C This tutorial shows how VecOps can be used to slim down the programming model typically adopted in HEP for analysis ;  df017_vecOpsHEP.py This tutorial shows how VecOps can be used to slim down the programming model typically adopted in HEP for analysis ;  df018_customActions.C This tutorial shows how to implement a custom action ;  df101_h1Analysis.C This tutorial illustrates how to express the H1 analysis with a RDataFrame ;  ► eve;  alice_esd.CComplex example showing ALICE ESD track visualization ;  alice_esd_html_summary.CHtml table and event summary for alice_esd.C ;  alice_esd_split.CComplex example showing ALICE ESD visualization in several views ;  alice_vsd.CComplex example showing ALICE VSD visualization ;  annotation.CDemonstrates usage of TGLAnnotation class ;  arrow.CDemonstrates usage of TEveArrow class ;  arrow_standalone.CHow to use EVE without the standard window ;  assembly.CGeometry detector assembly example ;  box.CDemonstrates usage of TEveBox class ;  boxset.CDemonstrates usage of TEveBoxSet class ;  boxset_cones.CDemonstrates usage of 'cone' mode in TEveBoxSet class ;  calo_detail.CCalorimeter detailed view by using TEveCaloDataVec as data-source ;  calorimeters.CDemonstrates usage of EVE calorimetry classes ;  camera_restore.C;  compound.CDemonstrates usage of EVE compound objects - class TEveCompound ;  csgdemo.CCombinatorial Solid Geometry example ;  geom_alias.CDemonstates usage of geometry aliases - merge ALICE ITS with ATLAS MUON ;  geom_alice_its.CShows geometry of ALICE ITS ;  geom_alice_tpc.CShows geometry of ALICE TPC ;  geom_atlas.CShows ATLAS geometry ;  geom_atlas_playback.CPlays back event-recording of a root session running geom_atlas.C tutorial ;  geom_cms.CShows CMS geometry ;  geom_cms_playback.CPlays back event-recording of a root session running geom_cms.C tutorial ;  geom_cms_stereo.CShows CMS geometry in stereo mode ;  geom_default.CDemonstrates usag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:101575,detect,detector,101575,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['detect'],['detector']
Safety,"tatic Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TTimer.h>. Inheritance diagram for TTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TTimer() [1/4]. TTimer::TTimer ; (; const TTimer & ; ). privatedelete . ◆ TTimer() [2/4]. TTimer::TTimer ; (; Long_t ; ms = 0, . Bool_t ; mode = kTRUE . ). Create timer that times out in ms milliseconds. ; If milliSec is 0 then the timeout will be the minimum timeout (see TSystem::ESysConstants, i.e. 10 ms). If mode == kTRUE then the timer is synchronous else a-synchronous. The default is synchronous. Add a timer to the system eventloop by calling TurnOn(). Set command to be executed from Notify() or set the object whose HandleTimer() method will be called via Notify(), derive from TTimer and override Notify() or connect slots to the signals Timeout(), TurnOn() and TurnOff(). ; Definition at line 88 of file TTimer.cxx. ◆ TTimer() [3/4]. TTimer::TTimer ; (; TObject * ; obj, . Long_t ; ms, . Bool_t ; mode = kTRUE . ). Create timer that times out in ms milliseconds. ; If mode == kTRUE then the timer is synchronous else a-synchronous. The default is synchronous. Add a timer to the system eventloop by calling TurnOn(). The object's HandleTimer() will be called by Notify(). ; Definition at line 103 of file TTimer.cxx. ◆ TTimer() [4/4]. TTimer::TTimer ; (; const char * ; command, . Long_t ; ms, . Bool_t ; mode = kTRUE . ). Create timer th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTimer.html:19134,timeout,timeout,19134,doc/master/classTTimer.html,https://root.cern,https://root.cern/doc/master/classTTimer.html,2,['timeout'],['timeout']
Safety,"tatic Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; static Bool_tContains(const Double_t* point, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin); virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromInside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBBox.html:3505,safe,safe,3505,root/html528/TGeoBBox.html,https://root.cern,https://root.cern/root/html528/TGeoBBox.html,1,['safe'],['safe']
Safety,"tatic TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older tha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelector.html:9971,abort,aborted,9971,root/html602/TSelector.html,https://root.cern,https://root.cern/root/html602/TSelector.html,2,['abort'],['aborted']
Safety,"tatic TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TShape*fConnectionshape to represent the each ""end"" of the polyline; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Bool_tfHasDrawnflag to avoid multiply plots; Color_tTAttLine::fLineColorline color; Bool_tfLineFlagFlag whether we should connect the points with ""line"" (option ""L""); Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTShape::fNumberShape number; Bool_tfPointFlagFlag whether we should paint ""points"" (option ""P""); TPoints3DABC*fPointsPolyLine itself; TShape*fShapeshape for draw each segment of the polylins; EShapeTypesfShapeTypeshape of the segment connections; Size3D*fSizeX3D! the X3D buffer sizes; Bool_tfSmoothMake smooth connections; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfWidthFactorfactor to calculate the the tube diameters. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPolyLineShape(); to be documented. TPolyLineShape(TPoints3DABC* points, Option_t* option = ""P""); fShape = new TTUBE(""tube"",""tube"",""void"",0.5,0.5);. ~TPolyLineShape(); to be documented. void Create(); to be documented. Size3D * CreateX3DSize(Bool_t marker = kFALSE); to be documented. Int_t SetConnection(EShapeTypes connection = kBrik); to be documented. Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPolyLineShape.html:10605,avoid,avoid,10605,root/html602/TPolyLineShape.html,https://root.cern,https://root.cern/root/html602/TPolyLineShape.html,2,['avoid'],['avoid']
Safety,"tatic voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReady(TSocket* sock)SIGNAL ; virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(TSocket* sock); virtual voidRemoveAll(); voidTObject::ResetBit(UInt_t f); voidResetInterrupt(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); TSocket*Select(); TSocket*Select(Long_t timeout); Int_tSelect(TList* rdready, TList* wrready, Long_t timeout); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInterest(TSocket* sock, Int_t interest = kRead); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:7391,timeout,timeout,7391,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,2,['timeout'],['timeout']
Safety,"tatistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments; Note that this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""nto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSVDUnfold.html:7921,detect,detector,7921,root/html530/TSVDUnfold.html,https://root.cern,https://root.cern/root/html530/TSVDUnfold.html,3,['detect'],['detector']
Safety,"tatus; TStringfUserslave's user id; TStringfWorkDirslave's working directory (info obtained from slave). private:. static TSlave_tfgTXSlaveHook. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. TSlave(); Default constructor used by derived classes. void Init(const char* host, Int_t port, Int_t stype); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSlave.html:8974,avoid,avoid,8974,root/html528/TSlave.html,https://root.cern,https://root.cern/root/html528/TSlave.html,4,['avoid'],['avoid']
Safety,"tatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfPrefixprefix to prepend to requests; TNetSystem*fSysteminstance of the admin interface. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNetFileStager(const char* stager = """"); Constructor. Init a TNetSystem instance to the remote rootd. ~TNetFileStager(); Destructor. Bool_t IsStaged(const char* path); Check if the file defined by 'path' is ready to be used. void GetPrefix(const char* url, TString& pfx); Isolate prefix in url. void Print(Option_t* option = """") const; Print basic info about this stager. Int_t Locate(const char* path, TString& endpath); Get actual end-point url for a path; Returns 0 in case of success and 1 if any error occured. Bool_t Matches(const char* s); Returns kTRUE if stager 's' is compatible with current stager.; Avoids multiple instantiations of the potentially the same TNetSystem. TNetFileStager(const char* stager = """"). Bool_t IsValid() const; { return (fSystem ? kTRUE : kFALSE); }. » Author: G. Ganis Feb 2011 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-06-30 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetFileStager.html:7442,Avoid,Avoids,7442,root/html602/TNetFileStager.html,https://root.cern,https://root.cern/root/html602/TNetFileStager.html,1,['Avoid'],['Avoids']
Safety,"tatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TStringfPrefixprefix to prepend to requests; TNetSystem*fSysteminstance of the admin interface. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNetFileStager(const char* stager = """"); Constructor. Init a TNetSystem instance to the remote rootd. ~TNetFileStager(); Destructor. Bool_t IsStaged(const char* path); Check if the file defined by 'path' is ready to be used. void GetPrefix(const char* url, TString& pfx); Isolate prefix in url. void Print(Option_t* option = """") const; Print basic info about this stager. Int_t Locate(const char* path, TString& endpath); Get actual end-point url for a path; Returns 0 in case of success and 1 if any error occured. Bool_t Matches(const char* s); Returns kTRUE if stager 's' is compatible with current stager.; Avoids multiple instantiations of the potentially the same TNetSystem. TNetFileStager(const char* stager = """"). Bool_t IsValid() const; { return (fSystem ? kTRUE : kFALSE); }. » Author: G. Ganis Feb 2011 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TNetFileStager.html:7442,Avoid,Avoids,7442,root/html604/TNetFileStager.html,https://root.cern,https://root.cern/root/html604/TNetFileStager.html,1,['Avoid'],['Avoids']
Safety,"tax as the argument of SetMakeSharedLib but is; 4084/// used to create an executable. This creation is used as a means to output; 4085/// a list of unresolved symbols, when loading a shared library has failed.; 4086/// The required variable is $ExeName rather than $SharedLib, e.g.:; 4087/// ~~~ {.cpp}; 4088/// gSystem->SetMakeExe(; 4089/// ""g++ -Wall -fPIC $IncludePath $SourceFiles; 4090/// -o $ExeName $LinkedLibs -L/usr/X11R6/lib -lX11 -lm -ldl -rdynamic"");; 4091/// ~~~; 4092 ; 4093void TSystem::SetMakeExe(const char *directives); 4094{; 4095 fMakeExe = directives;; 4096 // NOTE: add verification that the directives has the required variables; 4097}; 4098 ; 4099////////////////////////////////////////////////////////////////////////////////; 4100/// Directives should contain the description on how to compile and link a; 4101/// shared lib. This description can be any valid shell command, including; 4102/// the use of ';' to separate several instructions. However, shell specific; 4103/// construct should be avoided. In particular this description can contain; 4104/// environment variables, like $ROOTSYS (or %ROOTSYS% on windows).; 4105/// ~~~ {.cpp}; 4106/// Five special variables will be expanded before execution:; 4107/// Variable name Expands to; 4108/// ------------- ----------; 4109/// $SourceFiles Name of source files to be compiled; 4110/// $SharedLib Name of the shared library being created; 4111/// $LibName Name of shared library without extension; 4112/// $BuildDir Directory where the files will be created; 4113/// $IncludePath value of fIncludePath; 4114/// $LinkedLibs value of fLinkedLibs; 4115/// $DepLibs libraries on which this library depends on; 4116/// $ObjectFiles Name of source files to be compiler with; 4117/// their extension changed to .o or .obj; 4118/// $Opt location of the optimization/debug options; 4119/// set fFlagsDebug and fFlagsOpt; 4120/// ~~~; 4121/// e.g.:; 4122/// ~~~ {.cpp}; 4123/// gSystem->SetMakeSharedLib(; 4124/// ""KCC -n32 --",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:140048,avoid,avoided,140048,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['avoid'],['avoided']
Safety,"tbin==0 && lastbin == inNbin+1);; 2359 if (reuseStats) {; 2360 Double_t stats[kNstat];; 2361 GetStats(stats);; 2362 if (!onX) { // case of projection on Y; 2363 stats[2] = stats[4];; 2364 stats[3] = stats[5];; 2365 }; 2366 h1->PutStats(stats);; 2367 }; 2368 else {; 2369 // the statistics is automatically recalculated since it is reset by the call to SetBinContent; 2370 // we just need to set the entries since they have not been correctly calculated during the projection; 2371 // we can only set them to the effective entries; 2372 h1->SetEntries( h1->GetEffectiveEntries() );; 2373 }; 2374 if (reuseEntries) {; 2375 h1->SetEntries(fEntries);; 2376 }; 2377 else {; 2378 // re-compute the entries; 2379 // in case of error calculation (i.e. when Sumw2() is set); 2380 // use the effective entries for the entries; 2381 // since this is the only way to estimate them; 2382 Double_t entries = TMath::Floor( totcont + 0.5); // to avoid numerical rounding; 2383 if (h1->GetSumw2N()) entries = h1->GetEffectiveEntries();; 2384 h1->SetEntries( entries );; 2385 }; 2386 ; 2387 if (opt.Contains(""d"")) {; 2388 TVirtualPad::TContext ctxt(gROOT->GetSelectedPad(), true, true);; 2389 opt.Remove(opt.First(""d""),1);; 2390 // remove also other options; 2391 if (opt.Contains(""e"")) opt.Remove(opt.First(""e""),1);; 2392 if (!gPad || !gPad->FindObject(h1)) {; 2393 h1->Draw(opt);; 2394 } else {; 2395 h1->Paint(opt);; 2396 }; 2397 }; 2398 ; 2399 return h1;; 2400}; 2401 ; 2402 ; 2403////////////////////////////////////////////////////////////////////////////////; 2404/// Project a 2-D histogram into a 1-D histogram along X.; 2405///; 2406/// The projection is always of the type TH1D.; 2407/// The projection is made from the channels along the Y axis; 2408/// ranging from firstybin to lastybin included.; 2409/// By default, all bins including under- and overflow are included.; 2410/// The number of entries in the projection is estimated from the; 2411/// number of effective entries for all the cells included",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:96980,avoid,avoid,96980,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['avoid'],['avoid']
Safety,"tc.; Returns kTRUE in case of failure. Int_t ReadBufferViaCache(char* buf, Int_t len); Read buffer via cache. Returns 0 if the requested block is; not in the cache, 1 in case read via cache was successful,; 2 in case read via cache failed. void ReadFree(); Read the FREE linked list.; Every file has a linked list (fFree) of free segments.; This linked list has been written on the file via WriteFree; as a single data record. TProcessID * ReadProcessID(UShort_t pidf); The TProcessID with number pidf is read from this file.; If the object is not already entered in the gROOT list, it is added. Int_t Recover(); Attempt to recover file if not correctly closed.; The function returns the number of keys that have been recovered.; If no keys can be recovered, the file will be declared Zombie by; the calling function. This function is automatically called when; opening a file. If the file is open in read only mode, the file is not modified.; If open in update mode and the function finds something to recover,; a new directory header is written to the file. When opening the file gain; no message from Recover will be reported.; If keys have been recovered, the file is usable and you can safely; read the corresponding objects.; If the file is not usable (a zombie), you can test for this case; with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {file is unusable); If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; You can test if the file has been recovered with; if (f.TestBit(TFile::kRecovered)) {.. the file has been recovered}. When writing TTrees to a file, it is important to save the Tree header; at regular intervals (see TTree::AutoSave). If a file containing a Tree; is recovered, the last Tree header written to the file will be used.; In this case all the entries in all the branches written before writing; the header are valid entries. One can disable the automatic recovery procedure by setting; TFile.Recover 0; in the system.rootr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:34893,recover,recover,34893,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['recover'],['recover']
Safety,"td::string nameSuffix ;; 2001 if (compSpec && strlen(compSpec)>0) {; 2002 nameSuffix.append(""_Comp["") ;; 2003 nameSuffix.append(compSpec) ;; 2004 nameSuffix.append(""]"") ;; 2005 } else if (compSet) {; 2006 nameSuffix += ""_Comp["" + compSet->contentsString() + ""]"";; 2007 }; 2008 ; 2009 // Remove PDF-only commands from command list; 2010 RooCmdConfig::stripCmdList(cmdList,""SelectCompSet,SelectCompSpec"") ;; 2011 ; 2012 // Adjust normalization, if so requested; 2013 if (asymCat) {; 2014 RooCmdArg cnsuffix(""CurveNameSuffix"",0,0,0,0,nameSuffix.c_str(),nullptr,nullptr,nullptr) ;; 2015 cmdList.Add(&cnsuffix);; 2016 return RooAbsReal::plotOn(frame,cmdList) ;; 2017 }; 2018 ; 2019 // More sanity checks; 2020 double nExpected(1) ;; 2021 if (stype==RelativeExpected) {; 2022 if (!canBeExtended()) {; 2023 coutE(Plotting) << ""RooAbsPdf::plotOn("" << GetName(); 2024 << ""): ERROR the 'Expected' scale option can only be used on extendable PDFs"" << endl ;; 2025 return frame ;; 2026 }; 2027 frame->updateNormVars(*frame->getPlotVar()) ;; 2028 nExpected = expectedEvents(frame->getNormVars()) ;; 2029 }; 2030 ; 2031 if (stype != Raw) {; 2032 ; 2033 if (frame->getFitRangeNEvt() && stype==Relative) {; 2034 ; 2035 bool hasCustomRange(false);; 2036 bool adjustNorm(false);; 2037 ; 2038 std::vector<pair<double,double> > rangeLim;; 2039 ; 2040 // Retrieve plot range to be able to adjust normalization to data; 2041 if (pc.hasProcessed(""Range"")) {; 2042 ; 2043 double rangeLo = pc.getDouble(""rangeLo"") ;; 2044 double rangeHi = pc.getDouble(""rangeHi"") ;; 2045 rangeLim.push_back(make_pair(rangeLo,rangeHi)) ;; 2046 adjustNorm = pc.getInt(""rangeAdjustNorm"") ;; 2047 hasCustomRange = true ;; 2048 ; 2049 coutI(Plotting) << ""RooAbsPdf::plotOn("" << GetName() << "") only plotting range [""; 2050 << rangeLo << "","" << rangeHi << ""]"" ;; 2051 if (!pc.hasProcessed(""NormRange"")) {; 2052 ccoutI(Plotting) << "", curve is normalized to data in "" << (adjustNorm?""given"":""full"") << "" range"" << endl ;; 2053 } else {; 2054 ccoutI(P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:99801,sanity check,sanity checks,99801,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['sanity check'],['sanity checks']
Safety,"td::string xurl(len, 0);; 4114 if (getxattr(fileurl.GetFile(), ""eos.url.xroot"", &xurl[0], len) == len) {; 4115 if ((f = TFile::Open(xurl.c_str(), options, ftitle, compress, netopt))) {; 4116 if (!f->IsZombie()) {; 4117 return f;; 4118 } else {; 4119 delete f;; 4120 f = nullptr;; 4121 }; 4122 }; 4123 }; 4124 }; 4125 }; 4126 }; 4127#endif; 4128 ; 4129 // If a timeout has been specified extract the value and try to apply it (it requires; 4130 // support for asynchronous open, though; the following is completely transparent if; 4131 // such support if not available for the required protocol); 4132 TString opts(options);; 4133 Int_t ito = opts.Index(""TIMEOUT="");; 4134 if (ito != kNPOS) {; 4135 TString sto = opts(ito + strlen(""TIMEOUT=""), opts.Length());; 4136 while (!(sto.IsDigit()) && !(sto.IsNull())) { sto.Remove(sto.Length()-1,1); }; 4137 if (!(sto.IsNull())) {; 4138 // Timeout in millisecs; 4139 Int_t toms = sto.Atoi() * 1000;; 4140 if (gDebug > 0) ::Info(""TFile::Open"", ""timeout of %d millisec requested"", toms);; 4141 // Remove from the options field; 4142 sto.Insert(0, ""TIMEOUT="");; 4143 opts.ReplaceAll(sto, """");; 4144 // Asynchronous open; 4145 TFileOpenHandle *fh = TFile::AsyncOpen(expandedUrl, opts, ftitle, compress, netopt);; 4146 // Check the result in steps of 1 millisec; 4147 TFile::EAsyncOpenStatus aos = TFile::kAOSNotAsync;; 4148 aos = TFile::GetAsyncOpenStatus(fh);; 4149 Int_t xtms = toms;; 4150 while (aos == TFile::kAOSInProgress && xtms > 0) {; 4151 gSystem->Sleep(1);; 4152 xtms -= 1;; 4153 aos = TFile::GetAsyncOpenStatus(fh);; 4154 }; 4155 if (aos == TFile::kAOSNotAsync || aos == TFile::kAOSSuccess) {; 4156 // Do open the file now; 4157 f = TFile::Open(fh);; 4158 if (gDebug > 0) {; 4159 if (aos == TFile::kAOSSuccess); 4160 ::Info(""TFile::Open"", ""waited %d millisec for asynchronous open"", toms - xtms);; 4161 else; 4162 ::Info(""TFile::Open"", ""timeout option not supported (requires asynchronous""; 4163 "" open support)"");; 4164 }; 4165 } else {; 4166 if (xtms",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:151543,timeout,timeout,151543,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['timeout'],['timeout']
Safety,"te object to I/O buffer.; This function assumes that the value in 'obj' is the value stored in; a pointer to a ""ptrClass"". The actual type of the object pointed to; can be any class derived from ""ptrClass"".; Return:; 0: failure; 1: success; 2: truncated success (i.e actual class is missing. Only ptrClass saved.). TClass * ReadClass(const TClass* cl = 0, UInt_t* objTag = 0); Read class definition from I/O buffer. clReq can be used to cross check; if the actually read object is of the requested class. objTag is; set in case the object is a reference to an already read object. void WriteClass(const TClass* cl); Write class description to I/O buffer. void SkipVersion(const TClass* cl = 0); Skip class version from I/O buffer. Version_t ReadVersion(UInt_t* start = 0, UInt_t* bcnt = 0, const TClass* cl = 0); Read class version from I/O buffer. Version_t ReadVersionForMemberWise(const TClass* cl = 0); Read class version from I/O buffer ; to be used when streaming out; memberwise streamed collection where we do not care (not save) about; the byte count and can safely ignore missing streamerInfo (since they; usually indicate empty collections). UInt_t WriteVersion(const TClass* cl, Bool_t useBcnt = kFALSE); Write class version to I/O buffer. UInt_t WriteVersionMemberWise(const TClass* cl, Bool_t useBcnt = kFALSE); Write class version to I/O buffer after setting the kStreamedMemberWise; bit in the version number. void StreamObject(void* obj, const type_info& typeinfo, const TClass* onFileClass = 0); Stream an object given its C++ typeinfo information. void StreamObject(void* obj, const char* className, const TClass* onFileClass = 0); Stream an object given the name of its actual class. void StreamObject(void* obj, const TClass* cl, const TClass* onFileClass = 0); Stream an object given a pointer to its actual class. void StreamObject(TObject* obj); Stream an object inheriting from TObject using its streamer. void CheckCount(UInt_t offset); Check if offset is not too large (< k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBufferFile.html:37980,safe,safely,37980,root/html530/TBufferFile.html,https://root.cern,https://root.cern/root/html530/TBufferFile.html,2,['safe'],['safely']
Safety,"te();; // picture 2; ps->NewPage();; c1->cd(1);; hpxpy->Draw();; c1->cd(2);; ntuple->Draw(""px"");; c1->Update();; ps->Close();; // invoke Postscript viewer; gSystem->Exec(""gs file.ps"");; }; ; Making several pictures in the same Postscript file: case 3; This is the recommended way. If the Postscript file name finishes with; ""("", the file remains opened (it is not closed). If the Postscript file name; finishes with "")"" and the file has been opened with ""("", the file is closed.; Example:; ; {; TCanvas c1(""c1"");; h1.Draw();; c1.Print(""c1.ps(""); // write canvas and keep the ps file open; h2.Draw();; c1.Print(""c1.ps""); // canvas is added to ""c1.ps""; h3.Draw();; c1.Print(""c1.ps)""); // canvas is added to ""c1.ps"" and ps file is closed; }; ; The TCanvas::Print(""file.ps("") mechanism is very useful, but it can; be a little inconvenient to have the action of opening/closing a file being; atomic with printing a page. Particularly if pages are being generated in some; loop one needs to detect the special cases of first and last page and then; munge the argument to Print() accordingly.; The ""["" and ""]"" can be used instead of ""("" and "")"" as shown below.; Example:; ; c1.Print(""file.ps[""); // No actual print, just open file.ps; for (int i=0; i<10; ++i) {; // fill canvas for context i; // ...; c1.Print(""file.ps""); // Actually print canvas to the file; }; c1.Print(""file.ps]""); // No actual print, just close the file; ; Color Model; TPostScript support two color model RGB and CMYK. CMY and CMYK models are; subtractive color models unlike RGB which is an additive. They are mainly; used for printing purposes. CMY means Cyan Magenta Yellow to convert RGB; to CMY it is enough to do: C=1-R, M=1-G and Y=1-B. CMYK has one more; component K (black). The conversion from RGB to CMYK is:; ; Double_t Black = TMath::Min(TMath::Min(1-Red,1-Green),1-Blue);; Double_t Cyan = (1-Red-Black)/(1-Black);; Double_t Magenta = (1-Green-Black)/(1-Black);; Double_t Yellow = (1-Blue-Black)/(1-Black);; ; CMYK add the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:5901,detect,detect,5901,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,3,['detect'],['detect']
Safety,"te(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tTGeoBBox::Safety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidTGeoBBox::Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTGeoBBox::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFromFaceSet(TGLFaceSet* fs); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGeoBBox::SetPoints(Double_t* points) const; virtual voidTGeoBBox::SetPoints(Float_t* points) const; voidTGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveGeoPolyShape.html:8969,Safe,SafetySeg,8969,root/html534/TEveGeoPolyShape.html,https://root.cern,https://root.cern/root/html534/TEveGeoPolyShape.html,1,['Safe'],['SafetySeg']
Safety,"te(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoSphere&operator=(const TGeoSphere&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); voidSetDimensions(Double_t* param, Int_t nparam); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumberOfDivisions(Int_t p); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoSphere.html:8850,Safe,SafetySeg,8850,root/html602/TGeoSphere.html,https://root.cern,https://root.cern/root/html602/TGeoSphere.html,2,['Safe'],['SafetySeg']
Safety,"te:. TFileCacheWrite&operator=(const TFileCacheWrite&); TFileCacheWrite(const TFileCacheWrite&). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. char*fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tfBufferSizeAllocated size of fBuffer; TFile*fFilePointer to file; Int_tfNtotTotal size of cached blocks; Bool_tfRecursiveflag to avoid recursive calls; Long64_tfSeekStartSeek value of first block in cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFileCacheWrite(); Default Constructor. TFileCacheWrite(TFile* file, Int_t buffersize); Creates a TFileCacheWrite data structure.; The write cache will be connected to file.; The size of the cache will be buffersize,; if buffersize < 10000 a default size of 512 Kbytes is used. ~TFileCacheWrite(); Destructor. Bool_t Flush(); Flush the current write buffer to the file.; Returns kTRUE in case of error. void Print(Option_t* option = """") const; Print class internal structure. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Called by the read cache to check if the requested data is not; in the write cache buffer.; Returns -1 if data not in write cache,; 0 otherwise. Int_t WriteBuffer(const char* buf, Long64_t pos, Int_t len); Write buffer at position pos in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileCacheWrite.html:6597,avoid,avoid,6597,root/html602/TFileCacheWrite.html,https://root.cern,https://root.cern/root/html602/TFileCacheWrite.html,2,['avoid'],['avoid']
Safety,"tect the stop timer; Long64_tfTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fAutoBinsMap of min/max values by name for slaves. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofPlayer(TProof* proof = 0); Default ctor. ~TProofPlayer(); Destructor. void SetProcessing(Bool_t on = kTRUE); Set processing bit according to 'on'. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop the process after this event. If timeout is positive, start; a timer firing after timeout seconds to hard-stop time-expensive; events. void SetDispatchTimer(Bool_t on = kTRUE); Enable/disable the timer to dispatch pening events while processing. void SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); Enable/disable the timer to stop/abort processing.; The 'timeout' is in seconds. void AddQueryResult(TQueryResult* q); Add query result to the list, making sure that there are no; duplicates. void RemoveQueryResult(const char* ref); Remove all query result instances referenced 'ref' from; the list of results. TQueryResult * GetQueryResult(const char* ref); Get query result instances referenced 'ref' from; the list of results. void SetCurrentQuery(TQueryResult* q); Set current query and save previous value. void AddInput(TObject* inp); Add object to input list. void ClearInput(); Clear input list. TObject * GetOutput(const char* name) const; Get output object by name. TList * GetOutputList() const; Get output list. Int_t ReinitSelector(TQueryResult* qr); Reinitialize fSelector using the selector files in the query result.; Needed when Finalize is called after a Process execution for the same; selector name. Int_t AddOutputObject(TObject* obj); Incorporate output object (may not be used in this class). void AddOutput(TList* out); Incorporate output li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayer.html:14515,timeout,timeout,14515,root/html528/TProofPlayer.html,https://root.cern,https://root.cern/root/html528/TProofPlayer.html,6,['timeout'],['timeout']
Safety,"tected . Handle DND leave event. ; Definition at line 681 of file TGDNDManager.cxx. ◆ HandleDNDPosition(). Bool_t TGDNDManager::HandleDNDPosition ; (; Window_t ; src, . int ; x_root, . int ; y_root, . Atom_t ; action, . Time_t ; timestamp . ). protected . Handle DND position event. ; Definition at line 696 of file TGDNDManager.cxx. ◆ HandleDNDStatus(). Bool_t TGDNDManager::HandleDNDStatus ; (; Window_t ; from, . int ; accepted, . Rectangle_t ; skip, . Atom_t ; action . ). protected . Handle DND status event. ; Definition at line 743 of file TGDNDManager.cxx. ◆ HandleSelection(). Bool_t TGDNDManager::HandleSelection ; (; Event_t * ; event). Handle selection event. ; Definition at line 848 of file TGDNDManager.cxx. ◆ HandleSelectionRequest(). Bool_t TGDNDManager::HandleSelectionRequest ; (; Event_t * ; event). Handle selection request event. ; Definition at line 807 of file TGDNDManager.cxx. ◆ HandleTimer(). Bool_t TGDNDManager::HandleTimer ; (; TTimer * ; t). overridevirtual . Handle Drop timeout. ; Reimplemented from TObject.; Definition at line 460 of file TGDNDManager.cxx. ◆ InitAtoms(). void TGDNDManager::InitAtoms ; (; ). protected . Initialize drag and drop atoms. ; Definition at line 296 of file TGDNDManager.cxx. ◆ IsA(). TClass * TGDNDManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 198 of file TGDNDManager.h. ◆ IsDNDAware(). Bool_t TGDNDManager::IsDNDAware ; (; Window_t ; win, . Atom_t * ; typelist = nullptr . ). protected . Check if window win is DND aware. ; Definition at line 345 of file TGDNDManager.cxx. ◆ IsDragging(). Bool_t TGDNDManager::IsDragging ; (; ); const. inline . Definition at line 173 of file TGDNDManager.h. ◆ IsTopLevel(). Bool_t TGDNDManager::IsTopLevel ; (; Window_t ; win). protected . ◆ operator=(). TGDNDManager & TGDNDManager::operator= ; (; const TGDNDManager & ; ). privatedelete . ◆ RemoveRootProxy(). Bool_t TGDNDManager::RemoveRootProxy ; (; )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDNDManager.html:21893,timeout,timeout,21893,doc/master/classTGDNDManager.html,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html,1,['timeout'],['timeout']
Safety,"ted from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsCategory; static const decltype(_stateNames) ::value_type & invalidCategory ();  A category state to signify an invalid category. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooBinningCategory.h>. Inheritance diagram for RooBinningCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooBinningCategory() [1/3]. RooBinningCategory::RooBinningCategory ; (; ). default . ◆ RooBinningCategory() [2/3]. RooBinningCategory::RooBinningCategory ; (; const char * ; name, . const char * ; title, . RooAbsRealLValue & ; inputVar, . const char * ; binningName = nullptr, . const char * ; catTypeName = nullptr . ). Constructor with input function to be mapped and name and index of default output state of unmapped values. ; Definition at line 40 of file RooBinningCategory.cxx. ◆ RooBinningCategory() [3/3]. RooBinningCategory::RooBinningCategory ; (; const RooBinningCategory & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 52 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinningCategory.html:44490,Avoid,Avoids,44490,doc/master/classRooBinningCategory.html,https://root.cern,https://root.cern/doc/master/classRooBinningCategory.html,1,['Avoid'],['Avoids']
Safety,"ted from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsCategory; static const decltype(_stateNames) ::value_type & invalidCategory ();  A category state to signify an invalid category. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMappedCategory.h>. Inheritance diagram for RooMappedCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooMappedCategory() [1/3]. RooMappedCategory::RooMappedCategory ; (; ). Definition at line 82 of file RooMappedCategory.cxx. ◆ RooMappedCategory() [2/3]. RooMappedCategory::RooMappedCategory ; (; const char * ; name, . const char * ; title, . RooAbsCategory & ; inputCat, . const char * ; defCatName = ""NotMapped"", . Int_t ; defCatIdx = NoCatIdx . ). Definition at line 84 of file RooMappedCategory.cxx. ◆ RooMappedCategory() [3/3]. RooMappedCategory::RooMappedCategory ; (; const RooMappedCategory & ; other, . const char * ; name = nullptr . ). Definition at line 96 of file RooMappedCategory.cxx. ◆ ~RooMappedCategory(). RooMappedCategory::~RooMappedCategory ; (; ). overridedefau",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMappedCategory.html:44972,Avoid,Avoids,44972,doc/master/classRooMappedCategory.html,https://root.cern,https://root.cern/doc/master/classRooMappedCategory.html,1,['Avoid'],['Avoids']
Safety,"ted from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsCategory; static const decltype(_stateNames) ::value_type & invalidCategory ();  A category state to signify an invalid category. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooMultiCategory.h>. Inheritance diagram for RooMultiCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooMultiCategory() [1/3]. RooMultiCategory::RooMultiCategory ; (; ). inline . Definition at line 31 of file RooMultiCategory.h. ◆ RooMultiCategory() [2/3]. RooMultiCategory::RooMultiCategory ; (; const char * ; name, . const char * ; title, . const RooArgSet & ; inputCategories . ). Construct a product of the given set of input RooAbsCategories in inInputCatList. ; The state names of this product category are {S1;S2,S3,...Sn} where Si are the state names of the input categories. ; Definition at line 55 of file RooMultiCategory.cxx. ◆ RooMultiCategory() [3/3]. RooMultiCategory::RooMultiCategory ; (; const RooMultiCategory & ; other, . const char * ; name = nullptr . ). Copy con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiCategory.html:44688,Avoid,Avoids,44688,doc/master/classRooMultiCategory.html,https://root.cern,https://root.cern/doc/master/classRooMultiCategory.html,1,['Avoid'],['Avoids']
Safety,"ted from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsCategory; static const decltype(_stateNames) ::value_type & invalidCategory ();  A category state to signify an invalid category. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooThresholdCategory.h>. Inheritance diagram for RooThresholdCategory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooThresholdCategory() [1/3]. RooThresholdCategory::RooThresholdCategory ; (; ). inline . Definition at line 28 of file RooThresholdCategory.h. ◆ RooThresholdCategory() [2/3]. RooThresholdCategory::RooThresholdCategory ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; inputVar, . const char * ; defCatName = ""Default"", . Int_t ; defCatIdx = 0 . ). Constructor with input function to be mapped and name and index of default output state of unmapped values. ; Definition at line 45 of file RooThresholdCategory.cxx. ◆ RooThresholdCategory() [3/3]. RooThresholdCategory::RooThresholdCategory ; (; const RooThresholdCategory & ; other, . const char * ; name = nul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooThresholdCategory.html:44276,Avoid,Avoids,44276,doc/master/classRooThresholdCategory.html,https://root.cern,https://root.cern/doc/master/classRooThresholdCategory.html,1,['Avoid'],['Avoids']
Safety,"ted from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TXMLSetup; Int_t fRefCounter {0};  ; Bool_t fStoreStreamerInfos {kTRUE};  ; TString fStrBuf;  counter , used to build id of xml references ;  ; Bool_t fUseDtd {kFALSE};  ; Bool_t fUseNamespaces {kFALSE};  ; EXMLLayout fXmlLayout {kSpecialized};  . Private Member Functions;  TXMLFile (const TXMLFile &)=delete;  ; void operator= (const TXMLFile &)=delete;  . Additional Inherited Members;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:43899,timeout,timeout,43899,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['timeout'],['timeout']
Safety,"ted in TGeoCompositeShape, TGeoCone, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, and TGeoVGShape.; Definition at line 84 of file TGeoBBox.h. ◆ IsNullBox(). virtual Bool_t TGeoBBox::IsNullBox ; (; ); const. inlinevirtual . Definition at line 86 of file TGeoBBox.h. ◆ IsValidBox(). Bool_t TGeoBBox::IsValidBox ; (; ); const. inlineoverridevirtual . Implements TGeoShape.; Reimplemented in TGeoVGShape.; Definition at line 85 of file TGeoBBox.h. ◆ MakeBuffer3D(). TBuffer3D * TGeoBBox::MakeBuffer3D ; (; ); const. overridevirtual . Reimplemented from TGeoShape.; Reimplemented in TGeoCone, TGeoConeSeg, TGeoHype, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoSphere, TGeoTessellated, TGeoTorus, TGeoTube, TGeoTubeSeg, TGeoXtru, and TGeoVGShape. ◆ operator=(). TGeoBBox & TGeoBBox::operator= ; (; const TGeoBBox & ; ). protecteddelete . ◆ Safety(). Double_t TGeoBBox::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Implements TGeoShape.; Reimplemented in TGeoTrap, TGeoGtra, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ Safety_v(). void TGeoBBox::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoShape.; Reimplemented in TGeoTrap, TGeoGtra, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoShapeAssembly, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, and TGeoXtru. ◆ SavePrimitive(). void TGeoBBox::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBBox.html:35864,Safe,Safety,35864,doc/master/classTGeoBBox.html,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html,1,['Safe'],['Safety']
Safety,"ted peaks, peaks with amplitude less than threshold*highest_peak/100 are ignored, see manual.; backgroundRemove: logical variable, set if the removal of background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum is replaced by new spectrum calculated using Markov chains method.; averWindow: averaging window of searched peaks, for details we refer to manual (applies only for Markov method). Peaks searching:; The goal of this function is to identify automatically the peaks in spectrum with the presence of the continuous background and statistical fluctuations - noise.; The common problems connected with correct peak identification are:. non-sensitivity to noise, i.e., only statistically relevant peaks should be identified.; non-sensitivity of the algorithm to continuous background.; ability to identify peaks close to the edges of the spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets. The algorithm should be able to recognise close positioned peaks.; ability to identify peaks with different sigma. Fig. 27 An example of one-dimensional synthetic spectrum with found peaks denoted by markers.; References:. M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451. Examples of peak searching method:; The SearchHighRes function provides users with the possibility to vary the input parameters and with the access to the output deconvolved data in the destination spectrum. Based on the output data one can tune the parameters. Example 15 - script SearchHR1.C:; O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:57759,detect,detect,57759,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,1,['detect'],['detect']
Safety,"tegrator ();  ; static IntegrationOneDim::Type DefaultIntegratorType ();  ; static unsigned int DefaultNPoints ();  ; static double DefaultRelTolerance ();  ; static unsigned int DefaultWKSize ();  ; static ROOT::Math::IOptions * FindDefault (const char *name);  find specific options - return 0 if not existing ;  ; static void PrintDefault (const char *name=nullptr, std::ostream &os=std::cout);  print only the specified default options ;  ; static void SetDefaultAbsTolerance (double tol);  ; static void SetDefaultIntegrator (const char *name);  ; static void SetDefaultNPoints (unsigned int n);  ; static void SetDefaultRelTolerance (double tol);  ; static void SetDefaultWKSize (unsigned int size);  . Additional Inherited Members;  Protected Member Functions inherited from ROOT::Math::BaseIntegratorOptions;  BaseIntegratorOptions ();  protected constructor to avoid user creating this class ;  ; void ClearExtra ();  ;  Protected Attributes inherited from ROOT::Math::BaseIntegratorOptions; double fAbsTolerance;  absolute tolerance ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fIntegType;  Integrator type (value converted from enum) ;  ; unsigned int fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::IntegratorOneDimOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IntegratorOneDimOptions() [1/2]. ROOT::Math::IntegratorOneDimOptions::IntegratorOneDimOptions ; (; IOptions * ; extraOpts = nullptr). constructor using the default options can pass a pointer to extra options (N.B. ; pointer will be managed by the class) ; Definition at line 179 of file IntegratorOptions.cxx. ◆ ~IntegratorOneDimOptions(). ROOT::Math::IntegratorOneDimOptions::~IntegratorOneDimOptions ; (; ). inlineoverride . Definition at line 122 of file IntegratorOp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html:3368,avoid,avoid,3368,doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDimOptions.html,1,['avoid'],['avoid']
Safety,"template vector).; Use UnConstrain() to remove this constraint. void UnConstrain(Int_t parm); Remove the constraints on the possible values of parameter <parm>. void CheckConsistency(); Function used internally to check the consistency between the; various histograms. Checks are performed on nonexistent or empty; histograms, the precise histogram class, and the number of bins.; In addition, integrals over the ""allowed"" bin ranges are computed.; Any inconsistency results in a error. TFitResultPtr Fit(); Perform the fit with the default UP value.; The value returned is the minimisation status. void ErrorAnalysis(Double_t UP); Set UP to the given value (see class TMinuit), and perform a MINOS minimisation. void GetResult(Int_t parm, Double_t& value, Double_t& error) const; Obtain the fit result for parameter <parm> (the parameter numbering; follows that of the input template vector). TH1* GetPlot(); Return the ""template prediction"" corresponding to the fit result (this is not; the same as the weighted sum of template distributions, as template statistical; uncertainties are taken into account).; Note that the name of this histogram will simply be the same as that of the; ""data"" histogram, prefixed with the string ""Fraction fit to hist: "".; Note also that the histogram is managed by the TFractionFitter class, so the returned pointer will be invalid if; the class is deleted. void GetRanges(Int_t& minX, Int_t& maxX, Int_t& minY, Int_t& maxY, Int_t& minZ, Int_t& maxZ) const; Used internally to obtain the bin ranges according to the dimensionality of; the histogram and the limits set by hand. void ComputeFCN(Double_t& f, const Double_t* par, Int_t flag); Used internally to compute the likelihood value. void FindPrediction(int bin, double& t_i, int& k_0, double& A_ki) const; Function used internally to obtain the template prediction in the individual bins; 'bin' <=> 'i' (paper); 'par' <=> 'j' (paper). Double_t GetChisquare() const; Return the likelihood ratio Chi-squared (chi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFractionFitter.html:17941,predict,prediction,17941,root/html602/TFractionFitter.html,https://root.cern,https://root.cern/root/html602/TFractionFitter.html,2,['predict'],['prediction']
Safety,"ten; automatically to a file during the next TFile::Write command.; ; Example:; create a twodimensional TEfficiency object with; - name = ""eff""; - title = ""my efficiency""; - axistitles: x, y and LaTeX formated epsilon as label for Z axis; - 10 bins with constant bin width (= 1) along X axis starting at 0 (lower edge; from first bin) upto 10 (upper edge of last bin); - 20 bins with constant bin width (= 0.5) along Y axis starting at -5 (lower; edge from first bin) upto 5 (upper edge of last bin); TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;y;#epsilon"",10,0,10,20,-5,5);; ; If you already have two histograms filled with the number of passed and total; events, you will use the constructor TEfficiency(const TH1& passed,const TH1& total); to construct the TEfficiency object. The histograms ""passed"" and ""total"" have; to fullfill the conditions mentioned in CheckConsistency, otherwise the construction will fail.; As the histograms already exist, the new TEfficiency is by default not attached; to the current directory to avoid duplication of data. If you want to store the; new object anyway, you can either write it directly by calling Write or attach it to a directory using SetDirectory.; This also applies for TEfficiency objects created by the copy constructor TEfficiency(const TEfficiency& rEff).; . Example 1:; TEfficiency* pEff = 0;; TFile* pFile = new TFile(""myfile.root"",""recreate"");; //h_pass and h_total are valid and consistent histograms; if(TEfficiency::CheckConsistency(h_pass,h_total)); {; pEff = new TEfficiency(h_pass,h_total);; // this will write the TEfficiency object to ""myfile.root""; // AND pEff will be attached to the current directory; pEff->Write();; }; Example 2:; TEfficiency* pEff = 0;; TFile* pFile = new TFile(""myfile.root"",""recreate"");; //h_pass and h_total are valid and consistent histograms; if(TEfficiency::CheckConsistency(h_pass,h_total)); {; pEff = new TEfficiency(h_pass,h_total);; //this will attach the TEfficiency object to the curre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEfficiency.html:3514,avoid,avoid,3514,root/html534/TEfficiency.html,https://root.cern,https://root.cern/root/html534/TEfficiency.html,1,['avoid'],['avoid']
Safety,"ten; automatically to a file during the next TFile::Write command.; ; Example:; create a twodimensional TEfficiency object with; - name = ""eff""; - title = ""my efficiency""; - axistitles: x, y and LaTeX formated epsilon as label for Z axis; - 10 bins with constant bin width (= 1) along X axis starting at 0 (lower edge; from first bin) upto 10 (upper edge of last bin); - 20 bins with constant bin width (= 0.5) along Y axis starting at -5 (lower; edge from first bin) upto 5 (upper edge of last bin); TEfficiency* pEff = new TEfficiency(""eff"",""my efficiency;x;y;#epsilon"",10,0,10,20,-5,5);; ; If you already have two histograms filled with the number of passed and total; events, you will use the constructor TEfficiency(const TH1& passed,const TH1& total); to construct the TEfficiency object. The histograms ""passed"" and ""total"" have; to fullfill the conditions mentioned in CheckConsistency, otherwise the construction will fail.; As the histograms already exist, the new TEfficiency is by default not attached; to the current directory to avoid duplication of data. If you want to store the; new object anyway, you can either write it directly by calling Write or attach it to a directory using SetDirectory.; This also applies for TEfficiency objects created by the copy constructor TEfficiency(const TEfficiency& rEff).; . Example 1:; TEfficiency* pEff = 0;; TFile* pFile = new TFile(""myfile.root"",""recreate"");; ; //h_pass and h_total are valid and consistent histograms; if(TEfficiency::CheckConsistency(h_pass,h_total)); {; pEff = new TEfficiency(h_pass,h_total);; // this will write the TEfficiency object to ""myfile.root""; // AND pEff will be attached to the current directory; pEff->Write();; }; ; Example 2:; TEfficiency* pEff = 0;; TFile* pFile = new TFile(""myfile.root"",""recreate"");; ; //h_pass and h_total are valid and consistent histograms; if(TEfficiency::CheckConsistency(h_pass,h_total)); {; pEff = new TEfficiency(h_pass,h_total);; //this will attach the TEfficiency object to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:3516,avoid,avoid,3516,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,3,['avoid'],['avoid']
Safety,"ter than the GetAtSlotUnchecked method but the caller is responsible to make sure that the slot exists, to check that the contained object is initialized and that the returned pointer will not outlive the TThreadedObject that returned it, which maintains ownership of the actual object. ; Definition at line 260 of file TThreadedObject.hxx. ◆ GetAtSlotUnchecked(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::GetAtSlotUnchecked ; (; unsigned ; i); const. inline . Access a particular slot which corresponds to a single thread. ; This is in general faster than the GetAtSlot method but it is responsibility of the caller to make sure that the slot exists and to check that the contained object is initialized (and not a nullptr). ; Definition at line 249 of file TThreadedObject.hxx. ◆ GetNSlots(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetNSlots ; (; ); const. inline . Return the number of currently available slot. ; The method is safe to call concurrently to other TThreadedObject methods. Note that slots could be available but contain no data (i.e. a nullptr) if they have not been used yet. ; Definition at line 191 of file TThreadedObject.hxx. ◆ GetThisSlotNumber(). template<class T > . unsigned ROOT::TThreadedObject< T >::GetThisSlotNumber ; (; ). inlineprivate . Get the slot number for this threadID, make a slot if needed. ; Definition at line 338 of file TThreadedObject.hxx. ◆ Merge(). template<class T > . std::shared_ptr< T > ROOT::TThreadedObject< T >::Merge ; (; TThreadedObjectUtils::MergeFunctionType< T > ; mergeFunction = TThreadedObjectUtils::MergeTObjects<T>). inline . Merge all the thread private objects. ; Can be called once: it does not create any new object but destroys the present bookkeping collapsing all objects into the one at slot 0. ; Definition at line 294 of file TThreadedObject.hxx. ◆ operator->(). template<class T > . T * ROOT::TThreadedObject< T >::operator-> ; (; ). inline . Access the wrapped object and a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html:7308,safe,safe,7308,doc/v632/classROOT_1_1TThreadedObject.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TThreadedObject.html,2,['safe'],['safe']
Safety,"ter-related functions will push the ""entry"" lock state to *this.; 60 /// Recursive calls will do that, too - but we must only forget about the lock; 61 /// state once this recursion count went to 0.; 62 Int_t fRecurseCount = 0;; 63 ; 64 operator bool() const { return (bool)fState; }; 65 };; 66 ; 67 /// \class StateDelta; 68 /// State as returned by `GetStateDelta()` that can be passed to; 69 /// `Restore()`; 70 struct StateDelta {; 71 virtual ~StateDelta(); // implemented in TVirtualMutex.cxx; 72 };; 73 ; 74 virtual Hint_t *ReadLock() = 0;; 75 virtual void ReadUnLock(Hint_t *) = 0;; 76 virtual Hint_t *WriteLock() = 0;; 77 virtual void WriteUnLock(Hint_t *) = 0;; 78 ; 79 Int_t Lock() override { WriteLock(); return 1; }; 80 Int_t TryLock() override { WriteLock(); return 1; }; 81 Int_t UnLock() override { WriteUnLock(nullptr); return 1; }; 82 Int_t CleanUp() override { WriteUnLock(nullptr); return 1; }; 83 ; 84 virtual std::unique_ptr<State> GetStateBefore() = 0;; 85 virtual std::unique_ptr<StateDelta> Rewind(const State& earlierState) = 0;; 86 virtual void Apply(std::unique_ptr<StateDelta> &&delta) = 0;; 87 ; 88 TVirtualRWMutex *Factory(Bool_t /*recursive*/ = kFALSE) override = 0;; 89 ; 90 ClassDefOverride(TVirtualRWMutex, 0) // Virtual mutex lock class; 91};; 92 ; 93//////////////////////////////////////////////////////////////////////////; 94// //; 95// TReadLockGuard //; 96// //; 97// This class provides RW mutex resource management in a guaranteed and //; 98// exception safe way. Use like this: //; 99// { //; 100// TReadLockGuard guard(mutex); //; 101// ... // read something //; 102// } //; 103// where mutex is a pointer to a TMutex object. //; 104// When guard goes out of scope the mutex is unlocked in the TLockGuard //; 105// destructor. The exception mechanism takes care of calling the dtors //; 106// of local objects so it is exception safe. //; 107// In contrast to std::lock_guard, TLockGuard constructor expects a //; 108// pointer, not the mutex object itsel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualRWMutex_8h_source.html:3619,safe,safe,3619,doc/master/TVirtualRWMutex_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualRWMutex_8h_source.html,2,['safe'],['safe']
Safety,"terToLocalVect(const Double_t* master, Double_t* local) const; voidTObject::MayNotUse(const char* method) const; Bool_tTGeoNode::MayOverlap(Int_t iother) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoNode::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTGeoNode::PrintCandidates() constMENU ; voidTGeoNode::PrintOverlaps() constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoAtt::ResetAttBit(UInt_t f); voidTObject::ResetBit(UInt_t f); Double_tTGeoNode::Safety(Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidTGeoNode::SaveAttributes(ostream& out); virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTGeoAtt::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoAtt::SetActivity(Bool_t flag = kTRUE); voidTGeoNode::SetAllInvisible()MENU ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoNode::SetCurrentPoint(Double_t x, Double_t y, Double_t z)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFinder(const TGeoPatternFinder* finder); voidTGeoNode::SetInvisible()MENU ; voidTGeoNode::SetMotherVolume(TGeoVolume* mother); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeOffset.html:8724,Safe,Safety,8724,root/html528/TGeoNodeOffset.html,https://root.cern,https://root.cern/root/html528/TGeoNodeOffset.html,1,['Safe'],['Safety']
Safety,"terToLocalVect(const Double_t* master, Double_t* local) const; voidTObject::MayNotUse(const char* method) const; Bool_tTGeoNode::MayOverlap(Int_t iother) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoNode::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTGeoNode::PrintCandidates() constMENU ; voidTGeoNode::PrintOverlaps() constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoAtt::ResetAttBit(UInt_t f); voidTObject::ResetBit(UInt_t f); Double_tTGeoNode::Safety(Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidTGeoNode::SaveAttributes(ostream& out); virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTGeoAtt::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoAtt::SetActivity(Bool_t flag = kTRUE); voidTGeoNode::SetAllInvisible()MENU ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoNode::SetCurrentPoint(Double_t x, Double_t y, Double_t z)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoNode::SetInvisible()MENU ; voidSetMatrix(const TGeoMatrix* matrix); voidTGeoNode::SetMotherVolume(TGeoVolume* mother); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeMatrix.html:5812,Safe,Safety,5812,root/html528/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html528/TGeoNodeMatrix.html,1,['Safe'],['Safety']
Safety,"tersection (const char *expr1, const char *expr2);  Constructor. ;  ;  TGeoIntersection (TGeoShape *left, TGeoShape *right, TGeoMatrix *lmat=nullptr, TGeoMatrix *rmat=nullptr);  Constructor providing pointers to components. ;  ;  ~TGeoIntersection () override;  Destructor — deletion of components handled by TGeoManager class. ;  ; void ComputeBBox (Double_t &dx, Double_t &dy, Double_t &dz, Double_t *origin) override;  Compute bounding box corresponding to a intersection of two shapes. ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. ;  ; Bool_t Contains (const Double_t *point) const override;  Find if a intersection of two shapes contains a given point. ;  ; Int_t DistanceToPrimitive (Int_t px, Int_t py) override;  Compute minimum distance to shape vertices. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point inside to the shape boundary. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const override;  Compute distance from a given point outside to the shape. ;  ; EGeoBoolType GetBooleanOperator () const override;  ; Int_t GetNpoints () override;  Returns number of vertices for the composite shape described by this intersection. ;  ; TClass * IsA () const override;  ; TGeoBoolNode * MakeClone () const override;  Make a clone of this. Pointers are preserved. ;  ; void Paint (Option_t *option) override;  Paint method. ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  Compute safety distance for a union node;. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void Sizeof3D () const override;  Register 3D size of this",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIntersection.html:1403,safe,safe,1403,doc/master/classTGeoIntersection.html,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html,1,['safe'],['safe']
Safety,"tes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; NB: this function is automatically called by TTreeCache::Print. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer,; otherwise need to make a normal read from file. Returns -1 in case of; read error, 0 in case not in cache, 1 in case read from cache. Int_t ReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc). Int_t ReadBufferExtPrefetch(char* buf, Long64_t pos, Int_t len, Int_t& loc); prefetch the first block. Int_t ReadBufferExtNormal(char* buf, Long64_t pos, Int_t len, Int_t& loc); Base function for ReadBuffer. Also gives out the position; of the block in the internal buffer. This helps TTreeCacheUnzip to avoid; doing twice the binary search. void SetFile(TFile* file); Set the file using this cache and reset the current blocks (if any). void Sort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. void SecondSort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary.; Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. TFilePrefetch* GetPrefetchObj(). TFileCacheRead(const TFileCacheRead& ). TFileCacheRead& operator=(const TFileCacheRead& ). void AddBranch(TBranch* , Bool_t = kFALSE); {}. void AddBranch(const char* , Bool_t = kFALSE); {}. Int_t GetBufferSize() const; { return fBufferSize; }. Int_t GetUnzipBuffer(char** , Long64_t , Int_t , Bool_t* ); { return -1; }. Long64_t GetPrefetchedBlocks() const; { return fPrefetchedBlocks; }. Bool_t IsAsyncReading() const; { return fAsyncReading; }. void SetEnablePrefetching(Bool_t setPrefetch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFileCacheRead.html:9774,avoid,avoid,9774,root/html530/TFileCacheRead.html,https://root.cern,https://root.cern/root/html530/TFileCacheRead.html,2,['avoid'],['avoid']
Safety,"tes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; NB: this function is automatically called by TTreeCache::Print. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer,; otherwise need to make a normal read from file. Returns -1 in case of; read error, 0 in case not in cache, 1 in case read from cache. Int_t ReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc). Int_t ReadBufferExtPrefetch(char* buf, Long64_t pos, Int_t len, Int_t& loc); prefetch the first block. Int_t ReadBufferExtNormal(char* buf, Long64_t pos, Int_t len, Int_t& loc); Base function for ReadBuffer. Also gives out the position; of the block in the internal buffer. This helps TTreeCacheUnzip to avoid; doing twice the binary search. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Set the file using this cache and reset the current blocks (if any). void Sort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. void SecondSort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary.; Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. TFilePrefetch* GetPrefetchObj(). void WaitFinishPrefetch(). Int_t SetBufferSize(Int_t buffersize); Sets the buffer size. If the current prefetch list is too large to fit in; the new buffer some or all of the prefetch blocks are dropped. The; requested buffersize must be greater than zero.; Returns 0 if the prefetch block lists remain unchanged; 1 if some or all blocks have been removed from the prefetch list; -1 on error. void SetEnablePrefetching(Bool_t setPrefetching =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TFileCacheRead.html:11523,avoid,avoid,11523,root/html604/TFileCacheRead.html,https://root.cern,https://root.cern/root/html604/TFileCacheRead.html,1,['avoid'],['avoid']
Safety,"tes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; NB: this function is automatically called by TTreeCache::Print. Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer,; otherwise need to make a normal read from file. Returns -1 in case of; read error, 0 in case not in cache, 1 in case read from cache. Int_t ReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc). Int_t ReadBufferExtPrefetch(char* buf, Long64_t pos, Int_t len, Int_t& loc); prefetch the first block. Int_t ReadBufferExtNormal(char* buf, Long64_t pos, Int_t len, Int_t& loc); Base function for ReadBuffer. Also gives out the position; of the block in the internal buffer. This helps TTreeCacheUnzip to avoid; doing twice the binary search. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Set the file using this cache and reset the current blocks (if any). void Sort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. void SecondSort(); Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary.; Sort buffers to be prefetched in increasing order of positions.; Merge consecutive blocks if necessary. TFilePrefetch* GetPrefetchObj(). void WaitFinishPrefetch(). void SetEnablePrefetching(Bool_t setPrefetching = kFALSE); Set the prefetching mode of this file.; if 'setPrefetching', enable the asynchronous prefetching; (using TFilePrefetch) and if the gEnv and rootrc; variable Cache.Directory is set, also enable the local; caching of the prefetched blocks.; if 'setPrefetching', the old prefetcher is enabled is; the gEnv and rootrc variable is TFile.AsyncReading. void SetEn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileCacheRead.html:10948,avoid,avoid,10948,root/html534/TFileCacheRead.html,https://root.cern,https://root.cern/root/html534/TFileCacheRead.html,2,['avoid'],['avoid']
Safety,"testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoBBox::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPara.html:2308,safe,safe,2308,root/html530/TGeoPara.html,https://root.cern,https://root.cern/root/html530/TGeoPara.html,3,['safe'],['safe']
Safety,"texpr Version_t TFilePrefetch::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 84 of file TFilePrefetch.h. ◆ CreateBlockObj(). TFPBlock * TFilePrefetch::CreateBlockObj ; (; Long64_t * ; offset, . Int_t * ; len, . Int_t ; noblock . ). Create a new block or recycle an old one. ; Definition at line 281 of file TFilePrefetch.cxx. ◆ DeclFileName(). static const char * TFilePrefetch::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 84 of file TFilePrefetch.h. ◆ GetBlockFromCache(). char * TFilePrefetch::GetBlockFromCache ; (; const char * ; path, . Int_t ; length . ). Return a buffer from cache. ; Definition at line 441 of file TFilePrefetch.cxx. ◆ GetCondNewBlock(). std::condition_variable & TFilePrefetch::GetCondNewBlock ; (; ). inline . Definition at line 80 of file TFilePrefetch.h. ◆ GetPendingBlock(). TFPBlock * TFilePrefetch::GetPendingBlock ; (; ). Safe method to remove a block from the pendingList. ; Definition at line 235 of file TFilePrefetch.cxx. ◆ GetThread(). TThread * TFilePrefetch::GetThread ; (; ); const. Return reference to the consumer thread. ; Definition at line 303 of file TFilePrefetch.cxx. ◆ GetWaitTime(). Long64_t TFilePrefetch::GetWaitTime ; (; ). Return the time spent wating for buffer to be read in microseconds. ; Definition at line 170 of file TFilePrefetch.cxx. ◆ IsA(). TClass * TFilePrefetch::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 84 of file TFilePrefetch.h. ◆ IsPrefetchFinished(). Bool_t TFilePrefetch::IsPrefetchFinished ; (; ); const. inline . Definition at line 82 of file TFilePrefetch.h. ◆ ReadAsync(). void TFilePrefetch::ReadAsync ; (; TFPBlock * ; block, . Bool_t & ; inCache . ). Read one block and insert it in prefetchBuffers list. ; Definition at line 106 of file TFilePrefetch.cxx. ◆ ReadBlock(). void TFilePrefetch::ReadBlock ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFilePrefetch.html:15769,Safe,Safe,15769,doc/master/classTFilePrefetch.html,https://root.cern,https://root.cern/doc/master/classTFilePrefetch.html,1,['Safe'],['Safe']
Safety,"texpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TSelector * GetSelector (const char *filename);  The code in filename is loaded (interpreted or compiled, see below), filename must contain a valid class implementation derived from TSelector. ;  ; static bool IsStandardDraw (const char *selec);  Find out if this is a standard selection used for Draw actions (either TSelectorDraw, TProofDraw or deriving from them). ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; EAbort fAbort;  Abort status. ;  ; TList * fInput;  List of objects available during processing. ;  ; TObject * fObject;  ! Current object if processing object (vs. TTree) ;  ; TString fOption;  Option given to TTree::Process. ;  ; TSelectorList * fOutput;  ! List of objects created during processing ;  ; Long64_t fStatus;  Selector status. ;  . Private Member Functions;  TSelector (const TSelector &);  ; TSelector & operator= (const TSelector &);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TSelector.h>. Inheritance diagram for TSelector:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EAbort. enum TSelector::EAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:13846,Abort,Abort,13846,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['Abort'],['Abort']
Safety,"text processor class; TLeaf Leaf: description of a Branch data type; TLeafB A TLeaf for an 8 bit Integer data type.; TLeafC A TLeaf for a variable length string.; TLeafD A TLeaf for a 64 bit floating point data type.; TLeafElement A TLeaf for a general object derived from TObject.; TLeafF A TLeaf for a 32 bit floating point data type.; TLeafI A TLeaf for an Integer data type.; TLeafL A TLeaf for a 64 bit Integer data type.; TLeafO A TLeaf for an 8 bit Integer data type.; TLeafObject A TLeaf for a general object derived from TObject.; TLeafS A TLeaf for a 16 bit Integer data type.; TLegend Legend of markers/lines/boxes to represent obj's; TLegendEntry Storage class for one entry of a TLegend; TLibraryDocInfo documentation for a library; TLimit Class to compute 95% CL limits; TLimitDataSource input for TLimit routines; TLine A line segment; TLineEditor GUI for editing Line attributes; TLinearFitter fit a set of data points with a linear combination of functions; TLinearMinimizer Implementation of the Minimizer interface using TLinearFitter ; TLink Link: hypertext link to an object; TList Doubly linked list; TListIter Linked list iterator; TLockFile Lock an object using a file; TLockGuard Exception safe locking/unlocking of mutex; TLorentzRotation Lorentz transformations including boosts and rotations; TLorentzVector A four vector with (-,-,-,+) metric; TMCParticle LUJETS particles data record.; TMCVerbose Verbose class for MC application; TMD5 MD5 cryptographic hash functions with a 128 bit output; TMLPAnalyzer A simple analysis class for MLP; TMVA ; TMVA::BDTEventWrapper ; TMVA::BinarySearchTree Binary search tree including volume search method ; TMVA::BinarySearchTreeNode Node for the BinarySearchTree; TMVA::BinaryTree Base class for BinarySearch and Decision Trees; TMVA::CCPruner ; TMVA::CCTreeWrapper ; TMVA::Config Singleton class for global configuration settings; TMVA::Config::IONames ; TMVA::Config::VariablePlotting ; TMVA::Configurable Virtual base class for a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:92683,safe,safe,92683,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,5,['safe'],['safe']
Safety,"texts); // and security contexts; 914 fSockets->Delete(); SafeDelete(fSockets); // and sockets; 915 fMappedFiles->Delete(""slow""); // and mapped files; 916 TSeqCollection *tl = fMappedFiles; fMappedFiles = nullptr; delete tl;; 917 ; 918 SafeDelete(fClosedObjects);; 919 ; 920 delete fUUIDs;; 921 TProcessID::Cleanup(); // and list of ProcessIDs; 922 ; 923 fFunctions->Delete(); SafeDelete(fFunctions); // etc..; 924 fGeometries->Delete(); SafeDelete(fGeometries);; 925 fBrowsers->Delete(); SafeDelete(fBrowsers);; 926 SafeDelete(fCanvases);; 927 fColors->Delete(); SafeDelete(fColors);; 928 fStyles->Delete(); SafeDelete(fStyles);; 929 ; 930#ifdef R__COMPLETE_MEM_TERMINATION; 931 if (gGuiFactory != gBatchGuiFactory) SafeDelete(gGuiFactory);; 932 SafeDelete(gBatchGuiFactory);; 933 if (gGXBatch != gVirtualX) SafeDelete(gGXBatch);; 934 SafeDelete(gVirtualX);; 935#endif; 936 ; 937 // Stop emitting signals; 938 TQObject::BlockAllSignals(kTRUE);; 939 ; 940 fMessageHandlers->Delete(); SafeDelete(fMessageHandlers);; 941 ; 942#ifdef R__COMPLETE_MEM_TERMINATION; 943 SafeDelete(fCanvases);; 944 SafeDelete(fTasks);; 945 SafeDelete(fProofs);; 946 SafeDelete(fDataSets);; 947 SafeDelete(fClipboard);; 948 ; 949 fCleanups->Clear();; 950 delete fPluginManager; gPluginMgr = fPluginManager = 0;; 951 delete gClassTable; gClassTable = 0;; 952 delete gEnv; gEnv = 0;; 953 ; 954 if (fTypes) fTypes->Delete();; 955 SafeDelete(fTypes);; 956 if (fGlobals) fGlobals->Delete();; 957 SafeDelete(fGlobals);; 958 if (fGlobalFunctions) fGlobalFunctions->Delete();; 959 SafeDelete(fGlobalFunctions);; 960 fEnums.load()->Delete();; 961 ; 962 // FIXME: Causes segfault in rootcling, debug and uncomment; 963 // fClasses->Delete(); SafeDelete(fClasses); // TClass'es must be deleted last; 964#endif; 965 ; 966 // Remove shared libraries produced by the TSystem::CompileMacro() call; 967 gSystem->CleanCompiledMacros();; 968 ; 969 // Cleanup system class; 970 ROOT::Internal::SetErrorSystemMsgHandler(ROOT::Internal::ErrorSys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:36671,Safe,SafeDelete,36671,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,36,['Safe'],['SafeDelete']
Safety,"tfHighBin; intfLowBin; doublefLumiError; doublefNomLumi; map<std::string,double>fParamValues; vector<std::string>fSystToFix. private:. stringfObsName; vector<std::string>fObsNameVec; vector<std::string>fPreprocessFunctions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HistoToWorkspaceFactoryFast(); {}. ~HistoToWorkspaceFactoryFast(). HistoToWorkspaceFactoryFast(RooStats::HistFactory::Measurement& Meas). void ConfigureWorkspaceForMeasurement(const string& ModelName, RooWorkspace* ws_single, RooStats::HistFactory::Measurement& measurement). RooWorkspace* MakeSingleChannelModel(RooStats::HistFactory::Measurement& measurement, RooStats::HistFactory::Channel& channel). RooWorkspace* MakeCombinedModel(RooStats::HistFactory::Measurement& measurement). void ProcessExpectedHisto(TH1* hist, RooWorkspace* proto, string prefix, string productPrefix, string systTerm). void AddMultiVarGaussConstraint(RooWorkspace* proto, string prefix, int lowBin, int highBin, vector<std::string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins. void LinInterpWithConstraint(RooWorkspace* proto, TH1* nominal, vector<RooStats::HistFactory::HistoSys,allocator<RooStats::HistFactory::HistoSys> > , string prefix, string productPrefix, string systTerm, vector<std::string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins; require dimension >=1 or <=3. { fObsNameVec.push_back(fObsName); }. string AddNormFactor(RooWorkspace* proto, string& channel, string& sigmaEpsilon, RooStats::HistFactory::Sample& sample, bool doRatio). void AddEfficiencyTerms(RooWorkspace* proto, string prefix, string interpName, vector<RooStats::HistFactory::OverallSys,allocator<RooStats::HistFactory::OverallSys> >& systList, vector<std::string>& likelihoodTermNames, vector<std::string>& totSystTer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:9602,predict,predictions,9602,root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,1,['predict'],['predictions']
Safety,"th ""("", the file is closed.; 4919///; 4920/// Example:; 4921/// ~~~ {.cpp}; 4922/// {; 4923/// TCanvas c1(""c1"");; 4924/// h1.Draw();; 4925/// c1.Print(""c1.ps(""); //write canvas and keep the ps file open; 4926/// h2.Draw();; 4927/// c1.Print(""c1.ps""); canvas is added to ""c1.ps""; 4928/// h3.Draw();; 4929/// c1.Print(""c1.ps)""); canvas is added to ""c1.ps"" and ps file is closed; 4930/// }; 4931/// ~~~; 4932/// In the previous example replacing ""ps"" by ""pdf"" will create a multi-pages PDF file.; 4933///; 4934/// Note that the following sequence writes the canvas to ""c1.ps"" and closes the ps file.:; 4935/// ~~~ {.cpp}; 4936/// TCanvas c1(""c1"");; 4937/// h1.Draw();; 4938/// c1.Print(""c1.ps"");; 4939/// ~~~; 4940/// The `TCanvas::Print(""file.ps("")` mechanism is very useful, but it can be; 4941/// a little inconvenient to have the action of opening/closing a file; 4942/// being atomic with printing a page. Particularly if pages are being; 4943/// generated in some loop one needs to detect the special cases of first; 4944/// and last page and then munge the argument to Print() accordingly.; 4945///; 4946/// The ""["" and ""]"" can be used instead of ""("" and "")"".; 4947///; 4948/// Example:; 4949/// ~~~ {.cpp}; 4950/// c1.Print(""file.ps[""); // No actual print, just open file.ps; 4951/// for (int i=0; i<10; ++i) {; 4952/// // fill canvas for context i; 4953/// // ...; 4954///; 4955/// c1.Print(""file.ps""); // actually print canvas to file; 4956/// }// end loop; 4957/// c1.Print(""file.ps]""); // No actual print, just close.; 4958/// ~~~; 4959/// As before, the same macro is valid for PDF files.; 4960///; 4961/// It is possible to print a canvas into an animated GIF file by specifying the; 4962/// file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN*10ms is delay; 4963/// between the subimages' display. If NN is omitted the delay between; 4964/// subimages is zero. Each picture is added in the animation thanks to a loop; 4965/// similar to the following one:; 4966/// ~~~ {.cpp}; 4967///",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:158757,detect,detect,158757,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['detect'],['detect']
Safety,"th of the current block. Depending on its needs, the function is free to choose whether to analyze all data or just the newly arrived data. If TERMINATOR returns 0, it means that the terminator has not been seen. Otherwise it should return a pointer to the character immediately following the terminator.; The idea is to be able to read a line of input, or otherwise a hunk of text, such as the head of an HTTP request, without crossing the boundary, so that the next call to RecvRaw() etc. reads the data after the hunk. To achieve that, this function does the following:. Peek at incoming data.; Determine whether the peeked data, along with the previously read data, includes the terminator. 3a. If yes, read the data until the end of the terminator, and exit.; 3b. If no, read the peeked data and goto 1.; The function is careful to assume as little as possible about the implementation of peeking. For example, every peek is followed by a read. If the read returns a different amount of data, the process is retried until all data arrives safely.; Reads at most one less than the number of characters specified by maxsize. ; Definition at line 1275 of file TWebFile.cxx. ◆ GetLine(). Int_t TWebFile::GetLine ; (; TSocket * ; s, . char * ; line, . Int_t ; maxsize . ). protectedvirtual . Read a line from the socket. ; Reads at most one less than the number of characters specified by maxsize. Reading stops when a newline character is found, The newline (\n) and cr (\r), if any, are removed. Returns -1 in case of error, or the number of characters read (>= 0) otherwise. ; Definition at line 1212 of file TWebFile.cxx. ◆ GetMaxFullCacheSize(). Long64_t TWebFile::GetMaxFullCacheSize ; (; ). static . Static method returning maxmimal size of full cache, which can be preserved by file instance. ; Definition at line 1440 of file TWebFile.cxx. ◆ GetProxy(). const char * TWebFile::GetProxy ; (; ). static . Static method returning the global proxy URL. ; Definition at line 1420 of file TWebFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:50345,safe,safely,50345,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['safe'],['safely']
Safety,"th respect to the parameters at a point x. ;  ; void ParameterGradient (const T *x, T *grad) const;  Evaluate all derivatives using cached parameter values. ;  ; virtual bool ParameterHessian (const T *, const double *, T *) const;  Evaluate the all the Hessian (second derivatives matrix) of the function with respect to the parameters at a point x. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< T >; T operator() (const T *x) const;  ; T operator() (const T *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  . Private Member Functions; double DoEvalPar (const double *x, const double *p) const override;  functions needed by interface ;  ; double DoParameterDerivative (const double *x, const double *p, unsigned int ipar) const override;  . Private Attributes; IParamGradFunction * fFunc;  ; bool fOwn;  . #include <Math/MultiDimParamFunctionAdapter.h>. Inheritance diagram for ROOT::Math::MultiDimParamGradFunctionAdapter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ BaseFunc. typedef IParamMultiGradFunction::BaseFunc ROOT::Math::MultiDimParamGradFunctionAdapter::BaseFunc. Definition at line 176 of file MultiDimParamFunctionAdapter.h. Constructor & Destructor Documentation. ◆ MultiDimParamGradFunctionAdapter() [1/3]. ROOT::Math::MultiDimParamGradFunct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html:5169,avoid,avoid,5169,doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html,1,['avoid'],['avoid']
Safety,"th::DefaultCoordinateSystemTag>::Scalar ang). Change Theta - Polar3D coordinates only. { fCoordinates.SetTheta(ang); return *this;}. DisplacementVector3D<CoordSystem, Tag>& SetPhi(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar ang). Change Phi - Polar3D or CylindricalEta3D coordinates. { fCoordinates.SetPhi(ang); return *this;}. DisplacementVector3D<CoordSystem, Tag>& SetRho(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar rr). Change Rho - CylindricalEta3D coordinates only. { fCoordinates.SetRho(rr); return *this;}. DisplacementVector3D<CoordSystem, Tag>& SetEta(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar etaval). Change Eta - CylindricalEta3D coordinates only. { fCoordinates.SetEta(etaval); return *this;}. Scalar Dot( const DisplacementVector3D<OtherCoords,Tag> & v); ------ Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; 	 but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:27748,avoid,avoid,27748,root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,4,['avoid'],['avoid']
Safety,"th::DefaultCoordinateSystemTag>::Scalar ang). Change Theta - Polar3D coordinates only. { fCoordinates.SetTheta(ang); return *this;}. DisplacementVector3D<CoordSystem, Tag>& SetPhi(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar ang). Change Phi - Polar3D or CylindricalEta3D coordinates. { fCoordinates.SetPhi(ang); return *this;}. DisplacementVector3D<CoordSystem, Tag>& SetRho(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar rr). Change Rho - CylindricalEta3D coordinates only. { fCoordinates.SetRho(rr); return *this;}. DisplacementVector3D<CoordSystem, Tag>& SetEta(ROOT::Math::DisplacementVector3D<ROOT::Math::Cartesian3D<double>,ROOT::Math::DefaultCoordinateSystemTag>::Scalar etaval). Change Eta - CylindricalEta3D coordinates only. { fCoordinates.SetEta(etaval); return *this;}. Scalar Dot( const DisplacementVector3D<OtherCoords,Tag> & v); ------ Operations combining two vectors ------; -- need to have the specialized version in order to avoid. Return the scalar (dot) product of two displacement vectors.; It is possible to perform the product for any type of vector coordinates,; but they must have the same coordinate system tag. Scalar Dot( const OtherVector & v). Return the scalar (dot) product of two vectors.; It is possible to perform the product for any classes; implementing x(), y() and z() member functions. DisplacementVector3D Cross( const DisplacementVector3D<OtherCoords,Tag> & v). Return vector (cross) product of two displacement vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any type of vector coordinates,; but they must have the same coordinate system tag. DisplacementVector3D Cross( const OtherVector & v). Return vector (cross) product of two vectors,; as a vector in the coordinate system of this class.; It is possible to perform the product for any classes; implementing X(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html:24400,avoid,avoid,24400,root/html534/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__DisplacementVector3D_-p1Cartesian3D_double__-p1DefaultCoordinateSystemTag_.html,1,['avoid'],['avoid']
Safety,"th; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967),; 309-320.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo.:Identification of peaks in; multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; A 376 (1996), 451.; . Examples of peak searching method:. The SearchHighRes function provides users with the possibility to vary the; input parameters and with the access to the output deconvolved data in the; destination spectrum. Based on the output data one can tune the parameters.; ; Example 15 - scr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:53070,detect,detect,53070,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,2,['detect'],['detect']
Safety,"th; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967),; 309-320.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo.:Identification of peaks in; multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; A 376 (1996), 451.; . Examples of peak searching method:. The SearchHighRes function provides users with the possibility to vary the; input parameters and with the access to the output deconvolved data in the; destination spectrum. Based on the output data one can tune the parameters.; ; Example 15 - scrip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:51911,detect,detect,51911,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,4,['detect'],['detect']
Safety,"thSuper(TGraph* grin, Option_t* option = """", Double_t bass = 0, Double_t span = 0, Bool_t isPeriodic = kFALSE, Double_t* w = 0); Smooth data with Super smoother*-*-*-. Smooth the (x, y) values by Friedman's ``super smoother''. Arguments:; grin: graph for smoothing. span: the fraction of the observations in the span of the running lines; smoother, or 0 to choose this by leave-one-out cross-validation.; bass: controls the smoothness of the fitted curve.; Values of up to 10 indicate increasing smoothness.; isPeriodic: if TRUE, the x values are assumed to be in [0, 1]; and of period 1.; w: case weights. Details:; supsmu is a running lines smoother which chooses between three spans for; the lines. The running lines smoothers are symmetric, with k/2 data points; each side of the predicted point, and values of k as 0.5 * n, 0.2 * n and; 0.05 * n, where n is the number of data points. If span is specified,; a single smoother with span span * n is used. The best of the three smoothers is chosen by cross-validation for each; prediction. The best spans are then smoothed by a running lines smoother; and the final prediction chosen by linear interpolation. The FORTRAN code says: ``For small samples (n < 40) or if there are; substantial serial correlations between observations close in x - value,; then a prespecified fixed span smoother (span > 0) should be used.; Reasonable span values are 0.2 to 0.4.''. References:; Friedman, J. H. (1984) SMART User's Guide.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 1. Friedman, J. H. (1984) A variable span scatterplot smoother.; Laboratory for Computational Statistics,; Stanford University Technical Report No. 5. void BDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); Friedmann�s super smoother *-*-*-*-*-. super smoother (Friedman, 1984). version 10/10/84. coded and copywrite (c) 1984 by:. Jerome H. Friedman; department of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphSmooth.html:11459,predict,prediction,11459,root/html528/TGraphSmooth.html,https://root.cern,https://root.cern/root/html528/TGraphSmooth.html,6,['predict'],['prediction']
Safety,"th_t &path); 70{; 71 auto curr = elem;; 72 ; 73 for (auto &itemname : path) {; 74 if (!curr); 75 return nullptr;; 76 ; 77 auto iter = curr->GetChildsIter();; 78 if (!iter || !iter->Find(itemname)); 79 return nullptr;; 80 ; 81 curr = iter->GetElement();; 82 }; 83 ; 84 return curr;; 85}; 86 ; 87/////////////////////////////////////////////////////////////////////; 88/// Returns string content like text file content or json representation; 89 ; 90std::string RElement::GetContent(const std::string &kind); 91{; 92 if (GetContentKind(kind) == kJson) {; 93 auto obj = GetObject();; 94 if (obj); 95 return TBufferJSON::ConvertToJSON(obj->GetObject(), obj->GetClass()).Data();; 96 }; 97 ; 98 return """"s;; 99}; 100 ; 101 ; 102/////////////////////////////////////////////////////////////////////; 103/// Returns item with element description; 104 ; 105std::unique_ptr<RItem> RElement::CreateItem() const; 106{; 107 auto item = std::make_unique<RItem>(GetName());; 108 item->SetTitle(GetTitle());; 109 return item;; 110}; 111 ; 112/////////////////////////////////////////////////////////////////////; 113/// Parse string path to produce RElementPath_t; 114/// One should avoid to use string pathes as much as possible; 115 ; 116RElementPath_t RElement::ParsePath(const std::string &strpath); 117{; 118 RElementPath_t arr;; 119 if (strpath.empty()); 120 return arr;; 121 ; 122 std::string slash = ""/"";; 123 ; 124 std::string::size_type previous = 0;; 125 if (strpath[0] == slash[0]) previous++;; 126 ; 127 auto current = strpath.find(slash, previous);; 128 while (current != std::string::npos) {; 129 if (current > previous); 130 arr.emplace_back(strpath.substr(previous, current - previous));; 131 previous = current + 1;; 132 current = strpath.find(slash, previous);; 133 }; 134 ; 135 if (previous < strpath.length()); 136 arr.emplace_back(strpath.substr(previous));; 137 ; 138 return arr;; 139}; 140 ; 141/////////////////////////////////////////////////////////////////////; 142/// Compare two paths,; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RElement_8cxx_source.html:3600,avoid,avoid,3600,doc/master/RElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RElement_8cxx_source.html,2,['avoid'],['avoid']
Safety,"than expected (%d vs %ld). Most likely there has been an out-of-bound write."",nbytes,(long int)actualBytes);; 2605 }; 2606 }; 2607 fNbytesFree = key->GetNbytes();; 2608 fSeekFree = key->GetSeekKey();; 2609 key->WriteFile();; 2610 delete key;; 2611}; 2612 ; 2613////////////////////////////////////////////////////////////////////////////////; 2614/// Write File Header.; 2615 ; 2616void TFile::WriteHeader(); 2617{; 2618 SafeDelete(fInfoCache);; 2619 TFree *lastfree = (TFree*)fFree->Last();; 2620 if (lastfree) fEND = lastfree->GetFirst();; 2621 const char *root = ""root"";; 2622 char *psave = new char[fBEGIN];; 2623 char *buffer = psave;; 2624 Int_t nfree = fFree->GetSize();; 2625 memcpy(buffer, root, 4); buffer += 4;; 2626 Int_t version = fVersion;; 2627 if (version <1000000 && fEND > kStartBigFile) {version += 1000000; fUnits = 8;}; 2628 tobuf(buffer, version);; 2629 tobuf(buffer, (Int_t)fBEGIN);; 2630 if (version < 1000000) {; 2631 tobuf(buffer, (Int_t)fEND);; 2632 tobuf(buffer, (Int_t)fSeekFree);; 2633 tobuf(buffer, fNbytesFree);; 2634 tobuf(buffer, nfree);; 2635 tobuf(buffer, fNbytesName);; 2636 tobuf(buffer, fUnits);; 2637 tobuf(buffer, fCompress);; 2638 tobuf(buffer, (Int_t)fSeekInfo);; 2639 tobuf(buffer, fNbytesInfo);; 2640 } else {; 2641 tobuf(buffer, fEND);; 2642 tobuf(buffer, fSeekFree);; 2643 tobuf(buffer, fNbytesFree);; 2644 tobuf(buffer, nfree);; 2645 tobuf(buffer, fNbytesName);; 2646 tobuf(buffer, fUnits);; 2647 tobuf(buffer, fCompress);; 2648 tobuf(buffer, fSeekInfo);; 2649 tobuf(buffer, fNbytesInfo);; 2650 }; 2651 if (TestBit(kReproducible)); 2652 TUUID(""00000000-0000-0000-0000-000000000000"").FillBuffer(buffer);; 2653 else; 2654 fUUID.FillBuffer(buffer);; 2655 Int_t nbytes = buffer - psave;; 2656 Seek(0); // NOLINT: silence clang-tidy warnings; 2657 WriteBuffer(psave, nbytes); // NOLINT: silence clang-tidy warnings; 2658 Flush(); // NOLINT: silence clang-tidy warnings, Intentionally not conditional on fMustFlush, this is the 'obligatory' flush.; 2659 dele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:92482,Safe,SafeDelete,92482,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Safe'],['SafeDelete']
Safety,"that the user can specify the underlying scalar type.; The GenVector classes do not inherit from TObject, therefore cannot be used as in the case of the physics vector classes in ROOT collections.; In addition, to optimize performances, no virtual destructors are provided. In the following paragraphs, the main characteristics of GenVector are described. A more detailed description of all the GenVector classes is available also at http://seal.cern.ch/documents/mathlib/GenVector.pdf; 13.12.1 Main Characteristics; 13.12.1.1 Optimal Runtime Performances; We try to minimize any overhead in the run-time performance. We have deliberately avoided the use of any virtual function and even virtual destructors in the classes. In addition, as much as possible functions are defined as inline. For this reason, we have chosen to use template classes to implement the GenVector concepts instead of abstract or base classes and virtual functions. It is then recommended to avoid using the GenVector classes polymorphically and developing classes inheriting from them.; 13.12.1.2 Points and Vector Concept; Mathematically vectors and points are two distinct concepts. They have different transformations, as vectors only rotate while points rotate and translate. You can add two vectors but not two points and the difference between two points is a vector. We then distinguish for the 3 dimensional case, between points and vectors, modeling them with different classes:. ROOT::Math::DisplacementVector2D and ROOT::Math::DisplacementVector3D template classes describing 2 and 3 component direction and magnitude vectors, not rooted at any particular point;; ROOT::Math::PositionVector2D and ROOT::Math::PositionVector3D template classes modeling the points in 2 and 3 dimensions. For the 4D space-time vectors, we use the same class to model them, ROOT::Math::LorentzVector, since we have recognized a limited need for modeling the functionality of a 4D point.; 13.12.1.3 Generic Coordinate System; The vecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:720073,avoid,avoid,720073,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoid']
Safety,"the TProof instance to talk to the worker or submaster nodes. Return 0 on success, -1 on error ; Reimplemented in TProofServLite.; Definition at line 790 of file TProofServ.cxx. ◆ DeclFileName(). static const char * TProofServ::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 344 of file TProofServ.h. ◆ DeletePlayer(). void TProofServ::DeletePlayer ; (; ). protectedvirtual . Delete player instance. ; Definition at line 5907 of file TProofServ.cxx. ◆ DisableTimeout(). virtual void TProofServ::DisableTimeout ; (; ). inlinevirtual . Definition at line 316 of file TProofServ.h. ◆ EnableTimeout(). virtual void TProofServ::EnableTimeout ; (; ). inlinevirtual . Definition at line 317 of file TProofServ.h. ◆ ErrorHandler(). void TProofServ::ErrorHandler ; (; Int_t ; level, . Bool_t ; abort, . const char * ; location, . const char * ; msg . ). static . The PROOF error handler function. ; It prints the message on fgErrorHandlerFile and if abort is set it aborts the application. ; Definition at line 5755 of file TProofServ.cxx. ◆ FilterLocalroot(). void TProofServ::FilterLocalroot ; (; TString & ; path, . const char * ; dsrv = ""root://dum/"" . ). static . If 'path' is local and 'dsrv' is Xrootd, apply 'path.Localroot' settings, if any. ; The final path via the server is dsrv+path. ; Definition at line 6966 of file TProofServ.cxx. ◆ FlushLogFile(). void TProofServ::FlushLogFile ; (; ). Reposition the read pointer in the log file to the very end. ; This allows to ""hide"" useful debug messages during normal operations while preserving the possibility to have them in case of problems. ; Definition at line 6013 of file TProofServ.cxx. ◆ Fork(). Int_t TProofServ::Fork ; (; ). protectedvirtual . Fork a child. ; If successful, return 0 in the child process and the child pid in the parent process. The child pid is registered for reaping. Return <0 in the parent process in case of failure. ; Definition at line 6665 of file TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:35576,abort,abort,35576,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,2,['abort'],"['abort', 'aborts']"
Safety,"the buffers. void UpdateBranches(TTree* tree); update pointer to current Tree and recompute pointers to the branches in the cache. Bool_t IsParallelUnzip(); Static function that tells wether the multithreading unzipping; is activated. Bool_t IsActiveThread(); This indicates if the thread is active in this moment...; this variable is very important because if we change it from true to; false the thread will stop... ( see StopThreadTreeCacheUnzip() ). Bool_t IsQueueEmpty(); It says if the queue is empty... useful to see if we have to process; it. void WaitUnzipStartSignal(); Here the threads sleep waiting for some blocks to unzip. void SendUnzipStartSignal(Bool_t broadcast); This will send the signal corresponfing to the queue... normally used; when we want to start processing the list of buffers. Int_t SetParallelUnzip(TTreeCacheUnzip::EParUnzipMode option = TTreeCacheUnzip::kEnable); Static function that(de)activates multithreading unzipping; The possible options are:; kEnable _Enable_ it, which causes an automatic detection and launches the; additional thread if the number of cores in the machine is greater than one; kDisable _Disable_ will not activate the additional thread.; kForce _Force_ will start the additional thread even if there is only one core.; the default will be taken as kEnable.; returns 0 if there was an error, 1 otherwise. Int_t StartThreadUnzip(Int_t nthreads); The Thread is only a part of the TTreeCache but it is the part that; waits for info in the queue and process it... unfortunatly, a Thread is; not an object an we have to deal with it in the old C-Style way; Returns 0 if the thread was initialized or 1 if it was already running. Int_t StopThreadUnzip(); To stop the thread we only need to change the value of the variable; fActiveThread to false and the loop will stop (of course, we will have); to do the cleaning after that.; Note: The syncronization part is important here or we will try to delete; teh object while it's still processing the que",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:18139,detect,detection,18139,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,3,['detect'],['detection']
Safety,"the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. Bool_t MatchLegacyCheckSum(UInt_t checksum) const; Return true if the checksum passed as argument is one of the checksum; value produced by the older checksum calulcation algorithm. UInt_t GetCheckSum(TClass::ECheckSu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:42322,safe,safe,42322,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['safe'],['safe']
Safety,"the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. UInt_t GetCheckSum(UInt_t code = 0) const; Compute and/or return the class check sum.; The class ckecksum is used by the automatic schema evolution algorithm; to uniquely identify a class version.; The check sum is bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:36024,safe,safe,36024,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,4,['safe'],['safe']
Safety,"the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 1982 of file TBufferFile.cxx. ◆ WriteFastArray() [2/15]. void TBufferFile::WriteFastArray ; (; const Char_t * ; c, . Long64_t ; n . ). overridevirtual . Write array of n characters into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2010 of file TBufferFile.cxx. ◆ WriteFastArray() [3/15]. void TBufferFile::WriteFastArray ; (; const Double_t * ; d, . Long64_t ; n . ). overridevirtual . Write array of n doubles into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2236 of file TBufferFile.cxx. ◆ WriteFastArray() [4/15]. void TBufferFile::WriteFastArray ; (; const Float_t * ; f, . Long64_t ; n . ). overridevirtual . Write array of n floats into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2203 of file TBufferFile.cxx. ◆ WriteFastArray() [5/15]. void TBufferFile::WriteFastArray ; (; const Int_t * ; ii, . Long64_t ; n . ). overridevirtual . Write array of n ints into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:81897,abort,aborts,81897,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['abort'],['aborts']
Safety,"the current state.Definition TGeoNavigator.cxx:2425; TGeoNavigator::PushPointInt_t PushPoint(Int_t startlevel=0)Definition TGeoNavigator.h:263; TGeoNavigator::StepTGeoNode * Step(Bool_t is_geom=kTRUE, Bool_t cross=kTRUE)Make a rectiliniar step of length fStep from current point (fPoint) on current direction (fDirection)...Definition TGeoNavigator.cxx:2290; TGeoNavigator::FindInClusterTGeoNode * FindInCluster(Int_t *cluster, Int_t nc)Find a node inside a cluster of overlapping nodes.Definition TGeoNavigator.cxx:2159; TGeoNavigator::TGeoNavigatorTGeoNavigator(const TGeoNavigator &)=delete; TGeoNavigator::fStepDouble_t fStepDefinition TGeoNavigator.h:43; TGeoNavigator::IsNullStepBool_t IsNullStep() constDefinition TGeoNavigator.h:146; TGeoNavigator::GetCurrentVolumeTGeoVolume * GetCurrentVolume() constDefinition TGeoNavigator.h:163; TGeoNavigator::GetNextDaughterIndexInt_t GetNextDaughterIndex() constDefinition TGeoNavigator.h:153; TGeoNavigator::SafetyOverlapsvoid SafetyOverlaps()Compute safe distance from the current point within an overlapping node.Definition TGeoNavigator.cxx:1846; TGeoNavigator::GetCurrentMatrixTGeoHMatrix * GetCurrentMatrix() constDefinition TGeoNavigator.h:158; TGeoNavigator::CrossDivisionCellTGeoNode * CrossDivisionCell()Cross a division cell.Definition TGeoNavigator.cxx:461; TGeoNavigator::ResetStatevoid ResetState()Reset current state flags.Definition TGeoNavigator.cxx:1643; TGeoNavigator::IsPWSafetyCachingstatic Bool_t IsPWSafetyCaching()Definition TGeoNavigator.h:232; TGeoNavigator::GetSafeDistanceDouble_t GetSafeDistance() constDefinition TGeoNavigator.h:126; TGeoNavigator::FindNextDaughterBoundaryTGeoNode * FindNextDaughterBoundary(Double_t *point, Double_t *dir, Int_t &idaughter, Bool_t compmatrix=kFALSE)Computes as fStep the distance to next daughter of the current volume.Definition TGeoNavigator.cxx:988; TGeoNavigator::fIsSameLocationBool_t fIsSameLocationflag that current point is on some boundaryDefinition TGeoNavigator.h:70; TGeoNavi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNavigator_8h_source.html:23924,Safe,SafetyOverlapsvoid,23924,doc/master/TGeoNavigator_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNavigator_8h_source.html,3,"['Safe', 'safe']","['SafetyOverlaps', 'SafetyOverlapsvoid', 'safe']"
Safety,"the current volume and the crossed boundary can belong either to the current node or to one of its daughters. The full prototype of the method is:; TGeoNode *TGeoManager::FindNextBoundary(Double_t step=kBig);; TGeoManager::FindNextBoundaryTGeoNode * FindNextBoundary(Double_t stepmax=TGeoShape::Big(), const char *path="""", Bool_t frombdr=kFALSE)Find distance to next boundary and store it in fStep.Definition TGeoManager.cxx:2755; In the prototype above, besides the current point and direction that are supposed already initialized, the only input parameter is step. This represents the maximum step allowed by the tracking algorithm or the physical step. The modeller will search for a boundary crossing only up to a distance equal to this value. If a boundary is found, a pointer to the object (node) having it is returned; otherwise the method returns NULL.; The computed value for the computed distance can be subsequently retrieved from the manager class:; Double_t snext = gGeoManager->GetStep();; Double_t safety = gGeoManager->GetSafeDistance();; TGeoManager::GetSafeDistanceDouble_t GetSafeDistance() constDefinition TGeoManager.h:384; TGeoManager::GetStepDouble_t GetStep() constDefinition TGeoManager.h:386; According the step value, two use cases are possible:. step = TGeoShape::kBig (default behavior; kBig = 1030). In this case, there is no limitation on the search algorithm, the first crossed node is returned and the corresponding distance computed. If the current point is outside geometry and the top node is not crossed, the corresponding distance will be set to kBig and a NULL pointer returned. No additional quantity will be computed.; step < kBig. In this case, the progressive search starting from the current point will be stopped after a distance equal with the supplied step. In addition to the distance to the first crossed boundary, the safety radius is also computed. Whenever the information regarding the maximum required step is known it is recommended to be provi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:83694,safe,safety,83694,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['safe'],['safety']
Safety,"the file via WriteFree as a single data record. ; Reimplemented from TFile.; Definition at line 85 of file TXMLFile.h. ◆ ReadFromFile(). Bool_t TXMLFile::ReadFromFile ; (; ). protected . read document from file Now full content of document reads into the memory Then document decomposed to separate keys and streamer info structures All irrelevant data will be cleaned ; Definition at line 559 of file TXMLFile.cxx. ◆ ReadKeysList(). Int_t TXMLFile::ReadKeysList ; (; TDirectory * ; dir, . XMLNodePointer_t ; topnode . ). protected . Read list of keys for directory. ; Definition at line 630 of file TXMLFile.cxx. ◆ ReadStreamerElement(). void TXMLFile::ReadStreamerElement ; (; XMLNodePointer_t ; node, . TStreamerInfo * ; info . ). protected . read and reconstruct single TStreamerElement from xml node ; Definition at line 825 of file TXMLFile.cxx. ◆ Recover(). Int_t TXMLFile::Recover ; (; ). inlinefinalvirtual . Attempt to recover file if not correctly closed. ; The function returns the number of keys that have been recovered. If no keys can be recovered, the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:66604,recover,recovered,66604,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['recover'],['recovered']
Safety,"the file will be declared Zombie by the calling function. This function is automatically called when opening a file. If the file is open in read only mode, the file is not modified. If open in update mode and the function finds something to recover, a new directory header is written to the file. When opening the file gain no message from Recover will be reported. If keys have been recovered, the file is usable and you can safely read the corresponding objects. If the file is not usable (a zombie), you can test for this case with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {<actions to take if file is unusable>}; If the file has been recovered, the bit kRecovered is set in the TFile object in memory. You can test if the file has been recovered with if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; When writing TTrees to a file, it is important to save the Tree header at regular intervals (see TTree::AutoSave). If a file containing a Tree is recovered, the last Tree header written to the file will be used. In this case all the entries in all the branches written before writing the header are valid entries. One can disable the automatic recovery procedure by setting TFile.Recover 0; in the system.rootrc file. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 2048 of file TFile.cxx. ◆ ReOpen(). Int_t TFile::ReOpen ; (; Option_t * ; mode). virtual . Reopen a file with a different access mode. ; For example, it is possible to change from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or ""UPDATE"". The method returns 0 in case the mode was successfully modified, 1 in case the mode did not change (was already as requested or wrong input arguments) and -1 in case of failure, in which case the file cannot be used anymore. The current directory (gFile) is changed to this file. ; Reimplemented in TSQLFile, TXMLFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 2162 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:89891,recover,recovered,89891,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['recover'],['recovered']
Safety,"the first line, strip the new lines; # and split it into a list along 'tab' boundaries; header_row = open(afile).readline().strip().split('\t'); # Create the branch descriptor; branch_descriptor = ':'.join([header_mapping_dictionary[row][0]+'/'+; type_mapping_dictionary[header_mapping_dictionary[row][1]]; for row in header_row]); #print(branch_descriptor); ; # Handling the input and output names. Using the same; # base name for the ROOT output file.; output_ROOT_file_name = os.path.splitext(afile)[0] + '.root'; output_file = ROOT.TFile(output_ROOT_file_name, 'recreate'); print(""Outputting %s -> %s"" % (afile, output_ROOT_file_name)); ; output_tree = ROOT.TTree(tree_name, tree_name); file_lines = open(afile).readlines(); ; # Clean the data entries: remove the first (header) row.; # Ensure empty strings are tagged as such since; # ROOT doesn't differentiate between different types; # of white space. Therefore, we change all of these; # entries to 'empty'. Also, avoiding any lines that begin; # with '#'; file_lines = ['\t'.join([val if (val.find(' ') == -1 and val != ''); else 'empty' for val in line.split('\t')]); for line in file_lines[1:] if line[0] != '#' ]; ; # Removing NaN, setting these entries to 0.0.; # Also joining the list of strings into one large string.; file_as_string = ('\n'.join(file_lines)).replace('NaN', str(0.0)); #print(file_as_string); ; # creating an istringstream to pass into ReadStream; istring = ROOT.istringstream(file_as_string); ; # Now read the stream; output_tree.ReadStream(istring, branch_descriptor); ; output_file.cd(); output_tree.Write(); ; ; if __name__ == '__main__':; if len(sys.argv) < 2:; print(""Usage: %s file_to_parse.dat"" % sys.argv[0]); sys.exit(1); parse_CSV_file_with_TTree_ReadStream(""example_tree"", sys.argv[1]); ; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/parse__CSV__file__with__TTree__ReadStream_8py.html:3958,avoid,avoiding,3958,doc/master/parse__CSV__file__with__TTree__ReadStream_8py.html,https://root.cern,https://root.cern/doc/master/parse__CSV__file__with__TTree__ReadStream_8py.html,1,['avoid'],['avoiding']
Safety,"the inside of each point ; Reimplemented from TGeoBBox.; Definition at line 587 of file TGeoCompositeShape.cxx. ◆ CreateThreadData(). void TGeoCompositeShape::CreateThreadData ; (; Int_t ; nthreads). overridevirtual . Needed just for cleanup. ; Reimplemented from TGeoShape.; Definition at line 209 of file TGeoCompositeShape.cxx. ◆ DeclFileName(). static const char * TGeoCompositeShape::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 84 of file TGeoCompositeShape.h. ◆ DistancetoPrimitive(). Int_t TGeoCompositeShape::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute closest distance from point px,py to each corner. ; Reimplemented from TGeoBBox.; Definition at line 333 of file TGeoCompositeShape.cxx. ◆ DistFromInside(). Double_t TGeoCompositeShape::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Compute distance from inside point to outside of this composite shape. ; Reimplemented from TGeoBBox.; Definition at line 357 of file TGeoCompositeShape.cxx. ◆ DistFromInside_v(). void TGeoCompositeShape::DistFromInside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Compute distance from array of input points having directions specified by dirs. Store output in dists. ; Reimplemented from TGeoBBox.; Definition at line 607 of file TGeoCompositeShape.cxx. ◆ DistFromOutside(). Double_t TGeoCompositeShape::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Compute distance from outside point to this composite shape. ; Check if the bounding box is crossed within the requested distance ; Reimplemented from T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:37775,safe,safe,37775,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['safe'],['safe']
Safety,"the method returns kTRUE. ; Definition at line 945 of file TUDPSocket.cxx. ◆ RecvRaw(). Int_t TUDPSocket::RecvRaw ; (; void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). virtual . Receive a raw buffer of specified length bytes. ; Using option kPeek one can peek at incoming data. Returns number of received bytes. Returns -1 in case of error. In case of opt == kOob: -2 means EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock) -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). ; Definition at line 867 of file TUDPSocket.cxx. ◆ RecvStreamerInfos(). Bool_t TUDPSocket::RecvStreamerInfos ; (; TMessage * ; mess). protected . Receive a message containing streamer infos. ; In case the message contains streamer infos they are imported, the message will be deleted and the method returns kTRUE. ; Definition at line 898 of file TUDPSocket.cxx. ◆ Select(). Int_t TUDPSocket::Select ; (; Int_t ; interest = kRead, . Long_t ; timeout = -1 . ). virtual . Waits for this socket to change status. ; If interest=kRead, the socket will be watched to see if characters become available for reading; if interest=kWrite the socket will be watched to see if a write will not block. The argument 'timeout' specifies a maximum time to wait in millisec. Default no timeout. Returns 1 if a change of status of interest has been detected within timeout; 0 in case of timeout; < 0 if an error occured. ; Definition at line 407 of file TUDPSocket.cxx. ◆ Send() [1/4]. Int_t TUDPSocket::Send ; (; const char * ; str, . Int_t ; kind = kMESS_STRING . ). virtual . Send a character string buffer. ; Use kind to set the TMessage ""what"" field. Returns the number of bytes in the string str that were sent and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Definition at line 464 of file TUDPSocket.cxx. ◆ Send() [2/4].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:28773,timeout,timeout,28773,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['timeout'],['timeout']
Safety,"the node having this id. ;  ; void CdTop ();  Make top level node the current node. ;  ; void CdUp ();  Go one level up in geometry. ;  ; void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.);  Check pushes and pulls needed to cross the next boundary with respect to the position given by FindNextBoundary. ;  ; void CheckBoundaryReference (Int_t icheck=-1);  Check the boundary errors reference file created by CheckBoundaryErrors method. ;  ; void CheckGeometry (Option_t *option="""");  Perform last checks on the geometry. ;  ; void CheckGeometryFull (Int_t ntracks=1000000, Double_t vx=0., Double_t vy=0., Double_t vz=0., Option_t *option=""ob"");  Geometry checking. ;  ; void CheckOverlaps (Double_t ovlp=0.1, Option_t *option="""");  Check all geometry for illegal overlaps within a limit OVLP. ;  ; Bool_t CheckPath (const char *path) const;  Check if a geometry path is valid without changing the state of the current navigator. ;  ; void CheckPoint (Double_t x=0, Double_t y=0, Double_t z=0, Option_t *option="""", Double_t safety=0.);  Classify a given point. See TGeoChecker::CheckPoint(). ;  ; void CheckShape (TGeoShape *shape, Int_t testNo, Int_t nsamples, Option_t *option);  Test for shape navigation methods. ;  ; void CleanGarbage ();  Clean temporary volumes and shapes from garbage collection. ;  ; void ClearAttributes ();  Reset all attributes to default ones. ;  ; void ClearNavigators ();  Clear all navigators. ;  ; void ClearOverlaps ();  Clear the list of overlaps. ;  ; void ClearPhysicalNodes (Bool_t mustdelete=kFALSE);  Clear the current list of physical nodes, so that we can start over with a new list. ;  ; void ClearShape (const TGeoShape *shape);  Remove a shape from the list of shapes. ;  ; void ClearThreadData () const;  ; void ClearTracks ();  ; void CloseGeometry (Option_t *option=""d"");  Closing geometry implies checking the geometry validity, fixing shapes with negative parameters (run-time shapes)building the cache manager, voxelizing all vol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:23435,safe,safety,23435,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['safe'],['safety']
Safety,"the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. void HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; priority is a number (0 - 100) determined by a scheduler (third; party ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServ.html:26855,abort,abort,26855,root/html532/TProofServ.html,https://root.cern,https://root.cern/root/html532/TProofServ.html,1,['abort'],['abort']
Safety,"the queue of submitted jobs.; to be called on the top master only. Int_t RegisterDataSets(TList* in, TList* out); Register TFileCollections in 'out' as datasets according to the rules in 'in'. void HandleQueryList(TMessage* mess); Handle request for list of queries. void HandleRemove(TMessage* mess, TString* slb = 0); Handle remove request. void HandleRetrieve(TMessage* mess, TString* slb = 0); Handle retrieve request. void HandleLibIncPath(TMessage* mess); Handle lib, inc search paths modification request. void HandleCheckFile(TMessage* mess, TString* slb = 0); Handle file checking request. Int_t HandleCache(TMessage* mess, TString* slb = 0); Handle here all cache and package requests. Int_t HandleWorkerLists(TMessage* mess); Handle here all requests to modify worker lists. FILE * SetErrorHandlerFile(FILE* ferr); Set the file stream where to log (default stderr).; If ferr == 0 the default is restored.; Returns current setting. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The PROOF error handler function. It prints the message on fgErrorHandlerFile and; if abort is set it aborts the application. Int_t CopyFromCache(const char* name, Bool_t cpbin); Retrieve any files related to 'macro' from the cache directory.; If 'cpbin' is true, the associated binaries are retrieved as well.; Returns 0 on success, -1 otherwise. Int_t CopyToCache(const char* name, Int_t opt = 0); Copy files related to 'macro' to the cache directory.; Action depends on 'opt':. opt = 0 copy 'macro' to cache and delete from cache any binary; related to name; e.g. if macro = bla.C, the binaries are; bla_C.so, bla_C.rootmap, ...; opt = 1 copy the binaries related to macro to the cache. Returns 0 on success, -1 otherwise. void MakePlayer(); Make player instance. void DeletePlayer(); Delete player instance. Int_t GetPriority(); Get the processing priority for the group the user belongs too. This; prioroty is a number (0 - 100) determined by a scheduler (third; party ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServ.html:26855,abort,abort,26855,root/html530/TProofServ.html,https://root.cern,https://root.cern/root/html530/TProofServ.html,1,['abort'],['abort']
Safety,"the shape. The point has to be defined in the local shape reference. For instance, for a box having DX,DY and DZhalf-lengths a point will be considered inside if:; -DX <= point[0] <= DX; -DY <= point[1] <= DY; -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3],; Double_t *dir[3], Int_t iact,Double_t step,Double_t *safe);; Int_tint Int_tDefinition RtypesCore.h:45; TGeoShape::DistFromInsidevirtual Double_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; The method computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(const Double_t *point, Bool_t in=kTRUE) const =0; This computes the maximum s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:6010,safe,safe,6010,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,1,['safe'],['safe']
Safety,"the socket is not; in the active list move it or add it there.; If interest=kRead then we want to monitor the socket for read readiness,; if interest=kWrite then we monitor the socket for write readiness,; if interest=kRead|kWrite then we monitor both read and write readiness. void Remove(TSocket* sock); Remove a socket from the monitor. void RemoveAll(); Remove all sockets from the monitor. void Activate(TSocket* sock); Activate a de-activated socket. void ActivateAll(); Activate all de-activated sockets. void DeActivate(TSocket* sock); De-activate a socket. void DeActivateAll(); De-activate all activated sockets. TSocket * Select(); Return pointer to socket for which an event is waiting.; Select can be interrupt by a call to Interrupt() (e.g. connected with a; Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable; in such a case.; Return 0 in case of error. TSocket * Select(Long_t timeout); Return pointer to socket for which an event is waiting.; Wait a maximum of timeout milliseconds.; If return is due to timeout it returns (TSocket *)-1.; Select() can be interrupt by a call to Interrupt() (e.g. connected with a; Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable; in such a case.; Return 0 in case of any other error situation. Int_t Select(TList* rdready, TList* wrready, Long_t timeout); Return numbers of sockets that are ready for reading or writing.; Wait a maximum of timeout milliseconds.; Return 0 if timed-out. Return < 0 in case of error.; If rdready and/or wrready are not 0, the lists of sockets with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:11714,timeout,timeout,11714,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,6,['timeout'],['timeout']
Safety,the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives(). TList * TMonitor::GetListOfDeActives ; (; ); const. Returns a list with all de-active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 515 of file TMonitor.cxx. ◆ GetSender(). void * TMonitor::GetSender ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at line 51 of file TMonitor.h. ◆ Interrupt(). void TMonitor::Interrupt ; (; ). inline . Definition at line 71 of file TMonitor.h. ◆ IsA(). TClass * TMonitor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file TMonitor.h. ◆ IsActive(). Bool_t TMonitor::IsActive ; (; TSocket * ; sock); const. Check if socket 's' is in the active list. ; Avoids the duplication of active list via TMonitor::GetListOfActives(). ; Definition at line 482 of file TMonitor.cxx. ◆ Ready(). void TMonitor::Ready ; (; TSocket * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3].,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:20783,Avoid,Avoids,20783,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['Avoid'],['Avoids']
Safety,"the specific shape; // classes, nmed is the medium number, upar is an Double_t * array; // of the shape parameters and npar is the number of parameters.; // This prototype allows (npar = 0) to define volumes with shape; // defined only at positioning time (volumes defined in this way; // need to be positioned using TGeoManager::Node() method); TGeoManager::VolumeTGeoVolume * Volume(const char *name, const char *shape, Int_t nmed, Float_t *upar, Int_t npar=0)Create a volume in GEANT3 style.Definition TGeoManager.cxx:1388; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; Positioned Volumes (Nodes); Geometrical modeling is a difficult task when the number of different geometrical objects is 106-108. This is more or less the case for detector geometries of complex experiments, where a ‘flat' CSG model description cannot scale with the current CPU performances. This is the reason why models like GEANT [1] introduced an additional dimension (depth) in order to reduce the complexity of the problem. This concept is also preserved by the ROOT modeller and introduces a pure geometrical constraint between objects (volumes in our case) - containment. This means in fact that any positioned volume has to be contained by another. Now what means contained and positioned?. We will say that a volume contains a point if this is inside the shape associated to the volume. For instance, a volume having a box shape will contain all points P=(X,Y,Z) verifying the conditions: Abs(Pi)dXi. The points on the shape boundaries are considered as inside the volume. The volume contains a daughter if it contains all the points contained by the daughter.; The definition of containment works of course only with points defined in the local coordinate system of the considered volume. Positionin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:27144,detect,detector,27144,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['detect'],['detector']
Safety,"the tree until a non-overlapping node. ;  ; Int_t GetStackLevel () const;  ; Double_t GetStep () const;  ; Int_t GetThreadId () const;  ; Int_t GetVirtualLevel ();  Find level of virtuality of current overlapping node (number of levels up having the same tracking media. ;  ; Bool_t GotoSafeLevel ();  Go upwards the tree until a non-overlapping node. ;  ; TGeoNode * InitTrack (const Double_t *point, const Double_t *dir);  Initialize current point and current direction vector (normalized) in MARS. ;  ; TGeoNode * InitTrack (Double_t x, Double_t y, Double_t z, Double_t nx, Double_t ny, Double_t nz);  Initialize current point and current direction vector (normalized) in MARS. ;  ; void InspectState () const;  Inspects path and all flags for the current state. ;  ; TClass * IsA () const override;  ; Bool_t IsCheckingOverlaps () const;  ; Bool_t IsCurrentOverlapping () const;  ; Bool_t IsEntering () const;  ; Bool_t IsExiting () const;  ; Bool_t IsNullStep () const;  ; Bool_t IsOnBoundary () const;  ; Bool_t IsOutside () const;  ; Bool_t IsSafeStep (Double_t proposed, Double_t &newsafety) const;  In case a previous safety value was computed, check if the safety region is still safe for the current point and proposed step. ;  ; Bool_t IsSameLocation () const;  ; Bool_t IsSameLocation (Double_t x, Double_t y, Double_t z, Bool_t change=kFALSE);  Checks if point (x,y,z) is still in the current node. ;  ; Bool_t IsSamePoint (Double_t x, Double_t y, Double_t z) const;  Check if a new point with given coordinates is the same as the last located one. ;  ; Bool_t IsStartSafe () const;  ; Bool_t IsStepEntering () const;  ; Bool_t IsStepExiting () const;  ; void LocalToMaster (const Double_t *local, Double_t *master) const;  ; void LocalToMasterBomb (const Double_t *local, Double_t *master) const;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const;  ; void MasterToLocal (const Double_t *master, Double_t *local) const;  ; void MasterToLocalBomb (const Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:6655,safe,safety,6655,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,3,['safe'],"['safe', 'safety']"
Safety,"the workspace (e.g. no duplicate object with the same name are allowed) and makes sure all objects in the workspace are connected to each other. Easy accessor methods like pdf(), var() and data() allow to refer to the contents of the workspace by object name. The entire RooWorkspace can be saved into a ROOT TFile and organises the consistent streaming of its contents without duplication. If a RooWorkspace contains custom classes, i.e. classes not in the ROOT distribution, portability of workspaces can be enhanced by storing the source code of those classes in the workspace as well. This process is also organized by the workspace through the importClassCode() method. Seemingly random crashes when reading large workspaces; When reading or loading workspaces with deeply nested PDFs, one can encounter ouf-of-memory errors if the stack size is too small. This manifests in crashes at seemingly random locations, or in the process silently ending. Unfortunately, ROOT neither recover from this situation, nor warn or give useful instructions. When suspecting to have run out of stack memory, check ulimit -s; and try reading again. PyROOT; The RooWorkspace::import function can't be used in PyROOT because import is a reserved python keyword. For this reason, an alternative with a capitalized name is provided: workspace.Import(x). Definition at line 43 of file RooWorkspace.h. Classes; class  CodeRepo;  ; class  WSDir;  . Public Member Functions;  RooWorkspace ();  Default constructor. ;  ;  RooWorkspace (const char *name, bool doCINTExport);  Construct empty workspace with given name and option to export reference to all workspace contents to a CINT namespace with the same name. ;  ;  RooWorkspace (const char *name, const char *title=nullptr);  Construct empty workspace with given name and title. ;  ;  RooWorkspace (const RooWorkspace &other);  Workspace copy constructor. ;  ;  ~RooWorkspace () override;  Workspace destructor. ;  ; bool addStudy (RooAbsStudy &study);  Insert RooSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:1620,recover,recover,1620,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['recover'],['recover']
Safety,"ther reference. ;  ; void ls (Option_t *option="""") const override;  Print the path (A/B/C/...) to this node on stdout. ;  ; virtual void MasterToLocal (const Double_t *master, Double_t *local) const;  Convert the point coordinates from mother reference to local reference system. ;  ; virtual void MasterToLocalVect (const Double_t *master, Double_t *local) const;  Convert a vector from mother reference to local reference system. ;  ; Bool_t MayOverlap (Int_t iother) const;  Check the overlab between the bounding box of the node overlaps with the one the brother with index IOTHER. ;  ; void Paint (Option_t *option="""") override;  Paint this node and its content according to visualization settings. ;  ; void PrintCandidates () const;  print daughters candidates for containing current point ;  ; void PrintOverlaps () const;  print possible overlapping nodes ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const;  computes the closest distance from given point to this shape ;  ; void SaveAttributes (std::ostream &out);  save attributes for this node ;  ; void SetAllInvisible ();  ; void SetCloned (Bool_t flag=kTRUE);  ; void SetCurrentPoint (Double_t x, Double_t y, Double_t z);  ; void SetFWExtension (TGeoExtension *ext);  Connect framework defined extension to the node. ;  ; void SetInvisible ();  ; void SetMotherVolume (TGeoVolume *mother);  ; void SetNumber (Int_t number);  ; void SetOverlapping (Bool_t flag=kTRUE);  ; void SetOverlaps (Int_t *ovlp, Int_t novlp);  set the list of overlaps for this node (ovlp must be created with operator new) ;  ; void SetUserExtension (TGeoExtension *ext);  Connect user-defined extension to the node. ;  ; void SetVirtual ();  ; void SetVisibility (Bool_t vis=kTRUE) override;  Set visibility of the node (obsolete). ;  ; void SetVolume (TGeoVolume *volume);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void VisibleDaughters (Bool_t vis=kTRUE);  Set visibility of the daughters (obsolete). ;  ;  Public Me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeMatrix.html:4943,Safe,Safety,4943,doc/master/classTGeoNodeMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html,2,['Safe'],['Safety']
Safety,"there is an inconsistency, we try to use merging; 972 if(inconsistency > kFullyConsistent) {; 973 useMerge = considerMerge;; 974 }; 975 ; 976 if (useMerge) {; 977 TList l;; 978 l.Add(const_cast<TH1*>(h1));; 979 auto iret = Merge(&l);; 980 return (iret >= 0);; 981 }; 982 ; 983 // Create Sumw2 if h1 has Sumw2 set; 984 if (fSumw2.fN == 0 && h1->GetSumw2N() != 0) Sumw2();; 985 ; 986 // - Add statistics; 987 Double_t entries = TMath::Abs( GetEntries() + c1 * h1->GetEntries() );; 988 ; 989 // statistics can be preserved only in case of positive coefficients; 990 // otherwise with negative c1 (histogram subtraction) one risks to get negative variances; 991 Bool_t resetStats = (c1 < 0);; 992 Double_t s1[kNstat] = {0};; 993 Double_t s2[kNstat] = {0};; 994 if (!resetStats) {; 995 // need to initialize to zero s1 and s2 since; 996 // GetStats fills only used elements depending on dimension and type; 997 GetStats(s1);; 998 h1->GetStats(s2);; 999 }; 1000 ; 1001 SetMinimum();; 1002 SetMaximum();; 1003 ; 1004 // - Loop on bins (including underflows/overflows); 1005 Double_t factor = 1;; 1006 if (h1->GetNormFactor() != 0) factor = h1->GetNormFactor()/h1->GetSumOfWeights();; 1007 Double_t c1sq = c1 * c1;; 1008 Double_t factsq = factor * factor;; 1009 ; 1010 for (Int_t bin = 0; bin < fNcells; ++bin) {; 1011 //special case where histograms have the kIsAverage bit set; 1012 if (this->TestBit(kIsAverage) && h1->TestBit(kIsAverage)) {; 1013 Double_t y1 = h1->RetrieveBinContent(bin);; 1014 Double_t y2 = this->RetrieveBinContent(bin);; 1015 Double_t e1sq = h1->GetBinErrorSqUnchecked(bin);; 1016 Double_t e2sq = this->GetBinErrorSqUnchecked(bin);; 1017 Double_t w1 = 1., w2 = 1.;; 1018 ; 1019 // consider all special cases when bin errors are zero; 1020 // see http://root-forum.cern.ch/viewtopic.php?f=3&t=13299; 1021 if (e1sq) w1 = 1. / e1sq;; 1022 else if (h1->fSumw2.fN) {; 1023 w1 = 1.E200; // use an arbitrary huge value; 1024 if (y1 == 0) {; 1025 // use an estimated error from the global hi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:39731,risk,risks,39731,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['risk'],['risks']
Safety,"this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t[16] digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMD5.html:4743,safe,safely,4743,root/html604/TMD5.html,https://root.cern,https://root.cern/root/html604/TMD5.html,2,['safe'],['safely']
Safety,"this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t[16] digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMD5.html:4743,safe,safely,4743,root/html602/TMD5.html,https://root.cern,https://root.cern/root/html602/TMD5.html,2,['safe'],['safely']
Safety,"this case one can subsequently call a method for fast normal computation:; Double_t *TGeoManager::FindNormalFast(); TGeoManager::FindNormalFastDouble_t * FindNormalFast()Computes fast normal to next crossed boundary, assuming that the current point is close enough to the...Definition TGeoManager.cxx:2799; path 0; In case a path to a given physical object is specified, the distance to its boundary is computed ignoring the rest of the geometry; Output Values; TGeoManager::GetStep(): distance to next boundary.; TGeoManager::GetSafeDistance(): safe distance (in case it was computed).; TGeoManager::IsOnBoundary(): the initial point (x,y,z) was (or was not) on a boundary within TGeoShape::Tolerance().; The algorithm checks first if the computation of safety was required. If this is the case and the global point coordinates did not change from the last query, the last computed safety is taken. Otherwise, the method TGeoManager::Safety () is invoked. A safety value less than TGeoShape::Tolerance() will set the flag IsOnBoundary to true. On the other hand, a safety value bigger than the proposed step will stop the computation of the distance to next boundary, returning the current geometry location with the meaning that the proposed step is safe.; The next stage is to check if computation of the distance to a give physical object specified by a path was required. If this is the case, the modeller changes the state to point to the required object, converts the current point and direction coordinates to the local frame of this object and computes the distance to its shape. The node returned is the one pointed by the input path in case the shape is crossed; otherwise the returned value is NULL. In case the distance to next crossed boundary is required, the current point has to be physically INSIDE the shape pointed by the current volume. This is only insured in case a call to TGeoManager::FindNode() was performed for the current point. Therefore, the first step is to convert th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:132564,safe,safety,132564,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['safe'],['safety']
Safety,"thod computes the distance to exiting a shape from a given point inside, along a given direction. This direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of iact input parameter:. iact = 0computes only safe distance and fill it at the location given by SAFE;; iact = 1a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned;; iact = 2computes both safe distance and distance to exiting, ignoring the proposed step;; iact > 2computes only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3],; Double_t *dir[3],Int_t iact,Double_t step,Double_t *safe);; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; This method computes the distance to entering a shape from a given point outside. It acts in the same way as the previous method.; Double_t TGeoShape::Safety(Double_t *point[3],Bool_t inside);; TGeoShape::Safetyvirtual Double_t Safety(const Double_t *point, Bool_t in=kTRUE) const =0; This computes the maximum shift of a point in any direction that does not change its inside/outsidestate (does not cross shape boundaries). The state of the point has to be properly supplied.; Double_t *TGeoShape::ComputeNormal(Double_t *point[3],; Double_t *dir[3],Double_t *norm[3]);; TGeoShape::ComputeNormalvirtual void ComputeNormal(const Double_t *point, const Double_t *dir, Double_t *norm)=0; The method above computes the director cosines of normal to the crossed shape surface from a given point towards direction. This is filled into the norm array, supplied by the user. The normal vector is a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Shapes__classes.html:6521,safe,safe,6521,doc/master/group__Shapes__classes.html,https://root.cern,https://root.cern/doc/master/group__Shapes__classes.html,2,['safe'],['safe']
Safety,"thod name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TTimer; TTime fAbsTime;  ; TString fCommand;  ; Bool_t fIntSyscalls;  ; TObject * fObject;  ; Bool_t fSync;  ; TTime fTime;  ; UInt_t fTimeID;  ; Bool_t fTimeout;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for ROOT::RTreeDrawInvokeTimer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RTreeDrawInvokeTimer(). ROOT::RTreeDrawInvokeTimer::RTreeDrawInvokeTimer ; (; Long_t ; milliSec, . bool ; mode, . RTreeViewer & ; viewer . ). inline . constructor ; Definition at line 91 of file RTreeViewer.cxx. Member Function Documentation. ◆ Timeout(). void ROOT::RTreeDrawInvokeTimer::Timeout ; (; ). inlineoverridevirtual . timeout handler used to process postponed requests in main ROOT thread ; Reimplemented from TTimer.; Definition at line 95 of file RTreeViewer.cxx. Member Data Documentation. ◆ fViewer. RTreeViewer& ROOT::RTreeDrawInvokeTimer::fViewer. Definition at line 88 of file RTreeViewer.cxx. tree/webviewer/src/RTreeViewer.cxx. ROOTRTreeDrawInvokeTimer. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html:17602,Timeout,Timeout,17602,doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RTreeDrawInvokeTimer.html,3,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"thod) const; Bool_tTGeoNode::MayOverlap(Int_t iother) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoNode::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTGeoNode::PrintCandidates() constMENU ; voidTGeoNode::PrintOverlaps() constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoAtt::ResetAttBit(UInt_t f); voidTObject::ResetBit(UInt_t f); Double_tTGeoNode::Safety(Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidTGeoNode::SaveAttributes(ostream& out); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTGeoAtt::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoAtt::SetActivity(Bool_t flag = kTRUE); voidTGeoNode::SetAllInvisible()MENU ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoNode::SetCurrentPoint(Double_t x, Double_t y, Double_t z)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFinder(const TGeoPatternFinder* finder); voidTGeoNode::SetInvisible()MENU ; voidTGeoNode::SetMotherVolume(TGeoVolume* mother); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTGeoNode::Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoNodeOffset.html:8824,Safe,Safety,8824,root/html530/TGeoNodeOffset.html,https://root.cern,https://root.cern/root/html530/TGeoNodeOffset.html,2,['Safe'],['Safety']
Safety,"thod) const; Bool_tTGeoNode::MayOverlap(Int_t iother) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoNode::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTGeoNode::PrintCandidates() constMENU ; voidTGeoNode::PrintOverlaps() constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoAtt::ResetAttBit(UInt_t f); voidTObject::ResetBit(UInt_t f); Double_tTGeoNode::Safety(Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidTGeoNode::SaveAttributes(ostream& out); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTGeoAtt::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoAtt::SetActivity(Bool_t flag = kTRUE); voidTGeoNode::SetAllInvisible()MENU ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoNode::SetCurrentPoint(Double_t x, Double_t y, Double_t z)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoNode::SetInvisible()MENU ; voidSetMatrix(const TGeoMatrix* matrix); voidTGeoNode::SetMotherVolume(TGeoVolume* mother); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidTGeoNode::SetNumber(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoNodeMatrix.html:5912,Safe,Safety,5912,root/html530/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html530/TGeoNodeMatrix.html,2,['Safe'],['Safety']
Safety,"thod) const; Bool_tTGeoNode::MayOverlap(Int_t iother) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoNode::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTGeoNode::PrintCandidates() constMENU ; voidTGeoNode::PrintOverlaps() constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoAtt::ResetAttBit(UInt_t f); voidTObject::ResetBit(UInt_t f); Double_tTGeoNode::Safety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidTGeoNode::SaveAttributes(ostream& out); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTGeoAtt::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoAtt::SetActivity(Bool_t flag = kTRUE); voidTGeoNode::SetAllInvisible()MENU ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoNode::SetCloned(Bool_t flag = kTRUE); voidTGeoNode::SetCurrentPoint(Double_t x, Double_t y, Double_t z)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFinder(TGeoPatternFinder* finder); voidTGeoNode::SetFWExtension(TGeoExtension* ext); voidTGeoNode::SetInvisible()MENU ; voidTGeoNode::SetMotherVolume(TGeoVolume* mother); virtual voidTNamed::SetName(const char* name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNodeOffset.html:9056,Safe,Safety,9056,root/html534/TGeoNodeOffset.html,https://root.cern,https://root.cern/root/html534/TGeoNodeOffset.html,1,['Safe'],['Safety']
Safety,"thod) const; Bool_tTGeoNode::MayOverlap(Int_t iother) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoNode::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTGeoNode::PrintCandidates() constMENU ; voidTGeoNode::PrintOverlaps() constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTGeoAtt::ResetAttBit(UInt_t f); voidTObject::ResetBit(UInt_t f); Double_tTGeoNode::Safety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidTGeoNode::SaveAttributes(ostream& out); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTGeoAtt::SetActiveDaughters(Bool_t flag = kTRUE); voidTGeoAtt::SetActivity(Bool_t flag = kTRUE); voidTGeoNode::SetAllInvisible()MENU ; voidTGeoAtt::SetAttBit(UInt_t f); voidTGeoAtt::SetAttBit(UInt_t f, Bool_t set); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoNode::SetCloned(Bool_t flag = kTRUE); voidTGeoNode::SetCurrentPoint(Double_t x, Double_t y, Double_t z)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoNode::SetFWExtension(TGeoExtension* ext); voidTGeoNode::SetInvisible()MENU ; voidSetMatrix(const TGeoMatrix* matrix); voidTGeoNode::SetMotherVolume(TGeoVolume* mother); virtual voidTNamed::SetName(const char* name)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNodeMatrix.html:6144,Safe,Safety,6144,root/html534/TGeoNodeMatrix.html,https://root.cern,https://root.cern/root/html534/TGeoNodeMatrix.html,1,['Safe'],['Safety']
Safety,"thout forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define gROOT   (ROOT::GetROOT());  . Functions; void ROOT::CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void ROOT::DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void ROOT::Internal::DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; void ROOT::EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void ROOT::Internal::EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void ROOT::EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; TROOT * ROOT::GetROOT ();  ; TROOT * ROOT::Internal::GetROOT2 ();  ; UInt_t ROOT::GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; Bool_t ROOT::IsImplicitMTEnabled ();  Returns true if the implicit multi-threading in ROOT is enabled. ;  ; Bool_t ROOT::Internal::IsParBranchProcessingEnabled ();  Returns true if parallel branch processing is enabled. ;  ; Bool_t ROOT::Internal::RequiresCleanup (TObject &obj);  ; void ROOT::Internal::SetRequireCleanup (TObject &obj);  . Variables; R__EXTERN TROOT * ROOT::Internal::gROOTLocal = ROOT::GetROOT();  ; R__EXTERN TVirtualMutex * gROOTMutex;  . Macro Definition Documentation. ◆ gROOT. #define gROOT   (ROOT::GetROOT()). Definition at line 406 of file TROOT.h. Variable Documentation. ◆ gROOTMutex. R__EXTERN TVirtualMutex* gROOTMutex. Definition at line 63 of file TROOT.h. corebaseincTROOT.h. ROOT master - Reference Guide Generated on Tue Nov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h.html:1780,safe,safe,1780,doc/master/TROOT_8h.html,https://root.cern,https://root.cern/doc/master/TROOT_8h.html,1,['safe'],['safe']
Safety,"threading enabled (i.e. ROOT::EnableImplicitMT). Example usage:; myDf.Foreach([](int i){ std::cout << i << std::endl;}, {""myIntColumn""});. Definition at line 1611 of file RInterface.hxx. ◆ ForeachSlot(). template<typename Proxied , typename DataSource = void> . template<typename F > . void ROOT::RDF::RInterface< Proxied, DataSource >::ForeachSlot ; (; F ; f, . const ColumnNames_t & ; columns = {} . ). inline . Execute a user-defined function requiring a processing slot index on each entry (instant action). ; Parameters. [in]fFunction, lambda expression, functor class or any other callable object performing user defined calculations. ; [in]columnsNames of the columns/branches in input to the user function. Same as Foreach, but the user-defined function takes an extra unsigned int as its first parameter, the processing slot index. This slot index will be assigned a different value, 0 to poolSize - 1, for each thread of execution. This is meant as a helper in writing thread-safe Foreach actions when using RDataFrame after ROOT::EnableImplicitMT(). The user-defined processing callable is able to follow different streams of processing indexed by the first parameter. ForeachSlot works just as well with single-thread execution: in that case slot will always be 0. Example usage:; myDf.ForeachSlot([](unsigned int s, int i){ std::cout << ""Slot "" << s << "": ""<< i << std::endl;}, {""myIntColumn""});. Definition at line 1641 of file RInterface.hxx. ◆ GetFilterNames(). template<typename Proxied , typename DataSource = void> . std::vector< std::string > ROOT::RDF::RInterface< Proxied, DataSource >::GetFilterNames ; (; ). inline . Returns the names of the filters created. ; Returnsthe container of filters names.; If called on a root node, all the filters in the computation graph will be printed. For any other node, only the filters upstream of that node. Filters without a name are printed as ""Unnamed Filter"" This is not an action nor a transformation, just a query to the RDataFrame ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:77583,safe,safe,77583,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['safe'],['safe']
Safety,"tic Bool_t fgReadInfo = kTRUE;  if true (default) ReadStreamerInfo is called when opening a file ;  ; static ROOT::Internal::RConcurrentHashColl fgTsSIHashes;  !TS Set of hashes built from read streamer infos ;  ;  Static Protected Attributes inherited from TDirectory; static Bool_t fgAddDirectory = kTRUE;  MSVC doesn't support = ATOMIC_FLAG_INIT;. ;  . Private Member Functions;  TWebFile ();  . Friends; class TWebSocket;  ; class TWebSystem;  . Additional Inherited Members;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:41534,timeout,timeout,41534,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['timeout'],['timeout']
Safety,"tic TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSparsefAoriginal matrix; needed for the iterative solving procedure; Double_tfCntl[6]float control numbers; TArrayIfColFact; Int_tTDecompBase::fColLwbColumn lower bound of decomposed matrix; Double_tTDecompBase::fConditionmatrix condition number; Double_tTDecompBase::fDet1determinant mantissa; Double_tTDecompBase::fDet2determinant exponent for powers of 2; TArrayDfFactsize of fFact array; may be increased during the numerical factorization; Double_tfIPessimismamounts by which to increase allocated factorization space when; Int_tfIcntl[31]integer control numbers; TArrayIfIkeeppivot sequence and temporary storage information; Int_tfInfo[21]array used for communication between programs; TArrayIfIw; TArrayIfIw1; TArrayIfIw2; Int_tfMaxfrt; Int_tfNnonZeros; Int_tfNrows; Int_tfNsteps; Double_tfPrecisionprecision we demand from the linear system solver. If it isn't; Double_tfRPessimisminadequate space is detected. fIPessimism is for array ""fIw"",; TArrayIfRowFact; Int_tTDecompBase::fRowLwbRow lower bound of decomposed matrix; Double_tTDecompBase::fTolsqrt(epsilon); epsilon is smallest number number so that 1+epsilon > 1; Int_tfVerbose; TArrayDfWtemporary storage for the factorization; static TDecompBase::EMatrixDecompStatTDecompBase::kCondition; static TDecompBase::EMatrixDecompStatTDecompBase::kDecomposed; static TDecompBase::EMatrixDecompStatTDecompBase::kDetermined; static TDecompBase::EMatrixDecompStatTDecompBase::kInit; static TDecompBase::EMatrixDecompStatTDecompBase::kMatrixSet; static TDecompBase::EMatrixDecompStatTDecompBase::kPatternSet; static TDecompBase::EMatrixDecompStatTDecompBase::kSingular; static TDecompBase::EMatrixDecompStatTDecompBase::kValuesSet; static TDecompBase::(anonymous)TDecompBase::kWorkMax. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDecompSparse(); Default constructor. TDecompSparse(Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDecompSparse.html:11052,detect,detected,11052,root/html602/TDecompSparse.html,https://root.cern,https://root.cern/root/html602/TDecompSparse.html,2,['detect'],['detected']
Safety,"tic const TString gClr_whiteonblue = ""\033[1;44m""; // white on blue background; 849 static const TString gClr_whiteongreen = ""\033[1;42m""; // white on green background; 850 static const TString gClr_grey_bg = ""\033[47m""; // grey background; 851 ; 852 static const TString gClr_reset = ""\033[0m""; // reset; 853 ; 854 if (!gConfig().UseColor()) return gClr_none;; 855 ; 856 if (c == ""white"" ) return gClr_white;; 857 if (c == ""blue"" ) return gClr_blue;; 858 if (c == ""black"" ) return gClr_black;; 859 if (c == ""lightblue"") return gClr_cyan_b;; 860 if (c == ""yellow"") return gClr_yellow;; 861 if (c == ""red"" ) return gClr_red;; 862 if (c == ""dred"" ) return gClr_darkred;; 863 if (c == ""dgreen"") return gClr_darkgreen;; 864 if (c == ""lgreenb"") return gClr_lgreen_b;; 865 if (c == ""dyellow"") return gClr_darkyellow;; 866 ; 867 if (c == ""bold"") return gClr_bold;; 868 if (c == ""bblack"") return gClr_black_b;; 869 ; 870 if (c == ""blue_bgd"") return gClr_blue_bg;; 871 if (c == ""red_bgd"" ) return gClr_red_bg;; 872 ; 873 if (c == ""white_on_blue"" ) return gClr_whiteonblue;; 874 if (c == ""white_on_green"") return gClr_whiteongreen;; 875 ; 876 if (c == ""reset"") return gClr_reset;; 877 ; 878 std::cout << ""Unknown color "" << c << std::endl;; 879 exit(1);; 880 ; 881 return gClr_none;; 882}; 883 ; 884////////////////////////////////////////////////////////////////////////////////; 885/// formatted output of simple table; 886 ; 887void TMVA::Tools::FormattedOutput( const std::vector<Double_t>& values, const std::vector<TString>& V,; 888 const TString titleVars, const TString titleValues, MsgLogger& logger,; 889 TString format ); 890{; 891 // sanity check; 892 UInt_t nvar = V.size();; 893 if ((UInt_t)values.size() != nvar) {; 894 logger << kFATAL << ""<FormattedOutput> fatal error with dimensions: ""; 895 << values.size() << "" OR "" << "" != "" << nvar << Endl;; 896 }; 897 ; 898 // find maximum length in V (and column title); 899 UInt_t maxL = 7;; 900 std::vector<UInt_t> vLengths;; 901 for (UInt_t ivar=0; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:30863,sanity check,sanity check,30863,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,1,['sanity check'],['sanity check']
Safety,"tic int UnixUnixConnect(const char *path);; 64 static int UnixTcpService(int port, Bool_t reuse, int backlog,; 65 int tcpwindowsize);; 66 static int UnixUdpService(int port, int backlog);; 67 static int UnixUnixService(int port, int backlog);; 68 static int UnixUnixService(const char *sockpath, int backlog);; 69 static int UnixRecv(int sock, void *buf, int len, int flag);; 70 static int UnixSend(int sock, const void *buf, int len, int flag);; 71 ; 72public:; 73 TUnixSystem();; 74 virtual ~TUnixSystem();; 75 ; 76 //---- Misc -------------------------------------------------; 77 Bool_t Init() override;; 78 void SetProgname(const char *name) override;; 79 void SetDisplay() override;; 80 const char *GetError() override;; 81 Int_t GetCryptoRandom(void *buf, Int_t len) override;; 82 const char *HostName() override;; 83 ; 84 //---- EventLoop --------------------------------------------; 85 void DispatchOneEvent(Bool_t pendingOnly = kFALSE) override;; 86 Int_t Select(TList *active, Long_t timeout) override;; 87 Int_t Select(TFileHandler *fh, Long_t timeout) override;; 88 ; 89 //---- Handling of system events ----------------------------; 90 void CheckChilds();; 91 Bool_t CheckSignals(Bool_t sync);; 92 Bool_t CheckDescriptors();; 93 void DispatchSignals(ESignals sig);; 94 void AddSignalHandler(TSignalHandler *sh) override;; 95 TSignalHandler *RemoveSignalHandler(TSignalHandler *sh) override;; 96 void ResetSignal(ESignals sig, Bool_t reset = kTRUE) override;; 97 void ResetSignals() override;; 98 void IgnoreSignal(ESignals sig, Bool_t ignore = kTRUE) override;; 99 void SigAlarmInterruptsSyscalls(Bool_t set) override;; 100 void AddFileHandler(TFileHandler *fh) override;; 101 TFileHandler *RemoveFileHandler(TFileHandler *fh) override;; 102 ; 103 //---- Floating Point Exceptions Control --------------------; 104 Int_t GetFPEMask() override;; 105 Int_t SetFPEMask(Int_t mask = kDefaultMask) override;; 106 ; 107 //---- Time & Date ------------------------------------------; 108 TTim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8h_source.html:3540,timeout,timeout,3540,doc/master/TUnixSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8h_source.html,1,['timeout'],['timeout']
Safety,"tic method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { return fState; }. Long_t GetId() const; { return fId; }. void ps(); { Ps(); }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TThread.h 34686 2010-07-31 19:52:20Z pcanal $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TThread.html:13596,avoid,avoid,13596,root/html528/TThread.html,https://root.cern,https://root.cern/root/html528/TThread.html,1,['avoid'],['avoid']
Safety,"tic method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread.; k should be between 0 and kMaxUserThreadSlot for user application.; (and between kMaxUserThreadSlot and kMaxThreadSlot for ROOT libraries).; See ROOT::EThreadSlotReservation. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { return fState; }. Long_t GetId() const; { return fId; }. void ps(); { Ps(); }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TThread.html:14991,avoid,avoid,14991,root/html534/TThread.html,https://root.cern,https://root.cern/root/html534/TThread.html,1,['avoid'],['avoid']
Safety,"tic void *ssllib_dll_handle; /* Store the ssl library handle. */; 16019static void *cryptolib_dll_handle; /* Store the crypto library handle. */; 16020 ; 16021#endif /* NO_SSL_DL */; 16022 ; 16023 ; 16024#if defined(SSL_ALREADY_INITIALIZED); 16025static volatile ptrdiff_t cryptolib_users =; 16026 1; /* Reference counter for crypto library. */; 16027#else; 16028static volatile ptrdiff_t cryptolib_users =; 16029 0; /* Reference counter for crypto library. */; 16030#endif; 16031 ; 16032 ; 16033static int; 16034initialize_openssl(char *ebuf, size_t ebuf_len); 16035{; 16036#if !defined(OPENSSL_API_1_1) && !defined(OPENSSL_API_3_0); 16037 int i, num_locks;; 16038 size_t size;; 16039#endif; 16040 ; 16041 if (ebuf_len > 0) {; 16042 ebuf[0] = 0;; 16043 }; 16044 ; 16045#if !defined(NO_SSL_DL); 16046 if (!cryptolib_dll_handle) {; 16047 memset(tls_feature_missing, 0, sizeof(tls_feature_missing));; 16048 cryptolib_dll_handle = load_tls_dll(; 16049 ebuf, ebuf_len, CRYPTO_LIB, crypto_sw, tls_feature_missing);; 16050 if (!cryptolib_dll_handle) {; 16051 mg_snprintf(NULL,; 16052 NULL, /* No truncation check for ebuf */; 16053 ebuf,; 16054 ebuf_len,; 16055 ""%s: error loading library %s"",; 16056 __func__,; 16057 CRYPTO_LIB);; 16058 DEBUG_TRACE(""%s"", ebuf);; 16059 return 0;; 16060 }; 16061 }; 16062#endif /* NO_SSL_DL */; 16063 ; 16064 if (mg_atomic_inc(&cryptolib_users) > 1) {; 16065 return 1;; 16066 }; 16067 ; 16068#if !defined(OPENSSL_API_1_1) && !defined(OPENSSL_API_3_0); 16069 /* Initialize locking callbacks, needed for thread safety.; 16070 * http://www.openssl.org/support/faq.html#PROG1; 16071 */; 16072 num_locks = CRYPTO_num_locks();; 16073 if (num_locks < 0) {; 16074 num_locks = 0;; 16075 }; 16076 size = sizeof(pthread_mutex_t) * ((size_t)(num_locks));; 16077 ; 16078 /* allocate mutex array, if required */; 16079 if (num_locks == 0) {; 16080 /* No mutex array required */; 16081 ssl_mutexes = NULL;; 16082 } else {; 16083 /* Mutex array required - allocate it */; 16084 ssl_mutexes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:474554,safe,safety,474554,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['safe'],['safety']
Safety,"tic void *ssllib_dll_handle; /* Store the ssl library handle. */; 16020static void *cryptolib_dll_handle; /* Store the crypto library handle. */; 16021 ; 16022#endif /* NO_SSL_DL */; 16023 ; 16024 ; 16025#if defined(SSL_ALREADY_INITIALIZED); 16026static volatile ptrdiff_t cryptolib_users =; 16027 1; /* Reference counter for crypto library. */; 16028#else; 16029static volatile ptrdiff_t cryptolib_users =; 16030 0; /* Reference counter for crypto library. */; 16031#endif; 16032 ; 16033 ; 16034static int; 16035initialize_openssl(char *ebuf, size_t ebuf_len); 16036{; 16037#if !defined(OPENSSL_API_1_1) && !defined(OPENSSL_API_3_0); 16038 int i, num_locks;; 16039 size_t size;; 16040#endif; 16041 ; 16042 if (ebuf_len > 0) {; 16043 ebuf[0] = 0;; 16044 }; 16045 ; 16046#if !defined(NO_SSL_DL); 16047 if (!cryptolib_dll_handle) {; 16048 memset(tls_feature_missing, 0, sizeof(tls_feature_missing));; 16049 cryptolib_dll_handle = load_tls_dll(; 16050 ebuf, ebuf_len, CRYPTO_LIB, crypto_sw, tls_feature_missing);; 16051 if (!cryptolib_dll_handle) {; 16052 mg_snprintf(NULL,; 16053 NULL, /* No truncation check for ebuf */; 16054 ebuf,; 16055 ebuf_len,; 16056 ""%s: error loading library %s"",; 16057 __func__,; 16058 CRYPTO_LIB);; 16059 DEBUG_TRACE(""%s"", ebuf);; 16060 return 0;; 16061 }; 16062 }; 16063#endif /* NO_SSL_DL */; 16064 ; 16065 if (mg_atomic_inc(&cryptolib_users) > 1) {; 16066 return 1;; 16067 }; 16068 ; 16069#if !defined(OPENSSL_API_1_1) && !defined(OPENSSL_API_3_0); 16070 /* Initialize locking callbacks, needed for thread safety.; 16071 * http://www.openssl.org/support/faq.html#PROG1; 16072 */; 16073 num_locks = CRYPTO_num_locks();; 16074 if (num_locks < 0) {; 16075 num_locks = 0;; 16076 }; 16077 size = sizeof(pthread_mutex_t) * ((size_t)(num_locks));; 16078 ; 16079 /* allocate mutex array, if required */; 16080 if (num_locks == 0) {; 16081 /* No mutex array required */; 16082 ssl_mutexes = NULL;; 16083 } else {; 16084 /* Mutex array required - allocate it */; 16085 ssl_mutexes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:474587,safe,safety,474587,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['safe'],['safety']
Safety,"tic voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoHype&operator=(const TGeoHype&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; Double_tRadiusHypeSq(Double_t z, Bool_t inner) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); Double_tSafetyToHype(const Double_t* point, Bool_t inner, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHypeDimensions(Double_t rin, Double_t stin, Double_t rout, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHype.html:10242,Safe,SafetyPhi,10242,root/html534/TGeoHype.html,https://root.cern,https://root.cern/root/html534/TGeoHype.html,1,['Safe'],['SafetyPhi']
Safety,"tic voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTVirtualPacketizer::SetFailedPackets(TList* list); virtual voidTVirtualPacketizer::SetInitTime(); static voidTObject::SetObjectStat(Bool_t stat); voidTVirtualPacketizer::SetProgressStatus(TProofProgressStatus* st); voidTVirtualPacketizer::SetTotalEntries(Long64_t ent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTVirtualPacketizer::StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPacketizer.html:5986,abort,abort,5986,root/html534/TPacketizer.html,https://root.cern,https://root.cern/root/html534/TPacketizer.html,4,['abort'],['abort']
Safety,"tic voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoCtub&operator=(const TGeoCtub&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTubeSeg::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidSetCtubDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCtub.html:10431,Safe,SafetyS,10431,root/html534/TGeoCtub.html,https://root.cern,https://root.cern/root/html534/TGeoCtub.html,1,['Safe'],['SafetyS']
Safety,"tic void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of exten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAddPdf.html:79145,Avoid,Avoids,79145,doc/v632/classRooAddPdf.html,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html,1,['Avoid'],['Avoids']
Safety,"tication directives; to be sent to proof. void AuthError(const char* where, Int_t error); Print error string depending on error code. void SetGlobalUser(const char* user); Set global user name to be used for authentication to rootd or proofd. void SetGlobalPasswd(const char* passwd); Set global passwd to be used for authentication to rootd or proofd. void SetGlobalPwHash(Bool_t pwhash); Set global passwd hash flag to be used for authentication to rootd or proofd. void SetGlobalSRPPwd(Bool_t srppwd); Set global SRP passwd flag to be used for authentication to rootd or proofd. void SetReadHomeAuthrc(Bool_t readhomeauthrc); Set flag controlling the reading of $HOME/.rootauthrc.; In PROOF the administrator may want to switch off private settings.; Always true, may only be set false via option to proofd. void SetGlobalExpDate(TDatime expdate); Set default expiring date for new validity contexts. void SetDefaultUser(const char* defaultuser); Set default user name. void SetTimeOut(Int_t to); Set timeout (active if > 0). void SetAuthReUse(Bool_t authreuse); Set global AuthReUse flag. void SetPromptUser(Bool_t promptuser); Set global PromptUser flag. void SetSecureAuthHook(SecureAuth_t func); Set secure authorization function. Automatically called when libSRPAuth; is loaded. void SetKrb5AuthHook(Krb5Auth_t func); Set kerberos5 authorization function. Automatically called when; libKrb5Auth is loaded. void SetGlobusAuthHook(GlobusAuth_t func); Set Globus authorization function. Automatically called when; libGlobusAuth is loaded. Int_t SshError(const char* errfile); SSH error parsing: returns; 0 : no error or fatal; 1 : should retry (eg 'connection closed by remote host'). Int_t SshAuth(TString& user); SSH client authentication code. const char * GetSshUser(TString user) const; Method returning the user to be used for the ssh login.; Looks first at SSH.Login and finally at env USER.; If SSH.LoginPrompt is set to 'yes' it prompts for the 'login name'. Bool_t CheckHost(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAuthenticate.html:16108,timeout,timeout,16108,root/html526/TAuthenticate.html,https://root.cern,https://root.cern/root/html526/TAuthenticate.html,7,['timeout'],['timeout']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoBBox&operator=(const TGeoBBox&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidSetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBBox.html:10243,safe,safe,10243,root/html534/TGeoBBox.html,https://root.cern,https://root.cern/root/html534/TGeoBBox.html,1,['safe'],['safe']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoCone&operator=(const TGeoCone&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tSafetyS(const Double_t* point, Bool_t in, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidSetConeDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCone.html:9301,safe,safe,9301,root/html534/TGeoCone.html,https://root.cern,https://root.cern/root/html534/TGeoCone.html,1,['safe'],['safe']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoCtub&operator=(const TGeoCtub&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTubeSeg::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidSetCtubDimensions(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); virtual voidSetDimensions(Double_t* par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCtub.html:10274,safe,safe,10274,root/html534/TGeoCtub.html,https://root.cern,https://root.cern/root/html534/TGeoCtub.html,1,['safe'],['safe']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoEltu&operator=(const TGeoEltu&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEltuDimensions(Double_t a, Double_t b, Double_t dz); voidTGeoShape::SetId(Int_t id); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoEltu.html:9064,safe,safe,9064,root/html534/TGeoEltu.html,https://root.cern,https://root.cern/root/html534/TGeoEltu.html,1,['safe'],['safe']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoHype&operator=(const TGeoHype&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; Double_tRadiusHypeSq(Double_t z, Bool_t inner) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoTube::SafetyS(Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); Double_tSafetyToHype(Double_t* point, Bool_t inner, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHypeDimensions(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoHype.html:9392,Safe,SafetyPhi,9392,root/html530/TGeoHype.html,https://root.cern,https://root.cern/root/html530/TGeoHype.html,2,['Safe'],['SafetyPhi']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoPara&operator=(const TGeoPara&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPara.html:8810,safe,safe,8810,root/html534/TGeoPara.html,https://root.cern,https://root.cern/root/html534/TGeoPara.html,1,['safe'],['safe']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoTrd1&operator=(const TGeoTrd1&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd1.html:8710,safe,safe,8710,root/html534/TGeoTrd1.html,https://root.cern,https://root.cern/root/html534/TGeoTrd1.html,1,['safe'],['safe']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoTrd2&operator=(const TGeoTrd2&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd2.html:8776,safe,safe,8776,root/html534/TGeoTrd2.html,https://root.cern,https://root.cern/root/html534/TGeoTrd2.html,1,['safe'],['safe']
Safety,"tify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoTube&operator=(const TGeoTube&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tSafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTube.html:9530,safe,safe,9530,root/html534/TGeoTube.html,https://root.cern,https://root.cern/root/html534/TGeoTube.html,1,['safe'],['safe']
Safety,"ting because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; RooRealProxyxDependent/convolution variable. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup hook for RooSentinel atexit handler. RooResolutionModel(const char* name, const char* title, RooRealVar& x); Constructor with convolution variable 'x'. RooResolutionModel(const RooResolutionModel& other, const char* name = 0); Copy constructor. ~RooResolutionModel(); Destructor. RooFormulaVar* identity(); Return identity formula pointer. RooResolutionModel* convolution(RooFormulaVar* basis, RooAbsArg* owner) const; Instantiate a clone of this resolution model representing a convolution with given; basis function. The owners object name is incorporated in the clones name; to avoid multiple convolution objects with the same name in complex PDF structures. Note: The 'inBasis' formula expression must be a RooFormulaVar that encodes the formula; in the title of the object and this expression must be an exact match against the; implemented basis function strings (see derived class implementation of method basisCode(); for those strings. void changeBasis(RooFormulaVar* basis); Change the basis function we convolute with.; For one-time use by convolution() only. const RooRealVar& basisConvVar() const; Return the convolution variable of the selection basis function.; This is, by definition, the first parameter of the basis function. RooRealVar& convVar() const; Return the convolution variable of the resolution model. Double_t getValV(const RooArgSet* nset = 0) const; Modified version of RooAbsPdf::getValF(). If used as regular PDF,; call RooAbsPdf::getValF(), otherwise return unnormalized value; regardless of specified normalization set. Bool_t redirectServersHook(const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:48018,avoid,avoid,48018,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,2,['avoid'],['avoid']
Safety,"tion &T);  ; void TCling__UnlockCompilationDuringUserCodeExecution (void *);  Unlock the interpreter. ;  ; static void TCling__UpdateClassInfo (const NamedDecl *TD);  Update TClingClassInfo for a class (e.g. upon seeing a definition). ;  ; void TCling__UpdateListsOnCommitted (const cling::Transaction &T, cling::Interpreter *);  ; void TCling__UpdateListsOnUnloaded (const cling::Transaction &T);  ; int TCling_GenerateDictionary (const std::string &className, const std::vector< std::string > &headers, const std::vector< std::string > &fwdDecls, const std::vector< std::string > &unknown);  ; int TCling_GenerateDictionary (const std::vector< std::string > &classes, const std::vector< std::string > &headers, const std::vector< std::string > &fwdDecls, const std::vector< std::string > &unknown);  ; bool TClingLookupHelper__AutoParse (const char *cname);  Allow calling autoparsing from TMetaUtils. ;  ; bool TClingLookupHelper__ExistingTypeCheck (const std::string &tname, std::string &result);  Try hard to avoid looking up in the Cling database as this could enduce an unwanted autoparsing. ;  . Variables; const char * fantomline = ""TRint::EndOfLineAction();"";  ; static const std::unordered_set< std::string > gIgnoredPCMNames;  List of dicts that have the PCM information already in the PCH. ;  ; static bool HaveFullGlobalModuleIndex = false;  ; R__EXTERN int optind;  . Macro Definition Documentation. ◆ R__DLLEXPORT. #define R__DLLEXPORT   __attribute__ ((visibility (""default""))). Definition at line 151 of file TCling.cxx. Enumeration Type Documentation. ◆ ETupleOrdering. enum class ETupleOrdering. strong . Check in what order the member of a tuple are layout. . EnumeratorkAscending ; kDescending ; kUnexpected . Definition at line 3905 of file TCling.cxx. Function Documentation. ◆ AlternateTuple(). static std::string AlternateTuple ; (; const char * ; classname, . const cling::LookupHelper & ; lh, . Bool_t ; silent . ). static . Definition at line 3947 of file TCling.cxx. ◆ Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx.html:10449,avoid,avoid,10449,doc/master/TCling_8cxx.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx.html,1,['avoid'],['avoid']
Safety,"tion = """"); Bool_tTXSocket::Ping(const char* ord = 0); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual UnsolRespProcResultTXSocket::ProcessUnsolicitedMsg(XrdClientUnsolMsgSender* s, XrdClientMessage* msg); virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTXSocket::Recv(TMessage*& mess); virtual Int_tTXSocket::Recv(Int_t& status, Int_t& kind); virtual Int_tTXSocket::Recv(char* mess, Int_t max); virtual Int_tTXSocket::Recv(char* mess, Int_t max, Int_t& kind); virtual Int_tTXSocket::RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); voidTXSocket::RemoteTouch(); virtual voidRemoveClientID(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tTXSocket::Send(const TMessage& mess); virtual Int_tTXSocket::Send(Int_t kind); virtual Int_tTXSocket::Send(Int_t status, Int_t kind); virtual Int_tTXSocket::Send(const char* mess, Int_t kind = kMESS_STRING); TObjString*TXSocket::SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Int_tTXSocket::SendInterrupt(Int_t type); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tTXSocket::SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); voidTXSocket::SendUrgent(Int_t type, Int_t int1, Int_t int2); voidTXSocket::SetAWait(Bool_t w = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClientID(Int_t cid); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXUnixSocket.html:6713,timeout,timeout,6713,root/html530/TXUnixSocket.html,https://root.cern,https://root.cern/root/html530/TXUnixSocket.html,5,['timeout'],['timeout']
Safety,tion Buttons.h:38; kLine@ kLineDefinition Buttons.h:33; kPavesText@ kPavesTextDefinition Buttons.h:32; kCurlyLine@ kCurlyLineDefinition Buttons.h:38; kPaveLabel@ kPaveLabelDefinition Buttons.h:31; kButton@ kButtonDefinition Buttons.h:37; kEllipse@ kEllipseDefinition Buttons.h:32; kText@ kTextDefinition Buttons.h:30; kArc@ kArcDefinition Buttons.h:33; ECursorECursorDefinition GuiTypes.h:372; kRightSide@ kRightSideDefinition GuiTypes.h:373; kBottomSide@ kBottomSideDefinition GuiTypes.h:373; kTopLeft@ kTopLeftDefinition GuiTypes.h:372; kBottomRight@ kBottomRightDefinition GuiTypes.h:372; kTopSide@ kTopSideDefinition GuiTypes.h:373; kLeftSide@ kLeftSideDefinition GuiTypes.h:373; kMove@ kMoveDefinition GuiTypes.h:374; kTopRight@ kTopRightDefinition GuiTypes.h:372; kBottomLeft@ kBottomLeftDefinition GuiTypes.h:372; kHand@ kHandDefinition GuiTypes.h:374; kCross@ kCrossDefinition GuiTypes.h:374; kMaxPixelconst Int_t kMaxPixelMax value for an int.Definition GuiTypes.h:369; SafeDelete#define SafeDelete(p)Definition RConfig.hxx:525; d#define d(i)Definition RSha256.hxx:102; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; g#define g(i)Definition RSha256.hxx:105; a#define a(i)Definition RSha256.hxx:99; h#define h(i)Definition RSha256.hxx:106; Style_tshort Style_tDefinition RtypesCore.h:82; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Color_tshort Color_tDefinition RtypesCore.h:85; Size_tfloat Size_tDefinition RtypesCore.h:89; Longptr_tlong Longptr_tDefinition RtypesCore.h:75; Version_tshort Version_tDefinition RtypesCore.h:65; Long_tlong Long_tDefinition RtypesCore.h:54; Width_tshort Width_tDefinition RtypesCore.h:84; Float_tfloat Float_tDefinition RtypesCore.h:57; Short_tshort Short_tDefinition RtypesCore.h:39; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:253645,Safe,SafeDelete,253645,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,2,['Safe'],['SafeDelete']
Safety,"tion RooPlot.cxx:637; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; RooFit::SaveRooCmdArg Save(bool flag=true)Definition RooGlobalFunc.cxx:649; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; RooFit::VisualizeErrorRooCmdArg VisualizeError(const RooDataSet &paramData, double Z=1)Definition RooGlobalFunc.cxx:300; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf204a_extendedLikelihoodDefinition rf204a_extendedLikelihood.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; RangeTa Range(0, 0, 1, 1); ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'signalRange' created with bounds [4,6]; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: -3872.49, estimated distance to minimum: 4.30406e-05; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html:6843,safe,safe,6843,doc/master/rf204a__extendedLikelihood_8C.html,https://root.cern,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html,1,['safe'],['safe']
Safety,"tion TTree.h:98; TTree::SetParallelUnzipvirtual void SetParallelUnzip(bool opt=true, Float_t RelSize=-1)Enable or disable parallel unzipping of Tree buffers.Definition TTree.cxx:9291; TTree::SetDirectoryvirtual void SetDirectory(TDirectory *dir)Change the tree's directory.Definition TTree.cxx:8966; TTree::SortBranchesByTimevoid SortBranchesByTime()Sorts top-level branches by the last average task time recorded per branch.Definition TTree.cxx:5834; TTree::Deletevoid Delete(Option_t *option="""") overrideDelete this tree from memory or/and disk.Definition TTree.cxx:3747; TTree::GetBranchRefvirtual TBranchRef * GetBranchRef() constDefinition TTree.h:450; TTree::Processvirtual Long64_t Process(const char *filename, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)Process this tree executing the TSelector code in the specified filename.Definition TTree.cxx:7450; TTree::BranchImpRefvirtual TBranch * BranchImpRef(const char *branchname, const char *classname, TClass *ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel)Same as TTree::Branch but automatic detection of the class name.Definition TTree.cxx:1635; TTree::SetEventListvirtual void SetEventList(TEventList *list)This function transfroms the given TEventList into a TEntryList The new TEntryList is owned by the TT...Definition TTree.cxx:9069; TTree::MoveReadCachevoid MoveReadCache(TFile *src, TDirectory *dir)Move a cache from a file to the current file in dir.Definition TTree.cxx:6983; TTree::fAutoFlushLong64_t fAutoFlushAuto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced.Definition TTree.h:101; TTree::fUpdateInt_t fUpdateUpdate frequency for EntryLoop.Definition TTree.h:93; TTree::ResetAfterMergevirtual void ResetAfterMerge(TFileMergeInfo *)Resets the state of this TTree after a merge (keep the customization but forget the data).Definition TTree.cxx:8034; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::SetEstimatevirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:448487,detect,detection,448487,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['detect'],['detection']
Safety,"tion about the ""badness"" of the violation of the function definition. It uses this; // to find its way out of the disallowed parameter regions.; std::cout << ""\n\n\n-------------- Starting second fit ---------------\n\n"" << std::endl;; ; // Reset the parameters such that the PDF is again undefined.; a1.setVal(10.);; a2.setVal(-1.);; ; // Fit again, but pass recovery information to the minimiser:; std::unique_ptr<RooFitResult> fitWithRecovery{pdf.fitTo(*data, RooFit::Save(),; RooFit::RecoverFromUndefinedRegions(1.), // The magnitude of the recovery information can be chosen here.; // Higher values mean more aggressive recovery.; RooFit::PrintEvalErrors(-1), // We are still expecting a few evaluation errors.; RooFit::PrintLevel(0))};; ; pdf.plotOn(frame, RooFit::LineColor(kBlue), RooFit::Name(""recovery""));; ; ; ; // Collect results and plot.; // --------------------------------; // We print the two fit results, and plot the fitted curves.; // The curve of the fit without recovery cannot be plotted, because the PDF is undefined if a2 < 0.; fitWithoutRecovery->Print();; std::cout << ""Without recovery, the fitter encountered "" << fitWithoutRecovery->numInvalidNLL(); << "" invalid function values. The parameters are unchanged."" << std::endl;; ; fitWithRecovery->Print();; std::cout << ""With recovery, the fitter encountered "" << fitWithRecovery->numInvalidNLL(); << "" invalid function values, but the parameters are fitted."" << std::endl;; ; TLegend* legend = new TLegend(0.5, 0.7, 0.9, 0.9);; legend->SetBorderSize(0);; legend->SetFillStyle(0);; legend->AddEntry(""data"", ""Data"", ""P"");; legend->AddEntry(""noRecovery"", ""Without recovery (cannot be plotted)"", ""L"");; legend->AddEntry(""recovery"", ""With recovery"", ""L"");; frame->Draw();; legend->Draw();; c->Draw();; }; ; c#define c(i)Definition RSha256.hxx:101; RooDataSet.h; RooFitResult.h; RooGlobalFunc.h; RooMsgService.h; RooPlot.h; RooPolynomial.h; RooRealVar.h; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:5041,recover,recovery,5041,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,1,['recover'],['recovery']
Safety,"tion at line 4431 of file TWinNTSystem.cxx. ◆ Rename(). int TWinNTSystem::Rename ; (; const char * ; from, . const char * ; to . ). overridevirtual . Rename a file. Returns 0 when successful, -1 in case of failure. ; Reimplemented from TSystem.; Definition at line 2630 of file TWinNTSystem.cxx. ◆ ResetSignal(). void TWinNTSystem::ResetSignal ; (; ESignals ; sig, . Bool_t ; reset = kTRUE . ). overridevirtual . If reset is true reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ; Reimplemented from TSystem.; Definition at line 1425 of file TWinNTSystem.cxx. ◆ ResetSignals(). void TWinNTSystem::ResetSignals ; (; ). overridevirtual . Reset signals handlers to previous behaviour. ; Reimplemented from TSystem.; Definition at line 1433 of file TWinNTSystem.cxx. ◆ Select() [1/2]. Int_t TWinNTSystem::Select ; (; TFileHandler * ; h, . Long_t ; to . ). overridevirtual . Select on the file descriptor related to file handler h. ; The timeout to is in millisec. ; Reimplemented from TSystem.; Definition at line 4628 of file TWinNTSystem.cxx. ◆ Select() [2/2]. Int_t TWinNTSystem::Select ; (; TList * ; active, . Long_t ; timeout . ). overridevirtual . Select on file descriptors. The timeout to is in millisec. ; Reimplemented from TSystem.; Definition at line 4591 of file TWinNTSystem.cxx. ◆ SendBuf(). int TWinNTSystem::SendBuf ; (; int ; sock, . const void * ; buf, . int ; length . ). overridevirtual . Send a buffer headed by a length indicator. ; Returns length of sent buffer or -1 in case of error. ; Reimplemented from TSystem.; Definition at line 4945 of file TWinNTSystem.cxx. ◆ SendRaw(). int TWinNTSystem::SendRaw ; (; int ; sock, . const void * ; buf, . int ; length, . int ; opt . ). overridevirtual . Send exactly length bytes from buffer. ; Use opt to send out-of-band data (see TSocket). Returns the number of bytes sent or -1 in case of error. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe brok",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:68461,timeout,timeout,68461,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['timeout'],['timeout']
Safety,"tion at line 72 of file TGeoCompositeShape.h. ◆ MakeNode(). void TGeoCompositeShape::MakeNode ; (; const char * ; expression). Make a boolean node according to the top level boolean operation of expression. ; Propagates signal to branches until expression is fully decomposed. printf(""Making node for : %s\n"", expression); ; Definition at line 400 of file TGeoCompositeShape.cxx. ◆ operator=(). TGeoCompositeShape & TGeoCompositeShape::operator= ; (; const TGeoCompositeShape & ; ). protecteddelete . ◆ PaintComposite(). Bool_t TGeoCompositeShape::PaintComposite ; (; Option_t * ; option = """"); const. virtual . Paint this composite shape into the current 3D viewer Returns bool flag indicating if the caller should continue to paint child objects. ; Definition at line 429 of file TGeoCompositeShape.cxx. ◆ RegisterYourself(). void TGeoCompositeShape::RegisterYourself ; (; ). Register the shape and all components to TGeoManager class. ; Definition at line 475 of file TGeoCompositeShape.cxx. ◆ Safety(). Double_t TGeoCompositeShape::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . computes the closest distance from given point to this shape, according to option. ; The matching point on the shape is stored in spoint. ; Reimplemented from TGeoBBox.; Definition at line 521 of file TGeoCompositeShape.cxx. ◆ Safety_v(). void TGeoCompositeShape::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Compute safe distance from each of the points in the input array. ; Input: Array of point coordinates, array of statuses for these points, size of the arrays Output: Safety values ; Reimplemented from TGeoBBox.; Definition at line 629 of file TGeoCompositeShape.cxx. ◆ SavePrimitive(). void TGeoCompositeShape::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:42639,Safe,Safety,42639,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['Safe'],['Safety']
Safety,"tion documentation; TGeoPara(); Default constructor. TGeoPara(Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi); Default constructor specifying minimum and maximum radius. TGeoPara(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t alpha, Double_t theta, Double_t phi); Default constructor specifying minimum and maximum radius. TGeoPara(Double_t* param); Default constructor; param[0] = dx; param[1] = dy; param[2] = dz; param[3] = alpha; param[4] = theta; param[5] = phi. ~TGeoPara(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(const Double_t* point) const; test if point is inside this sphere; test Z range. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the para; Boundary safe algorithm. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the para. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this paralelipiped shape belonging to volume ""voldiv"" into ndiv equal volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume. In case a wrong division axis is supplied,; returns pointer to volume to be divided. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPara.html:14015,safe,safe,14015,root/html534/TGeoPara.html,https://root.cern,https://root.cern/root/html534/TGeoPara.html,6,['safe'],['safe']
Safety,"tion of statistical uncertainties from response matrix; Int_tfNdim! Truth and reconstructed dimensions; Bool_tfNormalize! Normalize unfolded spectrum to 1; TH1D*fSVHist! Distribution of singular values; Bool_tfToyMode! Internal switch for covariance matrix propagation; TH1D*fToyhisto! Toy MC histogram; TH2D*fToymat! Toy MC detector response matrix; const TH1D*fXinitruth distribution (MC); TH2D*fXinv! Computed inverse of covariance matrix; TH2D*fXtau! Computed regularized covariance matrix. Class Charts. Inheritance Chart:. TObject. ←; TSVDUnfold. Function documentation; TSVDUnfold(const TH1D* bdat, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Alternative constructor; User provides data and MC test spectra, as well as detector response matrix, diagonal covariance matrix of measured spectrum built from the uncertainties on measured spectrum. TSVDUnfold(const TH1D* bdat, TH2D* Bcov, const TH1D* bini, const TH1D* xini, const TH2D* Adet); Default constructor; Initialisation of TSVDUnfold; User provides data and MC test spectra, as well as detector response matrix and the covariance matrix of the measured distribution. TSVDUnfold(const TSVDUnfold& other); Copy constructor. ~TSVDUnfold(); Destructor. TH1D* Unfold(Int_t kreg); Perform the unfolding with regularisation parameter kreg. TH2D* GetUnfoldCovMatrix(const TH2D* cov, Int_t ntoys, Int_t seed = 1); Determine for given input error matrix covariance matrix of unfolded; spectrum from toy simulation given the passed covariance matrix on measured spectrum; ""cov"" - covariance matrix on the measured spectrum, to be propagated; ""ntoys"" - number of pseudo experiments used for the propagation; ""seed"" - seed for pseudo experiments; Note that this covariance matrix will contain effects of forced normalisation if spectrum is normalised to unit area. TH2D* GetAdetCovMatrix(Int_t ntoys, Int_t seed = 1); Determine covariance matrix of unfolded spectrum from finite statistics in; response matrix using pseudo experiments; ""nto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSVDUnfold.html:11034,detect,detector,11034,root/html602/TSVDUnfold.html,https://root.cern,https://root.cern/root/html602/TSVDUnfold.html,2,['detect'],['detector']
Safety,"tion of the file ROOT-8055.; Repaired the automatic conversion on read back into an STL collection of a on file object of a class that was inheriting from the STL collection. Meta. Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name ROOT-7972.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048; Fix a problem reading ROOT pcm files using gcc 6 optimized build ROOT-8097; Fix the detection of inheritance from an STL collection of an emulated class. Core. Reduce memory consumption (autoparsing) of plugins TXNetSystem/TNetXNGSystem and TGQt. Minuit. Improve thread safety of TMinuit constructor and destructor ROOT-7992. Bug fixes. ROOT-6923 - Memory leak with circular TTree; ROOT-7593 - Memory leak TROOT::RegisterModule; ROOT-7867 - memprobe script is broken when using CMake; ROOT-7992 - Destructor of TMinuit is not thread safe; ROOT-8048 - ShortTypes doesn’t always strip default stdlib template args; ROOT-8055 - File corruption after TTree deletion; ROOT-8066 - problems creating dictionaries in pyROOT; ROOT-8067 - Source code tree left “polluted” with “interpreter/llvm/src/utils/llvm-build/llvmbuild/*.pyc; ROOT-8068 - Fix file flags for bin/setxrd.* bin/thisroot.*; ROOT-8097 - null pointer dereference in TProtoClass::FillTClass with gcc6 build; ROOT-8117 - Particle in TPDGCode.h but not in TDatabasePDG; ROOT-8145 - TMethodCall::InitWithPrototype keeps accumulating memory on successive calls; ROOT-8149 - Memory leak in TList I/O. Release 6.06/06; Released on July 6, 2016; Cling. Properly handle try-catch functions. ROOT-8034; Fix handling of template parameter pack in the forward declaration printer. ROOT-8096. Core. Fix the validity of TRef after the first ProcessID is full.; Fix thread safety of TSystem::ExpandPathName ROOT-8205. Dictionaries. Do not autoparse headers for classes in the pch.; Avoid autoparse on IsForeign() if possible.; Check fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:30310,safe,safe,30310,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['safe'],['safe']
Safety,"tion of this file. 1// @(#)root/treeplayer:$Id$; 2// Author: Philippe Canal 06/06/2004; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers and al. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/*; 13 TODO:; 14 Have separate names for the wrapper classes in the cases of: [done]; 15 clones/non clones; 16 split/non split; 17 split levels; 18 ; 19 Have a solution for passing top+"".""+middle to the parents classes [probably done .. need testing]; 20 ; 21 Have a solution for the return by references of abstract classes [not done]; 22 ; 23 Have object inside ClonesArray properly treated! [done]; 24 Why is there 2 TRef proxy classes? [done]; 25 ; 26 check why some inheritance are TObjProxy and not TPx_; 27 ; 28 Be smart enough to avoid issue about having 2 classes one unrolled and one non unrolled!; 29 ; 30 When using in interpreted mode understand why the reloading reloads the calling script and then crashes :(; 31 ; 32 CINT does not properly call the custom operators when doing return fNtrack.; 33 ; 34 CINT does not handle fMatrix[2][1] well.; 35 ; 36 The user's function in script.h are not exposed by ACLiC.; 37 ; 38 Review the method to avoid the useless refreshing of the generated file; 39 - for most efficiency it would require a different name for each tree; 40*/; 41 ; 42#include ""TTreeProxyGenerator.h""; 43 ; 44#include ""TFriendProxyDescriptor.h""; 45#include ""TBranchProxyDescriptor.h""; 46#include ""TBranchProxyClassDescriptor.h""; 47 ; 48#include ""TList.h""; 49#include ""Varargs.h""; 50#include <cstdio>; 51 ; 52class TTree;; 53class TBranch;; 54class TStreamerElement;; 55 ; 56#include ""TClass.h""; 57#include ""TClassEdit.h""; 58#include ""TClonesArray.h""; 59#include ""TError.h""; 60#include ""TROOT.h"";",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html:1206,avoid,avoid,1206,doc/master/TTreeProxyGenerator_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html,1,['avoid'],['avoid']
Safety,"tion over range specified by X errors; rather than take value at bin center. RooAbsReal* createChi2(RooDataSet& data, const RooLinkedList& cmdList); Internal back-end function to create a chi^2 from a function and a dataset. RooFitResult* chi2FitDriver(RooAbsReal& fcn, RooLinkedList& cmdList); Internal driver function for chi2 fits. void setEvalErrorLoggingMode(RooAbsReal::ErrorLoggingMode m); Set evaluation error logging mode. Options are. PrintErrors - Print each error through RooMsgService() as it occurs; CollectErrors - Accumulate errors, but do not print them. A subsequent call; to printEvalErrors() will print a summary; CountErrors - Accumulate error count, but do not print them. Double_t getVal(const RooArgSet* set = 0) const; Return value and unit accessors. const Text_t * getUnit() const; Return string with unit description. void setUnit(const char* unit); Set unit description to given string. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Interface to force RooRealIntegral to offer given observable for internal integration; even if this is deemed unsafe. This default implementation returns always flase. void forceNumInt(Bool_t flag = kTRUE); If flag is true, all advertised analytical integrals will be ignored; and all integrals are calculated numerically. RooAbsReal* createIntegral(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Create integral over observables in iset in range named rangeName. return createIntegral(iset,0,0,rangeName). RooAbsReal* createIntegral(const RooArgSet& iset, const RooArgSet& nset, const char* rangeName = 0) const; Create integral over observables in iset in range named rangeName with integrand normalized over observables in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:78601,unsafe,unsafe,78601,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,2,['unsafe'],['unsafe']
Safety,"tion using a toy image data set that is generated when running the example macro; ; ; # TMVA Classification Example Using a Convolutional Neural Network; ; ; ## Helper function to create input images data; ## we create a signal and background 2D histograms from 2d gaussians; ## with a location (means in X and Y) different for each event; ## The difference between signal and background is in the gaussian width.; ## The width for the background gaussian is slightly larger than the signal width by few % values; ; import os; import importlib.util; ; opt = [1, 1, 1, 1, 1]; useTMVACNN = opt[0] if len(opt) > 0 else False; useKerasCNN = opt[1] if len(opt) > 1 else False; useTMVADNN = opt[2] if len(opt) > 2 else False; useTMVABDT = opt[3] if len(opt) > 3 else False; usePyTorchCNN = opt[4] if len(opt) > 4 else False; ; tf_spec = importlib.util.find_spec(""tensorflow""); if tf_spec is None:; useKerasCNN = False; print(""TMVA_CNN_Classificaton"",""Skip using Keras since tensorflow is not installed""); else:; import tensorflow; ; # PyTorch has to be imported before ROOT to avoid crashes because of clashing; # std::regexp symbols that are exported by cppyy.; # See also: https://github.com/wlav/cppyy/issues/227; torch_spec = importlib.util.find_spec(""torch""); if torch_spec is None:; usePyTorchCNN = False; print(""TMVA_CNN_Classificaton"",""Skip using PyTorch since torch is not installed""); else:; import torch; ; ; import ROOT; ; ; TMVA = ROOT.TMVA; TFile = ROOT.TFile; ; TMVA.Tools.Instance(); ; def MakeImagesTree(n, nh, nw):; # image size (nh x nw); ntot = nh * nw; fileOutName = ""images_data_16x16.root""; nRndmEvts = 10000 # number of events we use to fill each image; delta_sigma = 0.1 # 5% difference in the sigma; pixelNoise = 5; ; sX1 = 3; sY1 = 3; sX2 = sX1 + delta_sigma; sY2 = sY1 - delta_sigma; h1 = ROOT.TH2D(""h1"", ""h1"", nh, 0, 10, nw, 0, 10); h2 = ROOT.TH2D(""h2"", ""h2"", nh, 0, 10, nw, 0, 10); f1 = ROOT.TF2(""f1"", ""xygaus""); f2 = ROOT.TF2(""f2"", ""xygaus""); sgn = ROOT.TTree(""sig_tree"", ""sig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:1448,avoid,avoid,1448,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['avoid'],['avoid']
Safety,"tion, the entry in the collection becomes in turn top level branches, etc. The splitlevel is decreased by 1 every time a new collection is found. For example if list is a TObjArray*; if splitlevel = 1, one top level branch is created for each element of the TObjArray.; if splitlevel = 2, one top level branch is created for each array element. if, in turn, one of the array elements is a TCollection, one top level branch will be created for each element of this collection. In case a collection element is a TClonesArray, the special Tree constructor for TClonesArray is called. The collection itself cannot be a TClonesArray.; The function returns the total number of branches created.; If name is given, all branch names will be prefixed with name_.; IMPORTANT NOTE1: This function should not be called with splitlevel < 1.; IMPORTANT NOTE2: The branches created by this function will have names corresponding to the collection or object names. It is important to give names to collections to avoid misleading branch names or identical branch names. By default collections have a name equal to the corresponding class name, e.g. the default name for a TList is ""TList"".; And in general, in case two or more master branches contain subbranches with identical names, one must add a ""."" (dot) character at the end of the master branch name. This will force the name of the subbranches to be of the form master.subbranch instead of simply subbranch. This situation happens when the top level object has two or more members referencing the same class. For example, if a Tree has two branches B1 and B2 corresponding to objects of the same class MyClass, one can do: tree.Branch(""B1."",""MyClass"",&b1,8000,1);; tree.Branch(""B2."",""MyClass"",&b2,8000,1);; if MyClass has 3 members a,b,c, the two instructions above will generate subbranches called B1.a, B1.b ,B1.c, B2.a, B2.b, B2.c; Example: {; TTree T(""T"",""test list"");; TList *list = new TList();; ; TObjArray *a1 = new TObjArray();; a1->SetName(""a1"");; l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:88481,avoid,avoid,88481,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['avoid'],['avoid']
Safety,"tion, written by C. Delaere, is *inspired* from; the mlpfit package from J.Schwindling et al. with some extensions:; * the algorithms are globally the same; * in TMultilayerPerceptron, there is no limitation on the number of; layers/neurons, while MLPFIT was limited to 2 hidden layers; * TMultilayerPerceptron allows you to save the network in a root file, and; provides more export functionalities; * TMultilayerPerceptron gives more flexibility regarding the normalization of; inputs/outputs; * TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to; use cross-entropy errors, which allows to train a network for pattern; classification based on Bayesian posterior probability. . Introduction. Neural Networks are more and more used in various fields for data; analysis and classification, both for research and commercial; institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal; over background discrimination). More than 50% of neural networks are multilayer perceptrons. This; implementation of multilayer perceptrons is inspired from the; MLPfit; package originaly written by Jerome Schwindling. MLPfit remains; one of the fastest tool for neural networks studies, and this ROOT; add-on will not try to compete on that. A clear and flexible Object; Oriented implementation has been chosen over a faster but more; difficult to maintain code. Nevertheless, the time penalty does not; exceed a factor 2. The; MLP. The multilayer perceptron is a simple feed-forward network with; the following structure:. It is made of neurons characterized by a bias and weighted links; between them (let's call those links synapses). The input neurons; receive the inputs, normalize them and forward them to the first; hidden layer. Each neuron in any subsequent layer first computes a linear; combination of the outputs o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:2022,predict,predictions,2022,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,3,['predict'],['predictions']
Safety,"tion.cxx:284; TCollection::IsArgNullBool_t IsArgNull(const char *where, const TObject *obj) constReturns true if object is a null pointer.Definition TCollection.cxx:372; TCollection::NotifyBool_t Notify() override'Notify' all objects in this collection.Definition TCollection.cxx:407; TCollection::SetCurrentCollectionvoid SetCurrentCollection()Set this collection to be the globally accessible collection.Definition TCollection.cxx:688; TCollection::GetCurrentCollectionstatic TCollection * GetCurrentCollection()Return the globally accessible collection.Definition TCollection.cxx:680; TCollection::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRemove object from this collection and recursively remove the object from all other objects (and coll...Definition TCollection.cxx:574; TCollection::CapacityInt_t Capacity() constDefinition TCollection.h:167; TCollection::RemoveAllvoid RemoveAll()Definition TCollection.h:204; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::fgEmptyingGarbagestatic Bool_t fgEmptyingGarbageDefinition TCollection.h:136; TCollection::AssertClassBool_t AssertClass(TClass *cl) constMake sure all objects in this collection inherit from class cl.Definition TCollection.cxx:223; TCollection::fgGarbageStackstatic Int_t fgGarbageStackDefinition TCollection.h:137; TCollection::lsvoid ls(Option_t *option="""") const overrideList (ls) all objects in this collection.Definition TCollection.cxx:382; TCollection::GrowByvirtual Int_t GrowBy(Int_t delta) constIncrease the collection's capacity by delta slots.Definition TCollection.cxx:360; TCollection::SetNamevoid SetName(const char *name)Definition TCollection.h:206; TCollection::Streamervoid Streamer(TBuffer &) overrideStream all objects in the collection to or from the I/O buffer.Definition TCollection.cxx:606; TCollection::kUseRWLock@ kUseRWLockDefinition TCollection.h:146; TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:31471,safe,safe,31471,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['safe'],['safe']
Safety,"tionPtrIterators;  CTInternalIterator;  CTVirtualDragManager;  CTVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms ;  CTVirtualFitterAbstract Base Class for Fitting ;  CTVirtualGeoConverterAbstract class for geometry converters ;  CTVirtualGeoPainterAbstract class for geometry painters ;  CTVirtualGeoTrackBase class for user-defined tracks attached to a geometry ;  CTVirtualGLManip;  CTVirtualGLPainter;  CTVirtualGraphPainterAbstract interface to a histogram painter ;  CTVirtualHistPainterAbstract interface to a histogram painter ;  CTVirtualIndexAbstract interface for Tree Index ;  CTVirtualIsAProxy;  CTVirtualMagFieldAbstract class for magnetic field ;  CTVirtualMCAbstract Monte Carlo interface ;  CTVirtualMCApplicationInterface to a user Monte Carlo application ;  CTVirtualMCDecayerAbstract base class for particle decays ;  CTVirtualMCGeometryInterface to Monte Carlo geometry construction ;  CTVirtualMCSensitiveDetectorInterface to a user defined sensitive detector ;  CTVirtualMCStackInterface to a user defined particles stack ;  CTVirtualMonitoringReader;  CTVirtualMonitoringWriter;  CTVirtualMutexThis class implements a mutex interface ;  CTVirtualObjectWrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary ;  ►CTVirtualPacketizerThe packetizer is a load balancing object created for each query ;  CTVirtualSlaveStat;  CTVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes ;  CTVirtualPadEditorAbstract base class used by ROOT graphics editor ;  CTVirtualPadPainterTo make it possible to use GL for 2D graphic in a TPad/TCanvas ;  CTVirtualPerfStatsProvides the interface for the PROOF internal performance measurement and event tracing ;  CTVirtualProofPlayerAbstract interface for the PROOF player ;  CTVirtualPSTVirtualPS is an abstract interface to Postscript, PDF, SVG ;  CTVirtualQConnectionMediates the link between the signal and the slot ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:218955,detect,detector,218955,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,2,['detect'],['detector']
Safety,"tionTags;; 1148 variationTags.reserve(nVariations);; 1149 for (std::size_t i = 0u; i < nVariations; ++i); 1150 variationTags.emplace_back(std::to_string(i));; 1151 ; 1152 return Vary(colNames, expression, std::move(variationTags), variationName);; 1153 }; 1154 ; 1155 /// \brief Register systematic variations for multiple existing columns using auto-generated variation tags.; 1156 /// \param[in] colNames set of names of the columns for which varied values are provided.; 1157 /// \param[in] expression a string containing valid C++ code that evaluates to an RVec containing the varied; 1158 /// values for the specified column.; 1159 /// \param[in] nVariations number of variations returned by the expression. The corresponding tags will be `""0""`,; 1160 /// `""1""`, etc. ; 1161 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`.; 1162 /// colName is used if none is provided.; 1163 ///; 1164 /// \note This overload ensures that the ambiguity between C++20 string, vector<string> construction from init list; 1165 /// is avoided.; 1166 ///; 1167 /// \sa This Vary() overload for more information.; 1168 RInterface<Proxied, DS_t> Vary(std::initializer_list<std::string> colNames, std::string_view expression,; 1169 std::size_t nVariations, std::string_view variationName); 1170 {; 1171 return Vary(std::vector<std::string>(colNames), expression, nVariations, variationName);; 1172 }; 1173 ; 1174 /// \brief Register systematic variations for multiple existing columns using custom variation tags.; 1175 /// \param[in] colNames set of names of the columns for which varied values are provided.; 1176 /// \param[in] expression a string containing valid C++ code that evaluates to an RVec or RVecs containing the varied; 1177 /// values for the specified columns.; 1178 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 1179 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:63761,avoid,avoided,63761,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['avoid'],['avoided']
Safety,"tion_t* option); Paint method. TGeoIntersection(); Default constructor. TGeoIntersection(const char* expr1, const char* expr2); Constructor. TGeoIntersection(TGeoShape* left, TGeoShape* right, TGeoMatrix* lmat = 0, TGeoMatrix* rmat = 0); Constructor providing pointers to components. ~TGeoIntersection(); Destructor; --- deletion of components handled by TGeoManager class. void ComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); Compute bounding box corresponding to a intersection of two shapes. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Normal computation in POINT. The orientation is chosen so that DIR.dot.NORM>0. Bool_t Contains(Double_t* point) const; Find if a intersection of two shapes contains a given point. Int_t DistanceToPrimitive(Int_t px, Int_t py); Compute minimum distance to shape vertices. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point inside to the shape boundary. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; Compute distance from a given point outside to the shape. Int_t GetNpoints(); Returns number of vertices for the composite shape described by this intersection. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; Compute safety distance for a union node;. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void Sizeof3D() const; Register 3D size of this shape. EGeoBoolType GetBooleanOperator() const. » Author: Andrei Gheata 30/05/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: :$Id: TGeoBoolNode.h 41234 2011-10-06 15:48:52Z agheata $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoIntersection.html:9240,safe,safe,9240,root/html532/TGeoIntersection.html,https://root.cern,https://root.cern/root/html532/TGeoIntersection.html,3,"['Safe', 'safe']","['Safety', 'safe', 'safety']"
Safety,"tion_t* option); Special schema for feeding the 3D buffers to the painter client. void RegisterMatrices(); Register all matrices of the boolean node and descendents. Bool_t ReplaceMatrix(TGeoMatrix* mat, TGeoMatrix* newmat); Replace one of the matrices. Does not work with TGeoIdentity. Returns true; if replacement was successful. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetPoints(Double_t* points) const; Fill buffer with shape vertices. void SetPoints(Float_t* points) const; Fill buffer with shape vertices. void Sizeof3D() const; Register size of this 3D object. ThreadData_t& GetThreadData() const. TGeoBoolNode(const TGeoBoolNode& ). TGeoBoolNode& operator=(const TGeoBoolNode& ). void ComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); methods. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm). Bool_t Contains(const Double_t* point) const. Int_t DistanceToPrimitive(Int_t px, Int_t py). Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const. EGeoBoolType GetBooleanOperator() const. Int_t GetNpoints(). TGeoMatrix * GetLeftMatrix() const; {return fLeftMat;}. TGeoMatrix * GetRightMatrix() const; {return fRightMat;}. TGeoShape * GetLeftShape() const; {return fLeft;}. TGeoShape * GetRightShape() const; {return fRight;}. TGeoBoolNode * MakeClone() const. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; {return kGeoUnion;}. » Author: Andrei Gheata 30/05/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoBoolNode.html:10662,safe,safe,10662,root/html604/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html604/TGeoBoolNode.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"tion_t* option); Special schema for feeding the 3D buffers to the painter client. void RegisterMatrices(); Register all matrices of the boolean node and descendents. Bool_t ReplaceMatrix(TGeoMatrix* mat, TGeoMatrix* newmat); Replace one of the matrices. Does not work with TGeoIdentity. Returns true; if replacement was successful. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetPoints(Double_t* points) const; Fill buffer with shape vertices. void SetPoints(Float_t* points) const; Fill buffer with shape vertices. void Sizeof3D() const; Register size of this 3D object. ThreadData_t& GetThreadData() const. TGeoBoolNode(const TGeoBoolNode& ). TGeoBoolNode& operator=(const TGeoBoolNode& ). void ComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); methods. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm). Bool_t Contains(const Double_t* point) const. Int_t DistanceToPrimitive(Int_t px, Int_t py). Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const. EGeoBoolType GetBooleanOperator() const. Int_t GetNpoints(). TGeoMatrix * GetLeftMatrix() const; {return fLeftMat;}. TGeoMatrix * GetRightMatrix() const; {return fRightMat;}. TGeoShape * GetLeftShape() const; {return fLeft;}. TGeoShape * GetRightShape() const; {return fRight;}. TGeoBoolNode * MakeClone() const. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; {return kGeoUnion;}. » Author: Andrei Gheata 30/05/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoBoolNode.html:10662,safe,safe,10662,root/html602/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html602/TGeoBoolNode.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"tionality is replaced by the TH1::SetCanExtend function. TGraph. TGraph::GetHistogram() was resetting the TimeDisplay attribute of axis. The problem was reported here.; Change TGraph::ComputeRange: in case of log scale the minimum along X and Y axis are now set to the lowest positive values of the graph. Previously a % of the maximum was used which may hide some points like in the following example; {; TGraph * gr = new TGraph(10);; for (int i = 0;i<10;i++) gr->SetPoint(i,i,TMath::Exp(-10.0*i));; for (int i = 5;i<10;i++) gr->SetPoint(i,i,0.);; gr->Draw(""apl"");; gr->SetMarkerStyle(20);; gPad->SetLogy(true);; }; The problem was reported here. TGraph2D; Add a new implementation for Delauney interpolation using the triangle code from Jonathan Shewchuk, see [[ http://www.cs.cmu.edu/~quake/triangle.html ]]. A new class for Delauney triangulator and interpolation has been added in the MathCore library ( ROOT::Math::Delauney2D ).; Fitting. Improve thread safety of TH1::Fit by making static member of TVirtualFitter and TMinuitMinimizer thread local. This fixes ROOT-7791.; Fix some bugs in TF1NormSum (to fit normalized sum of functions) and in TF1Convolution; Add a new histogram fitting option, WIDTH to fit directly density. The bin content in this case is scaled by the histogram bin width. TFormula. Fix several bugs in the new TFormula class.; Add as new pre-defined functions: crystalball, breitwigner and cheb0,cheb1,...cheb10 for the Chebyshev polynomials. Math Libraries; Random numbers. Move from MathMore to MathCore the class ROOT::Math::Random. Make it a new interface class for random number generation. Add interfaces for standard ROOT random engines, GSL random engines and random engines provided by the C++ standard library (std::random).; Add a new randomengine, MIXMAX based on matrix-recursive random number generator from Kostas and George Savvidy. See this paper. R Interface; Apply several improvements in the interface to R, allowing to use R functions within ROOT. Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:13035,safe,safety,13035,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['safe'],['safety']
Safety,"tions, . TString & ; accessKey, . TString & ; secretKey, . TString & ; token . ). private . Extracts the S3 authentication key pair (access key and secret key) from the options. ; The authentication credentials can be specified in the options provided to the constructor of this class as a string containing: ""AUTH=<access key>:<secret key>"" and can include other options, for instance ""NOPROXY"" for not using the HTTP proxy for accessing this file's contents. For instance: ""NOPROXY AUTH=F38XYZABCDeFgHiJkLm:V+frt4re7J1euSNFnmaf8wwmI401234E7kzxZ/TTM+"" A security token may be given by the TOKEN option, in order to allow the use of a temporary key pair. ; Definition at line 255 of file TS3WebFile.cxx. ◆ ProcessHttpHeader(). void TS3WebFile::ProcessHttpHeader ; (; const TString & ; headerLine). overrideprotectedvirtual . This method is called by the super-class TWebFile when a HTTP header for this file is retrieved. ; We scan the 'Server' header to detect the type of S3 server this file is hosted on and to determine if it is known to support multi-range HTTP GET requests. Some S3 servers (for instance Amazon's) do not support that feature and when they receive a multi-range request they sent back the whole file contents. For this class, if the server do not support multirange requests we issue multiple single-range requests instead. ; Reimplemented from TWebFile.; Definition at line 346 of file TS3WebFile.cxx. ◆ ReadBuffers(). Bool_t TS3WebFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). overridevirtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented from TFile.; Definition at line 311 of file TS3WebFile.cxx. ◆ SetAccessKey(). void TS3WebFile::SetAccessKey ; (; const TString & ; acces",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:54782,detect,detect,54782,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['detect'],['detect']
Safety,"tly to the version of M , the version has its own memory manager (StackAllocator. The user can select between the standard dynamic memory allocation and deallocation (default) and performance-optimized stack–like allocation (optional). However, the library is not thread save using stack–allocation.; 3.5.3 M parameters; Differently to the version of M there is no limit on the number of parameters, variable or non-variable. Memory allocation is done dynamically according to the actual needs and “on demand”. There is no protection against an upper limit on the number of parameters, however the “technological” limitations of M can be seen around a maximum of 15 free parameters at a time.; 3.6 Interference with other packages; The new M has been designed to interfere as little as possible with other programs or packages which may be loaded at the same time. M is thread safe by default. Optionally the user can select a different way of dynamically allocating memory in the class StackAllacator for M , in which case (and after an entire recompilation of the whole library) the thread safety is lost.; 3.7 Floating-point precision; [install:epsmac]; M is entirely based on double precision. The actual floating point precision of double precision (32–bit or 64–bit) is platform dependent and can even vary on the same platform, depending on whether a floating point number is read from memory a CPU register.; The argument of the user’s implementation of FCNBase::operator() is therefore a std:vector\(<\)double\(>\). M expects that the calculations inside \(\mbox{FCN}\) will be performed approximately to the same accuracy.; The accuracy M expects is called machine precision (MnMachinePrecision, see [api:epsmac]) and can be printed on demand using std::cout. If the user fools M by making internal \(\mbox{FCN}\) computations in single precision, M will interpret roundoff noise as significant and will usually either fail to find a minimum, or give incorrect values for the parameter erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:27757,safe,safety,27757,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['safe'],['safety']
Safety,"tly to the version of M , the version has its own memory manager (StackAllocator. The user can select between the standard dynamic memory allocation and deallocation (default) and performance-optimized stack–like allocation (optional). However, the library is not thread save using stack–allocation.; 3.5.3 M parameters; Differently to the version of M there is no limit on the number of parameters, variable or non-variable. Memory allocation is done dynamically according to the actual needs and “on demand”. There is no protection against an upper limit on the number of parameters, however the “technological” limitations of M can be seen around a maximum of 15 free parameters at a time.; 3.6 Interference with other packages; The new M has been designed to interfere as little as possible with other programs or packages which may be loaded at the same time. M is thread safe by default. Optionally the user can select a different way of dynamically allocating memory in the class StackAllacator for M , in which case (and after an entire recompiliation of the whole library) the thread safety is lost.; 3.7 Floating-point precision; [install:epsmac]; M is entirely based on double precision. The actual floating point precision of double precision (32–bit or 64–bit) is platform dependent and can even vary on the same platform, depending on whether a floating point number is read from memory a CPU register.; The argument of the user’s implementation of FCNBase::operator() is therefore a std:vector\(<\)double\(>\). M expects that the calculations inside \(\mbox{FCN}\) will be performed approximately to the same accuracy.; The accuracy M expects is called machine precision (MnMachinePrecision, see [api:epsmac]) and can be printed on demand using std::cout. If the user fools M by making internal \(\mbox{FCN}\) computations in single precision, M will interpret roundoff noise as significant and will usually either fail to find a minimum, or give incorrect values for the parameter erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:31781,safe,safety,31781,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['safe'],['safety']
Safety,"to TClass of the specified class name.Definition TClass.cxx:2968; TCollectionCollection abstract base class.Definition TCollection.h:65; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualIsAProxyDefinition TVirtualIsAProxy.h:27; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Internal::DefaultStreamervoid DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer)Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer....Definition TBuffer.cxx:30; ROOT::Internal::DefineBehaviorconst TInitBehavior * DefineBehavior(void *, void *)Definition TGenericClassInfo.cxx:44; ROOT::Internal::HasConsistentHashMemberBool_t HasConsistentHashMember(TClass &clRef)Return true is the Hash/RecursiveRemove setup is consistent, i.e.Definition TClass.cxx:7371; ROOT::Internal::GetDemangledTypeNamestd::string GetDemangledTypeName(const std::type_info &t)Definition TGenericClassInfo.cxx:30; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:114; ROOT::AddClassAlternateROOT::TClassAlt * AddClassAlternate(const char *normName, const char *alternate)Global function called by GenerateInitInstance.Definition TClassTable.cxx:918; ROOT::ResetAfterMergeFunc_tvoid(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h_source.html:29012,avoid,avoid,29012,doc/v632/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html,1,['avoid'],['avoid']
Safety,"to TClass of the specified class name.Definition TClass.cxx:3035; TCollectionCollection abstract base class.Definition TCollection.h:65; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TFileMergeInfoDefinition TFileMergeInfo.h:42; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberStreamerDefinition TMemberStreamer.h:26; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TStringBasic string class.Definition TString.h:139; TVirtualCollectionProxyDefines a common interface to inspect/change the contents of an object that represents a collection.Definition TVirtualCollectionProxy.h:52; TVirtualIsAProxyDefinition TVirtualIsAProxy.h:27; bool; int; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::Internal::DefaultStreamervoid DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer)Default streamer implementation used by ClassDefInline to avoid requirement to include TBuffer....Definition TBuffer.cxx:30; ROOT::Internal::DefineBehaviorconst TInitBehavior * DefineBehavior(void *, void *)Definition TGenericClassInfo.cxx:45; ROOT::Internal::HasConsistentHashMemberBool_t HasConsistentHashMember(TClass &clRef)Return true is the Hash/RecursiveRemove setup is consistent, i.e.Definition TClass.cxx:7438; ROOT::Internal::GetDemangledTypeNamestd::string GetDemangledTypeName(const std::type_info &t)Definition TGenericClassInfo.cxx:31; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:119; ROOT::AddClassAlternateROOT::TClassAlt * AddClassAlternate(const char *normName, const char *alternate)Global function called by GenerateInitInstance.Definition TClassTable.cxx:918; ROOT::ResetAfterMergeFunc_tvoid(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h_source.html:30549,avoid,avoid,30549,doc/master/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h_source.html,1,['avoid'],['avoid']
Safety,"to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelector.html:10308,abort,abort,10308,root/html602/TSelector.html,https://root.cern,https://root.cern/root/html602/TSelector.html,2,['abort'],['abort']
Safety,"to a geometry are handled by the manager class. However, shape-related queries might be sometimes useful.; Bool_t TGeoShape::Contains(const Double_t *point[3]); this method returns true if POINT is actually inside the shape. The point has to be defined in the local shape reference. For instance, for a box having DX, DY and DZ half-lengths a point will be considered inside if :; | -DX <= point[0] <= DX; | -DY <= point[1] <= DY; | -DZ <= point[2] <= DZ; Double_t TGeoShape::DistFromInside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t</h4> safe) computes the distance to exiting a shape from a given point INSIDE, along a given direction. The direction is given by its director cosines with respect to the local shape coordinate system. This method provides additional information according the value of IACT input parameter : :IACT = 0 => compute only safe distance and fill it at the location given by SAFESAFEIACT = 1 => a proposed STEP is supplied. The safe distance is computed first. If this is bigger than STEP than the proposed step is approved and returned by the method since it does not cross the shape boundaries. Otherwise, the distance to exiting the shape is computed and returned..IACT = 2 => compute both safe distance and distance to exiting, ignoring the proposed step..IACT > 2 => compute only the distance to exiting, ignoring anything else. Double_t TGeoShape::DistFromOutside(Double_t *point[3], Double_t *dir[3], Int_t iact, Double_t step, Double_t</h4> safe) computes the distance to entering a shape from a given point OUTSIDE. Acts in the same way as B). Double_t Safety(const Double_t *point[3], Bool_t inside); compute maximum shift of a point in any direction that does not change its INSIDE/OUTSIDE state (does not cross shape boundaries). The state of the point have to be properly supplied.; Double_t *Normal(Double_t *point[3], Double_t *dir[3], Bool_t inside); returns director cosines of normal to the crossed shape surface from a give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:5259,safe,safe,5259,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['safe'],['safe']
Safety,"to avoid the file system from being mounted.; 400 ; 401TEnv::TEnv(const char *name); 402{; 403 fIgnoreDup = kFALSE;; 404 ; 405 if (!name || !name[0] || !gSystem); 406 fTable = nullptr;; 407 else {; 408 fTable = new THashList(1000);; 409 fRcName = name;; 410 ; 411 TString sname = ""system"";; 412 sname += name;; 413 char *s = gSystem->ConcatFileName(TROOT::GetEtcDir(), sname);; 414 ReadFile(s, kEnvGlobal);; 415 delete [] s;; 416 if (!gSystem->Getenv(""ROOTENV_NO_HOME"")) {; 417 s = gSystem->ConcatFileName(gSystem->HomeDirectory(), name);; 418 ReadFile(s, kEnvUser);; 419 delete [] s;; 420 if (strcmp(gSystem->HomeDirectory(), gSystem->WorkingDirectory())); 421 ReadFile(name, kEnvLocal);; 422 } else; 423 ReadFile(name, kEnvLocal);; 424 }; 425}; 426 ; 427////////////////////////////////////////////////////////////////////////////////; 428/// Delete the resource table.; 429 ; 430TEnv::~TEnv(); 431{; 432 if (fTable) {; 433 fTable->Delete();; 434 SafeDelete(fTable);; 435 }; 436}; 437 ; 438////////////////////////////////////////////////////////////////////////////////; 439/// Returns the character value for a named resource.; 440 ; 441const char *TEnv::Getvalue(const char *name) const; 442{; 443 Bool_t haveProgName = kFALSE;; 444 if (gProgName && strlen(gProgName) > 0); 445 haveProgName = kTRUE;; 446 ; 447 TString aname;; 448 TEnvRec *er = nullptr;; 449 if (haveProgName && gSystem && gProgName) {; 450 aname = gSystem->GetName(); aname += "".""; aname += gProgName;; 451 aname += "".""; aname += name;; 452 er = Lookup(aname);; 453 }; 454 if (er == nullptr && gSystem && gROOT) {; 455 aname = gSystem->GetName(); aname += "".""; aname += gROOT->GetName();; 456 aname += "".""; aname += name;; 457 er = Lookup(aname);; 458 }; 459 if (er == nullptr && gSystem) {; 460 aname = gSystem->GetName(); aname += "".*.""; aname += name;; 461 er = Lookup(aname);; 462 }; 463 if (er == nullptr && haveProgName && gProgName) {; 464 aname = gProgName; aname += "".""; aname += name;; 465 er = Lookup(aname);; 466 }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:11768,Safe,SafeDelete,11768,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,1,['Safe'],['SafeDelete']
Safety,"to cached global matrix ;  ; TGeoNode * fForcedNode;  next node that will be crossed ;  ; TGeoManager * fGeometry;  flag that last geometric step was null ;  ; TGeoHMatrix * fGlobalMatrix;  current stored global matrix ;  ; Bool_t fIsEntering;  flag a safe start for point classification ;  ; Bool_t fIsExiting;  flag if current step just got into a new node ;  ; Bool_t fIsNullStep;  flag that a new point is in the same node as previous ;  ; Bool_t fIsOnBoundary;  flag that current point is outside geometry ;  ; Bool_t fIsOutside;  flag that next geometric step will exit current volume ;  ; Bool_t fIsSameLocation;  flag that current point is on some boundary ;  ; Bool_t fIsStepEntering;  flag that current track is about to leave current node ;  ; Bool_t fIsStepExiting;  flag that next geometric step will enter new volume ;  ; TGeoNode * fLastNode;  top physical node ;  ; Double_t fLastPoint [3];  current direction ;  ; Double_t fLastPWSafety {-1};  last point for which parallel world safety was ""evaluated"" ;  ; Double_t fLastPWSaftyPnt [3];  last point for which safety was computed ;  ; Double_t fLastSafety;  safety radius from current point ;  ; Int_t fLevel;  thread id for this navigator ;  ; Int_t fNextDaughterIndex;  number of overlapping nodes on current branch ;  ; TGeoNode * fNextNode;  last searched node ;  ; Int_t fNmany;  current geometry level; ;  ; Double_t fNormal [3];  last computed safety radius ;  ; Int_t * fOverlapClusters;  current recursive position in fOverlapClusters ;  ; Int_t fOverlapMark;  current size of fOverlapClusters ;  ; Int_t fOverlapSize;  next daughter index after FindNextBoundary ;  ; TString fPath;  current local matrix of the selected division cell ;  ; Double_t fPoint [3];  unit vector to current checked shape ;  ; Double_t fSafety;  step to be done from current point and direction ;  ; Bool_t fSearchOverlaps;  internal array for overlaps ;  ; Bool_t fStartSafe;  flags the type of the current node ;  ; Double_t fStep;  ; Int_t fThre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:20213,safe,safety,20213,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safety']
Safety,"to floating point //; 16// values on the device. //; 17///////////////////////////////////////////////////////////////////////; 18 ; 19#ifndef TMVA_DNN_ARCHITECTURES_CUDA_CUDAMATRIX; 20#define TMVA_DNN_ARCHITECTURES_CUDA_CUDAMATRIX; 21 ; 22// in case we compile C++ code with std-17 and cuda with lower standard; 23// use experimental string_view, otherwise keep as is; 24#include ""RConfigure.h""; 25 ; 26#include ""cuda.h""; 27#include ""cuda_runtime.h""; 28#include ""cublas_v2.h""; 29#include ""curand_kernel.h""; 30 ; 31#include ""TMatrixT.h""; 32#include ""CudaBuffers.h""; 33 ; 34#define CUDACHECK(ans) {cudaError((ans), __FILE__, __LINE__); }; 35 ; 36namespace TMVA {; 37namespace DNN {; 38 ; 39/** Function to check cuda return code. Taken from; 40 * http://stackoverflow.com/questions/14038589/; 41 */; 42inline void cudaError(cudaError_t code, const char *file, int line, bool abort=true);; 43 ; 44//____________________________________________________________________________; 45//; 46// Cuda Device Reference; 47//____________________________________________________________________________; 48 ; 49/** TCudaDeviceReference; 50 *; 51 * Helper class emulating lvalue references for AFloat values that are; 52 * physically on the device. Allows for example to assign to matrix elements.; 53 * Note that device access through CudaDeviceReferences enforces synchronization; 54 * with all streams and thus qualifies as performance killer. Only used for; 55 * testing.; 56 */; 57template<typename AFloat>; 58class TCudaDeviceReference; 59{; 60private:; 61 ; 62 AFloat * fDevicePointer;; 63 ; 64public:; 65 ; 66 TCudaDeviceReference(AFloat * devicePointer);; 67 ; 68 operator AFloat();; 69 ; 70 void operator=(const TCudaDeviceReference &other);; 71 void operator=(AFloat value);; 72 void operator+=(AFloat value);; 73 void operator-=(AFloat value);; 74};; 75 ; 76//____________________________________________________________________________; 77//; 78// Cuda Matrix; 79//_____________________________________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8h_source.html:1796,abort,abort,1796,doc/master/CudaMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8h_source.html,1,['abort'],['abort']
Safety,"to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject. ◆ Process(). Bool_t h1analysisTreeReader::Process ; (; Long64_t ; ). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented from TSelector. ◆ Reset(). void h1analysisTreeReader::Reset ; (; ). Definition at line 81 of file h1analysisTreeReader.h. ◆ SetInputList(). void h1analysisTreeReader::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 72 of file h1analysisTreeReader.h. ◆ SetObject(). void h1analysisTreeReader::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 71 of file h1analysisTreeReader.h. ◆ SetOption(). void h1analysisTreeReader::SetOption ; (; const char * ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classh1analysisTreeReader.html:16682,Abort,Abort,16682,doc/master/classh1analysisTreeReader.html,https://root.cern,https://root.cern/doc/master/classh1analysisTreeReader.html,1,['Abort'],['Abort']
Safety,"to loading to not inadvertently; 1645 // load the libraries for the classes concerned even-though the user is; 1646 // *not* using them.; 1647 // Note this call must happen before the first call to LoadLibraryMap.; 1648 assert(GetRootMapFiles() == nullptr && ""Must be called before LoadLibraryMap!"");; 1649 TClass::ReadRules(); // Read the default customization rules ...; 1650 ; 1651 LoadLibraryMap();; 1652 SetClassAutoLoading(true);; 1653}; 1654 ; 1655void TCling::ShutDown(); 1656{; 1657 fIsShuttingDown = true;; 1658 ResetGlobals();; 1659}; 1660 ; 1661////////////////////////////////////////////////////////////////////////////////; 1662/// Helper to initialize TVirtualStreamerInfo's factor early.; 1663/// Use static initialization to insure only one TStreamerInfo is created.; 1664static bool R__InitStreamerInfoFactory(); 1665{; 1666 // Use lambda since SetFactory return void.; 1667 auto setFactory = []() {; 1668 TVirtualStreamerInfo::SetFactory(new TStreamerInfo());; 1669 return kTRUE;; 1670 };; 1671 static bool doneFactory = setFactory();; 1672 return doneFactory; // avoid unused variable warning.; 1673}; 1674 ; 1675////////////////////////////////////////////////////////////////////////////////; 1676/// Register Rdict data for future loading by LoadPCM;; 1677 ; 1678void TCling::RegisterRdictForLoadPCM(const std::string &pcmFileNameFullPath, llvm::StringRef *pcmContent); 1679{; 1680 if (IsFromRootCling()); 1681 return;; 1682 ; 1683 if (llvm::sys::fs::exists(pcmFileNameFullPath)) {; 1684 ::Error(""TCling::RegisterRdictForLoadPCM"", ""Rdict '%s' is both in Module extension and in File system."", pcmFileNameFullPath.c_str());; 1685 return;; 1686 }; 1687 ; 1688 // The pcmFileNameFullPath must be resolved already because we cannot resolve; 1689 // a link to a non-existent file.; 1690 fPendingRdicts[pcmFileNameFullPath] = *pcmContent;; 1691}; 1692 ; 1693////////////////////////////////////////////////////////////////////////////////; 1694/// Tries to load a PCM from TFile; ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:62623,avoid,avoid,62623,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['avoid'],['avoid']
Safety,"to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2010 of file TBufferFile.cxx. ◆ WriteFastArray() [3/15]. void TBufferFile::WriteFastArray ; (; const Double_t * ; d, . Long64_t ; n . ). overridevirtual . Write array of n doubles into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2236 of file TBufferFile.cxx. ◆ WriteFastArray() [4/15]. void TBufferFile::WriteFastArray ; (; const Float_t * ; f, . Long64_t ; n . ). overridevirtual . Write array of n floats into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2203 of file TBufferFile.cxx. ◆ WriteFastArray() [5/15]. void TBufferFile::WriteFastArray ; (; const Int_t * ; ii, . Long64_t ; n . ). overridevirtual . Write array of n ints into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 2096 of file TBufferFile.cxx. ◆ WriteFastArray() [6/15]. void TBufferFile::WriteFastArray ; (; const Long64_t * ; ll, . Long64_t ; n . ). overridevirtual . Write array of n long longs into the I/O buffer. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:82369,abort,aborts,82369,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['abort'],['aborts']
Safety,"togram dimension along which to interpolate. ; [in]xvalValue of histogram variable at dimension iDim for which we want to interpolate the histogram weight. ; [in]centralIdxIndex of the bin that the point at which we interpolate the histogram weight falls into (can be obtained with RooDataHist::calcTreeIndex). ; [in]intOrderInterpolation order, i.e. how many neighbouring bins are used for the interpolation. ; [in]correctForBinSizeEnable the inverse bin volume correction factor. ; [in]cdfBoundariesEnable the special boundary condition for a cdf: underflow bins are assumed to have weight zero and overflow bins have weight one. Otherwise, the histogram is mirrored at the boundaries for the interpolation. . Definition at line 1638 of file RooDataHist.cxx. ◆ interpolateLinear(). void RooDataHist::interpolateLinear ; (; double * ; output, . std::span< const double > ; xVals, . bool ; correctForBinSize, . bool ; cdfBoundaries . ). private . A vectorized version of interpolateDim for boundary safe linear interpolation of one dimensional histograms. ; Parameters. [out]outputAn array of interpolated weights corresponding to the values in xVals. ; [in]xValsAn array of event coordinates for which the weights should be calculated. ; [in]correctForBinSizeEnable the inverse bin volume correction factor. ; [in]cdfBoundariesEnable the special boundary condition for a cdf: Underflow bins are assumed to have weight zero and overflow bins have weight one. Otherwise, the histogram is mirrored at the boundaries for the interpolation. . Definition at line 1263 of file RooDataHist.cxx. ◆ interpolateQuadratic(). void RooDataHist::interpolateQuadratic ; (; double * ; output, . std::span< const double > ; xVals, . bool ; correctForBinSize, . bool ; cdfBoundaries . ). private . A vectorized version of interpolateDim for boundary safe quadratic interpolation of one dimensional histograms. ; Parameters. [out]outputAn array of interpolated weights corresponding to the values in xVals. ; [in]xValsAn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:64153,safe,safe,64153,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['safe'],['safe']
Safety,"togram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:17250,avoid,avoids,17250,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['avoid'],['avoids']
Safety,"too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions of objects, and only accept those that are of interest at a certain time, caching the relatively small number of CPU/memory costly logical shapes, and retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; bool; unsigned int; If you use the first (simple) case a viewer using logical/physical pairs will generate IDs for each physical object internally. In the second you can specify a unique identifier from the client, which allows the viewer to be more efficient. It can now cache both logical and physical objects, and only discard physical objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:10212,detect,detect,10212,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['detect'],['detect']
Safety,"too small to be worth drawing. In all these cases AddObject() returns kNone, as it does for successful addition, simply indicating it does not require you to provide further information about this object. You should not try to make any assumptions about what the viewer did with it.; This enables the viewer to be connected to a client which sends potentially millions of objects, and only accept those that are of interest at a certain time, caching the relatively small number of CPU/memory costly logical shapes, and retaining/discarding the physical placements as required. The viewer may decide to force the client to rebuild (republish) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; bool; unsigned int; If you use the first (simple) case a viewer using logical/physical pairs SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical object internally. In the second you can specify a unique identifier from the client, which allows the viewer to be more efficient. It can now cache both logical and physical objects, and only discard physical objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:8070,detect,detect,8070,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['detect'],['detect']
Safety,"tor ; (; ); const. inlineoverridevirtual . Implements TGeoBoolNode.; Definition at line 156 of file TGeoBoolNode.h. ◆ GetNpoints(). Int_t TGeoIntersection::GetNpoints ; (; ). overridevirtual . Returns number of vertices for the composite shape described by this intersection. ; Implements TGeoBoolNode.; Definition at line 1599 of file TGeoBoolNode.cxx. ◆ IsA(). TClass * TGeoIntersection::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBoolNode.; Definition at line 166 of file TGeoBoolNode.h. ◆ MakeClone(). TGeoBoolNode * TGeoIntersection::MakeClone ; (; ); const. overridevirtual . Make a clone of this. Pointers are preserved. ; Implements TGeoBoolNode.; Definition at line 1230 of file TGeoBoolNode.cxx. ◆ Paint(). void TGeoIntersection::Paint ; (; Option_t * ; option). overridevirtual . Paint method. ; Reimplemented from TGeoBoolNode.; Definition at line 1238 of file TGeoBoolNode.cxx. ◆ Safety(). Double_t TGeoIntersection::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Compute safety distance for a union node;. ; Implements TGeoBoolNode.; Definition at line 1641 of file TGeoBoolNode.cxx. ◆ SavePrimitive(). void TGeoIntersection::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBoolNode.; Definition at line 1665 of file TGeoBoolNode.cxx. ◆ Sizeof3D(). void TGeoIntersection::Sizeof3D ; (; ); const. overridevirtual . Register 3D size of this shape. ; Reimplemented from TGeoBoolNode.; Definition at line 1684 of file TGeoBoolNode.cxx. ◆ Streamer(). void TGeoIntersection::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBoolNode. ◆ StreamerNVirtual(). void TGeoIntersection::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 166 of file TGeoBoolN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoIntersection.html:18372,Safe,Safety,18372,doc/master/classTGeoIntersection.html,https://root.cern,https://root.cern/doc/master/classTGeoIntersection.html,1,['Safe'],['Safety']
Safety,"tor new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tTServerSocket::Recv(TMessage*&); virtual Int_tTServerSocket::Recv(Int_t&, Int_t&); virtual Int_tTServerSocket::Recv(char*, Int_t); virtual Int_tTServerSocket::Recv(char*, Int_t, Int_t&); virtual Int_tTServerSocket::RecvRaw(void*, Int_t, ESendRecvOptions = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tTServerSocket::Send(const TMessage&); virtual Int_tTServerSocket::Send(Int_t); virtual Int_tTServerSocket::Send(Int_t, Int_t); virtual Int_tTServerSocket::Send(const char*, Int_t = kMESS_STRING); virtual Int_tTServerSocket::SendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tTServerSocket::SendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidTServerSocket::SetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPServerSocket.html:6014,timeout,timeout,6014,root/html528/TPServerSocket.html,https://root.cern,https://root.cern/root/html528/TPServerSocket.html,1,['timeout'],['timeout']
Safety,"tor* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAbort(); Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the TClass object for the interpreted class. TSelectorCint(). TSelector * GetInterpretedSelector() const; { return fIntSelector; }. » Author: Rene Brun 05/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSelectorCint.html:9525,Abort,Abort,9525,root/html604/TSelectorCint.html,https://root.cern,https://root.cern/root/html604/TSelectorCint.html,1,['Abort'],['Abort']
Safety,"tor* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAbort(); Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the TClass object for the interpreted class. TSelectorCint(). TSelector * GetInterpretedSelector() const; { return fIntSelector; }. » Author: Rene Brun 05/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorCint.html:9525,Abort,Abort,9525,root/html602/TSelectorCint.html,https://root.cern,https://root.cern/root/html602/TSelectorCint.html,1,['Abort'],['Abort']
Safety,"tor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:13650,detect,detected,13650,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,12,"['detect', 'timeout']","['detected', 'timeout']"
Safety,"tor.h. ◆ PopPath() [2/2]. Bool_t TGeoNavigator::PopPath ; (; Int_t ; index). inline . Definition at line 255 of file TGeoNavigator.h. ◆ PopPoint() [1/2]. Bool_t TGeoNavigator::PopPoint ; (; ). inline . Definition at line 264 of file TGeoNavigator.h. ◆ PopPoint() [2/2]. Bool_t TGeoNavigator::PopPoint ; (; Int_t ; index). inline . Definition at line 272 of file TGeoNavigator.h. ◆ PushPath(). Int_t TGeoNavigator::PushPath ; (; Int_t ; startlevel = 0). inline . Definition at line 246 of file TGeoNavigator.h. ◆ PushPoint(). Int_t TGeoNavigator::PushPoint ; (; Int_t ; startlevel = 0). inline . Definition at line 263 of file TGeoNavigator.h. ◆ ResetAll(). void TGeoNavigator::ResetAll ; (; ). Reset the navigator. ; Definition at line 2708 of file TGeoNavigator.cxx. ◆ ResetState(). void TGeoNavigator::ResetState ; (; ). Reset current state flags. ; Definition at line 1643 of file TGeoNavigator.cxx. ◆ Safety(). Double_t TGeoNavigator::Safety ; (; Bool_t ; inside = kFALSE). Compute safe distance from the current point. ; This represent the distance from POINT to the closest boundary. ; Definition at line 1689 of file TGeoNavigator.cxx. ◆ SafetyOverlaps(). void TGeoNavigator::SafetyOverlaps ; (; ). protected . Compute safe distance from the current point within an overlapping node. ; Definition at line 1846 of file TGeoNavigator.cxx. ◆ SearchNode(). TGeoNode * TGeoNavigator::SearchNode ; (; Bool_t ; downwards = kFALSE, . const TGeoNode * ; skipnode = nullptr . ). Returns the deepest node containing fPoint, which must be set a priori. ; Check if parallel world navigation is enabled ; Definition at line 1924 of file TGeoNavigator.cxx. ◆ SetCheckingOverlaps(). void TGeoNavigator::SetCheckingOverlaps ; (; Bool_t ; flag = kTRUE). inline . Definition at line 147 of file TGeoNavigator.h. ◆ SetCldirChecked(). void TGeoNavigator::SetCldirChecked ; (; Double_t * ; dir). inline . Definition at line 193 of file TGeoNavigator.h. ◆ SetCurrentDirection() [1/2]. void TGeoNavigator::SetCurrentD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:41384,safe,safe,41384,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safe']
Safety,"tor<<(TBuffer &buf, const Tmpl *obj)Definition TBuffer.h:397; TBuffer.h; TClass.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; ErrorHandlervoid ErrorHandler(int level, const char *location, const char *fmt, std::va_list va)General error handler function. It calls the user set error handler.Definition TError.cxx:109; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; kPrintconstexpr Int_t kPrintDefinition TError.h:44; Obsoletevoid Obsolete(const char *function, const char *asOfVers, const char *removedFromVers)Use this function to declare a function obsolete.Definition TError.cxx:177; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; Fatalvoid Fatal(const char *location, const char *msgfmt,...)Use this function in case of a fatal error. It will abort the program.Definition TError.cxx:244; gPrintViaErrorHandlerBool_t gPrintViaErrorHandlerDefinition TError.cxx:33; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; directwinID h directDefinition TGWin32VirtualGLProxy.cxx:43; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:87810,abort,abort,87810,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['abort'],['abort']
Safety,"torEditor for TEveElement class ;  CTEveElementListA list of TEveElements ;  CTEveElementListProjectedA projected element list – required for proper propagation of render state to projected views ;  CTEveElementObjectPtrTEveElement with external TObject as a holder of visualization data ;  CTEveEventManagerBase class for event management and navigation ;  CTEveExceptionException class thrown by TEve classes and macros ;  CTEveFrameBoxDescription of a 2D or 3D frame that can be used to visually group a set of objects ;  CTEveFrameBoxGLA class encapsulating GL rendering of TEveFrameBox via a static member function ;  CTEveGDoubleValuatorComposite GUI element for selection of range (label, two number-entries and double-slider) ;  CTEveGedEditorSpecialization of TGedEditor for proper update propagation to TEveManager ;  CTEveGedNameFrameSpecialization of TGedNameFrame used in EVE ;  CTEveGedNameTextButtonSpecialization of TGTextButton for EVE name frame ;  CTEveGeoManagerHolderException safe wrapper for setting gGeoManager ;  CTEveGeoNodeWrapper for TGeoNode that allows it to be shown in GUI and controlled as a TEveElement ;  CTEveGeoNodeEditorEditor for TEveGeoNode class ;  ►CTEveGeoPolyShapeDescription of TEveGeoPolyShape ;  CEdge_t;  CTEveGeoShapeWrapper for TGeoShape with absolute positioning and color attributes allowing display of extracted TGeoShape's (without an active TGeoManager) and simplified geometries (needed for non-linear projections) ;  CTEveGeoShapeExtractGlobally positioned TGeoShape with rendering attributes and an optional list of daughter shape-extracts ;  CTEveGeoShapeProjectedA 3D projected TEveGeoShape ;  CTEveGeoTopNodeA wrapper over a TGeoNode, possibly displaced with a global trasformation stored in TEveElement ;  CTEveGeoTopNodeEditorEditor for TEveGeoTopNode class ;  CTEveGListTreeEditorFrameComposite GUI frame for parallel display of a TGListTree and TEveGedEditor ;  CTEveGridStepperProvide discrete position coordinates for placement of obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:125216,safe,safe,125216,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['safe'],['safe']
Safety,"torOfClassesOfTreeType &eventsmap, const EvtStatsPerClass &eventCounts, const TString &normMode);  renormalisation of the TRAINING event weights ;  ; void ResetBranchAndEventAddresses (TTree *);  ; void ResetCurrentTree ();  ; Bool_t Verbose ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Bool_t fComputeCorrelations = kFALSE;  Whether to force computation of correlations or not. ;  ; Bool_t fCorrelations = kFALSE;  Whether to print correlations or not. ;  ; UInt_t fCurrentEvtIdx;  the current event (to avoid reading of the same event) ;  ; TTree * fCurrentTree;  the tree, events are currently read from ;  ; std::vector< TTreeFormula * > fCutFormulas;  cuts ;  ; std::vector< TTreeFormula * > fInputFormulas;  input variables ;  ; std::vector< std::pair< TTreeFormula *, Int_t > > fInputTableFormulas;  ! input variables expression for arrays ;  ; MsgLogger * fLogger;  ! message logger ;  ; Bool_t fScaleWithPreselEff;  how to deal with requested #events in connection with preselection cuts ;  ; std::vector< TTreeFormula * > fSpectatorFormulas;  spectators ;  ; std::vector< TTreeFormula * > fTargetFormulas;  targets ;  ; Bool_t fVerbose;  Verbosity. ;  ; TString fVerboseLevel;  VerboseLevel. ;  ; std::vector< TTreeFormula * > fWeightFormula;  weights ;  . Private Types; typedef std::vector< Event * > EventVector;  ; typedef std::vector< EventVector > EventVectorOfClasses;  ; typedef std::map< Types::ETreeType, EventVectorOfClasses > EventVectorOfClassesOfTreeType;  ; typedef std::map< Types::ETreeType, EventVector > EventVectorOfTreeType;  ; typedef std::vector< EventStats > EvtStatsPerClass;  ; typedef std::vector< int > NumberPerClass;  ; typedef std::vector< Double_t > ValuePerClass;  ; typedef std::map< Types::ETreeType, ValuePerClass > ValuePerClassOfTreeType;  . Additional Inher",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html:11748,avoid,avoid,11748,doc/master/classTMVA_1_1DataSetFactory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html,1,['avoid'],['avoid']
Safety,"tory"",""directory name (%s) cannot contain a slash"", name);; 82 gDirectory = nullptr;; 83 return;; 84 }; 85 if (strlen(GetName()) == 0) {; 86 ::Error(""TDirectory::TDirectory"",""directory name cannot be \""\"""");; 87 gDirectory = nullptr;; 88 return;; 89 }; 90 ; 91 BuildDirectory(initMotherDir ? initMotherDir->GetFile() : nullptr, initMotherDir);; 92}; 93 ; 94////////////////////////////////////////////////////////////////////////////////; 95/// Destructor.; 96 ; 97TDirectory::~TDirectory(); 98{; 99 // Use gROOTLocal to avoid triggering undesired initialization of gROOT.; 100 // For example in compiled C++ programs that don't use it directly.; 101 if (!ROOT::Internal::gROOTLocal) {; 102 delete fList;; 103 return; //when called by TROOT destructor; 104 }; 105 ; 106 if (fList) {; 107 if (!fList->IsUsingRWLock()); 108 Fatal(""~TDirectory"",""In %s:%p the fList (%p) is not using the RWLock\n"",; 109 GetName(),this,fList);; 110 fList->Delete(""slow"");; 111 SafeDelete(fList);; 112 }; 113 ; 114 TDirectory::CleanTargets();; 115 ; 116 TDirectory* mom = GetMotherDir();; 117 ; 118 if (mom) {; 119 mom->Remove(this);; 120 }; 121 ; 122 if (gDebug) {; 123 Info(""~TDirectory"", ""dtor called for %s"", GetName());; 124 }; 125}; 126 ; 127 ; 128////////////////////////////////////////////////////////////////////////////////; 129/// Set the current directory to null.; 130/// This is called from the TContext destructor. Since the destructor is; 131/// inline, we do not want to have it directly use a global variable.; 132 ; 133void TDirectory::TContext::CdNull(); 134{; 135 gDirectory = nullptr;; 136}; 137 ; 138////////////////////////////////////////////////////////////////////////////////; 139/// Destructor.; 140///; 141/// Reset the current directory to its previous state.; 142 ; 143TDirectory::TContext::~TContext(); 144{; 145 fActiveDestructor = true;; 146 if (fDirectory) {; 147 // UnregisterContext must not be virtual to allow; 148 // this to work even with fDirectory set to nullptr.; 149 (*fDirec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:3777,Safe,SafeDelete,3777,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['Safe'],['SafeDelete']
Safety,"tour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now supports vector<builtin-type>. Graphics. Fix file corruption in TTeXDump::DrawPolyMarker.; Make sure the line width used to draw #sqrt is always >=1. Release 6.04/04; Build System. Fix generation of PCH with CXX flags with spaces ROOT-7478; Implemented option ‘geocad’ with CMake making use of the OpenCASCADE software package.; Fix option ‘rpath’ for CMake and ensure that works for MacOSX 10.11. Core. Fix the location of include files in ROOTINCDIR/include instead of ROOTINCDIR ROOT-7537. Interpreter. Fix redirection ROOT-7053; Take the language and target options from the PCH ROOT-7478 ROOT-6966; Properly recover from a template instantiation failure when looking up a class in the interpreter ROOT-7462; Do not clear pending instantiations upon unloading; fixes missing symbols due to missing function bodies ROOT-7586; Speed up significantly cling’s findType and remove its memory cost in most cases.; Make sure object declared on the interpreter stack are deleted at the end of the process ROOT-7673; Resolve issues with error recovery when the transaction includes template instantiation.; Fix handling of argument that negative integers in TClingCallFunc ROOT-7684. I/O. Fix memory leak in handling of I/O customization rules ROOT-7683; Set CheckSum of StreamerInfo of user classes that have a collection proxy. Tree. Fix ROOT-6885 which affects very large TChain with friend trees.; Fix ROOT-7423 which can stop the TTreeCache from stopping the learning phase when asynchronous prefetching is enabled. TTreeReader. Fix reading of data members of type BasicType[42]; Fix support for large file ROOT-7652. Geom. Fix missing OCC header file for the version ROOT-7536. Bugs. [ROOT-6419] - ROOT-6.00",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:29114,recover,recover,29114,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['recover'],['recover']
Safety,"tr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoScaledShape&operator=(const TGeoScaledShape&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidTGeoBBox::SetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); voidSetScale(TGeoScale* s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoScaledShape.html:8374,Safe,SafetySeg,8374,root/html602/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html602/TGeoScaledShape.html,2,['Safe'],['SafetySeg']
Safety,"tr;; 5233 }; 5234 if (fAliases) {; 5235 TObject* alias = fAliases->FindObject(aliasName);; 5236 if (alias) {; 5237 return alias->GetTitle();; 5238 }; 5239 }; 5240 if (!fFriends) {; 5241 return nullptr;; 5242 }; 5243 TFriendLock lock(const_cast<TTree*>(this), kGetAlias);; 5244 TIter nextf(fFriends);; 5245 TFriendElement* fe = nullptr;; 5246 while ((fe = (TFriendElement*) nextf())) {; 5247 TTree* t = fe->GetTree();; 5248 if (t) {; 5249 const char* alias = t->GetAlias(aliasName);; 5250 if (alias) {; 5251 return alias;; 5252 }; 5253 const char* subAliasName = strstr(aliasName, fe->GetName());; 5254 if (subAliasName && (subAliasName[strlen(fe->GetName())] == '.')) {; 5255 alias = t->GetAlias(aliasName + strlen(fe->GetName()) + 1);; 5256 if (alias) {; 5257 return alias;; 5258 }; 5259 }; 5260 }; 5261 }; 5262 return nullptr;; 5263}; 5264 ; 5265namespace {; 5266/// Do a breadth first search through the implied hierarchy; 5267/// of branches.; 5268/// To avoid scanning through the list multiple time; 5269/// we also remember the 'depth-first' match.; 5270TBranch *R__GetBranch(const TObjArray &branches, const char *name); 5271{; 5272 TBranch *result = nullptr;; 5273 Int_t nb = branches.GetEntriesFast();; 5274 for (Int_t i = 0; i < nb; i++) {; 5275 TBranch* b = (TBranch*)branches.UncheckedAt(i);; 5276 if (!b); 5277 continue;; 5278 if (!strcmp(b->GetName(), name)) {; 5279 return b;; 5280 }; 5281 if (!strcmp(b->GetFullName(), name)) {; 5282 return b;; 5283 }; 5284 if (!result); 5285 result = R__GetBranch(*(b->GetListOfBranches()), name);; 5286 }; 5287 return result;; 5288}; 5289}; 5290 ; 5291////////////////////////////////////////////////////////////////////////////////; 5292/// Return pointer to the branch with the given name in this tree or its friends.; 5293/// The search is done breadth first.; 5294 ; 5295TBranch* TTree::GetBranch(const char* name); 5296{; 5297 // We already have been visited while recursively; 5298 // looking through the friends tree, let's return.; 5299 if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:210241,avoid,avoid,210241,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['avoid'],['avoid']
Safety,"trary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending of radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMark Special-point on track: position/momentum reference, daughter creation or decay (also used in VSD).; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-time by a user.; TEvePointS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:60881,safe,safe,60881,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['safe'],['safe']
Safety,"trary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending of radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> Template for a special point on a track: position/momentum reference, daughter creation or decay.; TEvePathMarkT<float> Template for a special point on a track: position/momentum reference, daughter creation or decay.; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:63199,safe,safe,63199,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,3,['safe'],['safe']
Safety,"trary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> ; TEvePathMarkT<float> ; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; range of displayed TEvePointSet's can be controlled, based on a separating quantity provided on fill-time by a user.; TEvePointSetArrayEditor Editor for TEvePointSetArray class.; TEvePointSetProj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:63630,safe,safe,63630,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['safe'],['safe']
Safety,"trary polyline with fixed line and marker attributes.; TEveLineEditor Editor for TEveLine class.; TEveLineGL GL-renderer for TEveLine class.; TEveLineProjected Projected replica of a TEveLine.; TEveListTreeItem Special llist-tree-item for Eve.; TEveMCRecCrossRef Cross-reference of sim/rec data per particle (also used in VSD).; TEveMCTrack Monte Carlo track (also used in VSD).; TEveMacro TMacro wrapper (attempting to fix issues with different macro loading and execution schemes).; TEveMagField Abstract interface to magnetic field; TEveMagFieldConst Interface to constant magnetic field.; TEveMagFieldDuo Interface to magnetic field with two different values depending on radius.; TEveManager Eve application manager.; TEveManager::TExceptionHandler Exception handler for Eve exceptions.; TEveManager::TRedrawDisabler Exception-safe EVE redraw-disabler.; TEvePad Internal TEveUtil pad class (sub-class of TPad) overriding handling of updates and 3D-viewers.; TEvePadHolder Exception-safe wrapper for temporary setting of gPad variable.; TEveParamList Eve element to store generic configuration information.; TEveParamList::BoolConfig_t ; TEveParamList::FloatConfig_t ; TEveParamList::IntConfig_t ; TEveParamListEditor GUI editor for TEveParamList.; TEvePathMarkT<double> Template for a special point on a track: position/momentum reference, daughter creation or decay.; TEvePathMarkT<float> Template for a special point on a track: position/momentum reference, daughter creation or decay.; TEvePlot3D Short description.; TEvePlot3DGL GL renderer class for TEvePlot3D.; TEvePointSelector TSelector for direct extraction of point-like data from a Tree.; TEvePointSelectorConsumer Virtual base for classes that can be filled from TTree data via the TEvePointSelector class.; TEvePointSet Set of 3D points with same marker attributes; optionally each point can be assigned an external TRef or a number of integer indices.; TEvePointSetArray Array of TEvePointSet's filled via a common point-source; r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:66951,safe,safe,66951,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['safe'],['safe']
Safety,"trate this, we will consider few examples. We will designate non-overlapping nodes as ONLY and the others MANY as in GEANT3, where this concept was introduced:; The part of a MANY node B extruding its container A will never be ""seen"" during navigation, as if B was in fact the result of the intersection of A and B.; If we have two nodes A (ONLY) and B (MANY) inside the same container, all points in the overlapping region of A and B will be designated as belonging to A.; If A an B in the above case were both MANY, points in the overlapping part will be designated to the one defined first. Both nodes must have the same medium.; The slices of a divided MANY will be as well MANY. One needs to know that navigation inside geometry parts MANY nodes is much slower. Any overlapping part can be defined based on composite shapes - this is always recommended. Replicating volumes; What can we do if our chamber contains two identical wires instead of one ? What if then we would need 1000 chambers in our detector ? Should we create 2000 wires and 1000 chamber volumes ? No, we will just need to replicate the ones that we have already created.; chamber->AddNode(wire_co, 1, new TGeoTranslation(-0.2,0,0));; chamber->AddNode(wire_co, 2, new TGeoTranslation(0.2,0,0));; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; The 2 nodes that we have created inside chamber will both point to a wire_co object, but will be completely distinct : WIRE_CO_1 and WIRE_CO_2. We will want now to place symmetrically 1000 chambers on a pad, following a pattern of 20 rows and 50 columns. One way to do this will be to replicate our chamber by positioning it 1000 times in different positions of the pad. Unfortunately, this is far from being the optimal way of doing what we want. Imagine that we would like to find out which of the 1000 chambers is containing a (x,y,z) point defined in the pad reference. You will never have to do that, since the modeller will take care of it for you, but ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume.html:9335,detect,detector,9335,doc/master/classTGeoVolume.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume.html,1,['detect'],['detector']
Safety,"tream out (read); void*fResizeContainer accessors: resize container; intfSTL_typeSTL container type; TGenCollectionProxy::MethodfSizeContainer accessors: size of container; vector<TGenCollectionProxy::TStaging*,allocator<TGenCollectionProxy::TStaging*> >fStagedOptimization: Keep staged array once they were created; type_info&fTypeinfoType information; TGenCollectionProxy::Value*fValDescriptor of the Value_type; intfValDiffOffset between two consecutive value_types (memory layout).; intfValOffsetOffset from key to value (in maps); TGenCollectionProxy::Value*fValueDescriptor of the container value type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DeleteItem(void* ptr); Delete individual item from STL container. s. Streamer(TBuffer& refBuffer). s. Streamer(TBuffer& refBuffer). else s-> Clear(). void Resize(size_t nelement). TGenCollectionProxy* Initialize() const; Late initialization of collection proxy. TGenCollectionProxy* InitializeEx(); Some hack to avoid const-ness. void CheckFunctions() const; Allow to check function pointers. TGenCollectionProxy(). TVirtualCollectionProxy* Generate() const; Virtual copy constructor. TGenCollectionProxy(const TGenCollectionProxy& copy); Copy constructor. TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); Initializing constructor. TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl). virtual ~TGenCollectionProxy(); Standard destructor. TClass * GetCollectionClass(); Return a pointer to the TClass representing the container. Int_t GetCollectionType(); Return the type of collection see TClassEdit::ESTLType. ULong_t GetIncrement(); Return the offset between two consecutive value_types (memory layout). UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objstart); Push new proxy environment. void PopProxy(); Pop old proxy environment. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenCollectionProxy.html:6265,avoid,avoid,6265,root/html530/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html530/TGenCollectionProxy.html,1,['avoid'],['avoid']
Safety,"tream>; 18 ; 19#include <cmath>; 20#include <limits>; 21#include <numeric>; 22 ; 23 ; 24// This can be protected against by defining ROOT_Math_VecTypes; 25// This is only used for the R__HAS_VECCORE define; 26// and a single VecCore function in EvalLog; 27#ifndef ROOT_Math_VecTypes; 28#include ""Types.h""; 29#endif; 30 ; 31 ; 32// for defining unused variables in the interfaces; 33// and have still them in the documentation; 34#define MATH_UNUSED(var) (void)var; 35 ; 36 ; 37namespace ROOT {; 38 ; 39 namespace Math {; 40 ; 41 /**; 42 namespace defining Utility functions needed by mathcore; 43 */; 44 namespace Util {; 45 ; 46 /**; 47 Utility function for conversion to strings; 48 */; 49 template <class T>; 50 std::string ToString(const T &val); 51 {; 52 std::ostringstream buf;; 53 buf << val;; 54 ; 55 std::string ret = buf.str();; 56 return ret;; 57 }; 58 ; 59 /// safe evaluation of log(x) with a protections against negative or zero argument to the log; 60 /// smooth linear extrapolation below function values smaller than epsilon; 61 /// (better than a simple cut-off); 62 ; 63 template<class T>; 64 inline T EvalLog(T x) {; 65 static const T epsilon = T(2.0 * std::numeric_limits<double>::min());; 66#ifdef R__HAS_VECCORE; 67 T logval = vecCore::Blend<T>(x <= epsilon, x / epsilon + std::log(epsilon) - T(1.0), std::log(x));; 68#else; 69 T logval = x <= epsilon ? x / epsilon + std::log(epsilon) - T(1.0) : std::log(x);; 70#endif; 71 return logval;; 72 }; 73 ; 74 } // end namespace Util; 75 ; 76 /// \class KahanSum; 77 /// The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors; 78 /// when adding a sequence of finite-precision floating point numbers.; 79 /// This is done by keeping a separate running compensation (a variable to accumulate small errors).; 80 ///; 81 /// ### Auto-vectorisable accumulation; 82 /// This class can internally use multiple accumulators (template parameter `N`).; 83 /// When filled from a collection that",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Util_8h_source.html:1511,safe,safe,1511,doc/master/Util_8h_source.html,https://root.cern,https://root.cern/doc/master/Util_8h_source.html,1,['safe'],['safe']
Safety,"treamerNVirtual_b);  ;  Public Member Functions inherited from TGeoTrap;  TGeoTrap ();  ;  TGeoTrap (const char *name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  TGeoTrap (Double_t dz, Double_t theta, Double_t phi);  ;  TGeoTrap (Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2);  ;  ~TGeoTrap () override;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t GetAlpha1 () const;  ; Double_t GetAlpha2 () const;  ; Double_t GetBl1 () const;  ; Double_t GetBl2 () const;  ; Double_t GetH1 () const;  ; Double_t GetH2 () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  ; Double_t GetPhi () const;  ; Double_t GetTheta () const;  ; Double_t GetTl1 () const;  ; Double_t GetTl2 () const;  ; TClass * IsA () const override;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"".",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGtra.html:3717,Safe,Safety,3717,doc/master/classTGeoGtra.html,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html,2,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"tree and increases; the amount of memory needed to read an entry, and therefore decreases; the performance. For these reasons, ROOT offers the concept of friends for trees (and chains).; We encourage you to use TTree::AddFriend rather than adding a branch manually. /*. */. A simple example with histograms and a tree*-*-*-; *-* ===========================================. This program creates :; - a one dimensional histogram; - a two dimensional histogram; - a profile histogram; - a tree. These objects are filled with some random numbers and saved on a file. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. #include ""TFile.h""; #include ""TH1.h""; #include ""TH2.h""; #include ""TProfile.h""; #include ""TRandom.h""; #include ""TTree.h"". //______________________________________________________________________________; main(int argc, char **argv); {; // Create a new ROOT binary machine independent file.; // Note that this file may contain any kind of ROOT objects, histograms,trees; // pictures, graphics objects, detector geometries, tracks, events, etc..; // This file is now becoming the current directory.; TFile hfile(""htree.root"",""RECREATE"",""Demo ROOT file with histograms & trees"");. // Create some histograms and a profile histogram; TH1F *hpx = new TH1F(""hpx"",""This is the px distribution"",100,-4,4);; TH2F *hpxpy = new TH2F(""hpxpy"",""py ps px"",40,-4,4,40,-4,4);; TProfile *hprof = new TProfile(""hprof"",""Profile of pz versus px"",100,-4,4,0,20);. // Define some simple structures; typedef struct {Float_t x,y,z;} POINT;; typedef struct {; Int_t ntrack,nseg,nvertex;; UInt_t flag;; Float_t temperature;; } EVENTN;; static POINT point;; static EVENTN eventn;. // Create a ROOT Tree; TTree *tree = new TTree(""T"",""An example of ROOT tree with a few branches"");; tree->Branch(""point"",&point,""x:y:z"");; tree->Branch(""eventn"",&eventn,""ntrack/I:nseg:nvertex:flag/i:temperature/F"");; tree->Branch(""hpx"",""TH1F"",&hpx,128000,0);. Float_t px,py,pz;; static Float_t p[3];. //-----------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:9223,detect,detector,9223,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,6,['detect'],['detector']
Safety,"tree1.root""; //You can click on the histogram icons in the right panel to draw; //them in the TreeViewer, follow the instructions in the Help.; }; 12.15 Example 2: A Tree with a C Structure; The executable script for this example is $ROOTSYS/tutorials/tree/tree2.C.In this example we show:. how to build branches from a C structure; how to make a branch with a fixed length array; how to make a branch with a variable length array; how to read selective branches; how to fill a histogram from a branch; how to use TTree::Draw to show a 3D plot. A C structure (struct) is used to build a ROOT tree. In general we discourage the use of C structures, we recommend using a class instead. However, we do support them for legacy applications written in C or FORTRAN. The example struct holds simple variables and arrays. It maps to a Geant3 common block /gctrak/.This is the definition of the common block/structure:; const Int_t MAXMEC = 30;; // PARAMETER (MAXMEC=30); // COMMON/GCTRAK/VECT(7),GETOT,GEKIN,VOUT(7); // + ,NMEC,LMEC(MAXMEC); // + ,NAMEC(MAXMEC),NSTEP; // + ,PID,DESTEP,DESTEL,SAFETY,SLENG; // + ,STEP,SNEXT,SFIELD,TOFG,GEKRAT,UPWGHT. typedef struct {; Float_t vect[7];; Float_t getot;; Float_t gekin;; Float_t vout[7];; Int_t nmec;; Int_t lmec[MAXMEC];; Int_t namec[MAXMEC];; Int_t nstep;; Int_t pid;; Float_t destep;; Float_t destel;; Float_t safety;; Float_t sleng;; Float_t step;; Float_t snext;; Float_t sfield;; Float_t tofg;; Float_t gekrat;; Float_t upwght;; } Gctrak_t;; When using Geant3, the common block is filled by Geant3 routines at each step and only the TTree::Fill method needs to be called. In this example we emulate the Geant3 step routine with the helixStep function. We also emulate the filling of the particle values. The calls to the Branch methods are the same as if Geant3 were used.; void helixStep(Float_t step, Float_t *vect, Float_t *vout); {; // extrapolate track in constant field; Float_t field = 20; // field in kilogauss; enum Evect {kX,kY,kZ,kPX,kPY,kPZ,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:560932,SAFE,SAFETY,560932,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['SAFE'],['SAFETY']
Safety,"trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); NegWeightTreatment; IgnoreNegWeightsInTraining Ignore negative weight events in the training.; DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them. MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; SkipNormalization Skip normalization at initialization, to keep expectation value of BDT output according to the fraction of events . Implements TMVA::MethodBase.; Definition at line 333 of file MethodBDT.cxx. ◆ DeclFileName(). static const char * TMVA::MethodBDT::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 305 of file MethodBDT.h. ◆ DeterminePreselectionCuts(). void TMVA::MethodBDT::DeterminePreselectio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:47542,avoid,avoided,47542,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['avoid'],['avoided']
Safety,"tries, sub-branch writes the entries themselves.; 1429 ValidateAddress();; 1430 ; 1431 //; 1432 // Silently do nothing if we have no user i/o buffer.; 1433 //; 1434 ; 1435 if (!fObject) {; 1436 return;; 1437 }; 1438 ; 1439 TVirtualCollectionProxy* proxy = GetCollectionProxy();; 1440 Int_t n = 0;; 1441 // We are in a block so the helper pops as soon as possible.; 1442 TVirtualCollectionProxy::TPushPop helper(proxy, fObject);; 1443 n = proxy->Size();; 1444 ; 1445 if (n > fMaximum) {; 1446 fMaximum = n;; 1447 }; 1448 b << n;; 1449 ; 1450 if(fSTLtype != ROOT::kSTLvector && proxy->HasPointers() && fSplitLevel > TTree::kSplitCollectionOfPointers ) {; 1451 fPtrIterators->CreateIterators(fObject, proxy);; 1452 } else {; 1453 //NOTE: this does not work for not vectors since the CreateIterators expects a TGenCollectionProxy::TStaging as its argument!; 1454 //NOTE: and those not work in general yet, since the TStaging object is neither created nor passed.; 1455 // We need to review how to avoid the need for a TStaging during the writing.; 1456 if (proxy->GetProperties() & TVirtualCollectionProxy::kIsAssociative) {; 1457 fWriteIterators->CreateIterators(fObject, proxy);; 1458 } else {; 1459 fIterators->CreateIterators(fObject, proxy);; 1460 }; 1461 }; 1462 ; 1463}; 1464 ; 1465////////////////////////////////////////////////////////////////////////////////; 1466/// Write leaves into i/o buffers for this branch.; 1467/// Case of a data member within a collection (fType == 41).; 1468 ; 1469void TBranchElement::FillLeavesCollectionSplitVectorPtrMember(TBuffer& b); 1470{; 1471 ValidateAddress();; 1472 ; 1473 //; 1474 // Silently do nothing if we have no user i/o buffer.; 1475 //; 1476 ; 1477 if (!fObject) {; 1478 return;; 1479 }; 1480 ; 1481 // FIXME: This wont work if a pointer to vector is split!; 1482 TVirtualCollectionProxy::TPushPop helper(GetCollectionProxy(), fObject);; 1483 // Note: We cannot pop the proxy here because we need it for the i/o.; 1484 TStreamerInfo* si = (TStre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:51764,avoid,avoid,51764,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['avoid'],['avoid']
Safety,"tring &server_prefix, const std::string &files_path)Configure server location which can be used for loading of custom scripts or files When THttpServer i...Definition RWebWindowsManager.cxx:178; ROOT::RWebWindowsManager::GenerateKeystatic std::string GenerateKey(int keylen=32)Static method to generate cryptographic key Parameter keylen defines length of cryptographic key in b...Definition RWebWindowsManager.cxx:250; ROOT::RWebWindowsManager::fUseSessionKeybool fUseSessionKey! is session key has to be used for data signingDefinition RWebWindowsManager.hxx:48; ROOT::RWebWindowsManager::fAssgnExecstd::unique_ptr< TExec > fAssgnExec! special exec to assign thread id via ProcessEventsDefinition RWebWindowsManager.hxx:55; ROOT::RWebWindowsManager::CreateServerbool CreateServer(bool with_http=false)Creates http server, if required - with real http engine (civetweb) One could configure concrete HTTP...Definition RWebWindowsManager.cxx:430; ROOT::RWebWindowsManager::GetLaunchTmoutfloat GetLaunchTmout() constReturns timeout for launching new browser process.Definition RWebWindowsManager.hxx:66; ROOT::RWebWindowsManager::SetUseConnectionKeystatic void SetUseConnectionKey(bool on=true)Enable or disable usage of connection key (default on) If enabled, each connection (and reconnection)...Definition RWebWindowsManager.cxx:168; ROOT::RWebWindowsManager::fExternalProcessEventsbool fExternalProcessEvents! indicate that there are external process events engineDefinition RWebWindowsManager.hxx:54; ROOT::RWebWindowsManager::fMutexstd::recursive_mutex fMutex! main mutex, used for window creationsDefinition RWebWindowsManager.hxx:49; ROOT::RWebWindowsManager::SetDeleteCallbackvoid SetDeleteCallback(WebWindowDeleteCallback_t func)Assign show callback which can catch window showing, used by RBrowser.Definition RWebWindowsManager.hxx:98; ROOT::RWebWindowsManager::RWebWindowsManagerRWebWindowsManager()window manager constructor Required here for correct usage of unique_ptr<THttpServer>Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html:7179,timeout,timeout,7179,doc/master/RWebWindowsManager_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindowsManager_8hxx_source.html,1,['timeout'],['timeout']
Safety,"tring(total->GetName());; 271 SetName(sname.c_str());; 272 SetTitle(pass->GetTitle());; 273 ; 274 //copy style from pass; 275 pass->TAttLine::Copy(*this);; 276 pass->TAttFill::Copy(*this);; 277 pass->TAttMarker::Copy(*this);; 278 ; 279 Divide(pass, total, option);; 280}; 281 ; 282 ; 283////////////////////////////////////////////////////////////////////////////////; 284/// TGraphAsymmErrors constructor reading input from filename; 285/// filename is assumed to contain at least 2 columns of numbers; 286///; 287/// convention for format (default=`""%lg %lg %lg %lg %lg %lg""`); 288/// - format = `""%lg %lg""` read only 2 first columns into X, Y; 289/// - format = `""%lg %lg %lg %lg""` read only 4 first columns into X, Y, ELY, EHY; 290/// - format = `""%lg %lg %lg %lg %lg %lg""` read only 6 first columns into X, Y, EXL, EYH, EYL, EHY; 291///; 292/// For files separated by a specific delimiter different from `' '` and `'\\t'` (e.g. `';'` in csv files); 293/// you can avoid using `%*s` to bypass this delimiter by explicitly specify the `""option"" argument,; 294/// e.g. `option="" \\t,;""` for columns of figures separated by any of these characters `(' ', '\\t', ',', ';')`; 295/// used once `(e.g. ""1;1"")` or in a combined way `("" 1;,;; 1"")`.; 296/// Note in that case, the instantiation is about 2 times slower.; 297/// In case a delimiter is specified, the format `""%lg %lg %lg""` will read X,Y,EX.; 298 ; 299TGraphAsymmErrors::TGraphAsymmErrors(const char *filename, const char *format, Option_t *option); 300 : TGraph(100); 301{; 302 if (!CtorAllocate()) return;; 303 Double_t x, y, exl, exh, eyl, eyh;; 304 TString fname = filename;; 305 gSystem->ExpandPathName(fname);; 306 std::ifstream infile(fname.Data());; 307 if (!infile.good()) {; 308 MakeZombie();; 309 Error(""TGraphAsymmErrors"", ""Cannot open file: %s, TGraphAsymmErrors is Zombie"", filename);; 310 fNpoints = 0;; 311 return;; 312 }; 313 std::string line;; 314 Int_t np = 0;; 315 ; 316 if (strcmp(option, """") == 0) { // No delimiters sp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:10113,avoid,avoid,10113,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['avoid'],['avoid']
Safety,"tringTNamed::fTitleobject title; Double_tfTl1half length in x at low z and y high edge; Double_tfTl2half length in x at high z and y high edge; Double_t*TGeoArb8::fTwist! [4] tangents of twist angles ; Double_tTGeoArb8::fXY[8][2]list of vertices. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrap(); Default ctor. TGeoTrap(Double_t dz, Double_t theta, Double_t phi); Constructor providing just a range in Z, theta and phi. TGeoTrap(Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); Normal constructor. TGeoTrap(const char* name, Double_t dz, Double_t theta, Double_t phi, Double_t h1, Double_t bl1, Double_t tl1, Double_t alpha1, Double_t h2, Double_t bl2, Double_t tl2, Double_t alpha2); Constructor with name. ~TGeoTrap(); destructor. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the trapezoid. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the trapezoid. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this trapezoid shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Only Z divisions; are supported. For Z divisions just return the pointer to the volume to be; divided. In case a wrong division axis is supplied, returns pointer to; volume that was divided. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const; In case shape has some negative parameters, these have to be computed; in order to fit the mother. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrap.html:15822,safe,safe,15822,root/html534/TGeoTrap.html,https://root.cern,https://root.cern/root/html534/TGeoTrap.html,1,['safe'],['safe']
Safety,"tru.h. ◆ GetYOffset(). Double_t TGeoXtru::GetYOffset ; (; Int_t ; i); const. inline . Definition at line 100 of file TGeoXtru.h. ◆ GetZ() [1/2]. Double_t * TGeoXtru::GetZ ; (; ); const. inline . Definition at line 102 of file TGeoXtru.h. ◆ GetZ() [2/2]. Double_t TGeoXtru::GetZ ; (; Int_t ; ipl); const. ◆ InspectShape(). void TGeoXtru::InspectShape ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ IsA(). TClass * TGeoXtru::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoBBox.; Definition at line 121 of file TGeoXtru.h. ◆ IsPointInsidePlane(). Bool_t TGeoXtru::IsPointInsidePlane ; (; const Double_t * ; point, . Double_t * ; vert, . Double_t * ; norm . ); const. protected . ◆ MakeBuffer3D(). TBuffer3D * TGeoXtru::MakeBuffer3D ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ operator=(). TGeoXtru & TGeoXtru::operator= ; (; const TGeoXtru & ; ). protecteddelete . ◆ Safety(). Double_t TGeoXtru::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Safety_v(). void TGeoXtru::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SafetyToSector(). Double_t TGeoXtru::SafetyToSector ; (; const Double_t * ; point, . Int_t ; iz, . Double_t ; safmin, . Bool_t ; in . ). protected . ◆ SavePrimitive(). void TGeoXtru::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetCurrentVertices(). void TGeoXtru::SetCurrentVertices ; (; Double_t ; x0, . Double_t ; y0, . Double_t ; scale . ). ◆ SetCurrentZ(). void TGeoXtru::SetCurrentZ ; (; Double_t ; z, . Int_t ; iz . ). ◆ SetDimensions(). void TGeoXtru::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoXtru.html:29986,Safe,Safety,29986,doc/master/classTGeoXtru.html,https://root.cern,https://root.cern/doc/master/classTGeoXtru.html,1,['Safe'],['Safety']
Safety,"tructor. void ComputeBBox(); compute bounding box of the sphere. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. void ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this cone. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); Compute distance from inside point to surface of the cone (static); Boundary safe algorithm. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the cone; Boundary safe algorithm. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); Compute distance from outside point to surface of the tube; Boundary safe algorithm.; compute distance to Z planes. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube; compute safe radius. void DistToCone(Double_t* point, Double_t* dir, Double_t dz, Double_t r1, Double_t r2, Double_t& b, Double_t& delta); Static method to compute distance to a conical surface with :; - r1, z1 - radius and Z position of lower base; - r2, z2 - radius and Z position of upper base. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this cone shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Returns poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCone.html:14159,safe,safe,14159,root/html528/TGeoCone.html,https://root.cern,https://root.cern/root/html528/TGeoCone.html,3,['safe'],['safe']
Safety,"true distribution ; of variable . If is one of the ; species present in the data sample, the weight for this species is defined by:. (2). where . is the covariance matrix resulting from the Likelihood maximization.; This matrix can be used directly from the fit, but this is numerically; less accurate than the direct computation:. (3). The distribution of the control variable  obtained by histogramming the weighted events reproduces, on average, the true distribution ; . The class TSPlot allows to reconstruct the true distribution ; of a control variable  for each of the ; species from the sole knowledge of the PDFs of the discriminating variables . The plots obtained thanks to the TSPlot class are called ; . Some properties and checks. Beside reproducing the true distribution, ; bear remarkable properties:. Each -distribution is properly normalized:. (4). For any event:. (5). That is to say that, summing up the ; ; , one recovers the data sample distribution in , and summing up the number of events entering in a ; for a given species, one recovers the yield of the species, as provided by the fit. The property 4 is implemented in the TSPlot class as a check. the sum of the statistical uncertainties per bin. (6). reproduces the statistical uncertainty on the yield , as provided by the fit: ; .; Because of that and since the determination of the yields is optimal; when obtained using a Likelihood fit, one can conclude that the; technique is itself an optimal method to reconstruct distributions of control variables. Different steps followed by TSPlot. A maximum Likelihood fit is performed to obtain the yields of the various species. ; The fit relies on discriminating variables  uncorrelated with a control variable :; the later is therefore totally absent from the fit. . The weights are calculated using Eq. (2) where the covariance matrix is taken from Minuit. Histograms of  are filled by weighting the events with . . Error bars per bin are given by Eq. (6). . The ; repro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:3723,recover,recovers,3723,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,8,['recover'],['recovers']
Safety,"true distribution ; of variable . If is one of the ; species present in the data sample, the weight for this species is defined by:. (2). where . is the covariance matrix resulting from the Likelihood maximization.; This matrix can be used directly from the fit, but this is numerically; less accurate than the direct computation:. (3). The distribution of the control variable  obtained by histogramming the weighted events reproduces, on average, the true distribution ; . The class TSPlot allows to reconstruct the true distribution ; of a control variable  for each of the ; species from the sole knowledge of the PDFs of the discriminating variables . The plots obtained thanks to the TSPlot class are called ; . Some properties and checks. Beside reproducing the true distribution, ; bear remarkable properties:. Each -distribution is properly normalized:. (4). For any event:. (5). That is to say that, summing up the ; ; , one recovers the data sample distribution in , and summing up the number of events entering in a ; for a given species, one recovers the yield of the species, as provided by the fit. The property 4 is implemented in the TSPlot class as a check. the sum of the statistical uncertainties per bin. (6). reproduces the statistical uncertainty on the yield , as provided by the fit: ; .; Because of that and since the determination of the yields is optimal; when obtained using a Likelihood fit, one can conclude that the; technique is itself an optimal method to reconstruct distributions of control variables. Different steps followed by TSPlot. A maximum Likelihood fit is performed to obtain the yields of the various species.; The fit relies on discriminating variables  uncorrelated with a control variable :; the later is therefore totally absent from the fit. The weights are calculated using Eq. (2) where the covariance matrix is taken from Minuit. Histograms of  are filled by weighting the events with . Error bars per bin are given by Eq. (6). The ; reproduce th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPlot.html:3746,recover,recovers,3746,root/html602/TSPlot.html,https://root.cern,https://root.cern/root/html602/TSPlot.html,4,['recover'],['recovers']
Safety,"try[basketToUnload] < iter.GetStartEntry()) {; 2015 TBasket *oldbasket = (TBasket *)fBaskets.UncheckedAt(basketToUnload);; 2016 if (oldbasket) {; 2017 oldbasket->DropBuffers();; 2018 delete oldbasket;; 2019 fBaskets.AddAt(nullptr, basketToUnload);; 2020 --fNBaskets;; 2021 }; 2022 ++basketToUnload;; 2023 }; 2024 fBaskets.SetLast(-1);; 2025 return basket;; 2026}; 2027 ; 2028////////////////////////////////////////////////////////////////////////////////; 2029/// Return the 'full' name of the branch. In particular prefix the mother's name; 2030/// when it does not end in a trailing dot and thus is not part of the branch name; 2031TString TBranch::GetFullName() const; 2032{; 2033 TBranch* mother = GetMother();; 2034 if (!mother || mother==this) {; 2035 return fName;; 2036 }; 2037 ; 2038 const auto motherName = mother->GetName();; 2039 const auto len = strlen(motherName);; 2040 if (len > 0 && (motherName[len-1] == '.')) {; 2041 return fName;; 2042 }; 2043 ; 2044 // Reserve the final size to avoid allocations; 2045 TString result{static_cast<Ssiz_t>(len + 1 + fName.Length())};; 2046 result = motherName;; 2047 result += ""."";; 2048 result += fName;; 2049 return result;; 2050}; 2051 ; 2052////////////////////////////////////////////////////////////////////////////////; 2053/// Return pointer to the 1st Leaf named name in thisBranch; 2054 ; 2055TLeaf* TBranch::GetLeaf(const char* name) const; 2056{; 2057 Int_t i;; 2058 for (i=0;i<fNleaves;i++) {; 2059 TLeaf *leaf = (TLeaf*)fLeaves.UncheckedAt(i);; 2060 if (!strcmp(leaf->GetName(),name)) return leaf;; 2061 }; 2062 return nullptr;; 2063}; 2064 ; 2065////////////////////////////////////////////////////////////////////////////////; 2066/// Get real file name; 2067 ; 2068TString TBranch::GetRealFileName() const; 2069{; 2070 if (fFileName.Length()==0) {; 2071 return fFileName;; 2072 }; 2073 TString bFileName = fFileName;; 2074 ; 2075 // check if branch file name is absolute or a URL (e.g. root://host/...); 2076 char *bname = gSystem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:74430,avoid,avoid,74430,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,1,['avoid'],['avoid']
Safety,"ts ();  Baskets associated to this branch are forced to be in memory. ;  ; void PrintCacheInfo () const;  Print the information we have about which basket is currently cached and whether they have been 'used'/'read' from the cache. ;  ; virtual void ReadBasket (TBuffer &b);  Loop on all leaves of this branch to read Basket buffer. ;  ; virtual void Refresh (TBranch *b);  Refresh this branch using new information in b This function is called by TTree::Refresh. ;  ; virtual void Reset (Option_t *option="""");  Reset a Branch. ;  ; virtual void ResetAddress ();  Reset the address of the branch. ;  ; virtual void ResetAfterMerge (TFileMergeInfo *);  Reset a Branch. ;  ; virtual void ResetReadEntry ();  ; virtual void SetAutoDelete (bool autodel=true);  Set the automatic delete bit. ;  ; virtual void SetBasketSize (Int_t buffsize);  Set the basket size The function makes sure that the basket size is greater than fEntryOffsetlen. ;  ; virtual void SetBufferAddress (TBuffer *entryBuffer);  Set address of this branch directly from a TBuffer to avoid streaming. ;  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; virtual void SetEntries (Long64_t entries);  Set the number of entries in this branch. ;  ; virtual void SetEntryOffsetLen (Int_t len, bool updateSubBranches=false);  Update the default value for the branch's fEntryOffsetLen if and only if it was already non zero (and the new value is not zero) If updateExisting is true, also update all the existing branches. ;  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchSTL.html:8143,avoid,avoid,8143,doc/master/classTBranchSTL.html,https://root.cern,https://root.cern/doc/master/classTBranchSTL.html,1,['avoid'],['avoid']
Safety,"ts having directions specified by dirs. Store output in dists. ;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  Cannot divide assemblies. ;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *mother, TGeoMatrix *mat) const override;  in case shape has some negative parameters, these has to be computed in order to fit the mother ;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  Returns numbers of vertices, segments and polygons composing the shape mesh. ;  ; Int_t GetNmeshVertices () const override;  ; void InspectShape () const override;  print shape parameters ;  ; TClass * IsA () const override;  ; Bool_t IsAssembly () const override;  ; Bool_t IsCylType () const override;  ; void NeedsBBoxRecompute ();  ; void RecomputeBoxLast ();  Recompute bounding box of the assembly after adding a node. ;  ; Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const override;  computes the closest distance from given point to this shape, according to option. ;  ; void Safety_v (const Double_t *points, const Bool_t *inside, Double_t *safe, Int_t vecsize) const override;  Compute safe distance from each of the points in the input array. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetPoints (Double_t *points) const override;  No mesh for assemblies. ;  ; void SetPoints (Float_t *points) const override;  No mesh for assemblies. ;  ; void SetSegsAndPols (TBuffer3D &buff) const override;  Fill TBuffer3D structure for segments and polygons. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoBBox;  TGeoBBox ();  ;  TGeoBBox (const char *name, Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ;  TGeoBBox (Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShapeAssembly.html:3440,Safe,Safety,3440,doc/master/classTGeoShapeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoShapeAssembly.html,1,['Safe'],['Safety']
Safety,"ts with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, remove from; the list those sockets which did not have any activity since timeout; millisecs. If timeout = 0, then reset activity timestamp on all active; sockets. This time out is typically used if GetActive() is used to see; how many remotes still need to send something. If they pass the timeout; they will be skipped and GetActive() will return 0 and the loop can be; exited. Int_t GetDeActive() const; Return number of sockets in the de-active list. Bool_t IsActive(TSocket* s) const; Check if socket 's' is in the active list. Avoids the duplication; of active list via TMonitor::GetListOfActives(). TList * GetListOfActives() const; Returns a list with all active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. TList * GetListOfDeActives() const; Returns a list with all de-active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. void Ready(TSocket* sock); Emit signal when some socket is ready. void * GetSender(); { return this; }. void Interrupt(); { fInterrupt = kTRUE; }. void ResetInterrupt(); { fInterrupt = kFALSE; }. » Author: Fons Rademakers 09/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TMonitor.h 31598 2009-12-07 15:21:47Z rdm $ » Last generated: 2010-09-23 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:13247,Avoid,Avoids,13247,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,1,['Avoid'],['Avoids']
Safety,"ts with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, remove from; the list those sockets which did not have any activity since timeout; millisecs. If timeout = 0, then reset activity timestamp on all active; sockets. This time out is typically used if GetActive() is used to see; how many remotes still need to send something. If they pass the timeout; they will be skipped and GetActive() will return 0 and the loop can be; exited. Int_t GetDeActive() const; Return number of sockets in the de-active list. Bool_t IsActive(TSocket* s) const; Check if socket 's' is in the active list. Avoids the duplication; of active list via TMonitor::GetListOfActives(). TList * GetListOfActives() const; Returns a list with all active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. TList * GetListOfDeActives() const; Returns a list with all de-active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. void Ready(TSocket* sock); Emit signal when some socket is ready. void * GetSender(); { return this; }. void Interrupt(); { fInterrupt = kTRUE; }. void ResetInterrupt(); { fInterrupt = kFALSE; }. » Author: Fons Rademakers 09/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TMonitor.h 31598 2009-12-07 15:21:47Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonitor.html:13316,Avoid,Avoids,13316,root/html530/TMonitor.html,https://root.cern,https://root.cern/root/html530/TMonitor.html,1,['Avoid'],['Avoids']
Safety,"ts with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, remove from; the list those sockets which did not have any activity since timeout; millisecs. If timeout = 0, then reset activity timestamp on all active; sockets. This time out is typically used if GetActive() is used to see; how many remotes still need to send something. If they pass the timeout; they will be skipped and GetActive() will return 0 and the loop can be; exited. Int_t GetDeActive() const; Return number of sockets in the de-active list. Bool_t IsActive(TSocket* s) const; Check if socket 's' is in the active list. Avoids the duplication; of active list via TMonitor::GetListOfActives(). TList * GetListOfActives() const; Returns a list with all active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. TList * GetListOfDeActives() const; Returns a list with all de-active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. void Ready(TSocket* sock); Emit signal when some socket is ready. void * GetSender(); { return this; }. void Interrupt(); { fInterrupt = kTRUE; }. void ResetInterrupt(); { fInterrupt = kFALSE; }. » Author: Fons Rademakers 09/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TMonitor.h 31598 2009-12-07 15:21:47Z rdm $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMonitor.html:13316,Avoid,Avoids,13316,root/html532/TMonitor.html,https://root.cern,https://root.cern/root/html532/TMonitor.html,1,['Avoid'],['Avoids']
Safety,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 525 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/namespaceROOT.html:21280,safe,safe,21280,doc/v624/namespaceROOT.html,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html,1,['safe'],['safe']
Safety,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 526 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v622/namespaceROOT.html:21241,safe,safe,21241,doc/v622/namespaceROOT.html,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html,1,['safe'],['safe']
Safety,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 579 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:20551,safe,safe,20551,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,1,['safe'],['safe']
Safety,"ts writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. ; Definition at line 580 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enables the global mutex to make ROOT thread safe/aware. ; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type system classes, e.g. TClass and TEnum; concurrent calls to the interpreter through gInterpreter; concurrent loading of ROOT plug-ins. In addition, gDirectory, gFile and gPad become a thread-local variable. In all threads, gDirectory defaults to gROOT, a singleton which supports thread-safe insertion and deletion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableTh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v620/namespaceROOT.html:20643,safe,safe,20643,doc/v620/namespaceROOT.html,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html,1,['safe'],['safe']
Safety,"ts) const; Mesh points for scaled shapes. void SetPoints(Float_t* points) const; Mesh points for scaled shapes. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoScaledShape(); methods; constructors. Int_t GetNmeshVertices() const; {return fShape->GetNmeshVertices();}. TGeoShape * GetShape() const; {return fShape;}. TGeoScale * GetScale() const; {return fScale;}. Bool_t IsCylType() const; {return fShape->IsCylType();}. void SetScale(TGeoScale* scale); {fScale = scale;}. » Author: Andrei Gheata 26/09/05 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoScaledShape.html:16156,safe,safe,16156,root/html534/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html534/TGeoScaledShape.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"ts) const; Mesh points for scaled shapes. void SetPoints(Float_t* points) const; Mesh points for scaled shapes. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoScaledShape(); methods; constructors. Int_t GetNmeshVertices() const; {return fShape->GetNmeshVertices();}. TGeoShape * GetShape() const; {return fShape;}. TGeoScale * GetScale() const; {return fScale;}. Bool_t IsCylType() const; {return fShape->IsCylType();}. void SetScale(TGeoScale* scale); {fScale = scale;}. » Author: Andrei Gheata 26/09/05 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoScaledShape.html:17910,safe,safe,17910,root/html604/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html604/TGeoScaledShape.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"ts) const; Mesh points for scaled shapes. void SetPoints(Float_t* points) const; Mesh points for scaled shapes. void Contains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; Check the inside status for each of the points in the array.; Input: Array of point coordinates + vector size; Output: Array of Booleans for the inside of each point. void ComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); Compute the normal for an array o points so that norm.dot.dir is positive; Input: Arrays of point coordinates and directions + vector size; Output: Array of normal directions. void DistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void DistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Compute distance from array of input points having directions specisied by dirs. Store output in dists. void Safety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; Compute safe distance from each of the points in the input array.; Input: Array of point coordinates, array of statuses for these points, size of the arrays; Output: Safety values. TGeoScaledShape(); methods; constructors. Int_t GetNmeshVertices() const; {return fShape->GetNmeshVertices();}. TGeoShape * GetShape() const; {return fShape;}. TGeoScale * GetScale() const; {return fScale;}. Bool_t IsCylType() const; {return fShape->IsCylType();}. void SetScale(TGeoScale* scale); {fScale = scale;}. » Author: Andrei Gheata 26/09/05 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoScaledShape.html:17910,safe,safe,17910,root/html602/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html602/TGeoScaledShape.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"ts::HypoTestResult Class ReferenceRooFit » RooStats. ; HypoTestResult is a base class for results from hypothesis tests. ; Any tool inheriting from HypoTestCalculator can return a HypoTestResult. As such, it stores a p-value for the null-hypothesis (eg. background-only) and an alternate hypothesis (eg. signal+background). The p-values can also be transformed into confidence levels ( \(CL_{b}\), \(CL_{s+b}\)) in a trivial way. The ratio of the \(CL_{s+b}\) to \(CL_{b}\) is often called \(CL_{s}\), and is considered useful, though it is not a probability. Finally, the p-value of the null can be transformed into a number of equivalent Gaussian sigma using the Significance method.; The p-value of the null for a given test statistic is rigorously defined and this is the starting point for the following conventions. Conventions used in this class; The p-value for the null and alternate are on the same side of the observed value of the test statistic. This is the more standard convention and avoids confusion when doing inverted tests.; For exclusion, we also want the formula \(CL_{s} = CL_{s+b} / CL_{b}\) to hold which therefore defines our conventions for \(CL_{s+b}\) and \(CL_{b}\). \(CL_{s}\) was specifically invented for exclusion and therefore all quantities need be related through the assignments as they are for exclusion: \(CL_{s+b} = p_{s+b}\); \(CL_{b} = p_{b}\). This is derived by considering the scenarios of a powerful and not powerful inverted test, where for the not so powerful test, \(CL_{s}\) must be close to one.; For results of Hypothesis tests, \(CL_{s}\) has no similar direct interpretation as for exclusion and can be larger than one. ; Definition at line 22 of file HypoTestResult.h. Public Member Functions;  HypoTestResult (const char *name, double nullp, double altp);  constructor from name, null and alternate p values ;  ;  HypoTestResult (const char *name=nullptr);  default constructor ;  ;  HypoTestResult (const HypoTestResult &other);  copy construc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html:1295,avoid,avoids,1295,doc/master/classRooStats_1_1HypoTestResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestResult.html,1,['avoid'],['avoids']
Safety,"tsExpandY; specifies the frame to be expanded up to the height of the container frame. If the container frame is a horizontal frame - it will fit the whole height. If the container frame is a vertical frame - after the arrangement of all frames the available “free” height space is shared between the frames having this hint. kLHintsNormal; = kLHintsLeft | kLHintsTop - default hints. Layout policy:; Child frames never modify their container frame. The container frame can (or cannot) adapt its size in the layout process. It can show all or a part of its frames. Every TGFrame object has a default minimum size (1, 1) assured by TGWindow.; 25.7 Event Processing: Signals and Slots; Event handling covers the interaction between different objects and between the user and the objects in an application. There are two general ways for the user to interact with an application: the keyboard and the mouse. The Graphical User Interface is as a bridge between the user and the program - it provides methods to detect the user actions and instruments that do something as a reaction of these actions. The user communicates with an application through the window system. The window system reports interaction events to the application. The application in turn forwards them to the currently active window. The objects/widgets receive the events and react to them according to the application functionality. The signals/slot communication mechanism is an advanced object communication concept; it largely replaces the concept of callback functions to handle actions in GUI’s. Signals and slots are just like any object-oriented methods implemented in C++. The objects are the instances of classes that don’t know anything about each other. They interact and allow method calls of other object’s methods. The idea is simple: any object can send out (emit) a signal in certain situations saying that something happened. This is all it does to communicate and it does not know whether anything is interested i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1162802,detect,detect,1162802,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['detect'],['detect']
Safety,"tside. private . flag that next geometric step will exit current volume ; Definition at line 68 of file TGeoNavigator.h. ◆ fIsSameLocation. Bool_t TGeoNavigator::fIsSameLocation. private . flag that current point is on some boundary ; Definition at line 70 of file TGeoNavigator.h. ◆ fIsStepEntering. Bool_t TGeoNavigator::fIsStepEntering. private . flag that current track is about to leave current node ; Definition at line 66 of file TGeoNavigator.h. ◆ fIsStepExiting. Bool_t TGeoNavigator::fIsStepExiting. private . flag that next geometric step will enter new volume ; Definition at line 67 of file TGeoNavigator.h. ◆ fLastNode. TGeoNode* TGeoNavigator::fLastNode. private . top physical node ; Definition at line 77 of file TGeoNavigator.h. ◆ fLastPoint. Double_t TGeoNavigator::fLastPoint[3]. private . current direction ; Definition at line 51 of file TGeoNavigator.h. ◆ fLastPWSafety. Double_t TGeoNavigator::fLastPWSafety {-1}. private . last point for which parallel world safety was ""evaluated"" ; Definition at line 53 of file TGeoNavigator.h. ◆ fLastPWSaftyPnt. Double_t TGeoNavigator::fLastPWSaftyPnt[3]. private . last point for which safety was computed ; Definition at line 52 of file TGeoNavigator.h. ◆ fLastSafety. Double_t TGeoNavigator::fLastSafety. private . safety radius from current point ; Definition at line 45 of file TGeoNavigator.h. ◆ fLevel. Int_t TGeoNavigator::fLevel. private . thread id for this navigator ; Definition at line 55 of file TGeoNavigator.h. ◆ fNextDaughterIndex. Int_t TGeoNavigator::fNextDaughterIndex. private . number of overlapping nodes on current branch ; Definition at line 57 of file TGeoNavigator.h. ◆ fNextNode. TGeoNode* TGeoNavigator::fNextNode. private . last searched node ; Definition at line 78 of file TGeoNavigator.h. ◆ fNmany. Int_t TGeoNavigator::fNmany. private . current geometry level; ; Definition at line 56 of file TGeoNavigator.h. ◆ fNormal. Double_t TGeoNavigator::fNormal[3]. private . last computed safety radius ; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:48868,safe,safety,48868,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safety']
Safety,"ttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf801_mcstudyDefinition rf801_mcstudy.py:1; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 990; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 980; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 970; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 960; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 950; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-797.721) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.716236 a1=-0.675686 mean=5.04367 nbkg=115.661 nsig=155.327 sig1frac=0.880121; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 940; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 930; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-867.289) to force MIGRAD to back out of this region. Error log follows.; P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:10453,safe,safe,10453,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,1,['safe'],['safe']
Safety,"tten for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Tue Jun 30 14:30:53 2015 » Last generated: 2015-06-30 14:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgSet.html:24015,abort,abort,24015,root/html602/RooArgSet.html,https://root.cern,https://root.cern/root/html602/RooArgSet.html,1,['abort'],['abort']
Safety,"tten for each element contained in the form; <argName> = <argValue>. The <argValue> part of each element is written by the arguments'; writeToStream() function. Bool_t readFromStream(istream& is, Bool_t compact, const char* flagReadAtt, const char* section, Bool_t verbose = kFALSE); Read the contents of the argset in ASCII form from given stream. The stream is read to end-of-file and each line is assumed to be; of the form. <argName> = <argValue>. Lines starting with argNames not matching any element in the list; will be ignored with a warning message. In addition limited C++ style; preprocessing and flow control is provided. The following constructions; are recognized:. > #include ""include.file"". Include given file, recursive inclusion OK. > if (<boolean_expression>); > <name> = <value>; > ....; > else if (<boolean_expression>). > else. > endif. All expressions are evaluated by RooFormula, and may involve any of; the sets variables. > echo <Message>. Print console message while reading from stream. > abort. Force termination of read sequence with error status. The value of each argument is read by the arguments readFromStream; function. Bool_t isInRange(const char* rangeSpec). TObject* clone(const char* newname) const; { return new RooArgSet(*this,newname); }. TObject* create(const char* newname) const; { return new RooArgSet(newname); }. RooArgSet& operator=(const RooArgSet& other); { RooAbsCollection::operator=(other) ; return *this ;}. Bool_t add(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t addOwned(RooAbsArg& var, Bool_t silent = kFALSE). RooAbsArg * addClone(const RooAbsArg& var, Bool_t silent = kFALSE). Bool_t readFromStream(istream& is, Bool_t compact, Bool_t verbose = kFALSE); I/O streaming interface (machine readable). » Last changed: Tue Mar 10 17:14:27 2015 » Last generated: 2015-03-10 17:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooArgSet.html:22763,abort,abort,22763,root/html534/RooArgSet.html,https://root.cern,https://root.cern/root/html534/RooArgSet.html,1,['abort'],['abort']
Safety,"ttings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; cout << ""Error opening file"" << endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile::Recover 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced objects of the file being closed; will not be referenced again, it is possible to minimize the size; of the TProcessID data structures in memory by forcing a delete of; the unused TProcessID. TKey* CreateKey(TDirectory* mother, const TObject* obj, const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFile.html:27042,recover,recovery,27042,root/html530/TFile.html,https://root.cern,https://root.cern/root/html530/TFile.html,4,"['Recover', 'recover']","['Recover', 'recovery']"
Safety,"tual . This function is called at the first entry of a new tree in a chain. ; Reimplemented from TSelector.; Definition at line 1154 of file TSelectorDraw.cxx. ◆ operator=(). TSelectorDraw & TSelectorDraw::operator= ; (; const TSelectorDraw & ; ). private . ◆ Process(). bool TSelectorDraw::Process ; (; Long64_t ; ). inlineoverridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented from TSelector.; Definition at line 111 of file TSelectorDraw.h. ◆ ProcessFill(). void TSelectorDraw::ProcessFill ; (; Long64_t ; entry). overridevirtual . Called in the entry loop for all entries accepted by Select. ; Reimplemented from TSelector.; Definition at line 1169 of file TSelectorDraw.cxx. ◆ ProcessFillMultiple(). void TSelectorDraw::ProcessFillMultiple ; (; Long64_t ; entry). virtual . Called in the entry loop for all entries accepted by Select. ; Complex case with multiplicity. ; Definition at line 1206 of file TSelectorDraw.cxx. ◆ ProcessFillObject(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:24819,Abort,Abort,24819,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['Abort'],['Abort']
Safety,"tual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); Double_t&Phi1(); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); Double_t&Rmax(Int_t ipl); Double_t&Rmin(Int_t ipl); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); Double_tSafetyToSegment(Double_t* point, Int_t ipl, Bool_t in = kTRUE, Double_t safmin = TGeoShape::Big()) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPcon.html:8168,Safe,SafetyPhi,8168,root/html530/TGeoPcon.html,https://root.cern,https://root.cern/root/html530/TGeoPcon.html,2,['Safe'],['SafetyPhi']
Safety,"tual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoConeSeg&operator=(const TGeoConeSeg&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tSafetyS(const Double_t* point, Bool_t in, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidTGeoCone::SetConeDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); voidSetConsDimensions(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoConeSeg.html:9572,safe,safe,9572,root/html602/TGeoConeSeg.html,https://root.cern,https://root.cern/root/html602/TGeoConeSeg.html,2,['safe'],['safe']
Safety,"tual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoTubeSeg&operator=(const TGeoTubeSeg&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tSafetyS(const Double_t* point, Bool_t in, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Int_t skipz = 0); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTubeSeg.html:9706,safe,safe,9706,root/html602/TGeoTubeSeg.html,https://root.cern,https://root.cern/root/html602/TGeoTubeSeg.html,2,['safe'],['safe']
Safety,"tual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; Double_tDaxis(Double_t* pt, Double_t* dir, Double_t t) const; Double_tDDaxis(Double_t* pt, Double_t* dir, Double_t t) const; Double_tDDDaxis(Double_t* pt, Double_t* dir, Double_t t) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoTorus.html:2254,safe,safe,2254,root/html528/TGeoTorus.html,https://root.cern,https://root.cern/root/html528/TGeoTorus.html,3,['safe'],['safe']
Safety,"tual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; Double_tDistToParaboloid(const Double_t* point, const Double_t* dir, Bool_t in) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoParaboloid.html:2771,safe,safe,2771,root/html534/TGeoParaboloid.html,https://root.cern,https://root.cern/root/html534/TGeoParaboloid.html,3,['safe'],['safe']
Safety,"tual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tDistToSphere(const Double_t* point, const Double_t* dir, Double_t rsph, Bool_t check = kTRUE, Bool_t firstcross = kTRUE) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoSphere.html:2557,safe,safe,2557,root/html534/TGeoSphere.html,https://root.cern,https://root.cern/root/html534/TGeoSphere.html,3,['safe'],['safe']
Safety,"tual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromInside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHalfSpace.html:2334,safe,safe,2334,root/html534/TGeoHalfSpace.html,https://root.cern,https://root.cern/root/html534/TGeoHalfSpace.html,9,['safe'],['safe']
Safety,"tual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTGeoPcon::DefineSection(Int_t snum, Double_t z, Double_t rmin, Double_t rmax); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tTGeoPcon::DistToSegZ(Double_t* point, Double_t* dir, Int_t& iz, Double_t c1, Double_t s1, Double_t c2, Double_t s2, Double_t cfio, Double_t sfio, Double_t cdfi) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Double_t&TGeoPcon::Dphi(); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPgon.html:2424,safe,safe,2424,root/html532/TGeoPgon.html,https://root.cern,https://root.cern/root/html532/TGeoPgon.html,1,['safe'],['safe']
Safety,"tual void SetMarkerColorAlpha (Color_t mcolor, Float_t malpha);  Set a transparent marker color. ;  ; virtual void SetMarkerSize (Size_t msize=1);  Set the marker size. ;  ; virtual void SetMarkerStyle (Style_t mstyle=1);  Set the marker style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF2; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TF1; static void AbsValue (Bool_t reject=kTRUE);  Static function: set the fgAbsValue flag. ;  ; static void CalcGaussLegendreSamplingPoints (Int_t num, Double_t *x, Double_t *w, Double_t eps=3.0e-11);  Type safe interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF3.html:42456,safe,safe,42456,doc/master/classTF3.html,https://root.cern,https://root.cern/doc/master/classTF3.html,1,['safe'],['safe']
Safety,"tup operations.; 2944 /// It must reset the state of the helper to the expected state at the beginning of the event loop: the same helper,; 2945 /// or copies of it, might be used for multiple event loops (e.g. in the presence of systematic variations).; 2946 /// * `void InitTask(TTreeReader *, unsigned int slot)`: each working thread shall call this method during the event; 2947 /// loop, before processing a batch of entries. The pointer passed as argument, if not null, will point to the TTreeReader; 2948 /// that RDataFrame has set up to read the task's batch of entries. It is passed to the helper to allow certain advanced optimizations; 2949 /// it should not usually serve any purpose for the Helper. This method is often no-op for simple helpers.; 2950 /// * `void Exec(unsigned int slot, ColumnTypes...columnValues)`: each working thread shall call this method; 2951 /// during the event-loop, possibly concurrently. No two threads will ever call Exec with the same 'slot' value:; 2952 /// this parameter is there to facilitate writing thread-safe helpers. The other arguments will be the values of; 2953 /// the requested columns for the particular entry being processed.; 2954 /// * `void Finalize()`: this method is called at the end of the event loop. Commonly used to finalize the contents of the result.; 2955 /// * `std::string GetActionName()`: it returns a string identifier for this type of action that RDataFrame will use in; 2956 /// diagnostics, SaveGraph(), etc.; 2957 ///; 2958 /// ### Optional methods; 2959 ///; 2960 /// If these methods are implemented they enable extra functionality as per the description below.; 2961 ///; 2962 /// * `Result_t &PartialUpdate(unsigned int slot)`: if present, it must return the value of the partial result of this action for the given 'slot'.; 2963 /// Different threads might call this method concurrently, but will do so with different 'slot' numbers.; 2964 /// RDataFrame leverages this method to implement RResultPtr::OnPartialR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:167188,safe,safe,167188,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['safe'],['safe']
Safety,"turn the TGButton field of the ToolBarData_t structure is filled in (if the icon pixmap was valid). The first parameter is the window to which the button messages will be sent. Lastly, we create an object of class TGHorizontal3DLine - a horizontal 3D line. It will separate the toolbar from the menu bar because the layout hints we define as kLHintsTop | kLHintsExpandX.; It is user friendly to allow the possibility for the tool bar to be turned on or off (via a menu). If you use a single tool bar, it should fill the complete width of its parent. When using more than one, you should also think about setting the bar size to the end of the most right button. This way other bars can be displayed in the same row below the menu bar.; Tool bar buttons should have equal size, meaningful and unique icons, and short meaningful tool tip text. The related buttons should be grouped together by frequency or sequence of use, or importance. Potentially destructive buttons must be separated from them to avoid accidental activation and potentially catastrophic results. Temporarily not available items should be displayed grayed out.; 25.8.6 List Boxes; The purpose of a list box is to display a collection of items from which single or multiple selection can be made. It is always visible, having a scroll bar when the displayed area is not enough to show all items. The choices may be mutually exclusive (a list box with single selection) or not mutually exclusive (a list box with multiple selection). The proper usage of the list boxes is for selecting values, or objects, or setting attributes. You have to create them to display 4 to 8 choices at one time (3 is a required minimum in case of lack of screen space). The list should contain not more than 40 items accessible by scrolling view (vertical scroll bar). If more are required, you should provide a method for using search criteria or scoping the options. The best list boxes use is for textual data or choices. They should be wide enough to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1198778,avoid,avoid,1198778,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avoid'],['avoid']
Safety,"turn the current value:; the value of the PDF associated with the current index category state. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events: If the index is in nset,; then return the sum of the expected events of all components,; otherwise return the number of expected events of the PDF; associated with the current index category state. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const; Forward determination of analytical integration capabilities to component p.d.f.s; A unique code is assigned to the combined integration capabilities of all associated; p.d.f.s. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration defined by given code. RooPlot* plotOn(RooPlot* frame, RooLinkedList& cmdList) const; Back-end for plotOn() implementation on RooSimultaneous which; needs special handling because a RooSimultaneous PDF cannot; project out its index category via integration, plotOn() will; abort if this is requested without providing a projection dataset. RooPlot* plotOn(RooPlot* frame, Option_t* drawOptions, Double_t scaleFactor = 1.0, RooAbsReal::ScaleType stype = Relative, const RooAbsData* projData = 0, const RooArgSet* projSet = 0, Double_t precision = 1e-3, Bool_t shiftToZero = kFALSE, const RooArgSet* projDataSet = 0, Double_t rangeLo = 0, Double_t rangeHi = 0, RooCurve::WingMode wmode = RooCurve::Extended) const; OBSOLETE -- Retained for backward compatibility. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. Needed here because a RooSimultaneous; works like a RooAddPdf when plotted. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:43792,abort,abort,43792,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['abort'],['abort']
Safety,"turning the final values to the user.; 900There are no guarantees on the order in which threads will process the batches of entries.; 901In particular, note that this means that, for multi-thread event loops, there is no; 902guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 903 ; 904\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 905a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 906~~~{.cpp}; 907ROOT::EnableImplicitMT(i); 908~~~; 909replacing `i` with the number of CPUs/slots that were allocated for this job.; 910 ; 911### Thread-safety of user-defined expressions; 912RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 913User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 914will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 915 ; 916Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 917expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 918which eliminates all risks of race conditions.; 919 ; 920In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 921offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:51439,safe,safety,51439,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['safe'],['safety']
Safety,"turning the final values to the user.; 940There are no guarantees on the order in which threads will process the batches of entries.; 941In particular, note that this means that, for multi-thread event loops, there is no; 942guarantee on the order in which Snapshot() will _write_ entries: they could be scrambled with respect to the input dataset. The values of the special `rdfentry_` column will also not correspond to the entry numbers in the input dataset (e.g. TChain) in multi-thread runs.; 943 ; 944\warning By default, RDataFrame will use as many threads as the hardware supports, using up **all** the resources on; 945a machine. This might be undesirable on shared computing resources such as a batch cluster. Therefore, when running on shared computing resources, use; 946~~~{.cpp}; 947ROOT::EnableImplicitMT(i); 948~~~; 949replacing `i` with the number of CPUs/slots that were allocated for this job.; 950 ; 951### Thread-safety of user-defined expressions; 952RDataFrame operations such as Histo1D() or Snapshot() are guaranteed to work correctly in multi-thread event loops.; 953User-defined expressions, such as strings or lambdas passed to Filter(), Define(), Foreach(), Reduce() or Aggregate(); 954will have to be thread-safe, i.e. it should be possible to call them concurrently from different threads.; 955 ; 956Note that simple Filter() and Define() transformations will inherently satisfy this requirement: Filter() / Define(); 957expressions will often be *pure* in the functional programming sense (no side-effects, no dependency on external state),; 958which eliminates all risks of race conditions.; 959 ; 960In order to facilitate writing of thread-safe operations, some RDataFrame features such as Foreach(), Define() or \link ROOT::RDF::RResultPtr::OnPartialResult OnPartialResult()\endlink; 961offer thread-aware counterparts (ForeachSlot(), DefineSlot(), \link ROOT::RDF::RResultPtr::OnPartialResultSlot OnPartialResultSlot()\endlink): their only difference is that they",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:53079,safe,safety,53079,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['safe'],['safety']
Safety,"turns pointer to volume to be divided. void ComputeBBox(); Compute bounding box - nothing to do in this case. Bool_t Contains(Double_t* point) const; Test if point is inside this shape. Bool_t Contains(const Double_t* point, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin); Test if point is inside this shape. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the box.; Boundary safe algorithm. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); Compute distance from inside point to surface of the box.; Boundary safe algorithm. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the box.; Boundary safe algorithm. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); Compute distance from outside point to surface of the box.; Boundary safe algorithm. const char * GetAxisName(Int_t iaxis) const; Returns name of axis IAXIS. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. Double_t GetFacetArea(Int_t index = 0) const; Get area in internal units of the facet with a given index.; Possible index values:; 0 - all facets togeather; 1 to 6 - facet index from bottom to top Z. Bool_t GetPointsOnFacet(Int_t index, Int_t npoints, Double_t* array) const; Fills array with n random points located on the surface of indexed facet.; The output array must be provided w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBBox.html:15195,safe,safe,15195,root/html528/TGeoBBox.html,https://root.cern,https://root.cern/root/html528/TGeoBBox.html,3,['safe'],['safe']
Safety,"turns true on success. void Paint(Option_t* option); Special schema for feeding the 3D buffers to the painter client. void RegisterMatrices(); Register all matrices of the boolean node and descendents. Bool_t ReplaceMatrix(TGeoMatrix* mat, TGeoMatrix* newmat); Replace one of the matrices. Does not work with TGeoIdentity. Returns true; if replacement was successful. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetPoints(Double_t* points) const; Fill buffer with shape vertices. void SetPoints(Float_t* points) const; Fill buffer with shape vertices. void Sizeof3D() const; Register size of this 3D object. ThreadData_t& GetThreadData() const. TGeoBoolNode& operator=(const TGeoBoolNode& ). void ComputeBBox(Double_t& dx, Double_t& dy, Double_t& dz, Double_t* origin); methods. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm). Bool_t Contains(const Double_t* point) const. Int_t DistanceToPrimitive(Int_t px, Int_t py). Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const. EGeoBoolType GetBooleanOperator() const. Int_t GetNpoints(). TGeoMatrix * GetLeftMatrix() const; {return fLeftMat;}. TGeoMatrix * GetRightMatrix() const; {return fRightMat;}. TGeoShape * GetLeftShape() const; {return fLeft;}. TGeoShape * GetRightShape() const; {return fRight;}. TGeoBoolNode * MakeClone() const. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = 0, Double_t* safe = 0) const; {return kGeoUnion;}. » Author: Andrei Gheata 30/05/02 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBoolNode.html:9525,safe,safe,9525,root/html534/TGeoBoolNode.html,https://root.cern,https://root.cern/root/html534/TGeoBoolNode.html,3,"['Safe', 'safe']","['Safety', 'safe']"
Safety,"tusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. stringfFileNamePrefix; intfHighBin; intfLowBin; doublefLumiError; doublefNomLumi; stringfObsName; TFile*fOut_f; stringstreamfResultsPrefixStr; stringfRowTitle; vector<string>fSystToFix; FILE*pFile. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HistoToWorkspaceFactoryFast(); {}. ~HistoToWorkspaceFactoryFast(). HistoToWorkspaceFactoryFast(string , string , vector<string> , double = 200, double = 20, int = 0, int = 6, TFile* = 0). string FilePrefixStr(string ). void ProcessExpectedHisto(TH1F* hist, RooWorkspace* proto, string prefix, string productPrefix, string systTerm, double low, double high, int lowBin, int highBin). void AddMultiVarGaussConstraint(RooWorkspace* proto, string prefix, int lowBin, int highBin, vector<string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins. void LinInterpWithConstraint(RooWorkspace* proto, TH1F* nominal, vector<TH1F*> lowHist, vector<TH1F*> highHist, vector<string> sourceName, string prefix, string productPrefix, string systTerm, int lowBin, int highBin, vector<string>& likelihoodTermNames); these are the nominal predictions: eg. the mean of some space of variations; later fill these in a loop over histogram bins. string AddNormFactor(RooWorkspace* , string& , string& , RooStats::HistFactory::EstimateSummary& , bool ). void AddEfficiencyTerms(RooWorkspace* proto, string prefix, string interpName, map<string,pair<double,double> > systMap, vector<string>& likelihoodTermNames, vector<string>& totSystTermNames); add variables for all the relative overall uncertainties we expect; range is set using defined macro (see top of the page); string range=""[0,-1,1]""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html:8403,predict,predictions,8403,root/html530/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,https://root.cern,https://root.cern/root/html530/RooStats__HistFactory__HistoToWorkspaceFactoryFast.html,1,['predict'],['predictions']
Safety,"t . ). pure virtual . Implemented in TProofPlayer. ◆ SetExitStatus(). virtual void TVirtualProofPlayer::SetExitStatus ; (; EExitStatus ; ). pure virtual . Implemented in TProofPlayer. ◆ SetInitTime(). virtual void TVirtualProofPlayer::SetInitTime ; (; ). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ SetMaxDrawQueries(). virtual void TVirtualProofPlayer::SetMaxDrawQueries ; (; Int_t ; max). pure virtual . Implemented in TProofPlayer. ◆ SetMerging(). virtual void TVirtualProofPlayer::SetMerging ; (; Bool_t ; on = kTRUE). pure virtual . Implemented in TProofPlayerRemote, and TProofPlayer. ◆ SetOutputFilePath(). virtual void TVirtualProofPlayer::SetOutputFilePath ; (; const char * ; fp). pure virtual . Implemented in TProofPlayer. ◆ SetStopTimer(). virtual void TVirtualProofPlayer::SetStopTimer ; (; Bool_t ; on = kTRUE, . Bool_t ; abort = kFALSE, . Int_t ; timeout = 0 . ). pure virtual . Implemented in TProofPlayer. ◆ StopProcess(). virtual void TVirtualProofPlayer::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ StoreFeedback(). virtual void TVirtualProofPlayer::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). pure virtual . Implemented in TProofPlayer, TProofPlayerRemote, and TProofPlayerLite. ◆ StoreOutput(). virtual void TVirtualProofPlayer::StoreOutput ; (; TList * ; out). pure virtual . Implemented in TProofPlayer, and TProofPlayerRemote. ◆ Streamer(). void TVirtualProofPlayer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TVirtualProofPlayer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 142 of file TVirtualProofPlayer.h. ◆ UpdateAutoBin(). virtual void TVirtualProofPlayer::UpdateAutoBin ; (; const char * ; name, . Double_t & ; xmin, . Double_t & ; xmax, . Double_t & ; ymin, . Double_t & ; ymax, . Double_t & ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualProofPlayer.html:29363,abort,abort,29363,doc/master/classTVirtualProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html,1,['abort'],['abort']
Safety,"t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 628 of file TBufferSQL.cxx. ◆ WriteFastArray() [7/15]. void TBufferSQL::WriteFastArray ; (; const Long_t * ; l, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 588 of file TBufferSQL.cxx. ◆ WriteFastArray() [8/15]. void TBufferSQL::WriteFastArray ; (; const Short_t * ; h, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 506 of file TBufferSQL.cxx. ◆ WriteFastArray() [9/15]. void TBufferSQL::WriteFastArray ; (; const UChar_t * ; uc, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 486 of file TBufferSQL.cxx. ◆ WriteFastArray() [10/15]. void TBufferSQL::WriteFastArray ; (; const UInt_t * ; ui, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:53809,abort,aborts,53809,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['abort'],['aborts']
Safety,"t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 688 of file TBufferSQL.cxx. ◆ WriteFastArray() [4/15]. void TBufferSQL::WriteFastArray ; (; const Float_t * ; f, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 668 of file TBufferSQL.cxx. ◆ WriteFastArray() [5/15]. void TBufferSQL::WriteFastArray ; (; const Int_t * ; ii, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 547 of file TBufferSQL.cxx. ◆ WriteFastArray() [6/15]. void TBufferSQL::WriteFastArray ; (; const Long64_t * ; l, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for more details. ; Reimplemented from TBufferFile.; Definition at line 628 of file TBufferSQL.cxx. ◆ WriteFastArray() [7/15]. void TBufferSQL::WriteFastArray ; (; const Long_t * ; l, . Long64_t ; n . ). finalvirtual . WriteFastArray SQL implementation. ; NoteDue to the current limit of the buffer size, the function aborts execution of the program in case of underflow or overflow. See https://github.com/root-project/root/issues/6734 for m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL.html:52495,abort,aborts,52495,doc/master/classTBufferSQL.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL.html,1,['abort'],['aborts']
Safety,"t ; parm, . TH1 * ; weight . ). Set bin by bin weights for template number <parm> (the parameter numbering follows that of the input template vector). ; Weights can be ""unset"" by passing a null pointer. Consistency of the weights histogram with the data histogram is checked at this point, and an error in case of problems. ; Definition at line 298 of file TFractionFitter.cxx. ◆ Streamer(). void TFractionFitter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TFractionFitter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 112 of file TFractionFitter.h. ◆ UnConstrain(). void TFractionFitter::UnConstrain ; (; Int_t ; parm). Remove the constraints on the possible values of parameter <parm>. ; Definition at line 472 of file TFractionFitter.cxx. Member Data Documentation. ◆ fAji. TObjArray TFractionFitter::fAji. protected . Array of pointers to predictions of real template distributions. ; Definition at line 96 of file TFractionFitter.h. ◆ fChisquare. Double_t TFractionFitter::fChisquare. protected . Template fit chisquare. ; Definition at line 94 of file TFractionFitter.h. ◆ fData. TH1* TFractionFitter::fData. protected . Pointer to the ""data"" histogram to be fitted to. ; Definition at line 100 of file TFractionFitter.h. ◆ fExcludedBins. std::vector<Int_t> TFractionFitter::fExcludedBins. protected . Bins excluded from the fit. ; Definition at line 90 of file TFractionFitter.h. ◆ fFitDone. Bool_t TFractionFitter::fFitDone. protected . Flags whether a valid fit has been performed. ; Definition at line 83 of file TFractionFitter.h. ◆ fFractionFitter. ROOT::Fit::Fitter* TFractionFitter::fFractionFitter. protected . Pointer to Fitter class. ; Definition at line 107 of file TFractionFitter.h. ◆ fFractions. Double_t* TFractionFitter::fFractions. protected . Template fractions scaled to the ""data"" histogram statistics. ; Definition at line 105",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFractionFitter.html:33608,predict,predictions,33608,doc/master/classTFractionFitter.html,https://root.cern,https://root.cern/doc/master/classTFractionFitter.html,1,['predict'],['predictions']
Safety,"t ; py . ). overridevirtual . Computes distance from point (px,py) to the object. ; This member function must be implemented for each graphics primitive. This default function returns a big number (999999). ; Reimplemented from TGeoBBox.; Reimplemented in TGeoPgon. ◆ DistFromInside(). Double_t TGeoPcon::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoPgon. ◆ DistFromInside_v(). void TGeoPcon::DistFromInside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoPgon. ◆ DistFromOutside(). Double_t TGeoPcon::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoPgon. ◆ DistFromOutside_v(). void TGeoPcon::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoPgon. ◆ DistToSegZ(). Double_t TGeoPcon::DistToSegZ ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t & ; iz . ); const. ◆ Divide(). TGeoVolume * TGeoPcon::Divide ; (; TGeoVolume * ; voldiv, . const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step . ). overridevirtual . Reimplemented from TGeoBBox.; Reimplemented in TGeoPgon. ◆ Dphi(). Double_t & TGeoPcon::Dphi ; (; ). inline . Definition at line 94 of file TGeoPcon.h. ◆ GetAxisName(). const char * TGeoPcon::GetAxisName ; (; Int_t ; iaxis); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetAxisRange(). Double_t TGeoPcon::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPcon.html:26800,safe,safe,26800,doc/master/classTGeoPcon.html,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html,1,['safe'],['safe']
Safety,"t _vars;  Dimensions of this data set. ;  ; StorageType storageType;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from RooDirItem; TDirectory * _dir {nullptr};  ! Associated directory ;  . Private Member Functions; void _adjustBinning (RooRealVar &theirVar, const TAxis &axis, RooRealVar *ourVar, Int_t *offset);  Helper doing the actual work of adjustBinning(). ;  ; VarInfo const & getVarInfo ();  Return reference to VarInfo struct with cached histogram variable information that is frequently used for histogram weights retrieval. ;  ; void initializeAsymErrArrays () const;  ; void interpolateLinear (double *output, std::span< const double > xVals, bool correctForBinSize, bool cdfBoundaries);  A vectorized version of interpolateDim for boundary safe linear interpolation of one dimensional histograms. ;  ; void interpolateQuadratic (double *output, std::span< const double > xVals, bool correctForBinSize, bool cdfBoundaries);  A vectorized version of interpolateDim for boundary safe quadratic interpolation of one dimensional histograms. ;  ; void registerWeightArraysToDataStore () const;  Hand over pointers to our weight arrays to the data store implementation. ;  ; double weightInterpolated (const RooArgSet &bin, int intOrder, bool correctForBinSize, bool cdfBoundaries);  Return the weight at given coordinates with interpolation. ;  . Static Private Member Functions; static std::unique_ptr< RooAbsDataStore > makeDefaultDataStore (RooStringView name, RooStringView title, RooArgSet const &vars);  . Private Attributes; std::vector< double > _interpolationBuffer;  ! Buffer to contain values used for weight interpolation ;  ; VarInfo _varInfo;  ! ;  . Friends; class RooDataHistSliceIter;  . Additional Inherited Members;  Public Types inherited from RooAbsData; using CategorySpans = std::map< RooFit::Detail::DataKey, std::span< const RooAbsCategory::value_type > >;  ; enum  ErrorType { ;   Poisson; , SumW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:40886,safe,safe,40886,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['safe'],['safe']
Safety,"t fNCalls;  (max) function calls ;  ; double fRelTolerance;  relative tolerance ;  ; unsigned int fWKSize;  workspace size ;  . #include <Math/IntegratorOptions.h>. Inheritance diagram for ROOT::Math::BaseIntegratorOptions:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BaseIntegratorOptions() [1/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; ). protected . protected constructor to avoid user creating this class ; constructor (protected) to avoid user creating this class ; Definition at line 125 of file IntegratorOptions.cxx. ◆ BaseIntegratorOptions() [2/2]. ROOT::Math::BaseIntegratorOptions::BaseIntegratorOptions ; (; const BaseIntegratorOptions & ; opt). Definition at line 132 of file IntegratorOptions.cxx. ◆ ~BaseIntegratorOptions(). virtual ROOT::Math::BaseIntegratorOptions::~BaseIntegratorOptions ; (; ). inlinevirtual . protected constructor to avoid user creating this class ; Definition at line 52 of file IntegratorOptions.h. Member Function Documentation. ◆ AbsTolerance(). double ROOT::Math::BaseIntegratorOptions::AbsTolerance ; (; ); const. inline . non-static methods for retrieving options ; absolute tolerance ; Definition at line 61 of file IntegratorOptions.h. ◆ ClearExtra(). void ROOT::Math::BaseIntegratorOptions::ClearExtra ; (; ). protected . Definition at line 161 of file IntegratorOptions.cxx. ◆ ExtraOptions(). IOptions * ROOT::Math::BaseIntegratorOptions::ExtraOptions ; (; ); const. inline . return extra options ; Definition at line 71 of file IntegratorOptions.h. ◆ Integrator(). virtual std::string ROOT::Math::BaseIntegratorOptions::Integrator ; (; ); const. pure virtual . name of 1D integrator ; Implemented in ROOT::Math::IntegratorOneDimOptions, and ROOT::Math::IntegratorMultiDimOptions. ◆ operator=(). BaseIntegratorOptions & ROOT::Math::BaseIntegratorOptions::operator= ; (; const BaseIntegratorOptions & ; opt). assignment operators ; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html:2831,avoid,avoid,2831,doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BaseIntegratorOptions.html,1,['avoid'],['avoid']
Safety,"u need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""var2"", 3.0)));; RooAddition addition{""addition"", ""addition"", sumSet, /*takeOwnership=*/true};; should become:; RooArgList sumSet;; sumSet.addOwned(std::make_unique<RooRealVar>(""var1"", ""var1"", 1.0));; sumSet.addOwned(std::mak",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:11073,safe,safe,11073,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['safe'],['safe']
Safety,"uTitle = title;; 6272}; 6273 ; 6274////////////////////////////////////////////////////////////////////////////////; 6275/// This function installs a global IsA function for this class.; 6276/// The global IsA function will be used if there is no local IsA function (fIsA); 6277///; 6278/// A global IsA function has the signature:; 6279///; 6280/// ~~~ {.cpp}; 6281/// TClass *func( TClass *cl, const void *obj);; 6282/// ~~~; 6283///; 6284/// 'cl' is a pointer to the TClass object that corresponds to the; 6285/// 'pointer type' used to retrieve the value 'obj'; 6286///; 6287/// For example with:; 6288/// ~~~ {.cpp}; 6289/// TNamed * m = new TNamed(""example"",""test"");; 6290/// TObject* o = m; 6291/// ~~~; 6292/// and; 6293/// the global IsA function would be called with TObject::Class() as; 6294/// the first parameter and the exact numerical value in the pointer; 6295/// 'o'.; 6296///; 6297/// In other word, inside the global IsA function. it is safe to C-style; 6298/// cast the value of 'obj' into a pointer to the class described by 'cl'.; 6299 ; 6300void TClass::SetGlobalIsA(IsAGlobalFunc_t func); 6301{; 6302 fGlobalIsA = func;; 6303}; 6304 ; 6305////////////////////////////////////////////////////////////////////////////////; 6306/// Call this method to indicate that the shared library containing this; 6307/// class's code has been removed (unloaded) from the process's memory; 6308 ; 6309void TClass::SetUnloaded(); 6310{; 6311 if (TestBit(kUnloaded) && !TestBit(kUnloading)) {; 6312 // Don't redo the work.; 6313 return;; 6314 }; 6315 SetBit(kUnloading);; 6316 ; 6317 //R__ASSERT(fState == kLoaded);; 6318 if (fState != kLoaded) {; 6319 Fatal(""SetUnloaded"",""The TClass for %s is being unloaded when in state %d\n"",; 6320 GetName(),(int)fState);; 6321 }; 6322 ; 6323 InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);; 6324 ; 6325 // Make sure SetClassInfo, re-calculated the state.; 6326 fState = kForwardDeclared;; 6327 ; 6328 delete fIsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:242498,safe,safe,242498,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['safe'],['safe']
Safety,"uTitle = title;; 6339}; 6340 ; 6341////////////////////////////////////////////////////////////////////////////////; 6342/// This function installs a global IsA function for this class.; 6343/// The global IsA function will be used if there is no local IsA function (fIsA); 6344///; 6345/// A global IsA function has the signature:; 6346///; 6347/// ~~~ {.cpp}; 6348/// TClass *func( TClass *cl, const void *obj);; 6349/// ~~~; 6350///; 6351/// 'cl' is a pointer to the TClass object that corresponds to the; 6352/// 'pointer type' used to retrieve the value 'obj'; 6353///; 6354/// For example with:; 6355/// ~~~ {.cpp}; 6356/// TNamed * m = new TNamed(""example"",""test"");; 6357/// TObject* o = m; 6358/// ~~~; 6359/// and; 6360/// the global IsA function would be called with TObject::Class() as; 6361/// the first parameter and the exact numerical value in the pointer; 6362/// 'o'.; 6363///; 6364/// In other word, inside the global IsA function. it is safe to C-style; 6365/// cast the value of 'obj' into a pointer to the class described by 'cl'.; 6366 ; 6367void TClass::SetGlobalIsA(IsAGlobalFunc_t func); 6368{; 6369 fGlobalIsA = func;; 6370}; 6371 ; 6372////////////////////////////////////////////////////////////////////////////////; 6373/// Call this method to indicate that the shared library containing this; 6374/// class's code has been removed (unloaded) from the process's memory; 6375 ; 6376void TClass::SetUnloaded(); 6377{; 6378 if (TestBit(kUnloaded) && !TestBit(kUnloading)) {; 6379 // Don't redo the work.; 6380 return;; 6381 }; 6382 SetBit(kUnloading);; 6383 ; 6384 //R__ASSERT(fState == kLoaded);; 6385 if (fState != kLoaded) {; 6386 Fatal(""SetUnloaded"",""The TClass for %s is being unloaded when in state %d\n"",; 6387 GetName(),(int)fState);; 6388 }; 6389 ; 6390 InsertTClassInRegistryRAII insertRAII(fState, fName, fNoInfoOrEmuOrFwdDeclNameRegistry);; 6391 ; 6392 // Make sure SetClassInfo, re-calculated the state.; 6393 fState = kForwardDeclared;; 6394 ; 6395 delete fIsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:245249,safe,safe,245249,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['safe'],['safe']
Safety,"ual . AutoSave tree header every fAutoSave bytes. ; When large Trees are produced, it is safe to activate the AutoSave procedure. Some branches may have buffers holding many entries. If fAutoSave is negative, AutoSave is automatically called by TTree::Fill when the number of bytes generated since the previous AutoSave is greater than -fAutoSave bytes. If fAutoSave is positive, AutoSave is automatically called by TTree::Fill every N entries. This function may also be invoked by the user. Each AutoSave generates a new key on the file. Once the key with the tree header has been written, the previous cycle (if any) is deleted.; Note that calling TTree::AutoSave too frequently (or similarly calling TTree::SetAutoSave with a small value) is an expensive operation. You should make tests for your own application to find a compromise between speed and the quantity of information you may loose in case of a job crash.; In case your program crashes before closing the file holding this tree, the file will be automatically recovered when you will connect the file in UPDATE mode. The Tree will be recovered at the status corresponding to the last AutoSave.; if option contains ""SaveSelf"", gDirectory->SaveSelf() is called. This allows another process to analyze the Tree while the Tree is being filled.; if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of bytes is null, an error has occurred while writing the header to the file. How to write a Tree in one process and view it from another process; The following t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:75635,recover,recovered,75635,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['recover'],['recovered']
Safety,"ual voidShowData(); voidTProof::ShowDataSet(const char* dataset = """", const char* opt = ""filter:SsCc""); virtual voidShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidShowDataSets(const char* uri = """", const char* = 0); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tVerifyDataSet(const char* uri, const char* = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:18303,abort,abort,18303,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,2,['abort'],['abort']
Safety,"ual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); RooAbsCollection*RooAbsCollection::snapshot(Bool_t deepCopy = kTRUE) const; Bool_tRooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact). protected:. Bool_tRooAbsCollection::addServerClonesToList(const RooAbsArg& var); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidRooAbsCollection::safeDeleteList(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooArgList(); Default constructor. RooArgList(const RooArgSet& set); C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgList.html:11649,safe,safeDeleteList,11649,root/html528/RooArgList.html,https://root.cern,https://root.cern/root/html528/RooArgList.html,1,['safe'],['safeDeleteList']
Safety,"ual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSemaphore(const TSemaphore& s); TSemaphore&operator=(const TSemaphore& s). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TSemaphore.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSemaphore.html:5584,timeout,timeout,5584,root/html528/TSemaphore.html,https://root.cern,https://root.cern/root/html528/TSemaphore.html,1,['timeout'],['timeout']
Safety,"ual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSemaphore(const TSemaphore& s); TSemaphore&operator=(const TSemaphore& s). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TSemaphore.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSemaphore.html:5653,timeout,timeout,5653,root/html530/TSemaphore.html,https://root.cern,https://root.cern/root/html530/TSemaphore.html,1,['timeout'],['timeout']
Safety,"ual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSemaphore(const TSemaphore& s); TSemaphore&operator=(const TSemaphore& s). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id: TSemaphore.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSemaphore.html:5653,timeout,timeout,5653,root/html532/TSemaphore.html,https://root.cern,https://root.cern/root/html532/TSemaphore.html,1,['timeout'],['timeout']
Safety,"ualPacketizer::EUseEstOptTVirtualPacketizer::kEstAverage; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstCurrent; static TVirtualPacketizer::EUseEstOptTVirtualPacketizer::kEstOff. private:. TMap*fAssignedPackMap {worker,packetizer} of lat assignement; TVirtualPacketizer*fCurrentPacketizer being currently processed; TList*fPacketizersPacketizers to be processed; TIter*fPacketizersIterIterator on fPacketizers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPacketizerMulti(TDSet* dset, TList* slaves, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Constructor. ~TPacketizerMulti(); Destructor. TDSetElement * GetNextPacket(TSlave* wrk, TMessage* r); Get next packet from the current packetizer.; If the current packetizer is done, move to next.; Retun null when all packetizers are done. TVirtualPacketizer * CreatePacketizer(TDSet* dset, TList* wrks, Long64_t first, Long64_t num, TList* input, TProofProgressStatus* st); Create a packetizer for dataset 'dset'; Return null on failure. TPacketizerMulti(). TPacketizerMulti(const TPacketizerMulti& ). void operator=(const TPacketizerMulti& ). Int_t GetEstEntriesProcessed(Float_t f, Long64_t& ent, Long64_t& bytes, Long64_t& calls). Float_t GetCurrentRate(Bool_t& all). void StopProcess(Bool_t abort, Bool_t stoptimer = kFALSE). void MarkBad(TSlave* wrk, TProofProgressStatus* st, TList** missing); { if (fCurrent) fCurrent->MarkBad(wrk, st, missing); return; }. Int_t AddProcessed(TSlave* wrk, TProofProgressStatus* st, Double_t lat, TList** missing). Int_t GetActiveWorkers(); { if (fCurrent) return fCurrent->GetActiveWorkers(); return 0; }. » Author: G. Ganis Jan 2010 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 2 16:25:58 2015 » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPacketizerMulti.html:11450,abort,abort,11450,root/html604/TPacketizerMulti.html,https://root.cern,https://root.cern/root/html604/TPacketizerMulti.html,1,['abort'],['abort']
Safety,"uated"" ; Definition at line 53 of file TGeoNavigator.h. ◆ fLastPWSaftyPnt. Double_t TGeoNavigator::fLastPWSaftyPnt[3]. private . last point for which safety was computed ; Definition at line 52 of file TGeoNavigator.h. ◆ fLastSafety. Double_t TGeoNavigator::fLastSafety. private . safety radius from current point ; Definition at line 45 of file TGeoNavigator.h. ◆ fLevel. Int_t TGeoNavigator::fLevel. private . thread id for this navigator ; Definition at line 55 of file TGeoNavigator.h. ◆ fNextDaughterIndex. Int_t TGeoNavigator::fNextDaughterIndex. private . number of overlapping nodes on current branch ; Definition at line 57 of file TGeoNavigator.h. ◆ fNextNode. TGeoNode* TGeoNavigator::fNextNode. private . last searched node ; Definition at line 78 of file TGeoNavigator.h. ◆ fNmany. Int_t TGeoNavigator::fNmany. private . current geometry level; ; Definition at line 56 of file TGeoNavigator.h. ◆ fNormal. Double_t TGeoNavigator::fNormal[3]. private . last computed safety radius ; Definition at line 46 of file TGeoNavigator.h. ◆ fOverlapClusters. Int_t* TGeoNavigator::fOverlapClusters. private . current recursive position in fOverlapClusters ; Definition at line 60 of file TGeoNavigator.h. ◆ fOverlapMark. Int_t TGeoNavigator::fOverlapMark. private . current size of fOverlapClusters ; Definition at line 59 of file TGeoNavigator.h. ◆ fOverlapSize. Int_t TGeoNavigator::fOverlapSize. private . next daughter index after FindNextBoundary ; Definition at line 58 of file TGeoNavigator.h. ◆ fPath. TString TGeoNavigator::fPath. private . current local matrix of the selected division cell ; Definition at line 84 of file TGeoNavigator.h. ◆ fPoint. Double_t TGeoNavigator::fPoint[3]. private . unit vector to current checked shape ; Definition at line 49 of file TGeoNavigator.h. ◆ fSafety. Double_t TGeoNavigator::fSafety. private . step to be done from current point and direction ; Definition at line 44 of file TGeoNavigator.h. ◆ fSearchOverlaps. Bool_t TGeoNavigator::fSearchOverlaps",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:49862,safe,safety,49862,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['safe'],['safety']
Safety,"uates (training) distribution. ; Definition at line 746 of file PDEFoam.cxx. ◆ Explore(). void TMVA::PDEFoam::Explore ; (; PDEFoamCell * ; cell). protectedvirtual . Internal subprogram used by Create. ; It explores newly defined cell with help of special short MC sampling. As a result, estimates of kTRUE and drive volume is defined/determined Average and dispersion of the weight distribution will is found along each edge and the best edge (minimum dispersion, best maximum weight) is memorized for future use. The optimal division point for eventual future cell division is determined/recorded. Recorded are also minimum and maximum weight etc. The volume estimate in all (inactive) parent cells is updated. Note that links to parents and initial volume = 1/2 parent has to be already defined prior to calling this routine.; If fNmin > 0 then the total number of (training) events found in the cell during the exploration is stored in the cell. This information is used within PeekMax() to avoid splitting cells which contain less than fNmin events. ; Reimplemented in TMVA::PDEFoamDecisionTree.; Definition at line 432 of file PDEFoam.cxx. ◆ FillBinarySearchTree(). void TMVA::PDEFoam::FillBinarySearchTree ; (; const Event * ; ev). Insert event to internal foam's density estimator PDEFoamDensityBase. ; Definition at line 1656 of file PDEFoam.cxx. ◆ FillFoamCells(). void TMVA::PDEFoam::FillFoamCells ; (; const Event * ; ev, . Float_t ; wt . ). virtual . This function fills a weight 'wt' into the PDEFoam cell, which corresponds to the given event 'ev'. ; Per default cell element 0 is filled with the weight 'wt', and cell element 1 is filled with the squared weight. This function can be overridden by a subclass in order to change the values stored in the foam cells. ; Reimplemented in TMVA::PDEFoamDiscriminant, TMVA::PDEFoamEvent, and TMVA::PDEFoamTarget.; Definition at line 954 of file PDEFoam.cxx. ◆ Finalize(). virtual void TMVA::PDEFoam::Finalize ; (; ). inlinevirtual . Reimplemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:24242,avoid,avoid,24242,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['avoid'],['avoid']
Safety,"uble compiling their programs using actual compilers. It implies that you intend to keep the (at best) insane class hierarchy TF1 <- TF2 <- TF3 and so on. This example shows some of the major design flaws in ROOT -- a 2-dimensional function IS a 1-dimensional function? There is no abstract base class? No templates? It implies that you plan to keep the pointless T in front of all the names of ROOT, even though you will have access to namespaces (finally) and thus can move past the 1970's C practice of avoiding name collisions by a sort of weird Hungarian notation. It implies that you plan to maintain the outdated interfaces which make no use of templates. Templates are one of the most powerful features of C++, are more relevant to performance critical tasks than inheritance, and help ensure the type-safety of code (thereby ensuring the accuracy of data by helping to prevent accidental narrowing etc). It implies that you intend to continue to encourage the use of bare new and delete operators, instead of relying on the more efficient, reliable, and safe method of using RAII. Why? This begs the obvious question: why bother migrating at all? You wish to migrate to the modern and superior C++11 in order to not take advantage of its features? Why not just simply maintain ROOT5 and CINT, and just refuse to upgrade? ROOT is not a particularly good framework that is written in a language that isn't quite C++. If you are going to break away and make/use/write cling, then fix the poor design decisions: cling will probably break compatibility anyways despite your best efforts, so you might as well take the time and effort to refactor and clean up the code base. A simple example, taken from this website: """""" TFFTComplex One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. Only the basic interface of FFTW is implemented. Computes complex input/output discrete Fourier transforms (DFT) in one or more dimensions. For the detailed inform",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:10110,safe,safe,10110,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['safe'],['safe']
Safety,"uble ey). add one dim data with error in the coordinate (x); in this case store the value (y) error and not the inverse. void Add(double x, double y, double ex, double eyl, double eyh). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y); in this case store the y errors and not the inverse. void Add(const double *x, double val). add multi-dim coordinate data with only value (no errors). void Add(const double *x, double val, double eval). add multi-dim coordinate data with only error in value. void Add(const double *x, double val, const double * ex, double eval). add multi-dim coordinate data with both error in coordinates and value. const double * Coords(unsigned int ipoint) const. return a pointer to the coordinates data for the given fit point. double Value(unsigned int ipoint) const. return the value for the given fit point. double Error(unsigned int ipoint) const. return error on the value for the given fit point; Safe (but slower) method returning correctly the error on the value; in case of asymm errors return the average 0.5(eu + el). double InvError(unsigned int ipoint) const. Return the inverse of error on the value for the given fit point; useful when error in the coordinates are not stored and then this is used directly this as the weight in; the least square function. const double * CoordErrors(unsigned int ipoint) const. Return a pointer to the errors in the coordinates for the given fit point. const double * GetPoint(unsigned int ipoint, double& value) const. retrieve at the same time a pointer to the coordinate data and the fit value; More efficient than calling Coords(i) and Value(i). const double * GetPoint(unsigned int ipoint, double& value, double& invError) const. retrieve in a single call a pointer to the coordinate data, value and inverse error for; the given fit point.; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; for the error. const double * GetPointError",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__BinData.html:9510,Safe,Safe,9510,root/html526/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__BinData.html,1,['Safe'],['Safe']
Safety,ubleAbsTolerance() const; ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); ROOT::Math::IOptions*ExtraOptions() const; virtual stringIntegrator() const; ROOT::Math::BaseIntegratorOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. ROOT::Math::BaseIntegratorOptionsBaseIntegratorOptions(); voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance; ROOT::Math::IOptions*fExtraOptionsextra options; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions(); protected constructor to avoid user creating this class. BaseIntegratorOptions(const ROOT::Math::BaseIntegratorOptions& opt); copy constructor. BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__BaseIntegratorOptions.html:1729,avoid,avoid,1729,root/html602/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__BaseIntegratorOptions.html,2,['avoid'],['avoid']
Safety,"uble_t &dy, Double_t &dz) const =0; TGeoShape::fgEpsMchstatic Double_t fgEpsMchDefinition TGeoShape.h:28; TGeoShape::NormalPhistatic void NormalPhi(const Double_t *point, const Double_t *dir, Double_t *norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2)Static method to compute normal to phi planes.Definition TGeoShape.cxx:464; TGeoShape::SafetySegstatic Double_t SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer)Compute distance from point of coordinates (r,z) to segment (r1,z1):(r2,z2)Definition TGeoShape.cxx:528; TGeoShape::IsCrossingSemiplanestatic Bool_t IsCrossingSemiplane(const Double_t *point, const Double_t *dir, Double_t cphi, Double_t sphi, Double_t &snext, Double_t &rxy)Compute distance from POINT to semiplane defined by PHI angle along DIR.Definition TGeoShape.cxx:306; TGeoShape::DistFromOutsidevirtual Double_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const =0; TGeoShape::GetByteCountvirtual Int_t GetByteCount() const =0; TGeoShape::IsVecGeomvirtual Bool_t IsVecGeom() constDefinition TGeoShape.h:141; TGeoShape::GetNameconst char * GetName() const overrideGet the shape name.Definition TGeoShape.cxx:250; TGeoShape::ComputeBBoxvirtual void ComputeBBox()=0; TGeoShape::AfterStreamervirtual void AfterStreamer()Definition TGeoShape.h:93; TGeoShape::CouldBeCrossedvirtual Bool_t CouldBeCrossed(const Double_t *point, const Double_t *dir) const =0; TGeoShape::Safety_vvirtual void Safety_v(const Double_t *, const Bool_t *, Double_t *, Int_t) constDefinition TGeoShape.h:151; TGeoShape::GetTransformstatic TGeoMatrix * GetTransform()Returns current transformation matrix that applies to shape.Definition TGeoShape.cxx:574; TGeoShape::Capacityvirtual Double_t Capacity() const =0; TGeoShape::SetRuntimevoid SetRuntime(Bool_t flag=kTRUE)Definition TGeoShape.h:159; TGeoShape::Containsvirtual Bool_t Contains(const Double_t *point) const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoShape_8h_source.html:18176,safe,safe,18176,doc/master/TGeoShape_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoShape_8h_source.html,1,['safe'],['safe']
Safety,"uble_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const =0;  ; virtual Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=0, Double_t *safe=nullptr) const =0;  ; virtual EGeoBoolType GetBooleanOperator () const =0;  ; TGeoMatrix * GetLeftMatrix () const;  ; TGeoShape * GetLeftShape () const;  ; virtual Int_t GetNpoints ()=0;  ; TGeoMatrix * GetRightMatrix () const;  ; TGeoShape * GetRightShape () const;  ; ThreadData_t & GetThreadData () const;  ; TClass * IsA () const override;  ; virtual TGeoBoolNode * MakeClone () const =0;  ; void Paint (Option_t *option) override;  Special schema for feeding the 3D buffers to the painter client. ;  ; void RegisterMatrices ();  Register all matrices of the boolean node and descendents. ;  ; Bool_t ReplaceMatrix (TGeoMatrix *mat, TGeoMatrix *newmat);  Replace one of the matrices. ;  ; virtual Double_t Safety (const Double_t *point, Bool_t in=kTRUE) const =0;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; virtual void SetPoints (Double_t *points) const;  Fill buffer with shape vertices. ;  ; virtual void SetPoints (Float_t *points) const;  Fill buffer with shape vertices. ;  ; void SetSelected (Int_t sel);  Set the selected branch. ;  ; virtual void Sizeof3D () const;  Register size of this 3D object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBoolNode.html:3975,Safe,Safety,3975,doc/master/classTGeoBoolNode.html,https://root.cern,https://root.cern/doc/master/classTGeoBoolNode.html,1,['Safe'],['Safety']
Safety,"uble_t *dirs, Double_t *norms, Int_t vecsize) override;  ; Bool_t Contains (const Double_t *point) const override;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  ; virtual void DefineSection (Int_t snum, Double_t z, Double_t rmin, Double_t rmax);  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point (px,py) to the object. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  ; Double_t DistToSegZ (const Double_t *point, const Double_t *dir, Int_t &iz) const;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  ; Double_t & Dphi ();  ; const char * GetAxisName (Int_t iaxis) const override;  ; Double_t GetAxisRange (Int_t iaxis, Double_t &xlo, Double_t &xhi) const override;  ; void GetBoundingCylinder (Double_t *param) const override;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections, Bool_t localFrame) const override;  Stub implementation to avoid forcing implementation at this stage. ;  ; Int_t GetByteCount () const override;  ; Double_t GetDphi () const;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  ; Int_t GetNmeshVertices () const override;  ; virtual Int_t GetNsegments () const;  ; Int_t GetNz () const;  ; Double_t GetPhi1 () const;  ; Bool_t GetPointsOnSegments",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPcon.html:1361,safe,safe,1361,doc/master/classTGeoPcon.html,https://root.cern,https://root.cern/doc/master/classTGeoPcon.html,3,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"uble_t *point) const override;  test if point is inside the half-space ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  A half-space does not have a mesh primitive. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; TGeoVolume * Divide (TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override;  Divide the shape along one axis. ;  ; void GetBoundingCylinder (Double_t *) const override;  ; TGeoShape * GetMakeRuntimeShape (TGeoShape *, TGeoMatrix *) const override;  ; void GetMeshNumbers (Int_t &nvert, Int_t &nsegs, Int_t &npols) const override;  Returns numbers of vertices, segments and polygons composing the shape mesh. ;  ; Int_t GetNmeshVertices () const override;  ; virtual Double_t * GetNorm ();  ; virtual Double_t * GetPoint ();  ; void InspectShape () const override;  print shape parameters ;  ; TClass * IsA () const override;  ; Bool_t IsCylType () const override;  ; Double_t Safety (const Double_t *poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHalfSpace.html:2782,safe,safe,2782,doc/master/classTGeoHalfSpace.html,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html,1,['safe'],['safe']
Safety,"uble_t c2, Double_t s2); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGeoSphere&operator=(const TGeoSphere&); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumberOfDivisions(Int_t p); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidSetSegsAndPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoSphere.html:8313,Safe,SafetyPhi,8313,root/html530/TGeoSphere.html,https://root.cern,https://root.cern/root/html530/TGeoSphere.html,2,['Safe'],['SafetyPhi']
Safety,"uble_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside this cone. Double_t DistFromInsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); Compute distance from inside point to surface of the cone (static); Boundary safe algorithm. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the cone; Boundary safe algorithm. Double_t DistFromOutsideS(Double_t* point, Double_t* dir, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); Compute distance from outside point to surface of the tube; Boundary safe algorithm.; compute distance to Z planes. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the tube; compute safe radius. void DistToCone(Double_t* point, Double_t* dir, Double_t dz, Double_t r1, Double_t r2, Double_t& b, Double_t& delta); Static method to compute distance to a conical surface with :; - r1, z1 - radius and Z position of lower base; - r2, z2 - radius and Z position of upper base. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this cone shape belonging to volume ""voldiv"" into ndiv volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume in case of Z divisions. For Z division; creates all volumes with different shapes and returns pointer to volume that; was divided. In case a wrong division axis is supplied, returns pointer to; volume that was d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCone.html:14323,safe,safe,14323,root/html528/TGeoCone.html,https://root.cern,https://root.cern/root/html528/TGeoCone.html,6,['safe'],['safe']
Safety,"uble_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); TGeoCtub::SetDimensionsvoid SetDimensions(Double_t *param) override; TGeoCtub::TGeoCtubTGeoCtub(); TGeoCtub::SetPointsvoid SetPoints(Float_t *points) const override; TGeoCtub::CapacityDouble_t Capacity() const override; TGeoCtub::DistFromOutsideDouble_t DistFromOutside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override; TGeoCtub::ContainsBool_t Contains(const Double_t *point) const override; TGeoCtub::SafetyDouble_t Safety(const Double_t *point, Bool_t in=kTRUE) const override; TGeoCtub::TGeoCtubTGeoCtub(const char *name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); TGeoCtub::DistFromInsideDouble_t DistFromInside(const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override; TGeoCtub::TGeoCtubTGeoCtub(Double_t *params); TGeoCtub::DivideTGeoVolume * Divide(TGeoVolume *voldiv, const char *divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step) override; TGeoCtub::GetZcoordDouble_t GetZcoord(Double_t xc, Double_t yc, Double_t zc) const; TGeoCtub::InspectShapevoid InspectShape() const override; TGeoCtub::GetMeshNumbersvoid GetMeshNumbers(Int_t &nvert, Int_t &nsegs, Int_t &npols) const override; TGeoCtub::~TGeoCtub~TGeoCtub() override; TGeoCtub::DistFromInside_vvoid DistFromInside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override; TGeoCtub::GetAxisRangeDouble_t GetAxisRange(Int_t iaxis, Double_t &xlo, Double_t &xhi) const override; TGeoCtub::DistFromOutside_vvoid DistFromOutside_v(const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override; TGeoCtub::GetNmeshVerticesInt_t GetNmeshVertices() const override; TGeoCtub::S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoTube_8h_source.html:15769,safe,safe,15769,doc/master/TGeoTube_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoTube_8h_source.html,1,['safe'],['safe']
Safety,"uble_t point[3]);  Finds physical node containing the point using simple algorithm (for debugging) ;  ; TGeoPhysicalNode * FindNodeOrig (Double_t point[3]);  Finds physical node containing the point (original version based on TGeoVoxelFinder) ;  ; std::pair< double, double > GetBVHSafetyCandidates (double point[3], std::vector< int > &candidates, double margin=0.) const;  Method to find potentially relevant candidate bounding boxes for safety calculation given a point. ;  ; std::pair< double, double > GetLoopSafetyCandidates (double point[3], std::vector< int > &candidates, double margin=0.) const;  Method to find potentially relevant candidate bounding boxes for safety calculation given a point. ;  ; void InitSafetyVoxel (TGeoVoxelGridIndex const &);  Method to initialize the safety voxel at a specific 3D voxel (grid) index. ;  ; Double_t SafetyBVH (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (using pure BVH traversal, mainly for debugging/fallback since VoxelSafety should be faster) ;  ; Double_t SafetyLoop (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (trivial loop version for comparison/debugging) ;  ; Double_t SafetyOrig (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world (original version based on TGeoVoxelFinder) ;  ; void TestVoxelGrid ();  ; Double_t VoxelSafety (Double_t point[3], Double_t safmax=1.E30);  Compute safety for the parallel world used BVH structure with addiditional on-the-fly 3D grid/voxel caching —> essentially an O(1) algorithm !) ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TGeoParallelWorld.h>. Inheritance diagram for TGeoParallelWorld:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ AccelerationMode. enum class TGeoParallelWorld::AccelerationMode. strong . Enumerat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParallelWorld.html:16230,safe,safety,16230,doc/master/classTGeoParallelWorld.html,https://root.cern,https://root.cern/doc/master/classTGeoParallelWorld.html,2,"['Safe', 'safe']","['SafetyLoop', 'safety']"
Safety,"uble_t rsph, Bool_t check = kTRUE, Bool_t firstcross = kTRUE) const; compute distance to sphere of radius rsph. Direction has to be a unit vector. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide all range of iaxis in range/step cells. const char * GetAxisName(Int_t iaxis) const; Returns name of axis IAXIS. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Get range of shape for a given axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is the following : Rmin, Rmax, Phi1, Phi2. void InspectShape() const; print shape parameters. TBuffer3D * MakeBuffer3D() const; Creates a TBuffer3D describing *this* shape.; Coordinates are in local reference frame. void SetSegsAndPols(TBuffer3D& buff) const; Fill TBuffer3D structure for segments and polygons. Double_t Safety(Double_t* point, Bool_t in = kTRUE) const; computes the closest distance from given point to this shape, according; to option. The matching point on the shape is stored in spoint. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetSphDimensions(Double_t rmin, Double_t rmax, Double_t theta1, Double_t theta2, Double_t phi1, Double_t phi2); Set spherical segment dimensions. void SetDimensions(Double_t* param); Set dimensions of the spherical segment starting from a list of parameters. void SetNumberOfDivisions(Int_t p); Set the number of divisions of mesh circles keeping aspect ratio. void SetPoints(Double_t* points) const; create sphere mesh points. void SetPoints(Float_t* points) const; create sphere mesh points. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. Int_t GetNmeshVertices() const; Return number of vertices of the mesh representation. void Sizeof3D() const; o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoSphere.html:15173,Safe,Safety,15173,root/html528/TGeoSphere.html,https://root.cern,https://root.cern/root/html528/TGeoSphere.html,3,['Safe'],['Safety']
Safety,"uble_t s2); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); Double_tSafetyToFace(const Double_t* point, Int_t iseg, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoArb8.html:9504,safe,safe,9504,root/html534/TGeoArb8.html,https://root.cern,https://root.cern/root/html534/TGeoArb8.html,1,['safe'],['safe']
Safety,"uble_t s2); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); Double_tTGeoArb8::SafetyToFace(const Double_t* point, Int_t iseg, Bool_t in) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoArb8::SetDz(Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoGtra.html:10435,safe,safe,10435,root/html534/TGeoGtra.html,https://root.cern,https://root.cern/root/html534/TGeoGtra.html,2,['safe'],['safe']
Safety,"uble_t s2); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); virtual Double_tSafety(const Double_t* point, Bool_t in = kTRUE) const; virtual voidSafety_v(const Double_t* points, const Bool_t* inside, Double_t* safe, Int_t vecsize) const; static Double_tTGeoShape::SafetyPhi(const Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); static Double_tTGeoShape::SafetySeg(Double_t r, Double_t z, Double_t r1, Double_t z1, Double_t r2, Double_t z2, Bool_t outer); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; voidSetCurrentVertices(Double_t x0, Double_t y0, Double_t scale); voidSetCurrentZ(Double_t z, Int_t iz); virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoXtru.html:10095,safe,safe,10095,root/html534/TGeoXtru.html,https://root.cern,https://root.cern/root/html534/TGeoXtru.html,1,['safe'],['safe']
Safety,"uble_t xmin = TMath::Infinity();; 1447 Double_t xmax = -TMath::Infinity();; 1448 for (Int_t i=0;i<nbentries;i++) {; 1449 Double_t x = fBuffer[2*i+2];; 1450 // skip infinity or NaN values; 1451 if (!std::isfinite(x)) continue;; 1452 if (x < xmin) xmin = x;; 1453 if (x > xmax) xmax = x;; 1454 }; 1455 if (fXaxis.GetXmax() <= fXaxis.GetXmin()) {; 1456 Int_t rc = -1;; 1457 if (TestBit(TH1::kAutoBinPTwo)) {; 1458 if ((rc = AutoP2FindLimits(xmin, xmax)) < 0); 1459 Warning(""BufferEmpty"",; 1460 ""inconsistency found by power-of-2 autobin algorithm: fallback to standard method"");; 1461 }; 1462 if (rc < 0); 1463 THLimitsFinder::GetLimitsFinder()->FindGoodLimits(this, xmin, xmax);; 1464 } else {; 1465 fBuffer = nullptr;; 1466 Int_t keep = fBufferSize; fBufferSize = 0;; 1467 if (xmin < fXaxis.GetXmin()) ExtendAxis(xmin, &fXaxis);; 1468 if (xmax >= fXaxis.GetXmax()) ExtendAxis(xmax, &fXaxis);; 1469 fBuffer = buffer;; 1470 fBufferSize = keep;; 1471 }; 1472 }; 1473 ; 1474 // call DoFillN which will not put entries in the buffer as FillN does; 1475 // set fBuffer to zero to avoid re-emptying the buffer from functions called; 1476 // by DoFillN (e.g Sumw2); 1477 buffer = fBuffer; fBuffer = nullptr;; 1478 DoFillN(nbentries,&buffer[2],&buffer[1],2);; 1479 fBuffer = buffer;; 1480 ; 1481 // if action == 1 - delete the buffer; 1482 if (action > 0) {; 1483 delete [] fBuffer;; 1484 fBuffer = nullptr;; 1485 fBufferSize = 0;; 1486 } else {; 1487 // if number of entries is consistent with buffer - set it negative to avoid; 1488 // refilling the histogram every time BufferEmpty(0) is called; 1489 // In case it is not consistent, by setting fBuffer[0]=0 is like resetting the buffer; 1490 // (it will not be used anymore the next time BufferEmpty is called); 1491 if (nbentries == (Int_t)fEntries); 1492 fBuffer[0] = -nbentries;; 1493 else; 1494 fBuffer[0] = 0;; 1495 }; 1496 return nbentries;; 1497}; 1498 ; 1499////////////////////////////////////////////////////////////////////////////////; 1500/// ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:57763,avoid,avoid,57763,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['avoid'],['avoid']
Safety,"uble_t* norm, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTGeoShape::Paint(Option_t* option = """"); Double_t&TGeoPcon::Phi1(); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidTGeoShape::ResetShapeBit(UInt_t f); Double_t&TGeoPcon::Rmax(Int_t ipl); Double_t&TGeoPcon::Rmin(Int_t ipl); virtual Double_tSafety(Double_t* point, Bool_t in = kTRUE) const; static Double_tTGeoShape::SafetyPhi(Double_t* point, Bool_t in, Double_t phi1, Double_t phi2); Double_tSafetyToSegment(Double_t* point, Int_t ipl, Int_t iphi, Bool_t in, Double_t safphi, Double_t safmin = TGeoShape::Big()) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNedges(Int_t ne); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPgon.html:8302,Safe,SafetyPhi,8302,root/html528/TGeoPgon.html,https://root.cern,https://root.cern/root/html528/TGeoPgon.html,1,['Safe'],['SafetyPhi']
Safety,"uble_tdouble Double_tDefinition RtypesCore.h:59; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassImp#define ClassImp(name)Definition Rtypes.h:382; kItimerResolution@ kItimerResolutionDefinition Rtypes.h:62; kMAXSIGNALS@ kMAXSIGNALSDefinition Rtypes.h:59; kMAXPATHLEN@ kMAXPATHLENDefinition Rtypes.h:60; TApplication.h; gApplicationR__EXTERN TApplication * gApplicationDefinition TApplication.h:170; TEnv.h; gEnvR__EXTERN TEnv * gEnvDefinition TEnv.h:170; TError.h; SysErrorvoid SysError(const char *location, const char *msgfmt,...)Use this function in case a system (OS or GUI) related error occurred.Definition TError.cxx:196; Breakvoid Break(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:207; Fatalvoid Fatal(const char *location, const char *msgfmt,...)Use this function in case of a fatal error. It will abort the program.Definition TError.cxx:244; TException.h; gExceptionHandlerR__EXTERN TExceptionHandler * gExceptionHandlerDefinition TException.h:79; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; directwinID h directDefinition TGWin32VirtualGLProxy.cxx:43; maskOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t maskDefinition TGWin32VirtualXProxy.cxx:178; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:176480,abort,abort,176480,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['abort'],['abort']
Safety,"uble_t ; cm, . Double_t ; sm, . Double_t ; cdfi . ). static . ◆ DistToCons(). static Double_t TGeoConeSeg::DistToCons ; (; const Double_t * ; point, . const Double_t * ; dir, . Double_t ; r1, . Double_t ; z1, . Double_t ; r2, . Double_t ; z2, . Double_t ; phi1, . Double_t ; phi2 . ). static . ◆ Divide(). TGeoVolume * TGeoConeSeg::Divide ; (; TGeoVolume * ; voldiv, . const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step . ). overridevirtual . Reimplemented from TGeoCone. ◆ GetAxisRange(). Double_t TGeoConeSeg::GetAxisRange ; (; Int_t ; iaxis, . Double_t & ; xlo, . Double_t & ; xhi . ); const. overridevirtual . Reimplemented from TGeoCone. ◆ GetBoundingCylinder(). void TGeoConeSeg::GetBoundingCylinder ; (; Double_t * ; param); const. overridevirtual . Reimplemented from TGeoCone. ◆ GetBuffer3D(). const TBuffer3D & TGeoConeSeg::GetBuffer3D ; (; Int_t ; reqSections, . Bool_t ; localFrame . ); const. overridevirtual . Stub implementation to avoid forcing implementation at this stage. ; Reimplemented from TGeoCone. ◆ GetByteCount(). Int_t TGeoConeSeg::GetByteCount ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoCone.; Definition at line 161 of file TGeoCone.h. ◆ GetMakeRuntimeShape(). TGeoShape * TGeoConeSeg::GetMakeRuntimeShape ; (; TGeoShape * ; mother, . TGeoMatrix * ; mat . ); const. overridevirtual . Reimplemented from TGeoCone. ◆ GetMeshNumbers(). void TGeoConeSeg::GetMeshNumbers ; (; Int_t & ; nvert, . Int_t & ; nsegs, . Int_t & ; npols . ); const. overridevirtual . Reimplemented from TGeoCone. ◆ GetNmeshVertices(). Int_t TGeoConeSeg::GetNmeshVertices ; (; ); const. overridevirtual . Reimplemented from TGeoCone. ◆ GetPhi1(). Double_t TGeoConeSeg::GetPhi1 ; (; ); const. inline . Definition at line 166 of file TGeoCone.h. ◆ GetPhi2(). Double_t TGeoConeSeg::GetPhi2 ; (; ); const. inline . Definition at line 167 of file TGeoCone.h. ◆ GetPointsOnSegments(). Bool_t TGeoConeSeg::GetPointsOnSegments ; (; Int_t ; npoints",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoConeSeg.html:31390,avoid,avoid,31390,doc/master/classTGeoConeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html,1,['avoid'],['avoid']
Safety,"uble_t ; twist, . Double_t ; h1, . Double_t ; bl1, . Double_t ; tl1, . Double_t ; alpha1, . Double_t ; h2, . Double_t ; bl2, . Double_t ; tl2, . Double_t ; alpha2 . ). ◆ ~TGeoGtra(). TGeoGtra::~TGeoGtra ; (; ). override . Member Function Documentation. ◆ Class(). static TClass * TGeoGtra::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoGtra::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoGtra::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 177 of file TGeoArb8.h. ◆ DeclFileName(). static const char * TGeoGtra::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 177 of file TGeoArb8.h. ◆ DistFromInside(). Double_t TGeoGtra::DistFromInside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ DistFromInside_v(). void TGeoGtra::DistFromInside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ DistFromOutside(). Double_t TGeoGtra::DistFromOutside ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; iact = 1, . Double_t ; step = TGeoShape::Big(), . Double_t * ; safe = nullptr . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ DistFromOutside_v(). void TGeoGtra::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ GetMakeRuntimeShape(). TGeoShape * TGeoGtra::GetMakeRuntimeShape ; (; TGeoShape * ; mother, . TGeoMatrix * ; mat . ); const. overridevirtual . Reimplemented from TGeoArb8. ◆ GetTwistAngle(). Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGtra.html:28656,safe,safe,28656,doc/master/classTGeoGtra.html,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html,1,['safe'],['safe']
Safety,"uct mg_pollfd pfd[1];; 6275 int pollres;; 6276 ; 6277 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6278 /* We already know there is no more data buffered in conn->buf; 6279 * but there is more available in the SSL layer. So don't poll; 6280 * conn->client.sock yet. */; 6281 if (ssl_pending > len) {; 6282 ssl_pending = len;; 6283 }; 6284 pollres = 1;; 6285 } else {; 6286 pfd[0].fd = conn->client.sock;; 6287 pfd[0].events = POLLIN;; 6288 pollres = mg_poll(pfd,; 6289 1,; 6290 (int)(timeout * 1000.0),; 6291 &(conn->phys_ctx->stop_flag));; 6292 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6293 return -2;; 6294 }; 6295 }; 6296 if (pollres > 0) {; 6297 ERR_clear_error();; 6298 nread =; 6299 SSL_read(conn->ssl, buf, (ssl_pending > 0) ? ssl_pending : len);; 6300 if (nread <= 0) {; 6301 err = SSL_get_error(conn->ssl, nread);; 6302 if ((err == SSL_ERROR_SYSCALL) && (nread == -1)) {; 6303 err = ERRNO;; 6304 } else if ((err == SSL_ERROR_WANT_READ); 6305 || (err == SSL_ERROR_WANT_WRITE)) {; 6306 nread = 0;; 6307 } else {; 6308 /* All errors should return -2 */; 6309 DEBUG_TRACE(""SSL_read() failed, error %d"", err);; 6310 ERR_clear_error();; 6311 return -2;; 6312 }; 6313 ERR_clear_error();; 6314 } else {; 6315 err = 0;; 6316 }; 6317 } else if (pollres < 0) {; 6318 /* Error */; 6319 return -2;; 6320 } else {; 6321 /* pollres = 0 means timeout */; 6322 nread = 0;; 6323 }; 6324#endif; 6325 ; 6326 } else {; 6327 struct mg_pollfd pfd[1];; 6328 int pollres;; 6329 ; 6330 pfd[0].fd = conn->client.sock;; 6331 pfd[0].events = POLLIN;; 6332 pollres = mg_poll(pfd,; 6333 1,; 6334 (int)(timeout * 1000.0),; 6335 &(conn->phys_ctx->stop_flag));; 6336 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6337 return -2;; 6338 }; 6339 if (pollres > 0) {; 6340 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6341 err = (nread < 0) ? ERRNO : 0;; 6342 if (nread <= 0) {; 6343 /* shutdown of the socket at client side */; 6344 return -2;; 6345 }; 6346 } else if (pollres < 0) {; 63",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:184102,timeout,timeout,184102,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['timeout'],['timeout']
Safety,"uct mg_pollfd pfd[1];; 6276 int pollres;; 6277 ; 6278 if ((ssl_pending = SSL_pending(conn->ssl)) > 0) {; 6279 /* We already know there is no more data buffered in conn->buf; 6280 * but there is more available in the SSL layer. So don't poll; 6281 * conn->client.sock yet. */; 6282 if (ssl_pending > len) {; 6283 ssl_pending = len;; 6284 }; 6285 pollres = 1;; 6286 } else {; 6287 pfd[0].fd = conn->client.sock;; 6288 pfd[0].events = POLLIN;; 6289 pollres = mg_poll(pfd,; 6290 1,; 6291 (int)(timeout * 1000.0),; 6292 &(conn->phys_ctx->stop_flag));; 6293 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6294 return -2;; 6295 }; 6296 }; 6297 if (pollres > 0) {; 6298 ERR_clear_error();; 6299 nread =; 6300 SSL_read(conn->ssl, buf, (ssl_pending > 0) ? ssl_pending : len);; 6301 if (nread <= 0) {; 6302 err = SSL_get_error(conn->ssl, nread);; 6303 if ((err == SSL_ERROR_SYSCALL) && (nread == -1)) {; 6304 err = ERRNO;; 6305 } else if ((err == SSL_ERROR_WANT_READ); 6306 || (err == SSL_ERROR_WANT_WRITE)) {; 6307 nread = 0;; 6308 } else {; 6309 /* All errors should return -2 */; 6310 DEBUG_TRACE(""SSL_read() failed, error %d"", err);; 6311 ERR_clear_error();; 6312 return -2;; 6313 }; 6314 ERR_clear_error();; 6315 } else {; 6316 err = 0;; 6317 }; 6318 } else if (pollres < 0) {; 6319 /* Error */; 6320 return -2;; 6321 } else {; 6322 /* pollres = 0 means timeout */; 6323 nread = 0;; 6324 }; 6325#endif; 6326 ; 6327 } else {; 6328 struct mg_pollfd pfd[1];; 6329 int pollres;; 6330 ; 6331 pfd[0].fd = conn->client.sock;; 6332 pfd[0].events = POLLIN;; 6333 pollres = mg_poll(pfd,; 6334 1,; 6335 (int)(timeout * 1000.0),; 6336 &(conn->phys_ctx->stop_flag));; 6337 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6338 return -2;; 6339 }; 6340 if (pollres > 0) {; 6341 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6342 err = (nread < 0) ? ERRNO : 0;; 6343 if (nread <= 0) {; 6344 /* shutdown of the socket at client side */; 6345 return -2;; 6346 }; 6347 } else if (pollres < 0) {; 63",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:184134,timeout,timeout,184134,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['timeout'],['timeout']
Safety,"ucts.end()); 3932 continue;; 3933 ; 3934 missingHeaders.push_back({header, OtherModuleName});; 3935 }; 3936 } else {; 3937 missingHeaders.push_back({header, {}});; 3938 }; 3939 foundAllHeaders = false;; 3940 }; 3941 return foundAllHeaders;; 3942}; 3943 ; 3944////////////////////////////////////////////////////////////////////////////////; 3945/// Check moduleName validity from modulemap. Check if this module is defined or not.; 3946static bool CheckModuleValid(TModuleGenerator &modGen, const std::string &resourceDir, cling::Interpreter &interpreter,; 3947 llvm::StringRef LinkdefPath, const std::string &moduleName); 3948{; 3949 clang::CompilerInstance *CI = interpreter.getCI();; 3950 clang::HeaderSearch &headerSearch = CI->getPreprocessor().getHeaderSearchInfo();; 3951 headerSearch.loadTopLevelSystemModules();; 3952 ; 3953 // Actually lookup the module on the computed module name.; 3954 clang::Module *module = headerSearch.lookupModule(llvm::StringRef(moduleName));; 3955 ; 3956 // Inform the user and abort if we can't find a module with a given name.; 3957 if (!module) {; 3958 ROOT::TMetaUtils::Error(""CheckModuleValid"", ""Couldn't find module with name '%s' in modulemap!\n"",; 3959 moduleName.c_str());; 3960 return false;; 3961 }; 3962 ; 3963 // Check if the loaded module covers all headers that were specified; 3964 // by the user on the command line. This is an integrity check to; 3965 // ensure that our used module map is not containing extraneous headers.; 3966 std::vector<std::array<std::string, 2>> missingHdrMod;; 3967 if (!ModuleContainsHeaders(modGen, headerSearch, module, missingHdrMod)) {; 3968 // FIXME: Upgrade this to an error once modules are stable.; 3969 std::stringstream msgStream;; 3970 msgStream << ""after creating module \"""" << module->Name << ""\"" "";; 3971 if (!module->PresumedModuleMapFile.empty()); 3972 msgStream << ""using modulemap \"""" << module->PresumedModuleMapFile << ""\"" "";; 3973 msgStream << ""the following headers are not part of that module:\n""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:160012,abort,abort,160012,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['abort'],['abort']
Safety,"ude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t GetOffset () const;  ; void GetSequenceType (TString &type) const;  Fill type with the string representation of sequence information including 'cached','repeat','write' or 'nodelete'. ;  ; TMemberStreamer * GetStreamer () const;  Return the local streamer object. ;  ; Int_t GetTObjectOffset () const;  ; Int_t GetType () const;  ; const char * GetTypeName () const;  ; const char * GetTypeNameBasic () const;  Return type name of this element in case the type name is not a standard basic type, return the basic type name known to CINT. ;  ; Double_t GetXmax () const;  ; Double_t GetXmin () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsBase () const;  Return kTRUE if the element represent a base class. ;  ; virtual Bool_t IsOldFormat (const char *newTypeName);  The early 3.00/00 and 3.01/01 versions used to store dm->GetTypeName instead of dm->GetFullTypename if this case is detected, the element type name is modified. ;  ; virtual Bool_t IsTransient () const;  Return kTRUE if the element represent an entity that is not written to the disk (transient members, cache allocator/deallocator, etc.) ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; virtual void SetMaxIndex (Int_t dim, Int_t max);  set maximum index for array with dimension dim ;  ; virtual void SetNewClass (TClass *cl);  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBasicPointer.html:3695,detect,detected,3695,doc/master/classTStreamerBasicPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html,1,['detect'],['detected']
Safety,"ude <TSysEvtHandler.h>. Inheritance diagram for TStdExceptionHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EStatus. enum TStdExceptionHandler::EStatus. EnumeratorkSEProceed ; kSEHandled ; kSEAbort . Definition at line 175 of file TSysEvtHandler.h. Constructor & Destructor Documentation. ◆ TStdExceptionHandler(). TStdExceptionHandler::TStdExceptionHandler ; (; ). Handle standard C++ exceptions intercepted by the TSystem::Run(). ; Virtual method EStatus Handle(std::exception& exc) is called on the collection of handlers registered to TSystem. The return value of each handler influences the continuation of handling procedure:; kSEProceed - Proceed with passing of the exception to other handlers, the exception has not been handled.; kSEHandled - The exception has been handled, do not pass it to other handlers.; kSEAbort - Abort application. If all handlers return kSEProceed TSystem::Run() rethrows the exception, possibly resulting in process abortion. . Definition at line 202 of file TSysEvtHandler.cxx. ◆ ~TStdExceptionHandler(). virtual TStdExceptionHandler::~TStdExceptionHandler ; (; ). inlinevirtual . Definition at line 178 of file TSysEvtHandler.h. Member Function Documentation. ◆ Add(). void TStdExceptionHandler::Add ; (; ). overridevirtual . Add std::exception handler to system handler list. ; Implements TSysEvtHandler.; Definition at line 209 of file TSysEvtHandler.cxx. ◆ Class(). static TClass * TStdExceptionHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStdExceptionHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStdExceptionHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 186 of file TSysEvtHandler.h. ◆ DeclFileName(). static const char * TStdExceptionHandler::DeclFileName ; (; ). inlinestat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStdExceptionHandler.html:16438,abort,abortion,16438,doc/master/classTStdExceptionHandler.html,https://root.cern,https://root.cern/doc/master/classTStdExceptionHandler.html,1,['abort'],['abortion']
Safety,"uded for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DL_CPU : [dataset] : Create Transformation ""N"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; ␛[31m<ERROR> : CUDA backend not enabled. Please make sure you have CUDA installed and it was successfully detected by CMAKE by using -Dtmva-gpu=On ␛[0m; : Will now use instead the CPU architecture !; : Will now use the CPU architecture with BLAS and IMT support !; Factory : ␛[1mTrain all methods␛[0m; Factory : [dataset] : Create Transformation ""I"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; Factory : [dataset] : Create Transformation ""D"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : variable 'var2' <---> Output : variable 'var2'; : Input : variable 'var3' <---> Output : variable 'var3'; : Input : variable 'var4' <---> Output : variable 'var4'; Factory : [dataset] : Create Transformation ""P"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : variable 'var1' <---> Output : variable 'var1'; : Input : vari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:6718,detect,detected,6718,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['detect'],['detected']
Safety,"uding elapsed time, currently processed file,; 290/// currently processed events, the rate of event processing; 291/// and an estimated remaining time (per file being processed).; 292/// ProgressBar should be added after the dataframe object (df) is created first:; 293/// ~~~{.cpp}; 294/// ROOT::RDataFrame df(""tree"", ""file.root"");; 295/// ROOT::RDF::Experimental::AddProgressBar(df);; 296/// ~~~; 297/// For more details see ROOT::RDF::Experimental::ProgressHelper Class.; 298void AddProgressBar(ROOT::RDataFrame df);; 299 ; 300class ProgressBarAction;; 301 ; 302/// RDF progress helper.; 303/// This class provides callback functions to the RDataFrame. The event statistics; 304/// (including elapsed time, currently processed file, currently processed events, the rate of event processing; 305/// and an estimated remaining time (per file being processed)); 306/// are recorded and printed in the terminal every m events and every n seconds.; 307/// ProgressHelper::operator()(unsigned int, T&) is thread safe, and can be used as a callback in MT mode.; 308/// ProgressBar should be added after creating the dataframe object (df):; 309/// ~~~{.cpp}; 310/// ROOT::RDataFrame df(""tree"", ""file.root"");; 311/// ROOT::RDF::Experimental::AddProgressBar(df);; 312/// ~~~; 313/// alternatively RDataFrame can be cast to an RNode first giving it more flexibility.; 314/// For example, it can be called at any computational node, such as Filter or Define, not only the head node,; 315/// with no change to the ProgressBar function itself:; 316/// ~~~{.cpp}; 317/// ROOT::RDataFrame df(""tree"", ""file.root"");; 318/// auto df_1 = ROOT::RDF::RNode(df.Filter(""x>1""));; 319/// ROOT::RDF::Experimental::AddProgressBar(df_1);; 320/// ~~~; 321class ProgressHelper {; 322private:; 323 double EvtPerSec() const;; 324 std::pair<std::size_t, std::chrono::seconds> RecordEvtCountAndTime();; 325 void PrintStats(std::ostream &stream, std::size_t currentEventCount, std::chrono::seconds totalElapsedSeconds) const;; 326 voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:14403,safe,safe,14403,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['safe'],['safe']
Safety,"ue if the track energy has fallen below the threshold. Bool_t IsTrackAlive() const; Return true if the current particle is alive and will continue to be; transported. Int_t NSecondaries() const. get methods - secondaries. Return the number of secondary particles generated in the current step. void GetSecondary(Int_t isec, Int_t& particleId, TLorentzVector& position, TLorentzVector& momentum); Return the parameters of the secondary track number isec produced; in the current step. Int_t StepProcesses(TArrayI& proc) const; Return the VMC code of the process that has produced the secondary; particles in the current step; Return the array of the VMC code of the processes active in the current; step. Bool_t SecondariesAreOrdered() const; Return the information about the transport order needed by the stack. void Init(). Control methods. Initialize MC. void BuildPhysics(); Initialize MC physics. void ProcessEvent(); Process one event; Deprecated. Bool_t ProcessRun(Int_t nevent); Process one run and return true if run has finished successfully,; return false in other cases (run aborted by user). void InitLego(); Set switches for lego transport. void SetCollectTracks(Bool_t collectTracks); (In)Activate collecting TGeo tracks. Bool_t IsCollectTracks() const; Return the info if collecting tracks is activated. TVirtualMCStack* GetStack() const. Get methods. Return the particle stack. { return fStack; }. TVirtualMCDecayer* GetDecayer() const; Return the external decayer. { return fDecayer; }. TRandom* GetRandom() const; Return the random number generator. { return fRandom; }. TVirtualMagField* GetMagField() const; Return the magnetic field. { return fMagField; }. TVirtualMC & operator=(const TVirtualMC& ). » Last changed: root/vmc:$Name: $:$Id: TVirtualMC.h 38344 2011-03-09 17:03:14Z ivana $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualMC.html:36245,abort,aborted,36245,root/html530/TVirtualMC.html,https://root.cern,https://root.cern/root/html530/TVirtualMC.html,1,['abort'],['aborted']
Safety,"ue if the track energy has fallen below the threshold. Bool_t IsTrackAlive() const; Return true if the current particle is alive and will continue to be; transported. Int_t NSecondaries() const. get methods - secondaries. Return the number of secondary particles generated in the current step. void GetSecondary(Int_t isec, Int_t& particleId, TLorentzVector& position, TLorentzVector& momentum); Return the parameters of the secondary track number isec produced; in the current step. Int_t StepProcesses(TArrayI& proc) const; Return the VMC code of the process that has produced the secondary; particles in the current step; Return the array of the VMC code of the processes active in the current; step. Bool_t SecondariesAreOrdered() const; Return the information about the transport order needed by the stack. void Init(). Control methods. Initialize MC. void BuildPhysics(); Initialize MC physics. void ProcessEvent(); Process one event; Deprecated. Bool_t ProcessRun(Int_t nevent); Process one run and return true if run has finished successfully,; return false in other cases (run aborted by user). void InitLego(); Set switches for lego transport. void SetCollectTracks(Bool_t collectTracks); (In)Activate collecting TGeo tracks. Bool_t IsCollectTracks() const; Return the info if collecting tracks is activated. TVirtualMCStack* GetStack() const. Get methods. Return the particle stack. { return fStack; }. TVirtualMCDecayer* GetDecayer() const; Return the external decayer. { return fDecayer; }. TRandom* GetRandom() const; Return the random number generator. { return fRandom; }. TVirtualMagField* GetMagField() const; Return the magnetic field. { return fMagField; }. TVirtualMC & operator=(const TVirtualMC& ). » Last changed: root/vmc:$Name: $:$Id: TVirtualMC.h 38344 2011-03-09 17:03:14Z ivana $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualMC.html:36245,abort,aborted,36245,root/html532/TVirtualMC.html,https://root.cern,https://root.cern/root/html532/TVirtualMC.html,1,['abort'],['aborted']
Safety,"ue is sqrt(epsilon) where 1+epsilon = 1; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number .; The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD which can handle singular matrices . For each decomposition this will be checked in a different way; in LU the matrix is considered singular when, at some point in the decomposition, a diagonal element < fTol . Therefore, we had to set in the example above of the (10x10) Hilbert, which is near singular, the tolerance on 10e-12 . (The fact that we have to set the tolerance < sqrt(epsilon) is a clear indication that we are losing precision .); If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices/vectors that are invalid .; The observant reader will notice that by scaling the complete matrix by some small number the decomposition will detect a singular matrix . In this case the user will have to reduce the tolerance number by this factor . (For CPU time saving we decided not to make this an automatic procedure) .; Code for this could look as follows: const Double_t max_abs = Abs(a).Max();; const Double_t scale = TMath::Min(max_abs,1.);; a.SetTol(a.GetTol()*scale);; a#define a(i)Definition RSha256.hxx:99; double; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 33 of file TDecompBase.h. Public Member Functions;  TDecompBase ();  Default constructor. ;  ;  TDecompBase (const TDecompBase &another);  Copy constructor. ;  ;  ~TDecompBase () override;  ; virtual Double_t Condition ();  Matrix condition number. ;  ; virtual Bool_t Decompose ()=0;  ; virtual void Det (Double_t &d1, Double_t &d2);  Matrix determinant det = d1*TMath::Power(2.,d2) ;  ; Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:3883,detect,detect,3883,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['detect'],['detect']
Safety,"ue reset the signal handler for the specified signal to the default handler, else restore previous behaviour. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 576 of file TSystem.cxx. ◆ ResetSignals(). void TSystem::ResetSignals ; (; ). virtual . Reset signals handlers to previous behaviour. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 584 of file TSystem.cxx. ◆ ResetTimer(). virtual void TSystem::ResetTimer ; (; TTimer * ; ). inlinevirtual . Reimplemented in TUnixSystem.; Definition at line 396 of file TSystem.h. ◆ Run(). void TSystem::Run ; (; ). virtual . System event loop. ; Definition at line 343 of file TSystem.cxx. ◆ Select() [1/2]. Int_t TSystem::Select ; (; TFileHandler * ; fh, . Long_t ; timeout . ). virtual . Select on active file descriptors (called by TMonitor). ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 453 of file TSystem.cxx. ◆ Select() [2/2]. Int_t TSystem::Select ; (; TList * ; active, . Long_t ; timeout . ). virtual . Select on active file descriptors (called by TMonitor). ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 445 of file TSystem.cxx. ◆ SendBuf(). int TSystem::SendBuf ; (; int ; sock, . const void * ; buffer, . int ; length . ). virtual . Send a buffer headed by a length indicator. ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2427 of file TSystem.cxx. ◆ SendRaw(). int TSystem::SendRaw ; (; int ; sock, . const void * ; buffer, . int ; length, . int ; flag . ). virtual . Send exactly length bytes from buffer. ; Use opt to send out-of-band data (see TSocket). ; Reimplemented in TUnixSystem, and TWinNTSystem.; Definition at line 2409 of file TSystem.cxx. ◆ SetAclicMode(). void TSystem::SetAclicMode ; (; EAclicMode ; mode). virtual . AclicMode indicates whether the library should be built in debug mode or optimized. ; The values are:; TSystem::kDefault : compile the same as the current ROOT; TSystem::kDebug : compiled in debu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:81854,timeout,timeout,81854,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,1,['timeout'],['timeout']
Safety,"ue. void XmlReadBasic(Float_t& value); reads string from current xml node and convert it to Float_t value. void XmlReadBasic(Double_t& value); reads string from current xml node and convert it to Double_t value. void XmlReadBasic(Bool_t& value); reads string from current xml node and convert it to Bool_t value. void XmlReadBasic(UChar_t& value); reads string from current xml node and convert it to UChar_t value. void XmlReadBasic(UShort_t& value); reads string from current xml node and convert it to UShort_t value. void XmlReadBasic(UInt_t& value); reads string from current xml node and convert it to UInt_t value. void XmlReadBasic(ULong_t& value); reads string from current xml node and convert it to ULong_t value. void XmlReadBasic(ULong64_t& value); reads string from current xml node and convert it to ULong64_t value. const char* XmlReadValue(const char* name); read string value from current stack node. void SetFloatFormat(const char* fmt = ""%e""); Set printf format for float/double members, default ""%e""; This method is not thread-safe as it changes a global state. const char* GetFloatFormat(); return current printf format for float/double members, default ""%e"". Int_t ApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* object); Read one collection of objects from the buffer using the StreamerInfoLoopAction.; The collection needs to be a split TClonesArray or a split vector of pointers. Int_t ApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); Read one collection of objects from the buffer using the StreamerInfoLoopAction.; The collection needs to be a split TClonesArray or a split vector of pointers. Int_t ApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); Read one collection of objects from the buffer using the StreamerInfoLoopAction. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferXML.html:50702,safe,safe,50702,root/html602/TBufferXML.html,https://root.cern,https://root.cern/root/html602/TBufferXML.html,2,['safe'],['safe']
Safety,"ues modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimultaneous(const char* name, const char* title, RooAbsCategoryLValue& indexCat); Constructor with index category. PDFs associated with indexCat; states can be added after construction with the addPdf() function. RooSimultaneous can function without having a PDF associated; with every single state. The normalization in such cases is taken; from the number of registered PDFs, but getVal() will assert if; when called for an unregistered index state. RooSimultaneous(const char *name, const char *title, 				 const RooArgList& inPdfList, RooAbsCategoryLValue& inIndexCat); Constructor from index category and full list of PDFs.; In this constructor form, a PDF must be supplied for each indexCat state; to avoid ambiguities. The PDFS are associated in order with the state of the; index category as listed by the index categories type iterator. PDFs may not overlap (i.e. share any variables) with the index category (function). RooSimultaneous(const char *name, const char *title, 				 map<string,RooAbsPdf*> pdfMap, RooAbsCategoryLValue& inIndexCat). void initialize(RooAbsCategoryLValue& inIndexCat, std::map<std::string,RooAbsPdf*> pdfMap); First see if there are any RooSimultaneous input components. RooSimultaneous(const RooSimultaneous& other, const char* name = 0); Copy constructor. ~RooSimultaneous(); Destructor. RooAbsPdf* getPdf(const char* catName) const; Return the p.d.f associated with the given index category name. Bool_t addPdf(const RooAbsPdf& pdf, const char* catLabel); Associate given PDF with index category state label 'catLabel'.; The names state must be already defined in the index category. RooSimultaneous can function without having a PDF asso",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooSimultaneous.html:41374,avoid,avoid,41374,root/html526/RooSimultaneous.html,https://root.cern,https://root.cern/root/html526/RooSimultaneous.html,1,['avoid'],['avoid']
Safety,"ufSize = 32000); Attach the category index and label to as branches to the given; TTree. The index field will be attached as integer with name; <name>_idx, the label field will be attached as char[] with label; <name>_lbl. void fillTreeBranch(TTree& t); Fill tree branches associated with current object with current value. void setTreeBranchStatus(TTree& t, Bool_t active); (De)activate associate tree branch. void syncCache(const RooArgSet* set = 0); Explicitly synchronize RooAbsCategory internal cache. void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValueDirty = kTRUE); Copy the cached value from given source and raise dirty flag.; It is the callers responsability to ensure that the sources; cache is clean(valid) before this function is called, e.g. by; calling syncCache() on the source. const RooCatType* getOrdinal(UInt_t n, const char* rangeName = 0) const; Return state definition of ordinal nth defined state,; needed by the generator mechanism. RooAbsArg * createFundamental(const char* newname = 0) const; Create a RooCategory fundamental object with our properties. Bool_t isSignType(Bool_t mustHaveZero = kFALSE) const; Determine if category has 2 or 3 states with index values -1,0,1. Bool_t operator!=(Int_t index); { return !operator==(index);}. Bool_t operator!=(const char* label); { return !operator==(label);}. Bool_t operator!=(const RooAbsArg& other); { return !operator==(other);}. Int_t numTypes(const char* = 0) const; Return number of types defined (in range named rangeName if rangeName!=0). Bool_t isIntegrationSafeLValue(const RooArgSet* ) const; Is this l-value object safe for use as integration observable. Bool_t traceEvalHook(RooCatType ) const; coverity[PASS_BY_VALUE]. RooCatType evaluate() const. » Last changed: Fri Dec 2 14:26:33 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCategory.html:25383,safe,safe,25383,root/html532/RooAbsCategory.html,https://root.cern,https://root.cern/root/html532/RooAbsCategory.html,1,['safe'],['safe']
Safety,"uffer += bufferDecOffset; // Reset the buffer to be appropriate for this key.; 164 Int_t nout = fNbytes - fKeylen;; 165 Create(nout);; 166 fBufferRef->SetBufferOffset(bufferDecOffset);; 167 Streamer(*fBufferRef); //write key itself again; 168}; 169 ; 170////////////////////////////////////////////////////////////////////////////////; 171/// Create a TKey object to read keys.; 172/// Constructor called by TDirectoryFile::ReadKeys and by TFile::TFile.; 173/// A TKey object is created to read the keys structure itself.; 174 ; 175TKey::TKey(Long64_t pointer, Int_t nbytes, TDirectory* motherDir) : TNamed(); 176{; 177 Build(motherDir, """", pointer);; 178 ; 179 fSeekKey = pointer;; 180 fNbytes = nbytes;; 181 fBuffer = new char[nbytes];; 182 keyAbsNumber++; SetUniqueID(keyAbsNumber);; 183}; 184 ; 185////////////////////////////////////////////////////////////////////////////////; 186/// Create a TKey object with the specified name, title for the given class.; 187///; 188/// WARNING: in name avoid special characters like '^','$','.' that are used; 189/// by the regular expression parser (see TRegexp).; 190 ; 191TKey::TKey(const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory* motherDir); 192 : TNamed(name,title); 193{; 194 Build(motherDir, cl->GetName(), -1);; 195 ; 196 fKeylen = Sizeof();; 197 fObjlen = nbytes;; 198 Create(nbytes);; 199}; 200 ; 201////////////////////////////////////////////////////////////////////////////////; 202/// Create a TKey object with the specified name, title for the given class.; 203///; 204/// WARNING: in name avoid special characters like '^','$','.' that are used; 205/// by the regular expression parser (see TRegexp).; 206 ; 207TKey::TKey(const TString &name, const TString &title, const TClass *cl, Int_t nbytes, TDirectory* motherDir); 208 : TNamed(name,title); 209{; 210 Build(motherDir, cl->GetName(), -1);; 211 ; 212 fKeylen = Sizeof();; 213 fObjlen = nbytes;; 214 Create(nbytes);; 215}; 216 ; 217//////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:6487,avoid,avoid,6487,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['avoid'],['avoid']
Safety,"uffer object is filled via the class::Streamer function. -If the file is compressed (default) a second buffer is created to; hold the compressed buffer. -Reservation of the corresponding space in the file by looking; in the TFree list of free blocks of the file. -The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object.; By default, the buffersize will be taken from the average buffer size; of all objects written to the current file so far. If a name is specified, it will be the name of the key.; If name is not given, the name of the key will be the name as returned; by GetName(). The option can be a combination of:; kSingleKey, kOverwrite or kWriteDelete; Using the kOverwrite option a previous key with the same name is; overwritten. The previous key is deleted before writing the new object.; Using the kWriteDelete option a previous key with the same name is; deleted only after the new object has been written. This option; is safer than kOverwrite but it is slower.; The kSingleKey option is only used by TCollection::Write() to write; a container with a single key instead of each object in the container; with its own key. An object is read from the file into memory via TKey::Read() or; via TObject::Read(). The function returns the total number of bytes written to the file.; It returns 0 if the object cannot be written. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); Write this object to the current directory. For more see the; const version of this method. void Streamer(TBuffer& ); Stream an object of class TObject. void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). void Info(const char *location, const char *va_(fmt), ...); Issue info message. Use ""location"" to specify the method where the; warning occured. Accepts standard printf formatting arguments. void Warning(const char *location, const char *va_(fmt), ...); Issue warni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TObject.html:15822,safe,safer,15822,root/html534/TObject.html,https://root.cern,https://root.cern/root/html534/TObject.html,3,['safe'],['safer']
Safety,"uffer object is filled via the class::Streamer function. -If the file is compressed (default) a second buffer is created to; hold the compressed buffer. -Reservation of the corresponding space in the file by looking; in the TFree list of free blocks of the file. -The buffer is written to the file. Bufsize can be given to force a given buffer size to write this object.; By default, the buffersize will be taken from the average buffer size; of all objects written to the current file so far. If a name is specified, it will be the name of the key.; If name is not given, the name of the key will be the name as returned; by GetName(). The option can be a combination of:; kSingleKey, kOverwrite or kWriteDelete; Using the kOverwrite option a previous key with the same name is; overwritten. The previous key is deleted before writing the new object.; Using the kWriteDelete option a previous key with the same name is; deleted only after the new object has been written. This option; is safer than kOverwrite but it is slower.; The kSingleKey option is only used by TCollection::Write() to write; a container with a single key instead of each object in the container; with its own key. An object is read from the file into memory via TKey::Read() or; via TObject::Read(). The function returns the total number of bytes written to the file.; It returns 0 if the object cannot be written. Int_t Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); Write this object to the current directory. For more see the; const version of this method. void Streamer(TBuffer& b); Stream an object of class TObject. void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). void Info(const char *location, const char *va_(fmt), ...); Issue info message. Use ""location"" to specify the method where the; warning occured. Accepts standard printf formatting arguments. void Warning(const char *location, const char *va_(fmt), ...); Issue warn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObject.html:15774,safe,safer,15774,root/html528/TObject.html,https://root.cern,https://root.cern/root/html528/TObject.html,3,['safe'],['safer']
Safety,"um of weight*X; Double_tfTsumwx2Total Sum of weight*X*X; TAxisfXaxisX axis descriptor; TAxisfYaxisY axis descriptor; TAxisfZaxisZ axis descriptor; static Bool_tfgAddDirectory!flag to add histograms to the directory; static Int_tfgBufferSize!default buffer size for automatic histograms; static Bool_tfgDefaultSumw2!flag to call TH1::Sumw2 automatically at histogram creation time; static Bool_tfgStatOverflows!flag to use under/overflows in statistics. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH1(); -*-*-*-*-*-*-*-*-*Histogram default constructor*-*-*-*-*-*-*-*-*-*-*-*-*. ~TH1(); -*-*-*-*-*-*-*-*-*Histogram default destructor*-*-*-*-*-*-*-*-*-*-*-*-*-*. TH1(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup); -*-*-*-*-*-*-*Normal constructor for fix bin size histograms*-*-*-*-*-*-*. Creates the main histogram structure:; name : name of histogram (avoid blanks); title : histogram title; if title is of the form ""stringt;stringx;stringy;stringz""; the histogram title is set to stringt,; the x axis title to stringy, the y axis title to stringy, etc.; nbins : number of bins; xlow : low edge of first bin; xup : upper edge of last bin (not included in last bin). When an histogram is created, it is automatically added to the list; of special objects in the current directory.; To find the pointer to this histogram in the current directory; by its name, do:; TH1F *h1 = (TH1F*)gDirectory->FindObject(name);. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. TH1(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins); -*-*-*-*-*Normal constructor for variable bin size histograms*-*-*-*-*-*-*. Creates the main histogram structure:; name : name of histogram (avoid blanks); title : histogram title; if title is of the form ""stringt;stringx;stringy;stringz""; the histogram title is set to stringt,; the x axis title to stringx, the y axis title to stringy, etc.; nbins : numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:37277,avoid,avoid,37277,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,4,['avoid'],['avoid']
Safety,"um. Meth. A372, 469 (1996) [hep-ph/9509307]. TSVDUnfold implements the singular value decomposition based unfolding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum.; ; The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition.; ; Monte Carlo inputs:; ; xini: true underlying spectrum (TH1D, n bins); bini: reconstructed spectrum (TH1D, n bins); Adet: response matrix (TH2D, nxn bins); ; Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitly, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis.; ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by; . TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; . where kreg determines the regularisation of the unfolding. In general, overregularisation (too small kreg) will bias the unfolded spectrum towards the Monte Carlo input, while underregularisation (too large kreg) will lead to large fluctuations in the unfolded spectrum. The optimal regularisation can be determined following guidelines in Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] using the distribution of the |d_i|<\tt> that can be obtained by tsvdunf->GetD() and/or using pseudo-experiments.; ; Covariance matrices on the measured spectrum (for either the total uncertai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSVDUnfold.html:1260,detect,detector,1260,root/html534/TSVDUnfold.html,https://root.cern,https://root.cern/root/html534/TSVDUnfold.html,3,['detect'],['detector']
Safety,umber of events in test statistic calculation; Int_tRooAbsTestStatistic::_nGofNumber of sub-contexts; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; Int_tRooAbsTestStatistic::_numSetsTotal number of partitions in parallel calculation mode; Double_tRooAbsTestStatistic::_offset! Offset; Double_tRooAbsTestStatistic::_offsetCarry! avoids loss of precision; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_optimized!; RooAbsData*RooAbsOptTestStatistic::_origDataOriginal data; RooAbsReal*RooAbsOptTestStatistic::_origFuncOriginal function; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; RooRefArrayRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches; TStringRooAbsOptTestStatistic::_sealNoticeUser-defined notice shown when reading a sealed likelihood; Bool_tRooAbsOptTestStatistic::_sealedIs test statistic sealed -- i.e. no access to data; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_tRooAbsTestSta,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooChi2Var.html:42450,avoid,avoids,42450,root/html602/RooChi2Var.html,https://root.cern,https://root.cern/root/html602/RooChi2Var.html,4,['avoid'],['avoids']
Safety,"umbers.Definition TAxis.cxx:1052; TAxis::GetBinWidthvirtual Double_t GetBinWidth(Int_t bin) constReturn bin width.Definition TAxis.cxx:540; TAxis::GetBinUpEdgevirtual Double_t GetBinUpEdge(Int_t bin) constReturn up edge of bin.Definition TAxis.cxx:528; TAxis::GetFirstInt_t GetFirst() constReturn first bin on the axis i.e.Definition TAxis.cxx:458; TAxis::GetLabelsTHashList * GetLabels() constDefinition TAxis.h:121; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::GetNewROOT::NewFunc_t GetNew() constReturn the wrapper around new ThisClass().Definition TClass.cxx:7514; TCollectionCollection abstract base class.Definition TCollection.h:65; TCollection::UseRWLockvirtual bool UseRWLock(Bool_t enable=true)Set this collection to use a RW lock upon access, making it thread safe.Definition TCollection.cxx:761; TCollection::AddAllvirtual void AddAll(const TCollection *col)Add all objects from collection col to this collection.Definition TCollection.cxx:195; TCollection::IsEmptyvirtual Bool_t IsEmpty() constDefinition TCollection.h:188; TCollection::CloneTObject * Clone(const char *newname="""") const overrideMake a clone of an collection using the Streamer facility.Definition TCollection.cxx:263; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::Appendvirtual void Append(TObject *obj, Bool_t replace=kFALSE)Append object to this directory.Definition TDirectory.cxx:199; TDirectory::Removevirtual TObject * Remove(TObject *)Remove an object from the in-memory list.Definition TDirectory.cxx:1212; TEnv::GetValuevirtual Int_t GetValue(const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:425304,safe,safe,425304,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['safe'],['safe']
Safety,"ume *)next())) {; 2514 if (!vol->GetVoxels()); 2515 continue;; 2516 out << "" vol = gGeoManager->GetVolume(\"""" << vol->GetName() << ""\"");"" << std::endl;; 2517 cyltype = vol->OptimizeVoxels();; 2518 if (cyltype) {; 2519 out << "" vol->SetCylVoxels();"" << std::endl;; 2520 } else {; 2521 out << "" vol->SetCylVoxels(kFALSE);"" << std::endl;; 2522 }; 2523 }; 2524 out << ""}"" << std::endl;; 2525 out.close();; 2526}; 2527////////////////////////////////////////////////////////////////////////////////; 2528/// Parse a string boolean expression and do a syntax check. Find top; 2529/// level boolean operator and returns its type. Fill the two; 2530/// substrings to which this operator applies. The returned integer is :; 2531/// - -1 : parse error; 2532/// - 0 : no boolean operator; 2533/// - 1 : union - represented as '+' in expression; 2534/// - 2 : difference (subtraction) - represented as '-' in expression; 2535/// - 3 : intersection - represented as '*' in expression.; 2536/// Parentheses should be used to avoid ambiguities. For instance :; 2537/// - A+B-C will be interpreted as (A+B)-C which is not the same as A+(B-C); 2538/// eliminate not needed parentheses; 2539 ; 2540Int_t TGeoManager::Parse(const char *expr, TString &expr1, TString &expr2, TString &expr3); 2541{; 2542 TString startstr(expr);; 2543 Int_t len = startstr.Length();; 2544 Int_t i;; 2545 TString e0 = """";; 2546 expr3 = """";; 2547 // eliminate blanks; 2548 for (i = 0; i < len; i++) {; 2549 if (startstr(i) == ' '); 2550 continue;; 2551 e0 += startstr(i, 1);; 2552 }; 2553 Int_t level = 0;; 2554 Int_t levmin = 999;; 2555 Int_t boolop = 0;; 2556 Int_t indop = 0;; 2557 Int_t iloop = 1;; 2558 Int_t lastop = 0;; 2559 Int_t lastdp = 0;; 2560 Int_t lastpp = 0;; 2561 Bool_t foundmat = kFALSE;; 2562 // check/eliminate parentheses; 2563 while (iloop == 1) {; 2564 iloop = 0;; 2565 lastop = 0;; 2566 lastdp = 0;; 2567 lastpp = 0;; 2568 len = e0.Length();; 2569 for (i = 0; i < len; i++) {; 2570 if (e0(i) == '(') {; 2571 if (!lev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:90826,avoid,avoid,90826,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['avoid'],['avoid']
Safety,"uncation check for ebuf */; 9137 ebuf,; 9138 ebuf_len,; 9139 ""socket(): %s"",; 9140 strerror(ERRNO));; 9141 return 0;; 9142 }; 9143 ; 9144 if (0 != set_non_blocking_mode(*sock)) {; 9145 mg_snprintf(NULL,; 9146 NULL, /* No truncation check for ebuf */; 9147 ebuf,; 9148 ebuf_len,; 9149 ""Cannot set socket to non-blocking: %s"",; 9150 strerror(ERRNO));; 9151 closesocket(*sock);; 9152 *sock = INVALID_SOCKET;; 9153 return 0;; 9154 }; 9155 ; 9156 set_close_on_exec(*sock, NULL, ctx);; 9157 ; 9158 if (ip_ver == 4) {; 9159 /* connected with IPv4 */; 9160 conn_ret = connect(*sock,; 9161 (struct sockaddr *)((void *)&sa->sin),; 9162 sizeof(sa->sin));; 9163 }; 9164#if defined(USE_IPV6); 9165 else if (ip_ver == 6) {; 9166 /* connected with IPv6 */; 9167 conn_ret = connect(*sock,; 9168 (struct sockaddr *)((void *)&sa->sin6),; 9169 sizeof(sa->sin6));; 9170 }; 9171#endif; 9172#if defined(USE_X_DOM_SOCKET); 9173 else if (ip_ver == -99) {; 9174 /* connected to domain socket */; 9175 conn_ret = connect(*sock,; 9176 (struct sockaddr *)((void *)&sa->sun),; 9177 sizeof(sa->sun));; 9178 }; 9179#endif; 9180 ; 9181 if (conn_ret != 0) {; 9182 sockerr = ERRNO;; 9183 }; 9184 ; 9185#if defined(_WIN32); 9186 if ((conn_ret != 0) && (sockerr == WSAEWOULDBLOCK)) {; 9187#else; 9188 if ((conn_ret != 0) && (sockerr == EINPROGRESS)) {; 9189#endif; 9190 /* Data for getsockopt */; 9191 void *psockerr = &sockerr;; 9192 int ret;; 9193 ; 9194#if defined(_WIN32); 9195 int len = (int)sizeof(sockerr);; 9196#else; 9197 socklen_t len = (socklen_t)sizeof(sockerr);; 9198#endif; 9199 ; 9200 /* Data for poll */; 9201 struct mg_pollfd pfd[1];; 9202 int pollres;; 9203 int ms_wait = 10000; /* 10 second timeout */; 9204 stop_flag_t nonstop;; 9205 STOP_FLAG_ASSIGN(&nonstop, 0);; 9206 ; 9207 /* For a non-blocking socket, the connect sequence is:; 9208 * 1) call connect (will not block); 9209 * 2) wait until the socket is ready for writing (select or poll); 9210 * 3) check connection state with getsockopt; 9211 */; 9212 pfd[0].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:263940,timeout,timeout,263940,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['timeout'],['timeout']
Safety,"uncation check for ebuf */; 9138 ebuf,; 9139 ebuf_len,; 9140 ""socket(): %s"",; 9141 strerror(ERRNO));; 9142 return 0;; 9143 }; 9144 ; 9145 if (0 != set_non_blocking_mode(*sock)) {; 9146 mg_snprintf(NULL,; 9147 NULL, /* No truncation check for ebuf */; 9148 ebuf,; 9149 ebuf_len,; 9150 ""Cannot set socket to non-blocking: %s"",; 9151 strerror(ERRNO));; 9152 closesocket(*sock);; 9153 *sock = INVALID_SOCKET;; 9154 return 0;; 9155 }; 9156 ; 9157 set_close_on_exec(*sock, NULL, ctx);; 9158 ; 9159 if (ip_ver == 4) {; 9160 /* connected with IPv4 */; 9161 conn_ret = connect(*sock,; 9162 (struct sockaddr *)((void *)&sa->sin),; 9163 sizeof(sa->sin));; 9164 }; 9165#if defined(USE_IPV6); 9166 else if (ip_ver == 6) {; 9167 /* connected with IPv6 */; 9168 conn_ret = connect(*sock,; 9169 (struct sockaddr *)((void *)&sa->sin6),; 9170 sizeof(sa->sin6));; 9171 }; 9172#endif; 9173#if defined(USE_X_DOM_SOCKET); 9174 else if (ip_ver == -99) {; 9175 /* connected to domain socket */; 9176 conn_ret = connect(*sock,; 9177 (struct sockaddr *)((void *)&sa->sun),; 9178 sizeof(sa->sun));; 9179 }; 9180#endif; 9181 ; 9182 if (conn_ret != 0) {; 9183 sockerr = ERRNO;; 9184 }; 9185 ; 9186#if defined(_WIN32); 9187 if ((conn_ret != 0) && (sockerr == WSAEWOULDBLOCK)) {; 9188#else; 9189 if ((conn_ret != 0) && (sockerr == EINPROGRESS)) {; 9190#endif; 9191 /* Data for getsockopt */; 9192 void *psockerr = &sockerr;; 9193 int ret;; 9194 ; 9195#if defined(_WIN32); 9196 int len = (int)sizeof(sockerr);; 9197#else; 9198 socklen_t len = (socklen_t)sizeof(sockerr);; 9199#endif; 9200 ; 9201 /* Data for poll */; 9202 struct mg_pollfd pfd[1];; 9203 int pollres;; 9204 int ms_wait = 10000; /* 10 second timeout */; 9205 stop_flag_t nonstop;; 9206 STOP_FLAG_ASSIGN(&nonstop, 0);; 9207 ; 9208 /* For a non-blocking socket, the connect sequence is:; 9209 * 1) call connect (will not block); 9210 * 2) wait until the socket is ready for writing (select or poll); 9211 * 3) check connection state with getsockopt; 9212 */; 9213 pfd[0].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:263972,timeout,timeout,263972,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['timeout'],['timeout']
Safety,"unction ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; void SetParameters (const double *p) override;  Set the parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< double >; double operator() (const double *x) const;  ; double operator() (const double *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  . Private Member Functions; double DoEvalPar (const double *x, const double *p) const override;  evaluate the function given values and parameters (requested interface) ;  . Private Attributes; unsigned int fDim;  ; FuncPtr fFunc;  ; std::vector< double > fParams;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< double >; typedef IBaseFunctionMultiDimTempl< double > BaseFunc;  ;  Public Types inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Math/WrappedParamFunction.h>. Inheritance diagram for ROOT::Math::WrappedParamFunction< FuncPtr >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunction.html:2569,avoid,avoid,2569,doc/master/classROOT_1_1Math_1_1WrappedParamFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunction.html,1,['avoid'],['avoid']
Safety,"unction ;  ; unsigned int NDim () const override;  Retrieve the dimension of the function. ;  ; unsigned int NPar () const override;  Return the number of Parameters. ;  ; const double * Parameters () const override;  Access the parameter values. ;  ; void SetParameters (const double *p) override;  Set the parameter values. ;  ;  Public Member Functions inherited from ROOT::Math::IParametricFunctionMultiDimTempl< double >; double operator() (const double *x) const;  ; double operator() (const double *x, const double *p) const;  Evaluate function at a point x and for given parameters p. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseFunctionMultiDimTempl< T >; virtual ~IBaseFunctionMultiDimTempl ()=default;  ; virtual bool HasGradient () const;  ; T operator() (const T *x) const;  Evaluate the function at a point x[]. ;  ;  Public Member Functions inherited from ROOT::Math::IBaseParam; virtual ~IBaseParam ();  Virtual Destructor (no operations) ;  ; virtual std::string ParameterName (unsigned int i) const;  Return the name of the i-th parameter (starting from zero) Overwrite if want to avoid the default name (""Par_0, Par_1, ..."") ;  . Private Member Functions;  WrappedParamFunctionGen (const WrappedParamFunctionGen &)=delete;  ; double DoEval (const double *x) const override;  evaluate the function (re-implement for being more efficient) ;  ; double DoEvalPar (const double *x, const double *p) const override;  implement the required IParamFunction interface ;  ; void DoInit ();  ; WrappedParamFunctionGen & operator= (const WrappedParamFunctionGen &)=delete;  ; void SetParValues (unsigned int npar, const double *p) const;  . Private Attributes; unsigned int fDim;  ; FuncPtr fFunc;  ; std::vector< double > fParams;  ; std::vector< unsigned int > fParIndices;  ; std::vector< unsigned int > fVarIndices;  ; std::vector< double > fX;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IParametricFunctionMultiDimTempl< double >; typedef ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html:2731,avoid,avoid,2731,doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1WrappedParamFunctionGen.html,1,['avoid'],['avoid']
