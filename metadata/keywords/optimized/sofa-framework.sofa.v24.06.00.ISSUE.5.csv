quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,"; update();; setDirtyOutputs();; sofa::core::objectmodel::IdleEvent ie;; sofa::simulation::PropagateEventVisitor v(; sofa::core::ExecParams::defaultInstance(), &ie);; this->getContext()->getRootContext()->executeVisitor(&v);; }; ``` . This allows for a complete and instant refresh of all components taking as an input the dirty outputs without calling the previous components in the pipeline again.; Limitations are that those following components have to be initialized AFTER (in terms of scene graph, so either in subnodes, or after the current engine, in the same node). Another feature that I don't like much but that was requested by someone who was supposed to use and contribute to my plugin but never did, is the ""autolink"" feature:. <MySofaORComponent name=""mycomp"" autolink=""true"" />. This field allows you to *implicitely* link your data, so that you could avoid setting dozens of fields in your scene description file. The way if works is quite basic:; If autolink is true, then when calling addInput, the internal code checks if the variable has been set. If it has been it doesn't do anything, but if it has:; a previous ImplicitDataEngine in the graph is searched for and if it contains a matching variable with a similar name, it binds them together by calling setParent() on the data. If not, the next engine is searched backwards and the same operation is done, recursively until reaching the first engine in the current node. If AUTOLINK is set to true, then a big fat msg_advice() is printed in the console, warning the user that this implicit binding can potentially do things they do not expect...; Limitations are, again, that:; - It is not possible to bind implicitely datas that aren't in the same node, or datas that are declared AFTER the current engine (regarding the scene graph); - The data field name has to be EXACTLY as expected (a input named ""points"" will only be bound to an output named EXACTLY ""points_out""... . So that's it, It's not perfect but does the job w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:3602,variab,variable,3602,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816,1,['variab'],['variable']
Modifiability,"; }; ```. To avoid breaking (a lot of) code, a compatibility layer has been implemented, so the existing code still works:; ```; #include <sofa/helper/gl/Texture.h; ...; sofa::helper::gl::Texture = ....;; ```; and will either:; - **create an error** if you did not link against Sofa.GL; - **generate a deprecation warning** if you did link but still using old paths.; So for 99.999% of code, all you have to do is to link against Sofa.GL (or even nothing if you code is already linking against modules linking now against Sofa.GL like SofaOpenGlVisual); ; ## Real breaking code; ONE function has been removed from core::visual::VisualParam :; helper::gl::Framebuffer getFramebuffer(); which was used to get the current bound framebuffer in OpenGL (getting a Sofa utility class Framebuffer).; Two reasons why it has been removed:; - nobody uses it in all the repository; - one can just use a real OpenGL function to get the bound framebuffer, with ; ```; glGetIntegerv(GL_FRAMEBUFFER_BINDING, &result);; ```; for example. # Notes; The compilation of Sofa.GL is itself enabled with the CMake variable SOFA_NO_OPENGL (weird name but I wanted to keep the same ""reasoning"" for now); Use of SOFA_NO_OPENGL macro in the code has been removed from the Sofa codebase only, not the plugins (in a future PR). 😅. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1649:3614,variab,variable,3614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1649,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,"<!-- Needed to use components [ParallelBruteForceBroadPhase, ParallelBVHNarrowPhase, ]--> ; <RequiredPlugin name='SofaConstraint'/> <!-- Needed to use components [LCPConstraintSolver, FreeMotionAnimationLoop, UncoupledConstraintCorrection, ]--> ; <RequiredPlugin name='SofaImplicitOdeSolver'/> <!-- Needed to use components [EulerImplicitSolver, ]--> ; <RequiredPlugin name='SofaLoader'/> <!-- Needed to use components [MeshObjLoader, ]--> ; <RequiredPlugin name='SofaMeshCollision'/> <!-- Needed to use components [TriangleCollisionModel, LineCollisionModel, PointCollisionModel, ]--> ; <RequiredPlugin name='SofaOpenglVisual'/> <!-- Needed to use components [LightManager, SpotLight, OglModel, ]--> ; <RequiredPlugin name='SofaSimpleFem'/> <!-- Needed to use components [HexahedronFEMForceField, ]--> ; ```. # After; ```; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins. ; Your scene may not work on a sofa environment with different pre-loaded plugins. ; To fix your scene and remove this warning you just need to cut & paste the following lines at the beginning of your scene (if it is a .scn): ; <RequiredPlugin name='MultiThreading'/> <!-- Needed to use components [ParallelBVHNarrowPhase, ParallelBruteForceBroadPhase]--> ; <RequiredPlugin name='SofaConstraint'/> <!-- Needed to use components [FreeMotionAnimationLoop, LCPConstraintSolver, UncoupledConstraintCorrection]--> ; <RequiredPlugin name='SofaImplicitOdeSolver'/> <!-- Needed to use components [EulerImplicitSolver]--> ; <RequiredPlugin name='SofaLoader'/> <!-- Needed to use components [MeshObjLoader]--> ; <RequiredPlugin name='SofaMeshCollision'/> <!-- Needed to use components [LineCollisionModel, PointCollisionModel, TriangleCollisionModel]--> ; <RequiredPlugin name='SofaOpenglVisual'/> <!-- Needed to use components [LightManager, OglModel, SpotLight]--> ; <RequiredPlugin name='SofaSimpleFem'/> <!-- Needed to use components [HexahedronFE",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2111:1560,plugin,plugins,1560,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2111,1,['plugin'],['plugins']
Modifiability,"<$> (29976 times, avg 0 ms); 19938 ms: sofa::core::objectmodel::TData<$>::read (5854 times, avg 3 ms); 19900 ms: std::__cxx11::basic_string<$>::basic_string (5840 times, avg 3 ms); 19611 ms: std::is_nothrow_copy_constructible<$> (18814 times, avg 1 ms). **** Functions that took longest to compile:; 2701 ms: __cxx_global_var_init.8 (sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/ComponentChange.cpp); 2442 ms: sofa::component::topology::SubsetTopologicalMapping::updateTopologicalMappingTopDown() (sofa/modules/SofaTopologyMapping/SubsetTopologicalMapping.cpp); 2423 ms: sofa::component::topology::TriangleSetTopologyAlgorithms<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3ul,... (sofa/SofaKernel/modules/SofaBaseTopology/TriangleSetTopologyAlgorithms.cpp); 1839 ms: _GLOBAL__sub_I_TransformEngine_test.cpp (sofa/modules/SofaGeneralEngine/SofaGeneralEngine_test/TransformEngine_test.cpp); 1813 ms: cimg_library::CImg<unsigned char>::get_resize(int, int, int, int, int, unsigned int, float, float, float, float) const (sofa/applications/plugins/CImgPlugin/src/CImgPlugin/ImageCImg.cpp); 1797 ms: _GLOBAL__sub_I_PlaneForceField_test.cpp (sofa/modules/SofaBoundaryCondition/SofaBoundaryCondition_test/PlaneForceField_test.cpp); 1679 ms: sofa::component::engine::GenerateSphere<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3ul, double>, sofa::d... (sofa/modules/SofaGeneralEngine/GenerateSphere.cpp); 1584 ms: sofa::component::engine::GenerateCylinder<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3ul, double>, sofa:... (sofa/modules/SofaGeneralEngine/GenerateCylinder.cpp); 1373 ms: sofa::component::misc::MeshTetraStuffing::init() (sofa/modules/SofaMiscExtra/MeshTetraStuffing.cpp); 1282 ms: cimg_library::CImgList<unsigned char>::_load_cimg(_IO_FILE*, char const*) (sofa/applications/plugins/CImgPlugin/src/CImgPlugin/ImageCImg.cpp); 1222 ms: cimg_library::CImg<unsigned char>::_load_pandore(_IO_FILE*, char const*) (sofa/applications/plugins/CImgPlugin/src/C",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:15880,plugin,plugins,15880,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['plugin'],['plugins']
Modifiability,"=5., speed=5.,; listening=True, controlledInstrument=0); CatheterMechanics.addObject('LinearSolverConstraintCorrection',wire_optimization='true', printLog=False); CatheterMechanics.addObject('FixedConstraint', indices=0, name='FixedConstraint'); CatheterMechanics.addObject('RestShapeSpringsForceField', points='@DeployController.indexFirstNode', angularStiffness=1e8, stiffness=1e8). VisuCatheter = rootNode.addChild('VisuCatheter'); VisuCatheter.activated = True; VisuCatheter.addObject('MechanicalObject', name='Quads'); VisuCatheter.addObject('QuadSetTopologyContainer', name='ContainerGuide'); VisuCatheter.addObject('QuadSetTopologyModifier', name='Modifier'); VisuCatheter.addObject('QuadSetGeometryAlgorithms', name='GeomAlgo', template='Vec3d'); VisuCatheter.addObject('Edge2QuadTopologicalMapping', radius='1', listening='true',; input='@../../topoLines_guide/meshLinesGuide',; nbPointsOnEachCircle='10', flipNormals='true', output='@ContainerGuide'); VisuCatheter.addObject('AdaptiveBeamMapping', interpolation='@../InterpolGuide',; name='visuMapGuide', output='@Quads', isMechanical=False,; input='@../DOFs', useCurvAbs=True, printLog=False). # Ogl model; VisuOgl = VisuCatheter.addChild('VisuOgl'); VisuOgl.addObject('OglModel', color=[0.2, 0.2, 0.8], quads='@../ContainerCatheter.quads',; material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20',; name='Visual'); VisuOgl.addObject('IdentityMapping', input='@../Quads', output='@Visual'). CathterCollis = CathterMechanics.addChild('CollisionModel'); CathterCollis.activated = True; CathterCollis.addObject('EdgeSetTopologyContainer', name='collisEdgeSet'); CathterCollis.addObject('EdgeSetTopologyModifier', name='colliseEdgeModifier'); CathterCollis.addObject('MechanicalObject', name='CollisionDOFs'); CathterCollis.addObject('MultiAdaptiveBeamMapping',controller='../DeployController', useCurvAbs=True, printLog=False, name='collisMap'); CathterCo",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463:3739,Adapt,AdaptiveBeamMapping,3739,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463,1,['Adapt'],['AdaptiveBeamMapping']
Modifiability,"> ### Problem; > **Description** hello, I wanted to use Sofa 23.06.00 in M1 Mac Book Pro But I can not use Sofa. This error message indicates: (have 'x86_64', need 'arm64e' or 'arm64')) I'd like to know the solution. I want to use Sofa 23.06.00; > ; > **Steps to reproduce** < LIST THE STEPS TO REPRODUCE YOUR PROBLEM HERE >; > ; > 1. install anaconda and make virtual environment; > 2. install sofa framework; > 3. define the environment variables; > 4. import Sofa in python; > ; > **Expected behavior** < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >; > ; > Success importing Sofa in python without any error.; > ; > ### Environment; > **Context**; > ; > * System: Mac OS X 14.4.1 (23E224); > * Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); > * State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >; > ; > **Command called**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudS",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:439,variab,variables,439,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['variab'],['variables']
Modifiability,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:573,plugin,plugins,573,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797,1,['plugin'],['plugins']
Modifiability,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:170,config,config,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503,3,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"> ; > ; > @fspadoni do you think this could be breaking on your side ?. He send a mail : ""It's OK, no problem to remove the SMP code , my plugin doesn't link to it.""; So I guess we are good to go 😚",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1613#issuecomment-744741888:138,plugin,plugin,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1613#issuecomment-744741888,1,['plugin'],['plugin']
Modifiability,"> ; > ; > Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; > So I would say that there is a problem with the nightlies (and the CI is correct). But SofaValidation does not link on SofaGeneralEngine nor SofaBoundaryCondition :raised_eyebrow:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632:20,Flexible,Flexible,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722977632,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,> ; > ; > Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case. Yes but with a simpler plugin (MyAwesomeComponents). `find_package(SofaFramework)` passed 👌,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655:59,plugin,plugin,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655,2,['plugin'],['plugin']
Modifiability,"> ; > ; > I suspect a Static Initialization Order Fiasco. I am not sure your changes really fixes the issue. It may be because your changes changed the initialization order. Luckily, it's the good one, but other changes could modify the initialization order later. It's just a guess... Thank you for the keywords `Static Initialization Order Fiasco` , I never really encountered such a problem before (lucky I guess).; It seems that the fact that the initialization of the static constexpr variable is done at compilation time (oh really?) solves the SIOF (e.g https://www.py4u.net/discuss/88472)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929328909:490,variab,variable,490,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929328909,1,['variab'],['variable']
Modifiability,"> ; > ; > Is this plugin not supported by the CI? It should have failed if it was. `-DPLUGIN_SENSABLE=OFF`. If I remember well, the OpenHaptics/Geomagic SDK is bothersome (I am polite 😇) to install (more so on the CI nodes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846414016:18,plugin,plugin,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846414016,1,['plugin'],['plugin']
Modifiability,"> ; > ; > Very nice work @fredroy 👏 👏 👏; > ; > I have 2 side questions:; > ; > * shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; > . Hum, could be in the project, as there is one executable (standalone glfw launcher), but there is also one library (which can be used for runSofa as a plugin; this one is very similar to SofaQuiQt if you want). > * is it planned to host the repository in sofa-framework organization ?. Of course, my repo was more a sandbox, once this is a bit tested by people, we can move it into the sofa-framework organization.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590:151,plugin,plugins,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-843017590,3,"['plugin', 'sandbox']","['plugin', 'plugins', 'sandbox']"
Modifiability,"> > > But it is unclear to me if the implementation proposed in the PR is enough because:; > > > ; > > > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",; > > ; > > ; > > Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr); > ; > What I did in the matrix assembly branch: 2 classes:; > ; > 1. An abstract class describing the API; > ; > 2. Another class deriving from the interface **AND** from BaseObject. In my case, I needed to add the object in the graph. I see ( a pure interface and then a kind of sofaobject interface)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228130020:134,inherit,inheriting,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228130020,1,['inherit'],['inheriting']
Modifiability,"> > @alxbilger you did not keep the (git) history of the files when moving to the new plugin.; > ; > It's such a pain. I suspect you don't like me much to request such a task. . 🥰. > In this branch https://github.com/alxbilger/CSparseSolvers/tree/move_csparse_files, I have the same plugin but with all the SOFA history. I guess it's not really what we want neither. Do you know how to proceed?. I would proceed like this:; - in a fresh clone of SOFA, on master move (git mv) all the CSParse_plugin related files into the new folder (application/plugins/cparseplugin), commit; - use git filter-repo, see the doc: https://docs.github.com/en/get-started/using-git/splitting-a-subfolder-out-into-a-new-repository. This will only keep the history of the files you kept in the folder.; - push all of that into the new repo. Credit to @hugtalbot https://github.com/sofa-framework/sofa/issues/1442",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1782307176:86,plugin,plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1782307176,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"> > And by curiosity, why are the methods of the SofaPhysicsAPI class not defined in SofaPhysicAPI.cpp?; > ; > Very good question... I'm not sure, I think it was done so SofaPhysicsAPI can be shipped/share easily? or to look like an interface ? @fredroy any idea?. At that time, it was to give a public API to any external program using SOFA as a lib (no exposition whatsoever to any SOFA code).; You just needed this .h and the compiled libs.; ; Note that because of the config.h stuff, this is not the case anymore 🙊",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1336769813:472,config,config,472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3519#issuecomment-1336769813,1,['config'],['config']
Modifiability,"> > But it is unclear to me if the implementation proposed in the PR is enough because:; > > ; > > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",; > ; > Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr). What I did in the matrix assembly branch: 2 classes:; 1) An abstract class describing the API; 2) Another class deriving from the interface **AND** from BaseObject. In my case, I needed to add the object in the graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228125246:128,inherit,inheriting,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1228125246,1,['inherit'],['inheriting']
Modifiability,"> > Did you try to compile with `SReal=float` ? 🙊; > ; > Nope, I don't like to hurt myself. I did 🤐 with a minimal configuration and it *compiles* well",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3915#issuecomment-1579638820:115,config,configuration,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3915#issuecomment-1579638820,1,['config'],['configuration']
Modifiability,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:171,plugin,plugin,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910,4,"['config', 'plugin', 'variab']","['config', 'plugin', 'variable']"
Modifiability,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:496,extend,extend,496,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548,1,['extend'],['extend']
Modifiability,"> @EulalieCoevoet apparently one of the change does change something, some (all?) scenes using this plugin) crashes:; > so maybe the typo was not one... Oops I forgot that `input2` was an option. ; The problem should be fixed now : in `applyJT()` I moved the `m_fromRootModel->read()` after the check that it is not a nullptr.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1490409382:100,plugin,plugin,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1490409382,1,['plugin'],['plugin']
Modifiability,"> @alxbilger `distanceLMConstraint` depends on LMConstraint which is soon leaving us :) so I do not really care; > ; > > What about the backward compatibility with old names?; > ; > good point, but not sure howto ... any idea?. You can introduce a map, mapping the old names to the new names. When you detect an old name, you warn that there is a new name and you change the variable value. It can be done in `DefaultContactManager::init()` or parse",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984464024:375,variab,variable,375,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2522#issuecomment-984464024,1,['variab'],['variable']
Modifiability,"> @alxbilger you did not keep the (git) history of the files when moving to the new plugin. It's such a pain. I suspect you don't like me much to request such a task. In this branch https://github.com/alxbilger/CSparseSolvers/tree/move_csparse_files, I have the same plugin but with all the SOFA history. I guess it's not really what we want neither. Do you know how to proceed?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780797420:84,plugin,plugin,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780797420,2,['plugin'],['plugin']
Modifiability,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:64,refactor,refactor,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232,1,['refactor'],['refactor']
Modifiability,"> @fredroy Is it possible in a plugin?. Hum you are right, it is possible to do it in a plugin but the CI (jenkins) wont do it automatically I think 👺",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717186150:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717186150,2,['plugin'],['plugin']
Modifiability,"> @fredroy It's good to know that it does not apply in case of `constexpr`.; > You just kept a static variable (`InvalidSet`), which is not `constexpr`. SIOF can apply. `InvalidSet` constructor can be `constexpr` only from C++20. You dont miss a thing 😆 Indeed std::vector constructor is constexpr in c++20 only.; But luckily in our case, InvalidSet is supposed to be an empty vector, so it will be zero-construct in any case. (so we will get an empty vector whatever the init order is)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929895463:102,variab,variable,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929895463,1,['variab'],['variable']
Modifiability,> @fredroy Totally removed or in an external plugin?. I would put it in an external plugin (but just for storage so kind of removed in the same time).; We dont like removing code 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085983504:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085983504,2,['plugin'],['plugin']
Modifiability,"> @fredroy as a matter of fact, I already saw people using the plugin manager UI. I stand corrected then 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2265228178:63,plugin,plugin,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2265228178,1,['plugin'],['plugin']
Modifiability,"> @guparan @fredroy I guess this plugin is not compile by the CI. Would it make sense to add it?. IMO, this plugin was doomed to be removed in a near future. But we can still compile on the CI it if necessary",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085910367:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085910367,2,['plugin'],['plugin']
Modifiability,"> @jnbrunet no existing example scene to my knowledge; > ; > other comments taken into account +1 thanks to the reviewers!; > ; > PS: plugin is listed in the CMakeLists in _applications/plugins_. Hey @hugtalbot . From a quick grep, I got these scene files :. - examples/Components/constraint/Compare_FixConstraints.scn; - examples/Components/constraint/DOFBlockerLMConstraint.scn; - examples/Components/constraint/DistanceLMConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint.scn; - examples/Components/constraint/DistanceLMContactConstraint_DirectSolver.scn; - examples/Components/constraint/FixedLMConstraint.scn; - examples/Components/constraint/LMConstraintCollisionResponse.scn. Do you think we should move them to the plugin?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547:134,plugin,plugin,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-745129547,2,['plugin'],['plugin']
Modifiability,"> @olivier-roussel The findGTest https://cmake.org/cmake/help/v3.19/module/FindGTest.html of cmake only works for CMake >= 3.20 😭 (tested with cmake 3.16 and 3.19 ❌ whereas cmake 3.20 and 3.28 ✅). Indeed again :cry: ; Another option but maybe a bit conda-specific would be to switch to config mode `find_package(GTest CONFIG QUIET)`, as the conda package comes with the GTest cmake config files. Tested with conda + cmake 3.19.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923358310:286,config,config,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923358310,3,"['CONFIG', 'config']","['CONFIG', 'config']"
Modifiability,"> After discussion with @courtecuisse, the function is supposed to be used when cutting meshes.; > In our plugins it is not used anymore, although it might still have relevance in the future.; > Whether to keep it in SOFA sources or not... any option is ok for us. @epernod Would this function be useful for topological changes?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878254798:106,plugin,plugins,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878254798,1,['plugin'],['plugins']
Modifiability,"> And why did it work before and not now?. Because with the ""binary"" dependencies, the registration was made implicitly when the system are loading the dll, unbeknownst to the pluginmanager . ; So for example when one is importing explicitly the plugin `Sofa.Component.Visual`, the OS is also loading the plugin (dyn.library) `Sofa.Component.Topology.Container.Grid` implicitly, and this triggered the registration of all `Grid` components because the registration is (was) automatic. But from the PluginManager point of view `Sofa.Component.Topology.Container.Grid` is/was not loaded.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2375432898:176,plugin,pluginmanager,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2375432898,4,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'pluginmanager']"
Modifiability,"> Any interest to keep newmat ? I remember a discussion during a sofadevmeeting with @jnbrunet saying that we should remove the usage of newmat. Especially because it seems this library is really old and not maintained anymore.; > http://robertnz.net/nm_intro.htm; > Latest update seems to be 2008 for newmat11 (beta)... Good point. I just saw an opportunity to easily benefit from the type-parameterized tests that I introduced for `BaseMatrix`. An option is to remove it, but it could also be moved into an external plugin. Let's discuss it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2311#issuecomment-909026838:391,parameteriz,parameterized,391,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2311#issuecomment-909026838,2,"['parameteriz', 'plugin']","['parameterized', 'plugin']"
Modifiability,"> Any news @nhnhan92 ?; > Note that for my remark on the header, having your project name if fine for us. What matters for us is to have first the SOFA header (LGPL) up in the file. Would this be possible?; > Let me thank you again for this nice contribution. Hi @hugtalbot,; Sorry for late response. I have recently been in the middle of some work (related to this project). Therefore, there is no progress so far, however, I plan to add the addKtoMatrix module to the FF and also try to improve coding stuffs (will be updated as soon as possible). On the other hand, I have discussed with my team member and advisor about the header. We agree with your above suggestion, but I just wonder is it possible for this FF to appear in both the SOFA source code (in the future) and our own under-developing plugin? we are not familiar with this procedure, sorry for that; If it is okay, please write the name of the contributor as:; JST/PRESTO Project: TouchIoT-Smart Tangible Sensing Enabler for Tactile Internet (Developer: Nhan Nguyen Huu); One last thing, from the previous comment, you mentioned the test. Could you please be more specific about the test? do you want to test the reliability of the FF (like coding, mathematical model, etc.)? We definitely want to certify that.; Thank you for your and SOFA team effort to review our work.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969:802,plugin,plugin,802,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-780500969,1,['plugin'],['plugin']
Modifiability,"> Before, the default name was `FreeMotionAnimationLoop`, for instance, and now it is `freeMotionAnimationLoop` which still breaks my (our) scenes. Sorry, I thought it was the opposite due to https://peps.python.org/pep-0008/#function-and-variable-names. So, let's merge https://github.com/sofa-framework/sofa/pull/2801",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1076284129:239,variab,variable-names,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2773#issuecomment-1076284129,1,['variab'],['variable-names']
Modifiability,"> By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync. I don't know about this branch. We'll need a discussion to understand what I should do with this.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046687038:148,plugin,pluginSofaCoreAsync,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046687038,1,['plugin'],['pluginSofaCoreAsync']
Modifiability,"> Can I still ask a small question ? :-); > ; > Why keeping the Framework directory? Would something like this be simpler?:; > ; > ```; > /; > plugins; > BeamAdapter; > ...; > Sofa; > Compat; > Config; > Core; > DefaultType; > Geometry; > ...; > Component; > Collision; > ...; > scripts; > tools; > ...; > ```. like @hugtalbot said, it is to keep the sepearation framework (i.e APIs & stuff) and components (implementations).; Ideally like @guparan we should have made a framework dir/namespace structure but we decided not to break the framework code (so we still have sofa::core, sofa::helper....)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670:143,plugin,plugins,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"> Cool @alxbilger so if there is Required data and in `Inherit::init()` is called then the error gets not triggered. Correct? We should investigate other components with this Required feature. That's the opposite: to catch an error if a required Data is missing, the component must call `Inherit::init()`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945407074:55,Inherit,Inherit,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945407074,2,['Inherit'],['Inherit']
Modifiability,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:514,Inherit,Inheritance,514,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911,4,"['Inherit', 'extend', 'inherit', 'plugin']","['Inheritance', 'extended', 'inheritance', 'plugin']"
Modifiability,"> Could you tell us the cases when the warnings will pop up with your changes?. It will pop-up if you use the deprecated functions/stuff outside of the library you are building.; For example, if one user uses/inherits a deprecated function in a component in its plugin, he will be notified.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3236#issuecomment-1225363308:209,inherit,inherits,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3236#issuecomment-1225363308,2,"['inherit', 'plugin']","['inherits', 'plugin']"
Modifiability,"> Does that also fix the place where the view matrix is saved ? If so, this might be an issue. If not, the PR is ok for me !. All GUIs saves the view along the scenefile and do not use getConfigFolder(); i.e; - https://github.com/sofa-framework/sofa/blob/8aabef6621134b28d59c2bd55065f4905cd2573b/Sofa/GUI/Qt/src/sofa/gui/qt/viewer/qt/QtViewer.cpp#L1481; - https://github.com/sofa-framework/sofa/blob/8aabef6621134b28d59c2bd55065f4905cd2573b/Sofa/GUI/Qt/src/sofa/gui/qt/viewer/qgl/QtGLViewer.cpp#L1055; - https://github.com/sofa-framework/SofaGLFW/blob/676aeb03407f78cb26f55502d2d10cd8ec093bda/SofaGLFW/src/SofaGLFW/SofaGLFWBaseGUI.cpp#L209. But actually, nowhere it is enforced that the .view file is supposed to be along the scenefile (even the filename is not standardized !); Even more, I would personally advocate to set the view file in a config folder, instead of polluting the source directory 👮🫡",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4926#issuecomment-2300007299:844,config,config,844,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4926#issuecomment-2300007299,1,['config'],['config']
Modifiability,"> Does the CIs need to be updated with the new variable names?. I think the CI does not really set any GUI/Qt cmake variables.; In any case, as there is no forwarding from the new var to the old deprecated var, it should be yes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1135319702:47,variab,variable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1135319702,2,['variab'],"['variable', 'variables']"
Modifiability,"> Hello @epernod,; > ; > thank for the PR. I strongly support moving toward removing deprecated stuff in our code base (what is done in the PR); > ; > Maybe we could just keep the old deprecated name with something like:; > ; > ```; > class Base {; > [[""this is deprecated...don't use it as it does not work any more...to update your code see the migration documentation in PR#1358""]]; > DeprecatedAndRemoved m_componentstate; ; > }; > ```; > ; > Existing code will stop compiling forcing anyone to update but ppl will be able to understand easily what to do. Hi, @damienmarchal ; I was going to do what you suggested, but while reading again your comment I realized I don't remember what we said or I didn't really get it.; In this PR there are 2 potential breaking changes:. - The upper case letter S of the Data: . ```; Data< sofa::core::objectmodel::ComponentState > d_componentstate; ; into ; Data< sofa::core::objectmodel::ComponentState > d_componentState; ; ```. - And I uncomment the line [[ deprecated ... for the m_componentstate.; ```; [[deprecated(""m_componentstate was renamed to d_componentState. Please upgrade your code"")]]; Data< sofa::core::objectmodel::ComponentState >& m_componentstate{d_componentState}; ///< the object state; ```. For which one do you want to add what you suggested? And just to be sure, the idea is to create a class ""DeprecatedAndRemoved"" that does nothing so you can declare the variable but compilation will failed when using it in the code and you put a [[deprecated(""..."" above ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287:1423,variab,variable,1423,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1358#issuecomment-634984287,1,['variab'],['variable']
Modifiability,"> Hello @marques-bruno; > ; > My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:839,refactor,refactoring,839,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769,1,['refactor'],['refactoring']
Modifiability,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:38,coupling,coupling,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174,1,['coupling'],['coupling']
Modifiability,"> Hello guys,; > ; > CMP0057 and any other policy added before CMake 3.12 are set to NEW by https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaFrameworkConfig.cmake.in#L2; > ; > @olivier-goury I think you have this issue because you do `include(SofaMacros)` instead of `find_package(SofaFramework)`. The latter (or any find_package leading to it) must be preferred because it's more transparent (no need to manually reach a file where all the SOFA macros are defined) and it calls `cmake_minimum_required(VERSION 3.12)` before actually doing `include(SofaMacros)`.; > ; > Another `cmake_minimum_required(VERSION 3.12)` could be added at the top of SofaMacros though, so this PR makes sense in a way. Hey I take over this PR since @olivier-goury is on holidays :); Indeed, after taking a look at the problematic plugin, there's a find_package(SofaFramework)... but there's also a `include(${SofaFramework_DIR}/SofaMacros.cmake)` that shouldn't be there obviously. So the problem does come from the plugin's CMakeLists.txt if I get it right.; So not a real problem. I guess we could still homogenize the list(FIND) vs IN_LIST calls in cmake, if we want to do this right =)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831:840,plugin,plugin,840,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-689396831,2,['plugin'],['plugin']
Modifiability,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:321,plugin,plugin,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454,1,['plugin'],['plugin']
Modifiability,"> Heyy @fredroy Yes, you got it correctly. I am trying to read a haptic device written in py2.7 into sofapython controller in SOFA. And thanks for your advice, I just tried **run as admin** when execute the runSofa.exe, and it just does not work. So usually the SofaPython could be compatible with other python packages installed from pip, right? . Hum it should be (it has been a long time I did not use the python2 plugin that I am not 100% sure). > I think I will try to debug into my python drivers and for now I am going to run these two python processes at the same time(1. a normal python console and 2. a sofapython one), and probably let the 1. console write into a .np array and let the 2. process read continuously read the array to pass the msg from haptic device. Will it work in sense of real-time property in your opinios? @fredroy Or do you have a better idea about such temporal solution. Thanks any way !!!. Hum I dont think it will work unfortunately, at least for the real-time aspect. Writting in a console is very time-consuming so the whole process `serialize -> write in a console -> read the console -> deserialize` will be too slow in my opinion.; The other `least bad way` IMO ( because directly getting the value from the device would be much better 🙃) would be to pipe or open a comm channel between the two processes either RPC or TCP/IP or unix pipes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2786#issuecomment-1068117938:417,plugin,plugin,417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2786#issuecomment-1068117938,1,['plugin'],['plugin']
Modifiability,"> Hi @EmDash00; > Welcome on the SOFA GitHub and thank you for the detailed issue. It helps a lot providing a maximum of information!; > A recent work in #1361 aimed at updating the OpenCL plugin, which remained inactive for some time. But it led to the duplication of an instantiation.; > ; > Removing the line 71 should make it work.; > If so, could you please contribute this change back?. Hi @hugtalbot, thanks for the quick response. That was the original solution I tried and it _seemed_ to work, but I was skeptical if it was a bandaid over a bigger problem or not. Thank you for confirming. I'd love to make a PR back later today.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-644175288:189,plugin,plugin,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-644175288,1,['plugin'],['plugin']
Modifiability,"> Hi @marques-bruno,; > ; > Thanks for this very interesting PR that is going into the right direction. Sadly the breaking part is not fun. Let's see how other will react. Agreed..; To give you some context, initially my intent was to only add a init_position / init_size, to remove the bidirectionality of this component's position / size datafields.; Basically, the rule of thumb with SOFA components should be to NEVER EVER use a datafield both as an input and an output of the component (modified by the component AND linked to a parent data for isntance). The problem is that keeping the previous behavior of the component and having the new datafields that work the right way created an asymetry in the updates that created weird logic in the callbacks. So while I'm at it I decided to go all in and refactor the whole thing with the good behavior.; I don't see how to add depreciation messages or how to handle previous behavior. If anyone has an idea, I'm all ears :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930:806,refactor,refactor,806,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489#issuecomment-695967930,1,['refactor'],['refactor']
Modifiability,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:577,Plugin,PluginExample,577,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301,3,"['Plugin', 'plugin']","['PluginExample', 'plugins']"
Modifiability,"> Hi,; > ; > What is exactly the ""Haptic module""? It's weird that is tries to use directly the constructors. You are right that the constructors are protected, so they cannot be used. So I am curious to know if this code ever worked....; > ; > To fix the code, you should have a look on the [tutorials](https://github.com/sofa-framework/sofa/tree/master/applications/tutorials), for example this line: https://github.com/sofa-framework/sofa/blob/master/applications/tutorials/oneTetrahedron/oneTetrahedron.cpp#L94 It uses the friend class `New` to instantiate the objects. There are also many examples in the unit tests. The code in plugins/Haption/HaptionDriver.cpp which support virtuose device; and i try to use the friend class ::New as. `visualHaptionDOF = sofa::component::container::MechanicalObject::New<sofa::defaulttype::Rigid3dTypes>();`. i'm sorry, still error",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840284644:633,plugin,plugins,633,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840284644,1,['plugin'],['plugins']
Modifiability,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:1265,refactor,refactor,1265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125,1,['refactor'],['refactor']
Modifiability,"> Hummm the code of PointSplatRenderer is strangely _very_ similar to PointSplatModel (which is also in SofaOpenGLVisual ); > Intentional ?; > The difference I could see is that the new one takes explicit data (PointSplatModel gets context, etc); > ; > In any case, I would be against copy/paste and more about refactoring/cleaning the existing code. Thanks for the comment! That code was written by @damienmarchal , I let him reply on this one. Maybe I can remove those files from this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701480994:311,refactor,refactoring,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701480994,1,['refactor'],['refactoring']
Modifiability,"> I agree. Sofa/gpu/cuda only make sens if we have sofa/gpu/opencl or sofa/multithread.... but it would be in other plugin. So if you keep the SofaCuda as first level in your namespace/hierarchy, it will work. It's also what I think. Thanks @epernod",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406189525:116,plugin,plugin,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406189525,1,['plugin'],['plugin']
Modifiability,"> I also agree that MassType should by an alias inside the class.; > ; > > This is more elegant indeed, but I am just wondering if there will be more than VecTypes and RigidTypes ?; > ; > Cuda types?. Indeed, I thought CudaVectorTypes was inheriting VecTypes but seems not...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1024066223:239,inherit,inheriting,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2644#issuecomment-1024066223,1,['inherit'],['inheriting']
Modifiability,"> I am a bit sad that we lost simplicity in cmake files cry. I liked the fact that Sofa/framework was (supposed to?) be buildable by iteelf; . How? By unchecking the SOFA_COMPONENT option? It's still possible this way. The thing is that Framework is (unfortunately) not a module and thus should not be treated as one if we want to be consistent. I'm not against reverting the framework/CMakeLists.txt deletion though. > and that the root SOFA CMakefile was kind of slimmer/less complicated and actually was (supposed to be ?) not mandatory. This file was and still is mandatory. At least, I think it's clearer now with the changes I propose because we see what is directly below the root CMakeLists (all the remaining add_subdirectory calls) and what could be done from somewhere else. Ideally we should just have a some options/variables and a bunch of add_subdirectory calls in this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670:829,variab,variables,829,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670,1,['variab'],['variables']
Modifiability,> I did not check but I thought it was using `addData` here:; > ; > https://github.com/sofa-framework/sofa/blob/9096c3eed599622ec9eb77a3d8a61bf3932a81a7/Sofa/Component/StateContainer/src/sofa/component/statecontainer/MechanicalObject.inl#L1310. Not necessarily there is another codepath that initialize the state vectors and registe the data. Refactoring the whole part would be interesting to make that clear but it is far outside the scope of this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585:343,Refactor,Refactoring,343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585,1,['Refactor'],['Refactoring']
Modifiability,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:160,config,config,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"> I find that the intermediate directories sofa/gpu/cuda are superfluous, and redundant with the name of the plugin. It is also in the prevision of changing the namespaces (which is not done in this PR).; > What do you think @hugtalbot @epernod @damienmarchal @fredroy ?. agreed @alxbilger !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1411679270:109,plugin,plugin,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1411679270,1,['plugin'],['plugin']
Modifiability,"> I guess I would need more info with a sofadev meeting but unfortunately I wont be able to attend this week cry as far as I understood you introduce a new macro defining the type of the project, which looks good to me (and defined library/collection/module/plugin as we said) and removed the _external suffix. Looks good to me as far as I can see ! (even if I would have wished you keep the Sofa/framework/CMakeLists.txt :p ). Exactly, I refactored the sofa_add_* macros under one sofa_add_subdirectory macro. The reason is that I didn't want to create a misleading sofa_add_library macro. I like the fact that sofa_* macro have the same name than the standard CMake macro they override.; I'll resolve the conflicts and revert the framework/CMakeLists removal :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200893780:258,plugin,plugin,258,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200893780,2,"['plugin', 'refactor']","['plugin', 'refactored']"
Modifiability,"> I have two questions:; > ; > 1. Why having ""Plugin"" in the name? Not sure we have a strict policy on that but it looks like a bad practice to me. Good question, just ArticulatedSystem alone sounded a bit weird to me but I am open to remove the Plugin suffix; ; > 2. Why creating this plugin in SOFA repo and not in an external one?. Another good one 😗, I did not think about it but in my mind the process was ` <in the main codebase> -> ""hard"" applications/plugins -> ""remote"" applications/plugins`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1040050517:46,Plugin,Plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1040050517,5,"['Plugin', 'plugin']","['Plugin', 'plugin', 'plugins']"
Modifiability,"> I like this kind of refactoring. Thanks for the tremendous work!; > ; > I guess you can also implement `computeBBox` in BaseROI. Done.; But the bbox itself does not take into account the input vertices, as it should be already taken into account by the other component from which the positions come from. It avoids doing twice the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4839#issuecomment-2244302449:22,refactor,refactoring,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4839#issuecomment-2244302449,1,['refactor'],['refactoring']
Modifiability,"> I made some tests on godbolt, but I was not able to reproduce the crash. In any case, one day it would be great to remove the public inheritance from `std::vector` (but SofaCUDA probably doesn't agree). I tried to switch to at least to private inheritance but I can tell you that not only SofaCUDA is complaining 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724973503:135,inherit,inheritance,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724973503,2,['inherit'],['inheritance']
Modifiability,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:355,inherit,inheriting,355,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755,1,['inherit'],['inheriting']
Modifiability,"> I think we only have 2 ways to keep the CMake/C++ consistency we want:; > ; > 1. having a `Sofa` directory at repo root containing `Core`, `Components`, etc.; > 2. having `Core`, `Components`, etc. directly at repo root; > ; > I like the idea of having all the Framework related stuff in a subdirectory but you know what it implies: `sofa::framework::core::...`. My suggestion for the final repository layout is from root directory:; - move all plugins from ROOT/applications/plugins into a ROOT/plugins; - move all modules from ROOT/SofaKernel/modules into ROOT/modules (or in ROOT/framework i don't care); - make Sofa.XXX into ROOT/modules (resp. ROOT/framework). And the namespace in c++ file start after ""plugins"", ""modules"", ""framework"" and is fully consistant. So having all Type, Core etc... into Sofa sub-directories.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109575096:447,plugin,plugins,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109575096,4,['plugin'],['plugins']
Modifiability,"> I took the liberty to retrieve the ArticulatedControllers (which were deprecated/removed some years ago) and put it back into it. Especially because I retrieved the ""man-walking"" example which is quite cool in my opinion. But the code was created by DigitalTrainers, I dont know if it could be bothersome license-wise. Are you sure ? If it's the case it's only the controller... because the code of the articulatedSystemMapping was done in the SHACRA team...; In any case we had a contract at that time with Digital Trainers on suture that said that the SOFA code developed in the project was open-source and that Inria keeps the property. . > ; > * ArticulatedSystem as an external repository which would be referenced in _applications/plugin_ (react with 🚀 ). I vote for a separate plugin to advertise it, as suggested by Eulalie. One of the thing that should be added to the plugin is the support of Unified Robot Description Format (URDF). ; We should add a loader for it.; This is the new standard format in the community (and compatible with ROS). Thanks !. Christian",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056530424:786,plugin,plugin,786,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056530424,2,['plugin'],['plugin']
Modifiability,"> I tried with the imgui GUI in a clean build. I confirm that `runSofa -l SofaImGui -g imgui` creates a file _lastUsedGUI.ini_, with `imgui` inside. Then, if I run `runSofa -l SofaImGui`, as expected, it loads the last used gui (found in the file). However, it does not work with `runSofa` (without the `-l SofaImGui`). Normal, since the plugin is not loaded. It would be the same situation with a double-click on the executable. But do you think this is a bad or good behavior?; In my opinion it's good. The only issue is with batch GUI, hence @hugtalbot's idea to never put ""batch"" in lastUsedGUI.ini but keep the mechanism for all other GUIs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1142177121:338,plugin,plugin,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1142177121,1,['plugin'],['plugin']
Modifiability,"> I use the Windows system, sofa22.06 version. I don't know whether you mean compile in tree or compile out of tree. I compile on pychar, and the crash occurs at the beginning.我使用的是 Windows 系统，sofa22.06 版本。我不知道你的意思是 compile in tree 还是 compile out of tree。我在 pychar 上编译，崩溃发生在开始时。. How to use PyCharm to run programs directly on an uncompiled version of Sofa; Do you know how to use PyCharm to run programs on Sofa compiled by yourself in Ubuntu/Windows system? Because previously I used already compiled versions of Sofa, now I need to use a plugin Optimus (the official website only has self compiled methods).Thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-2316909409:541,plugin,plugin,541,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-2316909409,1,['plugin'],['plugin']
Modifiability,"> I was wondering if there is a way to catch the missing symbols at compile-time and I found this: https://cmake.org/cmake/help/latest/module/CheckCXXSymbolExists.html#module:CheckCXXSymbolExists. It's configuration time but it could be helpful. I tried to play with it but I was not able to make it work. I added the check in the `sofa_create_package_with_targets` macro. It could be interesting to enforce that the necessary symbols are defined at configure-time yes 🤔 . EDIT: I did some tests and it is quite bothersome to set up, (the file itself needs to be compilable, the symbol need to be defined and not only declared, adding variable in cache, etc) And I think if we do that for all potential loadable libraries, it will slow down considerably the cmake configure process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1915860120:202,config,configuration,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1915860120,4,"['config', 'variab']","['configuration', 'configure', 'configure-time', 'variable']"
Modifiability,"> Is this PR a fix for a breaks because of the merge of the NameDecoder refactoring ?. No, it's to apply the idea to matrices that `Vec3` corresponds to `Vec3d` if `SReal` is a double, and `Vec3f` if it is a `float`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387264272:72,refactor,refactoring,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387264272,1,['refactor'],['refactoring']
Modifiability,"> It has been some time now that this PR is stalled.; > As far as I know, there is still no implementation of VisitorAsync, so IMO it should be deleted.; > (and it is not really complicated to replicate if needed, it just inherits Visitor and adds a ""Status"" member). I agree. Manipulation of a `status` is understood. Setting to ""to review"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886501908:222,inherit,inherits,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886501908,1,['inherit'],['inherits']
Modifiability,"> It seems to be coming from a setup/system/configuration error than something related to SOFA itself, as the error is coming from the Windows SDK itself. Which version of MS Visual Studio are you using ?. i use vs 2022(Windows SDK version 10.0.22621.0 to target Windows 10.0.19045 MSVC 19.37.32822.0)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835503584:44,config,configuration,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835503584,1,['config'],['configuration']
Modifiability,> Just to understand @alxbilger the objects from plugins were not properly loaded ? How could it have worked before your PR ?. Does people really load plugins using the Qt GUI (with the PluginManager widget) at run-time ? I doubt a bit... 🧐,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264259624:49,plugin,plugins,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264259624,3,"['Plugin', 'plugin']","['PluginManager', 'plugins']"
Modifiability,> My hero! It was so frustrating to use cmake on SOFA (on Windows). Thanks a lot!; > ; > Could you tell me how you profile the cmake configuration?. https://github.com/sofa-framework/sofa/issues/1838 🥳,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277266711:133,config,configuration,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277266711,1,['config'],['configuration']
Modifiability,"> No hurry, I just wanted to make sure it wasn't a technical problem! +1. Seems like I'm running into another error. ```; [ 97%] Linking CXX shared library ../../../lib/libSofaOpenCL.so; /usr/bin/ld: cannot find -lcsparse; collect2: error: ld returned 1 exit status; make[2]: *** [applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/build.make:407: lib/libSofaOpenCL.so] Error 1; make[1]: *** [CMakeFiles/Makefile2:10879: applications/plugins/SofaOpenCL/CMakeFiles/SofaOpenCL.dir/all] Error 2; make: *** [Makefile:163: all] Error 2; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083:294,plugin,plugins,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-650839083,2,['plugin'],['plugins']
Modifiability,"> Note that there are still Data variables that are not been renamed in `Sofa/Component/Topology/Container/Grid/src/sofa/component/topology/container/grid/SparseGridTopology.h`. You intend to rename them in this PR, or should we merge as it is ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2125954752:33,variab,variables,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2125954752,1,['variab'],['variables']
Modifiability,"> Note: collision pipeline must be refactored if we want to reduce the ridiculous high number of calls to `getValue`. Every time there is a check between two primitives, there is a `getValue` call to `MechanicalObject::position`, `proximity` and `alarmDistance`. Will be a very funny task to do. . EDIT: CTRL+F on 'getValue()[' shows +1000 hits.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1265522619:35,refactor,refactored,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1265522619,1,['refactor'],['refactored']
Modifiability,"> Ok so maybe I misunderstood your last comment, but the GTest find module you added in your last commit works fine on my side with cmake >= 3.12 (which is our min required version). So I guess you meant that the embedded GTest find module in recent cmake version (>=3.20) was required to have the correct targets defined, which is not the case in earlier <3.20 version of cmake (tested in 3.12), but this recent GTest find module was not building if used with cmake <3.20. In the end, your last commit seems to fix everything, so looks like a more generic option that relying on cmake config files as suggested in my last comment. I just added the cmake module from v3.20 for GTest directly in our cmake folder modules; not very clean but it does the job apparently 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1924180211:586,config,config,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1924180211,1,['config'],['config']
Modifiability,"> Several points here:; > ; > * this PR might be breaking for plugin compilation (including move of files). No it is not. The only change that could be called ""breaking"" is the renaming of the CMake options to enable/disable libraries and modules. However, those options keep the same default behavior so it will only affect people who build their own SOFA with custom options. New option names are very close to old option name so it's pretty easy to do the transition. . > ; > * this PR changes the way we organize / name the code (which is good!); > ; > ; > It would be therefore nice to rediscuss it with you both @guparan and @fredroy to all agree on the organization and merge it, but a question comes: does this seem realistic to merge it before the release?. Yes because having everything called PLUGIN_* is a nightmare.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200963331:62,plugin,plugin,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1200963331,1,['plugin'],['plugin']
Modifiability,> Should it be replaced by `Sofa.Component`?. Does it exists? ; I'm doing it in a clean way by adding the needed plugin in the tests...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3266#issuecomment-1237943547:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3266#issuecomment-1237943547,1,['plugin'],['plugin']
Modifiability,"> So, as we discussed during the dev meeting. 2 modifications:; > ; > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > ; > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > ; > ; > @guparan can you confirm this is now ok to go?. The *FindCGAL.cmake* was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`. IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985:162,plugin,plugin,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610910985,4,"['config', 'plugin', 'variab']","['config', 'plugin', 'variable']"
Modifiability,"> Some `image` plugin scenes fail because the template used is not compiled in the standard set. It needs the full set. Only the standard set is compiled on the CI.; > ; > Decision to take:; > ; > 1. The failing scenes are ignored on the CI; > ; > 2. The failing scenes are modified to use a templated available in the standard set; > ; > 3. The CI compiled the full set; > ; > ; > I am in favor of the third option, but we already talked about it in [sofa-framework/ci#15](https://github.com/sofa-framework/ci/pull/15). It seems to take too much time at the compilation. I think there is a 4th solution, adding the ImageB type in the ""standard"" set, as it is seems quite important if lots of scenes need it after all",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1289796406:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1289796406,1,['plugin'],['plugin']
Modifiability,"> Sorry, my question was more, do you know why the index 5 was inserted multiple time?. Ah, yes, because of:; https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaCarving/CarvingManager.cpp#L183-L194. We could change `elemsToRemove` from `vector` to `set` at the cost of a bit performance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1244059611:174,plugin,plugins,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3239#issuecomment-1244059611,1,['plugin'],['plugins']
Modifiability,"> TODO: decide if autoloading should off by default (and force the users to explicitly load their own necessary libs in their scenes). Even if autoloading is disabled, the Qt GUI loads its own list of plugins (the one saved by the plugin manager GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3103#issuecomment-1177256086:201,plugin,plugins,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3103#issuecomment-1177256086,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"> Tested by @fredroy and ready to be merged !. Not ready to be merged unfortunately; on Windows, CMake complains:; ```; CMake Error at Sofa/framework/Config/cmake/SofaMacrosInstall.cmake:858 (get_target_property):; get_target_property() called with non-existent target ""ZSTD::ZSTD"".; Call Stack (most recent call first):; applications/plugins/CImgPlugin/CMakeLists.txt:101 (sofa_install_libraries). ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2132471684:150,Config,Config,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4749#issuecomment-2132471684,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"> Thank you @ziqiu-zeng for the PR, I can see I did some mistake in the compat files grimacing; > ; > > Enable compilation with cuda plugins: SofaAsyncSolvers, SofaCUDALDI, SofaCUDASolvers, SofaCUDADev Please also update the plugins; > ; > Unfortunately, these plugins are private plugins from the mimesis team so we cannot access/fix/update them thinking. Hello,. I have fixed the bugs in these private plugins.; What I mean is that the users of these plugins should pull the modifications.; Sorry for the misunderstanding, I will edit the commit message.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102767377:133,plugin,plugins,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102767377,6,['plugin'],['plugins']
Modifiability,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:98,config,configuration,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034,1,['config'],['configuration']
Modifiability,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. @hugtalbot; Here is the test to verify polynomial springs (Python2 scripts). [polynomial_spring_test.zip](https://github.com/sofa-framework/sofa/files/4540453/polynomial_spring_test.zip). The test ""spring_verification.py"" depicts two points (p1, p2) connected with a spring. One point (p1) is fixed, another (p2) is moving in space. The external impact (f_external) to the system could be applied using LinearForceField (you need to make target_force as a Data<> object in order to collect its information, but I have this modification) or ControlPoint (third point (p_control), attached with a linear rest shape spring). In case of a second option, the external force is computed as (p_control - p2)*k_rest_shape_spring.; During the simulation process, the position ""p2"" and forces ""f2"" for point p2, and also the external force or the position of the control point are saved to data files.; The script ""spring_verification_draw_result.py"" loads all data. The strain for spring is computed as ; (norm(p2-p1) - l0) / l0 for PolynomialSpring or as norm(p2-p1) / l0 for RestShapePolynomialSpring.; I use static solver with many iterations to make spring force equal to external force, but I guess it is also possible to compute the spring force as difference f2 - f_external.; Based on this data, a force-strain relation is plotted and compared with polynomial values.; And this is the end of the test. NOTE: Please, keep in mind, that configuration parameters have to be the same for both scripts, in order to get a valid result.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719:1626,config,configuration,1626,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620055719,1,['config'],['configuration']
Modifiability,"> Thanks @sergeiNikolaev for this contribution and making this nice effort of bringing back this work.; > ; > * Is any test available with these new classes?; > * is there any example scene?. Thank you for your answer. Yes, there is an example scene, which I also use as a test. But to add it to Sofa I have to remove plugin dependencies from it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586:318,plugin,plugin,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616504586,1,['plugin'],['plugin']
Modifiability,"> Thanks again @ScheiklP for these investigations !; > ; > Normally the reset function is not supposed to have any cleanup results as it is only there to set again (re-set) the component in a previous state.; > ; > It is the ""cleanup"" that is called before removal/deletion of the component from the graph. Most of these components also do not have a `cleanup` function :D . I adapted the `sofaProjectExample` to match the python scene above to make memory profiling and debugging a bit easier. Same memory leak occurs. The code:; ```cpp; #include <sofa/defaulttype/VecTypes.h>. #include <sofa/component/collision/detection/algorithm/BruteForceBroadPhase.h>; #include <sofa/component/collision/detection/algorithm/BVHNarrowPhase.h>; #include <sofa/component/collision/detection/algorithm/DefaultPipeline.h>. #include <sofa/component/collision/detection/intersection/NewProximityIntersection.h>. #include <sofa/component/collision/response/contact/DefaultContactManager.h>. #include <sofa/component/collision/geometry/PointModel.h>. #include <sofa/simulation/graph/DAGNode.h>; #include <sofa/simulation/graph/DAGSimulation.h>; #include <sofa/simulation/graph/init.h>. #include <sofa/simulation/DefaultAnimationLoop.h>. #include <sofa/component/statecontainer/MechanicalObject.h>. #include <sofa/core/objectmodel/Context.h>; #include <sofa/simulation/Node.h>; #include <sofa/simulation/Simulation.h>; #include <SofaComponentAll/initSofaComponentAll.h>. #include <sofa/helper/system/FileRepository.h>; #include <sofa/helper/logging/LoggingMessageHandler.h>; #include <sofa/core/logging/PerComponentLoggingMessageHandler.h>; #include <sofa/helper/BackTrace.h>. using namespace sofa::defaulttype;. using sofa::simulation::Node;; using sofa::simulation::graph::DAGNode;; using sofa::helper::system::DataRepository;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::com",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:377,adapt,adapted,377,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,1,['adapt'],['adapted']
Modifiability,"> That's a very popular library. I agree with this move.; > ; 17.5k ⭐ 😗 (one day, SOFA, one day...). but yes glfw+imgui+stb is a well-known triplet . > I don't understand in your PR how it replaces the need for CImgPlugin. Probably, because I don't know how images loading is managed. Image loading is managed through a factory (""png"" -> use this, ""bmp"" -> use that, etc) and this factory is populated at run-time. ; Before this PR, it was done by CImgPlugin (cimg was used because it can manage several file formats). But it was decided to be optional for some reason, so it was a plugin (and not a ""hard"" component in the framework).; Now that stb does not depend on any external library, no hassle with cmake/deps/dlls so thats why I put it in SofaHelper.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2551#issuecomment-997816638:582,plugin,plugin,582,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2551#issuecomment-997816638,1,['plugin'],['plugin']
Modifiability,"> The right syntax is the following:; > ; > ```c++; > const auto visualHaptionDOFSPtr = sofa::core::objectmodel::New<sofa::component::statecontainer::MechanicalObject<sofa::defaulttype::Rigid3dTypes>>();; > visualHaptionDOF = visualHaptionDOFSPtr.get();; > nodeHaptionVisual->addObject(visualHaptionDOFSPtr);; > visualHaptionDOF->name.setValue(""rigidDOF"");; > ```; > ; > Note that this plugin has not been maintained for a long time. You should expect some changes in order to make it work. Here are some changes I made today to fix the configuration: #4338. But it does not fix the compilation.; > ; > If you succeed to make it work, a pull request would be very welcome ;). We are in the process of adapting the sofa22.12 plugin for homebrew devices, with reference to the Haptic plugin. No problem of course, I'll commit our code as soon as it's aligned and tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1841943965:386,plugin,plugin,386,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1841943965,5,"['adapt', 'config', 'plugin']","['adapting', 'configuration', 'plugin']"
Modifiability,"> This is breaking, right @fredroy ?. Breaking in term of user configuration, yes ; as the cmake option names changed 🫤",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1143218000:63,config,configuration,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2974#issuecomment-1143218000,1,['config'],['configuration']
Modifiability,"> To answer the `dynamic_cast` concern, the link `l_linearSolver` can be of type `PartialLinearSolver` instead of `LinearSolver`. That is a big question: does a Partial Linear Solver implies that it also implements Linear Solver ? (and so inherits from LinearSolver, and BTD inherits only from PartialLinearSolver); In this case your answer is right.; But in the case that it is not (could be partial and unable to solve complete system), we cannot do a link to a partial linear solver, as we need some other functions from the LinearSolver API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227872942:239,inherit,inherits,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227872942,2,['inherit'],['inherits']
Modifiability,"> To be noted @fredroy : in _Sofa/GUI/Qt/CMakeLists.txt_, Sofa.GL is only found in a QUIET way and it was not linked explicitely (no where `target_link_libraries(${PROJECT_NAME} PUBLIC Sofa.GL)`). Could you let me know whether the proposed change seems reasonable to you. If I remember well. the find_package() is just used to see if Sofa.GL has been enabled and enable the 2 Viewers (which needs GL for themselves) in the CMake config.; Sofa.Gui.Qt does not need Sofa.GL by itself as the viewer *may* not necessarily use OpenGL (practically it was the case only with the RHI plugin). So no, you dont need to link Sofa.GL to Sofa.Gui.Qt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4844#issuecomment-2246948999:429,config,config,429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4844#issuecomment-2246948999,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:481,extend,extend,481,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002,1,['extend'],['extend']
Modifiability,> What happens if you forget the required plugins in the ci-dependent PRs?. An error message and no object instantiated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2372631309:42,plugin,plugins,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2372631309,1,['plugin'],['plugins']
Modifiability,"> Would it be the right time to put metis in a separate module in order to link it in a plugin? If you agree with this approach of course. This is a really good idea, but it will take a little time so I think it would be better to do it in an other PR 🤠",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1048793893:88,plugin,plugin,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1048793893,1,['plugin'],['plugin']
Modifiability,> You kind of renamed an alias. Does it break anything?. Indeed... I don't think it was used in the plugin. Maybe in external plugins. I can add support + deprecated message,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2673#issuecomment-1033746822:100,plugin,plugin,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2673#issuecomment-1033746822,2,['plugin'],"['plugin', 'plugins']"
Modifiability,> `sofa::component::mass::RigidMass` in Compliant must also implement `isDiagonal`. Any clue what it should return? @jnbrunet. Looks like it is not diagonal because of the [rotational part](https://github.com/sofa-framework/sofa/blob/8d3fcd247583af0ba1fe3da7b113c6bf5a7f7006/applications/plugins/Compliant/misc/RigidMass.h#L267).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-802776407:288,plugin,plugins,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-802776407,1,['plugin'],['plugins']
Modifiability,> ahah.... shame all the config for PR are with options... so we don't know if it works... Now I understand how we didn't noticed that before...I only look at PR much often that the full master dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778490561:25,config,config,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1817#issuecomment-778490561,1,['config'],['config']
Modifiability,> did you fix all the ` unused-but-set-variable` warnings @fredroy ?. Yep (but only for the set I mentioned),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1424993650:39,variab,variable,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1424993650,1,['variab'],['variable']
Modifiability,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:59,inherit,inherit,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116,3,['inherit'],"['inherit', 'inheritance']"
Modifiability,"> the ../lib directory for other platforms like linux, where the plugins are usually stored in a lib sub folder of the parent directory where the application reside. For example from the directory where the runSofa executable is, you can look for the directory where SofaPython.lib is located by doing cd ../lib. I understand that and I agree but I'm confused because that's NOT what you were doing [here](https://github.com/sofa-framework/sofa/commit/f93e2b94dbbc49a98ad6fce791d186d5d8dbb71c#diff-7d60c79bd19129acd6a97363d9130f2cR82) with `FileRepository PluginRepository(""SOFA_PLUGIN_PATH"", ""./"");`.; Nevermind, I'm gonna open a new PR to change this and fix the consistency issue with `Utils::getPluginDirectory()`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158:65,plugin,plugins,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342809158,2,"['Plugin', 'plugin']","['PluginRepository', 'plugins']"
Modifiability,> the ci does not compile this plugin in any case so I guess it is ready 😅. trust me 🙈 ; ![image](https://github.com/sofa-framework/sofa/assets/21199245/277cd645-99da-408b-8d74-b6d58d3b05d2),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4661#issuecomment-2063311567:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4661#issuecomment-2063311567,1,['plugin'],['plugin']
Modifiability,"> you turn SofaCUDA plugin to on by my fault? :). @epernod no don't worry, the CI was not happy in SofaCUDA with one of my PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2440#issuecomment-948609845:20,plugin,plugin,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2440#issuecomment-948609845,1,['plugin'],['plugin']
Modifiability,">; [WARNING] [ObjectFactory] Class already registered: EvalSurfaceDistance<Vec3d>; [WARNING] [ObjectFactory] Default template for class ExtraMonitor already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: ExtraMonitor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: ExtraMonitor<Vec3d>; [WARNING] [ObjectFactory] Class already registered: ExtraMonitor<Vec6d>; [WARNING] [ObjectFactory] Default template for class Monitor already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: Monitor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: Monitor<Vec3d>; [WARNING] [ObjectFactory] Class already registered: Monitor<Vec6d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaValidation/lib/libSofaValidation.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDenseSolver/lib/libSofaDenseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaNonUniformFem/lib/libSofaNonUniformFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaOpenglVisual/lib/libSofaOpenglVisual.so; [WARNING] [ObjectFactory] Class already registered: TopologicalChangeProcessor; [WARNING] [ObjectFactory] Class already registered: TopologyChecker; [WARNING] [ObjectFactory] Default template for class TopologyBoundingTrasher already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: TopologyBoundingTrasher<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMiscTopology/lib/libSofaMiscTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_c",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:31893,Plugin,PluginManager,31893,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,@Camille-K there are several places where you declare variables with the same name than another variable already declared before. Please keep names unique,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713:54,variab,variables,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-974093713,2,['variab'],"['variable', 'variables']"
Modifiability,"@ChristianDuriez ; One scene was crashing in SensableEmulation plugin : testOmniDriverEmu.scn ; I fixed it by adding the option : ```solveVelocityConstraintFirst=""true""```. I have no idea why actually! Could you give some insight?. I fixed some added warnings, let me know if this was normal:; Note that : ; - in GenericConstraintSolver.cpp line 368 : none of the function parameter (cParams, res1 and res2) were unused.; - in GenericConstraintCorrection.cpp line 277 : the complianceFactor is not used. What appears really necessary, is to have some documentation on this constraint pipeline. This could be a good task for the STC#5 don't you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258:63,plugin,plugin,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-390153258,1,['plugin'],['plugin']
Modifiability,"@EulalieCoevoet , @VannesteFelix can one of you test this branch with our plugins SoftRobots & MOR on the big's felix machine to see if this work well ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625:74,plugin,plugins,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/834#issuecomment-440584625,1,['plugin'],['plugins']
Modifiability,"@EulalieCoevoet ; Thanks for this PR. Just for the record, why ?; `What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797#issuecomment-444036298:98,refactor,refactor,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-444036298,1,['refactor'],['refactor']
Modifiability,"@EulalieCoevoet apparently one of the change does change something, some (all?) scenes using this plugin) crashes:; ```; [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples/ArticulatedArm.robot.py](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples_ArticulatedArm/robot_py/); [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples.ArticulatedHierarchyBVHController.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples/ArticulatedHierarchyBVHController_scn/); [SceneTests.applications/plugins/ArticulatedSystemPlugin/examples.ArticulatedSystemMapping.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3751/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/SceneTests/applications_plugins_ArticulatedSystemPlugin_examples/ArticulatedSystemMapping_scn/); ```; The trace tells it crashes here:; ```; sofa::component::mapping::ArticulatedSystemMapping<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<1u, double>, sofa::type::Vec<1u, double>, double>, sofa::defaulttype::StdRigidTypes<3u, double>, sofa::defaulttype::StdRigidTypes<3u, double> >::applyJT(sofa::defaulttype::MapMapSparseMatrix<sofa::type::Vec<1u, double> >&, sofa::defaulttype::MapMapSparseMatrix<sofa::defaulttype::RigidDeriv<3u, double> > const&, sofa::defaulttype::MapMapSparseMatrix<sofa::defaulttype::RigidDeriv<3u, double> >*); ```; so maybe the typo was not one... 🧐😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1489730917:98,plugin,plugin,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3751#issuecomment-1489730917,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"@JeremieA ; Hi Jeremie, as you might know, I am currently working on multithreaded simulation with SOFA.; In this PR, I propose to remove the checkValidStorage() test in Node::ExecuteVisitor function because it prevents some parallel execution and also suggest to remove the thread specific declaration for ExecParams variable.; Do you see a reason to keep the ExecParams specific for each thread?; I especially noticed accessing the thread local memory of a thread A from the thread B with these different ExecParams is significantly slow (~20%) . ; Your opinion would be valuable for us. Thanks!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929:318,variab,variable,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129#issuecomment-526090929,1,['variab'],['variable']
Modifiability,@JeremieA I re-read carefully your comment on #113 to compare to what @maxime-tournier is proposing (which look an improvement against the actual code). I actually forgot that you made your own refactoring of theses classes and don't want to interfere so do you prefer we can just close this PR and wait for your refactoring ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782:194,refactor,refactoring,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303331782,2,['refactor'],['refactoring']
Modifiability,"@agpetit @fspadoni after discussion, we are wondering whether the declaration type should rather be done within the image plugin instead of the multithreading plugin ? what's your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923:122,plugin,plugin,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420565923,2,['plugin'],['plugin']
Modifiability,"@alxbilger . > Hello, I think the actual error is in the output of the Cmake Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Perf",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:969,Config,Config,969,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,1,['Config'],['Config']
Modifiability,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:29,refactor,refactoring,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386,2,"['plugin', 'refactor']","['plugins', 'refactoring']"
Modifiability,@alxbilger I think the question raised by @guparan is why not removing `SOFA_NO_UPDATE_BBOX` directly from here.; Is there an advantage / a sense to keep a CMake variable making the behavior (default value) CMake-dependent ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176221927:162,variab,variable,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176221927,1,['variab'],['variable']
Modifiability,"@alxbilger Thanks!. ```; Before unload; Total Base: 31970 31936 Diff: 34; After unload; Total Base: 31970 31939 Diff: 31; Before unload; Total Base: 32002 31968 Diff: 34; After unload; Total Base: 32002 31971 Diff: 31; Before cleanup; Total Base: 32002 32000 Diff: 2; Total Base: 32002 32000 Diff: 2; After cleanup; Total Base: 32002 32001 Diff: 1; ```. So that looks ok, right? At least the difference is more or less constant. :D ; But the tracker only tracks actual objects, right? So Creators, Factories, and others that do not inherit from base are not tracked. Could it be a vector/map that constantly receives new values but is not cleanup up with `reset`/`cleanup`?; Similar to what was happening in https://github.com/sofa-framework/SofaPython3/pull/304",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109:532,inherit,inherit,532,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109,1,['inherit'],['inherit']
Modifiability,@alxbilger you did not keep the (git) history of the files when moving to the new plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780223067:82,plugin,plugin,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1780223067,1,['plugin'],['plugin']
Modifiability,"@alxbilger, @bakpaul was the problem of fetched plugin solved ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4343#issuecomment-2058976267:48,plugin,plugin,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4343#issuecomment-2058976267,1,['plugin'],['plugin']
Modifiability,"@alxbilger, @fredroy, @hugtalbot I welcome some nameing & refactoring suggestion here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1544686998:58,refactor,refactoring,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1544686998,1,['refactor'],['refactoring']
Modifiability,"@bakpaul This PR does not take the latest commits in sofa-framework/ci. Hence, it does not fetch and compile the plugin CSparseSolvers. Here is what I see in the logs:; ```; --------------- Clone CI scripts ---------------; pwd = /builds/workspace/sofa-framework/PR-4258/ubuntu_gcc_options_release; Cloning into 'ci'...; 640400517e592bfa826a46dea29b6ddd512abf02 Merge pull request #21 from hugtalbot/202308_remove_meshsteploader_from_list; CI scripts are available in /builds/workspace/sofa-framework/PR-4258/ubuntu_gcc_options_release/ci/scripts; ```; It's not the latest commit in the master branch. Can you investigate why?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1822533494:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1822533494,1,['plugin'],['plugin']
Modifiability,"@damienmarchal , discussions during the SOFA-dev meeting lead to a question over the developed design and your opinion is needed. . The problem was that some scenes tests where crashing at exit. This is due to the SofaPython3 cache (`s_objectcache` there https://github.com/sofa-framework/SofaPython3/blob/1b5d271aa21df06c4c5ab75599e364adb0c1e9be/Plugin/src/SofaPython3/DataHelper.cpp#L252C1-L252C73) . The problem was that this is a static object containing python objects and is thus cleaned at the very end of the program exit, after the python interpreter, which is not authorized. . To fix it, following [pybind11 suggestions](https://pybind11.readthedocs.io/en/stable/advanced/misc.html) I've added a member to the module Sofa.Core that insured that the cleanup is called while the interpreter is still alive (see the PR https://github.com/sofa-framework/SofaPython3/pull/425). But is was not enough because the interpreter is not cleaned correctly either : the static method ""Release"" of SofaPython3, in charge of cleaning up python and deleting the interpreter was never called when launching scene in runSofa. . This lead to the need of cleaning up *explicitly* the plugin before exiting the main function. This design was not liked by every dev, some wanting a Raii-like cleanup, in the destructor of some member, which is in my mind not possible because the interpreter instance is static in the SofaPython3 plugin and thus we have no guaranty that it would not be deleted before any other static member.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2233357216:347,Plugin,Plugin,347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4828#issuecomment-2233357216,3,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"@damienmarchal ; As @fjourdes stated, it could happen that the target name is just different from the binary (compiled) name.; For now, the CMake process generates the config name using the target name.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312813481:168,config,config,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312813481,1,['config'],['config']
Modifiability,"@damienmarchal ; This is yet another instance of the ""most vexing parse"", which I assume most c++ programmers are familiar with (c++ really is a terrible language). However, clang issues a warning and I suspect gcc does too, so this is not really an issue to me. An elegant fix is to turn this warning into an error :-) . I understand the problem can go unnoticed since the value is never used elsewhere and won't get to trigger a type error down the road, so removing the default value for the constructor argument seems like a reasonable (and portable) fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138:545,portab,portable,545,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/414#issuecomment-330953138,1,['portab'],['portable']
Modifiability,@damienmarchal Do you still plan to change the variable name?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/840#issuecomment-446646296:47,variab,variable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840#issuecomment-446646296,1,['variab'],['variable']
Modifiability,@damienmarchal I am not so sure. It is not excluded that this variable is actually used in a CUDA-based template specialization of the linear solvers (in a private plugin).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556779609:62,variab,variable,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3871#issuecomment-1556779609,2,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"@damienmarchal I think it really depends on how many of those libraries (code without components to register to the factory, or external modules to load) we expect to see in the future.; Since it's a one-time loading thing, It doesn't seem very costly to load and call the plugin interface in this case. but if we want to democratize this kind of modules, it might be worth modifying the API.; Also, even for a library, a getModuleDescription / getModuleName / license has some value",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064:273,plugin,plugin,273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418057064,1,['plugin'],['plugin']
Modifiability,@damienmarchal I was looking for errors with this scene : . > ./runSofa -g batch -s dag -n 100 /home/douaille/SOFA/fixTestScene/applications/plugins/Flexible/examples/demos/steak.scn. The segfault comes from : https://github.com/sofa-framework/sofa/commit/e65ef095fd96b69b3c9036b2e839f9429b4b022b#diff-179a1b721f69963e4d1fd5ee846ffe22R57. What does this line ? I tried remove it but exception_mode is used everywhere in Cimg.h and for its next call it crash.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560:141,plugin,plugins,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356037560,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"@damienmarchal ok for the test. To have an example, could you point me out an example of test done in a plugin. Thanks.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076:104,plugin,plugin,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273408076,1,['plugin'],['plugin']
Modifiability,"@damienmarchal thanks for your suggestion. It makes sense.; I am not against making things more generic, but here I just noticed that StandardTetrahedralFEMForceField does not show up when I wanted do display force fields (similar to the other tetra force fields). To make a quick fix, I just used the same code than TetrahedronHyperelasticityFEMForceField.; If it is decided to make a deeper refactoring, I'll quit this job as it is not my primary goal.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088787859:393,refactor,refactoring,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088787859,1,['refactor'],['refactoring']
Modifiability,"@damienmarchal yes totally agree on the different points. But as you say: ""for the future"".; I will move one step at a time, by making this plugin works again first. But indeed it is a topic I wanted to speak about but the meeting was already too long.; It would be good to either merge some plugins or have some high level option in the cmake of sofa, for example, SOFA_HAVE_FLUID which will add, Sph, Eulerian, Volumetric rendering plugins etc...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470:140,plugin,plugin,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537478470,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"@damienmarchal yes, setValue is public, but if you look at the implementation of setValue():; ```. void setValue(const std::string& v); {; *beginEdit()=v;; endEdit();; }; ```; it uses the operator=() that is private (and not implemented..):; ```; private:; DataFileName(const Inherit& d);; DataFileName& operator=(const DataFileName&);. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/321#issuecomment-313107628:276,Inherit,Inherit,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/321#issuecomment-313107628,1,['Inherit'],['Inherit']
Modifiability,"@damienmarchal you mean, delete cmake variables ? or something else ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333556507:38,variab,variables,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-333556507,1,['variab'],['variables']
Modifiability,"@damienmarchal, I move your comment here; __________________________________; To @guparan, @bcarrez, @fredroy we need to organize the merging process for efficient and smooth integration of the pending PRs. My suggestion is to now merge in row allow the pr:fix that have the pr:fast-merge ( #444 #443 #442 #436 #414 #422). There is also #423 which is a fatty one for which I don't know if we have to do it now or after the integration of the coding spring pr. . The planning I suggest is:; - integrate #444 #443 #442 #436 #414 #422 (so we have a version before deprecation); - integrate the deprecation PR; - integrate the pluginization PRs . Where to do #423 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312:623,plugin,pluginization,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334467312,1,['plugin'],['pluginization']
Modifiability,"@damienmarchal, headlessrecorder is ready. For the communication plugin I found à bug in zmq matrix support. And I'm in holiday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353144382:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-353144382,1,['plugin'],['plugin']
Modifiability,@damienmarchal:. - BVHNarrowPhase is in SofaBaseCollision; - ParallelBVHNarrowPhase is in MultiThreading and inherits from BVHNarrowPhase. Can I add ParallelBVHNarrowPhase as BVHNarrowPhase in the ObjectFactory? We would have SofaBaseCollision.BVHNarrowPhase and MultiThreading.MultiThreading. Does it make sense to do that?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-996795781:109,inherit,inherits,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-996795781,1,['inherit'],['inherits']
Modifiability,@dessteph I prepared the test in Sofa/Component/LinearSolver/Direct/tests/SparseLDLSolver_test.cpp. Could you add the check of the result at the end? You will need to use another software (matlab?) to compute the ground truth and compare it to the variable `JMInvJt` containing our result. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1174910942:248,variab,variable,248,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1174910942,1,['variab'],['variable']
Modifiability,"@dessteph I suggest you start again your investigation but taking into account https://github.com/sofa-framework/sofa/pull/3072. In other words, in your CMake, enable the variable `METIS-GKLIB_GKRAND`. This way we should have comparable results across different architectures.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1167289730:171,variab,variable,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3010#issuecomment-1167289730,1,['variab'],['variable']
Modifiability,@epernod this PR fixes ParticleSink alright but two other tests fail _because_ of the new msg_error() in [ParticleSink.inl](https://github.com/sofa-framework/sofa/blob/aeea55fbd91e165ee323e3f4fcecb2e430135328/applications/plugins/SofaSphFluid/src/SofaSphFluid/ParticleSink.inl#L82) 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998:222,plugin,plugins,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2026#issuecomment-823852998,1,['plugin'],['plugins']
Modifiability,"@fjourdes ; - The SOFA_LIBSUFFIX variable is only used by PluginManager to find a lib. The problem here is that we are in a debug build and some libs like SceneCreator are not suffixed with ""_d"". I don't see where SOFA_LIBSUFFIX would be helpful.; - Not yet for #502. Will do asap... @damienmarchal ; I'm on it. Quick and easy fix is to add `set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ""_d"")` in SceneCreator's CMakeLists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755:33,variab,variable,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342470755,2,"['Plugin', 'variab']","['PluginManager', 'variable']"
Modifiability,@fjourdes: Ok I understand your suggestion but I didn't touch to PluginRepository construction because I didn't understand what you wanted to do in f93e2b94dbbc49a98ad6fce791d186d5d8dbb71c; Could you explain?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342552853:65,Plugin,PluginRepository,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342552853,1,['Plugin'],['PluginRepository']
Modifiability,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:62,refactor,refactor,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805,1,['refactor'],['refactor']
Modifiability,@fredroy Is it possible in a plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717181731:29,plugin,plugin,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717181731,1,['plugin'],['plugin']
Modifiability,"@fredroy It's good to know that it does not apply in case of `constexpr`.; You just kept a static variable (`InvalidSet`), which is not `constexpr`. SIOF can apply. `InvalidSet` constructor can be `constexpr` only from C++20.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929889207:98,variab,variable,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2357#issuecomment-929889207,1,['variab'],['variable']
Modifiability,"@fredroy So Dediced to follow the small step strategy... just move RotationMatrix in SofaBaseLinearSolver for the moment.; For the moment I suggest to keep everything in SofaBaseLinearSolver... as a refactoring of this part would requieres to:; - unify the namespaces to match the modules names; - and if needed to move all the matrices in their proper module (Sofa.Matrix, Sofa.Type).; - and imply a change in a lot of #include everwhere of our code base. . In addition, after this PR is supposed to be the cleaning or other part of SofaBaseLinearSolver (see #2238)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-886712665:199,refactor,refactoring,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1995#issuecomment-886712665,1,['refactor'],['refactoring']
Modifiability,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:399,plugin,plugin,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955,2,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:369,refactor,refactored,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825,1,['refactor'],['refactored']
Modifiability,@fredroy Totally removed or in an external plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085942769:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085942769,1,['plugin'],['plugin']
Modifiability,"@fredroy Yeah! The scene no longer crashes! But I have the following errors:. ```; [ERROR] [GLSLShader] ERROR: Compilation of Fragment shader failed:; [ERROR] [GLSLShader] From File: C:\Users\Alex\Dev\sofa1\src\applications\plugins\VolumetricRendering\examples/share/shaders/tetra.frag; [ERROR] [GLSLShader] 0(8) : warning C7555: 'varying' is deprecated, use 'in/out' instead; 0(16) : error C7616: global variable gl_Color is removed after version 140; 0(35) : warning C7533: global variable gl_FragColor is deprecated after version 120. [ERROR] [GLSLShader] ERROR: Compilation of Vertex shader failed:; [ERROR] [GLSLShader] From File: C:\Users\Alex\Dev\sofa1\src\applications\plugins\VolumetricRendering\examples/share/shaders/tetra.vert; [ERROR] [GLSLShader] 0(20) : error C7616: global variable gl_ModelViewProjectionMatrix is removed after version 140; 0(23) : error C7616: global variable gl_ClipVertex is removed after version 140; 0(23) : error C7616: global variable gl_ModelViewMatrix is removed after version 140; 0(23) : error C7616: global variable gl_Vertex is removed after version 140. [ERROR] [GLSLShader] ERROR: Compilation of Geometry shader failed:; [ERROR] [GLSLShader] From File: C:\Users\Alex\Dev\sofa1\src\applications\plugins\VolumetricRendering\examples/share/shaders/tetra_triangles.geo; [ERROR] [GLSLShader] 0(45) : warning C7533: global variable gl_FrontColor is deprecated after version 120; 0(46) : error C7616: global variable gl_ClipVertex is removed after version 140. [ERROR] [GLSLShader] SHADER compilation failed.; [ERROR] [OglFloat4Attribute(OglFloat4Attribute1)] Variable ""a_vertexColor"" NOT FOUND in shader ""[ 'share/shaders/tetra.vert' ]""; [ERROR] [Node()] Object 'OglFloat4Attribute1' already has a node (/OglFloat4Attribute1). Please remove it from this node before adding it to a new one.; [ERROR] [OglFloat4Attribute(OglFloat4Attribute1)] TopologyData: value already has a TopologyDataHandler. createTopologyHandler should only be called once at init of the",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1867351181:224,plugin,plugins,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1867351181,8,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:86,plugin,plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877,2,['plugin'],['plugin']
Modifiability,"@fredroy as a matter of fact, I already saw people using the plugin manager UI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264811372:61,plugin,plugin,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2264811372,1,['plugin'],['plugin']
Modifiability,@fredroy could you try to add :; ``` cpp; Inherit::init();; ```. to call Mapping `init()` which include the function `testMechanicalState()` checking the `isMechanical` property.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3473#issuecomment-1325267101:42,Inherit,Inherit,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3473#issuecomment-1325267101,1,['Inherit'],['Inherit']
Modifiability,@fredroy interesting. I did search for this class in the SOFA repo and found nothing. I counted on the CI to warn if it was in an external plugin. But the ultimate check from senior SOFA developers was more reliable 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4985#issuecomment-2348170266:139,plugin,plugin,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4985#issuecomment-2348170266,1,['plugin'],['plugin']
Modifiability,@fredroy it seems a problem due to the plugin appear (VS2013).; Any idea of its origin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292519112:39,plugin,plugin,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-292519112,1,['plugin'],['plugin']
Modifiability,@fredroy thanks for the PR but I still crash in `applications/plugins/VolumetricRendering/examples/OglTetrahedralModel.scn` and `applications/plugins/VolumetricRendering/examples/OglVolumetricModel_hexa.scn`.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1866736213:62,plugin,plugins,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4398#issuecomment-1866736213,2,['plugin'],['plugins']
Modifiability,@fredroy thanks for the info... Here are the corresponding lines on windows: ; Adding Plugin CImgPlugin; -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR) ; -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR) . So we either need to install the imagemagick approach (I assume when CIMg cannot do something with a file it calls imagemagick) or to install the JPEG/TIFF libraries on windows/centos/macos. . I also wonder if CMakeLists.txt use conditionnal for JPEG why the tests are done unconditionally ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320:86,Plugin,Plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335465320,1,['Plugin'],['Plugin']
Modifiability,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:458,plugin,plugin,458,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257,5,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,"@fredroy, @guparan In this PR just wanted to have the exception message related with the Image_test. Here it is: ; ```; unknown file; C++ exception with description ""[instance(0,0,0,0,0x0,non-shared)] CImg<unsigned char>::load(): Failed to recognize format of file '/Users/sofa/jenkins/workspace/mac_clang-3.4_options/pr/all/applications/plugins/image/image_test/scenes/lena.jpg'."" thrown in the test body.; ```. Any idea why ? Could it be the image CImg library compiled without jpg support or something like that ? . EDIT: Ok I fixed this one...it is because ImageMagick is not install on some machine and thus CImg does not handle jpg. @guparan (I have installed ImageMagick on sofa-centos). . EDIT2: I updated the mac. I remember that CImg need to install external tool on windows. But don't remember which one...maybe it was imagemagick also. @guparan would you have some time to dig into that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052:338,plugin,plugins,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335427052,1,['plugin'],['plugins']
Modifiability,"@fspadoni i am using this feature for multithreading a RealSense RGB-D camera, through a RealSense grabber component in the image plugin (for which i will prepare another PR :-)), with other components in another plugin for non-rigid tracking goals. And it works well!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705:130,plugin,plugin,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420201705,2,['plugin'],['plugin']
Modifiability,"@guparan @epernod , I just tested the compilation again (without my patch) and I realized that SOFACUDA_DOUBLE has nothing to do with this issue, I was wrong about that. On my setup, the compilation does not works regardless of the SOFACUDA_DOUBLE option. I'm a bit surprized it works on your side. Here are information on my setup:; OS => Fedora 29; NVCC version => V10.1.105; CMake variable SOFACUDA_ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:384,variab,variable,384,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,6,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,@guparan @fredroy I guess this plugin is not compile by the CI. Would it make sense to add it?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085728300:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2829#issuecomment-1085728300,1,['plugin'],['plugin']
Modifiability,"@guparan @hugtalbot could you check this plugin is compiled on the CI, I have a doubt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542637878:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186#issuecomment-542637878,1,['plugin'],['plugin']
Modifiability,"@guparan I though about that but if you switch from release to debug I'm not sure cmake will always clean the lib repository to remove the non suffixed version. This is why I choose the ordering of operation. In debug load the _d and fallback to the normal. . @fjourdes its a pity that all those nice PR are waiting unmerged. . EDIT: I don't see a lot of work to do to have a ready PR (add some unit tests on the features added in RequiredPlugin and on PluginManager, use the msg_ api). Two hours of work maybe. . EDIT2: @guparan about the InSimo PR... we should merge the easy PRs from InSimo and don't wait the hard ones to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292:453,Plugin,PluginManager,453,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335823292,1,['Plugin'],['PluginManager']
Modifiability,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:121,refactor,refactoring,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270,1,['refactor'],['refactoring']
Modifiability,@guparan Thank you for the help. I have refactored it accordingly. It is also able to handle the case for number of iterations set to 1.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378657803:40,refactor,refactored,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378657803,1,['refactor'],['refactored']
Modifiability,"@guparan Your proposition does not work in the unlikely case of a plugin name containing "".dll"" in its name. The initial contract was, from the comments, to find the extension in the end of the string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188:66,plugin,plugin,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376503188,1,['plugin'],['plugin']
Modifiability,@guparan can you enable the HeadlessRecorder plugin ? It looks like this plugin is not turned on on CI :/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-357946781,2,['plugin'],['plugin']
Modifiability,@guparan do you remember what is the status of CGal plugin config on windows?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-524785014,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,@guparan faut il changer ce fichier: https://github.com/sofa-framework/ci/blob/master/scripts/configure.sh#L338-L344,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662089855:94,config,configure,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-662089855,1,['config'],['configure']
Modifiability,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:16,plugin,plugins,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552,1,['plugin'],['plugins']
Modifiability,"@guparan thanks for the reply!; Actually, ASAP would be great: I need to this setup the CI for the plugin SofaPython3 alongside our other plugins @SofaDefrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813:99,plugin,plugin,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1089#issuecomment-504456813,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:309,config,configured,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117,1,['config'],['configured']
Modifiability,"@guparan what's this macro for actually (sofa_auto_set_target_properties) ? apparently it is only used in external plugins (only SoftRobots.Inverse it seems...) maybe the macro should be removed, and SoftRobots.Inverse updated..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575:115,plugin,plugins,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1454#issuecomment-677723575,1,['plugin'],['plugins']
Modifiability,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:175,plugin,plugin,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429,7,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,"@guparan, @hugtalbot, @fredroy I have done the split of PR #548... Here is CImg related changed...; fix a serie of failing scene in Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/562#issuecomment-358634718:132,Flexible,Flexible,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562#issuecomment-358634718,1,['Flexible'],['Flexible']
Modifiability,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:187,Plugin,PluginRepository,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134,2,['Plugin'],['PluginRepository']
Modifiability,@guparan:; `/media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-975/ubuntu_gcc-5.4_options_release/src/applications/plugins/image/extlibs/DiffusionSolver/DiffusionSolver.h:4:33: fatal error: CImgPlugin/SOFACImg.h: Aucun fichier ou dossier de ce type; compilation terminated.`. Looks like it's used also that way in the SOFA codebase. How should I proceed? should I put back the include of `CImgPlugin/../` and remove the include of `CImgPlugin` + cleanup the codebase of all direct inclusions? Or do the opposite..?; Or should I just revert my previous commit?...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105:119,plugin,plugins,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/975#issuecomment-484386105,1,['plugin'],['plugins']
Modifiability,"@hugtalbot , I think it's not possible to move the declaration of the new DataExchange type class in the Image plugin.; The DataExchange component is a template class and it can't be used across the dynamic libraries but it must be instantiate and exported in the library where they are defined for every data type.; For instance in the image plugin the DataExchange template class can't be used to defined the class DataExchange< ImageUC > because the DataExchange template class is defined in another dynamic library. That should be allow only across static libraries.; correct me if I am wrong.; I didn't realize that this morning when we talked about it at the SOFA meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279:111,plugin,plugin,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770#issuecomment-420630279,2,['plugin'],['plugin']
Modifiability,"@hugtalbot ; My guess is the following:; When loading the SofaCUDA plugin, the module check if it can detect a cuda device. If there is no such a device, it now triggers an error, whereas it was just a print before. In other words, the behavior does not change (loading of the plugin), but the log message is now counted as an error. ; I think it is a good thing. It helps to identify the scenes that cannot be executed on the CI. For the case of the failing scene. I'll just remove the `<RequiredPlugin name=""SofaCUDA""/>` which is even not required.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503:67,plugin,plugin,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903663503,2,['plugin'],['plugin']
Modifiability,"@hugtalbot @guparan I am not sure I just need to switch from EXPECT_EQ to EXPECT_NE. When I'll refactor the interface of the TaskScheduler, a large majority of the test will not make sense. I suggest to merge this PR now, and I'll change the tests in my next PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622:95,refactor,refactor,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1927#issuecomment-808284622,1,['refactor'],['refactor']
Modifiability,"@hugtalbot CI is not happy with this one... ; ``` ; applications/plugins/CGALPlugin/CylinderMesh.inl:503:6: error: ; ‘void cgal::CylinderMesh<DataTypes>::draw() ; [with DataTypes = sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>]’ ; marked ‘override’, but does not override; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407:65,plugin,plugins,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1210#issuecomment-549388407,1,['plugin'],['plugins']
Modifiability,@hugtalbot For me the term global applied on a variable is not appropriate for a static class member. Is it?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3491#issuecomment-1332049529:47,variab,variable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3491#issuecomment-1332049529,1,['variab'],['variable']
Modifiability,@hugtalbot Is plugin Sensable now obsolete with the new Geomagic plugin out ?; Otherwise these fix were solving my issues at the time.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799:14,plugin,plugin,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/22#issuecomment-260444799,2,['plugin'],['plugin']
Modifiability,"@hugtalbot The label is actually ""postponed"". The reason is I'm not convinced that the variable also states that there are zeros in the compressed values. I did not see anything about that property in the code. In any case, I do not need this PR to continue. So it can be closed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1128663819:87,variab,variable,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1128663819,1,['variab'],['variable']
Modifiability,"@hugtalbot Yes, It is related to QT configuration, and It's hard to build in MAC M2 Processor with. I tried to compile and install the qt with source code, but it is not adapted to my laptop. I hope the successful case can be provided if possible and I will follow it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1302025698:36,config,configuration,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1302025698,2,"['adapt', 'config']","['adapted', 'configuration']"
Modifiability,@hugtalbot `UnilateralInteractionConstraint` inherits from `PairStateAccessor` which checks at init that it has valid links to mechanical objects. So an error should normally trigger...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3533#issuecomment-1573276801:45,inherit,inherits,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3533#issuecomment-1573276801,1,['inherit'],['inherits']
Modifiability,@hugtalbot any news ? Maybe from the Caribou plugin ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/224#issuecomment-774035825:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/224#issuecomment-774035825,1,['plugin'],['plugin']
Modifiability,@hugtalbot could you review my review in commit cb4eb09; I had to split your VecCoord position device into 2 variables. As in fact the original Data is linked to rigid mechanical Object in the scene and so changing its size and adding new position change the behavior of the rigid objects.; I tested your Demo scene and I can still nicely see the omni moving. Well done.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983:109,variab,variables,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-406545983,1,['variab'],['variables']
Modifiability,@hugtalbot the variable m_savedPositions is not defined.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-743479048:15,variab,variable,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-743479048,1,['variab'],['variable']
Modifiability,@jnbrunet did you do something similar in the plugin SofaCaribou ? aka set an EigenMatrix in a Data?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-884057216:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-884057216,1,['plugin'],['plugin']
Modifiability,@jnbrunet no existing example scene to my knowledge. other comments taken into account :+1: thanks to the reviewers!. PS: plugin is listed in the CMakeLists in _applications/plugins_,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-744738890:122,plugin,plugin,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-744738890,1,['plugin'],['plugin']
Modifiability,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:118,config,config,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485,1,['config'],['config']
Modifiability,@m4n4n @guparan These lines of code:; https://github.com/m4n4n/sofa/blob/7a0b89cb0c9420930a862312466c8f7bfdcc218a/applications/sofa/gui/BatchGUI.cpp#L55-L63; is duplicated in `else` condition following it. Wouldn't it be better to refactor it so they appear only once?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-377978125:231,refactor,refactor,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-377978125,1,['refactor'],['refactor']
Modifiability,"@maddin200 OK for us to keep it as is :+1: ; Could you open a second PR based on this one, where the naming of the variable would be improved and the for loop would be modernized. Let's keep this one to review until next PR is opened",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3224#issuecomment-1225456455:115,variab,variable,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3224#issuecomment-1225456455,1,['variab'],['variable']
Modifiability,@marques-bruno Please update/enhance the Doxygen for both methods :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602:29,enhance,enhance,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/822#issuecomment-438601602,1,['enhance'],['enhance']
Modifiability,"@marques-bruno: Inheriting from the PythonScriptDataEngine seems to be a good solution! I didn't really know this was possible, but like you describe, covers most of the intended use-case. I'll keep it in mind in case I might need it myself. Ohh, and maybe it makes for a good example for a more advanced usage of the PSDE that could be added to the codebase?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-423536069:16,Inherit,Inheriting,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-423536069,1,['Inherit'],['Inheriting']
Modifiability,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:471,maintainab,maintainability,471,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139,2,"['Refactor', 'maintainab']","['Refactor', 'maintainability']"
Modifiability,@matthieu-nesme . I looked back to the PR and I will remove the three Data field because:; - controlling the queue size with a Data is not crucial. I will replace it with an attribute and get/set or an environment variable. ; - the msgLevel is un-used and was there to rise discussion on whether or not controlling the level of messages emitted by an object make sense (eg when debugging). ; - the logLevel'one is un-used yet but should one day override the behavior of the mis-used f_printLog. ; ; Thanks again to pointing that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536:214,variab,variable,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276757536,1,['variab'],['variable']
Modifiability,"@matthieu-nesme I think we should implement str() as you have in your fork ;) . First of all thanks Matthieu and Maxime for the interest and time you put into this PR because it is getting very long. . Let's me summary the different approach that have been tried so far. . 1) The first version of the code was doing conversion by hard-coding the object type detection and calling getLinkPath(). The problem with this version is that it cannot be extend without adding more hard-coded test and recompiling the SofaPython plugin. ; Everyone agree this version is bad. . 2) The second version that was suggested by maxime is much more extensible as it was using the str() operator. The problem I see with this approach is that the str function have been implemented and is used in a lot of place (including Anatoscope fork) and so it may not be a god idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conver",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:446,extend,extend,446,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,"['extend', 'plugin']","['extend', 'plugin']"
Modifiability,@matthieu-nesme and @maxime-tournier do you agree if we cut this PR in four on a per files basis instead of per commit ?; It could be:; - Sofa base; - SofaPython; - Flexible; - Compliant,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312731984:165,Flexible,Flexible,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-312731984,1,['Flexible'],['Flexible']
Modifiability,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:238,Flexible,Flexible,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429,2,"['Flexible', 'config']","['Flexible', 'configuration']"
Modifiability,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:648,inherit,inherits,648,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370,2,['inherit'],['inherits']
Modifiability,"@thomas-lemaire After some digging into internet I found a non-portable solution to support the 'non this' version. . ```cpp ; #define INFO_0() ldmsg_info(this); #define INFO_1(A) oldmsg_info(A); #define INFO_X(x, A, FUNC, ...) FUNC; #define msg_info(...) INFO_X(, \; ##__VA_ARGS__,\; INFO_1(__VA_ARGS__),\; INFO_0(__VA_ARGS__)); ```. I hate (and love) so much these macro trick (template wizard are welcome for a better solution)... ; but with this macro we can now write:; ```cpp; msg_info() << ""This is sended with an automatic 'this' parameter' provided as emitter;; msg_info(this) << ""This is sended with an explicit BaseObject provided as emitter "" ; ; msg_info(""SomeSPecifcSource"") << ""This is sended with a string as emitter"";; ```; which look perfect to me. . The problem is that this solution is not portable because it uses the ## GCC extension. ; Any idea on how to make a portable solution ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957:63,portab,portable,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-278920957,3,['portab'],['portable']
Modifiability,@untereiner could you please include CGOGN as an external library + separate the core changes and the pluginizable changes; Any scene to test ?; We are all curious to test it !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064:102,plugin,pluginizable,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402413064,1,['plugin'],['pluginizable']
Modifiability,"A CentoOS config has been added to our dashboard, and the problem is reproductible. ; https://www.sofa-framework.org/dash; Now, time to fix it!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276308722:10,config,config,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276308722,1,['config'],['config']
Modifiability,"A continuation of ; - #4812 . but much bigger and less trivial. This PR removes SOFA_ENABLE_LEGACY_HEADERS, implying:; - no more collections/deprecated projects which was to ensure the continuity of Sofa.NG; - some renaming in MultiThreading and SofaCUDA. The deletion of the layer compat between old and new modules was acted for 23.06 so not a big deal by itself (only 1.5 year late🤷‍♂️ ).; But some olden modules still have some code/components:; - SofaGraphComponent: with a `Gravity` component; - SofaMiscCollision: with `DefaultCollisionGroupManager, SolverMerger` components and `RayTriangleVisitor` visitor; - SleepController: with a `SleepController`component; - SofaValidation: with various measuring stuff components.; There is also SofaExporter which had some forgotten(?) examples of components which were moved. So the examples have been just moved as well. So what should be done for these components?; IMO (not done yet); - `Gravity` seems useless/not usable.; - `SleepController` might maybe probably be interesting; - `DefaultCollisionGroupManager, SolverMerger` were bogus and RayTriangleVisitor not used at all; - SofaValidation may be totally transformed as a plugin (as in `applications/plugins`). To be discussed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4813:1181,plugin,plugin,1181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"A doxygen comment referred a variable name that does not exist. It was probably renamed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2467:29,variab,variable,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2467,1,['variab'],['variable']
Modifiability,"A few Config.cmake.in need more find_package. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2891:6,Config,Config,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2891,1,['Config'],['Config']
Modifiability,"A first round of renaming from 'bloc' to 'block'. Issue https://github.com/sofa-framework/sofa/issues/2329. [ci-depends-on https://github.com/sofa-framework/Flexible/pull/2]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2404:157,Flexible,Flexible,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2404,1,['Flexible'],['Flexible']
Modifiability,"A follow-up from the comment in the report (`PR is fine, usage of Vec1 should be checked with all teams`); If a team really needs 1D for those, they can still do in their own code/plugin with their own explicit instanciation of {Hexa/Quand/Triangle/...}SetGeometryAlgorithms.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2291#issuecomment-903552138:180,plugin,plugin,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2291#issuecomment-903552138,1,['plugin'],['plugin']
Modifiability,"A long PR but it is actually divided in 3 parts. A link is provided for each part pointing to a comparison with the previous part. # 1. Introduction of the plugin. A new plugin is introduced to welcome new components. It is enabled by default.; https://github.com/sofa-framework/sofa/compare/master...alxbilger:sofamatrix?expand=1. The plugin may deserve a better name. # 2. Move CImgPlugin features on matrices. I introduced features related to matrices in CImgPlugin in a previous PR. It did not make sense. It is preferable to have them in a higher-level plugin, so I moved them in SofaMatrix.; https://github.com/alxbilger/sofa/compare/sofamatrix...sofamatrix_cimg. # 3. Introduction of a component to visualize the matrix. A component is introduced. It gets the matrix from the linear system and convert it to an bitmap to visualize it directly in the GUI.; https://github.com/alxbilger/sofa/compare/sofamatrix_cimg...sofamatrix_gui. ![image](https://user-images.githubusercontent.com/10572752/144421772-5676f6e8-12af-4468-8bec-24ea7856b00f.png). # To do:. - [x] Expand the bitmap in height; - [ ] Update the bitmap when the image changes during the simulation; - [ ] Do we move `GlobalSystemMatrixExporter` into SofaMatrix?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2517:156,plugin,plugin,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2517,4,['plugin'],['plugin']
Modifiability,A more generic was asked in #3592 all scenes are usually using template=Vec3d we should use the SReal version template=Vec3 allowing us to test the float cases. Is float really useful?. A CI (nightly?) should test the float configuration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1403263559:224,config,configuration,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1403263559,1,['config'],['configuration']
Modifiability,"A new library (SofaDefaultType.Testing) is introduced, so it can be linked against in other modules.; In this library, an interface to test derived classes from BaseMatrix is introduced. Those tests are then instantiated in SofaBaseLinearSolver_test, another module than where the interface is. The interface is close to where BaseMatrix is defined, but can be instantiated in other modules. The existing tests in SofaBaseLinearSolver_test are kept, but they have been adapted to avoid the pattern using the inl file. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280:469,adapt,adapted,469,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280,1,['adapt'],['adapted']
Modifiability,"A parallel equivalent of `CGLinearSolver` on assembled matrices. Benchmark on the introduced example `applications/plugins/MultiThreading/examples/ParallelCGLinearSolver.scn`:. - CG is not multithreaded. ```; [INFO] [BatchGUI] 1000 iterations done in 43.1158 s ( 23.1933 FPS). LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 4 7.28 1 30.20 67.39 35.64 5.53 35.64 82.80 ....MBKSolve; ```. - CG is multithreaded. ```; [INFO] [BatchGUI] 1000 iterations done in 32.1941 s ( 31.0615 FPS). LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 4 19.30 1 10.88 138.69 12.71 6.27 12.71 39.57 ....MBKSolve; ```. The counter of interest is `MBKSolve`. We notice that it is about 2.8x faster on average. ![peek](https://github.com/sofa-framework/sofa/assets/10572752/6dd55e76-16b8-4961-a9aa-77111793048d). [ci-depends-on https://github.com/sofa-framework/Regression/pull/50]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138:115,plugin,plugins,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138,1,['plugin'],['plugins']
Modifiability,"A possible option for a first move towards the use of multiple mesh data structures would be to put all the ""using"" out of the xxxTopologyContainer classes into a traits. `; template <T>; struct Cell { };; `; `; template <>; struct Cell<SofaBaseMesh> {; using Vertex = index_type;; using Edge = index_type;; ....; };; `. The someone else could write (in a plugin); `; template<>; struct Cell<MyOwnMeshDataStructure> {; using Vertex = another_type;; ....; };; `",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/866#issuecomment-449626170:356,plugin,plugin,356,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866#issuecomment-449626170,1,['plugin'],['plugin']
Modifiability,"A quick summary of this problem. . 1) There is multiple variation of this problem and It impact several people at Defrost.; But the underlying idea is that we are using the executatable location to deduce the plugin & data location (normally EXEC_LOC/../bin or EXEC_LOC/../share). The problem is that when building with recent VS, VS adds and extra directory (Release or Debug) so the ""../"" in ""../bin"" is ""not enough"" to go to the sofa root install directory which result in searching for plugins in PATH/bin/bin instead of PATH/bin and PATH/bin/share instead of PATH/share. 2) The problem is specific to people that are using Visual Studio build solution for their builds as VS adds Release/Debug subdirectory to the build directory. The problem was probably existing before but it was made very obvious since PR #518 & PR #502 as now we always use the relative location to the executable to find the files like plugins or resoures. 3) I assume that the problem was not visible in our CI because for windows builds we are using Ninja with VC compiler; as we don't use a real VS solution the Release/Debug extra path were not added. . 4) Erwan is working on a fix, to force CMake not to emit the extra subdirectories when using VS solution, it is currently in a private branch : ). @ErwanDouaille please complete the summary is needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600:209,plugin,plugin,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358042600,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"A remark about cimg : if I remember well it is an extlib of the plugin 'image', it would be great to share it in-between plugins (by moving it back as a sofa extlib?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604:64,plugin,plugin,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281630604,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"A scene is added in the MultiThreading plugin. Its goal is to show the difference between the parallel collision detection algorithms and the single threaded equivalents, in terms of performances. My results after 1000 time steps:. # Single thread; 43.6893 s ( 22.8889 FPS). ; `doCollisionDetection` runs in ~28.99 ms (mean). # Multi thread; 22.9585 s ( 43.5568 FPS). ; `doCollisionDetection` runs in ~7.81 ms (mean). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2112:39,plugin,plugin,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2112,1,['plugin'],['plugin']
Modifiability,"A small TLDR of the discussion at [SofaDefrost/plugin.SofaPython3#110](https://github.com/SofaDefrost/plugin.SofaPython3/pull/110):. In python, it is frequent to use a controller component to drive the simulation. Sometime, the controller needs to pre-compute some stuff before the simulation begins. To do so, it might need the data of the components found in the scene. We didn't have any event until this PR that makes the controller (or any component) know when the scene as finished its initialization process (when the init function has been called in every components of the scene graph). With this PR, we can now listen to the **onSimulationInitStart** and **onSimulationInitDone** events, which will be triggered by the simulation before and after the call to the init visitor of the scene graph.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751:47,plugin,plugin,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1173#issuecomment-538977751,2,['plugin'],['plugin']
Modifiability,"A user can chose in the scene to update the bounding box or not. It is no longer a compile-time selection. In InextensiblePendulum.scn, the second pendulum explodes. An update of the bbox would adapt to the exploded object. The bbox is so large that the first pendulum is no longer visible. It may lead the user to think that the scene is not working properly. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3080:194,adapt,adapt,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3080,1,['adapt'],['adapt']
Modifiability,"ADD : use a string instead of an enum to specify an integration method as it easier for user to add new ones. This slightly changes the API of numerical integration.; ADD : add the possibility to add a function to create on the fly the required integration points (when an analytical formula is available).; UPDATE : modified the name of the integration methods for edges, triangles, tetrahedra and hexahedra.; UPDATE : use of numerical integration in Flexible; FIX : bug corrected when using of BezierShapeFunction with plugin HighOrderMeshes . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936:452,Flexible,Flexible,452,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"ADD Hadrien's collisionAlgorithm and ContraintGeometry to external plugins. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3890:67,plugin,plugins,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3890,1,['plugin'],['plugins']
Modifiability,"AFAIK, @bcarrez installed zmq on CI ubuntu (or maybe not, just before vacations). . For liboscpack it requires a specific version : https://github.com/SofaDefrost/sofa/blob/sofaCommunication/applications/plugins/Communication/README.md; If you install liboscpack from the repository there is some bugs in it. About windows and mac I never tested on it. Plus, I have to write a liboscpack cmake find :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157:204,plugin,plugins,204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-355128157,1,['plugin'],['plugins']
Modifiability,"API used only by the [Compliant plugin](https://github.com/sofa-framework/Compliant/), which is deprecated and archived. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4776:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4776,1,['plugin'],['plugin']
Modifiability,"ARCH=sm_60; CMake variable CUDA_VERSION=10.1. And here are the output errors from ninja:. ```; [1/96] Building NVCC (Device) object applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1428,plugin,plugins,1428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,1,['plugin'],['plugins']
Modifiability,"ATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. --- sys.version ---; 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ]; --- PATH ---; /usr/local/opt/python@3.8/bin/:/opt/anaconda3/envs/sofarl/bin:/opt/anaconda3/condabin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/usr/local/share/dotnet:~/.dotnet/tools; --- SOFA_ROOT ---; /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; --- PYTHONPATH ---; /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages:/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages:/path/to/SofaPython3/lib/python3/site-packages:; --- sys.path ---; ['', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.12.01_MacOS/plugins/SofaPython3/lib/python3/site-packages', '/path/to/SofaPython3/lib/python3/site-packages', '/opt/anaconda3/envs/sofarl/lib/python38.zip', '/opt/anaconda3/envs/sofarl/lib/python3.8', '/opt/anaconda3/envs/sofarl/lib/python3.8/lib-dynload', '/opt/anaconda3/envs/sofarl/lib/python3.8/site-packages']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help""",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:3975,plugin,plugins,3975,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,1,['plugin'],['plugins']
Modifiability,"About sofa-spm, it is possible to submit new plugins install recipes by making PR to https://github.com/SofaDefrost/SPM-RECIPES",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952:45,plugin,plugins,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527834952,1,['plugin'],['plugins']
Modifiability,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:431,plugin,plugin,431,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067,2,['plugin'],['plugin']
Modifiability,"About the `[[maybe_unused]]` :; this is triggered only with clang(15), not with gcc and it seems to be because of :; `-Wunused-but-set-variable now also warns if the variable is only used by unary operators.` (https://releases.llvm.org/15.0.0/tools/clang/docs/ReleaseNotes.html); So all the added `[[maybe_unused]]` are used with variables because of the `++` later on, which is a bit weird to me too.🤓. I can just revert https://github.com/sofa-framework/sofa/pull/3627/commits/c168efba2f0ff912c3ace3ffe81c179f9712e02d if needed",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1423384347:135,variab,variable,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3627#issuecomment-1423384347,3,['variab'],"['variable', 'variables']"
Modifiability,"AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Type == DataType::Integer); return Info::setAt(index, value);; throw std::runtime_error(""Invalid operation"");; }; /// ...; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1588,refactor,refactor,1588,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905,1,['refactor'],['refactor']
Modifiability,According to the CI there is one test in Flexible that is failing in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428:41,Flexible,Flexible,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311171428,1,['Flexible'],['Flexible']
Modifiability,"Actually, Flexible is supposed to compile without this PR, as SofaValidation (required in the plugin) needs SofaGeneral which contains the other dependencies (SofaGeneralEngine and SofaBoundaryCondition).; So I would say that there is a problem with the nightlies (and the CI is correct)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375:10,Flexible,Flexible,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722411375,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"Actually, I dont even know if anybody uses the GUI with the docker installation 😅. I think it is a matter of configuration of docker to access the local X server. You may try setting some environment variables; https://stackoverflow.com/questions/69872788/docker-could-not-connect-to-any-x-display",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315521495:109,config,configuration,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315521495,2,"['config', 'variab']","['configuration', 'variables']"
Modifiability,Add Caribou as an external fetchable plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2484:37,plugin,plugin,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2484,1,['plugin'],['plugin']
Modifiability,"Add ConstraintAttachButtonSetting to allow configuration of Lagrangian based mouse interaction directly in the scene. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4601:43,config,configuration,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4601,1,['config'],['configuration']
Modifiability,"Add a SOFAPYTHON_PYTHON3 cmake option to SofaPython plugin, to use Python 3 C-API",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/210:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/210,1,['plugin'],['plugin']
Modifiability,"Add a `FixedWeakConstraint`. It is really a simplified version of `RestShapeSpringForcefield` that only fixes points with respect to their rest_shape given one single value of stiffness. I didn't use an inheritance because `RestShapeSpringForcefield` does too much and the two set of features aren't really compatible. Keep it simple... . This completes the holy trinity of fixed constraints, now we will have Weak, Projective and Langrangian fixed constraints. It unifies the mechanism. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4750:203,inherit,inheritance,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4750,1,['inherit'],['inheritance']
Modifiability,"Add a new update mechanism for components which need to update / recompute internal variables when one or several data are modified. A visitor has been created for this, called at each begin of time step to refresh if necessary the internal variables. All feedback welcome. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1131:84,variab,variables,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131,2,['variab'],['variables']
Modifiability,Add a variable to count the number of primitve tests performed during the narrow phase of the collision detection.; This variable is only for statistics purpose. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/930:6,variab,variable,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/930,2,['variab'],['variable']
Modifiability,"Add virtualization layer to attachment performers. There exists two of them, either using lagrangian based constraints or springs. A common method `start_partial` already existed that was supposed to add required components and parametrize them to either add bilateral constraint or a spring, but this common mechanism was not link with any virtual inheritance. I need to handle both performers blindly using this method (`start_partial`) so I added a virtualization layer that makes more sens than what currently exists. I use it in this PR -> ([Sofa.IGTLink PR](https://github.com/sofa-framework/Sofa.IGTLink/pull/5)). I've also took advantage of this refactoring to rename some attributes that where not following the naming policy, because why not. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4638:349,inherit,inheritance,349,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4638,2,"['inherit', 'refactor']","['inheritance', 'refactoring']"
Modifiability,"Added fix to add ""_d"" to plugin library name on MSVC on debug mode",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/15:25,plugin,plugin,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/15,1,['plugin'],['plugin']
Modifiability,Additional parameters of the DefaultContactManager can be added as a string in the responseParams attribute. This can be refactored so that dynamic Data are created for those additional parameters.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3883:121,refactor,refactored,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3883,1,['refactor'],['refactored']
Modifiability,"Adds an example to the plugin ArticulatedSystemPlugin. . ![image](https://user-images.githubusercontent.com/12150715/159580224-bb724ee4-f469-4697-b373-e6e22c0b4a86.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804:23,plugin,plugin,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804,1,['plugin'],['plugin']
Modifiability,"Adds new features with examples:; - BooleanOperations; ![image](https://user-images.githubusercontent.com/12150715/121251475-e9d8e780-c874-11eb-8118-15d3dd24b54e.png); - UpsamplePointCloud; ![image](https://user-images.githubusercontent.com/12150715/121252236-c4001280-c875-11eb-8290-6c92b30fd82d.png); - PoissonSurfaceReconstruction; ![image](https://user-images.githubusercontent.com/12150715/121251754-37edeb00-c875-11eb-99f0-a120bff4f2f1.png) ; - FrontSurfaceReconstruction; ![image](https://user-images.githubusercontent.com/12150715/121251927-679cf300-c875-11eb-9114-9ebbd3d50789.png). Fixes compilation in CylinderMesh:; - **EDIT**: removed unused `#include <sofa/gl/template.h>`. Minor cleaning in DecimateMesh:; - Data member variables names with d_. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2124:735,variab,variables,735,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2124,1,['variab'],['variables']
Modifiability,"After #475 merge, we should decide when we want the old behavior (all options in `config.h`) to stop working.; The work to adapt all config.h includes in SOFA is easy (searching for macros and including the right config/*.h file) but we have to find the best solution to permit translation for everybody around. What do you think?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/494:82,config,config,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494,4,"['adapt', 'config']","['adapt', 'config']"
Modifiability,"After a quick look here are my notes:; - CM is for CombinatorialMap (in case you wonder :)), . - there are changes on some core mapping that seems to add only minor details as the 'useRestPosition' ; in SofaKernel/modules/SofaBaseMechanics/BarycentricMapping.h; Could this be merged independenty using a fast path. . - could the the extlibs/NGOGN should be removed to help in readbility of the PR. - is it possible that the new topology layer (from sofa/core/topology and SofaBaseTopology) to be moved out of the core in a module/plugin CMTopology and be part of the same cmtopology namespace. . - could the new CMforcefields moved to a module/plugins CMMechanics ? . - why there is files that appears like new files but does not seems to use the cmtopology like ?:; modules/SofaMiscFem/ElementFEMForceField.cpp; modules/SofaMiscMapping/BeamMapping.h; is this a mistake or do I mis-understood something ? . DM. ; NOTE: I will edit my notes if after more reading I found some note are not relevant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885:530,plugin,plugin,530,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402778885,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"After a successful build, I have the following trace when running:. ```; [INFO] [runSofa] PluginRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/collections:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib; [INFO] [runSofa] DataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/runSofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-so",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:90,Plugin,PluginRepository,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginRepository', 'plugins']"
Modifiability,"After building SOFA master (up to date) with success. Building INSTALL project in Visual 2017 failed:. ```; 1>------ Build started: Project: INSTALL, Configuration: Release x64 ------; 1>-- Install configuration: ""Release""; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL/glew.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL/glut.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL/glxew.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL/wglew.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/iconv.h; ....; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SofaOpenglVisual/SofaOpenglVisualConfig.cmake; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/SceneCreator.lib; 1>-- Up-to-date: C:/projects/sofa-build/install/bin/SceneCreator.dll; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/GetAssembledSizeVisitor.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/GetVectorVisitor.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneCreator.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneUtils.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/config.h; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets-release.cmake; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfigVersion.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfig.cmake; 1>CMake Error at applications/plugins/CImgPlugin/cmake_install.cmake:38 (file):; 1> file cannot create d",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1117:150,Config,Configuration,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1117,2,"['Config', 'config']","['Configuration', 'configuration']"
Modifiability,After discussion we would suggest the following tree:. applications/plugins/VolumetricRendering/; - examples/; - src/VolumetricRendering/; - CUDA; - src/VolumetricRendering/CUDA/. is this correct @fredroy,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1875014355:68,plugin,plugins,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1875014355,1,['plugin'],['plugins']
Modifiability,"After discussion with @JeremieA, this PR breaks the meaning of the variable `compressed`. The comment after this variable says `true if the additional storage is empty or has been transfered to the compressed data structure`. But @JeremieA claims the variable also says if there are zeros in the compressed values. A suggestion was to use the refactored `CompressedRowSparseMatrix` class from https://github.com/InSimo/ISSofa, which brings more clarity on the meanings of the variables (among other important things).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1117396358:67,variab,variable,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2894#issuecomment-1117396358,5,"['refactor', 'variab']","['refactored', 'variable', 'variables']"
Modifiability,"After discussion with @courtecuisse, the function is supposed to be used when cutting meshes.; In our plugins it is not used anymore, although it might still have relevance in the future.; Whether to keep it in SOFA sources or not... any option is ok for us.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878215670:102,plugin,plugins,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878215670,1,['plugin'],['plugins']
Modifiability,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776,1,['plugin'],['plugin']
Modifiability,"Ah, yes, then you can do the same as described here https://scheiklp.github.io/sofa_env/setting_up_sofa.html#manually-linking-sofapython3-to-python. In the downloaded zip, the path is the same (plugins/SofaPython3/lib/python3/site-packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750424803:194,plugin,plugins,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750424803,1,['plugin'],['plugins']
Modifiability,"Ah, you must be careful to not confuse image and CImgPlugin. Both of them are using CImg but they are using it separately.; The warning you are noticing comes from CImgPlugin (which warns if it does not find libjpeg and libtiff).; CImgPlugin_test tests if JPEG or TIFF have been enabled (if not, of course it does not test it). As for plugin image, I think it was developed mainly by people using imagemagick on Linux or mac (which is called automatically if CImg does not recognize the format I think).; On Windows, it is not really natural to have imagemagick into the PATH... Anyway, the solutions are:; - change lena.jpg by lena.bmp (it should not need any external library); - add imagemagick to the Windows CI; - add libjpeg/libtiff to the external libraries of Sofa (like libpng) and add libjpeg/libpng support to the image plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728:335,plugin,plugin,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/460#issuecomment-335476728,2,['plugin'],['plugin']
Modifiability,Ahem... configuring a RECENT version of libavcodec and co. is a pain in the... back on Centos. I kindly suggest we disable this feature on centos...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360820037:8,config,configuring,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-360820037,1,['config'],['configuring']
Modifiability,"All pluginized modules were ignored in binaries due to postinstall-fixup scripts. :warning: **Do not hesitate to suggest other plugins/modules that should be DISABLED by default.**. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1725:4,plugin,pluginized,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1725,2,['plugin'],"['pluginized', 'plugins']"
Modifiability,"All scene examples in the Communication plugin crash, I guess the plugin is not activating thus generating these errors/crashes right @guparan ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236:40,plugin,plugin,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-666219236,2,['plugin'],['plugin']
Modifiability,All tests scenes are now failing because we cannot load the SofaSphFluid plugin. ; This fix should helps ;) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/467:73,plugin,plugin,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467,1,['plugin'],['plugin']
Modifiability,"Allow a 3-level organization: Package > Component > Target. ### Example with SofaPython3 (PR to come in SofaPython3 repo); You want to do:; ```cmake; find_package(SofaPython3 COMPONENTS Bindings); ```; To do that, you must use these macros in your project:; ```cmake; # In SofaPython3/CMakeLists.txt; # Create a Package without Target to contain the Components; sofa_create_package(; PACKAGE_NAME SofaPython3; PACKAGE_VERSION ${PROJECT_VERSION}; RELOCATABLE ""plugins""; ); ```; ```cmake; # In SofaPython3/Bindings/CMakeLists.txt; # Create a Component with Targets into that Package; sofa_create_component_in_package_with_targets(; COMPONENT_NAME Bindings; COMPONENT_VERSION ${SofaPython3_VERSION}; PACKAGE_NAME SofaPython3; TARGETS ${PROJECT_NAME} AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR "".""; RELOCATABLE ""..""; ); ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671:459,plugin,plugins,459,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671,1,['plugin'],['plugins']
Modifiability,"Almost all collision detection components in SOFA were a fusion of the broad phase and the narrow phase in a single component. This prevents some combination and confuses about what the component really does.; Following the work in #2010 and #2043, some components such as `BruteForceDetection` and `DirectSAP` can be removed in favour of a broad phase and a narrow phase. In this PR:. - `BruteForceDetection` is no longer a collision detection object. Instead, it's an empty object which creates a `BruteForceBroadPhase` and a `BVHNarrowPhase` component, and warn the user.; - `DirectSAP` is no longer a collision detection object. Instead, it's an empty object which creates a `BruteForceBroadPhase` and a `DirectSAPNarrowPhase` component, and warn the user.; - `BruteForceDetection` has been replaced with `BruteForceBroadPhase` and `BVHNarrowPhase` in all scenes (xml, python etc); - `CudaCollisionDetection` no longer inherits from `BruteForceDetection`. Instead, it inherits from `BruteForceBroadPhase` and `NarrowPhaseDetection`. In a future PR, this component can be transformed to a narrow phase only.; - Fix code where `BruteForceDetection` is used. If `BruteForceDetection` is found in the scene, the warning to the user looks like:; ```; [DEPRECATED] [BruteForceDetection(bruteForceDetection1)] BruteForceDetection component is deprecated. ; As a replacement, use a BroadPhase component, such as [BruteForceBroadPhase, IncrSAP, ParallelBruteForceBroadPhase, RayTraceDetection], ; AND a NarrowPhase component, such as [BVHNarrowPhase, DirectSAPNarrowPhase, IncrSAP, ParallelBVHNarrowPhase, RayTraceDetection]. ; BruteForceBroadPhase and BVHNarrowPhase have been automatically added to your scene for backward compatibility. ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#so",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2118:923,inherit,inherits,923,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2118,2,['inherit'],['inherits']
Modifiability,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:22,config,config,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645,3,['config'],['config']
Modifiability,"Also further above ""I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342830102:72,Plugin,PluginRepository,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342830102,1,['Plugin'],['PluginRepository']
Modifiability,"Although I understand your wish not to break too much and do this transition form custom to stl containers, wouldn't it be more logical to make the Sofa Vec<N,T> inherit from stl fixed_array ? I don't know if this is desirable, but if it is ever done, wouldn't this pr be somehow reverted by his change ? What I mean is that, an RGBA value is still a vector of fixed size, so there is no problem regarding this inheritance that allows to do vector operations with it right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4263#issuecomment-1790440999:162,inherit,inherit,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4263#issuecomment-1790440999,2,['inherit'],"['inherit', 'inheritance']"
Modifiability,An example of a plugin update further to this PR: https://github.com/SofaDefrost/SoftRobots/pull/213,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1541472870:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1541472870,1,['plugin'],['plugin']
Modifiability,An issue in the [script for doxygen](https://github.com/sofa-framework/ci/tree/master/doxygen) for the SOFA plugins should be investigated.; @guparan do not hesitate to edit this comment ;),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3014:108,plugin,plugins,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3014,1,['plugin'],['plugins']
Modifiability,"An other big singleton to refactor is ObjectFactory.; Especially bothering because its getInstance() is called in the RegisterObject function, which is called when the library is loaded.; One solution would be to move those RegisterObject() into the plugin initialisation (where it has been given a pointer to the ObjectFactory). The drawbacks are:; - cumbersome; - the init's plugin file would need all the headers of the components it need to register.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562520621:26,refactor,refactor,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3770#issuecomment-1562520621,3,"['plugin', 'refactor']","['plugin', 'refactor']"
Modifiability,"An other round of fixes to compile base SOFA with float (framework+GUI, no tests nor plugins). The CI itself will only check if nothing changed with double. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3435:85,plugin,plugins,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3435,1,['plugin'],['plugins']
Modifiability,"An other session of warnings removal. it *should* be harmless 🤫. Most important change: replace usage of enum {xxx = yyy} with constexpr keyword for compile-time constant expressions. This is clearer, was made for this, and you can specify the type, contrary to enum https://en.cppreference.com/w/cpp/language/enum :; ```; Values of unscoped enumeration type are [implicitly-convertible](https://en.cppreference.com/w/cpp/language/implicit_conversion#Integral_promotion) to integral types. ; If the underlying type is not fixed, the value is convertible to the first type from the following list able to hold their entire value range: int, unsigned int, long, unsigned long, long long, or unsigned long long, extended integer types with higher conversion rank (in rank order, signed given preference over unsigned) (since C++11).; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3118:709,extend,extended,709,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3118,1,['extend'],['extended']
Modifiability,"And maybe a slight warning on the breaking side, as people implementing new Mappings will certainly have to include `<sofa/core/Mapping.inl>`; (as they will complain about missing references with the linking of their plugin/code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1622#issuecomment-742390601:217,plugin,plugin,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1622#issuecomment-742390601,1,['plugin'],['plugin']
Modifiability,"And remove dependency. If you need to link a background (image/pix) to a camera (for a gui), I dont think the camera itself should be aware of it, but the GUI itself. (and it should then bear the dependency with BackgroundSetting). (Could not find any use of it in the SOFA code base, or even in the plugins). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2637:300,plugin,plugins,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2637,1,['plugin'],['plugins']
Modifiability,And use them in the Simulation.cpp component. Follow the discussion in this PR: ; https://github.com/SofaDefrost/plugin.SofaPython3/pull/110. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1173:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1173,1,['plugin'],['plugin']
Modifiability,AnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaUserInteraction/lib/libSofaUserInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sof,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:5986,Plugin,PluginManager,5986,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,AnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [WARNING] [ObjectFactory] Class already registered: CubeTopology; [WARNING] [ObjectFactory] Class already registered: CylinderGridTopology; [WARNING] [ObjectFactory] Class already registered: SphereGridTopology; [WARNING] [ObjectFactory] Class already registered: SphereQuadTopology; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [WARNING] [ObjectFactory] Class already registered: CenterPointTopologicalMapping; [WARNING] [ObjectFactory] Class,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:25295,Plugin,PluginManager,25295,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"Another suggestion from @JeremieA is that actually the list of all the plugins that are being compiled could be derived at CMake configure/generate time, and therefore a configuration file containing that list could be issued as the default list of plugins to load.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128:71,plugin,plugins,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-297004128,4,"['config', 'plugin']","['configuration', 'configure', 'plugins']"
Modifiability,"Another suggestion:; ```; /; plugins; BeamAdapter; ...; framework; Sofa; Compat; Config; Core; ...; modules; Sofa; Component; Collision; ...; scripts; tools; ...; ```; but in this case we have 2 Sofa projects which is not possible in CMake, so we would have to find a trick. I still prefer the solution 1 from my previous comment. It's the cleanest and most consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109818555:29,plugin,plugins,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1109818555,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"Any idea why `SofaPython3/Bindings.Sofa.Tests` tests are failing?. The output:; ```text; Running unit-tests Bindings.Sofa.Tests; Calling: bash -c ""/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Bindings.Sofa.Tests --gtest_output=xml:unit-tests/Bindings.Sofa.Tests/report.xml 2>&1"". [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/src/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython3] Added '/builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/python3/site-packages' to sys.path; [INFO] [PluginManager] Loaded plugin: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/lib/libSofaPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)];",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:763,plugin,plugins,763,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,2,['plugin'],['plugins']
Modifiability,Any reason to have re-opened this ? I thought we all agreed that this PR would be discarded and closed as the initial behavior of having Sofa.Testing built for other plugins TU is OK and the problem with conda was fixed thanks to #447.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1964698947:166,plugin,plugins,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4459#issuecomment-1964698947,1,['plugin'],['plugins']
Modifiability,"Apparently on the source master, so something pretty recently.; Sorry for not investigating yet, but I rather prefer create an issue not to forget it. Associated post: https://www.sofa-framework.org/community/forum/topic/meshsteploader-plugin-loading-failed/#post-10306",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123:236,plugin,plugin-loading-failed,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558#issuecomment-356541123,1,['plugin'],['plugin-loading-failed']
Modifiability,Are all pluginisation finished? I would wait for it otherwise you will need to re-update all the scene.; By the way I would be happy to set an option to automatically include the main plugin...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559:8,plugin,pluginisation,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1802#issuecomment-776631559,2,['plugin'],"['plugin', 'pluginisation']"
Modifiability,Are you targeting a special plugin? Since we really don't have python scenes in Sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-851365305:28,plugin,plugin,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-851365305,1,['plugin'],['plugin']
Modifiability,"ArticulatedSystem is a complex and not really maintained code, designed to create articulated things like articulated bodies, etc.; It was accepted that it should be isolated somewhere and maybe refactored/redesigned later (if someone is motivated). I took the liberty to retrieve the ArticulatedControllers (which were deprecated/removed some years ago) and put it back into it. Especially because I retrieved the ""man-walking"" example which is quite cool in my opinion.; But the code was created by DigitalTrainers, I dont know if it could be bothersome license-wise. <img src=""https://user-images.githubusercontent.com/11028016/153249327-37e2b9f2-8961-474f-b2cd-d3d8ce52d9fa.gif"" width=""400"" />. **EDIT: Let's vote between**; - ArticulatedSystem as an external repository which would be referenced in _applications/plugin_ (react with 🚀 ); - ArticulatedSystem in Sofa.Component because this is really important ( react with ❤️ ). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684:195,refactor,refactored,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684,1,['refactor'],['refactored']
Modifiability,As @untereiner said in kind of jokes...we need a gantt diagram.; Which actually I agree because such refactoring effort requires a massive amount of work and coordination.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626997:101,refactor,refactoring,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626997,1,['refactor'],['refactoring']
Modifiability,"As Guillaume open the sofa refactoring pandora box by submitting this PR and we are full of energy after holiday here is a bit unrelated question... . Do we seriously needs bwdInit ? . I looked into the code base and ; init() => 1057 matches; reinit() => 388 matches; bwdInit() => 60 matches. on the 60 match, half of that is for .h, in the 30 remaining... lot of other seems 'weird'. So, should keep this mechanism ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613:27,refactor,refactoring,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416993613,1,['refactor'],['refactoring']
Modifiability,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:174,plugin,plugin,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"As a reaction to your proposition I adapted my scene and dropped the .scn file and now it works, thank you for your work! . PS (another issue?): Since createScene does not have the argument self - that I am using to communicate values between the different functions - I inserted a python script controller, i.e. ; ```python; def createScene(rootNode) :; rootNode.createObject('PythonScriptController',classname=""convergenceBeam_Template"", ; filename=""convergenceBeam_TemplatePython.py"", ... , ; name=""convergenceBeam_Template"", variables=sys.argv[1]+"" ""+sys.argv[2]); ```; and ; ```python; class convergenceBeam_Template (Sofa.PythonScriptController):; def createGraph(self,rootNode):; self.defineDataFromJson(self.findData(""variables"").value[0][0]); self.outputJsonAtTimeStep = ast.literal_eval(self.findData(""variables"").value[1][0]); ```; This does not seem to be very elegant.; 1. Could self be used as well as an argument for createScene and createSceneAndController?; 2. Is there another way to communicate values between the functions (e.g. createScene and onBeginAnimationStep)?. If there is none, I am open to write another issue (I discussed with a colleague of mine and he had the same problem before)!. [@maxime-tournier edit: fixed formatting]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750:36,adapt,adapted,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324711750,4,"['adapt', 'variab']","['adapted', 'variables']"
Modifiability,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:201,plugin,plugin,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437,4,['plugin'],['plugin']
Modifiability,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:984,extend,extending,984,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662,1,['extend'],['extending']
Modifiability,"As decided at the last STC, a serie of plugins will be moved out from the SOFA repository and saved into their own repository.; List of related plugins [available here](https://docs.google.com/spreadsheets/d/1FVQN4rghI1SSYuhT1Y3L5fUZdL7XXPETgQ1GQ28KlD8/edit#gid=0). This will help in the process of deprecation and pluginization in SOFA. - Extraction process is clearly explained in this [documentation](https://docs.github.com/en/github/using-git/splitting-a-subfolder-out-into-a-new-repository); - Remaining: making a pull-request in SOFA to; - remove all plugin files; - add a plugin folder containing one file `ExternalProjectConfig.cmake.in`; - edit _applications/plugin/CMakeLists.txt_ to replace `sofa_add_plugin` by `sofa_add_plugin_external`; - Finalize the GitHub repository:; - add a description; - add reviewers (sofa-framework/reviewers, sofa-framework/consortium-staff and appropriate watcher); - add the ""plugin"" topic (flag). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1442:39,plugin,plugins,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1442,7,['plugin'],"['plugin', 'pluginization', 'plugins']"
Modifiability,"As discussed, one problem remains: ; In installed SOFA, relocatable plugins can't find SOFA libraries because RPATH is not set to handle dependencies like `<install-dir>/plugins/SofaValidation/lib/SofaValidation.so -> <install-dir>/lib/SofaLoader.so`; To be fixed in another PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111:68,plugin,plugins,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604#issuecomment-726817111,2,['plugin'],['plugins']
Modifiability,"As explained on the [forum](https://www.sofa-framework.org/community/forum/topic/error-plugin-not-foundsofamiscforcefielddev/#post-9786), the scene makes no sense since it uses deprecated components or components in private plugin. Another scene already shows ShapeMatching example using the ShapeMatching engine: ICPRegistration_ShapeMatching_Engine.scn. There fore the [PR#331](https://github.com/sofa-framework/sofa/pull/331) removes this scene.; Thank you for the notice @lujaindong",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578:87,plugin,plugin-not-foundsofamiscforcefielddev,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-315023578,2,['plugin'],"['plugin', 'plugin-not-foundsofamiscforcefielddev']"
Modifiability,"As far as I know, the dependency with `TopologyData.inl` comes from the fact that changes in topology within a MechanicalObject is handled differently compared to the rest of the components that support topology changes. See [MechanicalObject::handleStateChange](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.inl#L391-L573); This constrats with the way most of the components are being notified of changes is the topology, by first encapsulating their topology sensitive state variable in the appropriate topology data container ( `PointData`, `EdgeData`, `TriangleData` ... ) and then by implementing a callback method which to update the topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:536,variab,variable,536,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672,4,"['config', 'variab']","['configuration', 'variable', 'variables']"
Modifiability,"As in SofaNG we are calling the activable/deactivable 'plugins' modules; I added a macro that have the right ""name"" instead of hijacking the; sofa_add_plugin's one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732:55,plugin,plugins,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732,1,['plugin'],['plugins']
Modifiability,"As in the title, once I try to launch the tripod-tuto.py I get the following message:. ```; [ERROR] [SofaPython3::SceneLoader] Unable to completely load the scene from file 'C:\Users*******\Desktop\aaasofa\tripod-tuto.py'.; Python exception:; ModuleNotFoundError: No module named 'stlib3'. At:; C:\Users******\Desktop\aaasofa\tripod-tuto.py(1):; (219): _call_with_frames_removed; (848): exec_module; (6):. ```; What should I do? I checked and the stlib3 folder is where it should be (/plugins/STLIB/lib/python3/site-packages/)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3880:485,plugin,plugins,485,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3880,1,['plugin'],['plugins']
Modifiability,"As introduced in #2021 , a quick fix for a SofaCUDA cmake configuration file not found when requested. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2022:58,config,configuration,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2022,1,['config'],['configuration']
Modifiability,"As it can be retrieved from the other parameters; Fix a bug when restoring the camera before everything is initialized. I guess this class would like a good refactoring in the future 🥸. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4888:157,refactor,refactoring,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4888,1,['refactor'],['refactoring']
Modifiability,"As it is using SofaPython3 to run, should not it be ... in the SofaPython3 plugin 😶 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2361#issuecomment-927965087:75,plugin,plugin,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2361#issuecomment-927965087,1,['plugin'],['plugin']
Modifiability,"As mentioned and discussed several months ago, the migration of the [SOFA Forum](https://www.sofa-framework.org/community/forum/) to the [GitHub Discussions](https://github.com/sofa-framework/sofa/discussions) (GHD) feature is now official. This issue aims at presenting the migration process:. | **Timing** | **Step** |; |---------------------|-----------------------------------------------------------------------------|; | January (01->15) | ~~Validation of the GHD format organization~~<br>~~Open GHD on the repositories~~: [SOFA](https://github.com/sofa-framework/sofa/discussions/categories), [SofaPython3](https://github.com/sofa-framework/SofaPython3/discussions/categories), [SoftRobots](https://github.com/SofaDefrost/SoftRobots/discussions/categories)<br>~~Uploading the migration process (cf this issue)~~<br>~~Forum [annoucement](https://www.sofa-framework.org/community/forum/topic/moving-to-github-discussions-lets-vote/#post-21397) of the Forum migration: replies possible until end of February~~ |; | January (15->31) | ~~Preventing any new registration on the Forum~~<br>~~[Redirection](https://github.com/sofa-framework/sofa/discussions/2593) towards GHD~~<br>~~Preventing the creation of new topics~~<br>~~All Forum replies must include a reminder about the migration~~ <br>~~Change link on SOFA website~~ |; | February | ~~Export of Forum data~~|; | March | ~~Complete export~~ <br>~~Changing Forum roles of all users preventing posting~~ <br>~~Evaluate best option: copy as static pages / import all topics in GHD~~<br>~~Removal of web-plugins~~ |; | May | Dereferencing from the SOFA website menu |",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2591:1559,plugin,plugins,1559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2591,1,['plugin'],['plugins']
Modifiability,"As plugins are not really part of SOFA (and are going to move to their own repository soon), I finally think we should not add the SOFA license header to them. Still, I suggest to have some license template for plugins. Something like this:; ```; /******************************************************************************; * *; * ComplexMathematicalStuff plugin *; * (c) 2015-2017 Someone *; * *; *******************************************************************************; * The plugin license comes here. *; *******************************************************************************; * made for SOFA, Simulation Open-Framework Architecture *; * (c) 2006-YYYY INRIA, USTL, UJF, CNRS, MGH *; ******************************************************************************/; ```. I will remove all plugins-concerned commits from this PR and create a new one for them. What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778:3,plugin,plugins,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278710778,5,['plugin'],"['plugin', 'plugins', 'plugins-concerned']"
Modifiability,"As pointed by @thomas-lemaire in #355 & #13 there are several issue on ObjExporter. ; In this PR I suggest to fix & unify the exporter (if you want to contribute...feel free to commit). . Currently it:; - factor & unify shared code between OBJExporter, STLExporter and MeshExporter by inheriting from ; BaseSimulationExporter; - adds a set of tests for OBJExporter, STLExporter and MeshExporter, the test coverage is not bad; - change of the API so that the ::write() function returns a boolean indicate the success or the failure; - add new possibility on the provided filename (to automatically create the missing path element)...; - report error & messages when the files cannot be created. ; - deprecation of the 'hard coded' interaction behavior... (I can explain if needed).; - fix crashes when missing topology. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372:285,inherit,inheriting,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372,1,['inherit'],['inheriting']
Modifiability,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/663:77,plugin,plugins,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663,2,"['config', 'plugin']","['config', 'plugins']"
Modifiability,"As soon as the 1st SOFA NG version is ready, the github repository including the CMakeList configuration of NG should be released.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/245:91,config,configuration,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/245,1,['config'],['configuration']
Modifiability,"As suspected, the two missing unit tests were not yours. Two plugins were ignored in PR builds on Windows, implying 2 unit tests.; It's fixed :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002:61,plugin,plugins,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621#issuecomment-378910002,1,['plugin'],['plugins']
Modifiability,"As the title says. and Refactor as a majority of tests had the same scene structure. More dependencies could be removed (MechanicalObject in particular) but rewriting was very time-consuming and I was lazy 🤥. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2733:23,Refactor,Refactor,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2733,1,['Refactor'],['Refactor']
Modifiability,"As those tests does not inherit SofaTest anymore, I think this issue is kind of fixed.; Feel free to re-open if it is not actually the case",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081:24,inherit,inherit,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1935#issuecomment-1499800081,1,['inherit'],['inherit']
Modifiability,"As you noted, `Utils::getPluginDirectory()` use should be somewhat discouraged, because it offers less functionality compared to `PluginRespository` which can be expanded by an external application, provided it takes the responsibility of defining the content of the environment variable `SOFA_PLUGIN_PATH`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270:130,Plugin,PluginRespository,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344874270,2,"['Plugin', 'variab']","['PluginRespository', 'variable']"
Modifiability,"At STC4 (3 years ago then) was decided to remove SMP code as it was not maintained anymore #457 ; (starting from [a69e632](https://github.com/sofa-framework/sofa/pull/457/commits/a69e63286838c8bb1c4bd1bf286367ebf2ced67d) ); This PR is removing the rest of SMP-related code in; - in the core; - in Flexible; - in SofaMiscCollision. Remove preprocessor flags and SMP related examples as well. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1613:297,Flexible,Flexible,297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1613,1,['Flexible'],['Flexible']
Modifiability,"At https://defrobotics2022.sciencesconf.org/ we noticed that a lot of sofa users are manually setting SOFA_ROOT and PYTHONPATH. ; The problem is that when they are using a new version, they often forgot to update these path in their system configuration resulting in very hard to understand problems including random crashes (because runSofastarts, then try to load or use a plugin from a different sofa version which can only lead to ). We should think about some mecanisme to detect and guide users when this happens. The mecanism does not need to be bullet proof, guiding 80% of users would be already great. . Drafted suggestion on how we can do that is welcome.; On my side i think that we may have in SOFA_ROOT a file storing an unique ""token/md5 checksum"" telling which version of runSofa the plugin was compiled for and the same for every plugins. ; In case the runSofa version is different to the one stored into this file...and detect a ""wrong SOFA_ROOT"" prints a warning and use an empty SOFA_ROOT. ; Same in the plugin loader, if the runSofa unique token is not the one the plugin is expecting then prints a warning and refuse to load it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3099:240,config,configuration,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3099,6,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,"At the end of the STC yesterday we discussed ""packaging"" and ""granularity"" aspects of the different component sets. On the way back I remembered that we addressed this question a while back, and at the time I was proposing an approach ""a la Python"":; - create relatively small plugins organized by ""theme"" (i.e. ForceField, Mapping, Collision, etc.). This would be like a module in Python; - group these plugins into packages through which you can access all modules or only selected ones; - in a scene file we could then include all modules from a package using <RequiredPackage packageName=""..."" /> or use the current <RequiredPlugin /> for specific modules. When it comes to the way files are organized it the different folders in the SOFA directory, I think most of us wanted to go back to a meaningful structure. I am proposing something like this:. - SOFA; + Core; + ForceFields; + Supported; + Unsupported; + Deprecated; + Mappings; + Supported; + Unsupported; + Deprecated; + .... As a developper this would make it easier to quickly see what to use or not. From a user perspective, the packages and plugins would provide another organization, from a functional point of view. Any thoughts and comments are welcome...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489:277,plugin,plugins,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334396489,3,['plugin'],['plugins']
Modifiability,Automatic doc generation for SofaPython3 plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3764:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3764,1,['plugin'],['plugin']
Modifiability,"BLEM HERE >; > ; > 1. install anaconda and make virtual environment; > 2. install sofa framework; > 3. define the environment variables; > 4. import Sofa in python; > ; > **Expected behavior** < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >; > ; > Success importing Sofa in python without any error.; > ; > ### Environment; > **Context**; > ; > * System: Mac OS X 14.4.1 (23E224); > * Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); > * State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >; > ; > **Command called**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:1328,variab,variable,1328,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['variab'],['variable']
Modifiability,BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2180,Plugin,PluginManager,2180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"BaseVector/BaseMatrix and their inherited classes uses int as Index, because some fields are required to be signed (offset mechanism); An idea could be to create a SignedIndex.; Issue raised in the PR #1792",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1539#issuecomment-780642089:32,inherit,inherited,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1539#issuecomment-780642089,1,['inherit'],['inherited']
Modifiability,"Based on #2043. A new component is introduced: `ParallelBVHNarrowPhase`. As the name suggests, it is the parallel implementation of `BVHNarrowPhase`. ## Details. The broad phase provides a list of pairs of collision models. In the initial `BVHNarrowPhase` component, the list was processed sequentially. In `ParallelBVHNarrowPhase` each pair is processed in a task, which is given to a thread pool. Note that the traversal of the bounding volume hierarchy is not parallel. It is still single threaded. Due to race conditions, some operations must be done prior to the parallel tasks: . 1. Detection output creation. This operation is very time consuming (see #2047). If #2047 is merged, we can expect better results.; 2. Topology initialization. ## Results. The tested scene is `applications/plugins/MultiThreading/examples/ParallelBruteForceBroadPhase.scn` during 500 time steps. The narrow phase duration has been measured with `ParallelBVHNarrowPhase` compared to `BVHNarrowPhase`. ```; BVHNarrowPhase 3.5 ms; BVHNarrowPhase + PR#2047 2.36 ms; ParallelBVHNarrowPhase 2.1 ms; ParallelBVHNarrowPhase + PR#2047 0.97 ms; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2053:792,plugin,plugins,792,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2053,1,['plugin'],['plugins']
Modifiability,"Based on #2813 . and sofang-ize paths/plugins/etc.; and creation of some *Testing framework (solidmechanics, topology, mapping...). and a loooots of clean as well. (not enough). Some tests were disabled, they are back again. ~~Will be updated when Collision/engine/etc will be merged.~~ done. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2873:38,plugin,plugins,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2873,1,['plugin'],['plugins']
Modifiability,"Based on #3548 . Similar to ParallelHexahedronFEMForceField. `addDForce` and `addKToMatrix` are the parallelized functions.; `addForce` is not parallelized. It would require to duplicate code from the base class. Hence a refactoring is needed for a proper implementation (in another PR). Note that `addForce` is usually not the bottleneck. Quick benchmarks show performances improvement on the provided example. I think there is still room for improvement in `addDForce`. But it would require a few changes in the base class. Instead of having a force vector for each task, I suggest to store only the force on the DoFs that have been visited during the task. I am not sure if it will bring more perfs improvements. In this PR, `addKToMatrix` is parallelized. It is not in `ParallelHexahedronFEMForceField`, but the same principle can be applied (in another PR). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3552:221,refactor,refactoring,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3552,1,['refactor'],['refactoring']
Modifiability,"Based on #3634. Mostly focusing on updating the compat :; - [x] SofaBaseCollision; - [x] SofaBaseLinearSolver; - [x] SofaBaseMechanics; - [x] SofaBaseTopology; - [x] SofaBaseUtils; - [x] SofaBaseVisual; - [x] SofaBoundaryCondition; - [x] SofaConstraint; - [x] SofaDeformable. The rest for a next one. [ci-depends-on https://github.com/sofa-framework/PluginExample/pull/3]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3649:350,Plugin,PluginExample,350,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3649,1,['Plugin'],['PluginExample']
Modifiability,"Based on #4034 Pursuing the cleaning for the SOFA lifecycle ahead of the v23.12. - start removing DEPRECATED codes, getting disabled in v23.12; - lifecycle Multithreading plugin; - lifecycle SofaCUDA plugin; - lifecycle SceneCheck plugin; - remove SofaGeneralObjectInteraction and SofaMeshCollision; - remove all v21.06, v21.12 and v22.06 deprecation references EXCEPT : Compat and Topology :japanese_ogre: @epernod :wink: . [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/101]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4040:171,plugin,plugin,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4040,3,['plugin'],['plugin']
Modifiability,"Based on ; - #2958 . Contains:; - #2960 . Allow compilation of the Sofa codebase without the cmake option SOFA_ENABLE_LEGACY_HEADERS, i.e the compatibility mode. (Sofa codebase = default cmake options, i.e framework, Component, tests and the few plugins ON by default). [NOTci-depends-on https://github.com/sofa-framework/Registration/pull/2]; [NOTci-depends-on https://github.com/sofa-framework/SofaPython3/pull/268]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975:246,plugin,plugins,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975,1,['plugin'],['plugins']
Modifiability,"Based on ; - #3102. The autoloading libraries (plugin/module/whatever) feature was not including the ""new"" libraries (i.e Sofa.Component* ) since the fact that are neither plugin nor module (but still loadable); This PR fixes it.; Autoloading is not really recommended but a lot of scenes outside this repo relies on it implicitely. TODO: decide if autoloading should off by default (and force the users to explicitly load their own necessary libs in their scenes). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3103:47,plugin,plugin,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3103,2,['plugin'],['plugin']
Modifiability,"Based on ; - #4925 . This PR sets the `ConfigDirectoryPath` with the value of getSofaLocalUserDir (see https://github.com/sofa-framework/sofa/pull/4875) instead of the current directory (could be the binary dir, install dir, etc). This PR also adds the option to change this directory path to a custom path, set with a new cmd line option. ---; Note (not the object of the PR 🙂‍↕️); A bit weird that the config directory path getter is from the GUI, which means one needs a dep on Sofa.GUI to get the config dir path 🤔. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4926:39,Config,ConfigDirectoryPath,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4926,3,"['Config', 'config']","['ConfigDirectoryPath', 'config']"
Modifiability,"Based on https://github.com/sofa-framework/sofa/pull/3594. Introduce `ParallelStiffSpringForceField` and `ParallelMeshSpringForceField`. The base classes `SpringForceField` and `StiffSpringForceField` were also refactored to be able to reuse common code with their parallel implementations. Only the `addForce` method is implemented. The provided example has an explicit integration scheme where the force derivative is not required. `addDForce` and `addKToMatrix` may come later. Benchmark:. ```; Sequential; 1000 iterations done in 9.11327 s ( 109.73 FPS). Parallel; 1000 iterations done in 5.04016 s ( 198.406 FPS); ```. The implementation is naïve. We could probably do better. Note there are 11264 points and 62668 edges (springs) in the provided example. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3596:211,refactor,refactored,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3596,1,['refactor'],['refactored']
Modifiability,"Based on previous PR #3539 . Add methods and binding for:; - loading sofa.ini file to set resources/example path; - loading SOFA plugin given the file path; - activate/deactivate SOFA messageHandler, get the number of queued message and get the message with its priority. edit:; - Avoid using string as it can produce memory bad access from other software integration. ; - Also remove use of config.h inside SofaPhysicsAPI .h to be able to easily include it in third library. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3540:129,plugin,plugin,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3540,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Based on this thread: https://www.sofa-framework.org/community/forum/topic/collision-callback-function-in-python/. I wanted to create a SofaPython3 binding, that reads the number of contacts and their associated distances.; The variable in ContactListener that stores this information is private and cleared at every CollisionBeginEvent.; -> Added a getter function for ContactsVector.; -> Added a buffer variable that is over written before ContactsVector is cleared (storing a copy over different events).; -> Added functions to retrieve the number of contacts and their respective distance values and point pairs in the buffer. I will also create a pull request on SofaPython3 with the respective bindings, once this pull request is merged. Cheers,; Paul. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1678:228,variab,variable,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1678,2,['variab'],['variable']
Modifiability,"Based on; - #2996 . Remove last usages of SofaTest in plugins.; Now SofaTest needs to be enabled in cmake to be compiled (and not forcefully added). Fix #1885 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3000:54,plugin,plugins,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3000,1,['plugin'],['plugins']
Modifiability,"Based on; - #4464. Fix ; - #4462 . This PR check the provenance of the loaded symbol, if it is consistent with the given filename of the plugin; Using the system function `dladdr()` https://man7.org/linux/man-pages/man3/dladdr.3.html. Fix the newly introduced (failing) test in #4464; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4466:137,plugin,plugin,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4466,1,['plugin'],['plugin']
Modifiability,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:173,plugin,plugin,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217,2,['plugin'],['plugin']
Modifiability,"Because I have so much branch with this change duplicated that it is worth having it in a PR and forget about that. . Of course, a real refactoring of the reading code would be better but until done let's just have this kind of cleaning . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1902:136,refactor,refactoring,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1902,1,['refactor'],['refactoring']
Modifiability,"Because both SofaValidation and SofaNonUniformFem can't be plugins (aka. ""relocatable"") if we want them to be hard-linked to something. Plugins are supposed to be loaded/unloaded dynamically at run time through the PluginManager (which is already capable of parsing the plugins directory). . So we have to choose:; 1. SofaValidation and SofaNonUniformFem are plugins, we want to be able to load/unload them with PluginManager --> runSofa has to use PluginManager to load them.; 2. SofaValidation and SofaNonUniformFem are not plugins, they are libs potentially hard-linked to runSofa (or any other part of SOFA) and thus must stay in ""lib"" (in ""bin"" on Windows) --> we have to remove their ""relocatable"" attribute in CMakeLists. Personally, I already chose solution 2 in my current CMake branch (wip).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499:59,plugin,plugins,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-633651499,8,"['Plugin', 'plugin']","['PluginManager', 'Plugins', 'plugins']"
Modifiability,Because currently this PR does not break anything.; Removing `SOFA_NO_UPDATE_BBOX` would change the behavior and would be candidate for a depreciation period etc. I would prefer to merge this PR now during the time of the reflection about what to do with this variable.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176244612:260,variab,variable,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3080#issuecomment-1176244612,1,['variab'],['variable']
Modifiability,"Because defaultTestBehavior was supposed to fail three time and not one (this is not working with EXPECT_NONFATAL_FAILURE). The fact it actually fails only once has been changed later by changing the default behavior in BaseTest. The rational for this change was that for a transitional period of time it was decided to avoid warnings messages to generate a test failure so that the dashboard is less ""red"" and the tests was not refactor since this decision. ; ; EDIT: I didn't made EXPECT_ATLEAST_TWO_FAILURES...only ONE.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645:429,refactor,refactor,429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370804645,1,['refactor'],['refactor']
Modifiability,"Because it is creating a new type, and we will break instancing templated class like Mapping and so on. If you do MyMapping<Vec3, ExtVec3> it will complain that there is no BaseMapping<Vec3, ExtVec3> and so on. (basically).; I remember asking people in a weekly meeting, and we agreed it was better to do a typedef instead of an inheritance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1139#issuecomment-528832117:329,inherit,inheritance,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1139#issuecomment-528832117,1,['inherit'],['inheritance']
Modifiability,"Because it's better when your plugin build does not fail because of SOFA. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2453:30,plugin,plugin,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2453,1,['plugin'],['plugin']
Modifiability,Because no-one should be forced to compile opengl 1.x code...it is now a real plugin. . CHANGELOG:; - make plugin CMake package ; - move code to src/SofaOpenglVisual for better encapsulation; - rename all data field that are not conformant to sofa guidelines (so use the d_ prefix); - remove commented code all around; - move defintion from .h to .cpp; - remove the GLEW specific code all around. This PR is based on #1070 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071:78,plugin,plugin,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071,2,['plugin'],['plugin']
Modifiability,"Because of the tricky mecanisme to inject SOFA_TARGET in the ObjectFactory, the config.h file must always be included before the ObjectFactory.h . Not doing that results in broken target. ; The PR fix the faulty components. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2693:80,config,config,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2693,1,['config'],['config']
Modifiability,"Been looking into github actions, trying to get it to do what I want... not yet really successfully, but I've got a proof of concept. Currently, I run the checks on a slave on ci.inria.fr, and the current POC does a minimalist build / install / run tests workflow. But I think it would be worth asking ourselves what the perfect CI/CD pipeline could be for SOFA & it's plugins. In my mind, I'd like this:. SOFA:; - build / run tests (of course...); - build documentation (doxygen, sphinx...) & deploy on github pages / readthedocs / website; - build docker image & push on docker hub or equivalent (consistent build environment); - generate standalone binaries, zip & upload on github pages / website (SOFA-latest / sofa-nightly build...). PLUGINS:; - load docker image, or wget binaries generated by SOFA; - build / run tests (of course...); - build documentation (doxygen, sphinx...) & deploy on github pages / readthedocs / website; - build docker image & push on docker hub or equivalent; - generate binaries, zip & upload on github pages / website; ; ADVANTAGES of github actions vs JK2:; - ALL CI/CD config centralized in a .github folder in the git repository; - NO separate tool but Github's interface; - SUPER DUPER KICKASS interface design from github, gives direct access to all logs, checks, status badges etc. for each workflow / job / step in the Github checks processes. ![plop2](https://user-images.githubusercontent.com/13734391/69730387-3e4fc280-1128-11ea-8f91-20eeb660d233.png). DISADVANTAGES:; - Still in beta (some bugs noticed, especially when running in self-hosted slaves...); - A lot to recode given what @guparan did in JK2; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatib",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1225:369,plugin,plugins,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225,2,"['PLUGIN', 'plugin']","['PLUGINS', 'plugins']"
Modifiability,"Before 20.12 there was a lot of ""stowaway passenger"" includes. We are in the process of removing them which has the consequence that a lot of plugins relying on these ""stowaway passenger"" are not compiling anymore. ; Fixing that is relatively easy in most of the case, you need to find which type is missing and include the corresponding file in the most appropriate file of your project. It can in a .cpp, an .inl or a .h.; Most common missing includes ares:; ```cpp; sofa::simulation::Node => #include <sofa/simulation/Node.h>; msg_xxxx function => #include <sofa/helper/logging/Messaging.h>; system::thread ctime => #include <sofa/helper/system/thread/CTime.h>; fixed_array => #include <sofa/helper/fixed_array.h>; ```. In PR:; ```cpp; sofa::helper::AdvancedTimer => #include<sofa/helper/AdvancedTimer.h>; sofa::helper::ScopedAdvancedTimer => #include<sofa/helper/ScopedAdvancedTimer.h>; sofa::type::Mat => #include<sofa/type/Mat.h>; ```. In PR: #1794 ; ```cpp; #include <sofa/core/behavior/BaseMechanicalState.h>; #include <sofa/core/BaseMapping.h>; #include <sofa/core/behavior/MultiMatrixAccessor.h>; #include <sofa/defaulttype/typeinfo/TypeInfo_Mat.h>; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1757:142,plugin,plugins,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1757,1,['plugin'],['plugins']
Modifiability,Best way to do this in my opinion is to move those plugins in their own repo and use GitHub Actions for continuous integration.; How to do that? See [SofaPython3 workflow](https://github.com/sofa-framework/SofaPython3/blob/master/.github/workflows/ci.yml),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906:51,plugin,plugins,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285#issuecomment-971439906,1,['plugin'],['plugins']
Modifiability,BilateralLangrangianConstraint API need to be refactored,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4834:46,refactor,refactored,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4834,1,['refactor'],['refactored']
Modifiability,"Bitwise comparison between different unnamed enum seems to be be deprecated (at least for gcc12) and it was spamming a lot of warnings in a private plugin. ; ```; /linuxdata/sofa/src/current/Sofa/framework/Core/src/sofa/core/objectmodel/Link.h:302: warning: bitwise operation between different enumeration types ‘sofa::core::objectmodel::TLink<sofa::core::objectmodel::BaseObject, sofa::core::objectmodel::BaseObject, 7>::<unnamed enum>’ and ‘sofa::core::objectmodel::BaseLink::LinkFlagsEnum’ is deprecated [-Wdeprecated-enum-enum-conversion]; /linuxdata/sofa/src/current/Sofa/framework/Core/src/sofa/core/objectmodel/Link.h:302:37: warning: bitwise operation between different enumeration types ‘sofa::core::objectmodel::TLink<sofa::core::objectmodel::BaseObject, sofa::core::objectmodel::BaseObject, 7>::<unnamed enum>’ and ‘sofa::core::objectmodel::BaseLink::LinkFlagsEnum’ is deprecated [-Wdeprecated-enum-enum-conversion]; 302 | #define ACTIVEFLAG(f) ((ActiveFlags & (f)) != 0); | ~~~~~~~~~~~~~^~~~~~; /linuxdata/sofa/src/current/Sofa/framework/Core/src/sofa/core/objectmodel/Link.h:305:81: note: in expansion of macro ‘ACTIVEFLAG’; 305 | typedef LinkTraitsValueType<DestType, DestPtr, ACTIVEFLAG(FLAG_STRONGLINK), ACTIVEFLAG(FLAG_STOREPATH)> TraitsValueType;; | ^~~~~~~~~~; ```; (I dont know why it was only appearing only for the plugin compilation, maybe some warnings flags are added by an external cmake target); Anyway the macro to enable flags was quite dirty to me so I have changed it a little bit. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not gener",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3714:148,plugin,plugin,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3714,1,['plugin'],['plugin']
Modifiability,"Bonjour,; I am trying to model cutting on a deformable object, but I would like to use a Sparse Grid Topology to avoid meshing etc.; I found the component `DynamicSparseGridTopologyContainer` which seems to be the right thing, but sadly I get index errors, when I try to remove elements (through shift-right-click interaction in the GUI).; But something seems to happen, as the visual model deforms and also finally crashes, when no points are left. Error:; ```bash; [ERROR] [DynamicSparseGridTopologyModifier(DynamicSparseGridTopologyModifier)] Unable to remove the hexahedra: 130 its index is out of bound.; ```. Video:; <video src=""https://github.com/sofa-framework/sofa/assets/29635054/1c5129b9-9336-4968-910f-107a57800ebe"" width=""200"" height=""auto"">. Example Scene:; ```python; import Sofa; import Sofa.Core; import Sofa.Simulation. PLUGINS = [; ""Sofa.Component.AnimationLoop"", # [FreeMotionAnimationLoop]; ""Sofa.Component.Collision.Detection.Algorithm"", # [BVHNarrowPhase,BruteForceBroadPhase,CollisionPipeline]; ""Sofa.Component.Collision.Detection.Intersection"", # [MinProximityIntersection]; ""Sofa.Component.Collision.Geometry"", # [TriangleCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [CollisionResponse]; ""Sofa.Component.Constraint.Lagrangian.Correction"", # [LinearSolverConstraintCorrection]; ""Sofa.Component.Constraint.Lagrangian.Solver"", # [GenericConstraintSolver]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.IO.Mesh"", # [MeshOBJLoader]; ""Sofa.Component.LinearSolver.Direct"", # [SparseLDLSolver]; ""Sofa.Component.Mapping.Linear"", # [BarycentricMapping]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.FEM.Elastic"", # [HexahedronFEMForceField]; ""Sofa.Component.StateContainer"", # [MechanicalObject]; ""Sofa.Component.Topology.Container.Constant"", # [MeshTopology]; ""Sofa.Component.Topology.Container.Dynamic"", # [DynamicSparseGridGeometryAlgorithms,Dy",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4796:838,PLUGIN,PLUGINS,838,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4796,1,['PLUGIN'],['PLUGINS']
Modifiability,"Boost libs were not copied correctly in MinSizeRel and RelWithDebInfo configurations on Windows. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1711:70,config,configurations,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1711,1,['config'],['configurations']
Modifiability,"Both plugins are removed from sources and **NOT** fetchable since they are not of interest/use anymore:; - [ExternalBehaviorModel](https://github.com/sofa-framework/ExternalBehaviorModel); - [ManualMapping](https://github.com/sofa-framework/ManualMapping). I even hesitated to archive them directly. But let's be gentle. Related to https://github.com/sofa-framework/sofa/issues/1442. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4565:5,plugin,plugins,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4565,1,['plugin'],['plugins']
Modifiability,Bug in external plugin to link with Sofa.GL and Glew,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3079:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3079,1,['plugin'],['plugin']
Modifiability,"Build failing on MacOS (the only config with MeshSTEPLoader plugin enabled):; ```text; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/applications/plugins/MeshSTEPLoader/MeshSTEPLoader.cpp:60:45: error: use of undeclared identifier 'm_filename'; did you mean 'd_filename'?; dmsg_info() << ""Loading STEP file: "" << m_filename;; ^~~~~~~~~~; d_filename; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/SofaKernel/modules/SofaCore/src/sofa/core/loader/BaseLoader.h:53:31: note: 'd_filename' declared here; objectmodel::DataFileName d_filename;; ^; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/applications/plugins/MeshSTEPLoader/MeshSTEPLoader.cpp:65:28: error: use of undeclared identifier 'm_filename'; did you mean 'd_filename'?; const char* filename = m_filename.getFullPath().c_str();; ^~~~~~~~~~; d_filename; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/SofaKernel/modules/SofaCore/src/sofa/core/loader/BaseLoader.h:53:31: note: 'd_filename' declared here; objectmodel::DataFileName d_filename;; ^; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/applications/plugins/MeshSTEPLoader/MeshSTEPLoader.cpp:70:71: error: use of undeclared identifier 'm_filename'; did you mean 'd_filename'?; msg_error() << ""Error: MeshSTEPLoader: Cannot read file '"" << m_filename << ""'."";; ^~~~~~~~~~; d_filename; /Volumes/Jenkins/workspace/sofa-framework/PR-2095/mac_clang-3.5_options_release/src/SofaKernel/modules/SofaCore/src/sofa/core/loader/BaseLoader.h:53:31: note: 'd_filename' declared here; objectmodel::DataFileName d_filename;; ^; 3 errors generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2095#issuecomment-843142727:33,config,config,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2095#issuecomment-843142727,5,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,"Build process:. ```; cd ~/Apps/git-apps; git clone https://github.com/sofa-framework/sofa.git; cd sofa/src; git checkout master; mkdir build-master; cd build-master; cmake [options] ..; make; ```. To be clear, build directory is: `/home/emdash00/Apps/git-apps/sofa/src/build-master`. Edit: updated `cmake-log.txt`. Last one was the wrong configuration by accident. I tried remaking the config, though it might not be 100% accurate. I used cmake-gui for the options, so here's the [CMakeCache.txt](https://github.com/sofa-framework/sofa/files/4777146/CMakeCache.txt).; Here's the configuration process log of the `cmake [options] ..` command: [cmake-log.txt](https://github.com/sofa-framework/sofa/files/4777183/cmake-log.txt). Output is very long so I've attached it in this text file [log.txt](https://github.com/sofa-framework/sofa/files/4777142/log.txt). Probably the most notably part is on log.txt:385, which I'll post here. Note: I spaced it to make it visually easier to read. The original is all on a single line of course.; ```; /home/emdash00/Apps/git-apps/sofa/src/applications/plugins/SofaOpenCL/OpenCLIdentityMapping.cpp:71:16: error: duplicate explicit instantiation of; ‘class sofa::component::mapping::IdentityMapping<sofa::gpu::opencl::OpenCLVectorTypes<sofa::defaulttype::Vec<3, float>, ; 													 	 sofa::defaulttype::Vec<3, float>, float>,; 									 				 sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, ; 													 	 sofa::defaulttype::Vec<3, float>, float> >’ [-fpermissive]; ```. I'm unsure of where the original instantiation is. I'm just trying to use the library since Ubuntu 19.10 doesn't have prebuilt packages yet. I don't think this is part of the issue; however, I'm using OpenCL for an Intel GPU. I wasn't sure how computationally intensive this library would be, but I thought might as well try to utilize my Intel HD Graphics Unit. . Here's an attachment of all relevant system specs using linux commands: [sysinfo.txt](https://github.com",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419:338,config,configuration,338,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419,3,['config'],"['config', 'configuration']"
Modifiability,"Building in Debug on Windows copy dll like boost_program_options-vc141-mt-x64-1_72.dll instead of boost_program_options-vc141-mt-gd-x64-1_72.dll ; into the /bin/Debug/ folder. Config: New build from scratch, master version ~15th August. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1501:176,Config,Config,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1501,1,['Config'],['Config']
Modifiability,"But scenes crash. Before going further with https://github.com/sofa-framework/sofa/pull/4395, it is wiser to first fix the compilation of the plugin. We can even wonder if we keep this plugin since it has not been maintained for a while. Note that this plugin is not compiled on the CI. See https://github.com/sofa-framework/ci/pull/32. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4398:142,plugin,plugin,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4398,3,['plugin'],['plugin']
Modifiability,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:121,plugin,plugin,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490,1,['plugin'],['plugin']
Modifiability,"By default, runSofa loads a bunch of plugins automatically, based on a list found in a file.; If runSofa is run with the option `noautoload`, a lot of scenes cannot be loaded correctly because of missing plugins.; Right now, runSofaGLFW does not have the automatic load of plugins based on the file, like runSofa. So it's very annoying to work with runSofaGLFW.; I would like a discussion on the following points:. 1. Correction of all scenes, in Sofa and in the maintained plugins, with the correct RequiredPlugin list. Can it be automatic, or at least a part of the process?; 2. Must runSofaGLFW load plugins automatically?; 3. Must the CI execute the scene with the option `noautoload`?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2818:37,plugin,plugins,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2818,5,['plugin'],['plugins']
Modifiability,C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:5291,Plugin,PluginManager,5291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,CGAL Plugin can not be found,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1290:5,Plugin,Plugin,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1290,1,['Plugin'],['Plugin']
Modifiability,CGAL Plugin error when compiling SOFA,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2075:5,Plugin,Plugin,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2075,1,['Plugin'],['Plugin']
Modifiability,"CGAL is not available in CentOS official repos. On Ubuntu 18.04, a custom findCGAL.cmake is not necessary.; With a dumb project like; ```cmake; project(test); cmake_minimum_required(VERSION 3.6). find_package(CGAL REQUIRED). get_cmake_property(_variableNames VARIABLES); list (SORT _variableNames); foreach (_variableName ${_variableNames}); if(_variableName MATCHES ""^CGAL_""); message(""${_variableName} = ${${_variableName}}""); endif(); endforeach(); ```. I got this output:; ```bash; root@90bf513426c7:~/project/build# cmake ..; CGAL_3RD_PARTY_DEFINITIONS = ; CGAL_3RD_PARTY_INCLUDE_DIRS = /usr/include; CGAL_3RD_PARTY_LIBRARIES = ; CGAL_3RD_PARTY_LIBRARIES_DIRS = /usr/lib; CGAL_BUGFIX_VERSION = 0; CGAL_BUILD_SHARED_LIBS = TRUE; CGAL_BUILD_TYPE_INIT = Release; CGAL_BUILD_VERSION = 1000; CGAL_Boost_USE_STATIC_LIBS = OFF; CGAL_COMPONENT = ; CGAL_CONFIG = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONFIGURED_LIBRARIES = CGAL_Core;CGAL_ImageIO;CGAL_Qt5; CGAL_CONFIG_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_CONFIG_LOADED = TRUE; CGAL_CONSIDERED_CONFIGS = /usr/lib/x86_64-linux-gnu/cmake/CGAL/CGALConfig.cmake; CGAL_CONSIDERED_VERSIONS = 4.11.1000; CGAL_CXX_FLAGS_DEBUG_INIT = -g; CGAL_CXX_FLAGS_INIT = -g -O2 -fdebug-prefix-map=/build/cgal-ZyilPF/cgal-4.11=. -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -frounding-math; CGAL_CXX_FLAGS_RELEASE_INIT = -O3 -DNDEBUG; CGAL_DIR = /usr/lib/x86_64-linux-gnu/cmake/CGAL; CGAL_DISABLE_GMP = ; CGAL_ENABLE_PRECONFIG = OFF; CGAL_ESSENTIAL_3RD_PARTY_LIBRARIES = GMP;MPFR;GMPXX; CGAL_EXT_LIB_Coin3D_PREFIX = COIN3D; CGAL_EXT_LIB_Eigen3_PREFIX = EIGEN3; CGAL_EXT_LIB_QGLViewer_PREFIX = QGLVIEWER; CGAL_EXT_LIB_Qt5_PREFIX = QT; CGAL_FOUND = 1; CGAL_GIT_SHA1 = ; CGAL_GRAPHICSVIEW_PACKAGE_DIR = /usr//include/CGAL/; CGAL_HEADER_ONLY = OFF; CGAL_INCLUDE_DIRS = /usr//include; CGAL_INSTALL_PREFIX = /usr/; CGAL_ImageIO_USE_ZLIB = ON; CGAL_LIB = CGAL; CGAL_LIBRARIES_DIR = /usr//lib/x86_64-linux",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421:259,VARIAB,VARIABLES,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611416421,1,['VARIAB'],['VARIABLES']
Modifiability,"CGAL is now enabled on CI for configs mac_clang-3.4_options, ubuntu_gcc-5.4_options, ubuntu_clang-3.8_options and ubuntu_clang-3.8_options-debug.; Thus, I close this issue :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/352#issuecomment-343490254:30,config,configs,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352#issuecomment-343490254,1,['config'],['configs']
Modifiability,"CGAL plugin has some build issues in some circumstances, this PR aims to fix it:. - build error if ""image"" plugin is deactivated; - BOOST_PARAMETER_MAX_ARITY too low by default (5 by default, where CGAL needs 12 at least). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/351:5,plugin,plugin,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351,2,['plugin'],['plugin']
Modifiability,CGAL plugin won't build with image plugin activated,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/352:5,plugin,plugin,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352,2,['plugin'],['plugin']
Modifiability,CI complains about 4 crashing scenes (timeout) on all configs:; ```; examples/Components/collision/RayTraceCollision.scn; examples/Components/misc/MeshTetraStuffing.scn; examples/Tutorials/StepByStep/Dentistry_Haptics/dentalSurgery_Annex.scn; examples/Tutorials/StepByStep/Dentistry_Python/5_MeshGeneration.scn; ```; Any idea?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383:54,config,configs,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873#issuecomment-451897383,1,['config'],['configs']
Modifiability,"CI fails due to [ExternalBehaviorModel](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/ExternalBehaviorModel) plugin, depending on SofaGraphComponent (_InteractingBehaviorModel_ class) itself deprecated ... Question: isn't it time to deprecate this plugin gleichzeitig?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1256502124:104,plugin,plugins,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988#issuecomment-1256502124,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:72,plugin,plugins,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418,1,['plugin'],['plugins']
Modifiability,"CIMg use convert or gm as a fallback scenario which happens when the plugin is not compiled with libjpeg et libtiff support. Conclusion 1: we need to update our VM to install libjpeg et libtiff installs on centos & windows. . Conclusion 2: we need to replace the current error message saying that ""convert"" or ""gm.exe"" cannot be found by one explaining that to have jpg/tiff support we need to re-compile the plugin in the right way. EDIT: thanks @fredroy for the infos about CImg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116:69,plugin,plugin,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305175116,2,['plugin'],['plugin']
Modifiability,"CImgData.h only contains classes and things related to the image plugin.; Thats why it seems more consistent to move this file directly into the image plugin. Moreover, it had a non-met (soft) dependency on SofaBaseVisual (as there is no cpp, and it is only used by the image plugin, this was not an issue before). IMO, CImgPlugin should be only a plugin:; - introducing the cimg library; - using cimg, allowing loading various picture file format (jpg/png, etc). I added some includes here and there as well. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2307:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2307,4,['plugin'],['plugin']
Modifiability,CMake >= 3.15 fails at configuring stage of sofa 19.06.00,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105:23,config,configuring,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105,1,['config'],['configuring']
Modifiability,CMake Deprecation Warning when configuring,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1623:31,config,configuring,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1623,1,['config'],['configuring']
Modifiability,"CMake configuration of out-of-tree plugins using Sofa.Testing is broken after; - #3655 . The compat/ dir has been removed but not its reference for the target config. Error log: (from beamadapter CI):. ```; CMake Error in BeamAdapter_test/CMakeLists.txt:; Imported target ""Sofa.Testing"" includes non-existent path. ""/home/runner/work/BeamAdapter/BeamAdapter/sofa/include/Sofa.Testing/Sofa.Testing/compat"". in its INTERFACE_INCLUDE_DIRECTORIES. Possible reasons include:. * The path was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and references files it does not; provide.; ```; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3694:6,config,configuration,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3694,3,"['config', 'plugin']","['config', 'configuration', 'plugins']"
Modifiability,CMake has the version 3.16.3 on the CI. It will not configure if you use the find_or_fetch feature,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1766399795:52,config,configure,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1766399795,1,['config'],['configure']
Modifiability,"CMake now passes with SOFA-NG; Fixed some types and includes due to changes from SOFA-NG. The plugin still does not compile. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4338:94,plugin,plugin,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4338,1,['plugin'],['plugin']
Modifiability,"CMake style : ""_d"" debug prefix is removed from all plugins binaries if you don't the use sofa_add_plugin macro",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/490:52,plugin,plugins,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490,1,['plugin'],['plugins']
Modifiability,"Call me weightwatcher!. Following the STC9, decision to remove the following plugins (unused/unknown):; - ARTrack: you confirm for you @omarboukhris ?; - SofaPML; - SofaStereo; - SofaVolumetricData. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1439:77,plugin,plugins,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1439,1,['plugin'],['plugins']
Modifiability,Can I still ask a small question ? :-) . Why keeping the Framework directory? Would something like this be simpler?:. ```; /; plugins; BeamAdapter; ...; Sofa; Compat; Config; Core; DefaultType; Geometry; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438:126,plugin,plugins,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,Can someone help me? I am stuck in the following error when compiling SOFA with CGAL plugin:. FAILED: applications/plugins/CGALPlugin/CMakeFiles/CGALPlugin.dir/src/CGALPlugin/CylinderMesh.cpp.o ; /usr/bin/g++ -DCGALPlugin_EXPORTS -DCGAL_MESH_3_VERBOSE=0 -DNDEBUG -DSOFA_BUILD_CGALPLUGIN -I../applications/plugins/CGALPlugin/src -Iinclude/CGALPlugin -I../SofaKernel/modules/SofaCore/src -Iinclude/Sofa.Core -I../SofaKernel/modules/SofaHelper/src -Iinclude/Sofa.Helper -I../SofaKernel/modules/Sofa.Config/src -Iinclude/Sofa.Config -I../SofaKernel/modules/Sofa.Type/src -Iinclude/Sofa.Type -I../SofaKernel/modules/Sofa.Compat/src -Iinclude/Sofa.Compat -I../SofaKernel/modules/Sofa.Topology/src -Iinclude/Sofa.Topology -I../SofaKernel/modules/Sofa.Geometry/src -Iinclude/Sofa.Geometry -I../SofaKernel/modules/SofaDefaultType/src -Iinclude/Sofa.DefaultType -I../SofaKernel/modules/SofaSimulationCommon/src -Iinclude/SofaSimulationCommon -I../SofaKernel/modules/SofaSimulationCore/src -Iinclude/Sofa.SimulationCore -isystem ../SofaKernel/extlibs/json -isystem /usr/include/eigen3 -O3 -DNDEBUG -fPIC -Wno-attributes -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -Wall -W -Wno-padded -pthread -frounding-math -std=gnu++17 -MD -MT applications/plugins/CGALPlugin/CMakeFiles/CGALPlugin.dir/src/CGALPlugin/CylinderMesh.cpp.o -MF applications/plugins/CGALPlugin/CMakeFiles/CGALPlugin.dir/src/CGALPlugin/CylinderMesh.cpp.o.d -o applications/plugins/CGALPlugin/CMakeFiles/CGALPlugin.dir/src/CGALPlugin/CylinderMesh.cpp.o -c ../applications/plugins/CGALPlugin/src/CGALPlugin/CylinderMesh.cpp; In file included from ../applications/plugins/CGALPlugin/src/CGALPlugin/CylinderMesh.cpp:25:; ../applications/plugins/CGALPlugin/src/CGALPlugin/CylinderMesh.inl:25:10: fatal error: sofa/gl/template.h: Arquivo ou diretório inexistente; 25 | #include <sofa/gl/template.h>; | ^~~~~~~~~~~~~~~~~~~~; compilation terminated.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2075:85,plugin,plugin,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2075,11,"['Config', 'plugin']","['Config', 'plugin', 'plugins']"
Modifiability,Can we close this issue..? ^^ Or rename it to plugin.SofaPython3 and redirect to the trello board maybe:; https://trello.com/b/snWTMlCN/pluginsofapython3-the-turtle-speed-project,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-510393071:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-510393071,1,['plugin'],['plugin']
Modifiability,Cath' output='@ContainerCath' flipNormals='true'/>. 			<AdaptiveBeamMapping name='VisuMapCath' useCurvAbs='1' printLog='0' interpolation='@../InterpolCatheter' input='@../DOFs' output='@Quads' isMechanical='false' />. 			<Node name='VisuOgl' activated='true'>; 				<OglModel name='Visual' color='0.7 0.7 0.7' quads='@../ContainerCath.quads' material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20'/>; 				<IdentityMapping input='@../Quads' output='@Visual'/>; 			</Node>	; 		</Node>; 	; 		<Node name='VisuGuide' activated='true'>; 			<MechanicalObject name='Quads' />; 			<QuadSetTopologyContainer name='ContainerGuide' />; 			<QuadSetTopologyModifier name='Modifier' />; 			<QuadSetGeometryAlgorithms name='GeomAlgo' template='Vec3d' />; 			<Edge2QuadTopologicalMapping nbPointsOnEachCircle='10' radius='1' input='@../../topoLines_guide/meshLinesGuide' output='@ContainerGuide' flipNormals='true' listening='true'/> ; 			<AdaptiveBeamMapping name='visuMapGuide' useCurvAbs='1' printLog='0' interpolation='@../InterpolGuide' input='@../DOFs' output='@Quads' isMechanical='false' />; 			<Node name='VisuOgl'>; 				<OglModel name='Visual' color='0.2 0.2 0.8' material='texture Ambient 1 0.2 0.2 0.2 0.0 Diffuse 1 1.0 1.0 1.0 1.0 Specular 1 1.0 1.0 1.0 1.0 Emissive 0 0.15 0.05 0.05 0.0 Shininess 1 20' quads='@../ContainerGuide.quads'/>; 				<IdentityMapping input='@../Quads' output='@Visual'/>; 			</Node>		; 		</Node> ; 	 ; 		<Node name='VisuCoils' activated='true'>; 			<MechanicalObject name='Quads'/>; 			<QuadSetTopologyContainer name='ContainerCoils' />; 			<QuadSetTopologyModifier name='Modifier' />; 			<QuadSetGeometryAlgorithms name='GeomAlgo' template='Vec3d' />; 			<Edge2QuadTopologicalMapping nbPointsOnEachCircle='10' radius='0.3' input='@../../topoLines_coils/meshLinesCoils' output='@ContainerCoils' flipNormals='true' listening='true' /> ; 			<AdaptiveBeamMapping name='visuMapCoils' useCurvAbs=',MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:11449,Adapt,AdaptiveBeamMapping,11449,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['Adapt'],['AdaptiveBeamMapping']
Modifiability,CentralDifferenceSolver must be adapted to work with any type of mass matrix,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1922:32,adapt,adapted,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1922,1,['adapt'],['adapted']
Modifiability,"Change access specifier for the method set. A public access is needed in SofaCUDASolver plugin. . Moreover, regardless of the reasons of this modification, the fact that this method is at the beginning of the class declaration without any access specifier before is not wanted. Even if it is a class which makes its access private by default, it lacks of readability. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3834:88,plugin,plugin,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3834,1,['plugin'],['plugin']
Modifiability,"Change the default plugins. Make multi-thread compiled by default, and removed cimg default. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4322:19,plugin,plugins,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4322,1,['plugin'],['plugins']
Modifiability,"Changed input variable name ""InputMeshName"" of MeshbarycentricMapperEngine to ""topology"" for added clarity; Modified label descriptions of MeshbarycentricMapperEngine variables for added clarity; Added a parse function to warn about the name change of InputMeshName; Added an example scene for this component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487:14,variab,variable,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487,2,['variab'],"['variable', 'variables']"
Modifiability,Changelog:; - Remove the plugins in deprecated directory ; - Remove DETECTIONOUTPUT_BARYCENTRICINFO (https://github.com/sofa-framework/sofa/pull/1046); - Remove remaining SOFA_WITH_FLOAT (https://github.com/sofa-framework/sofa/pull/1047); - Replace 3.14 with M_PI (https://github.com/sofa-framework/sofa/pull/1045) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1048:25,plugin,plugins,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1048,1,['plugin'],['plugins']
Modifiability,Changes:. - Removing deprecated datafields; - Use Accessors instead of beginEdits; - Remove aliases; - move addInputs / addOutputs from init() to ctor(); - Add alignedBoxes & orientedBoxes as inputs of the BoxROI engine; - Refactor init / reinit / doUpdate to guarantee full component update on data change. *BREAKING because of the removal of aliases & deprecated datafields*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1482:223,Refactor,Refactor,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1482,1,['Refactor'],['Refactor']
Modifiability,"Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Install prefix: /home/thebigone/projects/sofa/build/install; -- Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.2"") ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Check if compiler accepts -pthread; -- Check if compiler accepts -pthread - yes; -- Found Threads: TRUE ; CMake Deprecation Warning at CMakeLists.txt:225 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). -- Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; **CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Boost (missing: system filesystem program_options) (found; version ""1.71.0"")**; Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindBoost.cmake:2179 (find_package_handle_standard_args); SofaKernel/SofaFramework/SofaMacros.cmake:526 (find_package); SofaKernel/modules/SofaHelper/CMakeLists.txt:6 (sofa_find_package). -- Configuring incomplete, errors occurred!; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeError.log"". ``; $ sudo apt install libboost-dev; ``; Reading package lists... Done; Building dependency tree ; Reading state information..",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1462:1479,variab,variable,1479,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1462,1,['variab'],['variable']
Modifiability,Clang compiler gives a suspicious warning (for a long time now):; `sofa/SofaKernel/modules/SofaBaseLinearSolver/DefaultMultiMatrixAccessor.cpp:485: warning: variable 'it' is incremented both in the loop header and in the loop body [-Wfor-loop-analysis]`. It is just an information to people that may use DefaultMultiMatrixAccessor massively.; (Hadrien and François J could also be interested),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/145:157,variab,variable,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145,1,['variab'],['variable']
Modifiability,Clarifying this issue:; The goal is to port the previous SofaPython scenes (from the deprecated Python2) to the newer SofaPython3 plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-777505294:130,plugin,plugin,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-777505294,1,['plugin'],['plugin']
Modifiability,Class already registered: ProjectToPlaneConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: ProjectToPointConstraint<Vec1d>; [WARNING] [ObjectFactory] Class already registered: ProjectToPointConstraint<Vec2d>; [WARNING] [ObjectFactory] Class already registered: ProjectToPointConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: ProjectToPointConstraint<Vec6d>; [WARNING] [ObjectFactory] Class already registered: ProjectDirectionConstraint<Vec2d>; [WARNING] [ObjectFactory] Class already registered: ProjectDirectionConstraint<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/ser,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:24421,Plugin,PluginManager,24421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,Class already registered: StiffSpringForceField<Vec1d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec2d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec6d>; [WARNING] [ObjectFactory] Class already registered: PolynomialSpringsForceField<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [WARNING] [ObjectFactory] Class already registered: PenalityContactForceField<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [WARNING] [ObjectFactory] Class already registered: LineCollisionModel<Vec3d>; [WARNING] [ObjectFactory] Class already registered: PointCollisionModel<Vec3d>; [WARNING] [ObjectFactory] Class already registered: TriangleCollisionModel<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [WARNING] [ObjectFactory] Class already registered: MeshOBJLoader; [WARNING] [ObjectFactory] Class already registered: MeshVTKLoader; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [WARNING] [ObjectFactory,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:12237,Plugin,PluginManager,12237,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,Clean Manifold Topologies plugin:; - Replace serr/sout by msg_; - Move all code inside cpp files; - Clean header inclusions; - Fix template declaration; - Clean warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1156:26,plugin,plugin,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1156,1,['plugin'],['plugin']
Modifiability,"Clean all cmake var/options/names to follow the new guidelines and the new SOFA-NG module names; (fulfill some TODO written long ago as well). + Fix #2972. Remark/question: should we keep compatibility with all the cmake variables/options and preproc defines?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2974:221,variab,variables,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2974,1,['variab'],['variables']
Modifiability,"Clean the inclusion graph using the combination of three technique. 1) do not rely on properties within class as this imply to have the full class definition to compile the code. ; Eg: `Node::SPtr` is strictly equivalent to `sofa::core::sptr<Node>` but the latter does not always requires the full class definition. ; 2) replacement of `dynamiac_cast<>()` with an opaque function that does not need the complete inheritance graph to be visible. ; 3) move definition of fonction from the .h to the .cpp . By applygin these refactoring step there is more opportunity to use forward declaration. . To handle the forward declaration it was decided during the reviewing of PR #1688 to use a dedicated file for that: ; Eg:; ```console; - sofa/core/fwd.h; - sofa/defaulttype/fwd.h; - sofa/helper/fwd.h ; ```; I also put in these files dynamic_cast replacement eg:; ```cpp; Node* getNodeFromBase(Base*);; ```. And there is also there is the definition of NodeSPtr as context free replacement for Node::SPtr. . The PR also contains: #1727 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1730:412,inherit,inheritance,412,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730,2,"['inherit', 'refactor']","['inheritance', 'refactoring']"
Modifiability,"Cleaning PR for the v21.06 release. 1. remove warnings about unused variables/parameters; 2. transformRotation of Mat enforces if the given Mat is 3x3 or 4x4 (does not make sense otherwise, or could even crash); 3. add a function toHomogeneousMatrix() for Mat4x4 for RigidTypes (which will use the toHomogenous of Quat); 4. remove uses of operator= with MultiMatrix in ODESolvers; 5. HeadlessRecorder was using a deprecated feature of VisualParameters (sceneTransform); 6. Use PathResolver in MultiMapping; 7. Rename Deprecation Macro in BaseData.h, correct the fix message and remove use of setOwnerClass. Note for 7.: the GUI was displaying either ""Base"" for owner (when hovering on the Data name) or ""no owner found"". I dont really know what was supposed to be displayed.; Now with the correction, all the Data will display their owner's name, which seems a bit useless to me. Before:; ![prclean_2106_beforename](https://user-images.githubusercontent.com/11028016/123656430-35593280-d830-11eb-8f3a-bfd4283ac64f.png) ![prclean_2106_beforeflags](https://user-images.githubusercontent.com/11028016/123656436-368a5f80-d830-11eb-8a41-d772aa2f679a.png). After:; ![prclean_2106_aftername](https://user-images.githubusercontent.com/11028016/123656520-4ace5c80-d830-11eb-86ba-9a761911530b.png) ![prclean_2106_afterflags](https://user-images.githubusercontent.com/11028016/123656532-4d30b680-d830-11eb-8a6a-af7ec55843f4.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2210:68,variab,variables,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2210,1,['variab'],['variables']
Modifiability,"Cleaning and refactoring in BarycentricMapping (only for topology container). _description from comment below:_. Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797:13,refactor,refactoring,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797,5,"['refactor', 'variab']","['refactor', 'refactored', 'refactoring', 'variables']"
Modifiability,"Closing (postponing), several issues detected in this PR; - PluginManager is not satisfactory; - meta-modules are not well designed so induced too much complexities",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-1968548437:60,Plugin,PluginManager,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-1968548437,1,['Plugin'],['PluginManager']
Modifiability,Cmake 3.13 does not seem to allow the inclusion of `CPackNSIS` anymore.; This add a simple check on cmake version to prevent cmake configure failure.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/897:131,config,configure,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/897,1,['config'],['configure']
Modifiability,Code is duplicated in:. - SofaKernel/modules/SofaBaseCollision/SofaBaseCollision_test/BroadPhase_test.h; - applications/plugins/SofaTest/BroadPhase_test.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2117:120,plugin,plugins,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2117,1,['plugin'],['plugins']
Modifiability,Code/sofa/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Forward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Backward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.Mesh.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Constant.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Dynamic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Grid.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Utility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Visual.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Iterative.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Comp,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:2105,Plugin,PluginManager,2105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Coming from [Mei remark on the forum](https://www.sofa-framework.org/community/forum/topic/image-viewer-in-image-plugin/). - Add the automatic loading of the image_gui library when the plugin image is loaded (if the library is well there); - Add formating in associated CMakeLists. With the correct loading of image_gui, now the ImagePlaneWidget will work fine when opening a ImageViewer component. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1015:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1015,2,['plugin'],['plugin']
Modifiability,"Compilation error fix. When CMake variables PLUGIN_SOFACUDA and SOFACUDA_DOUBLE are enabled, CudaStandardTetrahedralFEMForceField.cu try to be compiled through NVCC (Nvidia compiler). It was leading to a compile error because of 2 missing function prototypes in the .cu file. This commit fixes the issue. Compilation was tested on my side on Fedora 29 with CUDA Toolkit v10.1. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991:34,variab,variables,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991,1,['variab'],['variables']
Modifiability,"Compilation issue on Windows. Modernize the CUDA Cmake before this PR. This plugin adds C source file, making it harder than other reordering done before. Problem arise from the fact that CMake passes compile option to NVCC that the compiler doesn't understand.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4878#issuecomment-2342998697:76,plugin,plugin,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4878#issuecomment-2342998697,1,['plugin'],['plugin']
Modifiability,"Compiling sofa with SOFA_FLOATING_POINT_TYPE=double (no float) leads to a series of compile errors in Mapping and MultiMapping. I believe the bug has been introduced in PR #738. The reason for this crash is that some Mappings double->float are necessary for some applications (usually for visual models, CUDA, etc.).; Thus ExtVecXfTypes are always compiled, even when #ifndef SOFA_FLOAT. This PR fixes the bug, but also raises an important underlying point:; Having ifndefs everywhere in the code is very intrusive, source of errors, and most importantly, prevents having a full code coverage in the CI in a single build. Floats are slower, and much less precise than Doubles. We do not support XBox / PS3 code, thus we have one less reason to keep this code smell in the core of sofa.; If the only reason we still need floats is for Cuda compatibility and other visual rendering stuff, shouldn't the conversions be done in those components / plugins, instead of having this FLOAT things affecting the whole codebase of SOFA?. I dream of a sofa without all these ifdefs lying around polluting the code.; @courtecuisse @fredroy , you worked the most on CUDA stuff and visual rendering respectively, do you have an opinion on the subject?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/827:943,plugin,plugins,943,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827,1,['plugin'],['plugins']
Modifiability,"Complete https://github.com/sofa-framework/sofa/pull/3093 .; It parallelize the assembly of the compliance matrix in the same way of the previous PR.; I changed some misleading variable name and added comment for future maintenance. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3154:177,variab,variable,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3154,1,['variab'],['variable']
Modifiability,Compliant plugin: unintuitive behavior of friction coefficients,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81:10,plugin,plugin,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81,1,['plugin'],['plugin']
Modifiability,Compliant/Flexible-dependent API,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1636:10,Flexible,Flexible-dependent,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1636,1,['Flexible'],['Flexible-dependent']
Modifiability,Component.Collision.Response.Contact.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Setting.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Controller.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Analyze.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Generate.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Select.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Transform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Haptics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering2D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering3D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Shader.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GUI.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Co,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:7758,Plugin,PluginManager,7758,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Component.LinearSolver.Direct"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.SolidMechanics.FEM.Elastic"",; ""Sofa.Component.SolidMechanics.Spring"",; ""Sofa.Component.StateContainer"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Engine.Select"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.GUI.Component"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Setting"",; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Topology.Container.Constant""]. rootNode.findData('gravity').value=[0,0,-10];; rootNode.findData('dt').value=0.01; ; # Plugin loading; rootNode.addObject('RequiredPlugin', pluginName=pluginNameList, ; printLog='0'). # Rootnode attributes; rootNode.addObject('FreeMotionAnimationLoop'); rootNode.addObject('DefaultVisualManagerLoop'); rootNode.addObject('GenericConstraintSolver', maxIterations='2000', tolerance='1e-9') ; rootNode.addObject('BackgroundSetting', color='0 0.168627 0.211765'). # Scene settings; confignode = rootNode.addChild(""Config""); confignode.addObject(""OglGrid"", nbSubdiv=10, size=1000); confignode.addObject('OglSceneFrame', style=""Arrows"", ; alignment=""TopRight""). # Collision component; rootNode.addObject('DefaultPipeline'); rootNode.addObject('BruteForceBroadPhase'); rootNode.addObject('BVHNarrowPhase'); rootNode.addObject('LocalMinDistance', name='Proximity', alarmDistance=""1"", contactDistance=""0.5""); rootNode.addObject('DefaultContactManager', name=""Response"", response=""PenalityContactForceField""). ; # Membrane; membrane=rootNode.addChild(""Membrane""). membrane.addObject(""EulerImplicitSolver""); membrane.addObject(""CGLinearSolver"", iterations='20",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3810:1646,plugin,pluginName,1646,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3810,2,['plugin'],"['pluginName', 'pluginNameList']"
Modifiability,"Components; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; _______________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:2928,plugin,plugin,2928,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,1,['plugin'],['plugin']
Modifiability,"Concerning backward compatibility:; - The MutationListener is inherited by only 2 classes in the SOFA repository, if we exclude SofaQtQuick for which this PR is profitable anyway:; - GraphListenerQListView, which is used in runSofa to display the scene graph; - ChangeListener: which is an unused & unimplemented class hanging around in SofaKernel/framework/sofa/simulation and should be removed. - Nodes and its child classes (DAGNode & GNode in SOFA, FailNode in Compliant) are the only ones affected by the refactoring, and there's probably not much code inheriting those classes & modifying their notification behavior. So While we can't guarantee that nobody rewrote a GUI using the MutationListener, IMHO we should be able to provide support through the forum / gitter channels if that breaks anything to anyone.; Let's be breaking ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693:62,inherit,inherited,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-462379693,3,"['inherit', 'refactor']","['inherited', 'inheriting', 'refactoring']"
Modifiability,Confirm choices of selected plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4556:28,plugin,plugins,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4556,1,['plugin'],['plugins']
Modifiability,"ConstantSparsityPatternSystem relies on the assumption that the sparsity pattern of the mechanical matrix is constant. If the pattern is not constant, the component crashes.; This PR introduces a verification that the pattern follows the initial pattern. In case of a mismatch, an error is emitted and the insertion is skipped. This allows the simulation not to crash and inform the user. However, this behavior is available only if `checkIndices` is enabled. It is disabled by default because the check is time consuming, and the goal of this component is performance-oriented. To illustrate the new behavior, one can test the following scene:. ```xml; <Node name=""root"" dt=""0.02"" gravity=""0 -10 0"">; <Node name=""plugins"">; <RequiredPlugin name=""Sofa.Component.Constraint.Projective""/> <!-- Needed to use components [FixedProjectiveConstraint] -->; <RequiredPlugin name=""Sofa.Component.Engine.Select""/> <!-- Needed to use components [BoxROI] -->; <RequiredPlugin name=""Sofa.Component.LinearSolver.Direct""/> <!-- Needed to use components [EigenSimplicialLDLT] -->; <RequiredPlugin name=""Sofa.Component.LinearSystem""/> <!-- Needed to use components [ConstantSparsityPatternSystem] -->; <RequiredPlugin name=""Sofa.Component.Mass""/> <!-- Needed to use components [UniformMass] -->; <RequiredPlugin name=""Sofa.Component.MechanicalLoad""/> <!-- Needed to use components [PlaneForceField] -->; <RequiredPlugin name=""Sofa.Component.ODESolver.Backward""/> <!-- Needed to use components [EulerImplicitSolver] -->; <RequiredPlugin name=""Sofa.Component.SolidMechanics.FEM.Elastic""/> <!-- Needed to use components [HexahedronFEMForceField] -->; <RequiredPlugin name=""Sofa.Component.StateContainer""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Grid""/> <!-- Needed to use components [RegularGridTopology] -->; <RequiredPlugin name=""Sofa.Component.Visual""/> <!-- Needed to use components [VisualStyle] -->; </Node>. <VisualStyle displayFlags=""showBeha",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4428:714,plugin,plugins,714,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4428,1,['plugin'],['plugins']
Modifiability,"Continuing #2150. Implementation of BaseMatrix and BaseVector using Eigen library was contained in SofaEigen2Solver. Those EigenVector/EigenMatrix are almost only used for ad-hoc code in FEMs (getJs, geometricStiffness) related to Flexible or Compliant. I tried to make it as compatible as possible, so it should not be breaking. I have deleted also an accessor on a special ""Eigen-""MultiMatrixAccessor:; - it is not used; - it would have introduced a dependency on Sofa.Core... (not possible). Finally, I think this classes wont really be useful in the future, especially that BaseVector/BaseMatrix using Eigen are present in SofaCaribou (https://github.com/jnbrunet/caribou/blob/master/src/SofaCaribou/Algebra/EigenVector.h for example) and seems better overall. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2339:231,Flexible,Flexible,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2339,1,['Flexible'],['Flexible']
Modifiability,"Continuing task #2402 . ""Simple"" PR moving all code related to TopologyData/Handler from SofaBaseTopology to Sofa.Core, along the other core topology structure. A lot of modules wont need SofaBaseTopology anymore because it was including TopologyData.inl from it.... As usual, there is a compatibility layer which surprisingly works very well in this case (i did not touch any other file in other plugins/modules). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2423:397,plugin,plugins,397,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2423,1,['plugin'],['plugins']
Modifiability,Convert Python2 bindings to Python3 in image plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3862:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3862,1,['plugin'],['plugin']
Modifiability,Cool @alxbilger so if there is Required data and in `Inherit::init()` is called then the error gets not triggered. Correct?; We should investigate other components with this Required feature.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945112990:53,Inherit,Inherit,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419#issuecomment-945112990,1,['Inherit'],['Inherit']
Modifiability,Copy legacy SofaPython plugin to SofaPython27 (for backward-compatibility),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/189:23,plugin,plugin,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/189,1,['plugin'],['plugin']
Modifiability,Could you share your CMakeCache.txt please @MingshanHe ?; It could be related to your Qt configuration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1296256287:89,config,configuration,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1296256287,1,['config'],['configuration']
Modifiability,Create Issue to rethink the way it is done: maybe centralize the regression-tests files in Regression plugin. This would require multiple changes like being able to find the path of all plugins to find the scenes and the regression files when they are inside of the plugin instead of Regression. . --> https://github.com/sofa-framework/sofa/issues/4424,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1884536809:102,plugin,plugin,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420#issuecomment-1884536809,3,['plugin'],"['plugin', 'plugins']"
Modifiability,Create a Camera component so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement; your own 'application specific behavior' by using an external Controller (eg: PythonScriptController). Changes:; - the BaseCamera now has a link to a BackgroundSetting so multiple camera can have multiple background. ; - the BaseCamera now implement a draw() method. If you don't want to see what is drawn...then; restrict the rendering of your scene graph to only call drawVisuals() which is what it is supposed to do :) ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object. Update the caduceus example. NB: I know there is much more to refactor but I have not time for that. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/674:762,refactor,refactor,762,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674,1,['refactor'],['refactor']
Modifiability,Create a Sofa.Config package,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1667:14,Config,Config,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1667,1,['Config'],['Config']
Modifiability,Create github-test-action for scene testing in the plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4265:51,plugin,plugins,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4265,1,['plugin'],['plugins']
Modifiability,"Create videos showing:; - how to compile SOFA; - how to compile SofaPython3; - how to use SOFA, add collision models, compile plugins out of tree etc etc.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2370:126,plugin,plugins,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2370,1,['plugin'],['plugins']
Modifiability,"Currently CentralDifferenceSolver assumes the provided mass is diagonal. If the user decides to work with a non-diagonal mass, the simulation will be wrong, without notifying the user. The CentralDifferenceSolver component must be adapted to work with any type of mass matrix. See https://github.com/sofa-framework/sofa/pull/1903",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1922:231,adapt,adapted,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1922,1,['adapt'],['adapted']
Modifiability,"Currently config.h is a all-in-one configuration file that is generated by CMakeLists and included nearly everywhere. The problem is that it contains also very specific options that very few files are using. But, each time any of these specific option is changed sofa needs to be recompiled entirely. This PR is a implementing a more modular approach in which each .cpp that specifically requires a given define include a dedicated file.; Eg:; #include<config/build_option_opengl.h> // to do #if(SOFA_WITH_OPENGL==1); or; #include<config/build_option_experimental.h> // to do #if(SOFA_WITH_EXPERIMENTALFATURE==1); or; #include<config/sharedlibrary_defines.h>. It is still possible to use the old file but by being more specific we will reduce the amount of file to recompile when we will changed something. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/475:10,config,config,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475,5,['config'],"['config', 'configuration']"
Modifiability,"Currently in Sofa the Link implementation is very hard to maintain because; in a single implementation based on type-traits we are trying to handle to object; of different nature that are BaseData and Base. Link between Base is used everywhere in Sofa but a Link between two data; is only to hold the parent of a Data. It is questionable if such complex; implementation for Link is needed for just this single use case ?. Not doing that have a lot of consequence:; - Data implementation is simpler (because it is no needed to have Class ); - Link implementation is much simpler (and Link is used everywhere); - The instanciation of Link is time consuming in the compilation process and; requieres a lot of #include<> making the dependency graph more dense and thus; slow to compile. So in this PR I introduce a new DataLink & AbstractDataLink that aims at replacing; SingleLink<BaseData*, BaseData*>. In this PR I also add PathResolver, as path link resolution is important an currently it is spread everywhere in the sofa codebase. The underlying idea; is to have all path related things in a single location so we can check there is no duplicated code. The implementation are provided with unittest. The PR does not touch other files.; A second PR will be in charge of refactoring Data.h. But to minimize deltas I prefer to have; this one merged first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1485:1271,refactor,refactoring,1271,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1485,1,['refactor'],['refactoring']
Modifiability,"Currently in Sofa we aren't catching any exceptions. . The consequence is that every exception propagates to the top level exception handler halting the application. ; Un-handled exception are useful to detect bugs but this is a non-sense to use such top level handler to process possible application errors like failure to load a plugin or a scene. . A good approach should be that any exception that can be fixed without editting the source code (ie. but by editting the scene or changing some system configuration and so on) should ends with a gracefull error message indicating to the user how to fix the error cause. To implement this I suggest to:; - add a close to top-level try/catch block around simulations/plugin actions; - add a SofaSimulationException that has an error message, the component that emitted it and can have a backtrace as well as a top level reactions to do (eg: set componentstate to invalid and stop simulation). We should also use this SofaSimulationException at any place we are using msg_error(). ; (Actually it could even make sense to replace the msg_error macro by throwing the exception). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2344:331,plugin,plugin,331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2344,3,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,Currently there is the SOFA_EXTERNAL_DIRECTORY to add out-of-tree; directory in the compilation process. But when this directory contains; plugins those one are not handled the same way as are the one in; application/plugin. To unify that I added a SOFA_EXTERNAL_PLUGIN option and; did minimal change to the 'sofa_add_generic' macro to detect and; handle out of tree directory. So if you want to add external plugin you can use SOFA_EXTERNAL_PLUGIN; instead of SOFA_EXTERNAL_DIRECTORY. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530:139,plugin,plugins,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Currently we have a very strict reviewing process to validate a PR for merging in master. This is very good because we now have a very stable master. But after one year I think our approach also tend to favor trivial ""micro changes"" against complex things. . Because they are hard to read, or review, or because they may eventually break something, big PRs are often rejected. This is a drama and I think that we should make en effort to facilitate much more these one because they contains real work (ie...an engineer spends several days or week that he (and is employer) is willing to offer to the community). Loosing those contributions is just a raw loss for the community. . So I think we should relax a bit our rules to allow this kind of PR to be merged.; I see several aspects:; - reviewers should adapt their ""quality level"" to the size of the PR. There is no need to be super pinchy on two or three micro-details of a 50h PR. (reviewers should instead contribute to the PR by fixing that details); - reviewers should be willing and adapt their reviewing time to the size of the PR. A 50h PR really deserve 1H of reviewing from the community. ; - we should also have a way to relax the ""stability"" constraint of our API/software to allow breaking changes. On that aspect I would like to propose to have one release a year dedicated to BREAKING changes and ship it with tools to help users to fix their scenes. Any opinion ?; @bcarrez @hugtalbot @guparan @fredroy @matthieu-nesme @JeremieA, @ChristianDuriez, @olivier-goury",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/318:806,adapt,adapt,806,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318,2,['adapt'],['adapt']
Modifiability,Cython is a de-facto standard to make ease binding between C++ and python. I use it to make 'per plugin' binding and will probably submit some in future PR. ; To ease the writing of cmake of these binding it is nice to detect if cython is installed what this file is doing. . The file is taken from (all credit should go to them):; https://github.com/thewtex/cython-cmake-example. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/734:97,plugin,plugin,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/734,1,['plugin'],['plugin']
Modifiability,"Dashboard is showing good progress, only one scene crash on ubuntu & centos in an easy to fix issue.; Still one unknown test-failure on centos (but it may be a configuration problem related to LANG).; One test failure on windows is still because this machine does not have libjpeg/libtiff installed (or we need a full build ?). Three are test problem. The big dark spot is now the 26 remaining crashes ? Can someone with MacOS investigate the issues please ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599:160,config,configuration,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357504599,1,['config'],['configuration']
Modifiability,"Data:; ```; Data< sofa::helper::vector< Real > > d_vertexMass;; Data< sofa::helper::vector< Real > > d_edgeMass;; ...; , d_vertexMass( initData(&d_vertexMass, ""vertexMass"", ""Specify a vector giving the mass of each vertex. If unspecified or wrongly set, another mass information is used."") ); , d_edgeMass( initData(&d_edgeMass, ""edgeMass"", ""values of the particles masses on edges"") ); ```; and topological Data with mechanism to update each other then they are changed or topological changes occurs.; ```; /// Values of the particles masses stored on vertices; topology::PointData<helper::vector<MassType> > d_vertexMass;; /// Values of the particles masses stored on edges; topology::EdgeData<helper::vector<MassType> > d_edgeMass;; ...; , d_vertexMassInfo( initData(&d_vertexMassInfo, ""vertexMassInfo"", ""internal values of the particles masses on vertices, supporting topological changes"") ); , d_edgeMassInfo( initData(&d_edgeMassInfo, ""edgeMassInfo"", ""internal values of the particles masses on edges, supporting topological changes"") ); ```. No need to have 2 sets of Data, topological Data can be used directly as PointData and EdgeData inherite from Data and support topological changes. -> Remove the normal Data but keep the names vertexMass and edgeMass which are used in code and scenes. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2192:1169,inherit,inherite,1169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2192,1,['inherit'],['inherite']
Modifiability,"Dear @alxbilger dear @epernod ; I'm wondering why did you ""savagely"" removed our work, and I'm writing to know what are the alternatives to this function? If there is no other solution to perform this critical operation, I'd like to know how many messages should we send to justify that a code is needed and should not be ""savagely"" removed?. To answer your question @epernod, yes this function was indeed written for topological changes, but on the mechanical side (not geometrical). Indeed, independently of the method that you use for topological modifications, you will need to recompute your mechanical matrices. Since you don't know which forcefield is used in your scene you cannot put that directly in a plugin. I guess that without this function you have to call reinit of your forcefield (assuming that the function is correctly implemented). However, there are many cases where these topological modifications only change some elements and not the entire mesh (there are many papers that describe this point on the web if you are interested...). In this case, the reinit method will be very expensive for nothing! I'm sure you are aware that sofa is designed for real-time, so we have to provide a solution to only compute the elements that are modified. . In conclusion, if you combine the fact that you don't know the underlying forcefield and you want to recompute only subpart of Ke elements, you may think that it would be a great idea to have a method in BaseForcefield where you can specify which Ke you want to compute. This is precisely the goal of this function !. The question now is what is the alternative solution? I'm sure that the consortium does not ""savagely"" remove the work of other people without thinking of alternative solutions, especially if the same person has already discussed the need for this method in this PR :). Waiting for answers, I have a student that is stuck on this problem for one week on this point. . Hadrien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1170880124:712,plugin,plugin,712,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1170880124,1,['plugin'],['plugin']
Modifiability,"Dear @faichele ,. Following the SOFA dev meeting 25/01/2017.; Multi-threading plugin proposed by @faichele. Your new plugin implements a static scheduling for collision detection. The implementation does not require any change of the existing collision components of SOFA. The bounding volume hierarchy methods is parallelized. It should be easy to use. Compared to the approach used in the MultiThreading plugin using the ""work-stealing"" scheduling pattern (https://en.wikipedia.org/wiki/Work_stealing), Fabian's implementation is based on ""conventional"" work-sharing, with a ""round-robin"" assignment of collision pair checks per thread. One extension is the fact that worker threads are persistent: they do not terminate after processing all assigned tasks, and no new threads are spawned when new collision pair check tasks are added to the thread pool. Instead, worker threads enter a ""sleeping"" state to avoid using CPU cycles when no tasks are processed. This avoids unnecessary respawning of threads every 10 to 50 ms, since the collision detection is typically called very often and in quick succession. @faichele , you mentioned it will be released under open-source license and with standalone for beta testing. Tests on potential performance gains remain to do (number of per checks).; Do not hesitate to correct me. In the context of the recent coding sprint, some new feature around multithreading were added in a branch ( https://github.com/sofa-framework/sofa/tree/issofa_multithreading ), not merged yet. This should be discussed and merged at the upcoming STC. @JeremieA , would you agree to prepare a short illustration/explanation of the API changes of your multithreading feature branch?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830:78,plugin,plugin,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-275074830,3,['plugin'],['plugin']
Modifiability,"Dear @michael-barrow . Normally the grayed out entries means that the corresponding data field has the ""readOnly"" flag set, so it is surprising the this behave differently in Modeller & runSofa. Maybe this is caused by some non-initialized variable somewhere in the Modeller, in runSofa or in the Data itself. . When I will have time I will give a lookt at that to be sure it is not in the Data. If it turns out to be a problem specific to the Modeller well...as the Modeller is deprecated and should be replaced by runSofa2 (code it here https://github.com/sofa-framework/SofaQtQuick) I prefer to devote more time to this one :) . Anyhow Michael, thanks again for your investigation, feel free also to update the issue if you notice similar problem. . Regards,; Damien. ; EDIT: I changed my mind, so I changed the comment :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653:240,variab,variable,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/686#issuecomment-397544653,1,['variab'],['variable']
Modifiability,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543:367,refactor,refactorize,367,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543,5,"['Plugin', 'plugin', 'refactor']","['Pluginize', 'plugins', 'refactorize']"
Modifiability,"Dear all, @faichele @fjourdes @JeremieA . Should we include this as a new plugin in SOFA ? How should it be articulated and integrated in SOFA ?; Thanks for your input.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540:74,plugin,plugin,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-265508540,1,['plugin'],['plugin']
Modifiability,"Dear all,. Just a quick PR to change the license for a file in the Compliant plugin. The file in question is `Compliant/utils/se3.h`, which I originally licensed under LGPL 2.1 only. . All of its contributors (@matthieu-nesme, @RomainTestylier and myself) are currently working at Anatoscope, and we would like to change the license to match that of Sofa's core. . Of course, all the contributors agree with this change. The license would change from ""LGPL 2.1"" to ""LGPL 2.1-or-later"". Best regards,",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/793:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/793,1,['plugin'],['plugin']
Modifiability,"Default CMake build compiles, now all the plugins, and disabled options that activate code using DataEngines need to be activated to propagate that change.; I'm counting on you...!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/814#issuecomment-437094880:42,plugin,plugins,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/814#issuecomment-437094880,1,['plugin'],['plugins']
Modifiability,"Definitely @EulalieCoevoet , you can ignore it by adding a `.scene-tests` in the applications/plugins/ArticulatedSystemPlugin/examples/_ repository and define in it:. ```; ignore ""robotGUI.py""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1106242947:94,plugin,plugins,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1106242947,1,['plugin'],['plugins']
Modifiability,Delay problem still exists using Geomagic plugin.; See https://www.sofa-framework.org/community/forum/topic/problem-about-geomagic-plugin-in-v18-12/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-532939347,2,['plugin'],"['plugin', 'plugin-in-']"
Modifiability,Delete reposoitories created too early in the process of externalizing plugins. . See :; https://github.com/sofa-framework/sofa/pull/4575; https://github.com/sofa-framework/sofa/pull/4589; https://github.com/sofa-framework/sofa/pull/4573,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4669:71,plugin,plugins,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4669,1,['plugin'],['plugins']
Modifiability,Deprecate PSL plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3873:14,plugin,plugin,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3873,1,['plugin'],['plugin']
Modifiability,Deprecating option macros defined in config.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/494:37,config,config,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494,1,['config'],['config']
Modifiability,"Deprecation warnings were displayed at every `#include <sofa/defaulttype/VecTypes.h>`; They are now emitted only when using the deprecated types ExtVec*. @fredroy Is there a reason you did not use inherited structs in the first place?. Also, could someone explain why putting the `[[deprecated]]` attribute on a `using` alias does not emit a warning only when the alias is used?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1139:197,inherit,inherited,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1139,1,['inherit'],['inherited']
Modifiability,Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-862106120:49,plugin,plugin,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-862106120,1,['plugin'],['plugin']
Modifiability,Disabling a plugin and reconfiguring does not remove the plugin from plugin_list.conf. When writing plugin_list.conf (see runSofa CMakeLists) we use `__GlobalTargetList__` and `__GlobalTargetNameList__` global variables but these variables are based on CMake cache.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/632:12,plugin,plugin,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/632,4,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"Discussion on the improvement of FE codes in SOFA, Caribou plugin etc.; Clarifying the FEM codes is really good, using utility classes (static functions) can help the reading, understanding of the physical model. The loss of performance in addDForce must be investigated; → keep wip",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1010907207:59,plugin,plugin,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1010907207,1,['plugin'],['plugin']
Modifiability,Do everyone agrees on having the conditions I moved up into the NVI VisualModel::drawVisual() and with the one I added into the VisualVisitor ? . Eg: ; ```cpp; void VisualModel::drawVisual(const VisualParams* vparams); {; // don't draw if specified not to do so in the user interface; if (!vparams->displayFlags().getShowVisualModels()); return;. // don't draw if the component is not in valid state (we can change the condition so Loading/Unknow states are drawn differently) ; if( d_componentState.getValue() == sofa::core::objectmodel::ComponentState::Invalid ); return;. // don't draw if this component is specifically configured to be disabled (It is questionnable to have a data for that). ; // having a d_enable on Base would be better. ; if (!d_draw.getValue()); return;. // RAI to be sure the states changed during the rendering don't leaks ; const auto stateLifeCycle = vparams->drawTool()->makeStateLifeCycle();. doDrawVisual(vparams);; }; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3931#issuecomment-1592550546:623,config,configured,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3931#issuecomment-1592550546,1,['config'],['configured']
Modifiability,Do no forget this one : sofa-framework/Flexible#4,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/978#issuecomment-490821271:39,Flexible,Flexible,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/978#issuecomment-490821271,1,['Flexible'],['Flexible']
Modifiability,Do this means that the meshes loader will not read the textures correctly if the plugin is not loaded ? ; For coherency I thinkg the loader should be transformed into plugin as well with a dependency to the ; CImagePlugin. . Just a small side note... on the CI it seems that to fully function CImage requires imagemagick or graphicsmagick to be installed and available in the path on the machine...is it an annoying dependency ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679:81,plugin,plugin,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305157679,2,['plugin'],['plugin']
Modifiability,Do we wait the end of the pluginization of SofaGeneral to see if other dependencies are broken?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526:26,plugin,pluginization,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590#issuecomment-722396526,1,['plugin'],['pluginization']
Modifiability,"Do you know how to use PyCharm to run programs on Sofa compiled by yourself in Ubuntu/Windows system(sofa V21.12）? Because previously I used already compiled versions of Sofa, now I need to use a plugin Optimus (the official website only has self compiled methods).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4948:196,plugin,plugin,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4948,1,['plugin'],['plugin']
Modifiability,Double mechanism to load plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3147:25,plugin,plugins,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3147,1,['plugin'],['plugins']
Modifiability,Doxygen does not include plugins anymore,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3014:25,plugin,plugins,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3014,1,['plugin'],['plugins']
Modifiability,"Doxygen shows too much information, we should simplify it to have the important stuff first:; - inheritance diagram; - Data members; - Methods. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/995:96,inherit,inheritance,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/995,1,['inherit'],['inheritance']
Modifiability,"Drive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')); > >>> ; > ```; > ; > **Env vars**; > ; > ```shell; > python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; > ```; > ; > ```; > --- sys.version ---; > 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ]; > --- PAT",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:2362,plugin,plugins,2362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"Due to multiple final definition error, the plugin was not compiling anymore. Virtual inheriting was necessary.; Fix warnings and templating due to last VecTypes change. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1019:44,plugin,plugin,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019,2,"['inherit', 'plugin']","['inheriting', 'plugin']"
Modifiability,"During a discussion with @olivier-goury, it appeared that the sofa-launcher script was needed to use the MOR plugin. So when using this plugin, the users needed to download the sofa sources to get access to it because it was not shipped in the binaries. . This pr adds this folder to the install/releases. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4245:109,plugin,plugin,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4245,2,['plugin'],['plugin']
Modifiability,"During my Way of the Cross of fusing StiffSpring and its parent, I saw that the topological change of removing points didn't work as planned for topologySubsetIndices when there is multiple occurrence of the same element in the data. . I've fixed that and added tests. . One question is remaining though : here I kept the original mechanism using a swap of the deleted element and the last one. This is efficient in term of memory but it has the side effect of changing the indices order in the data. ; --> My question is, *is that what we want ?* Do we prefer memory/time efficiency over order coherency for this data ? Is it logical to get a random order of the vector out of a simple topological change ? This answer will change a bit the way I'll finish the refactoring in https://github.com/sofa-framework/sofa/pull/4649 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738:762,refactor,refactoring,762,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738,1,['refactor'],['refactoring']
Modifiability,"During the meeting several point were identified as open question. . One proposed approach was to implement automatic loading of plugins when a component is ; called in the scene.; An alternative approach was to make it more explicit in the form of ; <RequiredPlugin ='sofaAll'/>. Which would required to create kind of ""packages"" of plugins (maybe all the plugin in a directory?). Then is how to we handle backward compatibility or help users during the transition.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255:129,plugin,plugins,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271829255,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"EDITED: Damien. Currently the SofaPython plugin is in a very poor shapes with two serious problems. The first one is a problem for developper with a lot of duplicated or invalid or in-elegant code which impact maintainability of our code base. The second problem is the lack of consistency in the way warning and errors are reported. In sofa some component rise en exception while others prints a message and return None which is very problematic to users. . In this PR we addressed these two issues through a major cleaning set of changes:; - [SofaPython]: ; * refactor the way to get get Sofa object from their PyObject equivalent (hundred of changes). ; * add dedicated easing function (unwrap, get, get_baseobject) ; * replace wherever possible copy-pasted code with these function. ; * refactor the way we report error from binding (hundred of changes) (API BREAK). ; * returning NULL with a correctly set exception type as it is the way of handling error in python. ; * when returning NULL it is mandatory to preceed the return with an exception type & message specification. This can be done either with PyExc_SetString() or Py_BaddArgument(), ; * when returning after a failing Py_ParseTuple is an exception, as the function sets itself a very ; descriptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a stri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,4,"['maintainab', 'plugin', 'refactor']","['maintainability', 'plugin', 'refactor']"
Modifiability,"EdgesCollis=""30"" nbEdgesVisu=""40"" length=""60.0"" spireDiameter=""7"" spireHeight=""5.0""/> ; 		; <WireRestShape template=""Rigid3d"" name=""CoilRestShape"" wireMaterials=""@StraightSection @SpireSection""/>; ; <EdgeSetTopologyContainer name='meshLinesCoils' />; 		<EdgeSetTopologyModifier name='Modifier' />; 		<EdgeSetGeometryAlgorithms name='GeomAlgo' template='Rigid3d' />; 		<MechanicalObject template='Rigid3d' name='dofTopo3' />; 	</Node>; 	. 	<Node name='InstrumentCombined'>; 		<EulerImplicitSolver rayleighStiffness='0.2' rayleighMass='0.1' printLog='false' />; 		<BTDLinearSolver subpartSolve='0' verification='0' verbose='0'/>; 		<RegularGridTopology name='meshLinesCombined'; nx='180' ny='1' nz='1'; xmin='0.0' xmax='1.0'; ymin='0' ymax='0'; zmin='1' zmax='1'; 		/>; 		<MechanicalObject template='Rigid3d' name='DOFs' showIndices='0' ry='-90'/> . 		<WireBeamInterpolation name='InterpolCatheter' WireRestShape='@../topoLines_cath/catheterRestShape' radius='1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CatheterForceField' interpolation='@InterpolCatheter' massDensity='0.00000155'/> <!--stiff silicone E = 10000 MPa // 1550 Kg/m3-->	. 		<WireBeamInterpolation name='InterpolGuide' WireRestShape='@../topoLines_guide/GuideRestShape' radius='0.9' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='GuideForceField' interpolation='@InterpolGuide' massDensity='0.00000155'/> 	. 		<WireBeamInterpolation name='InterpolCoils' WireRestShape='@../topoLines_coils/CoilRestShape' radius='0.1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CoilsForceField' interpolation='@InterpolCoils' massDensity='0.000021'/> <!-- platine E = 168000 MPa // 21000 Kg/m3-->	. <BeamAdapterActionController name=""AController"" interventionController=""@IRController"" writeMode=""0""; timeSteps=""9.1 17.1 17.55 18.05 18.6 19.05 19.55 20.05 20.5 21 21.45 21.9 22.65 23.1 23.55 24.05 24.55 25 25.45 25.95 26.4 27.1 27.55 28.05 28.55 29 29.5 29.95 30.4 30.9 31.4 31.85 32.35 33.05 33.5 34 34.45 34.9 35.4 35",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:5611,Adapt,AdaptiveBeamForceFieldAndMass,5611,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['Adapt'],['AdaptiveBeamForceFieldAndMass']
Modifiability,"Embedded external libs (DiffLib, Json and STB) rely on cmake variables (resp. DIFFLIB_ROOT, JSON_ROOT and STB_ROOT) as HINTS / PATHS for find_path() in their respectives cmake find modules (FindDiffLib.cmake, FindJson.cmake and FindSTB.cmake). ; If CMAKE_FIND_ROOT_PATH is set (typically the case when cross-compiling and for my concerns when building a Conda package for Sofa), default behavior is to prepend all contained paths to the search performed by the find_path() calls. But as the *_ROOT variables are set with absolute paths, the search for these embedded libs will typically fail. ; This PR disables the use of CMAKE_FIND_ROOT_PATH for these libs. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3870:61,variab,variables,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3870,2,['variab'],['variables']
Modifiability,"Errors start from Compliant. First error on MacOS:; ```; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.cpp:1:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/applications/plugins/Compliant/assembly/AssemblyVisitor.h:5:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/MechanicalVisitor.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Visitor.h:26:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/simulation/Node.h:50:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/MechanicalState.h:25:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/core/behavior/BaseMechanicalState.h:31:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/framework/sofa/core/../../sofa/helper/StateMask.h:27:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/SparseCore:11:; In file included from /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/Core:461:; /builds/workspace/sofa-framework/PR-1101/mac_clang-3.5_options_release/src/SofaKernel/extlibs/eigen/Eigen/src/Core/CwiseBinaryOp.h:49:13: error: ambiguous partial specializations of 'cwise_promote_storage_order<Eigen::Sparse, Eigen::Sparse, 1, 0>'; Flags = cwise_promote_storage_order<typename traits<Lhs>::StorageKind,t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499:167,plugin,plugins,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-514530499,2,['plugin'],['plugins']
Modifiability,Errors when installing the CGAL plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1389:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1389,1,['plugin'],['plugin']
Modifiability,"Et voilà, no more change in Flexible & Compliant. For discussion the last revision continaing them is this one.; https://github.com/sofa-framework/sofa/pull/190/commits/50d6ccd23f6f52e22518710f6ef8187294a562bd",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285663614:28,Flexible,Flexible,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285663614,1,['Flexible'],['Flexible']
Modifiability,Every plugin/module in SOFA should handle its dependencies and errors itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/608:6,plugin,plugin,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608,1,['plugin'],['plugin']
Modifiability,Everything seems OK; ```; ciosx:build ci$ time ./bin/MultiThreading_test; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaMiscCollision.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSofaAllCommonComponents.dylib; [INFO] [PluginManager] Loaded plugin: /Volumes/Jenkins/workspace/sofa-framework/PR-727/mac_clang-3.5_options_release/build/lib/libSceneCreator.dylib; [==========] Running 4 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 4 tests from TaskSchedulerTests; [ RUN ] TaskSchedulerTests.FibonacciSingle; [ OK ] TaskSchedulerTests.FibonacciSingle (15 ms); [ RUN ] TaskSchedulerTests.FibonacciMulti; [ OK ] TaskSchedulerTests.FibonacciMulti (20 ms); [ RUN ] TaskSchedulerTests.IntSumSingle; [ OK ] TaskSchedulerTests.IntSumSingle (47 ms); [ RUN ] TaskSchedulerTests.IntSumMulti; [ OK ] TaskSchedulerTests.IntSumMulti (68 ms); [----------] 4 tests from TaskSchedulerTests (150 ms total). [----------] Global test environment tear-down; [==========] 4 tests from 1 test case ran. (150 ms total); [ PASSED ] 4 tests. real 0m3.061s; user 0m0.551s; sys 0m0.159s; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487:82,Plugin,PluginManager,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/727#issuecomment-408800487,6,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Example scenario [scene.txt](https://github.com/sofa-framework/sofa/files/2894540/scene.txt). Result is not physically plausible. Points of junction seem to be “heavier” than the others. They then gain speed, and the whole thing turn into a windmill. No crash.; You can compare the results using the commented section in the scenario of the initial post (section # This does not work / # Works). Log does not provide any useful information other than INFO messages (loaded plugins, etc). Problem exist both on master and 0057a0cfd3d3fb6b9b3cdb00ca22eae4c17ae384 (So before latest refactor of AttachConstraint).; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/940:473,plugin,plugins,473,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/940,2,"['plugin', 'refactor']","['plugins', 'refactor']"
Modifiability,"Example:. ```; [WARNING] [ObjectFactory] Module name cannot be found when registering BeamInterpolation<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering AdaptiveBeamSlidingConstraint<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering DeprecatedComponent<> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering AdaptiveBeamController<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering BeamAdapterActionController<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering InterventionalRadiologyController<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering SutureController<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering AdaptiveBeamForceFieldAndMass<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering AdaptiveInflatableBeamForceField<Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering AdaptiveBeamMapping<Rigid3d,Vec3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering AdaptiveBeamMapping<Rigid3d,Rigid3d> into the object factory; [WARNING] [ObjectFactory] Module name cannot be found when registering BeamLengtthMapping<Rigid3d,Vec1d> into the object factory. ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4725:209,Adapt,AdaptiveBeamSlidingConstraint,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4725,6,['Adapt'],"['AdaptiveBeamController', 'AdaptiveBeamForceFieldAndMass', 'AdaptiveBeamMapping', 'AdaptiveBeamSlidingConstraint', 'AdaptiveInflatableBeamForceField']"
Modifiability,"Except it is not !. `install/include/SofaSimulation/sofa/simulation/config.h`; `install/include/SofaFramework/sofa/simulation/simulationcore.h`. **SofaSimulation** include path is only included if I link against **SofaSimulationCommon**, **SofaSimulationTree** or **SofaSimulationGraph**. Here I don't need those targets, but only the **SofaSimulationCore** target.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343:68,config,config,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541027343,1,['config'],['config']
Modifiability,"ExecParams, ConstraintParams, MechanicalParams and VisualParams are used in a lot of different place of our code base which thus requires to #include their corresponding header causing code coupling. . This PR contains:; - the implementation of a set of ""opaque/c-api"" function to be used in header when a ExecParams (or other Params) is needed. ; the advantage of using these ""opaque"" function is that there is not includes other than the ""fwd.h"".; - the removale of all the #include<XXXXXXParams.h> everywhere is was possible, ; - the adding of the missing #include<XXXXXXParams.h> (or other include) in translation units (.cpp) or (.inl) when it was needed. . Following our guidlines, the declaration for the ""opaque functions"" are in ```sofa/core/fwd.h``` and contains:; ```cpp; namespace sofa::core; {; namespace execparams; {; SOFA_CORE_API ExecParams* defaultInstance();; }. namespace constraintparams; {; SOFA_CORE_API const ConstraintParams* defaultInstance();; SOFA_CORE_API ExecParams* asExecParams(sofa::core::ConstraintParams*);; SOFA_CORE_API const ExecParams* asExecParams(const sofa::core::ConstraintParams*);; }. namespace mechanicalparams; {; SOFA_CORE_API const MechanicalParams* defaultInstance();; SOFA_CORE_API ExecParams* asExecParams(sofa::core::MechanicalParams*);; SOFA_CORE_API const ExecParams* asExecParams(const sofa::core::MechanicalParams*);. SOFA_CORE_API SReal kFactor(const sofa::core::MechanicalParams*);; SOFA_CORE_API SReal bFactor(const sofa::core::MechanicalParams*);; SOFA_CORE_API SReal kFactorIncludingRayleighDamping(const sofa::core::MechanicalParams*, SReal d);; SOFA_CORE_API SReal mFactorIncludingRayleighDamping(const sofa::core::MechanicalParams*, SReal d);; SOFA_CORE_API SReal dt(const sofa::core::MechanicalParams*);; }; }. namespace sofa::core::visual::visualparams; {; SOFA_CORE_API VisualParams* defaultInstance();. SOFA_CORE_API ExecParams* asExecParams(sofa::core::visual::VisualParams*);; SOFA_CORE_API const ExecParams* asExecParams(const so",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794:190,coupling,coupling,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794,1,['coupling'],['coupling']
Modifiability,"Explicit instantiations of common `Mat` sizes led to compilation errors. For example, `z()` throws a `static_assert` for `Mat<2,2,>` because there is only 2 elements. Now, `x`, `y`, `z` and `w` are compiled conditionally. Other methods, such as `Identity`, `transpose` etc, are also concerned for squared matrices. The `static_assert` are therefore no longer useful. . `Identity` has been changed so it is `static constexpr` and it returns a reference. So there is no need to compute the identity matrix each time it is called. `s_identity` is now deprecated. The static variable is now included in the `Identity` method. It is better for static initialization fiasco and required for a `constexpr` context. Also, `s_identity` does not make sense for rectangular matrices. Since it is not possible to conditionally add a class member, it is hidden in the conditionally compiled method `Identity`. In `fixed_array`, the `operator<` is moved out of the class. This allows to compile this operator only when used, and not in explicit instantiations. This is necessary because the operator on `fixed_array<Vec3>` is not implemented (and does not make sense). The 3x3 matrix product and the `multTranspose` operation are specialized for a speedup. https://github.com/alxbilger/SofaBenchmark was used. Results show that this implementation is closer to the Eigen implementation. Unit tests are added. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/302]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3280:571,variab,variable,571,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3280,1,['variab'],['variable']
Modifiability,"ExternalBehaviorModel depends on SofaGraphComponent (https://github.com/sofa-framework/sofa/tree/master/applications/collections/deprecated/modules/SofaGraphComponent) which is deprecated.; ExternalBehaviorModel is not deprecated, so we have a non-deprecated plugin depending on a deprecated plugin.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3319:259,plugin,plugin,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3319,2,['plugin'],['plugin']
Modifiability,ExternalBehaviorModel plugin depends on a deprecated plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3319:22,plugin,plugin,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3319,2,['plugin'],['plugin']
Modifiability,"Externalize the plugin SofaSphFluid and add the fetching mechanism. This aims at disabling the regression tests when it is not built (e.g. for default configurations on the CI). I've externalized the plugin here: https://github.com/sofa-framework/SofaSphFluid and kept the history of changes. [ci-depends-on https://github.com/sofa-framework/Regression/pull/61]; [ci-depends-on https://github.com/sofa-framework/ci/pull/46]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526,3,"['config', 'plugin']","['configurations', 'plugin']"
Modifiability,"Extract the LMConstraint-related codes from SOFA and store it into a plugin. Fix #976. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659:69,plugin,plugin,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659,1,['plugin'],['plugin']
Modifiability,FFMPEG executable path should be part of the SofaVideoRecorderManager (GUI) and a ffmpeg.ini should be used in `config/` to remember latest path used. See https://github.com/sofa-framework/sofa/pull/1177#issuecomment-547846519,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1205:112,config,config,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1205,1,['config'],['config']
Modifiability,FIX : for compilation on Visual Studio 2015 with QWT plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/935:53,plugin,plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/935,1,['plugin'],['plugin']
Modifiability,FIX allows to extend VTKExporter in a plugin (for quadratic meshes for example). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/309:14,extend,extend,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309,2,"['extend', 'plugin']","['extend', 'plugin']"
Modifiability,FIX compilation for LeapMotion plugin due to moved files,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/296:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296,1,['plugin'],['plugin']
Modifiability,"FIX qt target handling. ; The QT_TARGETS variable used to store qt targets that the project depends on, was overridden by the libQGLViewer CMakeLists. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4354:41,variab,variable,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4354,1,['variab'],['variable']
Modifiability,"FIX this Regression_test error: ""Condition IsValidParamName(param_name) failed. Parameterized test name 'EulerExplicitSolver-diagonal' is invalid"". ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1881:80,Parameteriz,Parameterized,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1881,1,['Parameteriz'],['Parameterized']
Modifiability,FO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.Contact.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.Response.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Collision.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Setting.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Controller.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Analyze.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Generate.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Select.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.Transform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Engine.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Haptics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering2D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Component.Rendering3D.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.GL.Co,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:9240,Plugin,PluginManager,9240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3705,Plugin,PluginManager,3705,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Setting.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Controller.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Analyze.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Generate.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Select.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Transform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; ,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:9173,Plugin,PluginManager,9173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FO] [runSofa] GuiDataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/applications/projects/runSofa/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:1541,Plugin,PluginManager,1541,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,FVM plugin should now be fixed . [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965901959:4,plugin,plugin,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533#issuecomment-1965901959,1,['plugin'],['plugin']
Modifiability,FYI external plugins can already be compiled with compilation mode c++17,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-591330540:13,plugin,plugins,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-591330540,1,['plugin'],['plugins']
Modifiability,FYI: unit tests are OK; there are no scene tests or regression however.; ```; Plugin SoftRobots: built (found libSoftRobots.so libSoftRobots.so.1.0); Plugin SoftRobots: no examples/ nor scenes/ directories.; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569299565:78,Plugin,Plugin,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1569299565,2,['Plugin'],['Plugin']
Modifiability,"Factories were used only with `std::string` as a key. That is why it was not noticeable that factories were not compatible with other types than `std::string` as the key.; The limitations come from:. - `logFactoryRegister` assumed `Key` is a string. It is now a template function.; - `Creator` inherits from `Key` and instances was used such as it was a string. Now, `Creator` no longer inherits from `Key` but just stores the key as a class member. A unit test is added for enum type as a key. Small downside: `std::string& getFactoryLog()` is now available outside the translation unit. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2259:294,inherit,inherits,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2259,2,['inherit'],['inherits']
Modifiability,"Factorize all compatibility code in the SofaFramework (GL, Helper, Defaulttype, Core) into a common module, to simplify maintainability. For now, it is forcefully loaded for all the modules, as no code has been ported to the new architecture yet. In the future, this module should be optional (and its inclusion in an other cmake file in a module/ directory for example). (out-of-tree configuration tested with SofaPython3); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1944:120,maintainab,maintainability,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1944,2,"['config', 'maintainab']","['configuration', 'maintainability']"
Modifiability,"Factorize default plugin list filtering and review which plugin are removed from the default list. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4748:18,plugin,plugin,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4748,2,['plugin'],['plugin']
Modifiability,"File:; /sofa-master/applications/plugins/SofaOpenCL/OpenCLProgram.cpp line 156; Code:; void OpenCLProgram::createProgram(std::string *source,std::map<std::string,std::string> *types); {; std::string s;; std::map<std::string,std::string>::iterator it; // <-- unused; s = createTypes(types);; s += *source;; createProgram(&s);; }",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4956:33,plugin,plugins,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4956,1,['plugin'],['plugins']
Modifiability,Final architecture after discussions:; ```; /; plugins; BeamAdapter; ...; Sofa; framework <-- this directory is not a CMake target (lower case); Compat; Config; Core; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1112227436:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1112227436,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"Finally decided to remove the warning; `The collection SofaSimulation (/home/fred/sofa/src/current/applications/collections/deprecated/SofaSimulation) does not exist and will be ignored.` at every cmake config step. I guess this collection thingy should be deleted in the future anyway. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4320:203,config,config,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4320,1,['config'],['config']
Modifiability,"First effort to evaluate the relevance and amount of effort necessary to remove / replace the DataTypeInfo API in SOFA's core. So far, the blocking points I see are the following:. - DataTypeInfo<T>::name() -> Not substituable. we need some form of RTTI, at least for the type name. decoding the typeid() is not an option, as it won't translate well for complex template types (simple example with std::string -> basic_string<char,char_traits<char>,allocator<char>>); - ValidInfo: -> set to false if no template specialization exists for DataTypeInfo<T> (guarantees that data from the structure have been filled and aren't the defaults from AbstractTypeInfo. Non-substituable, works by pair with name(). - DataTypeInfo<T>::size() / DataTypeInfo<T>::Size -> can be replaced in some cases, but not all:; - In most cases in Sofa, we don't know what type we are manipulating, but we are almost always manipulating structures that inherit fixed_array. That makes it possible to substitute DataTypeInfo<T>::Size with T::total_size inherited from fixed_array. Would require an enable_if_t<is_fixed_array> to make sure...; - Sometimes, T is a scalar value for instance, in which case there isn't any total_size to query. It's the case in Vec.h for single scalar value vector operations (multScalar, divScalar, etc.), where the size is used in static_asserts to guarantee we are manipulating a single scalar quantity. I used SFINAE as substitution, but this makes code hard to read for most non-robot people. - in BaseData, it is used in updateFromParentValue(), along with FixedSize(), Integer / Scalar / Text / get/setTextValue, get/setScalarValue, get/setIntegerValue to resize and copy data from the parent value. BaseData, of course, can be templated on any kind of data (Scalars, text, Containers, complex structures...); ; - CopyOnWrite: Used in Data.h to generate the getters / setters for Data fields (beginEdit, operator= etc.). - ZeroConstructor, SimpleCopy: In SOFA's core, used exclusively in vect",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1385:926,inherit,inherit,926,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1385,2,['inherit'],"['inherit', 'inherited']"
Modifiability,"First plugin to be moved out, as detailed in issue #1442 ; Plugin is now located here: https://github.com/sofa-framework/InvertibleFVM. All feedback are more than welcome. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1443:6,plugin,plugin,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1443,2,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"First step for the change of ConstraintMatrix (and deprecate MapMapSparseMatrix); [CompressedRowSparseMatrixConstraintMatrix](https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrixConstraint.h) in [ISSofa](https://github.com/InSimo/ISSofa) derived from [CompressedRowSparseMatrix](https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h) so we need to bring their version of CompressedRowSparseMatrix . I renamed all the **bloc** words to **block** as well. The previous CRSMatrix could be used as a BaseMatrix (solvers), ConstraintMatrix (iterations) and as a pure CRS itself.; This new CRSMatrix is decomposed in several types:; - CRSGeneric (name to be changed maybe): the pure CRS structure; - CRSMechanical: inheriting/implementing BaseMatrix; - (in a next PR) CRSConstraintMatrix, with the same API as the old CRSMatrix used for ConstraintMatrices (for iterating). Different purposes need different traits (some case would prefer autocompression, etc), so a lot of compile-time options are present. They are called policy.; I needed to change some flags from the Insimo's version to have the same behavior for the tests. So in the future, it could be interesting to see if those changes should be integrated later for more performance (but the tests would need to be changed). For compatibility reasons, the old ""CRSMatrix"" type is an alias on CRSMechanical. In this PR, no change of performance is noted (neither regression or upgrade). Tested on caduceus, TorusFall, solvers scenes and BeamAdapter's 3instruments_collis.scn. Ref:; - https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h. Courtesy of Insimo (@fjourdes ). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/mas",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515:800,inherit,inheriting,800,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515,1,['inherit'],['inheriting']
Modifiability,"First step to remove OBBMode/CapsuleModel from SofaBaseCollision, as those primitives are not really deemed as ""basic"".; They are instead displaced into SofaMiscCollision, with other custom primitives. The code in DiscreteIntersection, etc is much clearer in this way, and leads to less cluttering in dependencies. Next steps:; - refactor Intr* utilities classes; - refactor FixParticlePerformer; - finally move OBBModel and CapsuleModel (and their sidecar files) into SofaMiscCollision. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2073:330,refactor,refactor,330,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2073,2,['refactor'],['refactor']
Modifiability,"First steps for a consistent, uniformed and centralized configuration storage. This PR adds the ability to retrieve the current local config folder for the user. . These return respectively (local account is `fred`):; - Linux:; ```; getUserLocalDirectory(): /home/fred/.config; getSofaUserLocalDirectory(): /home/fred/.config/SOFA; ```. - macOS:; ```; getUserLocalDirectory(): /Users/fred/Library/Application Support; getSofaUserLocalDirectory(): /Users/fred/Library/Application Support/SOFA; ```; - Windows:; ```; getUserLocalDirectory(): C:/Users/Fred/AppData/Local; getSofaUserLocalDirectory(): C:/Users/Fred/AppData/Local/SOFA; ```. `getSofaUserLocalDirectory()` creates also the directory if it is not created yet. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4875:56,config,configuration,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4875,4,['config'],"['config', 'configuration']"
Modifiability,"Fix #1597; Final PR for the modularization of SofaCommon. . SofaCommon is going to be a collection (set of plugins).; So for now, it wont be breaking to do; find_package(SofaCommon); and; target_link_library(blabla PUBLIC SofaCommon). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1609:107,plugin,plugins,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1609,1,['plugin'],['plugins']
Modifiability,"Fix #1667 , #1661 and much more... # TL;DR; Sofa.Config is a new module containing all the configuration necessary for compiling the SofaFramework and the subsequent modules.; It allows to spread efficiently all the flags/config/whatever to the cmake modules using it. # Description; A lot of CMake configuration/flags are spread everywhere in the code base: root CMakefile, Soframework CMakefile, SofaHelper CMakefile.; Moreover, a lot of compiler options are not set by **target** (CMake notion), so those are to added EVERYTIME for each projet/plugin (see SofaPython3): c++17, MSVC special flags, etc. # Solution; This PR regroups all CMake config code and SofaFramework is no more the ""bootstrapper"" or whatever it was not.; If you linking against anything from SOFA (most likely at least SofaHelper), the configuration will spread into your project automatically.; This module will be the lowest in the depencency chain (was a bastard mix of SofaFramework/SofaHelper before). # WIP; * ~~Some CMake file to clean~~. * ~~Add no-attribute flags from #1682~~. * Some variables are still not linked to Sofa.Config like Sofa_VERSION: it was in the root CMakefile before, so all the projects know this variable.; For now, Sofa.Config set those global variables **PARENT_SCOPE** but this is ugly in my opinion, and not ""Modern CMake""; One solution is to link this variable to a property of Sofa.Config, and retrieve this property when needed. But it seems a bit bothersome.; ```; get_target_property(Sofa_VERSION ${TARGET} Sofa_VERSION_PROPERTY); ```; Any opinion ?. * I guess there will other things to do later like removing all the tests related code/config into an eventual Sofa.Test, etc; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; _____",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1674:49,Config,Config,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1674,7,"['Config', 'config', 'plugin']","['Config', 'config', 'configuration', 'plugin']"
Modifiability,"Fix #1867. Follow the PR on Sofa.GL; Reminder: ; - do not use the **_cmake variable_** SOFA_NO_OPENGL in the cmake files. Instead, use `sofa_find_package(Sofa.GL)` and Sofa.GL_FOUND,; - neither the **_preprocessor macro_** SOFA_NO_OPENGL in your h/cpp files. Instead, use the preprocessor macro YOURPLUGINNAME_HAVE_SOFA_GL (generated from the previous `sofa_find_package(Sofa.GL)` ). What this PR does:; - Propagate the removal of the **_preprocessor macro_** SOFA_NO_OPENGL in almost all the plugins; - remove in Sofa.Config the file option build_option_opengl.h , which has the nice effect to not recompile ALL sofa if you enable/disable the **_cmake option__** SOFA_NO_OPENGL; - some cmake fixes, in sofacuda especially. Breaking because of the removal of build_option_opengl.h, thus SOFA_NO_OPENGL is not defined anymore. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1888:493,plugin,plugins,493,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1888,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"Fix #632 . The plugin list was never updated if we removed a plugin in the cmake configuration.; Plus, it was possible to append several identical targets. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/645:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645,3,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"Fix 2 missing deps in Flexible due to pluginization. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590:22,Flexible,Flexible,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590,2,"['Flexible', 'plugin']","['Flexible', 'pluginization']"
Modifiability,Fix 4 crashing (timeout) scenes on Windows CI:; - GenerateCylinder; - GenerateGrid; - Flexible: linearAffine_flex331.scn; - Compliant: FEM-donuts.scn. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/641:86,Flexible,Flexible,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/641,1,['Flexible'],['Flexible']
Modifiability,"Fix Zlib find errors by adding `<plugin>/lib `and `<plugin>/bin` in `CMAKE_LIBRARY_PATH` for each relocatable plugin. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1708:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1708,3,['plugin'],['plugin']
Modifiability,"Fix a peculiar bug where:; - one wants to compile a project out-of-tree,; - on WIndows,; - this project needs Sofa.GL; - Sofa.GL is find_package()'d first. As GLEW config on windows is special (windeppack stuff), its configuration is set-up in Sofa.Helper.; But the cmake config file for out-of-tree (Sofa.GLConfig.cmake.in) was trying to find GLEW before Sofa.Helper, hence cmake could not configure the projet and was yelling about not finding GLEW.; (got the case with registration plugin). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3098:164,config,config,164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3098,5,"['config', 'plugin']","['config', 'configuration', 'configure', 'plugin']"
Modifiability,Fix for SofaImplicitField and SofaVolumetricData plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/422:49,plugin,plugin,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422,1,['plugin'],['plugin']
Modifiability,"Fix issue #7 . Summary: drawQuad needed a call to glBegin(GL_QUADS) to draw a quad, defeating the purpose to avoid to use explicitly OpenGL API. Same problem with drawTriangle and drawPoint,; I suppose that these functions, at the beginning, was just needed to factorize OpenGL code (but still you needed to use OpenGL with it). ; Now that we remove the explicit calls, those functions should not be accessible outside.; But a few code in Sofa (and maybe plugins?) are using those calls to draw one primitive. Finally, what have been done:; - remove public visibility to those functions and rename it to internalDrawXXXX (where XXXX is point, triangle, quad); - keep the old calls to keep compatibility; - add addLine to keep consistency with the other primitives. I am wondering if in the future (or just right now), the drawXXX (drawing ONE primitive) should be removed and force users to use the drawXXXXs with a vector (and oblige user to build a std::vector with ONE primitive. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/293:455,plugin,plugins,455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/293,1,['plugin'],['plugins']
Modifiability,"Fix libs copy on Windows with multi-config generator (Visual Studio). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2261:36,config,config,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2261,1,['config'],['config']
Modifiability,"Fix mess in *Config.cmake.in and some dependencies from modularization. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1570:13,Config,Config,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1570,1,['Config'],['Config']
Modifiability,"Fix plugin CMakeLists; Add example; Improve README. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1830:4,plugin,plugin,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1830,1,['plugin'],['plugin']
Modifiability,"Fix regression (appeared when boost was supposed to be removed from Sofa).; -> Plugins _not able to find Boost automatically_ failed to compile (because it needs boost to compile obviously); ; The problem was coming on Windows mainly, as boost are often installed in the system directories on Unix system. And few changes were added to make boost's CMake part more consistent. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/421:79,Plugin,Plugins,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/421,1,['Plugin'],['Plugins']
Modifiability,"Fix several bugs when having a metis package installed and its cmake config files are expected to be used by our Findmetis cmake module file:; - cmake config files provided by metis packages (at least conda, as APT do not provide such) are prefixed with an uppercase (e.g. MetisConfig.cmake instead of metisConfig.cmake), although all cmake variables and targets are then correctly set to lowercase. This will make the library not findable in config mode on case senstitive OS such linux. ; - do not fail if invalid version of metis is found on the system, instead allow fetching the right one (is SOFA_ALLOW_FETCH_DEPENDENCIES is ON). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4570:69,config,config,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4570,4,"['config', 'variab']","['config', 'variables']"
Modifiability,"Fix sofa::type namespace variables in CGALPlugin for release v21.06. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2246:25,variab,variables,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2246,1,['variab'],['variables']
Modifiability,"Fix the FindAssimp.cmake by changing variable set by assimp to new names. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4326:37,variab,variable,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4326,1,['variab'],['variable']
Modifiability,"Fix various warnings:; - type comparison; - misleading indentation; - unused variable. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2196:77,variab,variable,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2196,1,['variab'],['variable']
Modifiability,Fix with patch; [SofaNonUniformFem] Remove shadow variable; pr: clean pr: fast merge status: ready; #1874 by maddin200 was merged yesterday • Approved,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878:50,variab,variable,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1855#issuecomment-788859878,1,['variab'],['variable']
Modifiability,Fix: ; - Dll export + Add config file; - Stop scheduler only if thread has successfully started. Enhancements:; - Add: specific method to handle tool buttons; - Add: send script event when button are used.; - Add: option to not automatically start tool at init but manually start it through a method call. (start at init by default); - Update: m_errorDevice is not anymore a bool but store the HD_DEVICE_ERROR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/786:26,config,config,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/786,2,"['Enhance', 'config']","['Enhancements', 'config']"
Modifiability,"Fixed this error while trying to configure a out-of-tree compilation of a plugin depending on SofaGuiQt. `CMake Error at sofa/install/lib/cmake/SofaGuiQt/SofaGuiQtConfig.cmake:49 (find_package):; Found package configuration file:. sofa/install/plugins/SofaMiscForceField/lib/cmake/SofaMiscForceField/SofaMiscForceFieldConfig.cmake. but it set SofaMiscForceField_FOUND to FALSE so package; ""SofaMiscForceField"" is considered to be NOT FOUND. Reason given by; package:. The following imported targets are referenced, but are missing:; SofaBaseMechanics`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2707:33,config,configure,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2707,4,"['config', 'plugin']","['configuration', 'configure', 'plugin', 'plugins']"
Modifiability,"Fixed two things : ; - Compilation error in CudaTriangular[..]; - Undefined symbol while loading the plugin in CudaConstant[..] . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2634:101,plugin,plugin,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2634,1,['plugin'],['plugin']
Modifiability,"FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: fix principal values ordering with input matrix is diagonal + uninitialized value warning; - VisualModelImpl: fix wrong object (triangles) called when adding quads in handleTopologyChange(); - VoxelGridLoader: `std::unique` result was not used. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218:1929,variab,variables,1929,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218,1,['variab'],['variables']
Modifiability,Fixes #561 . This PR does the same work as #564 but using the existing `Utils::getSofaPathPrefix()` function and avoiding heavy macro creation in root CMakelists.; I also removed all the PluginRepository and DataRepository re-inits. Sorry @ErwanDouaille I did not know this function before :-/. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/568:187,Plugin,PluginRepository,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/568,1,['Plugin'],['PluginRepository']
Modifiability,Fixing some components linkage on Windows; Needed for ModelOrderReduction plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/910:74,plugin,plugin,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/910,1,['plugin'],['plugin']
Modifiability,Flexible smoothing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/76:0,Flexible,Flexible,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76,1,['Flexible'],['Flexible']
Modifiability,Flexible strain smoothing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/75:0,Flexible,Flexible,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/75,1,['Flexible'],['Flexible']
Modifiability,"Follow up of https://github.com/sofa-framework/sofa/pull/1663; For comparison with #1797. In this PR we cut the coupling between vector and vector_device to make them really independant class. ; We then split the vector.h class in multiple separated parts for the differents specializations. . Because of unclear problems with windows explicit specialization interger, real and strings (extern template) have been removed. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1799:112,coupling,coupling,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1799,1,['coupling'],['coupling']
Modifiability,"Follow-up on the quest to remove boost (at least the parts where the libraries are needed). ### 1; The only remaining part of SOFA using boost::thread is Sofa.Helper/Watchdog whose only purpose is to kill the current process if it exceeds a given time.; It is only used in the deprecated sofaInitTimer project, whose is litteraly a ""temporary"" project and was done to monitor the init() of the scenes... a kind of SofaVerification. Even the [commit ](https://github.com/sofa-framework/sofa/commit/0cbb991f6a7d6d1b1f32489d82c3267a6adc36a3) is saying ""ADD: temporary project to profile the initialization of some scenes"". Anyway, I decided to not delete the file by pity, and just moved the Watchdog class into this project.; Frankly, this class and the sofaInitTimer could be deleted in my opinion. ### 2; Sensable plugin is using optionnally `boost::thread::yield`, which:; 1. is deprecated; 2. can be replaced with std::this_thread::yield(). ### 3; CircularQueue had its tests disabled since... forever. I saw that because it was using boost::thread.; I made these tests compiled again but 2 are failing. I made them disabled, if somebody wants to fix them... ### 4; Sofa.Helper does not need boost::thread anymore and thus is removed from the CMake files.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2264:814,plugin,plugin,814,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2264,1,['plugin'],['plugin']
Modifiability,"Following #2368 . Some projects (mainly tests) are using find_package(SofaBase) which still uses the project SofaEigen2Solver for compatibility purpose. This leads to a few prints in the cmake output about the SofaEigen2Solver being deprecated.; Of course this is a bit slightly annoying to read the cmake output. This PR limits the deprecation display to once a cmake configuration pass. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2386:369,config,configuration,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2386,1,['config'],['configuration']
Modifiability,"Following #2777, `buildStiffnessMatrix` and `buildDampingMatrix` are implemented for `FastTetrahedralCorotationalForceField`. I took the opportunity to simplify the code and clean it compared to `addKToMatrix`. I also changed the example scene, as it was not really functional. Now, the scene is the same than `TetrahedronFEMForceField`. I also added the possibility to define the method as `small`, for consistency with `TetrahedronFEMForceField`. At some point, this should be refactored with an OptionGroup. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3929:479,refactor,refactored,479,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3929,1,['refactor'],['refactored']
Modifiability,"Following #4876 (but not depending on it) this PR proposes to define a gravity-inheritance from the parent node when the data gravity is not set. A test is added but does not work due to SimpleAPI not taking into account data set in nodes.; Currently under investigation (this is why I draft this PR). ---. Suggestion : **TODO after this PR**; - Remove the class Gravity and use one single way to play with gravity : the associated data in the nodes; - Apply the change in all scenes using the Gravity component. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4910:79,inherit,inheritance,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4910,1,['inherit'],['inheritance']
Modifiability,"Following https://github.com/sofa-framework/sofa/pull/2016. I thought SofaCUDA scenes were not tested at all on CI but actually they are (some of them at least).; A `.scene-test` file is used to ignore all the scenes that require SofaCUDA. Here are the scenes that are successfully tested (check them out [here](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/2474/testReport/SceneTests/applications_plugins_SofaCUDA_examples/)):; - StandardTetrahedralFEMForceFieldCPU.scn; - TetrahedralTensorMassForceFieldCPU.scn; - beam10x10x46-fem-implicit-CPU.scn; - beam10x10x46-hexafem-implicit-CPU.scn; - beam10x10x46-hexafem-rk4-CPU.scn; - beam16x16x76-fem-implicit-CPU.scn; - beam16x16x76-hexafem-rk4-CPU.scn; - quadSpringSphere.scn. Does it makes sense to have non-CUDA scenes in SofaCUDA? ; Maybe should we ignore all the plugin scenes?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2042:894,plugin,plugin,894,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2042,1,['plugin'],['plugin']
Modifiability,Following https://github.com/sofa-framework/sofa/pull/4420. A good idea would be to centralize the regression-tests files in Regression plugin. . This would require multiple changes like being able to find the path of all compiled plugins to find the scenes and the regression references when they are inside of the plugin instead of Regression.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4424:136,plugin,plugin,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4424,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Following https://github.com/sofa-framework/sofa/pull/4495; This is to fix https://github.com/sofa-framework/BeamAdapter/actions/runs/8069371516/job/22044285700?pr=140; ```; CMake Error at BeamAdapter_test/CMakeLists.txt:5 (find_package):; Found package configuration file:. D:/a/BeamAdapter/BeamAdapter/sofa/lib/cmake/Sofa.Testing/Sofa.TestingConfig.cmake. but it set Sofa.Testing_FOUND to FALSE so package ""Sofa.Testing"" is; considered to be NOT FOUND. Reason given by package:. The following imported targets are referenced, but are missing:; Sofa.SimpleApi. -- Configuring incomplete, errors occurred!; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4542:254,config,configuration,254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4542,2,"['Config', 'config']","['Configuring', 'configuration']"
Modifiability,"Following our recent discussions, the ""find or fetch"" is replaced by a more classical find package strategy. The package management is fully left to the user. ; As some package managers were not providing cmake config files for tinyxml2 (at least APT), this PR also provides a cmake find module to look for a config file first, and if none found, look manually for the tinyxml2 library. ; Tested with:; - APT package libtinyxml2-dev (v9.0.0), no cmake config file provided; - conda package tinyxml2 (v9.0.0), cmake config file provided; - vcpkg package tinyxml2 (v9.0.0), cmake config file provided.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1785355094:211,config,config,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240#issuecomment-1785355094,5,['config'],['config']
Modifiability,"Following recent changes, when compiled externally (out-of-tree), plugin libraries are not generated in the `plugin/` folder of SOFA build repository anymore, but in a dedicated `external_directories` folder. However this folder was not included in the reference folders (defined in `FileRepository.cpp`) in which the RequiredPlugin component searches for plugins at run time. This is not necessarily an issue when loading manually the plugins using the GUI's plugin manager, but it doesn't work when launching a scene which requires an external plugin in batch mode. The issue was pointed out recently by @VannesteFelix . This commit simply add `external_directories/` in the reference folders to search for plugins. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2927:66,plugin,plugin,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2927,7,['plugin'],"['plugin', 'plugins']"
Modifiability,"Following the discussion of STC#3, here is a short summary. The work of validation started.; If mainly focused on linear elasticity and corotational approach. It consists in both verification against analytical solutions and industrial softwares. . This work aims at:. - structure the selected forcefield and homogenize them; - consistency of functions,; - data structure; - and data naming; - use inheritance to decrease code complexity and improve readability : one class corresponds to one mechanical constitutive law; - define properly the mechanical tests assessing the mechanics; - defining validated components with associated tests (unit, functional and regression). Later we could consider heterogeneity and anisotropy.; Under the same workflow, the hyperelasiticity will be introduced.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601:398,inherit,inheritance,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25#issuecomment-291186601,1,['inherit'],['inheritance']
Modifiability,"Following the remarks we got from the SOFA conda package PR on conda-forge (https://github.com/conda-forge/staged-recipes/pull/23085), we have some problems regarding some external libraries that are embedded in SOFA code. ; Here is a try to sum up all of these embedded libraries:; | Lib name | Type | Location in code | License | Status |; | --- | --- | --- | --- | --- |; | difflib | header-only | `extlibs` | MIT | OK |; | json nlohmann | header-only | `extlibs` | MIT ~~**(should be in a separate file)**~~ | OK. Fixed in #4272 |; | stb | header-only | `extlibs` | MIT | OK |; | TinyXML | static | `extlibs` | zlib **(should be in a separate file)** | Externalize tinyxml dependency: #4240 (waiting for merge) |; | miniFlowVR | static | `applications/plugins/SofaDistanceGrid/extlibs` | LGPL (version ?) **(should be in a separate file)** | Not built by default. TODO: plugin to be externalized (#1442 ) |; | newmat | static | `applications/plugins/SofaNewmat/extlibs` | type inconnu | Not built by default. TODO: plugin to be externalized (#1442 ) |; | CImg | header-only | `applications/plugins/CImgPlugin/extlibs` | CeCILL-C / CeCILL | OK |; | csparse | static | `Sofa/Component/LinearSolver/Direct/extlibs` | **no license file** | Plugin to be externalized. WIP : #4258 |; | metis | static | `Sofa/Component/LinearSolver/Direct/extlibs` | Apache v2 | Externalize metis dependency : #4266 (waiting for merge) |; | gtest | shared | `Sofa/framework/Testing/extlibs` | BSD-3-Clause | Externalize ? |; | cxxopts | header-only | `Sofa/GUI/Common (fetched from GitHub)` | MIT | Add to possibility to use external dependency and prevent from fetching: Fixed in #4273 |; | libQGLViewer | shared | `Sofa/GUI/Qt` | GPL | Find or use embedded code (find module being fixed in #4290) |. The actions we should take to make our code compatible for the conda package on conda-forge are:; 1. Fix the missing licenses files (points in bold); 2. Avoid all static libraries. For point 2, we are not concerned by ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4221:756,plugin,plugins,756,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4221,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Following the rise of discussions about further using Eigen inside SOFA, this PR aims at standardizing its inclusion in the framework. Right now, SOFA automatically pulls a fixed version of Eigen (3.2). It also install it along with SOFA, which is a big problem when an external program or library tries to compile with both SOFA and another version of Eigen. . This PR removes the automatic pull of Eigen, and instead rely on the standard find_package(Eigen3) which is available in almost all distributions via the system package manager (apt, dnf, pacman, etc), for instance:. <table>; <tr><td>Debian 9</td><td>Eigen 3.3.2</td></tr>; <tr><td>Debian 10</td><td>Eigen 3.3.7</td></tr>; <tr><td>Ubuntu 18.04</td><td>Eigen 3.3.4</td></tr>; <tr><td>Ubuntu 19.10</td><td>Eigen 3.3.7</td></tr>; <tr><td>Fedora 29</td><td>Eigen 3.3.5</td></tr>; <tr><td>Fedora 30-31</td><td>Eigen 3.3.7</td></tr>; </table>; ; Right now, this PR compiles with all of the previous distributions (I've tested it with Docker by simply installing eigen3-devel and compiling Sofa). ~~However, there is a faulty test with Eigen > 3.2: the **compliant_test** from the Compliant plugin. It seems to come from the Assembly visitor of the plugin, which relies a lot on Eigen to build the system matrices. I'll have a look at it in the next days, but if someone have an idea...~~ ; Found the nasty bug at 53dd4f5 - memcopy is _dangerous_ !. Everything ~~else~~ seems to be fine with recent versions of Eigen. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1281:1146,plugin,plugin,1146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281,2,['plugin'],['plugin']
Modifiability,"Following work with @ChristianDuriez at STC6, here is a way to fix the geomagic plugin scenes and recover behavior from before the PR on freeAnimationLoop and lambda function. . Also add:. - a second RigidSkull.scn example to show another way to map the haptic tool.; - A small bool to know if the haptic tool is in contact with an object. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/858:80,plugin,plugin,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/858,1,['plugin'],['plugin']
Modifiability,"Follows #2073 and then #2081. PickParticlePerformer has a hard dependency on OBBModel & CapsuleModel to compute where it sets its constraint with the mouse while picking.; So this forces the modules SofaUserInteraction to know those classes before hand. This design is not that good, as it is not possible for someone creating a new CollisionModel (in a plugin, etc) and use the PickParticlePerformer. This PR adds a (static) registration system, similar to the ObjectFactory and co., so if anybody wants to add a new collision model to pick on, it just has to register its model, along a callable (lambda, std::function, etc) on how to get the points on this model.; PickParticlePerformer registers by itself the triangle, sphere and rigidsphere models.; SofaMiscCollision (where OBB&Capsule are) registers the obb and capsule model functions. Fix #1624 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2084:354,plugin,plugin,354,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2084,1,['plugin'],['plugin']
Modifiability,"For @sofa-framework/reviewers : this PR is now ready but it will have a **massive impact on all the code base.**. Any feedback is more than welcome. A compatibility layer is obviously implemented. We suggest to merge this PR but temporarily de-activating all the warnings (compilation-time and runtime). Another PR will start the cleaning within SOFA and its official plugins. When the main part will be done, warnings will be re-activated so that plugin authors can be informed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982:368,plugin,plugins,368,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"For Regression-Test to be able to test scenes with name like: EulerExplicitSolver-diagonal.scn . Solves error:; ```; [ FATAL ] /data/Softwares/sofa/src/master/extlibs/gtest/include/gtest/internal/gtest-param-util.h:569:: Condition IsValidParamName(param_name) failed. Parameterized test name 'EulerExplicitSolver-diagonal' is invalid, in /data/Softwares/sofa/src/master/applications/projects/Regression/Regression_test/Regression_test.cpp line 224; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1265:268,Parameteriz,Parameterized,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1265,1,['Parameteriz'],['Parameterized']
Modifiability,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:401,variab,variables,401,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,2,"['refactor', 'variab']","['refactored', 'variables']"
Modifiability,"For now, the LCPConstraintSolver only allows to use one _mu_ friction coefficient common for all object interactions.; It would be nice to adapt the API to allow for one _mu_ for each object.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2014:139,adapt,adapt,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2014,1,['adapt'],['adapt']
Modifiability,"For the CI:; - ignore scene using SofaCUDA plugin; - reduce the number of iterations for CPU version as they are all heavy simulations. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2616:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2616,1,['plugin'],['plugin']
Modifiability,"For the coherency, I totally agree that mesh loaders should be gathered in a plugin.; As for the dependency, I would just warn the user that if find_package() in CMake does not find CImgPlugin, then texturing will just be disabled. (i.e no REQUIRED flag) ; you could wish to load meshes just for pure mechanical scene. As for the CimgPlugin and CImg, CMake detects if libpng/libjpeg/libtiff are present and enable/disable preprocessor flag directly. ; So for example if libjpeg is not present, the user is informed of it through CMake configuration process, and the ImageFactory does not add the *.jpg format into its supported image list. Finally, I would say that imagemagick dependency is quite annoying, especially for windows users.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/9#issuecomment-305191404,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"For the moment we cannot use the component MechanicalMatrixMapper if the force field and mass are in the same component (for example AdaptiveBeamForceFieldAndMass from the plugin BeamAdapter). This PR just adds the option. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3173:133,Adapt,AdaptiveBeamForceFieldAndMass,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3173,2,"['Adapt', 'plugin']","['AdaptiveBeamForceFieldAndMass', 'plugin']"
Modifiability,"For the record, I saved and will maintain this scene (with Regression) in my plugin:; https://github.com/InfinyTech3D/InfinyToolkit/blob/main/examples/TetrahedronBeamMultiMaterials.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2147677144:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2147677144,1,['plugin'],['plugin']
Modifiability,"Forgive me @fredroy, I savagely used your branch to add a clean commit in Sofa.Config :angel:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2210#issuecomment-869820820:79,Config,Config,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2210#issuecomment-869820820,1,['Config'],['Config']
Modifiability,François is right but isn't doing this will only fix the find plugin problem... this can be problematic as there is other part of Sofa that are using the executable with relative path to locate resources directory (eg: GuiDataRepository).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596:62,plugin,plugin,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596,1,['plugin'],['plugin']
Modifiability,"From the forum (https://www.sofa-framework.org/community/forum/topic/still-license-issues-with-sofa-plugins/):. I noticed that there was a pull request targeting license stuff not long ago (v16.12), which is nice, but I still found some delicate license issues, which potentially can cause trouble for users of SOFA and the SOFA-devs. Just from a first look into the plugin folder for all plugins, that do NOT contain the string “LGPL”, I found conflicting license information. I didn’t yet check the “LGPL”-plugins or SOFA in general for potential transitive license issues (conflicting with licenses of third-party dependencies). It’s also hard to make a pull request for this issues as it is something that the SOFA devs have to decide. 1. BulletCollisionDetection; – getModuleLicence() returns “Private”; – text file with information “LICENCE: Private”; – initBulletCollisionDetection.cpp has LGPL 2.1 header; – other source files don’t have a license header; – depends on BulletPhysics, which is licensed under zlib (with exceptions!). 2. ExternalBehaviorModel; – getModuleLicence() returns “???”; – source files have LGPL 2.1 header. 3. Haption; – getModuleLicence() not defined; – text file with information “LICENCE: None”; – source files have LGPL 2.1 header. 4. ManifoldTopologies; – getModuleLicence() returns “?”; – text file with information “LICENCE: ??”. 5. OpenCTMPlugin; – getModuleLicence() returns “Licence ZLIB”; – text file with information “LICENCE: OpenCTM library is an Open source, with a very liberal license (zlib/libpng license).”; – source files have LGPL 2.1 header. 6. Registration; – getModuleLicence() returns “QPL”; – has a file LICENCE.txt (should be LICENSE.txt), which states QPL; – Source files have LGPL 2.1 header. 7. SofaHAPI; – getModuleLicence() returns “GPL”; – text file with information “LICENCE: GPL”; – source files have LGPL 2.1 header. 8. SofaPML; – getModuleLicence() returns empty string; – no text file with license information; – source files have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368:100,plugin,plugins,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275395368,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:607,refactor,refactored,607,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700,1,['refactor'],['refactored']
Modifiability,"FromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ld: symbol(s) not found for architecture x86_64; ```. This file is only included if the image plugin is activated, thus making this error appear only in specific cases. Moreover, since CGAL seems not tested on CI, this error might be quite old, as it has passed under the radar so far. It has been observed on OS X, and Linux. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/352:2242,plugin,plugin,2242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352,1,['plugin'],['plugin']
Modifiability,Further #1834 : . Tests: merge SofaTests with Sofa.Testing; Make sure that examples (see in Plugin Example : https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp) and doc are up to date: https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/. Connected to #417 #489. and PRs: #455 #471,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1885:92,Plugin,Plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1885,3,"['Plugin', 'plugin']","['Plugin', 'PluginExample', 'plugins']"
Modifiability,Further to PR #1269 warnings were added in the core of SOFA.; This PR fixes these warnings due to deprecated formats and unused variables. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1329:128,variab,variables,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1329,1,['variab'],['variables']
Modifiability,"Further to https://github.com/sofa-framework/sofa/pull/4814, the use of RenamedData should be extended to all RENAMED data. Along this change, the `setParent()` function should be replaced with `setOriginalData()`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4845:94,extend,extended,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4845,1,['extend'],['extended']
Modifiability,"GKRAND support allows the portability of random number generation across different architectures, hence a portable matrix factorization. It is supposed to fix the tests in https://github.com/sofa-framework/sofa/pull/3050. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3072:26,portab,portability,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3072,2,['portab'],"['portability', 'portable']"
Modifiability,"Give a try to the mouse described in Compliant (note this mouse implementation is fully compatible with non-Compliant solvers).; For that, compile the Compliant plugin and then add these components to your scene:; `<RequiredPlugin name=""Compliant""/>; <CompliantAttachButton />`; (Note that CompliantAttachButton has parameters you can set in your scene and access from the runSofa gui)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926:161,plugin,plugin,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/84#issuecomment-264831926,1,['plugin'],['plugin']
Modifiability,"Glad to see someone asking question on that topic. Since the release of sofapython3, I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:321,plugin,plugin,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,2,['plugin'],['plugin']
Modifiability,Global compilation flags are not passed to subsequent plugins (e.g SofaPython3),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1661:54,plugin,plugins,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1661,1,['plugin'],['plugins']
Modifiability,Good news !; We have been accepted for the GSoC 2018 !; Congratulations to the students selected by Google @firedranzer (Communication Plugin) and @m4n4n (SOFA Pulse) ! Let's start the code !!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633#issuecomment-383644444:135,Plugin,Plugin,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-383644444,1,['Plugin'],['Plugin']
Modifiability,"Good question,. I'm not sure I have a ""ready"" answer but I think that the idea is that each module/plugin should have ; has its own config.h. This file should include the config.h from its its dependencies. . So let's take SoftRobots as an example. ; This SoftRobots modules we should have something like:; SoftRobots/config.h; And each header in this SoftRobots plugin should include SoftRobots/config.h . Now SoftRobots/config.h we should include all the config.h from the package the plugin depend on. ; This means that, if in the cmakelist.txt of a module/plugin we have some find_package(SofaFramework); Then in the module SoftRobots/config.h ; We should have something like this: ; #include <SofaFramework/config.h>",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928:99,plugin,plugin,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904#issuecomment-458938928,12,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Got a missing linker reference to pthread with my configuration.; I suppose this does not appear on the CI because of some differences in the cmake config (packages?). Related to the removal of boost::thread which was doing the job for everybody before. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2302:50,config,configuration,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2302,2,['config'],"['config', 'configuration']"
Modifiability,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:409,plugin,plugin,409,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790,1,['plugin'],['plugin']
Modifiability,"Greetings,. 	I am experiencing a problem with Geomagic plugin. Actually it does work fine on its own, but the problem begins when I add the SofaPython3 plugin. After that, the first 3 angle values (first 3 joints from the base) of the simulation model of geomagic haptic device does not work. However, last 3 passive joints works fine. And in neither case I get an error message.; 	I was wondering if anyone else experience the same problem? Or is there a solution?. 	Also is there any way to use the haptic device with a python code for Sofa. Because our aim is to use geomagic haptic devices as the masters for a soft robot that is simulated via SoftRobots plugin.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185,3,['plugin'],['plugin']
Modifiability,"Greetings,. I have built SOFA v21.12 without any error massages, on Ubuntu 18.04. And it works fine without plugins. However when I try to run examples for SoftRobots, I encounter the same problems as previously described is following topics, also tried the solutions that is described there. (Also tried to build on Ubuntu 20.04 but the result is the same). https://www.sofa-framework.org/community/forum/topic/error-couldnt-import-objects-from-stlib3-physics-rigid/. https://www.sofa-framework.org/community/forum/topic/issues-with-running-examples-on-sofa_v20-12-02_defrost_linux/. Has this problem been solved?. Moreover, my colleague also built SOFA and the plugins on Ubuntu 20.04, then sent me the built version of his. I have re-installed Ubuntu 20.04 with his user name, and surprisingly the plugins worked without any errors. Therefore, I am assuming there might be a mistake while I use Cmake. However, as me and my colleague discussed, we have followed exactly the same method but the results were different. I get the following error massage when I try to run SOFA with my build:. `[ERROR] [SofaPython3::SceneLoader] Unable to completely load the scene from file '....path/to/file.../SoftRobots/docs/tutorials/FirstSteps/details/sofapython3/step4.py3scn'. ; Python exception: ; ImportError: cannot import name 'Floor' from 'stlib3.physics.rigid' (/....path/to/file...../sofa/build/lib/python3/site-packages/stlib3/physics/rigid/__init__.py). At:; step4.py3scn(2): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(843): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /usr/lib/python3.8/imp.py(171): load_source; /usr/lib/python3.8/imp.py(234): load_module; <string>(3): <module>; `",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2754:108,plugin,plugins,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2754,3,['plugin'],['plugins']
Modifiability,HI guys. several users are giving us feedback about the RequiredPlugin which is not working.; The plugin (dll) is not loaded and the associated components obviously can't be created. Any hints ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/558:98,plugin,plugin,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558,1,['plugin'],['plugin']
Modifiability,"Hard to do some cleaning in CMakeLists without touching all SOFA files!. This PR contains:. ------------------------. Default properties for targets calling sofa_generate_package or sofa_install_targets; - include_directories:; - BUILD_INTERFACE: the directory given in INCLUDE_SOURCE_DIR or ""${CMAKE_CURRENT_SOURCE_DIR}/.."" (bad but necessary for old modules); - BUILD_INTERFACE: ""${CMAKE_BINARY_DIR}/include/${PROJECT_NAME}""; - INSTALL_INTERFACE: ""install"" (if relocatable plugin) or ""install/${PROJECT_NAME}""; - DEBUG_POSTFIX: ""_d""; - VERSION: Sofa_VERSION. ------------------------. Cleaning of config.h mechanism (consistency with all other SOFA modules); - deprecate headers not following the ""config.h"" naming convention; - sofa/core/core.h -> sofa/core/config.h; - sofa/defaulttype/defaulttype.h -> sofa/defaulttype/config.h; - sofa/helper/helper.h -> sofa/helper/config.h; - sofa/simulation/simulationcore.h -> sofa/simulation/config.h; - SofaSimulationCommon/common.h -> SofaSimulationCommon/config.h; - SofaSimulationGraph/graph.h -> SofaSimulationGraph/config.h; - SofaSimulationTree/tree.h -> SofaSimulationTree/config.h; - sofa/gui/SofaGUI.h -> sofa/gui/config.h; - sofa/gui/qt/SofaGuiQt.h -> sofa/gui/qt/config.h; - centralize config.h call chain on sofa/config.h; - sofa/helper/system/config.h is now useless; -> WARNING: maybe not a good idea, review needed here; - dispatch all SOFA_BUILD_* macros from packages' config.h towards modules' config.h (good for future modularizations). ------------------------. Moving SofaGui modules into ""modules"" directory + cleaning their source trees. ------------------------. Every package is now also a library. Work started by @fredroy in #1314, 3 packages remained; - SofaFramework; - SofaGui; - SofaSimulation. ------------------------. Cleaning source trees to eliminate some "".."" include directories; (files move but includes stay the same); - SofaExporter; - SofaGuiCommon; - SofaGuiQt; - SofaHeadlessRecorder; - SofaMiscCollision. ------",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397:475,plugin,plugin,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397,8,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Header only usage should work even if CGAL has been built before. I will try to force header_only, there is a CMake variable for that in CGAL.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/958#issuecomment-477076904:116,variab,variable,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958#issuecomment-477076904,1,['variab'],['variable']
Modifiability,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/537:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/537,1,['plugin'],['plugin']
Modifiability,"HeadlessRecorder is, as its name suggest, a new gui plugin who allow users to records sofa visualisation without any windows (batch only). ⚠ Linux only ⚠. https://github.com/sofa-framework/sofa/issues/537. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538,1,['plugin'],['plugin']
Modifiability,"Hello ! ; I've read your PR and I am currently compiling it on my side to test the GUI and the Modeler. . Some changes will need to be performed in order to accept your PR : ; 1. You have added some commented code that need to be removed. ; 2. You have expended the namespaces of some files, which is not in accordance with our standard, it is certainly your IDE. But could you please revert those changes ? ; 3. You have set default value to attributes directly in the class declaration, this should be done only in the constructor. ; 4. You have made some breaking changes: for instance, you removed the call to the superinit of ConfigurationSetting. Do you have any justification for that ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2097577135:631,Config,ConfigurationSetting,631,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2097577135,1,['Config'],['ConfigurationSetting']
Modifiability,"Hello @Camille-K . Thanks for the PR:; several comments to be conformant with sofa coding standards:; - use #pragma once everywhere; - use c++11 compact namespaces eg; ```cpp; namespace sofa::core::objectmodel {}; ```; - about namespace, the current idea in sofa is that each plugin's namespace should have the name of the plugin. ; Eg:; ```cpp; namespace sofa::plugin::beamplastic::component ; {; class BeamPlasticForceField {};; class StiffnessContainer {};; class PoissonContainer {};; }; ```; - rename basic_example in just example; - there shouldn't have no definition(code) in the .h, only declaration. ; - shouldn't PlasticConstitutiveLaw::getXXXX be pure virtual ? ; - the SOFA_TARGET is not defined in the init.h; - remove or use StiffnessContainer and PoissonContainer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358:276,plugin,plugin,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741664358,3,['plugin'],['plugin']
Modifiability,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:735,plugin,plugin,735,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716,1,['plugin'],['plugin']
Modifiability,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:510,refactor,refactoring,510,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690,3,"['plugin', 'refactor']","['plugins', 'refactoring']"
Modifiability,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:314,variab,variable,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951,1,['variab'],['variable']
Modifiability,"Hello @damienmarchal . I tried to execute tests manually using python. And I got import errors like:; _Traceback (most recent call last):; File ""test_mass.py"", line 8, in <module>; from SofaTest.Macro import *; ImportError: No module named SofaTest.Macro_; or; _Traceback (most recent call last):; File ""test_MeshLoader.py"", line 1, in <module>; import SofaPython.MeshLoader; ImportError: No module named SofaPython.MeshLoader_. It seems I should attach some additional modules (plugins), but I don't know what exactly I should do.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331:479,plugin,plugins,479,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329773331,1,['plugin'],['plugins']
Modifiability,"Hello @epernod,. For the future: ; Shouldn't we move the SpatialGridContainer into SofaVolumetricData ? In addition there is in SofaEulerianFluid some dedicated data structure for storing the quantities. ; Merging al that could be intereting. . Shouldn't we merge everything into a single SofaFluids plugins ? . EDIT: And the MarchingCube code is also duplicated in several places; EDIT2: And the FastMarching algorithm either :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537466462:300,plugin,plugins,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1165#issuecomment-537466462,1,['plugin'],['plugins']
Modifiability,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:286,refactor,refactoring,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717,1,['refactor'],['refactoring']
Modifiability,"Hello @hugtalbot,. Thanks for the PR which fix old code. But I think this is not the way to fix that as you rely on #ifdef #endif which is almost as deprecated as the code to fix. ; I suggest you to:; - remove all #ifdef #endif ; - replace gl code with the use of the drawTools in draw(); - you can still use real gl functions but only if you are in drawVisual() function (the objec's function is to render something). If this is the case the better is to move these object in a rendering specific plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-692275848:498,plugin,plugin,498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1478#issuecomment-692275848,1,['plugin'],['plugin']
Modifiability,"Hello @marques-bruno . My assumption is that, initially, Base was supposed to be more the Base class for ""everything"" and not only for scenegraph entries. This is why the initial design was that there is no ""path"" concept at this level. . My current approach to handle this kind of scenario was to implement an easing function like that:; ```cpp; std::string sofa::helper::objectmodel::getPathName(Base* o); {; BaseNode *node = dynamic_cast<BaseNode>(o);; if(node); return node->getPathName();; BaseObject *object = dynamic_cast<BaseNode>(o);; if(object); return object->getPathName();; ...; }; ```; To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's. ; But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450:792,refactor,refactoring,792,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678117450,1,['refactor'],['refactoring']
Modifiability,"Hello @rodriguesvinay ,. It seems it comes from the fact that Qt could not connect to the display (`Warning [Qt] could not connect to display`).; And xcb is linked to X11, so I think your docker configuration cannot connect to your X server (if existing).; Whats your system you are trying to launch the docker on ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315400680:195,config,configuration,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315400680,1,['config'],['configuration']
Modifiability,"Hello @sofa-framework/reviewers . Yes, we are taking SOFA-NG project up again :tada: ; Thanks to @fredroy we now have at least 1 engineer working on this project every day :+1:; This issue is meant to be the main follow-up of the project, complementary to #543 (still a good read). ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the modules we want; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users; - cleaning the applications/plugins repository. ## Tasks. Here are the main steps of the project.; Tasks NG1 and NG2 can be done in parallel if we work ""bottom->top"" in NG1 and ""top->bottom"" in NG2.; Task NG3 can also be started in parallel. We need to iterate on the architecture proposal to refine it as much as possible before steps NG1 and NG2 are over.; Task NG4 cleaning the applications/plugins repository in order to better handle code lifecycle. ### NG1: Simplify headers dependency graph by removing un-needed includes. 1. SofaKernel; - clean/rewrite/reorganize SofaHelper and SofaDefaulttype #1521 ; - remove completely useless files. <img src=""https://user-images.githubusercontent.com/11028016/106575747-b3910180-653c-11eb-8f43-6ec65390ce2f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106575725-ae33b700-653c-11eb-89e3-4bdeae912a94.png"" width=""350"" >. 2. Other modules (SofaGeneral, etc); - clean deps (useless includes, use lower level objects, etc), linked with the following NG2 actually. SOFA modules dependency (library link) graph: https://www.sofa-framework.org/graph/. *clang tools?*; *include-what-you-need?*. ### NG2: Pluginize all SOFA modules; Pluginizing a module = making it a [CMake Package](https://cmake.org/cmake/help/latest/manual/cmake-pac",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527:334,refactor,refactorize,334,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527,3,"['plugin', 'refactor']","['plugins', 'refactorize']"
Modifiability,"Hello @valeryozenne , did you fix your problem yet ?. ```; /home/vozenne/NVIDIA_CUDA-11.2_Samples/common/inc/GL/glew.h:12318:51: note: '__glewVertexAttribIPointer' declared here; GLEW_FUN_EXPORT PFNGLVERTEXATTRIBIPOINTERPROC __glewVertexAttribIPointer;; ```. Seems like your config is using glew.h from the samples of CUDA, which is maybe not appropriate/standard. Would it be possible to switch with the one from your distrib (provided by libglew-dev) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-797386120:275,config,config,275,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-797386120,1,['config'],['config']
Modifiability,"Hello Bruno,. Thanks for the work done, I fully agree that this is needed. . I don't understand the need for MODULE_SOFASPARSESOLVER. This is a module/plugin so is the classic find_package(SofaSparseSolver) then (SofaSparseSolver_FOUND) not enough ?; It should be the same with SofaPython. Its availability should be tested with find_package(SofaPython). . Now about the other defines that are not related to module or plugin, it is of course important to export them properly in the SofaFramework package.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812:151,plugin,plugin,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927#issuecomment-462713812,2,['plugin'],['plugin']
Modifiability,"Hello Erik,. As said in the PR description. This PR is converting the code into a properly package module/plugin. ; The move of the files is to enforce package encapsulation. Currently in Sofa a module/plugin that can be search through the find_package() CMake macro. A lot of ; modules are exporting ""{CMAKE_CURRENT_DIRECTORY}../"" when they are imported. ; Example:; SofaExporter ; SofaPython. If a third module SofaX is just doing find_package(SofaExporter) it is possible to write; ```#include <SofaExporter/aaa.h>```; which is expected....but also ; ```#include <SofaPython/bbb.h>```; This work because of the ../ in SofaExporter allows the SofaX to include SofaPython which is bad as this breaks package encapsulation. . The solution to fix that is to have the files to include in a subdirectory of the module/plugin. ; So in our case SofaExporter is exporing its include path as ""{CMAKE_CURRENT_DIRECTORY}/src/""; If done that we... the SofaX module can still do; ```#include <SofaExporter/aaa.h>```; But the ```#include <SofaPython/bbb.h>``` will fails.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450:106,plugin,plugin,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460080450,3,['plugin'],['plugin']
Modifiability,"Hello Erik,. I don't know there is no so much places where I consider the tests well written :); I like the following:; - vector_test.cpp and Utils_test.cpp are interesting because they use the INSTANTIATE feature of gtest; - SimpleApi_test.cpp is interesting especially the ""SimpleApi_test::testParamString"" as it use the c++ api equivalent to the python one to create dynamic scenes. ; - BaseContext_test is also interesting because it inherit the test from BaseSimulationData",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740:438,inherit,inherit,438,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-400579740,1,['inherit'],['inherit']
Modifiability,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:681,inherit,inheriting,681,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552,5,"['coupling', 'inherit', 'plugin']","['coupling', 'inheriting', 'plugin', 'plugins']"
Modifiability,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:276,inherit,inheriting,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814,4,"['coupling', 'inherit']","['coupling', 'inherit', 'inheriting']"
Modifiability,"Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418:36,coupling,coupling,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418,1,['coupling'],['coupling']
Modifiability,"Hello Guillaume,. As you are in this kind of things...the solution to handle scenes that rely on plugins and that should be started only if the required plugin is there should be to generate the .test-scene file with the adequate ignore command from CMake. I can give it a try or, as you are fluent in Cmake you can do it :).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780:97,plugin,plugins,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575#issuecomment-360443780,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:170,plugin,pluginizing,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963,2,['plugin'],"['pluginization', 'pluginizing']"
Modifiability,"Hello Hugo, . GG for this PR. ; As you announced it, this PR is severaly breaking...either at API level as well as in the user interface (as it breaks users scenes). You provide a script to update scene but it is only covering .scn (not .pyscn or .psl) so to me we need other ways to warns user how to manually update their scene. In the past we were overriding the 'parse' method for each object that have data field's name change and found the solution very nice as it 1) warn user to update their scene, 2) provide a minimal compatibility layer if they don't. . Example of what we did in OglLabel: ; ```cpp; void OglLabel::parse(BaseObjectDescription *arg); {; // BACKWARD COMPATIBILITY April 2017; const char* value = arg->getAttribute(""color"") ;; if(value==nullptr || strcmp(value, ""contrast"")){; VisualModel::parse(arg);; return ;; }. arg->setAttribute(""selectContrastingColor"", ""true"");; arg->removeAttribute(""color"") ;. VisualModel::parse(arg);. /// A send the message after the parsing of the base class so that the ""name"" of the component; /// is correctly reported in the message.; msg_deprecated() << ""Attribute color='contrast' is deprecated since Sofa 17.06. "" << msgendl; << ""Using deprecated attributes may result in lower performance or un-expected behaviors"" << msgendl; << ""To remove this message you need to update your scene by replacing color='contrast' with ""; "" selectConstrastingColor='true'"" ;; }; ```. Now about the API breaks....I will try your branch on top of our plugins to see if it compile or not.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041:1494,plugin,plugins,1494,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199041,1,['plugin'],['plugins']
Modifiability,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:134,inherit,inheriting,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,1,['inherit'],['inheriting']
Modifiability,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:1304,refactor,refactoring,1304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261,1,['refactor'],['refactoring']
Modifiability,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:677,variab,variable,677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333,2,['variab'],"['variable', 'variables']"
Modifiability,"Hello all,. This PR somewhat simplifies the creation and handling of `PythonScriptControllers` from python scenes. Here's the TL;DR version:. ```python; import Sofa ; class Script(Sofa.PythonScriptController): pass. def createScene(node):; # now you can do; script = Script(node, 'bar', egg = 'spam'). # the old behavior still works:; old = node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```. Now for the details:. ## Existing approach; The current approach is to use ; ```python; node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```; which has several drawbacks:; - The returned object does not point to the control object, but to the component wrapper. This makes it complicated to pass data around at scene creation (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283:824,variab,variables,824,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283,1,['variab'],['variables']
Modifiability,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417:59,plugin,plugins,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417,6,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hello developers of the Sofa framework, I found a tearing example that I need on this forum, but it is based on Sofa v21.06. Could you advise me on how to rewrite it for Sofa v23.06? Is there an API comparison chart or something similar that could assist me? Thank you so much for assisting me. https://github.com/alireza-montazeri/SofaTearing",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461:155,rewrite,rewrite,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461,1,['rewrite'],['rewrite']
Modifiability,"Hello everyone, . i'm new to SOFA. I built succesfully SOFA from source on windows 11. Using cmake-gui, i selected plugin_sofapython3 to be added. the configuration and compilation went good, without any errors, but when i check the plugins list sofapython3 is not there and, after running runSofa, i cannot open a python scene in sofa. . Does someone have any ideas why this happens?. thank you very much!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252:151,config,configuration,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252,2,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,"Hello everyone,. I'm still not sure I fully understand the problem, but I'll describe it and PR a solution for discussion. When SofaCUDA is required as a dependency in an in-tree build, the CMake configure step is unable to locate `SofaCUDANvccFlags.cmake`. To reproduce the issue you may choose a dummy plugin (eg, [MyAwesomeComponents](https://github.com/sofa-framework/MyAwesomeComponents)), add to `CMakeLists.txt` and `*Config.cmake.in`:; ```; find_package(SofaCUDA REQUIRED); ```; And compile it in-tree.; I haven't tested how this goes in out-of-tree compilation. A really simple fix (PR ready) is to update the installation path SofaCUDANvccFlags.cmake to `build/lib/cmake` where it is surely found.; So in `SofaCUDA/CMakeLists.txt`:; ```; configure_file(SofaCUDANvccFlags.cmake ${CMAKE_BINARY_DIR}/lib/cmake/SofaCUDANvccFlags.cmake COPYONLY); ```. I understand though cmake config files should be placed and found on `build/cmake` and I do not know why it does not happen. Every insight will be much appreciated. Pedro",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2021:196,config,configure,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2021,4,"['Config', 'config', 'plugin']","['Config', 'config', 'configure', 'plugin']"
Modifiability,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:174,inherit,inheritance,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236,5,['inherit'],"['inheritance', 'inherited']"
Modifiability,"Hello! ; Thanks for reporting the issue; I've not seen such error during my SOFA compilations and I'm not sure it is CUDA related...; I'll keep an eye out when configuring a new PC for an intern on Monday 💻 . @valeryozenne, I'd like to ask just to be sure.; Did you install the libraries needed for SOFA Core (as shown [here](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)):; ```; sudo apt install libpng-dev libjpeg-dev libtiff-dev libglew-dev zlib1g-dev; ```; There might be something off with`libglew-dev` in special since CMake is looking for it in a CUDA samples folder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561:160,config,configuring,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786798561,1,['config'],['configuring']
Modifiability,"Hello, . On that PR I recommand that some voluntary people, not involved in the refactoring, to add some additionals tests to see if their understanding match what is implementation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181:80,refactor,refactoring,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718#issuecomment-411334181,1,['refactor'],['refactoring']
Modifiability,"Hello, ; I'am having troubles compiling the SofaCUDA plugin; -Ubuntu 22.04; -SOFA 22.12; -gcc 11; -nvcc version: ; ```; nvcc: NVIDIA (R) Cuda compiler driver; Copyright (c) 2005-2023 NVIDIA Corporation; Built on Fri_Jan__6_16:45:21_PST_2023; Cuda compilation tools, release 12.0, V12.0.140; Build cuda_12.0.r12.0/compiler.32267302_0; ```. ; I get this error:; ` error: identifier ""umul24"" is undefined`; from:; `.../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaContactMapper.cu(88)`. I tried to solve replacing this line:; `map[curTestEntry.newIndex + threadIdx.x] = umul24(curTestEntry.elem1,nbPointsPerElem) + c.p1;`; with this line:; `map[curTestEntry.newIndex + threadIdx.x] = curTestEntry.elem1*nbPointsPerElem + c.p1;`. but I get even more errors now, so I thought the plugin was written for a specific cuda version. Is that correct? Should I change my cuda toolkit version together with the gcc version?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4579:53,plugin,plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4579,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hello, ; You are totally right ! ; I think that I made the same mistake (not making a difference between finding a plugin & having it activated) in several other place...SofaOpenCL ?)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/523#issuecomment-346565350:115,plugin,plugin,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523#issuecomment-346565350,1,['plugin'],['plugin']
Modifiability,"Hello, After following the tutorial compilation successfully, when I run ./runSofa, I get an error：; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory.; When I modify the force dimension lib file libdhd.3.14.0 to libdhd.so.3, it runs ./runSofa.; I tried to add this plugin to SOFAv20.12, I tried force dimension omega.6 and sigma.7 respectively, but when starting the scene, the device only moved slightly at the beginning of the animation, no matter how I manipulated it afterwards , cannot use omega.6/sigma.7 devices.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497:110,Plugin,PluginManager,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497,3,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin']"
Modifiability,"Hello, After following the tutorial compilation successfully, when I run ./runSofa, I get an error：; `[ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file or directory`.; When I modify the force dimension lib file libdhd.3.14.0 to libdhd.so.3, it runs ./runSofa.; I tried to add this plugin to SOFAv20.12, I tried force dimension omega.6 and sigma.7 respectively, but when starting the scene, the device only moved slightly at the beginning of the animation, no matter how I manipulated it afterwards , cannot use omega.6/sigma.7 devices.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3496:111,Plugin,PluginManager,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3496,3,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin']"
Modifiability,"Hello, Hugo,. CMakeLists are really not my up of tea...; The faced was that SOFA_EXTERNAL_DIRECTORY is internally using add_subdirectory. While the plugins in applications/pluins are using sofa_add_plugin. This results in different behavior. Eg SOFA_EXTERNAL_DIRECTORY/add_subdirectory does not generate a build option named ""PLUGIN_XXXXX"" to activate/deactivate the plugin which is inconsistent with the other plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074:148,plugin,plugins,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347549074,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hello, I copied the 3 instruments on the Beam Adapter plug-in_ collis. The scn xml format is converted to the python format, and then it can be opened normally through SOFA, but it is stuck when you click animate. What is the reason?; import sys; import Sofa. def createScene(rootNode):; rootNode.addObject('RequiredPlugin',; pluginName='BeamAdapter SofaMeshCollision SofaBoundaryCondition SofaConstraint SofaMiscCollision SofaDeformable SofaGeneralLinearSolver SofaImplicitOdeSolver SofaLoader SofaOpenglVisual SofaTopologyMapping'); rootNode.addObject('VisualStyle', displayFlags='showVisualModels showBehaviorModels showCollisionModels hideMappings hideForceFields'). rootNode.addObject('DefaultVisualManagerLoop'); rootNode.addObject('FreeMotionAnimationLoop'). rootNode.addObject('LCPConstraintSolver',mu='0.1',tolerance='1e-10',maxIt='1000',build_lcp='false'); rootNode.addObject('DefaultPipeline', draw='0', depth='6', verbose='1'); rootNode.addObject('BruteForceBroadPhase'); rootNode.addObject('BVHNarrowPhase'); rootNode.addObject('LocalMinDistance',name='localmindistance',alarmDistance='2',contactDistance='1',angleCone='0.8',coneFactor='0.8'); rootNode.addObject('DefaultContactManager',name='Response',response='FrictionContact'); rootNode.addObject('DefaultCollisionGroupManager',name='Group'). topoLines_cath = rootNode.addChild('topoLines_cath'); topoLines_cath.addObject('WireRestShape',name='catheterRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=600,spireDiameter=4000.0,spireHeight=0.0,densityOfBeams=[40,10],numEdges=200, numEdgesCollis=[40,20],youngModulus=10000 ,youngModulusExtremity=10000); topoLines_cath.addObject('EdgeSetTopologyContainer',name='meshLinesCath'); topoLines_cath.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_cath.addObject('MechanicalObject',template='Rigid3d',name='dofTopo1'). topoLines_guide = rootNode.addChild('topoL",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:46,Adapt,Adapter,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,2,"['Adapt', 'plugin']","['Adapter', 'pluginName']"
Modifiability,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:676,refactor,refactoring,676,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683,1,['refactor'],['refactoring']
Modifiability,"Hello,. I have been trying to run the CGAL Plugin with sofa, my aim is to create a tetrahedral mesh from a surface mesh, and then experiment that for Haptic Rendering within Sofa. I followed the page here: https://www.sofa-framework.org/community/doc/plugins/usual-plugins/cgal-library/. Although it does not tell what version of CGAL to use, or boost as well. Finally, I have been successful to build with the following versions of dependencies.; **Environment:**; Visual Studio 2017 vc 14.1; Sofa Master: commit 9d9100aa1b0acb9363c8ec7c9b5e4b470821bfc1; Boost: 1.71.0; CGAL: CGAL-4.13.2; QT: 5.12.0. ```; INFO] [runSofa] PluginRepository paths = C:/open_prj/sofa/build/mmaster/plugins;C:/open_prj/sofa/build/mmaster/bin/Release; [INFO] [runSofa] DataRepository paths = C:/open_prj/sofa/src/share;C:/open_prj/sofa/src/examples; [INFO] [runSofa] GuiDataRepository paths = C:/open_prj/sofa/src/applications/projects/runSofa/resources;C:/open_prj/sofa/src/applications/sofa/gui/qt/resources; [INFO] [runSofa] Loading automatically plugin list in C:\open_prj\sofa\build\mmaster\applications\projects\runSofa/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:43,Plugin,Plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,6,"['Plugin', 'plugin']","['Plugin', 'PluginRepository', 'plugin', 'plugins']"
Modifiability,"Hello,. I saw that several PRs are in work that move potentially lots of source files into plugins (#396, #407, #408, #477).; These types of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:; - all existing branches / PRs are very likely to cause conflict. Yes git does its best to try to match files in different paths but this is not reliable at all. Example issues: it won't move files that are created in the same directories in other branches/PRs, you have to be expert in all the rename match heuristics within git in order to be able to use merge with 10s of commits with mismatching file hierarchies (and there is none that I know of that will work well enough to be always used); - the history of all affected files will be polluted by this move. Example: it is tricky to know the history of all the SofaKernel files before May 2016 [(example)](https://github.com/sofa-framework/sofa/commits/master/SofaKernel/framework/sofa/core/BaseState.h) (can someone remind me what we gained by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we ha",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482:91,plugin,plugins,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482,1,['plugin'],['plugins']
Modifiability,"Hello,. I think it would be great (if not mandatory) to have in this release of Sofa new features and not only bug fixes. . To make that possible I suggest to use the SOFA_WITH_EXPERIMENTAL_FEATURES options to conditionally activate plugins or component that are in their way for integration but are not considered as stable enough or that may be subject to API change in 18.06. Those should print a warning message in their init function if used. . If agreed on the principle of allowing EXPERIMENTAL new components in 17.12 I have the following features/component to propose (all are located in plugins):; - In plugin/PSL:; - the PSL scene file format; - In plugin/SofaImplicitField: ; - CustomField (to implement implicit field in python and/or cython); - SurfaceMeshFromImplicitField (to generate a surface mesh from an implicit field using a marching cube); - ImplicitFieldViewer (to visualize the implicit surface); - python/difigeom (a complete library to make complex procedural geometry using ; distance field and python+cython) ; - In plugin/CGAL: ; - SurfaceMeshFromImplicitField (generate a surface mesh from an implicit field using CGAL); - VolumeMeshFromImplicitField (generates a tetrahedral mesh from implicit field using CGAL) . And you ? Do you have things that you would like to have integrated ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517:233,plugin,plugins,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hello,. I tried that already and unfortunately, I did not see any significant difference (or I missed something...), see below:; From Sofa:; ```; ['', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaTest/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Compliant/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/Flexible/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/image/python', ; '/Users/oali/Documents/Work/Research/Devlp/sofa/src/applications/plugins/SofaPython/python', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python27.zip', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-darwin', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/plat-mac/lib-scriptpackages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-tk', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-old', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/lib-dynload', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.Core-1.3.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/OpenAlea.SConsX-2.1.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/cycler-0.10.0-py2.7.egg', ; '/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/python2.7/site-packages/openalea",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178:218,plugin,plugins,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347201178,6,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"Hello,. I try to use SofaPython3 with sofa (master branch) on windows. I use MSVC compiler. I did the following :. 1. Installed pybind11 via pip3.9.; 2. set CMake variable `pybind11_DIR` = `C:/Program Files/Python39/Lib/site-packages/pybind11/share/cmake/pybind11`.; 3. set CMake variable`SOFA_FETCH_PYTHON3` to true.; 4. set CMake variables `PLUGIN_SOFAPYTHON3`, `PLUGIN_SOFAPYTHON3_BINDINGS`, `PLUGIN_SOFAPYTHON3_DOCS` and `PLUGIN_SOFAPYTHON3_EXAMPLES` to true.; 4. 'Configure' then 'Generate' using CMake's GUI.; 5. Build with MSVC -> success (release mode). I encounter a segfault error when loading SofaPython3.dll via the Sofa GUI : Edit>Plugin Manager...>Add...>SofaPython3.dll.; --> **exception Microsoft C++ : pybind11::error_already_set**. Do you have any idea what is causing this error ?. Thanks",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1672:163,variab,variable,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672,5,"['Config', 'Plugin', 'variab']","['Configure', 'Plugin', 'variable', 'variables']"
Modifiability,"Hello,. I would like to discuss a design to represent mesh loaded from a file that contains several child meshes. For example FBX or COLLADA can now be loaded in Sofa using the SofaAssimp plugin but for the moment all child meshes are merged in one big mesh.; We loose the information of Bones etc.. . The API from sofa::core::loader::MeshLoader doesn't support several mesh for the moment. . ```; // Point coordinates in 3D in double.; Data< helper::vector<sofa::defaulttype::Vec<3,SReal> > > d_positions; ///< Vertices of the mesh loaded. //Tab of 1D elements; Data< helper::vector< Polyline > > d_polylines; ///< Polylines of the mesh loaded. // Tab of 2D elements composition; Data< helper::vector< Edge > > d_edges; ///< Edges of the mesh loaded; Data< helper::vector< Triangle > > d_triangles; ///< Triangles of the mesh loaded; Data< helper::vector< Quad > > d_quads; ///< Quads of the mesh loaded. ```; Any suggestion?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/602:188,plugin,plugin,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602,1,['plugin'],['plugin']
Modifiability,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:475,variab,variable,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901,1,['variab'],['variable']
Modifiability,"Hello,. The issue I have with this approach is that this make it very invasive, as Sofa is adding operators in std namespace for all types, even not its own. So within an application that could also does the same, we would get conflicts / redefinition / ambiguity compiler errors, or worse silently override the application's own operators that could have relied on a different string syntax. I agree that the approach of subclassing the standard containers just to be able to package them within a Data is wrong. In our current branch we are refactoring the approach, relying more on `DataTypeInfo` to generically access features like string parsing, without having to put them in the type itself. But this is work in progress so it is not ready to be pushed yet. So in the meantime this change could be pushed, but with the understanding that it may be a temporary solution only. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525:543,refactor,refactoring,543,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-271622525,1,['refactor'],['refactoring']
Modifiability,"Helper and SofaDefaulttype #1521 ; - remove completely useless files. <img src=""https://user-images.githubusercontent.com/11028016/106575747-b3910180-653c-11eb-8f43-6ec65390ce2f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106575725-ae33b700-653c-11eb-89e3-4bdeae912a94.png"" width=""350"" >. 2. Other modules (SofaGeneral, etc); - clean deps (useless includes, use lower level objects, etc), linked with the following NG2 actually. SOFA modules dependency (library link) graph: https://www.sofa-framework.org/graph/. *clang tools?*; *include-what-you-need?*. ### NG2: Pluginize all SOFA modules; Pluginizing a module = making it a [CMake Package](https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html) that can be enabled/disabled in SOFA CMake options.; Pluginizing **does not mean** moving files (it did in the past). The module stays in place, only the CMake files change. The Components within the module stay in place too. Done module pluginizations: https://github.com/sofa-framework/sofa/issues?q=is%3Amerged+label%3A%22NG2%3A+pluginization%22. Quick schematics on the current state and what will be achieved:. <img src=""https://www.sofa-framework.org/wp-content/uploads/2020/10/stc9_overview_v20.06.png"" width=""40%"" height=""auto"" /> &nbsp; <img src=""https://www.sofa-framework.org/wp-content/uploads/2020/10/stc9_modularization_plan.png"" width=""40%"" height=""auto"" />. [SOFA Modules' plan](https://drive.google.com/file/d/14H2YRu0z8usiqTpGQuxcnel1uf1Hna1I/view?usp=sharing). ### NG3: Reorganize SOFA modules towards new architecture; ~~Latest architecture proposal: https://annuel2.framapad.org/p/sofang-v7~~; Latest architecture proposal: https://annuel2.framapad.org/p/sofang-v8. *Continue using recipes with https://github.com/guparan/sofa2ng ?*. ### NG4: Cleaning the applications/plugins repository; Following the [planning](https://docs.google.com/spreadsheets/d/1FVQN4rghI1SSYuhT1Y3L5fUZdL7XXPETgQ1GQ28KlD8/edit#gid=0) we built at our ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527:2253,plugin,pluginizations,2253,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527,1,['plugin'],['pluginizations']
Modifiability,"Here are the latest changes done directly in v20.06 branch to finalize the release. Main changes:; - [CMake] ADD SOFA_ENABLE_SOFT_DEPS_TO_SOFAPYTHON option (default is ON); When OFF, SofaPython will be added later during CMake generate so that all soft dependencies to SofaPython will be unsatisfied.; This is useful to generate binaries with at least SofaPython dependencies as possible.; - [CMake] FIX postinstall-fixup scripts call order; postinstall-fixup scripts are now in tools/postinstall-fixup and are included after all other parts of SOFA (even external directories); - [SofaMacros] FIX install dir for plugins with no INCLUDE_SOURCE_DIR; There was an issue with installed include directories introduced by #1397 ; - Backport #1428 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1432:614,plugin,plugins,614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1432,1,['plugin'],['plugins']
Modifiability,"Here are the screenshots:. Before:; ![Screenshot 2021-11-09 092420](https://user-images.githubusercontent.com/10572752/140892200-629ad881-ecda-4566-8e6f-565194cec7cb.png). After:; ![Screenshot 2021-11-09 094012](https://user-images.githubusercontent.com/10572752/140892246-c1d4909b-d5df-44b5-9dbe-5ec36da16549.png). As you can see, the graph is more visible, but the application window is no longer centered on the screen. I fixed it in another PR. Notes:; - The viewer size does not change with this PR; - The window size (changed from 800x600 to 1280x900 in this PR) has no effect because it is overwritten when setting the viewer resolution. With this PR, it remains unchanged (still 800x600), so no effect on the final window size.; - The minimum window height (changed from 481 to 700) seems to have an effect when the window is dragged from one monitor to the other and back (at least on Windows). During this movement, the window is resized (probably to adapt to the resolution of the other monitor). If the window is dragged from monitor 1 to monitor 2, and then from monitor 2 to monitor 1, the window size is different from the initial window size. This does not happen when the minimum window height is 481. Since it does not change the initial window size, I recommend to keep the value to 481.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-964013103:961,adapt,adapt,961,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-964013103,1,['adapt'],['adapt']
Modifiability,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:954,extend,extended,954,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360,1,['extend'],['extended']
Modifiability,"Here is a new plugin which implements a beam force field component with plastic behaviour (to model nonlinear and permanent deformation). The general structure is inspired from the BeamFEMForceField component. At the moment, I kept the new component in a dedicated plugin (BeamPlastic), but I guess it could be moved to where the BeamFEMFF component already is (providing the PR is mergeable). Two pull-requested files (in applications/plugins/BeamPlastic/quadrature) were implemented by someone else and published under the open source Boost Software License 1.0 (BSL-1.0). I mentioned this in both files headers, but I don't know if the BSL-1.0 is compatible with the SOFA license. If not, these files can be removed and I can re-implement the corresponding methods (for reduced gaussian integration). The code compiles on my side, and the two provided example files work fine, but there are quiet a few things that could/should be improved (including unit tests). I have already noted some of them, but as this is my first PR I'm not familiar with how or where these should be discussed.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618:14,plugin,plugin,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534:10,plugin,plugin,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Here is a quick summary of NG project evolution. A proof of concept for a minimal version of SOFA has been pushed: https://github.com/sofa-framework/sofa-minimal-poc. Multiple iterations were made on NG architecture: ; https://annuel2.framapad.org/p/sofang-v0; https://annuel2.framapad.org/p/sofang-v1; https://annuel2.framapad.org/p/sofang-v2; https://annuel2.framapad.org/p/sofang-v3. We converged towards a namespace oriented architecture splitted in two main parts: modules and plugins.; At the end, we want modules and plugins to be strictly identical in the way they are built. Same CMake behavior, same dependency handling. ; The only difference that make us separate the two is the way we see their proximity with SOFA core in a long term future.; modules = things that should stay in SOFA repository; plugins = things that should move to an external repository. Most of the work done has been offline testing and discussions on [Gitter](https://gitter.im/sofa-framework/sofa-ng). Different refactors and different CMake behaviors were tested, trying very hard not to break SOFA (or at least not too much). @damienmarchal wrote a tool to automatize refactoring (moved to a separated repo): https://github.com/guparan/sofa2ng; It is still in early state but will be the base of future works. Despite all this offline testing phase, the question of a clean and generic CMakeLists template for any module/plugin remains. I guess we will converge on this by actually doing the refactoring. Finally, I just opened a primary pull-request: https://github.com/sofa-framework/sofa/pull/620. Next steps will mainly focus on cleaning SOFA codebase to make further refactoring as easy as possible. See [previous comment](https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690) for specific tasks.; In parallel, Damien's tool shall be tested and improved to move on about the CMake questions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598:482,plugin,plugins,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-377283598,8,"['plugin', 'refactor']","['plugin', 'plugins', 'refactoring', 'refactors']"
Modifiability,Here is an update of PluginExample to clarify how to create a deploy-and-share friendly plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1053:21,Plugin,PluginExample,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1053,2,"['Plugin', 'plugin']","['PluginExample', 'plugin']"
Modifiability,Here is another contribution to handle in an organized and smooth way sofa's components lifetime and deprecation. The idea is to have three sets of components in the CMakeList.txt. ; - the first sets contains more or less the SofaNG components.; - the second sets contains all existing sofa components. ; - the third sets contains deprecated components. . Selecting which set to compile is controlled using a CMakeList argument in an inclusive way (AllComponent include SofaNG while deprecated includes allComponent) . When a component is in the deprecated set we should add the corresponding line to the ; SceneChecker to warn users in a friendly way. This approach is complementary to the pluginization of module which allow user to control the kinds of feature they need and don't compile the others. . What do you think about it ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332151757:691,plugin,pluginization,691,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332151757,1,['plugin'],['pluginization']
Modifiability,"Here is our way of organizing a plugin at defrost:; ```; MyPlugin/; components/; forcefield/; MyForceFieldCompoent.cpp; MyForceFieldCompoent.h; mapping/; visual/; objects/; MyClassThatIsNotAComponent.cpp; MyClassThatIsNotAComponent.h; deprecated/; CMakeList.txt; ```. And we mimick that into the namespaces; ```cpp; namespace sofa::myplugin::components::forcefield::MyForceFieldComponent; ```. Then we ""export"" that into sofa namespace to be consistent with the rest of sofa. ; ```cpp; namespace sofa; {; namespace components; {; using namespace sofa::myplugin::components; }; }; ```. I think this is very close to what Stephane is proposing (it is unclear to me what ""un-supported"" is)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334413515:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334413515,1,['plugin'],['plugin']
Modifiability,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541:28,plugin,plugin,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Here is the naive tentative I did:; ```; $ ./bin/SofaHelper_test.exe --gtest_filter=PluginManager_test.loadTestPluginByPath; Note: Google Test filter = PluginManager_test.loadTestPluginByPath; [==========] Running 1 test from 1 test case.; [----------] Global test environment set-up.; [----------] 1 test from PluginManager_test; [ RUN ] PluginManager_test.loadTestPluginByPath; 0; [INFO] [PluginManager] Loaded plugin: J:/0/build/bin\TestPlugin.dll; 1; [ERROR] [FileSystem::exists()] J:/0/build/bin/J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll.dll: error 123: The filename, directory name, or volume label syntax is incorrect. [ERROR] [PluginManager] File not found: J:/0/build/bin\RandomNameForAPluginButHopeItDoesNotExist.dll; 1; toDelete.push_back(TestPlugin); pm.getPluginMap().size() = 1; unloadPlugin(J:/0/build/bin\TestPlugin.dll); PluginManager::unloadPlugin; DynamicLibrary::unload; DONE DynamicLibrary::unload; DONE PluginManager::unloadPlugin; unloaded J:/0/build/bin\TestPlugin.dll; pm.getPluginMap().size() = 0; [ OK ] PluginManager_test.loadTestPluginByPath (33 ms); [----------] 1 test from PluginManager_test (33 ms total). [----------] Global test environment tear-down; [==========] 1 test from 1 test case ran. (33 ms total); [ PASSED ] 1 test.; Segmentation fault; ```; As you can see, unloading went well. Something else is triggering the Segfault...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435:391,Plugin,PluginManager,391,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604356435,5,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Here it is @fspadoni; and I just checked the configure script of the CI, this plugin is compiled.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612:45,config,configure,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/701#issuecomment-399379612,2,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,"Here we go as promised:. This PR stores within a SOFA Object (inheriting Base) links to the owners that given object in a vector, that can be accessed by calling getDDGLinkOwners(). Currently, pointers are stored within a vector of const Base*, but we could imagine using a map, that would store the link owners according to a CATEGORY, (ForceField, Mass, MO, Topo...), or having a multimap with the component names..? I don't know, I guess it depends on the use case.; @jnbrunet @epernod that PR is specifically for you, so you probably have a better idea of how you'd like to manipulate that list. let me know what you think!. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1228:62,inherit,inheriting,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1228,1,['inherit'],['inheriting']
Modifiability,"Here you are @alxbilger :; ![image](https://github.com/sofa-framework/sofa/assets/21199245/c963c193-a3eb-4d19-8f91-998731b643aa). ```xml; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" showBoundingTree=""0"" gravity=""0 -9 0"">. <Node name=""plugins"">; <RequiredPlugin name=""Sofa.Component.AnimationLoop""/> <!-- Needed to use components [FreeMotionAnimationLoop] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Correction""/> <!-- Needed to use components [LinearSolverConstraintCorrection] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Solver""/> <!-- Needed to use components [GenericConstraintSolver] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Projective""/> <!-- Needed to use components [FixedProjectiveConstraint] -->; <RequiredPlugin name=""Sofa.Component.Engine.Select""/> <!-- Needed to use components [BoxROI] -->; <RequiredPlugin name=""Sofa.Component.LinearSolver.Direct""/> <!-- Needed to use components [SparseLDLSolver] -->; <RequiredPlugin name=""Sofa.Component.LinearSystem""/> <!-- Needed to use components [ConstantSparsityPatternSystem] -->; <RequiredPlugin name=""Sofa.Component.Mass""/> <!-- Needed to use components [MeshMatrixMass] -->; <RequiredPlugin name=""Sofa.Component.ODESolver.Backward""/> <!-- Needed to use components [EulerImplicitSolver] -->; <RequiredPlugin name=""Sofa.Component.SolidMechanics.FEM.HyperElastic""/> <!-- Needed to use components [TetrahedronHyperelasticityFEMForceField] -->; <RequiredPlugin name=""Sofa.Component.StateContainer""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Dynamic""/> <!-- Needed to use components [TetrahedronSetGeometryAlgorithms,TetrahedronSetTopologyContainer,TetrahedronSetTopologyModifier] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Grid""/> <!-- Needed to use components [RegularGridTopology] -->; <RequiredPlugin name=""Sofa.Component.Topology.Mapping""/> <!-- Needed to use components [Hexa2TetraTopologicalMa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2112008399:243,plugin,plugins,243,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706#issuecomment-2112008399,1,['plugin'],['plugins']
Modifiability,"Here you go.; It may be better to check if FFMPEG and X11 are installed before enabling the plugin.; EDIT: I'll add an `if` block to enable only on Linux, my bad.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-358017590,1,['plugin'],['plugin']
Modifiability,"Here's a bunch of fixes for the HAPI plugin:. * `config.h` was not generated --> added automatic generation to the cmake and fix the template to use cmake variable replacement. * there is some broken code in CMakeLists, not sure what was used for but it's not even a valid cmake code (broken if clause). For the moment I just commented out, I'm open to advices... * updated the code with recent member renaming in main sofa code (`indice` --> `d_indice`). * fix for `findH3D.cmake` to find the module without relying on non-default installation path (i.e. if you install H3D into a given directory, that is the root path from which `include` and `lib` can be easily found ). * fixes for `findHAPI.cmake` --> using `hapi_ROOT` to easily find the module (instead of relying on the mutual position of HAPI and H3DUtils). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1189:37,plugin,plugin,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1189,3,"['config', 'plugin', 'variab']","['config', 'plugin', 'variable']"
Modifiability,Hey @Younesssss ; Thank you for the code review but we wanted a bit more insight from your previous experience:. - can you confirm me that you implemented a similar feature during your PhD?; - in which case you were having fixed points although drifting ?; - does it make sense to add such a projectVelocity variable?. We want to know if this contribution still makes sense. Thank you @Younesssss,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1558#issuecomment-746025687:308,variab,variable,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1558#issuecomment-746025687,1,['variab'],['variable']
Modifiability,"Hey @bakpaul In the renaming data process I use the Refactor option in Clion (IDE), sometimes it does this that it even renames the data in the double quotes even though I specify that the renaming should only be for the code.sorry for that I rechecked all the code base even for the PRS that got merged I think now the code is clean",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2196476181:52,Refactor,Refactor,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2196476181,1,['Refactor'],['Refactor']
Modifiability,"Hey @damienmarchal . what is the scope of this PR? Is it part of the ""refactoring the whole class introspection system"" as you mentioned in your [1087's reply](https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891)?. anyway, I see here two topics in one PR:; - introduction of the future namespace : I understand that it is for keeping compatibility with previous codes, but that's the purpose of the dev branch to include new features, isn't?; - refactoring of the ObjectFactory : why not just updating the existing ObjectFactory ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1050726646:70,refactor,refactoring,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1050726646,2,['refactor'],['refactoring']
Modifiability,"Hey @epernod . Yeah sorry, I'll give a bit more details. The force vector (built from addForce) should be the same (or very close), either you are using a lumped mass matrix or a (full) mass matrix. This was the case before, but isn't anymore. Here a quick unittest that could help:. ```c++; using sofa::helper::system::PluginManager ;; using namespace sofa::simulation;; using namespace sofa::simpleapi;. TEST(MeshMatrixMass, addForce) {; using namespace sofa::core::objectmodel;; setSimulation(new sofa::simulation::graph::DAGSimulation());. // Create the scene; auto root = getSimulation()->createNewNode(""root"");; createObject(root, ""RequiredPlugin"", {{""pluginName"", ""SofaBoundaryCondition SofaEngine SofaTopologyMapping""}});; createObject(root, ""RegularGridTopology"", {{""name"", ""grid""}, {""min"", ""-7.5 -7.5 0""}, {""max"", ""7.5 7.5 80""}, {""n"", ""3 3 9""}});; auto mo = dynamic_cast<sofa::component::container::MechanicalObject<sofa::defaulttype::Vec3Types> *>(; createObject(root, ""MechanicalObject"", {{""name"", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:320,Plugin,PluginManager,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,2,"['Plugin', 'plugin']","['PluginManager', 'pluginName']"
Modifiability,"Hey @epernod and @damienmarchal . I fully agree on removing `canCreate`, however I do not see any better way here without refactoring all forcefields, and since this solution works without too much effort, I think we should use this as a first step, and ultimately do another refactoring for the canCreate with a better solution (which we have to find first). @epernod , to answer your question, the mechanical state found during the `canCreate` (or `create`) method exists (its constructor has been called and the pointer is valid), but hasn't been initialized (its size will be 0). These two methods follow the order in which the scene was _parsed_ (eg xml or python), and after that the init stage will follow the scene graph order. The constructor of the forcefield is called _after_ the `canCreate` by a static call to `forcefield::create`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109:122,refactor,refactoring,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705403109,2,['refactor'],['refactoring']
Modifiability,"Hey @guparan ,. Sorry for the late response, I'm having a slow week. Yeah I agree with your solution 2, if SofaValidation and SofaNonUniformFem are hard dependencies of core libraries, they becomes almost ""core"" libraries themselves and should be in ""lib"" (""bin"" on Windows). . Will this be in your big cmake refactoring branch (aka #1397)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825:309,refactor,refactoring,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395#issuecomment-635142825,1,['refactor'],['refactoring']
Modifiability,"Hey @hugtalbot,. As I remember, the communication plugin is imo ready to merge. ; It still need some polish like, code cleaning, avoid some useless copy, use some boost things ... but it´s working. . On CI, AFAIK only the core communication plugin is compiled. We don´t want to install libs for all the protocols implemented. What you need to know is, there is still pending PR (https://github.com/SofaDefrost/sofa/pull/20 with another one) for this plugin. But they are not working and I don´t have any news from the contributor (Rupesh gsoc).; This is not a big deal because the content of the PR is an addon for the plugin Qt serial protocol. Let me know if you have any question :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533:50,plugin,plugin,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-441108533,4,['plugin'],['plugin']
Modifiability,"Hey @jangirrishabh ,. You can already clone [this branch](https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable). Once compiled, you will find the file libSofaPython.so in your **sofa_build_directory**/lib folder. Simply add this folder's path to your python sys path, and finally import the lib to your python script with `from libSofaPython import Sofa`. If you are not on Linux, you will have to manually copy the library name to the same file name but with the "".so"" extension (ex: libSofaPython.dylib -> libSofaPython.so). Also, I've stop the development of this feature since @damienmarchal is working on a newer python plugin that will support this feature much better than what I've done here. You can follow the development [here](https://github.com/sofa-framework/sofa/pull/771).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876:641,plugin,plugin,641,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876,1,['plugin'],['plugin']
Modifiability,"Hey @jjcasmar . Thank you, this is indeed a good suggestion. There are probably other places where such operator overload is used and should be replaced by a free function. We should decide on where to place these free functions and maybe try to list all operator overloads usage in the rest of SOFA and its plugins. J-N",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706542777:308,plugin,plugins,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525#issuecomment-706542777,1,['plugin'],['plugins']
Modifiability,"Hey @maxime-tournier ,. You bring valuable points here. You are absolutely right, it is not that trivial, I'm starting to see it now. Here is what I observed during my tests (I'm working part time on this, it is entirely possible that I come back later to correct those statements of mine :) ). > you need to properly initialize/finalize sofa and core modules (see Main.cpp in the runSofa application). Yes. I'm usually leaning towards making most of the functions available and let the script use what it need. So if I'm writing a _runSofa_ like application in python, I should be able to init the components there, create/set the simulation, add the needed message handlers to the MessageDispatcher, and set the paths (plugin, config, sofa prefix) there. If this complicate too much the python script, than making optional python util scripts that set all of this for the user could be a clean option. But I don't think the library should do this in the user's back without transparency. > you need to handle the case where the loaded scene already has python scripts, and let the PythonEnvironment know the interpreter is being run from the outside when initializing (and maybe deal with all the sys.path / __file__ abuses down there). The PythonEnvironment will create an interpreter if there isn't one (like when launching for a binary executable), or use the one already defined. In this case, PythonEnvironment will use the interpreter that called the script (ex python runSofaPython.py). No new python interpreter nor python thread a created (I've just checked to be sure). > probably have a good fight with the GIL down the road. The current GIL usage in the plugin seems to align correctly with this feature since we ""attach"" the PythonEnvironment to an interpreter instead of initialising a new one. No new threads are created. > how should this feature integrate with existing python scenes? Should it be possible to load scenes from within python scenes?. Yes, it seems to work so far. Ho",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525:721,plugin,plugin,721,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-339630525,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:311,plugin,plugin,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204,1,['plugin'],['plugin']
Modifiability,Hey @simogasp thank you again for your contribution on the HAPI plugin! Do not hesitate to join us in Paris to present your work related to simulations at the [SOFA Week 2019](https://www.sofa-framework.org/sofa-events/sofa-week-2019/#Symposium%20Program)! Even more if you have some haptics demo!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1189#issuecomment-545341375:64,plugin,plugin,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1189#issuecomment-545341375,1,['plugin'],['plugin']
Modifiability,"Hey I hope I got this one right...:. To me the APIVersion component is used to specify the latest version of SOFA we can guarantee compatibility with. Thus when it is already present in an existing scene, the tag is set explicitely in the scene file.; When creating and saving a scene from a modeler for instance though, an APIVersion should be created, and the level should be the level of the version of SOFA the user is running. By default, an APIVersion without a version number was automatically setting the level to 17.12, which to me makes no sense, because we can't guarantee compatibility with 17.12 on a scene that doesn't have an APIVersion set.; Also, somewhere in SceneCheckAPIChange, a 20.06 was hardcoded in a variable `m_selectedApiLevel`. This PR takes the SOFA_VERSION_STR, set by CMake in <sofa/version.h>, and uses this value to replace the default level value in APIVersion, and the selectedAPILevel in SceneCheckAPIChange. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1473:725,variab,variable,725,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1473,1,['variab'],['variable']
Modifiability,"Hey guys,. Sorry I took so long to join the party, busy weeks !. To me, a force-**field** intrinsically means a discrete geometrical representation of a domain from a topology (it could even be meshless having the field discretized with point-cloud neighbourhood topologies). To me, a forcefield could even **inherits** the topology class itself! . But then you find components such as **ConstantForcefield** or **LinearForcefield**, which contradicts my previous statement :-( They are however useful when you are computing the nodal forces externally and fill in the values in sofa. Therefore, the solution of @damienmarchal seems good to me, as it does not prevent forcefields without topological fields. It will however restrict the forcefield to one topology link only (which makes sense to me...but we never know). Or you could also add an additional **MultipleTopologicalLink** class in addition to the **TopologicalLink**, or make the **TopologicalLink** handles the ""0 to many"" dependency link. Another solution could be to add this ""0 to many"" data-link directly in the ForceField base class. Forcefields could fill this data in their respective **init** stage in the case the user didn't provide any and make proper checks to validate that the topology objects contains the right type of elements needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316:309,inherit,inherits,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-490135316,1,['inherit'],['inherits']
Modifiability,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572:325,plugin,plugin,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572,3,['plugin'],['plugin']
Modifiability,"Hey guys,. apparently, 30 tests out of 32 crash with exit code 53. (And bring some bad red color to the beautiful dashboard). This code is ""The network path was not found"". Is every binary/file where it's supposed to be ?. NB : Is this config worth the trouble ? Or should it be removed as VS2015 is freely available ? (I heard something about people **needing** it but...)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/155:236,config,config,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/155,1,['config'],['config']
Modifiability,"Hey there,. Sorry for the late response. I have solved the problem. One of the forum posts (cannot find which one or even on which forum) mentioned about computer's ""time zone"" and ""language"" and ""formats"" settings being effective on using Geomagic devices. . Although they worked fine in their own demo software, and with Sofa Framework; the devices were not working with SofaPython3 plugin. I have no idea why but the problem was with the ""formats"" settings of my computer. When I change it to ""United States"" the problem was resolved.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1340581964:385,plugin,plugin,385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1340581964,1,['plugin'],['plugin']
Modifiability,"Hey!. First PR with a POC of Object links that aren't based on SingleLinks. Here, a new template class (with its base class) is introduced: DDGLink.; Just like BaseDatas, DDGLink inherits DDGNode.; A DDGLink thus benefits from the whole dirty flag propagation thingy, and implements the update() function to clean its dirty flag, and update from its inputs.; Just like Datas, a DDGLink also possesses a counter, that is incremented when the link value changes. Just like BaseLinks, and SPtrs, to retrieve the object linked with a DDGLink, you need to call the get() method. The set() method will set the link. When a link is set within a DDGLink, the componentState of the linked object is set as input to that DDGLink. It's up to you to connect your DDGLink to some datas to connect your dependency graph. Contrary to the current link implementation in SOFA, these links, can be very easily manipulated as their base class (BaseDDGLink), or as DDGNodes even. DDGLinks are parsed in Base::parseField just like BaseLinks and BaseDatas, which makes them usable with the BaseObjectDescriptions. (they really mirror the behavior of all other field types.). A very simple test case is present in this PR to show you how it's used. You can reference your links with their pathnames, just like normal datas or links, by calling the getPathName() method. There's not bi-directionality implemented in this PR, (because I didn't have time in the end...) but it's not rocket science:; - all there is to do is add a vector of Base* in Base with helper methods to add, remove retrieve the list of link owners. Then in DDGLink::set(), call the add() method of your link to register`this`. (maybe in another PR...) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scen",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226:179,inherit,inherits,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226,1,['inherit'],['inherits']
Modifiability,"Hey,. I am very new in sofa, and I am looking for a simple solution for the following :) :; I would like to simulate the cutting through of a 2-d mesh (surface) with a sharp tool.; My goal is to use this simulation to test the cutting of a soft tissue with a robot. For two reasons, I would not to use the cutting Plugin: I need it for a research project for which I do not have financial budget to buy the plugin (maybe in the future, I will). The second reason that I would like to keep the simulation very simple and operate with a low number of parameters. My question is: which examples should I take a look at? Is there anybody, how implemented such a scenario (maybe also with SofaPython3)?. Thank you very much in advance!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4071:314,Plugin,Plugin,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4071,2,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"Heyy guys,. I am doing a project targeting to simulate a needle is inserted into the eyeball and also then retinal. The target would be that in a simulation environment, the needle is controlled by haptic devices to approach the eyeballs. (This part is already finished [here](https://github.com/sofa-framework/sofa/issues/2786)) And then the needle would **penetrate the outer surface** of the eyeball and then continue approaching the retinal. Eventually, the needle is **inserted into a blood vessel** in the retina. And the eyeball and blood vessel should be deformable during the collision and insertion process. I have learned some tutorials on SOFA, the dentist-surgery simulation included. And I guess the difficult point may be the insertion process right? From one [post](https://www.sofa-framework.org/community/forum/topic/needle-insertion-into-soft-tissue/) in forum, I found the plugin [Cosserat plugin](https://github.com/SofaDefrost/plugin.Cosserat) is mentioned. But after reading its description I think it is designed to handle with deformation of needles. While in my scenario the needle does not need to be deformable. So I am a bit confused. **What could be done** to achieve such a scenario? Or in which sequence? Maybe is there any other tutorial that I could learn from?. Thanks for all your guys helping me out. Jingsong",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2806:893,plugin,plugin,893,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2806,3,['plugin'],['plugin']
Modifiability,"Hi ! . Many existing component (FixedPlaneConstraint, FixedRotationConstraint, PointConstraint...) are particular implementation of PartialFixedConstraint. We have put them in a separate plugin named; ""Specific Boundary Conditions"". To finalize this work, it could be useful to have an implementation of FixedConstraint, on which you can define a subset of direction that you want to block. It would allow to have a unique implementation for fixed constraint in general. What do you think ?. Christian. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/440:187,plugin,plugin,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/440,1,['plugin'],['plugin']
Modifiability,"Hi ; When I compiling CGALPLUGIN in VS2017,it showed some errors like these:; ```. C2988	unrecognizable template declaration/definition (compiling source file D:\sofa\src\applications\plugins\CGALPlugin\src\CGALPlugin\DecimateMesh.cpp)	CGALPlugin	C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory	18	. C2143	syntax error: missing ';' before '<' (compiling source file D:\sofa\src\applications\plugins\CGALPlugin\src\CGALPlugin\DecimateMesh.cpp)	CGALPlugin	C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.16.27023\include\xmemory	18	; ```. I don't know how to solve it.Please help me.Thanks. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1350:184,plugin,plugins,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1350,2,['plugin'],['plugins']
Modifiability,"Hi @EmDash00 ; Welcome on the SOFA GitHub and thank you for the detailed issue. It helps a lot providing a maximum of information!; A recent work in #1361 aimed at updating the OpenCL plugin, which remained inactive for some time. But it led to the duplication of an instantiation. Removing the line 71 should make it work.; If so, could you please contribute this change back?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-643992298:184,plugin,plugin,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419#issuecomment-643992298,1,['plugin'],['plugin']
Modifiability,Hi @ErwanDouaille . How are you doing? It's been some time since your last update. Any news on the Communication plugin?; @tgaugry did you use this work on Communication for your own purposes ?. Best!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462:113,plugin,plugin,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-440994462,1,['plugin'],['plugin']
Modifiability,"Hi @FabienPean, ; Any idea why RigidLinearDeformationMappings_test is failing on Windows ?; See [windows7_VS-2015_amd64_origin_options tests report](https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_amd64_pr_2_options/266/testReport/). EDIT: This is certainly nothing related to your PR. It is also failing for sofa-framework/sofa#261. EDIT 2: The problem is known, see issue sofa-framework/Flexible#4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659:390,Flexible,Flexible,390,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-300141659,1,['Flexible'],['Flexible']
Modifiability,Hi @Gabriele111 I do not have any experience with the cmake-gui. That's also why I did not include it in the sofa_env instructions on how to build SOFA. ;); https://github.com/ScheiklP/sofa_env_devel/blob/main/docs/source/setting_up_sofa.rst. Also the default plugin list is manually adapted AFTER compiling SOFA.; https://github.com/ScheiklP/sofa_env_devel/blob/main/docs/source/setting_up_sofa.rst#:~:text=Add%20SofaPython3%20to%20the%20list%20of%20default%20plugins%20so%20that%20SOFA%20loads%20it%20by%20default.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768316751:260,plugin,plugin,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768316751,2,"['adapt', 'plugin']","['adapted', 'plugin']"
Modifiability,"Hi @Iwillsd ,. I am sorry to hear the plugin does not work for you. Could you share your scene or try the example scene in the latest commit on the master branch? You can also use the version of the plugin from the master branch, it uses the static version of the library, so, in principle, there should not be problems with linking. Best regards,; Vlad",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1322280580:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1322280580,2,['plugin'],['plugin']
Modifiability,"Hi @RainVector ; Thank you very much for your interest in our open-source project.; Some codes are available in SOFA for fluid simulation but it is not widely developed. You can for instance find: ; - examples in _examples/Components/behaviormodel/_; - and 2 plugins (in _applications/plugins_):; - SofaEulerianFluid ; - SofaSphFluid. Note: for user questions, please the [SOFA online forum](https://www.sofa-framework.org/community/forum/) instead. GitHub is restricted for developer discussions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519:259,plugin,plugins,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440808519,1,['plugin'],['plugins']
Modifiability,"Hi @ScheiklP ,. `MeshROI` is a SOFA engine, it inherite from ... `DataEngine` I think (without looking at the code).; The design of the the engine is to call the method `DataEngine::update` when one of the output Data is accessed and if any of the input Data is dirty. Meaning we need to recompute the output from new input value. . But as several mechanisms are required for this design, the `update `method is calling the method `doUpdate `which has to be implemented in each specific engine in middle of other code. So it is normal you don't see call of doUpdate inside the MeshRoi. DO you have a scenario which doesn't work as expected?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3484#issuecomment-1315100053:47,inherit,inherite,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3484#issuecomment-1315100053,1,['inherit'],['inherite']
Modifiability,"Hi @ScheiklP, ; i built sofa from source using python 3.9.18. The problem is SofaPython3 plugin is not present in sofa when i run it and it's not in the plugin list either, even though, when building sofa, i don't get any errors. . Thank you for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1784870087:89,plugin,plugin,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1784870087,2,['plugin'],['plugin']
Modifiability,"Hi @ScheiklP, i have a doubt: i managed to configure sofa with cmake, when i add sofapython3 plugin from the camke-gui i don't get any errors but when i check the plug-in list (plugin_list.conf.default), sofapython3 is not there. is it normal?. thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768181910:43,config,configure,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1768181910,3,"['config', 'plug-in', 'plugin']","['configure', 'plug-in', 'plugin']"
Modifiability,"Hi @ScheiklP, sorry to bother you again. I am trying to install sofa from source so that i can use a =>3.9 version of python as you suggested. I'm facing some problems though. when i compile sofa with cmake i get this error ; 'Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.18"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package)'",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804:234,plugin,plugin,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1761148804,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:143,plugin,plugins,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188,1,['plugin'],['plugins']
Modifiability,Hi @aleblanc30 ; A **very** nice PR for a first PR! Thanks a lot reviews have been shared to you:. MOR plugin need to be fixed (we will take care of it) and take reviews into account regarding the object registration.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4991#issuecomment-2373399567:103,plugin,plugin,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4991#issuecomment-2373399567,1,['plugin'],['plugin']
Modifiability,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:422,refactor,refactored,422,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891,1,['refactor'],['refactored']
Modifiability,"Hi @damienmarchal . Thanks for your remarks!. I'll address those probably later this week, meanwhile this PR is back to WIP. For the bindings of **Simulation** and **GUIManager**, I completely agree with you, however, I'm not sure how I would address this without having to create a new binary (new plugin?). I can remove those from this PR while I think of a better way to do this. Anyway, beside **GUIManager::setDimension** which can be used dynamically with current GUIs, those bindings were mostly useful when using the SofaPython plugin as a module loaded into an external python interpreter, which is not yet supported in Sofa (we kinda ""hacked"" the current SofaPython plugin to make it work for some of our work here in the team).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207:299,plugin,plugin,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990#issuecomment-490121207,3,['plugin'],['plugin']
Modifiability,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:327,plugin,plugin,327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780,1,['plugin'],['plugin']
Modifiability,"Hi @epernod,. Thanks for the report. I will give that some time after the refactoring done :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1502#issuecomment-704745014:74,refactor,refactoring,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1502#issuecomment-704745014,1,['refactor'],['refactoring']
Modifiability,"Hi @fjourdes, thanks for the suggestion. I used HOBAK for the implementation, adapting it to SOFA `TetrahedronHyperelasticityFEMForceField`. I implemented only the material. Therefore, everything outside of the material, such as matrix clamping, is not yet implemented. Note that HOBAK has also a test suite, with some similarities with mine (test derivative against finite differences). I guess we can check that both test suites match for the same input.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024912176:78,adapt,adapting,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4603#issuecomment-2024912176,1,['adapt'],['adapting']
Modifiability,"Hi @flargilliere, sorry for the late answer.; Tutorials have been broken since the start of [pluginization work](https://github.com/sofa-framework/sofa/pulls?utf8=%E2%9C%93&q=is%3Apr%20pluginize).; They indeed need a massive fix+cleanup but unfortunately this is not in our task list for the moment (at least until v17.12). ; See https://github.com/sofa-framework/sofa/pull/453 and https://github.com/sofa-framework/sofa/commit/6803323aab31e1889315f93697d48c44a7099bfa for details.; Is this problem critical for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/445#issuecomment-343488320:93,plugin,pluginization,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/445#issuecomment-343488320,1,['plugin'],['pluginization']
Modifiability,"Hi @fredroy, thank you for your reply,. I recently pulled Sofa 20.12 and SofaPython3 and I did not observe this issue. But it is maybe because my cmake variable `SP3_PYTHON_PACKAGES_DIRECTORY` was already set to `bin/python3/site-packages`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-783522388:152,variab,variable,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-783522388,1,['variab'],['variable']
Modifiability,"Hi @fredroy, thank you for your reply. I tried as you suggested but i got this error:. ' [ERROR] [DAGSimulation(Simulation)] Cannot load file 'C:\Users\gfurn\Downloads\liver.py': extension (py) is only supported if the plugin SofaPython3 is loaded. SofaPython3 must be loaded first before being able to load the file. '",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786726505:219,plugin,plugin,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786726505,1,['plugin'],['plugin']
Modifiability,Hi @fredroy. Here it is:. [INFO] [runSofa] PluginRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/plugins;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/collections;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release; [INFO] [runSofa] DataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/share;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/examples;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [runSofa] GuiDataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/applications/projects/runSofa/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_sourc,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:43,Plugin,PluginRepository,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,3,"['Plugin', 'config', 'plugin']","['PluginRepository', 'config', 'plugins']"
Modifiability,"Hi @guparan,. Thanks for the careful review. ; Here are the changes:; - I fixed the erroneous GetMechanical... in plugins; - I removed all the comment code in /* mparams = xxxx */ because these lines makes no sense neither before the PR or after. ; - The /// is just the normal code comment and I have not expectation for them to generate any doxygen comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-792929065:114,plugin,plugins,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-792929065,1,['plugin'],['plugins']
Modifiability,"Hi @hugtalbot . I removed all the experimental stuff (sad), the commit history is cleaned, the CI is compiling (but as there is now the test scenes by default it is super laggy). . The first six commits are touching Sofa files and are fixes. ; The two other are adding the PSL plugin. . About the number of files, the 2/3 are examples and test scenes. ; The failing test in windows are because of the missing module on the windows machine:; https://github.com/hjson/hjson-py. EDIT: the crash on mac-os is because the tests scenes are using components that uses OpenGL. I think I will remove those tests as they are not really usefull anymore. EDIT2: Here it is...and it fullfill our merging list check boxes :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703:277,plugin,plugin,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353217703,1,['plugin'],['plugin']
Modifiability,"Hi @hugtalbot,. Apologies for the delayed response. I've recently updated my CMakeLists in the ext_plugin_repo, switching from sofa_add_plugin to sofa_add_subdirectory, which has successfully enabled the build of this plugin. Below is the revised CMakeLists for your reference:. ```; cmake_minimum_required(VERSION 3.12). find_package(SofaFramework REQUIRED). # Changed from sofa_add_plugin to sofa_add_subdirectory; #sofa_add_plugin(SofaTearing/ SofaTearing); sofa_add_subdirectory(plugin SofaTearing/ SofaTearing); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1960547563:218,plugin,plugin,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1960547563,2,['plugin'],['plugin']
Modifiability,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:102,plugin,plugin,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009,2,['plugin'],['plugin']
Modifiability,Hi @lagarkane . Thank for your PR. . About the general question of outsourcing plugins builds...I think issues is the proper place to discuss about this.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/395#issuecomment-328455753:79,plugin,plugins,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395#issuecomment-328455753,1,['plugin'],['plugins']
Modifiability,Hi @lakehanne . I have the impression that dependency tracking between plugins with only cmake external repo is hard. . This is why I released a sofa package manager called sofa-spm: https://github.com/SofaDefrost/SPM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805:71,plugin,plugins,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-527793805,1,['plugin'],['plugins']
Modifiability,"Hi @lakehanne, thank you for your PR and welcome to the SOFA community :wave: . I just retargeted your PR towards sofa-framework:master because it seems that you merged master into your v19.06 so it makes more sense (the diff is now readable). About the changes you made, we have our own way to include external repositories in SOFA (we don't use git submodules). Please have a look at applications/plugins/SofaHighOrder or applications/projects/Regression. Moreover, I'm not sure we want to add ROS, SoftRobots and STLIB in SOFA as external repos. This should be discussed with @sofa-framework/reviewers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-523345808:399,plugin,plugins,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1122#issuecomment-523345808,1,['plugin'],['plugins']
Modifiability,"Hi @lujaindong . Thanks for reporting this issue. . As far as I know SofaMiscForceFieldDev not part of Sofa and I bet it is a private plugin that implements the missing component ""RotatioNFinder"" and ""ShapeMatchingForceField"". . Having an example base on private plugin is problematic and we should either provide a different example with only public components or ask the author of RotationFinder & ShapeMatchingForceField to have them publicaly release and have them integrated into Sofa. I think @hugtalbot can say more about that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631:134,plugin,plugin,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307#issuecomment-311033631,2,['plugin'],['plugin']
Modifiability,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:246,plugin,plugins,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267,1,['plugin'],['plugins']
Modifiability,"Hi @maddin200; after discussion with the SOFA reviewers, we would be really glad if you could propose the change you suggested (removing the uninitialized variable ind and make the for loop over [i] instead of [ind]).; Could you contribute your proposal?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-527897456:155,variab,variable,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-527897456,1,['variab'],['variable']
Modifiability,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:174,Flexible,Flexible,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,3,['Flexible'],['Flexible']
Modifiability,"Hi @nawuxicaa ; Welcome on the SOFA github repository.; The CGAL plugin can (for now) only be built within SOFA, in other words, you have to clone SOFA (which includes the SOFA [CGAL plugin](https://github.com/sofa-framework/sofa/tree/master/applications/plugins/CGALPlugin)), activate the CGAL cmake option and build the whole project. Hope this helps.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1290#issuecomment-605006764,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi @nhnhan92 ; Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it. A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; - see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); - get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp). Is this fine for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667:559,Plugin,PluginExample,559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-789654667,3,"['Plugin', 'plugin']","['PluginExample', 'plugins']"
Modifiability,"Hi @polyakovkrylo,. When I call the plugin of the SDK/lib/release/lin-x86_64-gcc/libdhd.a version to compile, I encounter an undefined reference issue.; ``` bash; lib/libSofa.Type.so.20.12.99 lib/libSofa.Compat.so.20.12.99 lib/libSofa.Config.so.20.12.99 -Wl,-rpath-link,/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib && :; /home/dell/raid/hx/sigma7_hx/sdk-3.14.0/lib/release/lin-x86_64-gcc/libdhd.a(dhdComUSB-libusb.o)：in function‘dhdUSBGetDeviceCount(int, int)’：; dhdComUSB-libusb.cpp:(.text+0x9d)：undefined reference to ‘libusb_init’; dhdComUSB-libusb.cpp:(.text+0xba)：undefined reference to ‘libusb_get_device_list’; dhdComUSB-libusb.cpp:(.text+0xed)：undefined reference to ‘libusb_get_device_descriptor’; dhdComUSB-libusb.cpp:(.text+0x120)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x141)：undefined reference to ‘libusb_exit’; /home/dell/raid/hx/sigma7_hx/sdk-3.14.0/lib/release/lin-x86_64-gcc/libdhd.a(dhdComUSB-libusb.o)：in function‘dhdUSBGetDeviceCountList(int*, int*, int*, int)’：; dhdComUSB-libusb.cpp:(.text+0x215)：undefined reference to ‘libusb_init’; dhdComUSB-libusb.cpp:(.text+0x24e)：undefined reference to ‘libusb_get_device_list’; dhdComUSB-libusb.cpp:(.text+0x297)：undefined reference to ‘libusb_get_device_descriptor’; dhdComUSB-libusb.cpp:(.text+0x2eb)：undefined reference to ‘libusb_free_device_list’; dhdComUSB-libusb.cpp:(.text+0x30c)：undefined reference to ‘libusb_exit’; ```. So I switched to using the dynamic linking SDK/lib/release/lin-x86_64-gcc/libdhd.so.3.14.0 for compilation, which compiled successfully, but the import of the plugin failed when running the scene example in the [force dimension plugin](https://gitlab.com/polyakovkrylo/forcedimensions). ```. Gtk-Message: 14:09:35.149: GtkDialog mapped without a transient parent. This is discouraged.; [ERROR] [PluginManager] Plugin loading failed (/home/dell/raid/hx/sigma7_hx/sofa2012/build/lib/libForceDimensions.so): libdhd.so.3: cannot open shared object file: No such file o",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229:36,plugin,plugin,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3497#issuecomment-1323155229,2,"['Config', 'plugin']","['Config', 'plugin']"
Modifiability,Hi @sergeiNikolaev . I'm not sure what you want. ; There is actually several tests of python functionality in different plugins. ; SofaPython_test and SofaTest are good starting point. . Now if you want to lauch automatically something like 'unittest' or 'coverage' I have no idea but this is a good question.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083:120,plugin,plugins,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-329769083,1,['plugin'],['plugins']
Modifiability,"Hi @sofa-framework/reviewers,. As you may know, we participate to Google Summer of Code this year. We proposed [3 projects](https://www.sofa-framework.org/community/google-summer-of-code/):; - **SOFA + Pulse**, mentored by @hugtalbot and Kitware: bringing Pulse into SOFA (as a plugin).; - **Emscriptening SOFA**, mentored by @damienmarchal: adapt the core of the SOFA so that it can be compiled with Emscripten allowing SOFA to run in a web browser.; - **Communication plugin**, mentored by @ErwanDouaille: improve the communication plugin (implement new protocols). Google granted us **2 slots** so we have to choose. We have promising candidates for every project so **we need your opinion**. Please **vote for the 2 projects** that you think would fit best. ; - For **SOFA + Pulse**, react with :+1: ; - For **Emscriptening SOFA**, react with :tada: ; - For **Communication plugin**, react with :heart: . Arguments in favor of a project can be ""I need it"", ""It would be very helpful for the community"", ""I think it fits well GSoC type of projects"", ... Do not hesitate to comment/discuss. ; Mentors (@hugtalbot, @damienmarchal, @ErwanDouaille) are also welcome to add a comment to detail a bit more the projects. **We have until Tuesday, April 17th at 16:00 UTC to decide.**. Thanks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633:278,plugin,plugin,278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633,5,"['adapt', 'plugin']","['adapt', 'plugin']"
Modifiability,"Hi @sofa-framework/reviewers,. August was a quiet month for SOFA-NG. ## Sofa.Helper.Bvh; The [pull-request](https://github.com/sofa-framework/sofa/pull/741) has been merged. ; We have now 2 NG modules in the [ng branch](https://github.com/sofa-framework/sofa/tree/ng) of SOFA! :tada:. ## Sofa.Helper.*; Here is an overview of the other Sofa.Helper parts and how hard factorization should be.; Reminder: architecture proposal comes from [SofaDefrost cleanTheMessStep1 branch](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa).; ```; Sofa.Helper.Image; 3 classes: Image, ImageDDS, ImageRAW; sofa::helper::io -> sofa::helper::image; easy. Sofa.Helper.Types; Many classes; some sofa::helper -> sofa::helper::types; some sofa::helper::types -> sofa::helper::types; hard, may need sofa2ng modifications. Sofa.Helper.Rendering; 2 classes: FrameBufferObject, Transformation; sofa::helper::gl -> sofa::helper::rendering; easy. Sofa.Helper.Rendering.Gl; Many classes; sofa::helper::gl -> sofa::helper::rendering::gl; medium. Sofa.Helper.Mesh; 9 classes (everything from sofa/helper/io except Image*); sofa::helper::io -> sofa::helper::mesh; medium; ```. Everyone is more than welcome to do a part (or at least try to). ; Keep me informed in the comments, I can help if you have trouble using sofa2ng. ## Next steps; - Continue discussions about SofaFramework refactoring with vonlunteers (who does what and how); - Finish refactoring SofaHelper -> insure 100% coverage; - Move on with SofaCore. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209:1374,refactor,refactoring,1374,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-417712209,2,['refactor'],['refactoring']
Modifiability,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:68,Plugin,Plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491,8,"['Plugin', 'config', 'refactor']","['Plugin', 'PluginManager', 'config', 'refactor', 'refactoring']"
Modifiability,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:153,refactor,refactoring,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,5,"['Refactor', 'adapt', 'refactor']","['Refactoring', 'adapt', 'adapting', 'refactoring']"
Modifiability,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for July. ## sofa2ng; Previously named SPM, the NG-module boostrapper has been massively updated and upgraded.; It should now able handle any standard (following conventions) SOFA module.; Check it out: https://github.com/guparan/sofa2ng. ## Sofa.Component.Utils; The recipe has been updated. ## Sofa.Helper.Bvh; The recipe has been updated.; A pull-request proposing Sofa.Helper.Bvh and explaining how to reproduce it with sofa2ng has been done: https://github.com/sofa-framework/sofa/pull/741. ## Next steps; - Follow Sofa.Helper.Bvh PR and answer questions about sofa2ng; - Discuss about SofaFramework modules refactoring with vonlunteers (who does what); - Continue refactoring SofaHelper. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414:675,refactor,refactoring,675,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-409633414,2,['refactor'],['refactoring']
Modifiability,"Hi @sofa-framework/reviewers,. Here is a follow-up of SOFA-NG for June.; Only a few news for this month. ## STC#5; I presented you the evolution of SOFA-NG and the future steps.; You can retrieve the presentation [here](https://drive.google.com/file/d/1ig-VoMDSVVg22YQDdZBP62kUYPF283FZ/view?usp=sharing). ## Modularization; Two SOFA modules have been pluginized by Damien: [SofaSparseSolver and SofaPreconditioner](https://github.com/sofa-framework/sofa/pull/668).; The idea is to make existing modules really modular: can be disabled, clean dependencies.; This work joins NG work but starting from the top - the ""leafs"" - of SOFA. ## NG version of SofaFramework; No notable evolution on this task. Unfortunately my time has been taken on other purposes. _____________________________________________________. Next month will hopefully be way more NG-oriented for me so don't worry, it's still alive!; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059:351,plugin,pluginized,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-401724059,1,['plugin'],['pluginized']
Modifiability,"Hi @sofa-framework/reviewers,. Long time no see, the NG task has been quite slow this last months.; Here is a quick follow up of October and November activity. ## Sofa.Helper.Types; I finished the refactoring for Sofa.Helper.Types. ## Next objectives; Update NG branch; Open PR for Sofa.Helper.Types; Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942:197,refactor,refactoring,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-446606942,2,['refactor'],['refactoring']
Modifiability,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:148,Plugin,Pluginization,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,1,['Plugin'],['Pluginization']
Modifiability,"Hi @vmagno ; Great job, could you please update the PR to take into account the changes made in master ? ; (Small tips: Most of the the problematic files have been moved in the plugins directory :))",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316:177,plugin,plugins,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-335799316,1,['plugin'],['plugins']
Modifiability,"Hi Adrien, . I'm looking into the SofaCUDA plugin but I don't understand where the problem you happens. ; Is it in a separated branch or clone ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/320#issuecomment-313344108:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/320#issuecomment-313344108,1,['plugin'],['plugin']
Modifiability,"Hi Bruno . I forgot to say that few weeks ago during the meeting was asked why not naming ""doXXX"" the methods to override to receive event. I think there is a good reason for that...it is because those are not delegates...those are more like ""events"". . So to me I expect this convention:; - doXXXX when there is an XXX method called delegating some part to the an inherited class; - onXXXX to do something when the XXX ""event is received. . I'm sorry to remind me that so late as I see you have changes all the names in your PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466505145:365,inherit,inherited,365,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-466505145,1,['inherit'],['inherited']
Modifiability,"Hi Damien,. Add this macro would add a macro on a macro and hide always more abstraction to new developer. Not sure that's the way to go.; As I see it, the right workflow is when you have several plugins outside from the SOFA tree is :; - to create a folder containing them all; - with a CMakeList.txt at the root; - in this file, for each plugin you should have a line : sofa_add_plugin(path_to_the_plugin_root/ pluginName); This will generate the same ""PLUGIN_XXXXX"" to activate/deactivate. I would therefore rather keep the SOFA_EXTERNAL_DIRECTORY variable, document it (i can do it since it's missing [here](https://www.sofa-framework.org/community/doc/programming-with-sofa/start-coding/create-your-plugin/)) instead of adding this new macro. What's your opinion ?. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366:196,plugin,plugins,196,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347779366,5,"['plugin', 'variab']","['plugin', 'pluginName', 'plugins', 'variable']"
Modifiability,"Hi Damien,. I think this discussion is not ""Moving from SofaKernel ot plugin"" but rather ""Moving SOFA modules to plugins"".; Moreover, I think we can involve many people, like @fjourdes who already brainstormed about it some years ago! Let's start the discussions!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352:70,plugin,plugin,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-271852352,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Damien,; Thanks for the input,I see now why a different type naming was used for the factory, I didn't know it was the type ""encoding"" for python. I also think that explicit data typing is a necessary feature to override an implicit type introspection. In my plugin for instance I have some ""relatively complex"" data structures that are reduced to basic numpy arrays when passed to python, and for which type introspection from python back to cpp wouldn't give the correct type. Also, wouldn't it make sense to completely override the datatype::name() string for the python style typename, already in the sofa DataTypeInfo, not just in the python factory?; It would break scenes that explicits template types, but it would be more consistent. Looking fwd to see how things goes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977:262,plugin,plugin,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380074977,1,['plugin'],['plugin']
Modifiability,"Hi Damien,; aren't the two features redundant ?; I was actually already using this functionality for a repository including several plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831:132,plugin,plugins,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530#issuecomment-347539831,1,['plugin'],['plugins']
Modifiability,"Hi Damien. I understand what you want to do (I think) and it's certainly an important aspect of cleaning SOFA. If by moving a component to a specific location we change its 'status' to 'deprecated' (and the user receives the appropriate warning), it seems a very good solution.; However, I did not understand how we'll do this in practice with SOFA-NG. In the many components that would go in plugins, some of them need to be flagged as 'deprecated' and others as 'too buggy for SOFA-NG', i.e. how / when do we decide where a component sits on its own life cycle? Knowing that I would be very tempted to put many of these in a 'close to retirement' state ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180654:393,plugin,plugins,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332180654,1,['plugin'],['plugins']
Modifiability,"Hi Erik,. Thank you for the offer,; If you have time you could look at the failing scenes to see what is wrong and how it would be best to validate that. Maybe testing this branch with your plugins or scenes would also be very useful. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538:190,plugin,plugins,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446186538,1,['plugin'],['plugins']
Modifiability,Hi François . Fred recently proposed to remove the ImagePng.cpp to use the plugin CImgPlugin. ; So I think we can close this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/446#issuecomment-336573258:75,plugin,plugin,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/446#issuecomment-336573258,1,['plugin'],['plugin']
Modifiability,"Hi François . Thanks for reporting. ; As we recently started moving things into plugin, cutting ""un-needed"" dependencies and relaxed the code coupling I'm not surprised this can happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228:80,plugin,plugin,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/488#issuecomment-338611228,2,"['coupling', 'plugin']","['coupling', 'plugin']"
Modifiability,"Hi Fred,. If possible I think SVector should stay where it is because we want to deprecate it anyway. . About SVector deprecation/refactoring. ; To me this class only exists to implement a different parser [a, b, c] instead of a b c. It is a mistake to have a different vector class just to customize the parser. The good news is that adding a parser that understand the two syntax is possible and quite easy to do se we can just use helper:vector everywhere.; But this should be in its own PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893#issuecomment-799436428:130,refactor,refactoring,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893#issuecomment-799436428,1,['refactor'],['refactoring']
Modifiability,"Hi Fred,. Thanks for the work. . Can you elaborate a bit about moving Vector3 to Vec<3, SReal> instead of Vec3. . On my side I was using the parametrized version (Vec<A, B>) only when the templates parameters are really variables (eg: in something like Vec3<DataType::NDim, DataType::Real>). When the type I want is actually fully definied I was more on using Vec3, Vec3f, Vec3d (to be obvious and explicit that the type is fixed). . I also searched in our code base to see what was the most common option and found:; - 1192 matches for ""Vec<3""; - 4907 matches for ""Vec3""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2560#issuecomment-1001667363:220,variab,variables,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2560#issuecomment-1001667363,1,['variab'],['variables']
Modifiability,"Hi Guillaume,. After a quick look in the mesVTKLoader class you are totally right there is bug theres. This is related to the fact the that the VTKLoader is parsing the ""scale"" argumente using atoi/atof. These functions depends on the LC_LANG/LANG environment variables. . Using 0,001 is not valid but does not generate an error.; We should fix that. As this is code that I'm cleaning on I can probably fix that unless someone else want to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038:260,variab,variables,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-275222038,1,['variab'],['variables']
Modifiability,"Hi Guillaume,. I hesitated to do what you suggest...but I concluded that it be better to have people to configure the feature properly instead of living with a partially working approach (no line jump). . But...maybe with a big msg_warning() <<; ""You didnt configured your editor properly...falling back to a shitty solution without line jump""... ; until properly configured it would be ok :) . Can you make it ? I'm focus on something else and have not time until tomorrow.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392:104,config,configure,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013#issuecomment-487942392,3,['config'],"['configure', 'configured']"
Modifiability,"Hi Guillaume,. Thanks for the PR, contains useful things. About the ""plugins"" directory I personally like the idea of stopping to mix shared libraries with sofa plugin, so it is all right to me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694:69,plugin,plugins,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913#issuecomment-461228694,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Hervé,. In general, I think it is a good idea to have a repo per plugin, even if it becomes more difficult to update them when the sofa core is modified.; But in this specific case, it would be great to add this plugin to this github repo, so Flexible can still benefit from your code. Another solution, could be to add a third plugin in your independent repository, that would link with both SOFA-HighOrderTopology and Flexible, and that would contain the high order shape functions. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905:68,plugin,plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251653905,5,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:149,plugin,plugins,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Hugo,. I'm currently trying to control the movement of a 3D model in the Sofa Framework through Unity. I've extended the SofaPhysicsAPI and implemented movement using the applyTranslation method from SofaOutputMesh. So far, I've managed to successfully move the 3D model within Unity. However, when two objects collide, there's no physical response. Could you offer any advice or suggestions for this task?. Jack Yu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4621:111,extend,extended,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4621,1,['extend'],['extended']
Modifiability,"Hi Hugo,. If I remember correctly there is still an inconsistency between the internal logic between DiagonalMass and UniformMass. I started with these two because I wanted to review all the component we are using in our soft-robots plugins. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516:233,plugin,plugins,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-268331516,1,['plugin'],['plugins']
Modifiability,"Hi Hugo,. Thanks for the question and @jnbrunet for the very interesting answer. . To me #define activated feature must always be removed in any case. So the question should be,; do we transform that into a runtime feature that is activated by a data<boolean> or to directly remove it. If version ""optimized"" is always faster we could probably keep it...but refactoring the API using c++11&c++17 so it look shorter and nicer. . I just notice this ugly #ifdef DISPLAY_TIME in CGLinearSolver......cleaning... cleaning...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026:358,refactor,refactoring,358,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-593422026,1,['refactor'],['refactoring']
Modifiability,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:193,refactor,refactoring,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631,2,['refactor'],['refactoring']
Modifiability,"Hi Maxime . Very glad that you are interest on those question. On our side we are actively working on this kind of things (deprecating, disable components, remove the no-needed includes in .h, remove the code in .h transforming module into plugin,... ). . We also noticed the problem with SceneCreator and I think that your suggestion is nice. So let's do that ;) . If you are willing to do it please tell us so we wait your PR and we don't duplicate your effort. Otherwise we will do it in the next week (if it does not take too much time). . More generally we would like to make a big effort in this direction during the STC's coding-sprint to end in a cleaner Sofa. . Our approach now is to look at the leaves of the include dependency graph to remove the component that are not part of sofaNG and make PR with that. . Maybe we should all synchronize with other SofaNG guys (@fredroy) so that all our efforts can be merged in the easiest possible way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289:240,plugin,plugin,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331455289,1,['plugin'],['plugin']
Modifiability,"Hi Maxime,. It is funny because I pointed this SPTr stuff in my yesterday's slides for STC4 presenting some of the Sofa anti-patterns. . So on my side I totally agree on the general objective of reducing the coupling between .h and I also fully agree on the method you are proposing on doing that incrementally. . As the topic interest you I would be happy to have your opinion on the following:; - should we advocate to have forward definition only header (something like base_fwd.h) to avoid repeating the same namespace { namespace { namespace {class MyClass;} }} ?; - should we advocate for the use of more opaque object either using PIMPL or storing all data as you suggested in a previous issue:; ```cpp; struct MyObjectData ; ; class MyObject ; {; private: ; struct MyObjectData m_data; ; }; ```. While in the cpp file having; ```cpp; #include <Data.h>; #include <DataFilename.h>; #include <SuperOtherComplexObject>. stuct MyObjectData; {; Data<int> myint;; DataFilename filename;; SuperOtherComplexObject object;; };; ```. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235:208,coupling,coupling,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333953235,1,['coupling'],['coupling']
Modifiability,"Hi Mimesis-bot, I'm happy to hear you have an opinion on this PR :); AI is making super impressive progress nowaydays. EDIT: . To me the good design should be to have:; - SofaOpenglRendering (which contains the DrawToolGl implementation and the gl helpers). ; - SofaOpenglVisual (which contains component that draw stuff using ogl). The PR only wanted to isolate in a plugin the sofa (object/component) so the SofaOpenglVisual that are used for rendering not the remove all gl rendering from Sofa so gl rendering is handle in away similar to the other plugin and now with this #ifdef SOFA_NO_OPENGL. . EDIT: ; But I would prefer to focus on having that done for either:; - SofaOpengl4Rendering; - SofaOpengl4Visuals. Or; - SofaQt3DRendering; - SofaQt3DVisuals; ...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448:368,plugin,plugin,368,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499399448,2,['plugin'],['plugin']
Modifiability,"Hi Sergei, . Sorry to reply that late. So to answer your question... I think a separate python script is fine. To ease the sharing of those utilitary python script we (at Defrost) have started a dedicated library called STLIB (for Sofa Template Library). I would actually be interested to add your OrientedBoxROI there. . You can find more information by browsing the auto-generated documentation at:; http://stlib.readthedocs.io/en/latest/index.html. While the plugin is there: ; https://github.com/SofaDefrost/STLIB. It is a work in progress but as we are now basing our other plugins examples and scenes to this I hope it to grow fast.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705:462,plugin,plugin,462,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-364887705,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi Vlad. We have discussed your PR during the sofa dev meeting. And this is what came out : ; This is of interest but would require an example/context (plugin using it) of use to see how you use it. More over, it still need a lot to do to integrate it in a more standardized way to be more generic regarding the type of element. And finally, and we could help you for this, this feature would need unit tests. This pr is currently set to WIP, waiting for further comment from you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121:152,plugin,plugin,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1757148121,1,['plugin'],['plugin']
Modifiability,"Hi all, . Defrost is happy to announce that we have dropped the SOFA_FLOAT from our SoftRobots & SoftRobots.Inverse plugins. . About PR #853,  If you think this is not the way to go...please tell it now because otherwise it will happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-446570554:116,plugin,plugins,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-446570554,1,['plugin'],['plugins']
Modifiability,"Hi all, . I close this PR because this plugin is now here: https://github.com/SofaDefrost/plugin.SofaPython3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449:39,plugin,plugin,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771#issuecomment-494833449,2,['plugin'],['plugin']
Modifiability,"Hi all, . I wanted to discuss the default behavior of the friction coefficients in the contact models of the Compliant plugin (FrictionCompliantContact.h and CompliantContact.h). The current behavior seems kind of strange:. 1) the global mu coefficient set in the DefaultContactManager component always overrules friction coefficients defined locally for each collision model. 2) when the global mu is set to exactly 0.0, the local coefficients get activated. negative global mu does funny but not really useful stuff in simulations. 3) When having two mu defined by the two colliding models, currently they just get multiplied. So If both models have mu=0.5, they end up having a contact's mu=0.25! Same with large mu: mu=2.0 (i.e. rubber) -> 4.0. . I believe that especially the latter behavior would catch many users on the wrong foot. So here are some changes I propose:. ad 1) locally defined mu should take precedence over globally defined mu's. Of course, this means breaking the existing behavior and probably triggers many regressions, so this should be considered carefully. ad 2) replace `mu.getValue()?` with `(mu.getValue()>0.) ? ` or `(mu.getValue()>=0.) ?` -> a negative value simply means disabling the global override. . ad 3) use the geometric mean of the friction coefficients: replace ; `this->model1->getContactFriction(0)*this->model2->getContactFriction(0)`; with ; `sqrt(this->model1->getContactFriction(0)*this->model2->getContactFriction(0));`. An alternative could be to use the smaller of the two coefficients, but I'm not sure what's the more sensible behavior.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81:119,plugin,plugin,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81,1,['plugin'],['plugin']
Modifiability,"Hi all, . It was pointed by Bruno Marques that this format if very close to mhd. So we should use it. ; As Mhd is supported by Image plugin we can close this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/353#issuecomment-325370348:133,plugin,plugin,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/353#issuecomment-325370348,1,['plugin'],['plugin']
Modifiability,"Hi all, . Thank bruno for the PR. . @guparan I'm not sure we should merge this now. ; Do we really want to remove the config.h from the CMakeLists ? ; Wouldn't it be better to use static config.h instead of config.h.in ? . Having a .in means that the file is a template that is transformed by CMakeLists. This is not the case here so the .in file is misleading and useless. In case we prefer an autogenerated config.h.in from a template it would be much better to have a single one instead of one per plugin/module. ; Eg of what could be the content of such a config.h.in:; ```cpp; /// This file is autogenerated by CMakeLists.txt please do not edit. ; #ifndef @PROJECT_CNAME@_CONFIG_H; #define @PROJECT_CNAME@_CONFIG_H. #include <SofaBase/config.h>. #ifdef SOFA_BUILD_@PROJECT_CNAME@; # define SOFA_TARGET @PROJECT_NAME@; # define SOFA_@PROJECT_CNAME@_API SOFA_EXPORT_DYNAMIC_LIBRARY; #else; # define SOFA_@PROJECT_CNAME@_API SOFA_IMPORT_DYNAMIC_LIBRARY; #endif. #endif /// @PROJECT_CNAME@_CONFIG_H; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498:118,config,config,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609#issuecomment-374642498,7,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Hi all, . Thanks for the discussion. . My current understanding is that removing the whole InitData Mechanisme is:; - possible, ; - desirable (would make the code more clear and maintainable). This mean converting every ; ```c++; myData(initData(&myData, 0.1, ""myData"", ""helpe)) ; /// into ; myData(this, 0.1, ""myData"", ""helpe""); ; ```; About the use of ""this"" in a child constructor. My understanding is that it is considered safe for non virutal methods and attributes from the superclass (https://isocpp.org/wiki/faq/ctors#using-this-in-ctors). I also tried a pure constructor based initialization with g++ and clang++ and got no warnings with -Wall and -pedantic. About the ambiguity case cause by the char* to bool implicit conversion... I would say it would be much easier to fix when the initData machinary will be dropped. . EDIT: One more thing about the bool to specify the parameter... I think that using directly the enum 'named"" value or the setXXXX method to set the parameter is far better than using bool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877:178,maintainab,maintainable,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877,1,['maintainab'],['maintainable']
Modifiability,"Hi all, . The problem with this whole SofaNG project is that it imply a major refactoring of Sofa and thus involve a lot of changes to the existing code base and imply lot of file move (which is know to be a troublemaker with git). . To evaluate how hard it would be to have sofa that match our whishes I decided to put my hand-on; https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa. Now the problem is that it is not possible to reach this state without breaking a lot of things validating each step incrementally. I don't know how to do that but I really think we need to find either a solution or stop talking about sofang. . I have done a small tool to automate a set of changes to generate an NG directory and the corresponding cmakelists straigh from the existing master code base. ; Example of a changeset: ; ```python; {; ""commands"" : [; [""git"", ""checkout"", """" ,""Sofa.Helper.Types""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""init""],; [""mkdir"", ""Sofa/Helper/Types/src/sofa/helper/types/""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.h"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/OptionsGroup.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.h"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""],; [""move"", ""../../SofaKernel/framework/sofa/helper/types/RGBAColor.cpp"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.cpp""],; [""commit"", ""Moving all the file to their new location""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.cpp""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""header_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/OptionsGroup.h""],; [""spm"", ""package"", ""Sofa.Helper.Types"", ""property"", ""source_files"", ""add-to"", ""Sofa/Helper/Types/src/sofa/helper/types/RGBAColor.h""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133:78,refactor,refactoring,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372290133,1,['refactor'],['refactoring']
Modifiability,"Hi all, . There has been quite a lot of discussion recently about how the to implement update mecanisms. ; There is of course the DataTracker, but we are quite a lot to implement complementary mecanism in our respectives plugins so it may be a good idea to see what can be factorized into SofaCore. To do that it would be nice to have examples / snippets / draft of the different approaches we have tested or in mind so that we can evaluate the code impact and interoperability. @bruno-marques, @hugtalbot, @epernod, @jnbrunet feel free to add your ideas. ______________________________________________________; Dedicated Gitter room : https://gitter.im/sofa-framework/data-update?utm_source=share-link&utm_medium=link&utm_campaign=share-link",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597:221,plugin,plugins,221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597,1,['plugin'],['plugins']
Modifiability,"Hi all, ; I installed Sofa (v=17.06, with the Sofapython, Compliant, Image and Flexible pluggins) in a conda environment (conda 4.3.30 with python 2.7.11, numpy 1.13.3) on my computer (macOs 10.13.1). The installation apparently worked fine but when I run a python file it crashes while importing numpy.; More specifically, the crash happens as the framework tries to import the first C++-based module of numpy (=multiarray) see joined file below. I checked the dependency paths and they all point toward the /lib repository of the specific conda env in used.; I also tried to recompile numpy locally and the same problem happened... Does anyone has a clue on what's happening with my setup ?; Thx. PS: numpy works fine in the same conda env in ipython; PPS: I did not use cmake-gui for the compilation but the regular cmake. I used the following compilation flags but I might have missed something : . -DSOFAGUI_QGLVIEWER:BOOL=ON ; -DPLUGIN_FLEXIBLE:BOOL=ON ; -DPLUGIN_COMPLIANT:BOOL=ON ; -DPLUGIN_IMAGE:BOOL=ON ; -DPLUGIN_SOFAPYTHON:BOOL=ON ; -DBoost_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DGLEW_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libGLEW.dylib ; -DJPEG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DJPEG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libjpeg.dylib ; -DPNG_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libpng.dylib ; -DPNG_PNG_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include ; -DTIFF_LIBRARY=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/lib/libtiff.dylib ; -DTIFF_INCLUDE_DIR=/Users/oali/Documents/Work/Research/Devlp/miniconda2/envs/tissuemeca/include . ![screen shot 2017-11-27 at 14 58 33](https://us",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531:79,Flexible,Flexible,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531,1,['Flexible'],['Flexible']
Modifiability,"Hi all, ; after some thinking, would it be possible to have this PR merged for release 19.06. ; Because some of the componets it contains have been tagged as ""to be removed"" ; for 18.12 and are still there and generates a warning each time we use them so having everything in a real plugin for 19.06 seems a better move that these messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583:283,plugin,plugin,283,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499391583,1,['plugin'],['plugin']
Modifiability,"Hi all,. As there was big changes in the Sofa code base (see https://github.com/sofa-framework/sofa/pull/853).; Making these changes were not possible without breaking the API and changing some computation results. Nevertheless we did our best to have the changes done in an as smooth as possible. . Among possible problems:; - your plugin is not compiling anymore with recent version of Sofa (or fail to link). ; - some scenes are not working as they used to. ; - there is a lot of warning/depercation messages when running a scene. . In case you encounter an issue please report it so we can fix that quickly. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/893:333,plugin,plugin,333,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/893,1,['plugin'],['plugin']
Modifiability,"Hi all,. At DEFROST we are working on adding new features to SofaVolumetricData & CGAL. . But currently SofaVolumetricData is not a plugin and is poorly organized so we are considering that it may be a good opportunity to clean it and tranform it into several plugins. If you are using it...please join the effort so that the end result match yours need & expectation. . Currently we have done the following:; - move SofaVolumetricData into a plugin named SofaVolumetricData ; - copy DistanceGrid specific elements from SofaVolumetricData into a new plugin named SofaDistanceGrid; - copy ImplicitField specific elements from SofaVolumetricData into a new plugin name SofaImplicitField; - remove *.cpp from SofaVolumetricData and forward the old *.h to the corresponding .h in SofaDistanceGrid & SofaImplicitField. (So that #include <SofaVolumetricData/> still work for a transitional period) ; - refactor & rename some classes but use 'using OldName = NewName' to provide API compatibility ; and use the Factory to continue exposing the same component names to the sofa users or warning message to indicate the something have changed. After a transitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/388:132,plugin,plugin,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388,6,"['plugin', 'refactor']","['plugin', 'plugins', 'refactor']"
Modifiability,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413:301,Plugin,Pluginization,301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413,1,['Plugin'],['Pluginization']
Modifiability,"Hi all,. I'm still not sure if moving the whole VolumetricData into a plugin is a move we want to make so I pushed the current version to get your opinion if the direction is ok for you (or not). ; If we are courageous... is suggest re-organizing the directory/file layout otherwise we could just have all the file dropped into the plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135:70,plugin,plugin,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325639135,2,['plugin'],['plugin']
Modifiability,"Hi all,. On my side I have no plan to clean or refactor the existing sofa code in the next week.; It was just there for helping student to debug their implicit field and without the RaymarchingEngine to generate the splats it is of very small use. So let's move PointSplatRender shouldn't out of this PR",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-704146619:47,refactor,refactor,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-704146619,1,['refactor'],['refactor']
Modifiability,"Hi all,. This PR is implementing what was discussed in in #362 . CHANGELOG:; - refactor the SceneChecker object for more modularity. Adding new checks should be easier. ; - add a SceneCheckDuplicateName that warns user if the scene contains duplicated names. ; - add the corresponding tests. ; - use the new version in runSofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/392:79,refactor,refactor,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392,1,['refactor'],['refactor']
Modifiability,"Hi all,. We are on our way to make a PR with our PSL plugin to simplify the writing of scene with SOFA.; If you never heard about it you can ; - read the ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md; - have a look at this video introduction:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. This is a WIP so feedback or contribution is more than welcome. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/390:53,plugin,plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi all,. for the PR # https://github.com/sofa-framework/sofa/pull/119; implementing a basic RGBAColor i'm inheriting from Vec4f. This seems to fail on VS compiler. The resulting error on VS2015 is the following (the static_asserts):; https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_default_amd64/1002/console. This seems to suggest that the templated code is 'generated' while it shouldn't. . Any help is welcome.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/130:106,inherit,inheriting,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130,1,['inherit'],['inheriting']
Modifiability,"Hi all,; +1 to Igor and I add @olivier-goury to the discussion as he is very interested by the topic. . 1) Having SparseLDL crashing is a shame (or a joke) that was during since too long. The good news is that the issue was fixed last week in this PR: ; - https://github.com/sofa-framework/sofa/pull/655 (it shouldn't crash that much :)). 2) About the lack of get messages... I discovered there is a #define MULTIMATRIX_VERBOSE that can be changed and this is actually really helpfull to get a minimal amount of understanding of what is happening. https://github.com/sofa-framework/sofa/pull/660/commits/90f413eb2b79ba45fbc742e9777691203ca33886. Now having to change a #define in some obscure .h file is also a shame so as a first step we should replace this #define with a real variable that users can activate/deactivate at run time (without recompiling). This is easy to do. . 3) At Defrost those aspects are under heavy investigation and we are probably willing to help anyone that comes with a road map to improve the situation. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702:779,variab,variable,779,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390936702,1,['variab'],['variable']
Modifiability,"Hi all. I really would like to see this happen! It's something I've been advocating for a long time. Feel free to add me to the workgroup.; From a user perspective (and organization standpoint) we could do something like what's done in python. Plugins could be grouped in packages (or to stay closer to the current architecture we could split ""modules"" into ""plugins""). Then if someone wants just a plugin from a package we could explicitly load it this way:; from FEMpackage import 2DFEMplugin; and if you want all of it; from FEMpackage import *",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292:244,Plugin,Plugins,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128#issuecomment-278580292,3,"['Plugin', 'plugin']","['Plugins', 'plugin', 'plugins']"
Modifiability,"Hi everybody, ; a couple of days ago I had this error : **TypeError: bad argument type for built-in operation**, referring to this line of code:; _tool.createObject('LinearMotionStateController', indices='0 1 2 3 4 5 6 7 8', keyTimes='0.0 200.0', keyDisplacements='0 0 0 0.0 0.04 0')_. Eventually, I found out that the plugin with the _LinearMotionStateController_ component was missing.; I think that a different error message would have been more helpful. Thank you everybody. Have a nice day.; Raffa. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/333:319,plugin,plugin,319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333,1,['plugin'],['plugin']
Modifiability,"Hi everyone, . **My issue**; In the plugin SoftRobots we have a lot of components with optional datas. For example CableActuator (which can simulate a cable pulled by a servomotor), has *optional* limits for the force and displacement of the cable. ; Our problem is that, even though the data field is optional; i.e. no default value is given in initData(), and we only process it if data.isSet() is true, the GUI displays a default value, which is very confusing for the user. . **My wish**; I would like the GUI to display an empty field when no default value has been set in initData(). The very existence of isSet() makes me think that it's reasonnable and makes sense.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675:36,plugin,plugin,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675,1,['plugin'],['plugin']
Modifiability,"Hi everyone, . i am trying to build sofa from source. I used cmake-gui and when i configure it gives me no errors, but i open Sofa.sln in VS 2022 it skips 3 compilations and so i can't find sofaRun to run the software. The 3 compilations are Examples, Documentations and INSTALL. . I watched the video tutorial on sofa website and i noticed QGLViewer_DIR variable is not found in cmake-gui, i don't know if this could be a reason why. . thak you for your help!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4246:82,config,configure,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4246,2,"['config', 'variab']","['configure', 'variable']"
Modifiability,"Hi everyone, . i'm trying to install sofa_env for sofa. i already downloaded it from git hub but when i try to install it (i tried dirrent location: in the same environment as sofa, in the sofa folder, in the bin folder, etc), it tells me that it doesn't find the sofa module with sofapython3. Actually sofapython3 is in sofa (i can see it in the plugin manager). it looks like a path problem, like it can't find sofa for some reason, maybe i'm trying to install it in the wrong place. Can someone help me please?? maybe @ScheiklP . thank you very much!!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223:347,plugin,plugin,347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223,1,['plugin'],['plugin']
Modifiability,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:354,variab,variables,354,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,1,['variab'],['variables']
Modifiability,"Hi everyone, this this is an ""all in one"" branch that adds functions in Sofa ; before we can make a PR with the PSL plugin. The PR is two month old...no one complains and now all the added function are tested & documented so it may be merged soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765:116,plugin,plugin,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410#issuecomment-344618765,1,['plugin'],['plugin']
Modifiability,"Hi everyone,. I'm working right now on a small improvement that will allow people to directly import SofaPython plugin library (libSofaPython.so) inside their python script without the need for an external application (exemple runSofa). A python script could than looks something like:. ```; # scene.py; from libSofaPython import Sofa. root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(); for i in range(0,2):; ...; root.simulationStep(0.01); # Some data and timing analysis in python here...; ...; Sofa.cleanup(); ```; and could be called simply with; `python scene.py`. You can follow the development on the branch; https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable. For now, the primary use for us is to create a batch application directly in python for our experiments (mainly time and precision benchmarks), but maybe some day we could also use this for a complete GUI experience. If you got any suggestion, please do not hesitate to write them here. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492:112,plugin,plugin,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492,1,['plugin'],['plugin']
Modifiability,"Hi folks,. I was just passing by and notice the work done by fred so thanks for the work done. . I made a branch where I refactor the DataCallback to make it use the std lib #include<functional> and lambdas instead of re-implementing a similar system with the class Callback/CallbackImpl. ; See: https://github.com/mimesis-inria/sofa/pull/12. But now this is done I wonder what are the difference with the DataCallback and the existing DataTrackerFunctor implemented in DataTracker.h ? Can you explain a bit ? . To me the differences are:; - the DataTrackerFunctor is allowing one callback and not multiple (but should be easy to change); - the DataTrackerFunctor is templated by the callback (which look not needed to me) ; - the DataTrackerFunctor is not using lambda/functional (but should be easy to change); - the DataTrackerFunctor is passing itself to the functor (which I think is a good idea to access the list of data that have changed, but...lambda are much more easy to work with.); - the DataCallback is storing the tracked data in m_data but this is also done in its parent ""inputs"" is this data duplication useful ? ; - the DataTrackerFunctor is ""hacking"" the setDirtyValue() to trigger the callback while the DataCallback is using notifyEndEdit(). It is unclear to me if this stricly equivalent but the DataTrackerFunctor implementation is shorter. => So this is not equivalent...setDirtyValue is called before the value is changed while notifyendEndif ...when it has changed. . To me the two approach needs to be either unified and/or cleaned so we have a consistent API. . @marques-bruno can you confirm that DataTrackerFunctor is notified before the value is changed, if so this is a big difference (well I wonder what the DataTrackerFunctor is used for)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674:121,refactor,refactor,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-466645674,1,['refactor'],['refactor']
Modifiability,"Hi fred,. Thanks for this PR. I made some totally minor cosmetic comment in the source code. I understand correctly what it does is that is loads by default the plugin that are compiled with sofa. . Maybe I misunderstood the initial purpose of your first PR but I though it was more to autoload a plugin if the one of its component was requested from the scene. Is this stil the purpose of the PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805:161,plugin,plugin,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308233805,2,['plugin'],['plugin']
Modifiability,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:1081,plugin,plugin,1081,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908,1,['plugin'],['plugin']
Modifiability,"Hi guys :); You could let cmake generate for you for each module the config.h (basically only defines for import/export symbols rules, If I am right) using [generete_export_header](https://cmake.org/cmake/help/v3.7/module/GenerateExportHeader.html).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461045251:69,config,config,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461045251,1,['config'],['config']
Modifiability,"Hi guys @ChristianDuriez @fjourdes ,. I wanted to address this issue.; What would be your advice then ? Implementing only one code for everything (FixedConstraint), make two of them (FixedC and PartialFixedC) but using inheritance? another approach ?; Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/440#issuecomment-340473861:219,inherit,inheritance,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/440#issuecomment-340473861,1,['inherit'],['inheritance']
Modifiability,"Hi guys, This PR breaks the headless plugin, at least the version I am using. @jnbrunet or @guparan if one of you have time to explain me more on monday. Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-632717414:37,plugin,plugin,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-632717414,1,['plugin'],['plugin']
Modifiability,"Hi matt,. I wanted to test a very basic approach based on completely reinitializing the Python environment ; you can have a look here: https://github.com/SofaDefrost/sofa/tree/reinit-plugin. But there is problem with numpy (an probably other modules) that does not support to be reloaded and crashing sofa. But if I comment the numpy parts it is working ok. . Now the challenge is either to fix the numpy crash or to come with a different approach (probably closer to what I implemented in the livecoding module) in which we don't destroy the python environment but only reload some of the modules. D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373:183,plugin,plugin,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284719373,1,['plugin'],['plugin']
Modifiability,"Hi rainvector. . As far as can say there is some fluid implementations that are relatively out-dated in the plugin SofaEulerianFluid. Maybe you will have more answers on the user's forum https://www.sofa-framework.org/community/forum/section/user-forum/. Regards,; Damien.; EDIT1: And you are right, i quickly looked into the plugin and it does not contains documentation.; EDIT2: There is several examples which contains fluids simulations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626:108,plugin,plugin,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833#issuecomment-440647626,2,['plugin'],['plugin']
Modifiability,"Hi there, . I would bet on a mismatch between system python and user-installed python (osx, right?). You can probably find out by printing `sys.path` from a test sofa scene, and from a regular python script. If the path for the standard lib don't match you should see it, then adapt the python path in the cmake command.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220:277,adapt,adapt,277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-347198220,1,['adapt'],['adapt']
Modifiability,"Hi vlad, this PR has also been discussed during the dev meeting. ; The conclusions are the same as for the #4226 : we need more context/example of use (for instance to see how you use it in your scenes or plugin). . We are also curious to know how you handle differences between this and the group mechanism : what happens if you are in the same time in the same group and in the same layer ? Are the two mechanism really necessary ? ; It could be also possible to remplace the group mechanism by yours to have a more positive mechanism (same layer = collision instead of diffrent group = collision). But for this it would need to handle multiple layer by object. . And finally, again, some unit testing would be great if we manage to find a mechanism that suites every one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1757168402:205,plugin,plugin,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1757168402,1,['plugin'],['plugin']
Modifiability,"Hi!. When building plugins as standalone projects, the SofaFramework package doesn't expose the cmake config options used to build SOFA.; In the SoftRobots plugin (among others), tests are performed to know if SOFA has been built using the required options (such as SOFA_BUILD_METIS, MODULE_SOFASPARSESOLVER, PLUGIN_SOFAPYTHON, SOFA_BUILD_TESTS etc.) and out-of-tree configurations require to re-specify those options, even though they are only defined in the SOFA build. I've modified the SofaFrameworkConfig.cmake.in to expose those options to whoever does a find_package(SofaFramework), although that might not be the smartest way to do it (the list is non exhausive and it would be best if options were added in a smarter way.; I think that modules such as SOFASPARSESOLVER should export the MODULE_SOFASPARSESOLVER themselves for instance, and so should the plugins.; But then there's also a long list of options that would be worth exposing, such as:; - SOFA_BUILD_TESTS; - SOFA_BUILD_METIS; - SOFA_BUILD_TUTORIALS; - SOFA_WITH_DEPRECATED_COMPONENTS; - SOFA_WITH_THREADING; - SOFA_WITH_DEVTOOLS; - SOFA_USE_MASK; - .... And I don't know where those should be exposed.. So I'm looking fwd to your opinion on the question!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/927:19,plugin,plugins,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/927,5,"['config', 'plugin']","['config', 'configurations', 'plugin', 'plugins']"
Modifiability,"Hi, ; I installed the CGAL plugin (Window 10) in the following steps:; Step 1: Installing the software CGAL5.0.2; Step 2: Compiling CGAL Libraries; Step 3: Compiling CGalPlugin. In step3, I successfully compiled the CGalPlugin in Cmake.; When I compiling CGALPLUGIN in VS2017,it showed some errors like these:; `Error C2660: CGAL::Constrained_triangulation_plus_2<CDT1>::vertices_in_constraint_begin': function does not take 2 arguments； Project: CGALPlugin；; File: D:\SOFA\sofa\src\applications\plugins\CGALPlugin\src\CGALPlugin\Refine2DMesh.inl；; CODE: Line 300,; Error C2660: 'CGAL::Constrained_triangulation_plus_2<CDT1>::vertices_in_constraint_end': function does not take 2 arguments； Project: CGALPlugin；; File: D:\SOFA\sofa\src\applications\plugins\CGALPlugin\src\CGALPlugin\Refine2DMesh.inl; CODE: Line 301.`. I don’t know how to solve it.Please help me.Thanks.; I used Sofa v19.12. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1389:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1389,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi, ; I'm implementing a code to simulate the needle insertion inside of a solf tissue. I am still at a rough version of the model.; My problem is that when I animate the simulation I get the following warning message form the command window:. > [WARNING] [CGLinearSolver(CGLinearSolver)] den = 0.0, break the iterations. And then the simulation doesn't move anymore.; My code is reported below. `; from turtle import position; from splib3.objectmodel import SofaPrefab; from splib3.numerics import getOrientedBoxFromTransform; import Sofa. def createScene(rootNode):. pluginNameList = [""Sofa.Component.Engine.Select"",; ""Sofa.Component.IO.Mesh"",; ""Sofa.Component.LinearSolver.Direct"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.SolidMechanics.FEM.Elastic"",; ""Sofa.Component.SolidMechanics.Spring"",; ""Sofa.Component.StateContainer"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Engine.Select"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.GUI.Component"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Setting"",; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Topology.Container.Constant""]. rootNode.findData('gravity').value=[0,0,-10];; rootNode.findData('dt').value=0.01; ; # Plugin loading; rootNode.addObject('RequiredPlugin', pluginName=pluginNameList, ; printLog='0'). # Rootnode attributes; rootNode.addObject('FreeMotionAnimationLoop'); rootNode.addObject('DefaultVisualManagerLoop'); rootNode.addObject('GenericConstraintSolver', maxIterations='2000', tolerance='1e-9') ; rootNode.addObject('BackgroundSetting', color='0 0.168627 0.211765'). # Scene settings; confignode = root",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3810:569,plugin,pluginNameList,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3810,1,['plugin'],['pluginNameList']
Modifiability,"Hi, ; It looks fine to me, and everything is working well with our plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/869#issuecomment-454837833:67,plugin,plugins,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/869#issuecomment-454837833,1,['plugin'],['plugins']
Modifiability,"Hi, ; thank you for your report.; Could you please specify your setup:; OS, SOFA version and BeamAdapter plugin version and if it is compiled in or out of tree?. Does the crash happened at start?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1314960371:105,plugin,plugin,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1314960371,1,['plugin'],['plugin']
Modifiability,"Hi, @alxbilger! It works the opposite way the collision groups work. With collision groups, collision can only occur between the models' group sets do not overlap (no common groups). With the collision layers it' s the opposite -- collision can only occur if the models are in the same layer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1747167800:202,layers,layers,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4219#issuecomment-1747167800,1,['layers'],['layers']
Modifiability,"Hi, I am an university student trying to use sofa for my simulation work. When I try to configure SOFA master with Cmake a ""CMake Deprecation Warning at SofaAdvanced/CMakeLists.txt:15 (message):; SofaAdvanced is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaNonUniformFem. CMake Deprecation Warning at SofaMisc/CMakeLists.txt:21 (message):; SofaMisc is deprecated.; You should now explicitely find (find_package) and link (target_link_library) each module you need within: ; SofaMiscExtra;SofaMiscEngine;SofaMiscFem;SofaMiscForceField;SofaMiscMapping;SofaMiscSolver;SofaMiscTopology""; warning is appearing. however, without crashing it get configured and generates the files. I have build the system on Visual Studio 2019 and it complies without any errors. However, when loading the RunSofa ""SofaPython"" and ""SofaExporter"" modules are not loading. I tried using the plugin manager and it reports erros that .dll file is not there. but it is there in the bin and could not add to the plugin manager. So my questions are as follows.; (1)I want to know whether do I have to change any configuration to avoid deprecation warning messages?; (2) loading the sofaphython to runSofa application ; My Cmake out put is as follows. Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.19041.; Install prefix: C:/SOFA/build/master/install; Adding module SofaGeneralVisual; Adding module SofaGraphComponent; Adding module SofaGeneralMeshCollision; Adding module SofaBoundaryCondition; Adding module SofaGeneralAnimationLoop; Adding module SofaGeneralDeformable; Adding module SofaGeneralEngine; Adding module SofaGeneralExplicitOdeSolver; Adding module SofaGeneralImplicitOdeSolver; Adding module SofaGeneralLinearSolver; Adding module SofaGeneralRigid; Adding module SofaGeneralObjectInteraction; Adding module SofaGeneralSimpleFem; Adding module SofaGeneralTopology; Adding module SofaTopologyMapping; Adding module So",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1623:88,config,configure,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1623,3,"['config', 'plugin']","['configure', 'configured', 'plugin']"
Modifiability,"Hi, I just discovered that you can select the device using the `CUDA_DEVICE` environment variable. I've never tried it though. Normally, you should have a console print looking like `CUDA: Using device DEVICE_ID : DEVICE_NAME` at the initialization of the CUDA module.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884544191:89,variab,variable,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4423#issuecomment-1884544191,1,['variab'],['variable']
Modifiability,"Hi, I suppose you are speaking about this one:; https://github.com/sofa-framework/sofa/blob/801cda5c4042438f49970fc8233d915f60e334d1/applications/projects/SofaGuiGlut/SimpleGUI.cpp#L232. I think you are right, this is a bug.; I just checked the [configure file of the ci](https://github.com/sofa-framework/sofa/blob/master/scripts/ci/configure.sh) it doesn't seems to have the option SOFAGUIGLUT to ON and the option is set to false by default, so I don't think it is compiled on the CI. @guparan do you confirm?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942:246,config,configure,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942,2,['config'],['configure']
Modifiability,"Hi, I tried to build SOFA from source following the instructions on the website and the youtube video (Linux compilation), ; however, it crashes at the end with the following error:. > [100%] Built target SceneChecking_test; >[100%] Linking CXX executable ../../../bin/runSofa; /usr/bin/ld: /home/hri/anaconda3/lib/libQt5Core.so.5.15.2: undefined reference to ''std::__exception_ptr::exception_ptr::_M_release()@CXXABI_1.3.13'; /usr/bin/ld: /home/hri/anaconda3/lib/libQt5Widgets.so.5.15.2: undefined reference to 'std::__throw_bad_array_new_length()@GLIBCXX_3.4.29'; /usr/bin/ld: /home/hri/anaconda3/lib/libQt5Core.so.5.15.2: undefined reference to `std::__exception_ptr::exception_ptr::_M_addref()@CXXABI_1.3.13'; clang: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [applications/projects/runSofa/CMakeFiles/runSofa.dir/build.make:159: bin/runSofa-22.12.00] Error 1; make[1]: *** [CMakeFiles/Makefile2:18991: applications/projects/runSofa/CMakeFiles/runSofa.dir/all] Error 2; make: *** [Makefile:152: all] Error 2. ![Selection_003](https://user-images.githubusercontent.com/9308405/235440349-dfdb7d21-c788-429f-8aa1-4fc125d6e676.png). I added the CMAKE_PREFIX_PATH as suggested in the Troubleshooting CMake errors section, and the CMAKE configuration looks like the image attached. Does anyone know how to solve this problem? Thank you in advance!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3829:1280,config,configuration,1280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3829,1,['config'],['configuration']
Modifiability,"Hi, can you explain me in which case you need a contoller to inherite from this class to active or not the sphereModel compare to having a controller that search for the sphereModel and change the Data<bool> activate ; is it to be able to activate only a set of spheres?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590795653:61,inherit,inherite,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-590795653,1,['inherit'],['inherite']
Modifiability,"Hi, great work there!. Just to mention that since the python plugin got proper GIL handling, it is also possible to implement communication all on the python side: just start a python thread and do the message dispatch from there using the python package of your choice. From there it's fairly easy to exchange data using a `Queue` between the communication thread and e.g. a script controller (in fact that was the main reason behind implementing GIL handling).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977:61,plugin,plugin,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-348293977,1,['plugin'],['plugin']
Modifiability,"Hi, sorry for the delay. If all the contributors of the plugin agree, I see no objection merging this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/793#issuecomment-431791551:56,plugin,plugin,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/793#issuecomment-431791551,1,['plugin'],['plugin']
Modifiability,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:146,plugin,plugin,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853,1,['plugin'],['plugin']
Modifiability,"Hi, this is not a bug but a new feature I introduced in https://github.com/sofa-framework/sofa/pull/913 to provide (in build and install dirs) a folder that shall always be scanned by PluginManager when searching for a plugin (like the bin/ folder is). The idea was to get an easy way to add/remove plugin binaries in an installed SOFA **without polluting the bin/ folder** which contains stuff I'm not supposed to touch (or scared to touch). The typical use case is: ; I have SOFA binaries (downloaded from sofa-framework.org or provided by someone) and I have a plugin binaries. How to run the examples of the plugin in runSofa?. Many ways to do that:; 1. launch runSofa, open Plugin Manager, load the plugin, open the scene; 2. edit the scene to add `<AddPluginRepository path=""/path/to/the/plugin""/>` and `<RequiredPlugin name=""the_plugin""/>`, launch the scene in runSofa ; 3. copy/paste the plugin binaries (library or complete folder) in the bin/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa ; 4. **[NEW]** copy/paste the plugin binaries (library or complete folder) in the plugins/ folder of SOFA, add `<RequiredPlugin name=""the_plugin""/>` or add the_plugin in bin/plugin_list.conf.default, launch the scene in runSofa . (1) is perfect for a new user but becomes heavy quite soon; (2) is more agile but has limitations for plugins that need to be loaded **before** the scene creation (e.g. for Python env init); (3) solves the limitation of (2) if we use plugin_list.conf but, as I said, putting stuff in bin/ is scary; (4) is what I proposed to separate ""plugins that came with SOFA"" from ""plugins I add myself"". So now about this PR. What you proposed here is to install ALL the sources of applications/plugins into this new plugins folder. ~~Why? ; @jnbrunet You got a bug yesterday, what was it?~~. EDIT: Understood what the bug is, see my review :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865:184,Plugin,PluginManager,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959#issuecomment-470886865,16,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin', 'plugins']"
Modifiability,"Hi, tried both SOFA v22.06.00 and v23.06.00 versions, but not able to load Sofa.Component.UserInterface.ConfigurationSetting plugin, which is causing failure of loading all the remaining plugins. check below error log. I am trying to run lapgym repo implementation , reach environment. Repo : https://github.com/ScheiklP/sofa_env; File : https://github.com/ScheiklP/sofa_env/blob/main/sofa_env/scenes/reach/scene_description.py; scene header file where plugins are loaded : https://github.com/ScheiklP/sofa_env/blob/main/sofa_env/sofa_templates/scene_header.py. `[ERROR] [RequiredPlugin(Sofa.Component.AnimationLoop)] Plugin not found: ""Sofa.Component.AnimationLoop"". Failed to load: [""Sofa.Component.AnimationLoop""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.Linear)] Plugin not found: ""Sofa.Component.Mapping.Linear"". Failed to load: [""Sofa.Component.Mapping.Linear""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Forward)] Plugin not found: ""Sofa.Component.ODESolver.Forward"". Failed to load: [""Sofa.Component.ODESolver.Forward""]; [ERROR] [RequiredPlugin(SofaPython3)] Plugin not found: ""SofaPython3"". Failed to load: [""SofaPython3""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.NonLinear)] Plugin not found: ""Sofa.Component.Mapping.NonLinear"". Failed to load: [""Sofa.Component.Mapping.NonLinear""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Model)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Model"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Model""]; [ERROR] [RequiredPlugin(Sofa.Component.Engine.Select)] Plugin not found: ""Sofa.Component.Engine.Select"". Failed to load: [""Sofa.Component.Engine.Select""]; [ERROR] [RequiredPlugin(Sofa.Component.StateContainer)] Plugin not found: ""Sofa.Component.StateContainer"". Failed to load: [""Sofa.Component.StateContainer""]; [ERROR] [RequiredPlugin(Sofa.Component.Mass)] Plugin not found: ""Sofa.Component.Mass"". Failed to load: [""Sofa.Component.Mass""]; [ERROR] [RequiredPlugin(Sofa.Component.SceneUtili",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:104,Config,ConfigurationSetting,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,7,"['Config', 'Plugin', 'plugin']","['ConfigurationSetting', 'Plugin', 'plugin', 'plugins']"
Modifiability,"Hi,. As discussed at Journées HPC INRIA in Lille, here is an initial nix package for sofa. It also include a flake (and its lock), which is not mandatory, but ease the use of the package, with commands like; - `nix build`, to compile the package in a sandbox; - `nix develop`, to provide a shell with an environment containing all required dependencies to build the project in the usual CMake way; - `nix run`, to start the software. All these commands take an optional path argument, defaulting to the current working directory, but we could also build / develop / run any commit / tag / branch / fork of the project with eg. `nix build github:sofa-framework/sofa`(for master) or `nix run github:nim65s/sofa/58ae0644d117aea880ed284f6cc0beb7e9802f96`. While here, this also setup some CI for this packaging, mostly to detect early:; - if anything new in the repo would break the nix packaging; - if any update from a dependency in upstream [nixpkgs](https://github.com/NixOS/nixpkgs/) would break sofa. But also, a nix binary cache can be set up with eg. https://www.cachix.org/, so that once a commit is build in CI, users & developers can directly use that cache instead of compiling themselves.; (it is also true in the other way: developers with write access to the cache can send their build result to it so that the CI will be instantaneous cache hit). Here is an example of CI build log: https://github.com/nim65s/sofa/actions/runs/11306279152/job/31446709649. PS: I did not test on macos yet, so this is probably a bit early to expect it work. It at least require darwin signatures I guess, I'll try to test that this week, when I can use an apple system. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059:251,sandbox,sandbox,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059,1,['sandbox'],['sandbox']
Modifiability,"Hi,. Could you put your scene example here and the error message you get.; The Geomagic plugin just create SOFA components to be used in the scene graph so there should be no interference with the SofaPython3 mechanism.; But nothing is better than testing! 😄",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580:88,plugin,plugin,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185#issuecomment-1327155580,1,['plugin'],['plugin']
Modifiability,"Hi,. I found the usage of data alias more annoying than helpful. ; Currently data alias are used to provide backward compatibility with old scenes. The problem is that by doing so it does not indicate to the user that the data field name has changed and that it should change to fix his scenes. The consequence is that we have a lot of old scene that are still using differents name for the same data field. . I would advocate for a more helpful (to the user point of view) approach. This approach consists in saying that the field it is using is now deprecated and provide suggestions to fix his scene. In the following I provide a template of code (taken from the soft-robot plugin) to implement this kind of behavior. . ``` cpp; CableModel<DataTypes>::CableModel(MechanicalState* object); : InverseProblemConstraint<DataTypes>(object); , d_indexDeprecated(initData(&d_indexDeprecated, ""index"",; ""Deprecated, must be replaced by the field name 'indices'"")); , d_indices(initData(&d_indices, ""indices"",; ""List of points connected by the cable (from extremity to actuated point). \n""; ""If no indices are given, default value is 0. \n""; ""In case of multiple indices, one point will be actuated \n""; ""and the others will represent sliding points for the cable."")); {; d_indexDeprecated.setDisplayed(false);; }. template<class DataTypes>; void CableModel<DataTypes>::init(); if(d_indexDeprecated.isSet()) {; msg_warning(this) << ""The field of the Cable component named 'index' is now deprecated. ""; ""To remove this error message, the field 'index' should be replaced by the field 'indices'."" ;; .... depending on whether you want to force the user to fix his scene (so quitting the init with an error) or if you want a transition phase accepting the two field you just have to duplicate the content of d_indexDeprecated into d_indices. ; }; ```. If anyone has an opinion or other approach to the problem it is more than welcome. . D.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35:677,plugin,plugin,677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35,1,['plugin'],['plugin']
Modifiability,"Hi,. I have been trying to compile Leap Motion plugin, I already downloaded the Leap SDK and placed all files in the corresponding folders for CMake to build the solution. When compiling, I've got these errors I haven't been able to solve. ```; sofa/src/applications/plugins/LeapMotion/src/MyListener.h:88:5: error: ; unknown type name 'InteractionBox'; InteractionBox getInteractionBox() { return interactionBox; }; ^; sofa/src/applications/plugins/LeapMotion/src/MyListener.h:95:5: error: ; unknown type name 'InteractionBox'; InteractionBox interactionBox;; ^; sofa/src/applications/plugins/LeapMotion/src/MyListener.cpp:66:25: error: ; no member named 'interactionBox' in 'Leap::Frame'; interactionBox = frame.interactionBox();. /sofa/src/applications/plugins/LeapMotion/src/LeapMotionDriver.h:80:5: error: ; no matching member function for call to 'initData0'; SOFA_CLASS(LeapMotionDriver, sofa::component::controller::Controller);. sofa/src/SofaKernel/framework/sofa/helper/../../sofa/core/ObjectFactory.h:208:16: error: ; no viable conversion from returned value of type; 'sptr<sofa::component::controller::LeapMotionDriver::MyType>' to function; return type 'sptr<sofa::core::objectmodel::BaseObject::MyType>'; return RealObject::create(instance, context, arg);. sofa/src/SofaKernel/framework/sofa/helper/../../sofa/core/objectmodel/BaseObject.h:99:18: error: ; cannot initialize object parameter of type; 'sofa::core::objectmodel::BaseObject' with an expression of type; 'sofa::component::controller::LeapMotionDriver'; if (arg) obj->parse(arg);. In file included from /usr/include/boost/intrusive_ptr.hpp:16:; /usr/include/boost/smart_ptr/intrusive_ptr.hpp:69:34: error: no matching function; for call to 'intrusive_ptr_add_ref'; if( px != 0 && add_ref ) intrusive_ptr_add_ref( px );; ```. I hope someone can help with these strange errors. Thanks in advance. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1120:47,plugin,plugin,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1120,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi,. I just read this comment. I'm not 100% sure but I think that these operations are specified for cuda. I don't really know what will be the consequences for the cuda plugins if this pr is merged, but I guess it will break the parallel implementation. . Hadrien;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1260827157:170,plugin,plugins,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1260827157,1,['plugin'],['plugins']
Modifiability,"Hi,. In fact, I have created an external plugin SOFA-HighOrderTopology which ; is intended to be made public. Either this plugin can be added in the list of ""official plugins"" such ; as Compliant or handled completely separately from the SOFA git hub ; repository. I would like to hear your opinion on where this should go. Either ; situations is fine with me. Best,. Herve. Le 04/10/2016 à 18:32, Matthieu Nesme a écrit :. > I guess this will break the Flexible plugin compilation.; > Do you plane to commit it back in a public plugin? In which case, ; > Flexible could link with this plugin.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716, ; > or mute the thread ; > https://github.com/notifications/unsubscribe-auth/ASgmq8hnFA9IIvByk7zU7_0X80h2cFTlks5qwn-BgaJpZM4JwvD8.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251646295,8,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/395:45,plugin,plugins,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395,6,['plugin'],"['plugin', 'plugins']"
Modifiability,"Hi,. Thanks for this PR and nice work. . This PR: ; - [ ] succeed to be compiled on each configuration on the CI.; - [ ] does not generates new warnings or test failure. ; - [ ] does not break existing scenes.; - [ ] does not break API compatibility. ; - [x] is now 1 week old. Once the CI will confirm nothing is broken and upon @matthieu-nesme agreement I suggest we merge this PR without waiting 1 week :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567:89,config,configuration,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-273764567,1,['config'],['configuration']
Modifiability,"Hi,. While trying to compile SOFA(https://github.com/sofa-framework/sofa => branch ""v23.06"") with LLVM 16 , we are getting linker errors as below,. ld.lld: error: undefined symbol: vtable for sofa::linearalgebra::FullVector<double>; >>> referenced by ld-temp.o; >>> lto.tmp:(sofa::component::odesolver::testing::getVector(boost::intrusive_ptr<sofa::simulation::Node>, sofa::core::TVecId<(sofa::core::; VecType)0, (sofa::core::VecAccess)0>, bool)); >>> did you mean: typeinfo for sofa::linearalgebra::FullVector<double>; >>> defined in: ../../../../../lib/libSofa.LinearAlgebra.so.23.06.00; >>> the vtable symbol may be undefined because the class is missing its key function (see https://lld.llvm.org/missingkeyfunction); clang-16: error: linker command failed with exit code 1 (use -v to see invocation); make[2]: *** [Sofa/Component/ODESolver/Backward/tests/CMakeFiles/Sofa.Component.ODESolver.Backward_test.dir/build.make:212: bin/Sofa.Component.ODESolver; .Backward_test] Error 1; make[1]: *** [CMakeFiles/Makefile2:5981: Sofa/Component/ODESolver/Backward/tests/CMakeFiles/Sofa.Component.ODESolver.Backward_test.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs... To Resolve this, we have included definition of key function of FullVector calss in FullVector.cpp. The key function seems to be resize() - i.e the first non-pure, non-linear and virtual function in a polymorphic class. The actual definition of resize() is present in FullVector.inl file and we have commented it out. . Please let us know if the changes are good. . Thanks,; Sandeep.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4402:1379,polymorphi,polymorphic,1379,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4402,1,['polymorphi'],['polymorphic']
Modifiability,"Hi,. several tests were already done for topological modifier, they are tested through scenes in examples/Components/Topology/TopologicalModifiers. They test: add/remove of topological elements; - Is sofaVerification still used? ; - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it better? what is the politic between doing tests through scene or Sofa_test.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43:246,rewrite,rewrite,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43,1,['rewrite'],['rewrite']
Modifiability,"Hi,. static const int solves the inheritance of enum class, but cannot really ; be used for the purpose of typing a categorical variable. For instance we can have this :. class NumericalIntegrationMethod { public : static const int methodOne=1;};. class NewNumericalIntegrationMethod : public NumericalIntegrationMethod  ; { public : static const int methodTwo=2; };. but the integration method has to be described as :. int method=NumericalIntegrationMethod::methodOne; or int ; method=NewNumericalIntegrationMethod ::methodTwo;. but not as : NumericalIntegrationMethod method; (which would be done ; with enum). Anyway, the use of string instead of enums is also motivated with the ; issue of having descriptive labels in python or xml files. See my previous comments below :. > Right now when specifying the type of numerical integration method in ; > python or xml scripts the user had to use for instance ; > numericalIntegrationMethod=""3"" which is not descriptive at all. It is ; > preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for ; > the maintenance of the code. Hervé. Le 13/03/2019 à 10:16, Guillaume Paran a écrit :; >; > Hi guys, what about replacing the enum by a class containing static ; > int members?; > see https://stackoverflow.com/a/644639; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > <https://github.com/sofa-framework/sofa/pull/936#issuecomment-472340591>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/ASgmq8xcftMg8X0iZv9ijlhfWBJGHFwCks5vWMHsgaJpZM4a_sTV>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359:33,inherit,inheritance,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-472604359,2,"['inherit', 'variab']","['inheritance', 'variable']"
Modifiability,"Hi,; You need to add the correct plugin into your scene requiredPlugin. It should be `SofaTopologyMapping` in your version. I'm moving this issue to the Discussions section as it is related to your scene creation rather than a bug inside SOFA.; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1308563217:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1308563217,1,['plugin'],['plugin']
Modifiability,"Hi,; could you post what you wrote in the Cmakelists.txt of your plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-605446157:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-605446157,1,['plugin'],['plugin']
Modifiability,"Hi. . Regarding the update of the plugin for newest version of SOFA : we are a small team of developer for this open source project. The maintenance of all the plugins that are actually used by the community takes most of our time. We need to focus on what most of the community needs and so, if only one person is interested in an old plugin, we cannot take a lot of time on updating it. . This being said, because SOFA is an open-source project, you can contribute by updating it yourself and the making pul-requests to give you fix to the community ! Or wait that more people gain interest in the same plugin as yourself so that it becomes a priority for us. . I am sorry if this answer is not very helpful, and I wished I could help you more. If you encounter any big issue while trying to update it, you can come and seek help, we will help you in such journey.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4934#issuecomment-2311981772:34,plugin,plugin,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4934#issuecomment-2311981772,4,['plugin'],"['plugin', 'plugins']"
Modifiability,Hi; i use plugin manager in release and debug mode without any problem,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530:10,plugin,plugin,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/713#issuecomment-494716530,1,['plugin'],['plugin']
Modifiability,"Hmm I don't know the specifics, but usually config files used to initialise paths exist in two versions, one for the build tree, and one for the install tree. ; - On the build tree you can do pretty much what you want and use absolute paths.; - Only the install tree requires relative paths, so that it is portable. So technically if you use configuration files for the lookup of the directories where the resources are located, it can be dealt by ; - having a config file for the build tree which points to the absolute location of these ressources, ; - for the install tree two options; - no config file required provided you make sure the the install takes place in the expected relative paths location; - another config file generated with relative paths from the install binary dir to the installed resources directory",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038:44,config,config,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358252038,6,"['config', 'portab']","['config', 'configuration', 'portable']"
Modifiability,"Homogeneize the API for update.; A layer is added to avoid a direct access to the DataTracjer which is now private:; - in DataTrackerDDGNode: trackInputData, hasInputDataChanged, haveInputsDataChanged, cleanInputTracker; - in BaseObject: trackData, hasDataChanged. The name of the update function is:; - `doUpdate()` for Engines; - `doInternalUpdate()` for components inheriting from BaseObject. Update engines, and tests accordingly. Rename UpdateInternal(DataVisitor) into InternalUpdate(DataVisitor). Remove the DataTrackerFunctor and its test. TODO: update constantFF with new API. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1163:368,inherit,inheriting,368,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1163,1,['inherit'],['inheriting']
Modifiability,How can you do `#include <sofa/simulation/simulationcore.h>` and not `#include <sofa/simulation/config.h>` ? ; Both files are in the same place :confused:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540955130:96,config,config,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540955130,1,['config'],['config']
Modifiability,How to add new plugin in windows？,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4632:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4632,1,['plugin'],['plugin']
Modifiability,How to update your code in plugin to match the post 20.12 version of sofa,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1757:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1757,1,['plugin'],['plugin']
Modifiability,"Hum... After thinking it through a little longer, I realize that this PR is absolutely non-functional in practice. When deploying the ""installed"" config.h, the preprocessor macro is indeed replaced with the correct path in the config.h file, but, the preprocessor / compiler is not ran again for the deployment step, of course.. which means that in the binaries, SHARE_DIR is still equal to the build step value. Hence the use of a .ini file... So I'm closing this dumb PR...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680:146,config,config,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651#issuecomment-387054680,2,['config'],['config']
Modifiability,"Hummm the code of PointSplatRenderer is strangely *very* similar to PointSplatModel 🤔(which is also in SofaOpenGLVisual 🙃 ); Intentional ?; The difference I could see is that the new one takes explicit data (PointSplatModel gets context, etc). In any case, I would be against copy/paste and more about refactoring/cleaning the existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701446275:302,refactor,refactoring,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701446275,1,['refactor'],['refactoring']
Modifiability,"I Maxime,. Thanks to rise up this kind of debate. . I agree with you that the cost for data init may be large. I see two problems:; - a lot of informations are duplicated in each instance of the component while most of the time they are per component informations (like the namestring, the helping docstring, etc...). I would be great to have that shared informations to be factored somewhere either it is per-class or per data.; - the iniData done in the constructor. As you mentioned the cost may be large at component creation. Do you have a code suggestion for refactoring so that we can have an idea on: ; - how invasive would it be (number of line of code to change :)) ? ; - what would be the performance difference ? . I do add Data at run time from time to time but it is not crucial for me and I could be handle by something called a DynamicData :) . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984:565,refactor,refactoring,565,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255293984,1,['refactor'],['refactoring']
Modifiability,I actually just finished a much better version that is not deleting the environment anymore... please have a look. EDIT: and it is not crashing with numpy. ; EDIT: Instead of using a per plugin reinit we could probably trigger the cleaning by calling the cleaning code when the scene is destructed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284736038:187,plugin,plugin,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284736038,1,['plugin'],['plugin']
Modifiability,"I actually just used grep to parse clang's compilation output to find the files and lines where the warning occurred, then sed to add the override keyword. I didn't do all plugins so there might still be a lot to add. But for the ones I went through, the number of override warnings went from over 1000 to none (with clang 5 on Linux).; It's true that I didn't test on Mac... At least now when we add override somewhere it should remove warnings rather than add more.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909:172,plugin,plugins,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423#issuecomment-333872909,1,['plugin'],['plugins']
Modifiability,"I added deprecation for the removed variable, and renamed the Data variable name (with deprecation). It will trigger warnings in SoftRobots and Cosserat.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4786#issuecomment-2188231439:36,variab,variable,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4786#issuecomment-2188231439,2,['variab'],['variable']
Modifiability,"I agree with all the points :F and I think we need to have a bit more info about this component...; ; > ; > But it is unclear to me if the implementation proposed in the PR is enough because:; > ; > * having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"",. Did it to get the SOFA_ABSTRACT_CLASS mechanism (for the boiler-late code from Object, and to be able to do ::SPtr). > * using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... (I will reply to this in my next answer to alxb). > * the implementation in BTD also looks highly suspicious with:; > ; > * plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; > * a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs. The lack of comments, and the fact that the ""partial_solve"" API seems to come from this class is a bit difficult to follow yeah :p.; As far as I could see, the BTDblabla/LinearSolverCC is only used for the beam-related stuff.; All in all, I guess we need more information about it @ChristianDuriez",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506:228,inherit,inheriting,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227871506,1,['inherit'],['inheriting']
Modifiability,"I agree. Sofa/gpu/cuda only make sens if we have sofa/gpu/opencl or sofa/multithread.... but it would be in other plugin. So if you keep the SofaCuda as first level in your namespace/hierarchy, it will work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406181444:114,plugin,plugin,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1406181444,1,['plugin'],['plugin']
Modifiability,"I already worked on binding Data vectors on this branch: [sofapython_containers](https://github.com/Anatoscope/sofa/tree/sofapython_containers). It is not finished yet, but any help is welcome. Mainly making proper binding for vector of vectors (of vectors...) with different sizes (and SVector).; I had to enhance DataTypeInfo for that, it implies quite deep modifications. The SofaPython/examples/SofaNumpy.py example shows what is doable (even non-numpy related stuff). But it is a pain in the ass to fix codes that were beneficing from those undefined/incorrect behaviors. It is why it is not yet PR, but maybe it could become a wip PR?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306523435:307,enhance,enhance,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306523435,1,['enhance'],['enhance']
Modifiability,"I am creating a plugin and compiling it out of tree. One of the components in my plugin uses the MeshTopology component so I have added ; ```; #include <SofaBase/SofaBaseTopology/MeshTopology.h>; ```. The problem is that MeshTopology.h has some other includes, and of them being <SofaBase/config.h> which can't found. . Most probably this is an issue with CMake targets. The compilation line is the following:. ```; /usr/bin/c++ -DBOOST_ALL_NO_LIB -DBOOST_FILESYSTEM_DYN_LINK -DBOOST_PROGRAM_OPTIONS_DYN_LINK -DBOOST_SYSTEM_DYN_LINK -DBOOST_THREAD_DYN_LINK -DCPFSofaPlugin_EXPORTS -I../../src/CPFSofaPlugin/.. -isystem /home/jjcasmar/D/usr/local/include/SofaFramework -isystem /home/jjcasmar/D/usr/local/include/extlibs/Eigen -isystem /home/jjcasmar/D/usr/local/include/extlibs/json -isystem /home/jjcasmar/D/usr/local/include -g -fPIC -frounding-math -std=gnu++14 -MD -MT src/CPFSofaPlugin/CMakeFiles/CPFSofaPlugin.dir/CPFInit.cpp.o -MF src/CPFSofaPlugin/CMakeFiles/CPFSofaPlugin.dir/CPFInit.cpp.o.d -o src/CPFSofaPlugin/CMakeFiles/CPFSofaPlugin.dir/CPFInit.cpp.o -c ../../src/CPFSofaPlugin/CPFInit.cpp; In file included from /mnt/D/jjcasmar/usr/local/include/SofaBase/SofaBaseTopology/MeshTopology.h:24,; from ../../src/CPFSofaPlugin/CPFInit.h:8,; from ../../src/CPFSofaPlugin/CPFInit.cpp:1:; /mnt/D/jjcasmar/usr/local/include/SofaBase/SofaBaseTopology/config.h:25:10: fatal error: SofaBase/config.h: No such file or directory; ```. I have checked and the file is there, but under `.../include/SofaBase/SofaBase/config.h`. The include directories added by SofaFramework target are `.../include/SofaFramework` and `.../include`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1288:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288,6,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"I am currently running a convergence analysis using python scenes. Since the convergence analysis loads several settings from a .json file, it would be good to have a possibility to forward the filename of the file to the python scene via the command line. To my knowledge, this is not possible at the moment, please correct me if I am wrong and explain me your solution. My first work around was to load from the same file (I call it outputJson, see the function definition below). However, this becomes cumbersome, when the code is parallelized, since several threads would like to load from that same file. My approach for the parallelization is to write the filename (which is now adapted to every scene) first into the .scn using PHP and then to load it from the python scene. ; That means, in the .scn file we have:; `<?php echo '<PythonScriptController classname=""convergenceBeam_Template"" filename=""convergenceBeam_TemplatePython.py"" listening=""1"" name=""convergenceBeam_Template"" variables=""'.$argv[1].'"" />'; ?>`; which called from the convergence python script and deleted later; ```; os.system(""php convergenceBeam_TemplatePython.scn ""+sofaOutput+"".pyscndata > ""+curTime+"".scn""); ... call the scene; os.system(""rm ""+curTime+"".scn""); ```; In the .py file we load the data using; `self.defineDataFromJson(self.findData(""variables"").value[0][0])`; where; ```; def defineDataFromJson(self,jsonFilename=""outputJson"") :; f = open(jsonFilename,'r'); self.data = json.load(f); f.close(); def getValueOfData(self,keyOfData) :; if keyOfData in self.data.keys():; return self.data[keyOfData]; printStack(); sys.exit(""\nERROR\n the key ""+keyOfData+"" is not defined!\nERROR\n""); ```. Both of the solutions I consider as hacks, the first as it can not run in parallel and the second as the scene does not work without running php on the side, thus it does not work with one command line. Potential (final?) solutions would be:; - a command line argument or command line argument**s** for python scenes; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356:685,adapt,adapted,685,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356,2,"['adapt', 'variab']","['adapted', 'variables']"
Modifiability,I am not on Ubuntu. It seems to be a problem with a test in the Flexible plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983:64,Flexible,Flexible,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-389593983,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"I am surprised people are still using this plugin (considering its state) and it would be more than advised to use SofaGLFW instead 🧐; Nevertheless, I already fixed the compilation in the PR removing boost::program_options #2263",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2274#issuecomment-887598926:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2274#issuecomment-887598926,1,['plugin'],['plugin']
Modifiability,"I am trying to add sofapython3 plugin using GUI, but the following error is showing up ; ![Capture_1](https://github.com/sofa-framework/sofa/assets/65168029/237e63a7-f0df-48f9-9935-e1985e084687); I have tried all other fixes (fixing sofa root, sofa python root, python home and so on), but no avail. I have even checked if its issue with .dll file, hence ran REGSVR32 using the .dll file, and Im getting the exact same error saying ""the specified module could not be found"". Kindly help me fix this. My OS is windows 10, and I have both python 3.8 and 3.9 on my system, and I have routed all sofapython related paths to python 3.8 only.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4493:31,plugin,plugin,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4493,1,['plugin'],['plugin']
Modifiability,"I am trying to compile SofaPython3/master with SOFA v20.06 and it doesnt compiles. This is one of the errors I have. The full log is 2k lines, I wont share if not needed. . ```FAILED: bindings/SofaRuntime/CMakeFiles/Bindings.SofaRuntime.dir/src/SofaPython3/SofaRuntime/Timer/Submodule_Timer.cpp.o; /usr/bin/c++ -DBOOST_ALL_NO_LIB -DBOOST_FILESYSTEM_DYN_LINK -DBOOST_PROGRAM_OPTIONS_DYN_LINK -DBOOST_SYSTEM_DYN_LINK -DBOOST_THREAD_DYN_LINK -DBindings_SofaRuntime_EXPORTS -DNDEBUG -DSOFA_HAVE_SOFAPYTHON3 -I/mnt/D/jjcasmar/libs/srcs/plugin.SofaPython3/bindings/SofaRuntime/src -I/mnt/D/jjcasmar/libs/srcs/plugin.SofaPython3/Plugin/src -I/mnt/D/jjcasmar/libs/srcs/plugin.SofaPython3/bindings/Sofa/src -isystem /usr/include/python3.8 -isystem /usr/local/include/SofaSimulation -isystem /usr/local/include/SofaFramework -isystem /usr/local/include/extlibs/json -isystem /usr/local/include/eigen3 -isystem /usr/local/include/SofaBase -fPIC -fvisibility=hidden -std=c++17 -flto -fno-fat-lto-objects -Dregister= -fvisibility=hidden -std=c++17 -MD -MT bindings/SofaRuntime/CMakeFiles/Bindings.SofaRuntime.dir/src/SofaPython3/SofaRuntime/Timer/Submodule_Timer.cpp.o -MF bindings/SofaRuntime/CMakeFiles/Bindings.SofaRuntime.dir/src/SofaPython3/SofaRuntime/Timer/Submodule_Timer.cpp.o.d -o bindings/SofaRuntime/CMakeFiles/Bindings.SofaRuntime.dir/src/SofaPython3/SofaRuntime/Timer/Submodule_Timer.cpp.o -c /mnt/D/jjcasmar/libs/srcs/plugin.SofaPython3/bindings/SofaRuntime/src/SofaPython3/SofaRuntime/Timer/Submodule_Timer.cpp; In file included from /usr/local/include/SofaFramework/sofa/simulation/Node.h:59,; from /usr/local/include/SofaFramework/sofa/simulation/Simulation.h:25,; from /usr/local/include/SofaFramework/sofa/helper/AdvancedTimer.h:25,; from /mnt/D/jjcasmar/libs/srcs/plugin.SofaPython3/bindings/SofaRuntime/src/SofaPython3/SofaRuntime/Timer/Submodule_Timer.cpp:28:; /usr/local/include/SofaFramework/sofa/simulation/MutationListener.h:37:32: error: variable ‘sofa::simulation::SOFA_SIMULATION_CORE",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1429:531,plugin,plugin,531,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429,4,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168:131,plugin,plugin,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168,1,['plugin'],['plugin']
Modifiability,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:788,coupling,coupling,788,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,1,['coupling'],['coupling']
Modifiability,"I build sofa21.12 on Windows10, ; the complete cmake output is as follows. Selecting Windows SDK version 10.0.19041.0 to target Windows 10.0.19043.; CMake Warning (dev) at D:/Program Files/CMake/share/cmake-3.22/Modules/CMakeDependentOption.cmake:84 (message):; Policy CMP0127 is not set: cmake_dependent_option() supports full Condition; Syntax. Run ""cmake --help-policy CMP0127"" for policy details. Use the; cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:45 (cmake_dependent_option); This warning is for project developers. Use -Wno-dev to suppress it. -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: J:/GitHub/sofa/build/install; CMake Deprecation Warning at SofaKernel/modules/Sofa.Config/CMakeLists.txt:74 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). CMake Error at extlibs/CMakeLists.txt:28 (set_target_properties):; set_target_properties Can not find target to add properties to: tinyxml. CMake Error at extlibs/CMakeLists.txt:29 (set_target_properties):; set_target_properties Can not find target to add properties to: tinyxml. Using legacy headers is enabled.; Headers from v20.12 are usable, but it is advised to change your code to use the new headers introduced in v21.06.; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") ; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") found components: filesystem thread chrono atomic ; Adding module Sofa.GL; Adding plugin SofaSimpleFem; Adding plugin SofaRigid; Adding plugin SofaDeformable; Adding plugin SofaObjectInteraction; Adding plugin SofaMeshCollision; Adding plugin SofaEngine; Adding plugin SofaExplicitOdeSolver; Adding plugin SofaImplicitOdeSolver; Adding plugin SofaLoader; Adding plugin SofaGeneralVisual; Adding plugin SofaGraphComponent; Adding plugin SofaGeneralMeshCollision; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2814:815,Config,Config,815,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2814,2,"['Config', 'variab']","['Config', 'variable']"
Modifiability,I built Sofa with the registration plugin successfully. When I had a test with ICPRegistration_ShapeMatching.scn in .\applications\plugins\Registration\examples. It reminded these errors:. [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/image/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/Registration/python’ to sys.path; [INFO] [SofaPython] Added ‘F:/SOFA16.12/sofaproject/sofasrc/applications/plugins/SofaPython/python’ to sys.path; [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/SofaPython.dll. [INFO] [PluginManager] Loaded plugin: F:/SOFA16.12/sofaproject/sofabuild/bin/Release/Registration.dll; [ERROR] [RequiredPlugin] Plugin not found: “SofaMiscForceFieldDev”; [ERROR] [DAGNode “source”] Object type “RotationFinder” creation Failed; [ERROR] [DAGNode “source”] Object type “ShapeMatchingForceField” creation Failed; [ERROR] [SceneLoaderXML] Node initialization failed. I didn’t find any information about this SofaMiscForceFieldDev plugin. Can anyone give me some tips about that?. Thanks in advance!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/307:35,plugin,plugin,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/307,11,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin', 'plugins']"
Modifiability,"I call that 'un doigt dans l'engrenage', nice ! . I totally agree on the fact that those methods should be final otherwise the 'delegate' pattern used here makes no sense because we cannot trust it for child class... . But then I don't fully agree on the protected part : it might become cumbersome to test them in unit test with such protection . It might be good to understand why those base methods where overridden instead of the ""delegate' one, maybe old artifact on un-refactored components ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2315676097:475,refactor,refactored,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2315676097,1,['refactor'],['refactored']
Modifiability,"I can see two errors:; - one is that it seems you switched on SOFA_FETCH_PYTHON, which was the plugin related to python2 and which is not supported anymore -> just switch `SOFA_FETCH_PYTHON` off, and disable `PLUGIN_SOFAPYTHON` if it is present; - `Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS` it seems you did not install the package developement for python3 ; did your execute `sudo apt-get install python3-dev` (or `sudo apt-get install python3.8-dev`) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489531612:95,plugin,plugin,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489531612,1,['plugin'],['plugin']
Modifiability,I can't push on your branch. Did you forbid it?; Removing `using namespace std;` in applications/plugins/ARTrack/extlibs/ARTrackLib/mainTracker.cpp does fix the error on Windows.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458:97,plugin,plugins,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598314458,1,['plugin'],['plugins']
Modifiability,"I close this @marques-bruno but is an example / doc on ""how to build a binding"" for [SofaPython3](https://github.com/SofaDefrost/plugin.SofaPython3) available?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896:129,plugin,plugin,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1002#issuecomment-592184896,1,['plugin'],['plugin']
Modifiability,"I close this PR, It changes a lot the behavior of the plugin loader, that now complains that many symbols are not defined. I guess it's the same behavior for CPU alreadydefine symbols. I d'ont know how we could remove the thousands of warnings it generates anyway.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597:54,plugin,plugin,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548#issuecomment-713514597,1,['plugin'],['plugin']
Modifiability,I close this one to open a new one without the move to plugin directory.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/663#issuecomment-392523906:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663#issuecomment-392523906,1,['plugin'],['plugin']
Modifiability,"I commented on #151 why I don't this this strategy is viable. An additional point related to this fix, is that `TemporaryLocale` is not a good solution, and needs to be banned for cases where Sofa is embedded within an application having multiple threads. Indeed, `setlocale` is ""MT-Unsafe"" according to the docs, and does affect the locale of the other threads that could run in parallel. It's like `setcwd`, but unlike the notion of the current directory that we can workaround (by having the notion of the current directory tracked within Sofa), there is no thread-safe and portable way to do the same for the locale (as far as I know).; Depending on the GUI framework in use, the order of initialization, the OS, the system language, ..., the current locale will be changed (hint: the current constructor/destructors of `TemporaryLocale` do have non-temporary consequences, as there is no real way to get back to the ""no-locale-default"" state once someone messed with it. There is no obvious solution to this, but I would vote for going back to the strategy of imposing ""C"" at the beginning of the programs we control (i.e. `runSofa`), and adding checks and outputting a warning when loading a scene if the external application did not set the locale correctly to this safe value, but either never messing with it, or making this externally-controllable from the application using Sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466:577,portab,portable,577,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281643466,1,['portab'],['portable']
Modifiability,I completely agree @fredroy ; There seems to be a lot to refactor and clean in the CGALPlugin and maybe it deserves a big PR on its own.; I'll modernize our calls to the draw functions on this component and let you know when I'm done,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-834176965:57,refactor,refactor,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-834176965,1,['refactor'],['refactor']
Modifiability,I confirm the configuration is way faster. Still too slow on Windows though. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277302677:14,config,configuration,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277302677,1,['config'],['configuration']
Modifiability,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:363,plugin,plugins,363,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380,1,['plugin'],['plugins']
Modifiability,"I copied/pasted a path with backslashes in the env variable SOFA_ROOT, and a bad thing happened. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2970:51,variab,variable,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2970,1,['variab'],['variable']
Modifiability,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/569:118,plugin,plugins,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569,4,['plugin'],['plugins']
Modifiability,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:372,refactor,refactor,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360,4,"['plugin', 'refactor']","['plugin', 'refactor', 'refactored']"
Modifiability,"I did not bother to test/compile/configure, as it is based on Compliant which was deprecated (and abandoned I suppose) for quite a long time. for those who are curious -> https://github.com/sofa-framework/PreassembledMass. https://github.com/sofa-framework/sofa/issues/1442. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3802:33,config,configure,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3802,1,['config'],['configure']
Modifiability,I did not have a lot of time to progess here but still a reminder for later:; - in Flexible : BezierTetrahedron.scn should not be built anymore since it depends on SofaHighOrderTopologies; - CubeTopology : crashes since the CubeTopology does not implement the position (point) topology,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245:83,Flexible,Flexible,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-355634245,1,['Flexible'],['Flexible']
Modifiability,"I did the modification in `TypeInfo_Text.h`, but build fails if I extend it to `FixedArrayTypeInfo.h`, apparently because of the template specialisations on Rigid types, for instance :; ```; FixedArrayTypeInfo.h:195: error: ‘const DataType’ {aka ‘const class sofa::defaulttype::RigidDeriv<2, double>’} has no member named ‘data’; 195 | return data.data();; | ~~~~~^~~~; ```; (which makes sense).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329533975:66,extend,extend,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329533975,1,['extend'],['extend']
Modifiability,"I did, the plugins are activated by default in the others.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-330531075:11,plugin,plugins,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-330531075,1,['plugin'],['plugins']
Modifiability,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:145,refactor,refactor,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522,1,['refactor'],['refactor']
Modifiability,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:586,plugin,plugins,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630,2,"['flexible', 'plugin']","['flexible', 'plugins']"
Modifiability,"I don't believe there was a pull request already attached to issofa_plugins branch ? My apologies if that ; was the case. . # Purpose; Some basic plugin functionalities were silently changed for no good reasons other the past years, namely; - SOFA_LIBSUFFIX which should be set as ""_d"" during a debug build is broken under msvc since c89da68 which as the commit name says is indeed monstruous. It was ""fixed"" later by adding directly inside the PluginManager code a condition to add the ""_d"" suffix by checking the compiler. ; - The default behavior of the global `PluginRepository`, was changed by c5a19fe for absolutely no good reasons.; It breaks a very basic functionaliy ( you can always load a library that is in your working directory ), also this change had some **interesting** side effects when basically you write a unit test which relies on; a scene file that uses a `RequiredPlugin`... that shortcoming was somewhat hidden by having all tests relying on `SofaGTest`, whose sole reason of being is to actually amend c5a19fe by populating the PluginRepository with the current working dir. Some additional functionalities are added to `RequiredPlugin` by this PR, namely the ability to specify other suffixes ( or no suffix at all ) to prepend when attemtping to load a plugin with a name hint. . # CHANGELOG ; FIX; [SofaHelper]; - Restore the `SOFA_LIBSUFFIX` behavior with msvc; - `PluginRepository` is initialized to contain the current working directory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:146,plugin,plugin,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,4,"['Plugin', 'plugin']","['PluginManager', 'PluginRepository', 'plugin']"
Modifiability,"I don't know about the status of this component, but I just want to keep the compatibility with this component in my matrix refactoring branch. Note that there is a similar component in BeamAdapter: AdaptiveBeamForceFieldAndMass",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1272876179:124,refactor,refactoring,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367#issuecomment-1272876179,2,"['Adapt', 'refactor']","['AdaptiveBeamForceFieldAndMass', 'refactoring']"
Modifiability,"I don't think so because components are destroyed in the unload. On Fri, Sep 23, 2022, 16:43 Paul Scheikl ***@***.***> wrote:. > @alxbilger <https://github.com/alxbilger> Thanks!; >; > Before unload; > Total Base: 31970 31936 Diff: 34; > After unload; > Total Base: 31970 31939 Diff: 31; > Before unload; > Total Base: 32002 31968 Diff: 34; > After unload; > Total Base: 32002 31971 Diff: 31; > Before cleanup; > Total Base: 32002 32000 Diff: 2; > Total Base: 32002 32000 Diff: 2; > After cleanup; > Total Base: 32002 32001 Diff: 1; >; > So that looks ok, right? At least the difference is more or less constant.; > :D; > But the tracker only tracks actual objects, right? So Creators, Factories,; > and others that do not inherit from base are not tracked.; >; > Could it be a vector/map that constantly receives new values but is not; > cleanup up with reset/cleanup?; > Similar to what was happening in sofa-framework/SofaPython3#304; > <https://github.com/sofa-framework/SofaPython3/pull/304>; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256307109>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACQVHUANK4QVMDDWVFQIBHTV7W6ZRANCNFSM6AAAAAAQR3UB3M>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726:723,inherit,inherit,723,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256312726,1,['inherit'],['inherit']
Modifiability,"I don't think,. Graying out things, and more generally having them grouped in logical block, (as in http://doc.qt.io/qt-5/qtwidgets-widgets-groupbox-example.html) allow the user to very easily quickly understand the underlying logic that connect the fields. In addition graying things out is part of the user interface which, if well done should be separated as much as possible from your the functional logic of the component. Consequently I'm not sure that refactoring the internal logic of a component to please the GUI level is the way to go. . The difficulty with Sofa is that the components's data field (BaseObject) coherency checking is done by the component during init/reinit and the logic behind can be really complex (i.e. not just exclusive relation). We don't want to duplicate this logic at the GUI level. So...now I wonder if one solution could be to just set the ReadOnly flag in the Data during the init/reinit as well as when data changes and refresh the widget panel each time we are changing something. . This would result in the following processing: ; GUI -> Data(enableShadow) -> reinit()/update() -> change other data to be readOnly -> GUI redisplay",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698:459,refactor,refactoring,459,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235#issuecomment-378953698,1,['refactor'],['refactoring']
Modifiability,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:150,config,config,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"I encountered a little issue during the compilation of SOFA using Visual Studio 2017. The configuration of SofaHelper's project, generated by CMake, seems incorrect. Indeed, during the linkage step, instead of looking for **libpng16.lib** (or libpng16d.lib) in **src/lib/win64/** (or /src/lib/win32), it searches **libpng.lib** (or libpngd.lib) in **build/SofaKernel/SofaFramework/SofaHelper**. At the moment, the workaround is to copy-paste and rename the concerned libraries, or manually edit the SofaHelper's project configuration inside Visual Studio to fix the path.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/443:90,config,configuration,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/443,2,['config'],['configuration']
Modifiability,I fixed the issue by refactoring deeply the component. But I have no idea why it appears.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/673#issuecomment-440318363:21,refactor,refactoring,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673#issuecomment-440318363,1,['refactor'],['refactoring']
Modifiability,"I flagged your message to have a look later. It does seem like a bug, however it is in a part of the code that was never finished (creating mechanical matrices including contributions below mappings), so is not currently used. As far as I know, for the same functionality within the Compliant/Flexible plugins they used a completely rewritten matrix construction code. This issue might be one reason why this version of the algorithm is not working, but there are probably other bugs in this code as well... Thanks for the notification !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545:293,Flexible,Flexible,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/145#issuecomment-286482545,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"I found the problem: the binaries shipped with the dependencies packages are compiled with a version of VS which is not 2013 or 2015. ; And if you dont use the same CRT version between fopen/fread/.... , libpng will crash.; http://stackoverflow.com/questions/29208826/libpng-1-616-crashing-on-png-read-png-in-vs2012-c :. > ; > You are passing a (FILE*) to libpng, probably using png_init_io. Visual Studio crashes inside fread when it tries to access the underlying FILE structure.; > ; > This is because you created the FILE* using fopen from one Visual Studio runtime but libpng is linked against a different Visual Studio runtime (msvcrt or something like that); the two runtimes are incompatible. And it is currently wokring with the present ImagePNG because this class set its own read function() to libpng using ; `png_set_read_fn(PNG_reader, file, png_my_read_data);`; But CImg does not.; The solution is to built new version of the binaries for each supported Visual Studio version (2013 and 2015 in our case). Moreover, we need to ship as well the debug version of those libraries, as libpng is incompatible between release and debug configurations (e.g you compile Sofa in debug and load it with libpng.dll, it will crash if you use libpng ; and vice-versa)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546:1143,config,configurations,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185#issuecomment-286420546,1,['config'],['configurations']
Modifiability,"I generated a list of all the uniques Data typenames present in the caduceus scene's components (on the left hand side, 1 example of datafield name matching to given typename:. **BaseData::getValueTypeInfo()->name()**|**BaseData::getName()**; -- | --; bool | listening; double | zFar; fixed_array&lt;Vec3d,2> | box; float | exponent; int | pivot; Mat4x4d | transformation; Quatd | orientation; ResizableExtVector&lt;Edge> | edges; ResizableExtVector&lt;int> | vertNormIdx; ResizableExtVector&lt;Quad> | quads; ResizableExtVector&lt;Triangle> | triangles; ResizableExtVector&lt;Vec2f> | texcoords; ResizableExtVector&lt;Vec3f> | bitangents; std::set&lt;int> | group; string | name; TagSet | tags; unknown | bbox; unsigned int | shadowTextureSize; unsigned short | textureUnit; Vec2f | translationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of u",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:1558,plugin,pluginName,1558,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613,1,['plugin'],['pluginName']
Modifiability,"I got the problem with Windows (no Eigen3Config.cmake) with a custom out-of-tree plugin.; The problem is that this file is ""unconfigured"" (Eigen3Config.cmake.in) while extracting the Eigen archive directly.; You need a pass of Cmake/""compilation""/install to have a full directory with a configured Eigen3Config.cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757:81,plugin,plugin,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1348#issuecomment-619366757,2,"['config', 'plugin']","['configured', 'plugin']"
Modifiability,I guess this is just because the first fetchable plugins' configuration file started with `3.11` and with the game of copy-paste....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4886#issuecomment-2270108490:49,plugin,plugins,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4886#issuecomment-2270108490,2,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,"I guess this will break the Flexible plugin compilation.; Do you plane to commit it back in a public plugin? In which case, Flexible could link with this plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716:28,Flexible,Flexible,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251440716,5,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,I guess yes because this is an empty variable. It is only used in the callbacks code to check: .empty() and not using it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2459#issuecomment-963959595:37,variab,variable,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2459#issuecomment-963959595,1,['variab'],['variable']
Modifiability,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:238,plugin,plugin,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098,2,['plugin'],['plugin']
Modifiability,"I have a class method which calls a python function so I can easily script the functionality of that method. The implementation itself is something like this:. ```; VNCS::Real VNCS::PythonBlendingField::blending(const VNCS::Point_3 &p) const; {; // py::scoped_interpreter interpreter{};; std::array<double, 3> pyP{p[0], p[1], p[2]};; std::string modulePath = m_module.getRelativePath();; py::object blendingFieldModule = py::module::import(modulePath.c_str());; py::object blendingFieldAttr = blendingFieldModule.attr(""blendingField"");; double result = blendingFieldAttr(pyP).cast<double>();; return 0;; }; ```. However, this fails. Its not able to import the module. I have also tried with other modules like numpy or sys, but I have the same issue, a segfault. I ahve also tried to add an interpreter, but pybind11 complains about already having one interpreter, which I guess is related with the SofaPython3 one and therefore I believe this whole problem is because is trying to use from a plugin, the interpreter in another plugin. . Any idea of what I could do to fix this issue?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1544:993,plugin,plugin,993,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1544,2,['plugin'],['plugin']
Modifiability,"I have a debug compilation of SOFA with SofaPython3 plugin and when I try to assign in python to the rest position of a mechanical object, I get a crash due to the MO having size = 0. I am not sure how I should resize it from python or how to fix this. . ``` ; xN_mo = xNObject.addObject(""MechanicalObject"", template=""Vec1"", name=""xN_MO""); # xN_mo.resize(3) // Doesnt work; # xN_mo.size = 3 // Doesnt work; xN_mo.rest_position = np.array([[0,0.25,0.75]]).T; ```. This is the actual code, but no idea how to actually make it work... is this a known bug? How should I make it work?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1517:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1517,1,['plugin'],['plugin']
Modifiability,"I have a multimap in a plugin and I am unable to create it. ; The header file looks like this; ```; template <typename TIn>; class CPFMapping : public sofa::core::MultiMapping<TIn, TIn>; public:; SOFA_CLASS(SOFA_TEMPLATE(CPFMapping, TIn), //; SOFA_TEMPLATE2(sofa::core::MultiMapping, TIn, TIn));; CPFMapping(); : Inherit(); , m_C(initData(&m_C, ""C"", ""Cluster Matrix"")); {; }; ...; };; ```. and I register in the factory like this:; ```; static int register_testComponent =; sofa::core::RegisterObject(""CPFMapping"").add<CPFMapping<sofa::defaulttype::Vec3Types>>();; ```. When trying to create the component with python; ```; final.addObject(""CPFMapping"",; template=""Vec3"",; ```. I get the following error; ```; The object is in the factory but cannot be created. ; Requested template: Vec3d,Vec3d(Vec3d,Vec3d) ; Available templates: Vec3d,Vec3d, ; ```; I have tried `Vec3`, `Vec3d`, `Vec3,Vec3` and `Vec3d,Vec3d` without success. ; Not sure if this is a bug in SOFA or if I am doing something wrong with my component.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1293:23,plugin,plugin,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1293,2,"['Inherit', 'plugin']","['Inherit', 'plugin']"
Modifiability,"I have a plugin with custom components which I try to use in a python3 scene, but SOFA segfaults when trying to add them to the scene. . My component code is pretty simple, is a basic example. ```; namespace VNCS; {; template <typename DataType>; class Clustering : public sofa::core::objectmodel::BaseObject; {; using Inherit = typename sofa::core::objectmodel::BaseObject;; using Real = typename DataType::Real;. public:; SOFA_CLASS(SOFA_TEMPLATE(VNCS::Clustering, DataType), sofa::core::objectmodel::BaseObject);. Clustering(); : Inherit(); {; }. private:; };; } // namespace VNCS; ```. but a scene contain a component like this fails to load. ```; ...; fineObject = simulationNode.addChild(""Fine""); dObject = fineObject.addChild(""dObject""); dObject.addObject(""MechanicalObject"", template=""Vec1"", name=""d_MO""); dObject.addObject(""Clustering"", template=""Vec1"", name=""Clustering""); ```. with the following backtrace. ```; ########## SIG 11 - SIGSEGV: segfault ##########; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaHelper.so.20.06.99(sofa::helper::BackTrace::dump()+0x23) [0x7fa97395db13]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaHelper.so.20.06.99(sofa::helper::BackTrace::sig(int)+0x1df) [0x7fa97395deaf]; -> /usr/lib/libc.so.6(+0x3d6a0) [0x7fa9731316a0]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaCore.so.20.06.99(sofa::core::objectmodel::Base::findDataLinkDest(sofa::core::objectmodel::BaseData*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, sofa::core::objectmodel::BaseLink const*)+0x7c) [0x7fa97464790c]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaCore.so.20.06.99(sofa::core::objectmodel::BaseNode::setObjectContext(boost::intrusive_ptr<sofa::core::objectmodel::BaseObject>)+0x61) [0x7fa974664f11]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaSimulationCore.so.20.06.99(sofa::simulation::Node::doAddObject(boost::intrusive_ptr<sofa::core::objectmodel::BaseObject>)+0x40) [0x7fa974a57ef0]; -> /home/jjcasmar/D/libs/builds",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1476:9,plugin,plugin,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1476,3,"['Inherit', 'plugin']","['Inherit', 'plugin']"
Modifiability,"I have another question for `ninja`.; When I select the ninja option. Then the error occurs like this.; `CMake Error: CMake was unable to find a build program corresponding to ""Ninja"". CMAKE_MAKE_PROGRAM is not set. You probably need to select a different build tool.; CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage; CMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage; Configuring incomplete, errors occurred!`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1372047102:393,Config,Configuring,393,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425#issuecomment-1372047102,1,['Config'],['Configuring']
Modifiability,"I have compiled and installed SOFA master branch with the CGAL plugin. In the compilation folder, under lib, I have libCGALPlugin.so, and if I do ldd libCGALPlugin.so, it founds all the dependencies. However, if I install SOFA, (`cmake --build . --target install`), libCGALPlugin.so is moved to a plugins folders, under `<install>/plugins/CGALPlugin/lib`, and ldd now shows that libCGALPlugin.so can't find all the dependencies. . Ive search a bit and apparently, the rpath is set to `$ORIGIN/../lib`, which is okay when the library is directly in the `<builddir>/lib` folder, but fails if the library is in `<installdir>/plugins/CGALPlugin/lib/`. . Due to this, its not possible to load the plugin. . This happens not only with with plugins, but for example also with `libSofaComponentAll.so`. It tries to load `libSofaOpenglVisual.so`. In the <builddir> works fine because both are under `<builddir>/lib`, but when installed, `libSofaOpenglVisual.so` is moved to `<installdir>/lib/SofaOpenglVisual/lib`, where `libSofaComponentAll.so` is not searching.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1560:63,plugin,plugin,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1560,6,['plugin'],"['plugin', 'plugins']"
Modifiability,"I have created a pull request with an initial working solution to this problem. I have updated the references to the unknown library _std::filesystem_ and rewrite them as namespace _fs_. Additionally, I have include the old headers for this library from its experimental version at **gcc-8**, so there is a possibility to use the correct ones depending on the compiler version it is used. I have created a pull request [#3994](https://github.com/sofa-framework/sofa/pull/3944).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019:155,rewrite,rewrite,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3943#issuecomment-1587255019,1,['rewrite'],['rewrite']
Modifiability,"I have no preference.; Either at each QApplication::translate (more verbose but more explicit) or using a more global preprocess variable (less verbose, as suggested by Damien)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264839355:129,variab,variable,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264839355,1,['variab'],['variable']
Modifiability,"I have several objections with this PR. ; - the mechanism relies on a specific symbol lookup. So in order to make a plugin auto-loadable, you need to recompile the plugin which design wise is not so great. ; - It also has the major downside of having to load the library to know if the plugin is auto-loadable, which in the end results in having to load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:116,plugin,plugin,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188,7,"['plugin', 'variab']","['plugin', 'plugins', 'variables']"
Modifiability,"I have tried something like that and doesnt work. Following what I found in the Flexible plugin I have two files. DeformationGradientTypes.h; ```; using Vec9 = sofa::defaulttype::Vec<9, double>;; using F33D = sofa::defaulttype::StdVectorTypes<VNCS::Vec9, VNCS::Vec9, double>;. } // namespace VNCS. template <>; struct sofa::defaulttype::DataTypeInfo<VNCS::F33D::Deriv>; : public FixedArrayTypeInfo<VNCS::F33D::Deriv, VNCS::F33D::Deriv::total_size> {; static std::string name(); {; std::ostringstream o;; o << ""F33D"";; return o.str();; }; };. template <>; struct sofa::defaulttype::DataTypeName<VNCS::F33D::Coord> {; static const char *name() { return ""F33D::CoordOrDeriv""; }; };. template <>; inline const char *VNCS::F33D::Name(); {; return ""F33D"";; }; ```. and in my initPlugin.cpp. ```; #include ""DeformationGradientTypes.h""; ...; template class sofa::core::State<VNCS::F33D>;; template class sofa::component::container::MechanicalObject<VNCS::F33D>;; static sofa::defaulttype::RegisterTemplateAlias alias0(""F33D"", VNCS::F33D::Name());; ```. All this gives me the error I showed previously",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225:80,Flexible,Flexible,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524#issuecomment-706134225,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"I have tried the same steps as in #4130 before. But its been showing the same thing. I am a bit new to libpython, my system showed something like this when I tried; C:\Users\legion>python -m find_libpython; C:\Users\legion\AppData\Local\Programs\Python\Python39\python39.dll; But my PYTHON_ROOT and other variables point to python 3.8",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4493#issuecomment-1948146570:305,variab,variables,305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4493#issuecomment-1948146570,1,['variab'],['variables']
Modifiability,"I have two questions:; 1. Why having ""Plugin"" in the name? Not sure we have a strict policy on that but it looks like a bad practice to me.; 2. Why creating this plugin in SOFA repo and not in an external one?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1039317930:38,Plugin,Plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1039317930,2,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"I just add a remark (perhaps trivial) about the thread safe question.; From C++ 11 a static variable initialization is guaranteed to be thread safe only if it's instantiated inside a block scope (locally).; The DefaultStyleMessageFormatter::getInstance() method @jnbrunet implemented is guaranteed to be thread safe. That's called Meyers Singleton. ( http://www.modernescpp.com/index.php/thread-safe-initialization-of-a-singleton ); ; Another remark.; The same function DefaultStyleMessageFormatter::getInstance() returns a reference to a base class and the base class MessageFormatter is polymorphic, ; Isn't it better to return a pointer to the base class ?; static MessageFormatter *getInstance (); {; static DefaultStyleMessageFormatter instance;; return &instance;; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121:92,variab,variable,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-386037121,2,"['polymorphi', 'variab']","['polymorphic', 'variable']"
Modifiability,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:195,refactor,refactoring,195,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143,1,['refactor'],['refactoring']
Modifiability,"I just created separated issues for our 3 main tasks: deprecation, pluginization and issofa branches. Please use the appropriate ones (not this one) for future discussions. If issues are also needed for cleaning and documentation tasks, feel free to create them.; This issue can still be used for new suggestions or remarks so I let it open.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333147769:67,plugin,pluginization,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-333147769,1,['plugin'],['pluginization']
Modifiability,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:19,plugin,plugin-concerned,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500,1,['plugin'],['plugin-concerned']
Modifiability,"I just saw that only `applications/plugins/CGALPlugin/src/CGALPlugin/CuboidMesh.inl` needs OpenGL (calling directly gl*() functions).; I guess it was easier for you to include directly Sofa.GL but in my mind, it would be better to remove all the direct calls to OpenGL and use the drawtool functions (from `sofa/helper/visual/DrawTool.h`), especially it seems it is only to render points and tetrahedra.; Thus you wont need Sofa.GL (and be able to compile CGALPlugin without OpenGL)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-833605919:35,plugin,plugins,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2065#issuecomment-833605919,1,['plugin'],['plugins']
Modifiability,"I like the PR, but I am concern about the modifs in Compliant/Flexible.; I totally agree we did not use the printLog flag the right way, but the PR cannot be merged as it as it will create troubles in those plugins.; What would be the right way to keep the same semantic we wanted?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257:62,Flexible,Flexible,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285606257,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"I made some tests on godbolt, but I was not able to reproduce the crash. In any case, one day it would be great to remove the public inheritance from `std::vector` (but SofaCUDA probably doesn't agree).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724957130:133,inherit,inheritance,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180#issuecomment-1724957130,1,['inherit'],['inheritance']
Modifiability,"I made the code more concise, more efficient and clearer to me. It also removes the need of the variable which was initially shadowed. Let me know if you agree/disagree.; I also merged master.; I suggest also to move the methods definitions in the cpp file, but I did not want to be out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840:96,variab,variable,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840,1,['variab'],['variable']
Modifiability,"I managed to solve the issue. The main reason appeared to be the location of the ""python3"" directory. Apperently, it should be located one directory higher than the directory containing all the built DLLs. ; So I changed the the CMake variable `SP3_PYTHON_PACKAGES_DIRECTORY` from ""python3/site-packages"" to ""**bin**/python3/site-packages"".; I also downgraded python from 3.9.1 to 3.7.9 and pulled the last commits from sofa master but I think the issue came from the python3 directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432:235,variab,variable,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1672#issuecomment-759396432,1,['variab'],['variable']
Modifiability,"I may also add two related old pr to the list, they are on the refactoring of create and canCreate methods :; - #3309; - #3311",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1708524747:63,refactor,refactoring,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1708524747,1,['refactor'],['refactoring']
Modifiability,"I mean the only thing that could be considered is whether on platforms like gcc the PluginRepository should contain **both** the working directory and `../lib`. But this question has never been an issue so far, so the default behaviour for initialisation should remain the one exposed in ca0402d",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746:84,Plugin,PluginRepository,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342566746,1,['Plugin'],['PluginRepository']
Modifiability,"I need the unstable veision for the softrobot plugin, but it always come to an error when I try to download. Thanks; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1362:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1362,1,['plugin'],['plugin']
Modifiability,I noticed this issue here and I am wondering if it is related to this issue I recently opened in the CGAL plugin repo: [issue](https://github.com/sofa-framework/CGALPlugin/issues/2) and [pull request](https://github.com/sofa-framework/CGALPlugin/pull/3). Just putting these links here for reference.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3058#issuecomment-1227685739:106,plugin,plugin,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3058#issuecomment-1227685739,1,['plugin'],['plugin']
Modifiability,"I once noticed that the Geomagic examples had been changed since 18.06, where the position data link had been removed to follow change in the constraint resolution API.; However, it would cause a delay, as we can see at my [post](https://www.sofa-framework.org/community/forum/topic/problem-about-geomagic-plugin-in-v18-12/); I think this issue stems from the update of handling linearised constraints in v18.06.; Now, sofa has been updated to v19.06 but this problem still has not been solved yet.; Can anyone notice about this problem?; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1148:306,plugin,plugin-in-,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1148,1,['plugin'],['plugin-in-']
Modifiability,"I presume it has nothing to do with Flexible, but it rather seems related to the mstate size. Maybe the test could be fixed, but what is important to notice is that this PR can have unexpected behaviors with existing code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437:36,Flexible,Flexible,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-311600437,1,['Flexible'],['Flexible']
Modifiability,"I propagated SofaPython dep changes in more plugins.; I also added a few quick-cleans, see my nice commit messages to get the idea :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963:44,plugin,plugins,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875#issuecomment-788166963,1,['plugin'],['plugins']
Modifiability,"I propose a more readable code for the component BruteForceDetection. It is a crucial component, used in many Sofa scenes, and yet it is hard to understand what it does.; Among the changes I propose:; - Split giant functions into multiple smaller functions; - Give meaningful names to functions, variables and types; - Merge simple operations which was hard to read into simple expressions; - Add a lot of comments. The algorithm stays the same. Note the number of lines is larger than before. It is the price for readability. It is mainly due to the several functions I added. I did not notice any performances drop. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1999:296,variab,variables,296,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1999,1,['variab'],['variables']
Modifiability,I really don't see the link of the two new crashes on Max / Linux : ; - optiTrack : with a crash from a libc++abi; ```; libc++abi.dylib: terminating with uncaught exception of type boost::exception_detail::clone_impl; ```; - a CPU scene with beams in SofaCUDA plugin with a strange timeout (that I can't reproduce locally). Does anyone has a clue?; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788:260,plugin,plugin,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/658#issuecomment-390139788,1,['plugin'],['plugin']
Modifiability,"I recently had a small problem when a plugin was implicitly loading SofaConstraint from the SOFA's installation because its compilation was depending on it, but runSofa was launched from the build directory, hence loading SofaConstraint two times (one from the build directory, and one from the installation directory). This resulted in these output from the object manager:. ```; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec2d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: ; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Default template for class SlidingConstraint already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Rigid3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class already registered: Vec2d; [WARNING] [ObjectFactory] Class already registered: Vec3d; [WARNING] [ObjectFactory] Class already registered: Vec1d; [WARNING] [ObjectFactory] Class a",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1652:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652,1,['plugin'],['plugin']
Modifiability,"I see no usage of addSubMBKToMatrix in our team's plugins, so it should be ok to remove it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878144095:50,plugin,plugins,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878144095,1,['plugin'],['plugins']
Modifiability,"I see that this PR is adding ~10MB of data (from the stl files).; I think we should wait for this plugin to be externalized (on an other repo) to merge this example, otherwise the history of this repo will contain those files, and the SOFA repo history is already so cluttered 🤪; what do you think @hugtalbot ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1078786133:98,plugin,plugin,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1078786133,1,['plugin'],['plugin']
Modifiability,"I see two options:; - We remove it and @fspadoni copies it in his plugin; - We keep it (or move it in the multithreadplugin). In this case, we need to have a reason to keep it, such as an example of an implementation of such a visitor. @fspadoni Would you like to explain how it works? I may have some interests to implement some myself.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-818443752:66,plugin,plugin,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-818443752,1,['plugin'],['plugin']
Modifiability,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:225,refactor,refactoring,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707,1,['refactor'],['refactoring']
Modifiability,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:318,plugin,plugins,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943,5,"['config', 'plugin']","['configuration', 'plugin', 'plugins']"
Modifiability,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:147,variab,variable,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259,1,['variab'],['variable']
Modifiability,I suppose it is an old macro. Was not accesible from cmake config and always equal to true if compiled in debug mode. only a few code was using it and were already checking NDebug as well. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1232:59,config,config,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1232,1,['config'],['config']
Modifiability,"I switched to the dark side, running emacs as my IDE :smiling_imp:, and I was testing it on SOFA's codebase. (If you like coding & navigating through SOFA's codebase without having QtCreator transforming your laptop into an airplane, you should try it, it's great!) ; Anyway, I'd like to suggest adding some stuff to the .gitignore file:. * emacs auto-generates autosave files that have the following formats: `#*` and `~*` ; * When running emacs as an IDE, an emacs package called `projectile` creates a file called `.dir-locals.el`, containing project configuration, compilation, and running instructions for emacs in the project's root folder.; * Finally, Emacs uses `clangd` or `ccls` as its language servers. these programs store their index (LSP data for the project's codebase) in `.cache/` and `.ccls-cache/` respectively. clangd & ccls both require cmake to generate a `compile_commands.json` file, which we also don't want to be committed in the git repository. I also noticed that SOFA doesn't have a `.clang-format` file. A clang-format file gives great hints to contributors, regarding the formating guidelines for SOFA. This .clang-format file respects the [coding guidelines described here](https://www.sofa-framework.org/community/doc/programming-with-sofa/guidelines/); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884:554,config,configuration,554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884,1,['config'],['configuration']
Modifiability,"I tested your work yesterday in the evening and I really appreciated the easy usage! I would like to add some remarks that might be interesting for future improvements:; 1. If there is a possibility to use the advanced timer at initialization (see #357), where do we need to perform changes to use your code? I would guess the main changes have to be made in [PythonAdvancedTimer.py](https://github.com/mimesis-inria/sofa/blob/0e1a298aa41f666eb792d846101be36352dbb5b3/applications/plugins/SofaPython/python/SofaPython/PythonAdvancedTimer.py) and in the reading of the json file, since the first time step has the identifier 0.; 2. Currently -c and your time evaluation exist side by side. Is it possible to combine your work with the command line argument -c?; 3. Similarly, your time evaluation exists side by side with the command -n (this variable is used in batch mode when launching the simulation for a certain number of steps). When running my simulation, I realized, your number of steps and the number of steps given by the command line add up. Again here, it would be valuable to know: how is it possible to directly use the command line argument?. More ideas might follow, thank you for your investment of time in this nice feature that I will use certainly!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542:481,plugin,plugins,481,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324873542,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,I think - except by implementing a complicated check on time step change in both of the above components - we are good here. Only one thing remain TMO as discussed with @alxbilger : we could create a test scene inspired from caduceus using a python controller decreasing progressively the time step to check that in this configuration the simulation smoothly handles the change of time step. Anything else?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1564497074:321,config,configuration,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1564497074,1,['config'],['configuration']
Modifiability,I think that this task is connected to several topics:. - connection of SOFA with other libraries (other modeling / visualization / collision tools); - adapt the simulation pipeline and have more control on it (ASSIST..) ; - hot restart of the simulation ; - helping the debug (which is not due to C++ problem but wrong parametrization / init of the simulation),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805:152,adapt,adapt,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2005#issuecomment-1559256805,1,['adapt'],['adapt']
Modifiability,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:1240,evolve,evolve,1240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802,1,['evolve'],['evolve']
Modifiability,I think there is some issues with the CI as the communication plugin ran fine on my MacOS. What do you say @ErwanDouaille ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-387009105:62,plugin,plugin,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-387009105,1,['plugin'],['plugin']
Modifiability,"I think this has some benefits:; - the features are already merged in the master branch and *should* work without the hassle of merging different dev branches; - they are OFF by default, so they are not disturbing anyone. But we should take care of the following:; - they must be tested (at least ONE ci config should activate them); - they are not meant to stay ""experimental"" forever, so there is an implicit contract to move them to ""non-experimental"" as soon as they are ready and working. ""EXPERIMENTAL_FEATURES"" must not be the carpet above the decisions we don't make. Typically, an ""experimental"" feature in release N should be merged in release N+1.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607:304,config,config,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-345207607,1,['config'],['config']
Modifiability,"I think this is because you need to call the bwdInit after the init and addContact calls when this parameter is used (by checking quickly the code). It is harmless when the template is Vec3D but it prepares the computation for when you want to keep the orientation -> again this is really a bad API and might require some refactoring. . If you still have the diff locally, could you try this ? I guess the usability of your feature would really gain from this if it was working. But if this doesn't make any change, I am ok with the state of the PR. . Tell me how it goes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086:322,refactor,refactoring,322,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086,1,['refactor'],['refactoring']
Modifiability,"I thought Flexible or Compliant would have needed it but after grepping into them, no result as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040551486:10,Flexible,Flexible,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040551486,1,['Flexible'],['Flexible']
Modifiability,I thought it was as well...; I will check if we could easily put the openHaptics code into ifdef so we still compile the rest of the plugin.; (parce que ya pas marqué CI sur mon front ;) ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846618094:133,plugin,plugin,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2113#issuecomment-846618094,1,['plugin'],['plugin']
Modifiability,"I took into account @damienmarchal 's comment; Scene updated, tested and working properly. Regarding changes (refactoring) proposed by @epernod, this must be done in another PR. I do not want to refactor only obj export, otherwise SOFA would be inconsistent (look at STLExporter, VTKExporter).; I would therefore like to refactor all exporters as a clean I/O API! This will take some efforts and this is not related to this PR (which just fix and add the obj export in MeshExporter). I set this one as to review again then.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772:110,refactor,refactoring,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1789#issuecomment-785262772,3,['refactor'],"['refactor', 'refactoring']"
Modifiability,I totally agree on the fact that the PluginManager widget in the Qt GUI is irrelevant now (useless to load a plugin manually AFTER loading the scene using element from it).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715:37,Plugin,PluginManager,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487#issuecomment-338581715,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"I tried with some scenes with BeamAdapter and there are crashes & stuff 😬; - the one in RestShapeSS was quite easy to spot.; - got problem too with `AdaptiveBeamForceFieldAndMass<DataTypes>::addForce` too when trying `SingleBeamDeployment.scn`.; I am suspecting there are some problems with size/resize/topologyChange because SingleBeam.scn works well (I think 😅); - the much more complicated scene `scenes/3instruments_collis.scn` has a problem with AdvancedTimer, while trying to find an id in the idmap. I am suspecting a corruption going somewhere else but no idea where.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432511853:149,Adapt,AdaptiveBeamForceFieldAndMass,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432511853,1,['Adapt'],['AdaptiveBeamForceFieldAndMass']
Modifiability,"I tried with the imgui GUI in a clean build.; I confirm that `runSofa -l SofaImGui -g imgui` creates a file _lastUsedGUI.ini_, with `imgui` inside.; Then, if I run `runSofa -l SofaImGui`, as expected, it loads the last used gui (found in the file).; However, it does not work with `runSofa` (without the `-l SofaImGui`). Normal, since the plugin is not loaded. It would be the same situation with a double-click on the executable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1137219817:339,plugin,plugin,339,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2979#issuecomment-1137219817,1,['plugin'],['plugin']
Modifiability,"I used the given CMakeList code in ""Create your scene in C++"" page to test the given source code in the same page. But when I run cmake to build, the error occured. I know where the SofaFrameworkConfig.cmake is and i had tied to change ""find_package(SofaFramework REQUIRED)"" to ""find_package(/home/user_name/sofa/src/sofabuild/install/lib/cmake/SofaFramework/SofaFramework REQUIRED)"", then other errors occured, which is still about some Config.cmake files not found. CMake Error at CMakeLists.txt:7 (find_package):; By not providing ""FindSofaFramework.cmake"" in CMAKE_MODULE_PATH this; project has asked CMake to find a package configuration file provided by; ""SofaFramework"", but CMake did not find one. Could not find a package configuration file provided by ""SofaFramework""; with any of the following names:. SofaFrameworkConfig.cmake; sofaframework-config.cmake. Add the installation prefix of ""SofaFramework"" to CMAKE_PREFIX_PATH or set; ""SofaFramework_DIR"" to a directory containing one of the above files. If; ""SofaFramework"" provides a separate development package or SDK, be sure it; has been installed.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2784:438,Config,Config,438,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2784,4,"['Config', 'config']","['Config', 'config', 'configuration']"
Modifiability,"I wanted to pass on a flag after -n in a format such as -n infinite.; However, the general syntax constituted of a number after -n, such as: -g batch -n 20 (for 20 iterations).; Therefore the variable storing it was declared as an integer one and a lot of compilation errors came up when I tried to change to string variable and later on validate it for a digit or string.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519:192,variab,variable,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373103519,2,['variab'],['variable']
Modifiability,"I was able to reproduce this issue, when compiling Sofa and SofaPython3 in Debug mode. When trying to add `libSofaPython3.so` through the PluginManager, it first warns the user, that the `.so` was compiled in debug mode, while Sofa was compiled in Release mode (which is incorrect).; Then, on adding the library, the above mentioned error is printed. I confirmed with `ldd libSofaPython3.so` that ` libpython3.9.so.1.0` is actually `not found`. In Release mode, it also does not find it, but does not seem to care. When adding the path to `libpython3.9.so.1.0` to the `LD_LIBRARY_PATH`, it finds it, but `SofaRuntime` is missing required functions/attributes.; In Release; ```python; >>> dir(SofaRuntime); ['DataRepository', 'PluginRepository', 'Sofa', 'SofaRuntime', 'Timer', '__SofaPythonEnvironment_importedModules__', '__SofaPythonEnvironment_modulesExcludedFromReload', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', 'formatStackForSofa', 'getCategories', 'getPythonCallingPoint', 'getPythonCallingPointAsString', 'getSofaFormattedStringFromException', 'getStackForSofa', 'importPlugin', 'importlib', 'init', 'inspect', 'os', 'sendMessageFromException', 'sofaExceptHandler', 'sofaFormatHandler', 'sys', 'traceback', 'unloadModules']; ```; In Debug, only `'DataRepository', 'PluginRepository'` are present (error is thrown, that `unloadModules` is missing).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3192#issuecomment-1209157858:138,Plugin,PluginManager,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3192#issuecomment-1209157858,3,['Plugin'],"['PluginManager', 'PluginRepository']"
Modifiability,"I was looking at he ""stalled"" PR,. And was wondering about this one, it contains a lot of valuable work and it seems to be connected to the cleanig & refactoring work on topologies started by @epernod. . @guparan , @epernod , @untereiner, @StephaneCotin; what are your suggestion on how to move forward and have that work ""not lost"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-448503161:150,refactor,refactoring,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-448503161,1,['refactor'],['refactoring']
Modifiability,"I was searching for a marching cube to render an implicit field (a real one, given from any analytic formulation not just metaball or blobs union). . I didn't find one, is there any ? ; While I was searching I found a least 4 different variations ...and thus wonder if there is no opportunity to refactor a bit. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496:296,refactor,refactor,296,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496,1,['refactor'],['refactor']
Modifiability,"I was testing a benchmark scene with quite a lot of constraints (frictions) and:; (exactly the same scene); ```; master : 5000 iterations done in 203.986 s ( 24.5115 FPS); this PR : 5000 iterations done in 134.177 s ( 37.2643 FPS); ```; with just having to set `multithread=""true""` (and building multithreading plugin) this is **cool** 🥳. Edit: and it was with Windows/MSVC",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252:311,plugin,plugin,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-802383252,1,['plugin'],['plugin']
Modifiability,I was wondering if there is a way to catch the missing symbols at compile-time and I found this: https://cmake.org/cmake/help/latest/module/CheckCXXSymbolExists.html#module:CheckCXXSymbolExists. It's configuration time but it could be helpful. I tried to play with it but I was not able to make it work. I added the check in the `sofa_create_package_with_targets` macro.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1914295607:200,config,configuration,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4466#issuecomment-1914295607,1,['config'],['configuration']
Modifiability,I would add ImplicitEuler + CGSolver that are the initial reasons for being of SOFA. Personally I would remove the assembled solver for the first sofa-ng. For me it should become an external plugin and this code should be removed from the main sofa (the same way Compliant does).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295683125:191,plugin,plugin,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247#issuecomment-295683125,1,['plugin'],['plugin']
Modifiability,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531,1,['plugin'],['plugin']
Modifiability,"I'd like this PR to be reviewed as I think the new features are really nice, especially for the SoftRobots plugin. ; @damienmarchal would you agree to remove the WIP label?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1738#issuecomment-892055859:107,plugin,plugin,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1738#issuecomment-892055859,1,['plugin'],['plugin']
Modifiability,"I'd prefer to assume that the caller knows what he is doing and add the debug searching as a fallback:; ``` cpp; std::string pluginPath = findPlugin(pluginName);. if(pluginPath.empty() && DO_SPECIFIC_CODE_IN_DEBUG); {; // Plugin not found but we are in debug so let's try to load debug plugin; pluginPath = findPlugin(pluginName+""_d"");; }. if(pluginPath.empty()); {; const std::string msg = ""Plugin not found: \"""" + pluginName + ""\"""";; if (errlog); {; (*errlog) << msg << std::endl;; }; else; {; msg_error(""PluginManager"") << msg;; }; return false;; }. return loadPluginByPath(pluginPath, errlog);; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571:125,plugin,pluginPath,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465#issuecomment-335807571,12,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin', 'pluginName', 'pluginPath']"
Modifiability,I'll try to take some time to refactor this.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404097996:30,refactor,refactor,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-404097996,1,['refactor'],['refactor']
Modifiability,"I'll try, as soon as I can compile Sofa and all the plugins ( you know what I mean @hugtalbot ;) )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334714700:52,plugin,plugins,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-334714700,1,['plugin'],['plugins']
Modifiability,I'm a bit confused about config.h inclusion pipeline. Could you explain the necessity of having both initModule.h and config.h headers?; see #904,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431:25,config,config,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460980431,2,['config'],['config']
Modifiability,I'm closing this issue because this is now handlede into the sofapython3 refactoring.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-436678166:73,refactor,refactoring,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-436678166,1,['refactor'],['refactoring']
Modifiability,I'm closing this issue since SOFA is now available as a python module in the [SofaPython3](https://github.com/sofa-framework/plugin.SofaPython3) project.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741:125,plugin,plugin,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-629814741,1,['plugin'],['plugin']
Modifiability,"I'm closing this since the new awesome [SofaPython3 plugin](https://github.com/SofaDefrost/plugin.SofaPython3 ) does everything this PR was doing, but better.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572#issuecomment-538323558,2,['plugin'],['plugin']
Modifiability,"I'm sorry I can't make a minimal example. I tried in vain, all the crashing scenes I found are using private plugins.; @pedroperrusi is it the same for you?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887586263:109,plugin,plugins,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887586263,1,['plugin'],['plugins']
Modifiability,"I'm surprised this hasn't caused problem before, especially with mac os since I have a feeling its XCode's clang compiler often has different default settings (could be the reason why Stephane had weird problems when overriding some SOFA methods in his plugin on his mac, whereas no problem with GCC or Ubuntu's clang version). I just realized that we aren't using LTO in SOFA. At some points, we could converge towards a clean :. - visibility=hidden everywhere; - explicit public visibility with SOFA_EXPORT_DYNAMIC_LIBRARY; - LTO. Anyway, +1 for this PR, and I think we should discuss the default visibility and link-time optimizations at some point.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843:253,plugin,plugin,253,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1410#issuecomment-641086843,1,['plugin'],['plugin']
Modifiability,"I'm trying to install Sofa from the master branch with the Geomagic plugin. I'm getting the following error:. ```; /home/franc/sofa/src/applications/plugins/Geomagic/src/GeomagicDriver.cpp: In member function ‘void sofa::component::controller::GeomagicDriver::initDevice()’:; /home/franc/sofa/src/applications/plugins/Geomagic/src/GeomagicDriver.cpp:361:86: error: no matching function for call to ‘sofa::component::mapping::RigidMapping<sofa::defaulttype::StdRigidTypes<3, double>, sofa::defaulttype::ExtVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float> >::setModels(sofa::component::container::MechanicalObject<sofa::defaulttype::StdRigidTypes<3, double> >*, sofa::component::visualmodel::OglModel*)’; visualNode[i].mapping->setModels(rigidDOF.get(), visualNode[i].visu.get());; ^; In file included from /home/franc/sofa/src/SofaKernel/framework/sofa/helper/../../sofa/simulation/Node.h:51:0,; from /home/franc/sofa/src/SofaKernel/framework/sofa/helper/../../sofa/simulation/Simulation.h:25,; from /home/franc/sofa/src/SofaKernel/framework/sofa/helper/../../sofa/helper/AdvancedTimer.h:25,; from /home/franc/sofa/src/SofaKernel/SofaCommon/../modules/SofaBaseTopology/TopologyEngine.inl:29,; from /home/franc/sofa/src/SofaKernel/SofaCommon/../modules/SofaBaseTopology/TopologyData.inl:26,; from /home/franc/sofa/src/SofaKernel/SofaCommon/../modules/SofaBaseVisual/VisualModelImpl.h:34,; from /home/franc/sofa/src/SofaGeneral/../modules/SofaOpenglVisual/OglModel.h:34,; from /home/franc/sofa/src/applications/plugins/Geomagic/src/GeomagicDriver.h:33,; from /home/franc/sofa/src/applications/plugins/Geomagic/src/GeomagicDriver.cpp:23:. /home/franc/sofa/src/SofaKernel/framework/sofa/helper/../../sofa/core/Mapping.h:88:18: note: candidate: void sofa::core::Mapping<TIn, TOut>::setModels(sofa::core::State<DataTypes>*, sofa::core::State<TOut>*) [with TIn = sofa::defaulttype::StdRigidTypes<3, double>; TOut = sofa::defaulttype::ExtVectorTypes<sofa::defaulttype::Vec",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/892:68,plugin,plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/892,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"I've added the `v5.1.0-ModernInstall` branch to our fork. Actually this code wasn't on the repo itself so I just copied the files presents in SOFA and added my CMake configuration files. It compiles, you can try to add the find or fetch mechanism using this",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1938474654:166,config,configuration,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1938474654,1,['config'],['configuration']
Modifiability,"I've had another look at the code, and I've found:; - All `init` functions are trivial, except `helper::init` which calls `Console::init()` which *does* involve other `static` variables in `Console`; - All `init` functions happen in dlls which are linked in the `runSofa` binary (so they are not `dlopen`-ed on runtime as I thought they were). Based on this, my suggestion is to get rid of all `init/cleanup` functions, and put console data behind a 'nifty counter' to make sure `static` initialization and finalization is done correctly and automatically.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280284346:176,variab,variables,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280284346,1,['variab'],['variables']
Modifiability,"I've prepared a local version of the MultiThreading plugin that uses STL classes instead of boost, minus currently:; - boost::thread_specific_ptr; - boost::pool. I can create a pull request for this if there is interest.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-289836125:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-289836125,1,['plugin'],['plugin']
Modifiability,"I've tried to use this macro to insert the variable description into the Doxygen. Doxygen must use `MACRO_EXPANSION` to expand the macro and generate proper documentation. However, I couldn't find a way to add the description to the variable. I tried things similar to:; ```cpp; #define DOXYGEN_COMMENT_START / ## / ## /; #define SOFA_DATA(Type, VariableName, Help) \; Type VariableName; DOXYGEN_COMMENT_START Help. struct Foo; {; ///Classic class member; unsigned int m;. SOFA_DATA(unsigned int, n, ""A class member defined with SOFA_DATA""); };; ```. The Doxygen shows the variable with the right name, but not with the `Help`. ![image](https://user-images.githubusercontent.com/10572752/150516043-84224f48-2336-4ebe-9069-a6030a08a176.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2614#issuecomment-1018403897:43,variab,variable,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2614#issuecomment-1018403897,5,"['Variab', 'variab']","['VariableName', 'variable']"
Modifiability,"I,. I'm factoring the code that is in double/float template specialization using the design pattern used in the Image plugin (an external class Specialization which is friend to the class to specialize). . The code in:. ``` cpp; BilateralInteractionConstraint<Rigid3fTypes>::getConstraintResolution(...); BilateralInteractionConstraint<Rigid3dTypes>::getConstraintResolution(...); ```. is different. ; Float is using . ``` cpp; temp->tolerance = 0.0001;; ```. Double is using:. ``` cpp; temp->tolerance = 0.01;; ```. Can someone check if this is expected or if this a kind of ""someone change the value in one place and forgot the other"". . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45:118,plugin,plugin,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45,1,['plugin'],['plugin']
Modifiability,"IMO the complexity price we are paying right know in term of maintainability, code uglyness, bugs and weird issues it far bigger than the ""un-measure"" performance gain we expect. An our engineering time should be more useful in fixing all the crash/segfaul or performance issues because of n^2 algorithm (as in) than trying to get a totally minor (if any) performance increase because of switching from double to float. . So I recommand to only use Vec3Type in sofa instead of having both Vec3dType / Vec3fType, it will save thousand of man-month to invest more intelligent things. . As said by @jnbrunet, using Vec3Type allows to switch from float/double.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059:61,maintainab,maintainability,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-438814059,1,['maintainab'],['maintainability']
Modifiability,INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Grid.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Utility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:2063,Plugin,PluginManager,2063,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,ING] [ObjectFactory] Class already registered: MeshGmshLoader; [WARNING] [ObjectFactory] Class already registered: MeshOffLoader; [WARNING] [ObjectFactory] Class already registered: MeshSTLLoader; [WARNING] [ObjectFactory] Class already registered: MeshTrianLoader; [WARNING] [ObjectFactory] Class already registered: MeshXspLoader; [WARNING] [ObjectFactory] Class already registered: OffSequenceLoader; [WARNING] [ObjectFactory] Class already registered: SphereLoader; [WARNING] [ObjectFactory] Class already registered: StringMeshCreator; [WARNING] [ObjectFactory] Class already registered: VoxelGridLoader; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLoader/lib/libSofaGeneralLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExporter/lib/libSofaExporter.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSparseSolver/lib/libSofaSparseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaPreconditioner/lib/libSofaPreconditioner.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaHaptics/lib/libSofaHaptics.so; [WARNING] [ObjectFactory] Class already registered: CompareState; [WARNING] [ObjectFactory] Class already registered: CompareTopology; [WARNING] [ObjectFactory] Class already registered: DataController; [WARNING] [ObjectFactory] Class already registered: DataMonitor; [WARNING] [ObjectFactory] Class already registered: DevAngleCollisionMonitor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: DevMonitorManager; [WARNING] [ObjectFactory] Class already registered: DevTensionMonitor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: EvalPointsDistance<Rigid3d>; [WARNING] [Obje,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:29831,Plugin,PluginManager,29831,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"IPO state wont change anyway so it is useless to do the test every time. On Windows, this test takes 2sec (for a total of 7sec for a minimal SOFA configuration), so it is quite appreciable without it.; On linux (Ubuntu) it takes 200ms on my setup so barely perceptible... ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4191:146,config,configuration,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4191,1,['config'],['configuration']
Modifiability,"If Flexible compiles, this PR is ready to be merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293638606:3,Flexible,Flexible,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293638606,1,['Flexible'],['Flexible']
Modifiability,If I am not wrong the only difference is that it mutes the warnings of CImg and gtest with the `CMAKE_CURRENT_BINARY_DIR` variable in `SOFAFRAMEWORK_DEPENDENCY_INCLUDE_DIRECTORIES`. Why should I drop it ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/397#issuecomment-331203853:122,variab,variable,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397#issuecomment-331203853,1,['variab'],['variable']
Modifiability,"If a class inherits from `Base` it already has 2 `initData` overloads available. So why redefining them in the `SOFA_CLASS` macro?; The third overload is not defined in `Base`, so I did it and remove the one in `SOFA_CLASS`.; In summary, the 3 `initData` overloads are only defined in `Base` and nowhere else. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3190:11,inherit,inherits,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3190,1,['inherit'],['inherits']
Modifiability,"If it is in a plugin, you need to load this plugin to load an other plugin :yo_dawg:. <img src=""https://user-images.githubusercontent.com/11028016/162191671-72defde9-badc-4f99-b0a3-9ec70a40531e.jpg"" width=""300"" />. so `RequiredPlugin` should always be available, even if no plugin is loaded.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2849:14,plugin,plugin,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2849,4,['plugin'],['plugin']
Modifiability,"If multiple objects have their own ODE solver, they can be solved concurrently in the `FreeMotionAnimationLoop`. # Results. Scene: applications/plugins/MultiThreading/examples/5DeformableCubesConstraints.scn; Nb time steps: 1000. ```; Parallel ODE solving + parallel collision detection:; 22.9566 s ( 43.5605 FPS). ; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 3 0.37 1 0.38 7.85 2.88 0.92 2.88 12.69 ...FreeMotion; 3 3.42 1 0.72 6.29 2.32 0.66 2.32 10.22 ...CollisionDetection; . Sequential ODE solving + parallel collision detection:; 26.762 s ( 37.3664 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 3 0.35 1 1.23 10.94 7.05 1.98 7.05 26.62 ...FreeMotion; 3 7.57 1 0.74 7.04 2.33 0.64 2.33 8.81 ...CollisionDetection; . Sequential ODE solving + sequential collision detection:; 30.2183 s ( 33.0926 FPS). ; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 3 0.36 1 0.73 13.35 7.13 2 7.14 23.79 ...FreeMotion; 3 7.66 1 1.69 8.49 5.32 1.42 5.32 17.72 ...CollisionDetection; ```. The bottleneck is the constraint solving:; ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 5.89 1 0.38 75.75 15.49 11.98 15.49 68.37 ..ConstraintSolver; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2135:144,plugin,plugins,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2135,1,['plugin'],['plugins']
Modifiability,"If testing is enabled, the list of projects(i.e targets) gets very long at the root of the SOFA project. This PR lists all targets which is suffixed with __test_ or __simutest_ and put them into the ""Testing"" folder (where gtest, Sofa.Testing are located as well). ![Capture](https://user-images.githubusercontent.com/11028016/122558586-8bfb8b00-d03e-11eb-9043-49d204482cd0.PNG). This is done with a new custom macro called _sofa_get_all_targets_ which gives all the targets enabled in the project. Here in this PR, it is located at the end of the global CMakeLists, so it will also get tests related to external plugins, etc. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2190:613,plugin,plugins,613,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2190,1,['plugin'],['plugins']
Modifiability,"If the flag SOFA_NO_OPENGL is active, the plugin VolumetricRendering; cannot be compiled. Add the proper CMake warning and error message.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/110:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/110,1,['plugin'],['plugin']
Modifiability,"If you are using a Lagrange-multiplier-based resolution, you can use the [BilateralInteractionConstraint](https://github.com/sofa-framework/sofa/blob/master/examples/Components/constraint/BilateralInteractionConstraint.scn).; If not, you can use a projective attachement using [AttachConstraint](https://github.com/sofa-framework/sofa/blob/master/examples/Components/constraint/AttachConstraint.scn). A [post here](https://www.sofa-framework.org/community/forum/topic/attach-a-rigid-cube-to-flexible-fem-body/#post-17447) is discussing the difference between both.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2078#issuecomment-841470077:491,flexible,flexible-fem-body,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2078#issuecomment-841470077,1,['flexible'],['flexible-fem-body']
Modifiability,If you have a message saying that the texture cannot be loaded. ; This is probably because now image loading (png/jpg) is now done by a single plugin called CImgPlugin. So to load images you needs to compile CImgPlugin & load it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444:143,plugin,plugin,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-336571444,1,['plugin'],['plugin']
Modifiability,"If you want to hide methods in a inherited class because they don't really make sense in its API, private inheritance is usually the way to go. Inherited methods can still be made public in the derived class by selecting them with the `using` directive. . See [https://stackoverflow.com/a/675451](https://stackoverflow.com/a/675451)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923:33,inherit,inherited,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303154923,3,"['Inherit', 'inherit']","['Inherited', 'inheritance', 'inherited']"
Modifiability,Image plugin add python plugin as a dependency even if we do not compile the plugin with python support,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/135:6,plugin,plugin,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135,3,['plugin'],['plugin']
Modifiability,Image plugin installation does not preserve the file's hierarchy,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/136:6,plugin,plugin,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136,1,['plugin'],['plugin']
Modifiability,Implementation of new API since refactoring of matrix assembly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3967:32,refactor,refactoring,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3967,1,['refactor'],['refactoring']
Modifiability,"Implementation of the (2nd part of) proposal #281 . Quick Reminder:; - CMake generates the list of compiled plugins in a file (`plugin_list.conf.default`) at the configuration stage.; - runSofa loads this list at startup; - if the user creates a custom `plugin_list.conf`, it will load this list instead.; - add an option to bypass the file (thus disable automatic loading) in runSofa. Everything is done in the runSofa application (+small patch in the macro sofa_add_generic() in SofaFramework CMake modules ; that allows us to have a list of all added targets which is not possible in CMake 3.1) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301:108,plugin,plugins,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301,2,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,Implementations are sometimes in plugins and sometimes use a `d_multithreading` data.; We should find a way to make this homogeneous. Maybe as CUDA : a MTDataType ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2049:33,plugin,plugins,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049,1,['plugin'],['plugins']
Modifiability,"Implicit solvers can be optimized to compute faster if the mass matrix is diagonal. Currently this information is not used, whereas it is known by the mass component. Implicit solvers must be adapted and have a special branch for diagonal matrix for faster computation. See https://github.com/sofa-framework/sofa/pull/1903",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923:192,adapt,adapted,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923,1,['adapt'],['adapted']
Modifiability,"In #2777, a new API to assemble matrices was introduced. I used this new API to avoid the need to implement `addDForce` if `buildStiffnessMatrix` is already implemented. In other terms, it unifies the `addDForce` and `buildStiffnessMatrix` (previously it was `addKToMatrix`. Indeed, those two functions are very similar as they are related to the derivative of the force. This PR is a proof of concept that is not ready to be merged. Indeed, I noticed losses of performances. And I also would like to make sure with the CI that everything works perfectly. The concept is implemented only on force fields (not interactions), and only for stiffness (no damping), but I can be easily extended to damping and masses. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4010:681,extend,extended,681,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4010,1,['extend'],['extended']
Modifiability,"In #3838 we agreed on the misleading variable `symmetricMatrix` in the MechanicalParams.; I propose here a simple change using `m_supportOnlySymmetricMatrix` et associated read/write access function updates. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3861:37,variab,variable,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3861,1,['variab'],['variable']
Modifiability,"In ImplicitSurfaceContainer:; Class name didn't match and also the namespace of DiscreteGridField. In applications/plugin/CMakeLists.txt:; SofaVolumetricData depends on SofaDistanceGrid and SofaImplicitField, so should be added first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/422:115,plugin,plugin,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/422,1,['plugin'],['plugin']
Modifiability,In PR #1485 we introduce DataLink & AbstractDataLink; In PR #1490 we remove the duplicated SingleLink<> parentData in BaseData to ease further refactoring; In this PR we can now cleanly replace the use of the SingleLink<Data<T>> by a DataLink class in Data.h. Once that done:; - we will be able to finally remove from BaseData & Data the code that lay there just because of the use of SingleLink.; - then remove in Link & BaseLink all the code that lay there to support SingleLink<BaseData>. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1491:143,refactor,refactoring,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1491,1,['refactor'],['refactoring']
Modifiability,In PR description you should also say that there other stuff than Pluginmanager are removed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1612#issuecomment-730268703:66,Plugin,Pluginmanager,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1612#issuecomment-730268703,1,['Plugin'],['Pluginmanager']
Modifiability,"In advanced mode, would it be possible to have a link per line to abort all the compilations (every configs/platforms)?. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/203:100,config,configs,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/203,1,['config'],['configs']
Modifiability,"In both `LCPConstraintSolver` and `GenericConstraintSolver`, there is a list of constraint corrections as a class member. Both class inherits from the same base class and the lists are used equivalently. Therefore, I move them into the base class. I changed them from a `vector<BaseConstraintCorrection*>` to a `MultiLink`. These changes allows to unify `init`, `cleanup` and `removeConstraintCorrection` methods. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4117:133,inherit,inherits,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4117,1,['inherit'],['inherits']
Modifiability,"In collisionModel createPrevious method, propagate value from parent; ```cpp; pmodel->f_listening.setValue(f_listening.getValue());; pmodel->f_printLog.setValue(f_printLog.getValue());; ```. Fix bad resize method in ```CubeModel::ddCube```. Buffers where resized using the member ```size``` instead of a fix variable, previous code behavior:; ```cpp; int i = size; // size == 0; this->core::CollisionModel::resize(size+1);	// resize(0+1) -> size == 1 ; elems.resize(size+1); // elems.resize (1+1) instead of 0+1; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1202:308,variab,variable,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1202,1,['variab'],['variable']
Modifiability,In component FixeConstraint in function projectVelocity use Data flag instead of #define Flag to set velocity and free velocity to zero. ; @digitaltrainers and @matthieu-nesme . Suggested label enhance. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/288:194,enhance,enhance,194,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/288,1,['enhance'],['enhance']
Modifiability,"In debug, an exception is thrown and the program crashes. We can say that PSL.dll is not loaded. Try this code in debug:. ```c++; #include <iostream>; #include <algorithm>. int main(int argc, char *argv[]) ; {; std::string plugin(""PSL"");; std::string dotExt("".dll"");. const bool b = std::equal(dotExt.rbegin(), dotExt.rend(), plugin.rbegin());. if (b) std::cout << ""equal\n"";; else std::cout << ""not equal\n"";; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463:223,plugin,plugin,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376450463,2,['plugin'],['plugin']
Modifiability,"In f93e2b9 I wanted to restore the default behavior of ca0402d which had PluginRepository initialised with ; - the current working directory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment ht",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:73,Plugin,PluginRepository,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,3,"['Plugin', 'plugin']","['PluginRepository', 'plugins']"
Modifiability,"In https://github.com/sofa-framework/sofa/pull/1605, https://github.com/sofa-framework/sofa/pull/1611 and https://github.com/sofa-framework/sofa/pull/1632 were layed-out typeInfo subsystem refactoring. The general objective was to remove the ""magic"" and ODR violation of existing code.; The migration to the new system was postpone while NG refactoring & cleaning was progressing. ; Now it is done, let's go to deploy it. So in this step we are starting to use the new subsystem for ""selected"" type while printing a deprecation message for type that have not been migrated; . The PR shoul'nt break anything. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3288:189,refactor,refactoring,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3288,2,['refactor'],['refactoring']
Modifiability,"In https://github.com/sofa-framework/sofa/pull/3986, I introduced the computation of `H A^-1 H^T` in SparseLDLSolver. In this PR, I do the same but in the base class of all linear solvers. All linear solvers inheriting from `MatrixLinearSolver` can now benefit from this parallelization (except the matrix-free conjugate gradient). I benchmarked `examples/Demos/fallingBeamLagrangianCollision.scn`:. ```; <EigenSimplicialLDLT name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""true"" />; [INFO] [BatchGUI] 1000 iterations done in 46.8709 s ( 21.3352 FPS). <EigenSimplicialLDLT name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""false"" />; [INFO] [BatchGUI] 1000 iterations done in 95.1848 s ( 10.5059 FPS). <SparseLDLSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""false"" />; [INFO] [BatchGUI] 1000 iterations done in 146.778 s ( 6.813 FPS). <SparseLDLSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""true"" />; [INFO] [BatchGUI] 1000 iterations done in 68.7089 s ( 14.5542 FPS). . <SparseLUSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""true"" />; [INFO] [BatchGUI] 100 iterations done in 35.9595 s ( 2.7809 FPS). <SparseLUSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""false"" />; [INFO] [BatchGUI] 100 iterations done in 51.4465 s ( 1.94377 FPS).; ```. It indicates that `EigenSimplicialLDLT ` is faster than `SparseLDLSolver`. At least in this scene. It's not the case in `TorusFall.scn`. Two reasons to avoid the parallelization in the matrix-free CG:; 1. `GraphScatteredVector` is not default constructible; 2. Would not be thread-safe. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4255:208,inherit,inheriting,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4255,1,['inherit'],['inheriting']
Modifiability,"In my plugin I have derived a new type from `BaseObject`. ```class BlendingField : public sofa::core::objectmodel::BaseObject; {; virtual double blending(const Eigen::Vector3d &p) const = 0;; }; ```. In order to implemente this, I tried to add python bindings. ```; class BlendingField : public VNCS::BlendingField; {; public:; SOFA_CLASS(VNCS::py::BlendingField, VNCS::BlendingField);; BlendingField();; ~BlendingField() override;. VNCS::Real blending(const VNCS::Point_3 &p) const final;; };; ...; VNCS::Real VNCS::py::BlendingField::blending(const VNCS::Point_3 &p) const; {; const std::array<double, 3> pyP{p[0], p[1], p[2]};; PYBIND11_OVERLOAD_PURE(VNCS::Real, /* Return type */; VNCS::BlendingField, /* Parent class */; blending, /* Name of function in C++ (must match Python name) */; pyP /* Argument(s) */; );; }. void VNCS::py::module::blendingField(pybind11::module &m); {; pybind11::class_<VNCS::BlendingField, VNCS::py::BlendingField>(m, ""BlendingField""); .def(pybind11::init([](pybind11::args &args, pybind11::kwargs &kwargs) {; return new VNCS::py::BlendingField();; })); .def(""blending"", &VNCS::BlendingField::blending);; }; ```. This works fine in the sense that I can derive from BlendingField in SOFA, but I can't add it to a SOFA node, with the following error:. ```; [ERROR] [SofaPython3::SceneLoader] TypeError: addObject(): incompatible function arguments. The following argument types are supported:; 1. (self: Sofa.Core.Node, arg0: str, **kwargs) -> object; 2. (self: Sofa.Core.Node, arg0: Sofa.Core.Object) -> object. Invoked with: <Sofa.Core.Node object at 0x7fffac34bef0>, <prepare_scene.TestBlendingField object at 0x7fffac34bea0>; ```. Somehow, it looks that SOFA can't see the my class derives from sofa::core::objectmodel::BaseObject. I have tried to find any example of any other plugin creating its own bindings but couldn't find any. ; Any help with this would be amazing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1547:6,plugin,plugin,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1547,2,['plugin'],['plugin']
Modifiability,"In order for SofaGuiQt to find NodeEditor a custom FindNodeEditorConfig.cmake was created in cmake/Modules but this file was obfuscating the real NodeEditorConfig.cmake that is packaged with the NodeEditor library when trying to find_package it in external plugins. I modified the CMakeLists.txt in sofa/gui/qt/ to use the proper find_package and link correctly to the NodeEditor::nodes target. This PR also fixes some unintentional renamings that were causing compile issue when SOFAGUIQT_ENABLE_NODEGRAPH is set to ON (it would be nice to be able to test this on the CI, or at least to build with SOFAGUIQT_ENABLE_NODEGRAPH=ON so that this doesn't happen again. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1424:257,plugin,plugins,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1424,1,['plugin'],['plugins']
Modifiability,In past PR we have removed the use of a Link to store link between two data and we use DataLink instead. ; As Link cannot store anymore a link between Data the type traits code can be removed from Link.h and BaseLink.h. . This is what this PR does (removing the un-needed). . The next step will consist in refactoring the whole Link to separate SingleLink & MultiLink. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1503:306,refactor,refactoring,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503,1,['refactor'],['refactoring']
Modifiability,"In some cases (which ones?), gcc does not link against pthread which is necessary for the recently added AsyncSparseLDLSolver.; I got the case on the latest gcc on Manjaro (`gcc version 11.1.0`), and at least one other user is reported the same error #2736 . Same configuration with clang worked fine without so I suppose the added library comes from somewhere (but I dont where/what). ; This PR adds the necessary library in any case. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2739:264,config,configuration,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2739,1,['config'],['configuration']
Modifiability,"In that case, I fully agree with @fredroy's opinion on letting a third-party library handle the rendering code. Sofa is not a rendering tool after all, and given the pace at which frameworks evolve (and even replace each other..) I think it draws too much workload away from the actual SOFA stuff",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395036251:191,evolve,evolve,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395036251,1,['evolve'],['evolve']
Modifiability,"In the continuity of #1442 . Now plugin is here: https://github.com/sofa-framework/PSL. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4047:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4047,1,['plugin'],['plugin']
Modifiability,Include of inl classes inheriting from ForceField should be done. Another PR will be open .; → closed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3806#issuecomment-1541600321:23,inherit,inheriting,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3806#issuecomment-1541600321,1,['inherit'],['inheriting']
Modifiability,"Indeed, @m4n4n could you try to refactor your code to avoid this big duplication?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844:32,refactor,refactor,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378611844,1,['refactor'],['refactor']
Modifiability,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:148,refactor,refactoring,148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346,2,"['inherit', 'refactor']","['inheritance', 'refactoring']"
Modifiability,"Indeed, when compiled, SofaPython3 is not included in the automatically-loaded list of plugins.; But you can load the plugin at run-time using command-line arguments:; `runSofa -l SofaPython3 <yousceneinpython.py>`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786455025:87,plugin,plugins,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1786455025,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Indeed. I understand the problem, the mechanism also unloads the plugin's modules defined in c++. This modules are added to the sofa python environment while loading the plugin, so they cannot be imported again after being unloaded. I'll fix that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170:65,plugin,plugin,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-288406170,2,['plugin'],['plugin']
Modifiability,"Initially I wanted to fix issue #673 that prevents compilation with gcc > 8.1. But I was not able to prevent myself to refactore the class in the process. . CHANGELOG:; - Move the implementation from .h to .inl; - Move the definition of the inner class FCPHandler from the .h to .inl; - Group the class member according their visibility (public, protected, private) to avoid interleaving.; - Uniformize the source code comments; - Rename the class members (attributes) to make them consistent with the sofa coding style.; - Factorize the code that was ""duplicated"" in the .cpp between rigid3dtype, rigid3ftype, vec3d, vec3f (I welcome an alternative implementation). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/803:119,refactor,refactore,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/803,1,['refactor'],['refactore']
Modifiability,"Instead of adding `libjpeg` as a dependency on the core of Sofa, I would support doing the opposite, i.e. removing `libpng+zlib` by only keeping the abstract `Image` class in `sofa::helper`, and including the derived classes in plugins, where we could only use by default the Qt-based implementation, so only for projects choosing not to include the Qt GUI they would have to enable the other implementations based on libpng/libjpeg, or CImg, or whatever is easier to integrate, given that it's a nearly trivial piece of code to implement to plug any image library. But it does require to be consistent in the resulting format (in particular whether the data is provided `TopDown` or `BottomUp`).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665:228,plugin,plugins,228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-261507665,1,['plugin'],['plugins']
Modifiability,"Instead of setting environment variables, we could call [imbue](http://en.cppreference.com/w/cpp/io/basic_ios/imbue) on input streams prior to parsing?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/151#issuecomment-284450056:31,variab,variables,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-284450056,1,['variab'],['variables']
Modifiability,"Instead of suggesting to add the required plugins in the XML syntax, the goal is to use the scene loader to adapt the syntax to the type of file. For example, in Python, the message will be:. ```; [WARNING] [SceneCheckMissingRequiredPlugin] This scene is using component defined in plugins but is not importing the required plugins. ; Your scene may not work on a sofa environment with different pre-loaded plugins. ; To fix your scene and remove this warning you just need to cut & paste the following lines at the beginning of your scene: ; root.addObject('RequiredPlugin', name='Sofa.Component.AnimationLoop') # Needed to use components [FreeMotionAnimationLoop] ; root.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Algorithm') # Needed to use components [BVHNarrowPhase,BruteForceBroadPhase,BruteForceDetection,CollisionPipeline] ; root.addObject('RequiredPlugin', name='Sofa.Component.Collision.Detection.Intersection') # Needed to use components [LocalMinDistance] ; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3799:42,plugin,plugins,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3799,5,"['adapt', 'plugin']","['adapt', 'plugins']"
Modifiability,"Instead, I use raw gpu pointers. I measured the performances on the scene `applications\plugins\SofaCUDA\scenes\benchmarks\CudaTetrahedronTLEDForceField_beam10x10x40_gpu.scn` on 50k time steps:. ```; before; [INFO] [BatchGUI] 50000 iterations done in 11.9961 s ( 4168.04 FPS). after; [INFO] [BatchGUI] 50000 iterations done in 10.3888 s ( 4812.87 FPS).; ```. Note that I did not change anything in the algorithm, except the following check:. ```cpp; if (FCrds.y < 0 || FCrds.y >= nbElements); {; FCrds.y = 0;; }; ```. I had to add this check because `FCrds.y` was often equal to `-1`, which then leads to out-of-bounds vector access. This check was not required before, because out-of-bounds texture returns 0.; I don't know if this behavior is intended or not. TODO:. - [x] Test that `CudaTetrahedronTLEDForceField` now compiles with CUDA 12. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3650:88,plugin,plugins,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3650,1,['plugin'],['plugins']
Modifiability,"Interesting PR.; Work on merging BaseContext and BaseNode should first be addressed since the iterator would need to be able to iterate on both, but they have a different inheritance. To be further discussed in a STC!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1864102974:171,inherit,inheritance,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1864102974,1,['inherit'],['inheritance']
Modifiability,"Intersector, IntrUtility3, IntrTriangleOBB, IntrSphereOBB, IntrOBBOBB, IntrCapsuleOBB, RigidCapsule... (not exhaustive) come from a library called GeometricTools .; It would be great to move those classes into a independent plugin.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1624:224,plugin,plugin,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1624,1,['plugin'],['plugin']
Modifiability,"Introduce a new component:; It exports the global system matrix of the current context into a file. The exporter allows to write the file under several formats. The class is designed so more file format can be supported. For example, image export is added in the CImg plugin. An example is provided. Example:. ![image](https://user-images.githubusercontent.com/10572752/130434673-82d50165-2cc6-49f5-9298-241be36490ad.png). ![image](https://user-images.githubusercontent.com/10572752/130598924-8a805845-bb95-407a-972f-d68e56c18fb2.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2303:268,plugin,plugin,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2303,1,['plugin'],['plugin']
Modifiability,"Introduce the solvers from https://github.com/alxbilger/EigenLinearSolvers. Their description can be found in the readme. The readme mentions only speed ups, but I just found that `examples/Benchmark/Performance/TorusFall.scn` is slower with `EigenSimplicialLDLT` than `SparseLDLSolver`. Need more investigation. Questions for the review:. - Those components must be in Sofa or in a plugin?; - Do you like having Eigen as a prefix of the component? [I don't]. If no prefix, there is a conflict with the legacy solvers.; - What do we do with the csparse-based legacy solvers?; - If decided to remove them, how to deprecate? Do we rename EigenSimplicialLDLT to SparseLDLSolver?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2926:383,plugin,plugin,383,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2926,1,['plugin'],['plugin']
Modifiability,"Introduction (by Damien); Erwan is a new member of Defrost. He will work on sofa, cleaning the haptic plugins & finally make user interfaces. Here is his first PR (to practice writing tests and our workflow :)). This PR contains tests to validate the behavior of the IndexValueMapper engine which was not tested before. ; The component was selected as it is listed into the SofaNGExt list. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/319:102,plugin,plugins,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319,1,['plugin'],['plugins']
Modifiability,"Introduction of a new component in the MultiThreading plugin: `ParallelBruteForceBroadPhase`. As the name suggests, it is a parallel implementation of the algorithm in the component `BruteForceBroadPhase`.; An example scene is also added to illustrate the use of this component. This is a comment I wrote in the example scene:. > ParallelBruteForceBroadPhase is interesting when there are many objects potentially in collision.; This scene has 72 cubes and a floor.; Each cube has a TriangleCollisionModel, a LineCollisionModel and a PointCollisionModel.; The floor has only a TriangleCollisionModel.; It results in n = 72 * 3 + 1 = 217 collision models.; It makes n*(n-1)/2 = 23436 pairs of collision models to test.; On a CPU with 6 cores, each core tests 3906 pairs of collision models. I tested this scene with 6 threads:; - Broad phase runs in 4.09 ms with the sequential implementation: `BruteForceBroadPhase`; - Broad phase runs in 1.56 ms with the parallel implementation: `ParallelBruteForceBroadPhase`. ![cubes](https://user-images.githubusercontent.com/10572752/115710959-3fb00980-a373-11eb-92ee-d16df0c190d4.gif). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2038:54,plugin,plugin,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2038,1,['plugin'],['plugin']
Modifiability,"Introduction of wrappers, derived from `BaseMatrix` and `BaseVector`, to Eigen matrices. The wrappers are courtesy of @jnbrunet, from https://github.com/jnbrunet/caribou, and have been adapted to SOFA + missing functions for CGLinearSolver. `eigen::EigenMatrix` has the interface of `BaseMatrix`, so it can be used as a matrix storing the linear system, in a linear solver.; An example is provided in `CGLinearSolver`. Performances:. Tested on a cantilever beam from `examples/Components/linearsolver/FEMBAR-CGLinearSolver.scn`. **CompressedRowSparseMatrixMat3x3d**; [INFO] [BatchGUI] 1000 iterations done in 2.62389 s ( 381.113 FPS).; ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 2.23 5.32 2.59 0.21 2587.89 100 TOTAL; 1 0 1 2.23 5.31 2.59 0.21 2.59 99.97 .Simulation::animate; 2 0 1 0 0.02 0 0 0 0.04 ..BehaviorUpdatePositionVisitor; 2 0 1 0 0.01 0 0 0 0.05 ..UpdateInternalDataVisitor; 2 0 1 2.21 5.24 2.56 0.21 2.56 99.03 ..AnimateVisitor; 3 0.01 1 2.20 5.24 2.56 0.21 2.56 98.94 ...Mechanical; 4 0.01 1 0.06 0.21 0.07 0.01 0.07 2.60 ....ComputeForce; 4 0.08 1 0.05 0.14 0.05 0 0.05 1.98 ....ComputeRHTerm; 4 0.13 1 0.49 1.58 0.52 0.04 0.52 20.27 ....MBKBuild; 5 0.13 1 0.49 1.56 0.52 0.04 0.52 20.19 .....CG-setSystemMBKMatrix; 4 0.66 1 1.58 4.57 1.90 0.20 1.90 73.45 ....MBKSolve; 5 0.67 1 1.56 4.54 1.88 0.20 1.88 72.80 .....CG-Solve; ```. **CompressedRowSparseMatrixd**; [INFO] [BatchGUI] 1000 iterations done in 4.19299 s ( 238.493 FPS).; ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 3.74 8.41 4.16 0.27 4159.02 100 TOTAL; 1 0 1 3.74 8.40 4.16 0.27 4.16 99.98 .Simulation::animate; 2 0 1 0 0 0 0 0 0.02 ..BehaviorUpdatePositionVisitor; 2 0 1 0 0 0 0 0 0.03 ..UpdateInternalDataVisitor; 2 0 1 3.72 8.36 4.13 0.27 4.13 99.39 ..AnimateVisitor; 3 0.01 1 3.72 8.35 4.13 0.27 4.13 99.33 ...Mechanical; 4 0.01 1 0.06 0.18 0.07 0.01 0.07 1.59 ....ComputeForce; 4 0.08 1 0.05 0.14 0.05 0 0.05 1.21 ....ComputeRHTerm; 4 0.13 1 1.66 5.86 1.72 0.14 1.72 41.42 ....",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2794:185,adapt,adapted,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2794,1,['adapt'],['adapted']
Modifiability,"Introduction; =========; This PR refactor the class reflection feature. . In this PR didn't removed functionalities but i reorganized, rename and refactor them. . To ease the transition, I have let the old function available with a deprecated message trying at best to preserve feature. When the transitional layer will be removed (in a few month so) you may encounter compilation failure because of function removing, so it is highly suggested to quickly update your code. A dedicated section at the end of this document gives you hints on how to update you code. . Changes:. Move name decoding apsect in a separated file called NameDecoder.h; -------------------------------------------------------------------------------------------; Currently name processing is done in Base. This is generating an not needed noise ; for developper. So I moved all that name's related code into a separated file NameDecoder.h. ; So to get typeName, className, shortName, etc...you can now do:; ```cpp; NameDecoder::getTemplateName<MyObject>();; ``` ; The mecanism to implement custom name or template was too complex than what it should requiring to implement several function (the virtual one and the static one). So I propose here a different implementation where, to customize the template or className you just needs to implement the CustomClassName()/CustomTemplateName() static function in your class ...and everthing will work out of the box. For curious people have look at the SFINAE used to implement that in NameDecoder. The NameDecoder class is now used by the BaseClass to decode names. Remove duplicated custom template name; -------------------------------------------------------; A complete mecanisme is now implemented in the NameDecoder & BaseClass to provide default templateName for sofa object. The underlying idea was to remove the needs to those kind of code ; ```cpp; MyClass : public BaseObject; virtual std::string getTemplateName() const { return ""CustomName""; } ; static std::string t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1283:33,refactor,refactor,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283,2,['refactor'],['refactor']
Modifiability,"Is not the problem that the PluginRepository should contain ""../lib"" instead of ""./"" on gcc ? I do not remember where libraries are installed on this platform ( ./bin ? ../lib ? ). If ../lib I guess there is already built in trick (maybe in CMake) so that the LD_LIBRARY_PATH ( or RPATH ) is properly set.; Also I believe there is some kind of code duplicate which also brings confusion between PluginRepository global variable and the Utils::getPluginRepository. They should always return the same thing so why not . ```; Utils::getPluginDirectory(); {; return PluginRepository::getFirstPath(); ; }; ```. Or is there some legitimate reason for doing otherwise ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769:28,Plugin,PluginRepository,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769,4,"['Plugin', 'variab']","['PluginRepository', 'variable']"
Modifiability,Is there a removal date for the third plugin ? (To force developers to make the changes),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328460508:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328460508,1,['plugin'],['plugin']
Modifiability,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:68,plugin,plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417,1,['plugin'],['plugin']
Modifiability,Is this PR a fix for a breaks because of the merge of the NameDecoder refactoring ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387218270:70,refactor,refactoring,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3592#issuecomment-1387218270,1,['refactor'],['refactoring']
Modifiability,"Issue #1521. ## Description:; This PR introduces two new modules in the framework:; - Sofa.Geometry: related to geometrical operations such as : area of a triangle, volume of a tetrahedra... Introduces to regroup all these operations instead of having *GeometricAlgorithms etc. **Not linked to any topology**. It is mostly empty for the moment.; - Sofa.Topology: defining how is define an Element (triangle, etc). ; Historically in SOFA, elements are defined as a vector of Indices. So this module regroups mainly what was in core/Topology.h and set each Element its own files (h/cpp). I suppose this is where *TopologyAlgorithms will lie in the future. ## Breaking; Nope, or nothing that I am aware of. ## Discussion; - Naming: both of those module (and namespace) has a Triangle/Edge/etc: e.g sofa::geometry::Triangle and sofa::topology::Triangle.; This may be confusing, especially without the namespace.; - See in the future how to link these modules with the much awaited [Caribou ](https://github.com/jnbrunet/caribou) plugin. ## Thanks; - @epernod ; - @jnbrunet ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1912:1025,plugin,plugin,1025,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1912,1,['plugin'],['plugin']
Modifiability,"Issue detected by @quentinfrancois0. This comes from a change in the Python configuration since the last High Sierra.; The line #include <Python/Python.h> involved a link ""Python"" to the python include, but this is no longer valid in High Sierra. This was causing a fail in the compilation (include not found). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/614:76,config,configuration,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/614,1,['config'],['configuration']
Modifiability,"Issue introduced in https://github.com/sofa-framework/sofa/pull/1167. The static variables were no longer initialized. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3962:81,variab,variables,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3962,1,['variab'],['variables']
Modifiability,Issues with Sofa.Component.UserInterface.ConfigurationSetting,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:41,Config,ConfigurationSetting,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,1,['Config'],['ConfigurationSetting']
Modifiability,"It has been some time now that this PR is stalled.; As far as I know, there is still no implementation of VisitorAsync, so IMO it should be deleted.; (and it is not really complicated to replicate if needed, it just inherits Visitor and adds a ""Status"" member)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886496855:216,inherit,inherits,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-886496855,1,['inherit'],['inherits']
Modifiability,"It has somehow been forgotten during a refactoring. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3775:39,refactor,refactoring,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3775,1,['refactor'],['refactoring']
Modifiability,"It is required in case of multiple inheritance of BaseObject in a BaseLinearSolver . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2799:35,inherit,inheritance,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2799,1,['inherit'],['inheritance']
Modifiability,It might have been breaking becausr the configuration file might have changed. I prefered to put this tag if in the future we see that we havr issue regarding this we will find this pr quickly.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4842#issuecomment-2252112860:40,config,configuration,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4842#issuecomment-2252112860,1,['config'],['configuration']
Modifiability,"It seems it was introduced by @courtecuisse long time ago: https://github.com/sofa-framework/sofa/commit/1340fd20218a601ed385d5c9c4d5bcfe8ec42ced; And indeed, the visitor calling this function seems not used anywhere in the (public) repository.; But maybe some (external) plugins may use it. ; @courtecuisse (or @pedroperrusi ) do you still need it ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878132756:272,plugin,plugins,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-878132756,1,['plugin'],['plugins']
Modifiability,"It seems that the Win VM has space issues, while the MacOS does not compile due to Flexible plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395:83,Flexible,Flexible,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/818#issuecomment-437883395,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"It seems that the dependency of SofaPhysicsAPI to SceneCreator needs to be fixed.; `; SofaPhysicsSimulation.cpp:49:10: fatal error: '../plugins/SceneCreator/SceneCreator.h' file not found; #include ""../plugins/SceneCreator/SceneCreator.h""`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731:136,plugin,plugins,136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109#issuecomment-514504731,2,['plugin'],['plugins']
Modifiability,It seems that this PR is not building with SofaCUDA plugin.; See [ubuntu_clang-3.4_options](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.4_options/4513/) and [ubuntu_clang-3.4_options-debug](https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.4_options-debug/193/) builds after merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/217#issuecomment-293195342:52,plugin,plugin,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217#issuecomment-293195342,1,['plugin'],['plugin']
Modifiability,"It seems to be coming from a setup/system/configuration error than something related to SOFA itself, as the error is coming from the Windows SDK itself.; Which version of MS Visual Studio are you using ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835458410:42,config,configuration,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4329#issuecomment-1835458410,1,['config'],['configuration']
Modifiability,"It should be zero by default in my opinion. ; There is also a little confusion because there are currently two ways to specify the rayleigh damping parameters. ; If you use `EulerImplicitSolver` rayleigh damping is specified at the solver level. ; However both the `ForceField` and `Mass` API in SofaCore also implements rayleigh damping... provided you use `kfactorIncludingRayleighDamping` instead of `kfactor` when assembling the stiffness and the mass. This changed was introduced quite a long time ago, because in the Compliant plugin, the solvers for time integration do not implement global Rayleigh damping, but a more ""local"" one, delegated to each of the `Mass` and `Forcefield` components. ; So short answer is : yes should be zero. But it could break a **lot** of scenes that extensively rely on the default damping values to actually work... which mostly happens when you do not pay attention about the unit system you want to use in your scene ( e.g meters and kilograms versus millimetres and grams ) . I would also like to have the opinion of someone knowledgeable in that particular area. Rayleigh stiffness factor, contrary to Rayleigh mass factor, is not unit less. It is s^-1 as far as I can remember. Would it be better to specify it as unit less factor instead (and then have it internally divided by the current time step value), so that the value has a sort of consistent meaning regardless of the time step chosen ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803:533,plugin,plugin,533,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316636803,1,['plugin'],['plugin']
Modifiability,"It was agreed that runSofa is on its dying...but I see so much people that still use it so here is a set of patches to may make their live easier. I tried to spend as few time as possible so it is not super clean. . This PR contains: ; 1) Extend the live coding support. Before this PR only python script controller where concerned. Now any xml, pyscn and other is concerned when runSofa is started with the -i option. This is very usefull to make live demonstration, explaining scenes to an audiance or practice on small scene. It has no impact on user that don't start runSofa without -i. . 2) Currently Object that have messages in their logs exhibits small signs (green/yellow/red). This PR extends this behavior to the Node so it is more consistant and easy to locate the messages. . 3) Adds an openInEditor function in the pop menu in the scene graph to open the current scene in an external editor (It is nothing but I use that all the time in qtcreator and I wanted the same in sofa). Enjoy/. CHANGELOG for @hugtalbot & @guparan :; - [runSofa] ; - when using runSofa with the -i option adds live coding support for xml & pyscn scenes.; - adds icons (green, red, yellow) on nodes when their is message (before only the object have the icons). ; - in the scene graph pop-up menu adds an entry that open the current scene into an external editor. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/337:239,Extend,Extend,239,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337,2,"['Extend', 'extend']","['Extend', 'extends']"
Modifiability,"It was first signalled [here](https://www.sofa-framework.org/community/forum/topic/error-configure-sofa-in-cmake-gui-about-lpthreads/#post-11140). The compilation of the master branch fails with GCC v8.1, which is the default version in fedora 28. The compilation passed with GCC v.7.3 (default in fedora 27). I did not checked at which GCC version between those two this starts to happen. ```; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp: In instantiation of ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponseT(const sofa::core::MechanicalParams*, DataDeriv&) [with DataDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >; DataTypes = sofa::defaulttype::StdRigidTypes<3, double>]’:; /home/vm-fedora-28/sofa/SofaGeneral/../modules/SofaBoundaryCondition/FixedPlaneConstraint.inl:173:31: required from ‘void sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::projectResponse(const sofa::core::MechanicalParams*, sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv&) [with DataTypes = sofa::defaulttype::StdRigidTypes<3, double>; sofa::component::projectiveconstraintset::FixedPlaneConstraint<DataTypes>::DataVecDeriv = sofa::core::objectmodel::Data<sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > > >; typename DataTypes::VecDeriv = sofa::helper::vector<sofa::defaulttype::RigidDeriv<3, double>, sofa::helper::CPUMemoryManager<sofa::defaulttype::RigidDeriv<3, double> > >]’; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:58:44: required from here; /home/vm-fedora-28/sofa/modules/SofaBoundaryCondition/FixedPlaneConstraint.cpp:74:100: internal compiler error: in type_dependent_expression_p, at cp/pt.c:25100; ed int > ::const_iterator it = this",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/673:89,config,configure-sofa-in-cmake-gui-about-lpthreads,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/673,1,['config'],['configure-sofa-in-cmake-gui-about-lpthreads']
Modifiability,"It was pointed by @EulalieCoevoet that the callbacks update are only called when the modified data is accessed for reading. This has a consequence in the UX, when a data field value is changed in the inspector, the callback is only executed when data is accessed... but not when we click on the ""update"" or ""ok"" button. . It was thus suggested to trigger the callback by accessing the component state.; All other change are just cleaning and refactoring of the function. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3713:442,refactor,refactoring,442,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3713,1,['refactor'],['refactoring']
Modifiability,"It was reported that include_guard(GLOBAL) is problematic with third-party plugins so let's go back to the ""normal"" version. Signed-off-by: Damien Marchal <damien.marchal@univ-lille1.fr>. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1467:75,plugin,plugins,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1467,1,['plugin'],['plugins']
Modifiability,"It's a topic I wanted to get back, so that we could support adaptive time step solvers.; Do you remember what on a theoretical standpoint makes it not supported? I do not recall",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1541510463:60,adapt,adaptive,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3793#issuecomment-1541510463,1,['adapt'],['adaptive']
Modifiability,"It's actually *way* more complex: while trying to do the above, I got bitten hard by the linker. . Here is what I found:. - `runSofa` is currently calling `initComponentGeneral()` which calls in turn `initOpenGLVisual()`,; - now if I remove calls to `initComponentGeneral` from `runSofa`, no symbol from `libComponentGeneral.so` is ever referenced in `runSofa` and the linker does its job so **`libComponentGeneral.so` is completely linked out from `runSofa`**,; - this means no `static` variable from `libComponentGeneral.so` is ever constructed nor destructed while running `runSofa`,; - so none of the static class registration through `RegisterObject` is ever performed!. In my case, the above caused the following problem:; - when constructing the viewer, an alias from `VisualModel` to `OglModel` is added, which fails since `OglModel` was never registered at this point,; - (bonus) when loading some other plugin later on (in this case, Compliant), the plugin *might* reference code from `libComponentGeneral`, which would thus be linked in the plugin, triggering DLL initialization and class registration for `OglModel` when the plugin is loaded. **TL;DR: manual `init*` calls act as a (crude) way of forcing symbols to be pulled from each dll into the main executable, ensuring class registration is performed correctly before `main` is executed.**. Based on the above, a reasonable fix would be:; - remove all `CleanupCheck` as they may cause issues; - remove all `cleanup`-related functions; - keep all `init` calls everywhere; - any non-trivial `static` initialization and especially finalization should use a nifty counter",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962:488,variab,variable,488,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280620962,5,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,It's not easy to have a comfortable solution for both CMake experts and non-experts but we are trying to make everyone happy by providing highly factorized macros (big refactoring happened in #1433). ; Of course you are free to use them or not.; I close this issue since it's quite old. Feel free to reopen if necessary :wink:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/490#issuecomment-743086496:168,refactor,refactoring,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490#issuecomment-743086496,1,['refactor'],['refactoring']
Modifiability,It's not very beautiful but the plugin manager is already here:. ![image](https://github.com/sofa-framework/sofa/assets/10572752/63ae2a71-8fb8-4f6c-ade5-0287fa79142f),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1737007332:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4200#issuecomment-1737007332,1,['plugin'],['plugin']
Modifiability,It's ok to me as long as it does not something directly opposed to the astyle config :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1104000803:78,config,config,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1104000803,1,['config'],['config']
Modifiability,It's only msg refactoring. Title is misleading.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510018883:14,refactor,refactoring,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-510018883,1,['refactor'],['refactoring']
Modifiability,"Just a little fix in SparseLDLImplInvertData, r of sparse is missing. ; Fix needed for Cuda plugins update in sofa-dev.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/74:92,plugin,plugins,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/74,1,['plugin'],['plugins']
Modifiability,"Just added ""pr: wip"" label because we need to fix Flexible plugin (make it use [plugin.HighOrder](https://github.com/sofa-framework/plugin.HighOrder)).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179:50,Flexible,Flexible,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222#issuecomment-293512179,4,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,Just before the February school break we started a branch on our repo. The task #189 is complete (needs more testing to validate it) and is a prerequisite before real python 3 refactoring in SofaPython.; Stay tuned.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658:176,refactor,refactoring,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-282653658,1,['refactor'],['refactoring']
Modifiability,"Just curious to see any difference with this macro defined. FYI, I get the same perf for few scenes : caduceus, RungeKutta4 and EMBAR_CGLinearSolver.scn.; (SOFA_NO_VMULTIOP is also used for CGLinearSolver<GraphScattered>). Note: the CI is useless on this PR, as this macro as to be defined manually in CXX_FLAGS or added in sofa/config.h header); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4325:329,config,config,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4325,1,['config'],['config']
Modifiability,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:491,variab,variables,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349,1,['variab'],['variables']
Modifiability,"Just my 2 cents, on macOS 10.14.5, Xcode 10.2.1 , Cmake 3.15.0 and Sofa sync with master, I don't have any error with the configuration.; **BUT** Cmake 3.15.0 wants to link the OpenGL framework from a non-existing /Applications/Xcode-beta.app (I dont have any beta version of XCode), and obviously breaks the make process.; So I suppose there are some bugs in the 3.15.0 version of cmake.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931:122,config,configuration,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-514153931,1,['config'],['configuration']
Modifiability,"Just one small concern ( that can be included if that is not already the case ).; Does the functionnality currently also work with a debug compilation ? ; There may be also some extra care to be taken with multi configurations ide like visual studio, where the same build tree can generate multiple binairies in different folder, and possibly with different names ( for example the '_d' suffix that usually comes along with debug librairies ). On the ""bright side"", if the functionality is not yet there in this PR, I presume all the necessary informations can be extracted from the cmake target properties, so it **should** be feasible. Also it would be more generic since the cmake target name, and the name of the generated binary can differ ( even if this is not a common practice )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491:212,config,configurations,212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312257491,1,['config'],['configurations']
Modifiability,"Just passing by, I do not want to raise a flame war but actuall asin method has some documentation,; espcially when it comes to domain error:; http://www.cplusplus.com/reference/cmath/asin/; Just quoting; . > If a domain error occurs:; > - And math_errhandling has MATH_ERRNO set: the global variable errno is set to EDOM.; > - And math_errhandling has MATH_ERREXCEPT set: FE_INVALID is raised. Then looking at ; http://www.cplusplus.com/reference/cmath/math_errhandling/; The default behavior for math_errhandling is MATH_ERRNO, so as the doc suggest you can just check for the errno (thread-local) global variable value, and if it is set to EDOM after asin is called, then you can throw whatever error message you want. This is probably not relevant here, since I presume the checks are there because in theory when a quaternion is normalized the value of ; `Real(2.)*(q[3]*q[1] - q[2]*q[0])` ; should always belong to the range [-1;1]. The only reason it might not be is for some numerical drifting issues (?); Provided this assumption is correct you are indeed totally allowed to clamp the values there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942:292,variab,variable,292,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343094942,2,['variab'],['variable']
Modifiability,Just removing unnecessary headers include inside header in sofa::core; No forward class or intelligent refactoring. any suggestion/remark is welcomed. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/638:103,refactor,refactoring,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/638,1,['refactor'],['refactoring']
Modifiability,Just to understand @alxbilger the objects from plugins were not properly loaded ?; How could it have worked before your PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2263040977:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4872#issuecomment-2263040977,1,['plugin'],['plugins']
Modifiability,"Just tried to add commits in my external plugin and then re-fetch, nothing was erased :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389525666:41,plugin,plugin,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-389525666,1,['plugin'],['plugin']
Modifiability,"KE_BUILD_TYPE + Enable more plugins. ### [[DiffusionSolver] MOVE from image/extlibs to a real plugin](https://github.com/sofa-framework/sofa/commit/54f49d039aadaffd57a1d7f8ebab3af82e407674); I see no reason not to do that. Dependencies to DiffusionSolver are simpler this way. ### [[CImgPlugin] CLEAN include directory](https://github.com/sofa-framework/sofa/commit/1a617d5350f74ac4a816255960d92638a26cba1b); Sources moved to `src`. No more `../` horror in CImgPlugin include directories. ## Other changes. - [SofaHelper] FIX DynamicLibrary altered search path (Windows only) ; Needed to prefer `bin` libraries over neighboor libraries; - [SofaFramework] FIX typo in config.h.in; - [runSofa] Check if plugins dir exists before adding to PluginRepository; - [SofaTest] FIX SofaPython finding in *Config.cmake.in; - [plugins] ADD missing *Config.cmake.in files; Needed to use them as real plugins; - [All] Improve sofa_copy_libraries and sofa_install_libraries macros; Make them easier to use; - [CMake] Rename sofa_set_python_directory into sofa_install_pythonscripts; Clearer name in my opinion + using CMake multiValueArgs; - [CMake] Update package.cmake to enable plugins; Prepare package.cmake to produce binaries with all plugins from ""options"" configuration.; - [SofaImplicitField] FIX tests enabling; - [CMake] CLEAN package.cmake; - [SofaSimulationCore] Handle reload differently in SceneLoader::Listener; Needed to disable scene checks on reload.; - [SofaGraphComponent] Disable scene checks on reload; Needed by live editor (which reloads the scene every time the file is changed).; - [plugins] Remove commented lines in CMakeFiles. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:4093,plugin,plugins,4093,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['plugin'],['plugins']
Modifiability,"LGTM; Remark: Bezier2MeshMechanicalMapping.scn, BezierTetrahedronSetTopologyContainer.scn, BezierTriangleSetTopologyContainer.scn and Mesh2BezierTopologicalMapping.scn should be pushed in https://github.com/sofa-framework/plugin.HighOrder",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/505#issuecomment-342168964:222,plugin,plugin,222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/505#issuecomment-342168964,1,['plugin'],['plugin']
Modifiability,"Lagrangian.Model""]; [ERROR] [RequiredPlugin(Sofa.Component.Engine.Select)] Plugin not found: ""Sofa.Component.Engine.Select"". Failed to load: [""Sofa.Component.Engine.Select""]; [ERROR] [RequiredPlugin(Sofa.Component.StateContainer)] Plugin not found: ""Sofa.Component.StateContainer"". Failed to load: [""Sofa.Component.StateContainer""]; [ERROR] [RequiredPlugin(Sofa.Component.Mass)] Plugin not found: ""Sofa.Component.Mass"". Failed to load: [""Sofa.Component.Mass""]; [ERROR] [RequiredPlugin(Sofa.Component.SceneUtility)] Plugin not found: ""Sofa.Component.SceneUtility"". Failed to load: [""Sofa.Component.SceneUtility""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Projective)] Plugin not found: ""Sofa.Component.Constraint.Projective"". Failed to load: [""Sofa.Component.Constraint.Projective""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Direct)] Plugin not found: ""Sofa.Component.LinearSolver.Direct"". Failed to load: [""Sofa.Component.LinearSolver.Direct""]; [ERROR] [RequiredPlugin(SofaGeneralRigid)] Plugin not found: ""SofaGeneralRigid"". Failed to load: [""SofaGeneralRigid""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Algorithm)] Plugin not found: ""Sofa.Component.Collision.Detection.Algorithm"". Failed to load: [""Sofa.Component.Collision.Detection.Algorithm""]; [ERROR] [RequiredPlugin(SofaBoundaryCondition)] Plugin not found: ""SofaBoundaryCondition"". Failed to load: [""SofaBoundaryCondition""]; [ERROR] [RequiredPlugin(Sofa.Component.Topology.Container.Constant)] Plugin not found: ""Sofa.Component.Topology.Container.Constant"". Failed to load: [""Sofa.Component.Topology.Container.Constant""]; [ERROR] [RequiredPlugin(SofaEngine)] Plugin not found: ""SofaEngine"". Failed to load: [""SofaEngine""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Intersection)] Plugin not found: ""Sofa.Component.Collision.Detection.Intersection"". Failed to load: [""Sofa.Component.Collision.Detection.Intersection""]; [ERROR] [RequiredPlugin(Sofa.Component.SolidMechanics.Spring)] Plugin",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:2499,Plugin,Plugin,2499,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,Last but not least PR on SPH plugin to restore ParticleSink component.; - Move all code inside inl file; - Fix the extern template; - Add prefix d_ to data; - Fix global behavior; - Update the existing basic example scene ; - Add 2 others scenes using Topology changes and OglFluid rendering done in previous PR. ![ezgif com-crop](https://user-images.githubusercontent.com/21199245/67562701-8b063f00-f71f-11e9-9e0b-d72e2a0f347a.gif). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1195:29,plugin,plugin,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1195,1,['plugin'],['plugin']
Modifiability,"Last step to complete the task to unify the image importing process. Now that CImgPlugin is integrated, ImageBMP/ImagePNG and ImageQt can be removed from the trunk of Sofa. ; It lets all the responsibility of reading images to CImgPlugin (or any user custom plugin). (closes finally #9 and #51 ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/424:258,plugin,plugin,258,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/424,1,['plugin'],['plugin']
Modifiability,Last uses of variable manually defined 3.14... ( for #799 ); Now uniformly using M_PI. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1264:13,variab,variable,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1264,1,['variab'],['variable']
Modifiability,LeapMotion Plugin compilation errors,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1120:11,Plugin,Plugin,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1120,1,['Plugin'],['Plugin']
Modifiability,"Let's move modules to plugins!. As pluginizing is a big hard for a coding sprint, we will mainly do preparatory work for future pluginization.; This means:; - [x] Solve SceneCreator dependencies problem; - [x] Identify at least one module to pluginize; - [x] If we have time, pluginize a module",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427:22,plugin,plugins,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427,5,['plugin'],"['pluginization', 'pluginize', 'pluginizing', 'plugins']"
Modifiability,"Let's not pollute the `plugins` directory of SOFA install with all the old modules like SofaBaseMechanics that are now collections.; I created a new `collections` directory for them, working the same way as `plugins`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3196:23,plugin,plugins,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3196,2,['plugin'],['plugins']
Modifiability,"Let's see this as a starting point of refactoring. This PR does the merge, the code is neither better nor worst than before, it just removes unnecessary duplication. . Still need to replace every iteration of StiffSpringForceField by SpringForceField and fix Cuda extension",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2052097036:38,refactor,refactoring,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2052097036,1,['refactor'],['refactoring']
Modifiability,Lets not wait for Sofa.Config... reopening.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-763807250:23,Config,Config,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-763807250,1,['Config'],['Config']
Modifiability,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/297:20,config,configuration,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297,2,['config'],"['configuration', 'configurations']"
Modifiability,"Libraries for debug configuration have suffix ""d"". For that reason release and; debug configurations must have different pragmas for linking libpng and zlib; under MSVS. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/298:20,config,configuration,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/298,2,['config'],"['configuration', 'configurations']"
Modifiability,"Lines 97, 100 and 101 not compiling: https://github.com/sofa-framework/sofa/blob/cfda6846a2b3135ac88d6f7a0f363641a556cbf0/applications/plugins/Geomagic/src/Geomagic/GeomagicDriver.cpp#L97-L101. Errors not detected on the CI because inside #if GEOMAGIC_HAVE_OPENHAPTICS. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2229:135,plugin,plugins,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2229,1,['plugin'],['plugins']
Modifiability,"Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Haptics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering2D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering3D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Shader.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GUI.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSceneCreator.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libArticulatedSystemPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofaMatrix.dylib; [INFO] [PluginManager] 68 plugins have been loaded from /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini. ########## SIG 11 - SIGSEGV: segfault ##########; [1] 21189 segmentation fault ./runSofa; `. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\n",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:8739,Plugin,PluginManager,8739,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.NonLinear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.MappedMatrix.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.Spring.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.Elastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.TensorMass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.StateContainer.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Model.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Correction.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Solver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Projective.dylib; [INFO] [PluginManager] Loaded plugin: /Us,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:4738,Plugin,PluginManager,4738,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Model.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Constraint.Lagrangian.Correction.so; [INFO],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:5660,Plugin,PluginManager,5660,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/l,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:4421,Plugin,PluginManager,4421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Looking at this plugin's CMakefile, I can see; ```; ...; AddCompilerDefinitions(""SOFA_BUILD_OPTICALFLOW""); AddLinkerDependencies(${OpenCV_LIBRARIES}); ...; ```. which is wayyyyy too old, these keywords have not been used since SOFA's v15.12 (7 years ago).; So you (or this plugin creator @rouge1616 Nazim 🤗) need to update it for your current version of SOFA (which I guess is v22.06). And the code itself will certainly need to be updated as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3440#issuecomment-1294975824:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3440#issuecomment-1294975824,2,['plugin'],['plugin']
Modifiability,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:531,parameteriz,parameterizations,531,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376,2,['parameteriz'],"['parameterization', 'parameterizations']"
Modifiability,Management of the inclusion pipeline for config.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/904:41,config,config,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904,1,['config'],['config']
Modifiability,Manager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.AnimationLoop.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.MechanicalLoad.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Geometry.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Algorithm.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Intersection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Mapper.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Contact.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Setting.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Controller.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Analyze.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Generate.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Select.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Transform.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:6712,Plugin,PluginManager,6712,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Manager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaMiscCollision.dll; [ERROR] [PluginManager] Plugin loading failed (C:/open_prj/sofa/build/mmaster/bin/Release/CGALPlugin.dll): The specified module could not be found. Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"". ```. This dll is actually present. Please see the snapshot below.; Directory view:; ![image](https://user-images.githubusercontent.com/5296582/83347021-63272b80-a33f-11ea-9cda-e2c209b1be80.png). I am not able to understand what is the issue? Please suggest. Thanks; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:2156,Plugin,PluginManager,2156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,2,['Plugin'],"['Plugin', 'PluginManager']"
Modifiability,"Manager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDenseSolver.dll; [ERROR] [PluginManager] Plugin not found: ""SofaNonUniformFem""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscExtra.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscForceField.dll; [ERROR] [PluginManager] Plugin not found: ""SofaMiscEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscMapping.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/CImgPlugin.dll; Warning: Setting a new default format with a different version or profile after the global shared context is created may cause issues with context sharing.; The constructor with a QGLFormat is deprecated, use the regular contructor instead. [ERROR] [RequiredPlugin(SofaNonUniformFem)] Plugin not found: ""SofaNonUniformFem"". Failed to load: [""SofaNonUniformFem""]; [ERROR] [InfoComponent(Not created (SparseGridRamificationTopology))] Object type SparseGridRamificationTopology<> was not created; The object is not in the factory.; This component has been PLUGINIZED since SOFA v20.06. To continue using this component you need to ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:9584,Plugin,PluginManager,9584,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Many thanks, sorry I did not have any time to take care of it... I just added one commit ( without asking your permission... ) so that `Utils::getPluginDirectory()` returns the content of the first path stored in the `PluginRespository` global variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663:218,Plugin,PluginRespository,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/518#issuecomment-344873663,2,"['Plugin', 'variab']","['PluginRespository', 'variable']"
Modifiability,"MatSym is indeed used, mainly in SofaMiscFem and apparently in the future Caribou plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1828#issuecomment-781249780:82,plugin,plugin,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1828#issuecomment-781249780,1,['plugin'],['plugin']
Modifiability,"May I ask, when compiling Sofa v21.12 and previous versions, there was an issue where plugins could not be used, but after Sofa v22 version, this problem no longer exists. Currently, I need to use the Optimus plugin (compatible with Sofa v21.12), so how can I solve this problem for all the experts?. cmake_minimum_required(VERSION 2.8.12); find_package(SofaFramework); sofa_add_subdirectory(plugin STLIB/ STLIB VERSION 3.0). CMake Error at //path/to/SOFA/ext_plugin_repo/CMakeLists.txt:5 (sofa_add_subdirectory):; sofa_add_subdirectory Macro invoked with incorrect arguments for macro named: sofa_add_subdirectory. Before Sofa v21.12, it seems that Sofa_add_Subdirectory cannot be recognized. Could you please modify it to something that can recognize it??. Thank you all!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4941:86,plugin,plugins,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4941,3,['plugin'],"['plugin', 'plugins']"
Modifiability,MeshCollision/lib/libSofaGeneralMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaBoundaryCondition/lib/libSofaBoundaryCondition.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralAnimationLoop/lib/libSofaGeneralAnimationLoop.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralDeformable/lib/libSofaGeneralDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralEngine/lib/libSofaGeneralEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralExplicitOdeSolver/lib/libSofaGeneralExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/S,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:5628,Plugin,PluginManager,5628,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,MeshLoader; [WARNING] [ObjectFactory] Class already registered: GridMeshCreator; [WARNING] [ObjectFactory] Class already registered: InputEventReader; [WARNING] [ObjectFactory] Class already registered: MeshGmshLoader; [WARNING] [ObjectFactory] Class already registered: MeshOffLoader; [WARNING] [ObjectFactory] Class already registered: MeshSTLLoader; [WARNING] [ObjectFactory] Class already registered: MeshTrianLoader; [WARNING] [ObjectFactory] Class already registered: MeshXspLoader; [WARNING] [ObjectFactory] Class already registered: OffSequenceLoader; [WARNING] [ObjectFactory] Class already registered: SphereLoader; [WARNING] [ObjectFactory] Class already registered: StringMeshCreator; [WARNING] [ObjectFactory] Class already registered: VoxelGridLoader; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLoader/lib/libSofaGeneralLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExporter/lib/libSofaExporter.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSparseSolver/lib/libSofaSparseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaPreconditioner/lib/libSofaPreconditioner.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaHaptics/lib/libSofaHaptics.so; [WARNING] [ObjectFactory] Class already registered: CompareState; [WARNING] [ObjectFactory] Class already registered: CompareTopology; [WARNING] [ObjectFactory] Class already registered: DataController; [WARNING] [ObjectFactory] Class already registered: DataMonitor; [WARNING] [ObjectFactory] Class already registered: DevAngleCollisionMonitor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: DevMonitorManager; [WARNING] [ObjectFac,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:29679,Plugin,PluginManager,29679,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"Message before:; ```; CMake Warning at C:/projects/sofa-src/Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:454 (message):; Deprecated macro. Use 'sofa_add_subdirectory(plugin ...)' instead.; Call Stack (most recent call first):; C:/projects/sofa_plugins/CMakeLists.txt:19 (sofa_add_plugin); ```. Message after:; ```; CMake Warning at C:/projects/sofa-src/Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:454 (message):; Deprecated macro 'sofa_add_plugin'. Use 'sofa_add_subdirectory(plugin caribou caribou)' instead.; Call Stack (most recent call first):; C:/projects/sofa_plugins/CMakeLists.txt:19 (sofa_add_plugin); ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3611:75,Config,Config,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3611,4,"['Config', 'plugin']","['Config', 'plugin']"
Modifiability,"Metis is installed only in the folder of the first plugin fetching it. Making the other one fail to find it. Moving it into the main folder with CMake is not really meaningful. The plugin should not fix something that is at higher level in the CMake hierarchy as itself (aka, fix install issue when another target depends on one of its dependency)... . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4767:51,plugin,plugin,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4767,2,['plugin'],['plugin']
Modifiability,"Might be breaking for some plugins I suppose, but fine for me",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1808#issuecomment-779822691:27,plugin,plugins,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1808#issuecomment-779822691,1,['plugin'],['plugins']
Modifiability,"Minor cleaning. No change of behavior is expected. - Static member is accessed through an instance; - Unused using; - Duplicated branch content; - Rename local variable; - const; - comments; - No need to deal with a pointer. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1899:160,variab,variable,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1899,1,['variab'],['variable']
Modifiability,"Minor cleaning:. - Remove includes and prefer forward declaration; - Name scope timers to avoid immediate destruction (however, I had a runtime error with this one: https://github.com/sofa-framework/sofa/blob/2072f967ae73a21c4fb95839ee15aedd0535d90a/SofaKernel/modules/SofaSimulationCore/src/sofa/simulation/UpdateBoundingBoxVisitor.cpp#L52); - Condition is evaluated at compile-time instead of run-time (although I guess the compiler is smart enough).; - A private Data is removed; - A local variable was shadowed by another local variable (dx). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1926:493,variab,variable,493,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1926,4,['variab'],['variable']
Modifiability,"Minor refactoring to simplify the reading (it avoids the call to many `for` loops), and to match https://github.com/sofa-framework/sofa/pull/3981. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3983:6,refactor,refactoring,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3983,1,['refactor'],['refactoring']
Modifiability,Modularizing & Refactoring SofaVolumetricData,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/388:15,Refactor,Refactoring,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388,1,['Refactor'],['Refactoring']
Modifiability,Modularizing config.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/475:13,config,config,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/475,1,['config'],['config']
Modifiability,Module are systematically compiled which have a sensible impact to Sofa. ; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they ; don't need. In this PR I'm moving SofaMiscCollision & SofaSphFluid. ; I made the two because there is a dependency between them. ; There should be no big problem with this PR. ; But in the main CMakeList.txt I change the order of subdirectories so that plugins are before scenecreator. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/407:96,plugin,plugin,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Modules for pluginization contain a dot (Sofa.GL, Sofa.Types, etc),; and custom macro (sofa_create_package_with_targets) generates preprocessor definitions according to the name.; So with the new modules name, the macro creates a preprocessor definition with a dot '.' , but this is not permitted by the C preprocessor. So this PR replaces a '.' with a '_' for the generated definitions.; Fix #1695 (and seems to remove a warning generated by clang). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1701:12,plugin,pluginization,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1701,1,['plugin'],['pluginization']
Modifiability,Modules: Update variable name,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1986:16,variab,variable,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1986,1,['variab'],['variable']
Modifiability,Modules: shadow variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1968:16,variab,variable,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1968,1,['variab'],['variable']
Modifiability,"More details about he problem. . The geomagic plugin is using:; ```cpp; sofa::component::mapping::RigidMapping< Rigid3dTypes , ExtVec3fTypes >::SPtr mapping;; ```; and; ```cpp; visualNode[i].mapping = sofa::core::objectmodel::New< sofa::component::mapping::RigidMapping< Rigid3dTypes, ExtVec3fTypes > >();; ``` ; This means that the mapping is transforming ```Rigid3dTypes``` (d stand for double) to ```ExtVec3fTypes``` (where f stand for float). Since the removal of SOFA_FLOAT/SOFA_DOUBLE these kind of combination mixing precision have been removed and are not expected to compile anymore. . The only mapping that remains in Sofa using the same precision on both sides that should be written that way: ; ```cpp; visualNode[i].mapping = sofa::core::objectmodel::New< sofa::component::mapping::RigidMapping< Rigid3Types, ExtVec3Types > >();; ``` ; By unifying the types precision this would fix the compilation issues. I don't have geomagic so if you can make the fix and the PR this would be nice. Otherwise maybe @epernod can do that. . Damien, ; PS: I have created an issue to reference all similar problems... its #893",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/892#issuecomment-454711219:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/892#issuecomment-454711219,1,['plugin'],['plugin']
Modifiability,"More or less trial-and-error works to make the SofaPython3 plugin compilable out-of-tree (and obviously others one too). Various stuff:; - out-of-date cmake vars; - need to reference old modules in the cmake.in (i dont really understand this issue); - remove completely SofaSimulationCore (was supposed to be deleted for v21.12) and add an error if used. I dont know if it is useful though. There were some f*ckey with the project/module called Sofa.SimulationCore but the folder SofaSimulationCore in any case. I put fast-merge because this is quite urging but some cmake-specialized eyes are needed 👀 . By the way, with this branch, I can compile SofaPython3 out-of-tree on Windows/MSCV2022. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3031:59,plugin,plugin,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3031,1,['plugin'],['plugin']
Modifiability,"Most of the components in `Sofa.Core/behavior` work by accessing one or more mechanical states, in order to access state variables, such as position, force etc. They all manage their own way to store, find and manage their link to one or more mechanical states. Instead, I suggest to factorize this access using intermediate classes. It comes with the following features:. - All components inherit from `StateAccessor`, which contains a dynamic list of `BaseMechanicalState`; - Components having access to only one mechanical state inherit from `SingleStateAccessor`. It is templated on `DataTypes`, with a link to a `MechanicalState<DataTypes>`.; - Components having access to 2 mechanical states inherit from `PairStateAccessor`. It is templated on `DataTypes1` and `DataTypes2`, with a link to a `MechanicalState<DataTypes1>` and a second link to a `MechanicalState<DataTypes2>`.; - Components inheriting from `SingleStateAccessor` or `PairStateAccessor` fill the dynamic list contained in the `StateAccessor` implementation.; - It does not break the previous accesses, variable names etc. The goal is that all the components accessing a `BaseMechanicalState` can provide a list of them in a generic way. For example, `BaseInteractionForceField` supposed only 2 mechanical states. Since it inherits now from `StateAccessor`, it can have links to more than 2 (note that none of the interaction force field I found work with more than 2). Another example: `BaseForceField` did not have any reference to a mechanical state, but all the force fields inherits from `ForceField` which has a link to a mechanical state. Therefore, we couldn't have access to a mechanical state from a `BaseForceField`. I also cleaned the files:; - Concatenate nested namespaces; - Use `#pragma once`; - Some private and non-defined copy constructors and `operator=` are marked `delete`.; - Move methods in cpp; - Removed unnecessary `init()` implementations. They only called their base class `init()`.; - `Constraint ` ha",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438:121,variab,variables,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438,5,"['inherit', 'variab']","['inherit', 'inheriting', 'variables']"
Modifiability,"Mostly in MeshSTEP plugin. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4067:19,plugin,plugin,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4067,1,['plugin'],['plugin']
Modifiability,"Move Flexible code (and its history) to its own repository : https://github.com/sofa-framework/Flexible; And the same with Compliant: https://github.com/sofa-framework/Compliant. CI has been updated so it should fetch and enable those two plugins. EDIT: adding one more repo, RigidScale, as it is 100% depending on those two plugins. (#1527 , #1442); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1873:5,Flexible,Flexible,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1873,4,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"Move ManifoldTopologies and its history to its own repository : https://github.com/sofa-framework/ManifoldTopologies . the configure script on the CI has already been updated. It has its own CI too (and releases). (#1527 , #1442). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2623:123,config,configure,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2623,1,['config'],['configure']
Modifiability,"Move OpenCTMPlugin and its history to its own repository : https://github.com/sofa-framework/OpenCTMPlugin . Not compiled by the CI, and was even not present in the CMakelists of the plugins directory by the way. (#1527 , #1442). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2564:183,plugin,plugins,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2564,1,['plugin'],['plugins']
Modifiability,"Move OptitrackNatNet and its history to its own repository : https://github.com/sofa-framework/OptitrackNatNet. the configure script on the CI has already been updated. (#1527 , #1442). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2548:116,config,configure,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2548,1,['config'],['configure']
Modifiability,"Move PluginExample and its history to its own repository : https://github.com/sofa-framework/PluginExample (with brand-new github actions 😎). the configure script on the CI has already been updated. (#1527 , #1442). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2519:5,Plugin,PluginExample,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2519,3,"['Plugin', 'config']","['PluginExample', 'configure']"
Modifiability,"Move Registration and its history to its own repository : https://github.com/sofa-framework/Registration. the configure script on the CI has already been updated. (#1527 , #1442). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2552:110,config,configure,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2552,1,['config'],['configure']
Modifiability,"Move SofaCUDA and its history to its own repository : https://github.com/sofa-framework/SofaCUDA. CI is building SofaCUDA on Windows so the configure script has been updated. (#1527 , #1442). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2502:140,config,configure,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2502,1,['config'],['configure']
Modifiability,"Move THMPGSpatialHashing and its history to its own repository : https://github.com/sofa-framework/THMPGSpatialHashing . the configure script on the CI has already been updated. It has its own CI too (and releaases). (#1527 , #1442). It just introduces one new component, THMPGSpatialHashing which is a colllision pipeline (i.e implements broad and narrow phases detection). ; After some tests it is slower than the standard bvh one, so it does not seem really important to maintain IMO. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2609:125,config,configure,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2609,1,['config'],['configure']
Modifiability,Move TaskScheduler files from Multithreading plugin to Sofa Kernel. This change allows any plugins to use the TaskScheduler without adding the dependency on the MultiThreading plugin. The MultiThreading plugin will be a collection of components using the TaskScheduler to parallelize some computation. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/805:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/805,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Move of CImgData was not done in CGAL plugin. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2345:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2345,1,['plugin'],['plugin']
Modifiability,Move the bindings files and script controllers files to subdirectories to lighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/616:86,plugin,plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616,1,['plugin'],['plugin']
Modifiability,Moving SOFA modules to plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128:23,plugin,plugins,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128,1,['plugin'],['plugins']
Modifiability,Moving plugins out in external sofa-framework repositories (STC#9),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1442:7,plugin,plugins,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1442,1,['plugin'],['plugins']
Modifiability,Multi-Mesh loader design (Assimp plugin integration),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/602:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/602,1,['plugin'],['plugin']
Modifiability,"Multiple errors with the out-of-tree process for SOFA, especially after the Sofa.Config merge.; This PR should fix this, plus some issues with Sofa.GL being a relocatable ""plugin"" 🤔. Tested with SofaPython3 out-of-tree. (no CI test for that yet). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1863:81,Config,Config,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1863,2,"['Config', 'plugin']","['Config', 'plugin']"
Modifiability,"Multithread/image: *Config.cmake.in were still using deprecated packages; Sofacuda: add dep (missing from a deprecated package). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3209:20,Config,Config,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3209,1,['Config'],['Config']
Modifiability,"My IDE found that some variables could be made `constexpr`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2472:23,variab,variables,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2472,1,['variab'],['variables']
Modifiability,"My contribution to the discussion:; - sofa; - core (no more components are in the core except stuff like RequirePlugin and few others); - plugins (here are all the components); - sofastandard; - the pluginized version of all the modules (but at first without reorganizing them) ; - plugin1; - plugin2; - myplugin (organized as in my previous contribution); - ...; - ...; - . To me this kind of first step can be make without breaking anything in sofa and with great benefit. ; Let me explaine: the include path can have SofaStandard so that external code using the ""modules"" (eg: #include<SofaMiscFem/TheFEMILike.h>) don't need to be updated and only adding something like find_package(SofaStandard) or more specifically find_package(SofaStandardMiscFem). . The immediate benefit of that is:; - people that don't want all the stuff in SofaStandard can disable the plugin (and compile sofa in 1min). ; - people that want only the minimal set of good component component in SofaStandard compile sofa with the componentset ""light"" (and compile sofa in 3 min); - people that want the existing sofa with all the deprecated (but still working) compile it with the SofaStandard plugin and componentset ""full"" (and compile sofa in 30 min). Of course doing this easy step shouldn't prevent us from further refactoring, people that likes the SofaStandard components can re-organize and clean things. But this can be done incrementally when ones have time to devote to that. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375:138,plugin,plugins,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334453375,5,"['plugin', 'refactor']","['plugin', 'pluginized', 'plugins', 'refactoring']"
Modifiability,"My example: ; Open ""test.scn"" in my application, the content is as follows:; ```; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" gravity=""0 0 0"" >; 	<AddResourceRepository path="".""/>; 	<RequiredPlugin pluginName='SofaOpenglVisual'/>; 	<RequiredPlugin pluginName='MyTestFlugin'/>; <VisualStyle displayFlags=""hideBehaviorModels showVisual hideForceFields"" />; 	; <CollisionPipeline verbose=""0"" />; <BruteForceDetection name=""N2"" />; 	<CollisionResponse response=""MultiFrictionContact"" />; <FreeMotionAnimationLoop/>; <!--LCPConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""art",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:207,plugin,pluginName,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696,2,['plugin'],['pluginName']
Modifiability,My hero! It was so frustrating to use cmake on SOFA (on Windows). Thanks a lot!. Could you tell me how you profile the cmake configuration?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277254445:125,config,configuration,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382#issuecomment-1277254445,1,['config'],['configuration']
Modifiability,My mistake ! This comes from my refactoring...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4946#issuecomment-2316910288:32,refactor,refactoring,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4946#issuecomment-2316910288,1,['refactor'],['refactoring']
Modifiability,"My two cents: if you are using core+plugins naming in SOFA, why not going for **core**+components instead of objects+components in plugins? ; Even if the name is not ""core"", just using **the same** in SOFA and plugins would be more consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185:36,plugin,plugins,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334472185,3,['plugin'],['plugins']
Modifiability,NFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9c,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:3850,Plugin,PluginManager,3850,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,NFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.LinearSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManage,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:4858,Plugin,PluginManager,4858,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,NFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Playback.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SceneUtility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Constant.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Dynamic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.Grid.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Container.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.Utility.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Topology.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Visual.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sof,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:2350,Plugin,PluginManager,2350,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Name / link change : ; - from https://github.com/sofa-framework/plugin.HighOrder; - to https://github.com/sofa-framework/SofaHighOrder. More info: https://github.com/sofa-framework/plugin.HighOrder/issues/5. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1430:64,plugin,plugin,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1430,2,['plugin'],['plugin']
Modifiability,"Namely BoxROI, SphereROI and MeshROI, sharing a common codebase (BaseROI). Massive refactoring. Lots of similar data, features, code across these components, lots of inconsistencies as well; - some filters quads, hexas, some not;; - some are doing the inverse selection, some not,; - some implements strict mode (aka the whole element is inside in the ROI, contrary to the normal mode where it is the center which is tested). Draw functions were copy-pasted ; lots of copy instead of reference as well.; The init procedure was very similar as well (if no one gives me X, I will search for mechanicalOjbect or a meshloader); Some classes use singular (quadIndices) some plural (quadsIndices)... ---; So this PR does gather everything with a common base with all the features (draw, strict mode, all the element types) and try to be quite generic.; Code could be even more generic and it could be very easy to add a new element type but it is not done for the moment. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4839:83,refactor,refactoring,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4839,1,['refactor'],['refactoring']
Modifiability,Need to implement a use-case of the constraint labeling introduced in #3888.; Ideas would be :; - Filter automatically non unilateral constraints in the LCPConstraintSolver; - Change behavior of 'ActuatorConstraints' in Soft robot plugin when needed . As discussed with @hugtalbot and @alxbilger,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3926:231,plugin,plugin,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3926,1,['plugin'],['plugin']
Modifiability,"Needed by #459 ; @fjourdes I let you add informations in the comments 😉 . ## issofa_constraintsolving. ### New features; - Add correctionVelocityFactor and correctionPositionFactor Data in UncoupledConstraintCorrection to experiment with modulating the constraint response influence on visual tool positions.; - Add more detail in timing of GenericConstraintSolver. ### Improvements; - Constraint problem locking extended to be safer (but not yet completely safe) when using multiple forcefeedback devices.; - GenericConstraintCorrection: automatically search LinearSolver from context when solverName is not specified (same behavior as LinearSolverConstraintCorrection).; - Factorize the computation of the compliance matrix and virtualize the computation of dx.; - Improve UncoupledConstraintCorrection compliance computation. Use the same factors for the compliance matrix computation and the correction computation as the one used in LinearSolverConstraintCorrection. ### Cleans; - Clean and Optimize UncoupledConstraintCorrection, factorize code between rigids and vecs, optimize addComplianceInConstraintSpace significantly for large number of constraints.; - Move new constraint accumulation visitors from GenericConstraintSolver.h to MechanicalVisitor.h so that they can be used by other solvers.; - Code refactoring in GenericConstraintCorrection. ### Bugfixes; - Fix FreeMotionAnimationLoop allocates the freeposition / freevelocity as first thing in the time step.; - Fix Haptic mode with haptic influence from constraints applied on all frames. It was not working well on the simulation side.; - Add a correction velocity factor and correction position factor as data in UncoupledConstraintCorrection.; - Fix, the GenericConstraintSolver was not providing the correct number of interations for profiler stats.; - GenericConstraintCorrection's ODESolver is now searched locally.; - Fix the Local Jacobian Matrix. It was not resized when no more constraints were applied on a MechanicalState",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/484:413,extend,extended,413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484,1,['extend'],['extended']
Modifiability,"Needed to build Flexible out-of-tree (yes, I tried to do that).; Surely needed to build other plugins too. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2444:16,Flexible,Flexible,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2444,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"New plugins are / should soon be released, and it could be nice to get them fetchable from SOFA:; - Caribou; - BeamAdapter",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2484:4,plugin,plugins,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2484,1,['plugin'],['plugins']
Modifiability,Nice @WilkGardariki !; Please go ahead ! change the name of the folder in MT plugin ! thanks in advance,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-311593533:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-311593533,1,['plugin'],['plugin']
Modifiability,"Nice job, it is indeed faster on my computer too. ; For the artifact, it still appears at the top of the beam on the contact, at step 46 (see image) event with your modified scene (I saw only the ShewchukPCGLinearSolver that was different). . ![image](https://github.com/sofa-framework/sofa/assets/30337881/45010585-c1e3-4f89-9e9b-f201bd700a29). Would be great to know what are the difference between our compilation configurations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1640447331:417,config,configurations,417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1640447331,1,['config'],['configurations']
Modifiability,"Nice poll ! <3. I would like to add few details about the communication plugin. It´s not only adding new protocols in it. As you know, the communication plugin is in an experimental state and it´s not push into sofa-framework. . The purpose of this gsoc project is, of course, adding new protocols, but also polish it, fix bugs, make it works on CI (linux+windows+mac). And we hope it gonna be ready for merge after the gsoc event (in case if we are selected :p)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414:72,plugin,plugin,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/633#issuecomment-380886414,2,['plugin'],['plugin']
Modifiability,"Nice! The CI says no though:. ```; 25 | SOFA_DEPRECATED_HEADER_NOT_REPLACED(""v23.06"", ""v23.12""); | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ; In file included from include/Sofa.Config/sofa/config.h:24,; from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/config.h:25,; from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.h:24,; from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.cpp:22:; include/Sofa.Config/sofa/config/sharedlibrary_defines.h:26:38: error: expected identifier before '__attribute__'; 26 | # define SOFA_EXPORT_DYNAMIC_LIBRARY __attribute__ ((visibility (""default""))); | ^~~~~~~~~~~~~; /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/config.h:29:42: note: in expansion of macro 'SOFA_EXPORT_DYNAMIC_LIBRARY'; 29 | # define SOFA_MULTITHREADING_PLUGIN_API SOFA_EXPORT_DYNAMIC_LIBRARY; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~; /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.h:40:1: note: in expansion of macro 'SOFA_MULTITHREADING_PLUGIN_API'; 40 | SOFA_MULTITHREADING_PLUGIN_API StepTask : public sofa::simulation::CpuTask; | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.cpp:22:; /builds/workspace/sofa-framework/PR-3607/ubuntu_gcc_options_release/src/applications/plugins/MultiThreading/src/MultiThreading/component/animationloop/StepTask.h:40:41: error: expected initializer before ':' token; 40 | SOFA_MULTITHREADING_PLUGI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3607#issuecomment-1411703008:180,Config,Config,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3607#issuecomment-1411703008,10,"['Config', 'config', 'plugin']","['Config', 'config', 'plugins']"
Modifiability,"Nice, there seem to be some includes missing in some plugins for the CI to pass though (DistanceGridFF)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680725772:53,plugin,plugins,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680725772,1,['plugin'],['plugins']
Modifiability,"No information is given when the initExternalModule entry point is called.; For 99.999% of the plugins, there is nothing special in it but some (SofaPython3, I am looking at you) is doing a lot of ""failable"" things when it is called.; This PR is a potential solution to this problem, by adding a (optional) entry point to check if the plugin reports by itself that it was loaded successfully. This allows SOFA to not crash if a problem arises in SofaPython3 when calling PythonEnvironment::Init() . It is not really necessary for the ""ci depends on"" as the two PR can compile without needing the other one; but it makes sense to merge them in the same time I think. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/210]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2425:95,plugin,plugins,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2425,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:467,plugin,plugins,467,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851,1,['plugin'],['plugins']
Modifiability,"No, the PR #797 is included in this one. ; I just wanted to split both contributions to ease the review somehow. ; It compiles on my two computers, isn't it a problem with plugins? The cleaning indeed could break some not updated code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220:172,plugin,plugins,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432562220,1,['plugin'],['plugins']
Modifiability,Nobody (in the sofa code base) was including this deprecated file (which is a not bad news by itself).; But I encountered some old plugins (implementing new Qt Widgets) including this file (thats why I could detect this problem),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940:131,plugin,plugins,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2044#issuecomment-828795940,1,['plugin'],['plugins']
Modifiability,"Not a lot of contribution here. . In recent PR I'm doing moving code from modules to plugins. ; I think that the followin approach combining plugins & packages (group of selected plugin or components); plugins:; - plugin1; - plugin2; - plugin3; - plugin4. packages:; - SofaAdvanced (include pluin1, plugin2); - SofaMisc (include plugin3, plugin4); - SofaNG(include plugin1, and MechanicalFEM); .... What do you think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473:85,plugin,plugins,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-328463473,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Not exactly, the first is about refactoring canCreate and create while the other is about providing a system for template deduction. ; It seems connected because canCreate is widely used to implement template deduction (but it is not its sole purpose). If template deduction is merged this will remove a lot of canCreate... but some may still. So some ideas in #3309 may still have values independently of #3938.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1594710107:32,refactor,refactoring,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1594710107,1,['refactor'],['refactoring']
Modifiability,Not relevant anymore with SofaPython3 plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-2439637936:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-2439637936,1,['plugin'],['plugin']
Modifiability,Not sure I have your fix in mine. Lets wait for CI compilation.; Are you using the Sph plugin right now? I would be interested to see some use case.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542688805:87,plugin,plugin,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1188#issuecomment-542688805,1,['plugin'],['plugin']
Modifiability,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:73,refactor,refactoring,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688,1,['refactor'],['refactoring']
Modifiability,"Not sure this app is useful, but at least it works now. Example of output:. ```; .\sofaInfo.exe examples\Demos\caduceus.scn; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.AnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Collision.Detection.Algorithm.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Collision.Detection.Intersection.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Collision.Geometry.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Collision.Response.Contact.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Constraint.Lagrangian.Solver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.LinearSolver.Iterative.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/builds/bin/RelWithDebInfo/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/Alex/Dev/sofa1/build",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4422:133,Plugin,PluginManager,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4422,14,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Note that there are still Data variables that are not been renamed in `Sofa/Component/Topology/Container/Grid/src/sofa/component/topology/container/grid/SparseGridTopology.h`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2124387508:31,variab,variables,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4683#issuecomment-2124387508,1,['variab'],['variables']
Modifiability,"Note to my future dummy-me: ; Dependency is present in CMakeLists but having it in Config.cmake.in propagates this dependency to downstream modules, unable to find tinyXML since it's linked privately :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138:83,Config,Config,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4555#issuecomment-1976565138,1,['Config'],['Config']
Modifiability,"Note: collision pipeline must be refactored if we want to reduce the ridiculous high number of calls to `getValue`. Every time there is a check between two primitives, there is a `getValue` call to `MechanicalObject::position`, `proximity` and `alarmDistance`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1263427240:33,refactor,refactored,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3356#issuecomment-1263427240,1,['refactor'],['refactored']
Modifiability,Note: the build fail on OSX is due to API change in boost 1.64 that makes the Multithreading plugin fail to build. I would not pay attention to it until Multithreading is fixed.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/314#issuecomment-313023233:93,plugin,plugin,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/314#issuecomment-313023233,1,['plugin'],['plugin']
Modifiability,"Now SoftRobots plugin have a repository `examples/`. Force full build triggered, let's wait CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1580175136:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1580175136,1,['plugin'],['plugin']
Modifiability,Now fundamentally to me they are the same. Module is probably a more adequate name than plugin as it convey the idea of 'modul'arization while plug'in' convey they idea of internal/external. Having a consortium supported Module compared to an external one doesn't change the nature (it is still a module). But honestly I don't really care...what really matter to me is to make more and more of them :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408807754:88,plugin,plugin,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408807754,1,['plugin'],['plugin']
Modifiability,"Now that Sofa.Config is in master, (#1674), we just have to remove the duplicated code in the CMakeFile of SofaPython3.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1661#issuecomment-780670499:14,Config,Config,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1661#issuecomment-780670499,1,['Config'],['Config']
Modifiability,"Now we have a tool to list the deprecated components, we can build with `SOFA_WITH_DEPRECATED_COMPONENTS=OFF` + `APPLICATION_GETDEPRECATEDCOMPONENTS=ON` and ignore scenes using deprecated components during scene tests. I also added a function to ignore scenes using non-existent (because disabled) plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/611:298,plugin,plugins,298,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611,1,['plugin'],['plugins']
Modifiability,"Now, as you said Maxime, the definitive solution would be to implement component specific tests where the components are implemented and not in a shared plugins like SceneCreator or SofaTest but this is still something to do (One step at a time).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669:153,plugin,plugins,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334525669,1,['plugin'],['plugins']
Modifiability,"Now, this action checks and make sure that sufficiently descriptive labels are set.; Among the 8 possible labels:; - enhancement; - deprecated; - refactoring; - pr: breaking; - pr: clean; - pr: fix; - pr: new feature; - pr: test. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4079:117,enhance,enhancement,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4079,2,"['enhance', 'refactor']","['enhancement', 'refactoring']"
Modifiability,"NumericalIntegration_test.cpp.o Sofa_test.h (734 ms); ... 62158 ms: sofa/SofaKernel/modules/SofaHelper/../SofaDefaultType/src/sofa/defaulttype/Vec.h (included 143 times, avg 434 ms), included via:; cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (936 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (850 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (831 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (825 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (806 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (792 ms); ... 54486 ms: /opt/Qt/5.15.0/gcc_64/include/QtWidgets/qwidget.h (included 94 times, avg 579 ms), included via:; QSofaStatWidget.h QLabel qlabel.h qframe.h (1332 ms); QTabulationModifyObject.h QWidget (1308 ms); VRender.h config.h QOpenGLWidget qopenglwidget.h QWidget (1240 ms); QSofaStatWidget.h QLabel qlabel.h qframe.h (1237 ms); mouseGrabber.h config.h QOpenGLWidget qopenglwidget.h QWidget (1159 ms); VRender.h config.h QOpenGLWidget qopenglwidget.h QWidget (1153 ms); ... 50534 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/logging/Messaging.h (included 122 times, avg 414 ms), included via:; cmake_pch.hxx.json cmake_pch.hxx (1185 ms); cmake_pch.hxx.json cmake_pch.hxx (1155 ms); cmake_pch.hxx.json cmake_pch.hxx (1143 ms); cmake_pch.hxx.json cmake_pch.hxx (1029 ms); cmake_pch.hxx.json cmake_pch.hxx (1017 ms); cmake_pch.hxx.json cmake_pch.hxx (995 ms); ... 48975 ms: sofa/applications/plugins/SofaTest/../SofaTest/Sofa_test.h (included 83 times, avg 590 ms), included via:; VariationalSymplecticImplicitSolverNonLinearForceDynamic_test.cpp.o Elasticity_test_deprecated.h Elasticity_test.h (913 ms); TransformEngine_test.cpp.o (891 ms); SparseGridTopology_test.cpp.o (805 ms); TetrahedronNumericalIntegration_test.cpp.o (779 ms); AffineMovementConstraint_test.cpp.o Elasticity_test.h (767 ms); MeshROI_test.cpp.o (755 ms); ... 38428 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/fixed_array.h ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:31894,config,config,31894,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['config'],['config']
Modifiability,O.Mesh.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Constant.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Dynamic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Grid.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Utility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Visual.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Iterative.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Direct.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Preconditioner.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Diffusion.dylib,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:2596,Plugin,PluginManager,2596,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"OK I agree that this allows to compile Flexible without the SOFA-HighOrder. Before moving SOFA-HighOrder to the gitHub repo, do any of you know if ; there are plans to move those plugins outside of github ?. My understanding is that at some point SOFA was going to be cut into ; several pieces that could be optionally compiled. Is this still on the radar ?. Hervé. Le 05/10/2016 à 15:27, thomas-lemaire a écrit :. > yet an other option is to conditionnaly compile HighOrderTopology code ; > in Flexible based on whether the HighOrderTopology plugin is existing ; > or not (in cmakelists package_require(HighOrderTopology) if ; > (HighOrderTopology_FOUND) ... ):; > - each plugin can live in its own repository; > - no need for a third plugin; > - should work whether all the plugins are compiled in the same cmake ; > build project or are compiled/installed separately (well ; > HighOrderTopology must be available when compiling Flexible); > ; > thomas; > ; > ----- Mail original -----; > ; > > De: ""Matthieu Nesme"" notifications@github.com; > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > ; > > Hi Hervé,; > > ; > > In general, I think it is a good idea to have a repo per plugin, ; > > even if it; > > becomes more difficult to update them when the sofa core is modified.; > > But in this specific case, it would be great to add this plugin to this; > > github repo, so Flexible can still benefit from your code.; > > ; > > Another solution, could be to add a third plugin in your independent; > > repository, that would link with both SOFA-HighOrderTopology and ; > > Flexible,; > > and that would contain the high order shape functions.; > > ; > > What do you think?; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub , or mute the thread .; > ; > —; > You are receiving this because ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233:39,Flexible,Flexible,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251716233,8,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,"OR] [RequiredPlugin(Sofa.Component.Visual)] Plugin not found: ""Sofa.Component.Visual"". Failed to load: [""Sofa.Component.Visual""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Iterative)] Plugin not found: ""Sofa.Component.LinearSolver.Iterative"". Failed to load: [""Sofa.Component.LinearSolver.Iterative""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Response.Contact)] Plugin not found: ""Sofa.Component.Collision.Response.Contact"". Failed to load: [""Sofa.Component.Collision.Response.Contact""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Rendering3D)] Plugin not found: ""Sofa.GL.Component.Rendering3D"". Failed to load: [""Sofa.GL.Component.Rendering3D""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Shader)] Plugin not found: ""Sofa.GL.Component.Shader"". Failed to load: [""Sofa.GL.Component.Shader""]; [ERROR] [RequiredPlugin(Sofa.Component.IO.Mesh)] Plugin not found: ""Sofa.Component.IO.Mesh"". Failed to load: [""Sofa.Component.IO.Mesh""]; [ERROR] [RequiredPlugin(Sofa.Component.Setting)] Plugin not found: ""Sofa.Component.Setting"". Failed to load: [""Sofa.Component.Setting""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Solver)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Solver"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Solver""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Backward)] Plugin not found: ""Sofa.Component.ODESolver.Backward"". Failed to load: [""Sofa.Component.ODESolver.Backward""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Correction)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Correction"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Correction""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Geometry)] Plugin not found: ""Sofa.Component.Collision.Geometry"". Failed to load: [""Sofa.Component.Collision.Geometry""]; [ERROR] [SofaRuntime] ValueError: Object type BackgroundSetting<> was not created; The object is not in the factory.; This component has been MOVED from SofaBaseVisual",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:4738,Plugin,Plugin,4738,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,O] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Diffusion.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.Linear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.NonLinear.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.MappedMatrix.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Mapping.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.StateContainer.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.Spring.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.Elastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManage,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:4996,Plugin,PluginManager,4996,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"O] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDeformable.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaBoundaryCondition.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralDeformable.dll; [ERROR] [PluginManager] Plugin not found: ""SofaGeneralEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWith",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:6331,Plugin,PluginManager,6331,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,ObjectFactory] Class already registered: SpringForceField<Vec2d>; [WARNING] [ObjectFactory] Class already registered: SpringForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: SpringForceField<Vec6d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec1d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec2d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec6d>; [WARNING] [ObjectFactory] Class already registered: PolynomialSpringsForceField<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [WARNING] [ObjectFactory] Class already registered: PenalityContactForceField<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [WARNING] [ObjectFactory] Class already registered: LineCollisionModel<Vec3d>; [WARNING] [ObjectFactory] Class already registered: PointCollisionModel<Vec3d>; [WARNING] [ObjectFactory] Class already registered: TriangleCollisionModel<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSo,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:11825,Plugin,PluginManager,11825,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,Ok found it: the scene-tests are not performing in default mode (100 iterations with a timeout of 60s for a Debug build) because FastTetrahedronCorotationalForceField.scn is listed with custom values in examples/.scene-tests config file.; Renaming the scene according to b061a51606f9dbe6a8bb9305eb6a95af0aad6bf5 should calm down the CI ;-),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442:225,config,config,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359378442,1,['config'],['config']
Modifiability,"Ok so I see still a lot of change to do before to have a clean PR to merge. ; The first change is probably to make the code available in an independant plugin. ; I wonder if this could be an opportunity to make the whole VolumetricData a plugin ....this could be a kind of gentle test for sofa core pluginiization, . @guparan , @hugtalbot , @fredroy any opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316:152,plugin,plugin,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-325373316,3,['plugin'],"['plugin', 'pluginiization']"
Modifiability,"Ok so maybe I misunderstood your last comment, but the GTest find module you added in your last commit works fine on my side with cmake >= 3.12 (which is our min required version). So I guess you meant that the embedded GTest find module in recent cmake version (>=3.20) was required to have the correct targets defined, which is not the case in earlier <3.20 version of cmake (tested in 3.12), but this recent GTest find module was not building if used with cmake <3.20. In the end, your last commit seems to fix everything, so looks like a more generic option that relying on cmake config files as suggested in my last comment.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923509418:584,config,config,584,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923509418,1,['config'],['config']
Modifiability,Ok thank for the extra details. After a quick glance this line is changing the way CImg is handling error. ; The problem is that it tries to lock mutex which somehow cause the crash. ; My current guess is that if it could be related to the fact that there is either image & CImage plugin which are both using CImg...which have static initialized structure...just a guess... EDIT: mmm I'm deeply thinking...in CImg; ```cpp; #if defined(cimg_module); Mutex_info& Mutex_attr();; #elif defined(cimg_main); Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #else; inline Mutex_info& Mutex_attr() { static Mutex_info val; return val; }; #endif; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077:281,plugin,plugin,281,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-356095077,1,['plugin'],['plugin']
Modifiability,"Ok, CImg seems to do the job as well.; The dependency is already in plugin image, we just need to move it back to SOFA (licence is compatible).; And then this one-header-only include will allow us to read jpeg.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759:68,plugin,plugin,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-263830759,1,['plugin'],['plugin']
Modifiability,"Ok, I've just tried to compile SOFA v21.12 with Optimus v21.12 and STLIB v21.12. I've cleanly cloned them three and configured cmake with the following : `cmake /path/to/sofa -DSOFA_EXTERNAL_DIRECTORIES=/path/to/Optimus;/path/to/STLIB` and cmake works like a charm. Didn't compile it though, but the cmake shouldn't crash at least. So I suggest you to delete your cloned repositories and clone them again and then directly checkout v21.12. . Your issue is due to the fact that you are adding the project using this macro `sofa_add_subdirectory` which didn't exist at the time. I think the closes one was `sofa_add_plugin`. But using this macro is not mandatory, you can add such plugins with `SOFA_EXTERNAL_DIRECTORIES` if you don't have to much of them... . Sometimes, cloning first master then switching branch can generate issues, if so you can use this command line instead `git clone -b v21.12 --single-branch git@github.com:sofa-framework/sofa.git`. From now, I won't provide more help on this old release, if you face anything else, I highly suggest you to update your SOFA version.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4941#issuecomment-2311917765:116,config,configured,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4941#issuecomment-2311917765,2,"['config', 'plugin']","['configured', 'plugins']"
Modifiability,"On MacOS, I experienced a big problem since my OS upgrade to Big Sur. ; runSofa viewport remaining blank, either with QGL viewer or OpenGL viewer, with the following error message in the terminal:; ```; qt.qpa.openglcontext: Could not create NSOpenGLContext with shared context, falling back to unshared context.; ```; I finally figured it out: My Qt version was 5.15.x (installed with brew or the Unified Installer) and there seems to be a problem here, at least with my configuration : Intel Mac, with ATI GPU, MacOS 11.2.3.; **Downgrading Qt to 5.12.5 is a workaround.** It's a dirty fix that works, where a complete reinstall of Xcode and dependencies did not. At least I have a working build of runSofa now :-). I really have no idea of the exact cause of the problem, maybe related to my Mac configuration, GPU drivers or use of deprecated API by SOFA, but I hope this could help someone with the same problem.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2028:472,config,configuration,472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2028,2,['config'],['configuration']
Modifiability,"On Windows, when doing INSTALL, relocatable dlls have to be copied to install_dir/bin (because there is no RPATH on Windows).; This is done by `windows-postinstall-fixup.sh` but this script is executed only if the CMake option `SOFA_BUILD_RELEASE_PACKAGE` is ON. To do: rewrite `windows-postinstall-fixup.sh` in CMake and make sure it's always executed after install.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2353:270,rewrite,rewrite,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2353,1,['rewrite'],['rewrite']
Modifiability,On my PC this version does not compile...do the PR 797 is required to be merged before this one ?; On the CI the problem is probably caused by the Cuda version that is not refactored.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432542719:172,refactor,refactored,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-432542719,1,['refactor'],['refactored']
Modifiability,On my way to fix this issue https://github.com/sofa-framework/sofa/issues/895; I found that the Xsp code was duplicated with a C and a C++ version. . So I refactored the two and I added some tests to the files. ; On of the added test in ReadState_loadFailure is currently failing...wich is expected as it shows an existing problem for which fixing is outside the scope of the PR. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/918:155,refactor,refactored,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/918,1,['refactor'],['refactored']
Modifiability,One (new) scene is failing: `SceneTests.applications/plugins/LMConstraint/examples.DOFBlockerLMConstraint.scn`; The error message is: ` [ERROR] [UncoupledConstraintCorrection(default67)] Cannot remove the requested constraint solver` ; It is possible that the scene itself was wrong but it is highlighted here because you add a msg_error(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940:53,plugin,plugins,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-934166940,1,['plugin'],['plugins']
Modifiability,"One approach discussed this meeting was:; keep the current config.h for compatibility to external code base but in sofa progressively stop using it and replace it with specific ones eg: ""config/comon_defines.h"" (that does not contains the inclusion of config/build_option_opengl.h/experimental/etc...""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422:59,config,config,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/494#issuecomment-339436422,3,['config'],['config']
Modifiability,One more plugin in Sofa. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/477:9,plugin,plugin,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477,1,['plugin'],['plugin']
Modifiability,One more plugin in Sofa. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/486:9,plugin,plugin,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486,1,['plugin'],['plugin']
Modifiability,"One of the point remaining is to build an object that map the component to plugins. . The easy path is probably to make an application that loads all thall the plugins, load them and dump the infos in a file (json, xml, whatever). . Then having a queriable object to get that info through an API.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607:75,plugin,plugins,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-313046607,2,['plugin'],['plugins']
Modifiability,"One package was missing in the SofaMeshCollisionConfig.cmake.in, so out-of-tree projects using sofameshcollision are throwing error while doing the cmake config. (allows to compile the plugin beamadapter out-of-tree). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2400:154,config,config,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2400,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:160,coupling,coupling,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799,1,['coupling'],['coupling']
Modifiability,"One small thing, should we mark this PR as breaking? ; From my experience (🥱), a lot of people don't really include what they use, so it could happen that a seemingly useless include in one could be useful further, in their plugin or whatever. I know this is really a bad practice from their part but still, people complain even if it is their fault 🤪.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2475#issuecomment-986582757:224,plugin,plugin,224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2475#issuecomment-986582757,1,['plugin'],['plugin']
Modifiability,"One type to rule them all... ©. Bigger than expected PR; made to harmonize index type for templated Vector/Mat type.; (some had int as index type, other unsigned int, or std::size_t, etc); ~Surprisingly not very breaking with MSVC, but GCC (and clang?) does break when templates declared as int.; (flexible/compliant was a PIA to fix)~ After a fuckton of commits, I regret this sentence 🙃. MAIN BREAKING POINT: VisualModelImpl needs indices to be int and not long (like std::size_t) so it cannot take directly the topology types (Triangle, Quad, etc) for its buffers. Thats why there are now VisualEdge, VisualTriangle, VisualQuad which still takes index as int.; (main reason is that graphical systems (OpenGL, etc) only can manage integers). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1453:298,flexible,flexible,298,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1453,1,['flexible'],['flexible']
Modifiability,Only some cleaning in:; - Class define macro; - Data and member prefix; - Move code from header to inl or cpp files. Update several plugin demo scenes. ![SpatialGridContainer_00000001](https://user-images.githubusercontent.com/21199245/66745709-13632500-ee80-11e9-9cfe-94e1a9e4d27c.png); ![SPHFluidForceField_benchmarks_00000001](https://user-images.githubusercontent.com/21199245/66745711-13632500-ee80-11e9-8382-738a86b68c3c.png); ![SPHFluidSurfaceMapping_00000001](https://user-images.githubusercontent.com/21199245/66745713-13fbbb80-ee80-11e9-98a1-ea1386f91c19.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1186:132,plugin,plugin,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1186,1,['plugin'],['plugin']
Modifiability,"Originally, the goal was not really to go for ; - #4221. But more to upgrade the gtest version, as the one in SOFA is really old (1.7.0 , *Sep 19, 2013* :exclamation: ) and was throwing warnings for newer cmake.; So instead of simply update the source in extlibs, I took the liberty to go into the find/fetch mechanism. A bit difficult as the CMakefile in the embedded version was heavily customized, so I am not 100% sure the install/package process is working well. But it should 😅. Last note: it is adding a target `gtest_main` which is always activated in the gtest cmake file. It is not used by SOFA as we have our own main for gtest. [ci-depends-on https://github.com/sofa-framework/PluginExample/pull/5]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471:689,Plugin,PluginExample,689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471,1,['Plugin'],['PluginExample']
Modifiability,"Output of the failing test on MacOS:; ```; [----------] 1 test from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Compliant/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:257,plugin,plugins,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176,7,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,PR #139 moved licence.txt into license.LGPL.txt. This changed has not been propagated in the cpack config. I didn't create a branch as only one line is modified. Hope it doesn't break the CI... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/194:99,config,config,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194,1,['config'],['config']
Modifiability,"PR #1788 from @courtecuisse should address branch sofa/v20.12 instead of master. This PR is potentially breaking, since it replaces `getSizeX()` and `getSizeY()` which might be used in external CUDA plugins. I'll transform the other PR into a backport to master so we can discuss it on the next meeting. Original PR message:. > @courtecuisse:; > Change Naming in cudaMatrix with rowSize and colSize which are the standard names in sofa.; > This change enables to use CudaMatrix as template. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1805:199,plugin,plugins,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1805,1,['plugin'],['plugins']
Modifiability,"PR #2036 rebased and to be merge inside topologyChanges PoC branch. Add mechanism of callbacks inside ```TopologyHandler``` instead of inheriting from it and override methods. - Callback have been added inside ```TopologyDat``` a to define specific method when creating/destroying element (call by remove/add). See ```TriangularFEMForceField``` for an example; - Map of Callback has been added inside TopologyHandler to set specific callback depending on the topology event. See ```TriangularBendingSprings``` as an example which handle Edge but also Triangle removing/adding. To discuss if this is better than inheriting from ```TopologyHandler```. ![image](https://user-images.githubusercontent.com/21199245/121326580-fa3f9f80-c912-11eb-9d89-0966330bbded.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2087:135,inherit,inheriting,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2087,2,['inherit'],['inheriting']
Modifiability,"PR #351 should be merged before. ## Description. This PR aims at meshing an implicit shape with CGAL ; ImplicitShape is a concept of class (inheriting from BaseObject) defining any implicit shape by a common method `eval(Point p)` which returns the value of the function at this point.; Basically, it's possible to create a component inheriting from ImplicitShape, to describe a shape (torus, sphere etc.) by its literal equation. ## User Guide. A Sofa scene file is featured (in the CGALPlugin scene repertory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354:140,inherit,inheriting,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354,2,['inherit'],['inheriting']
Modifiability,"PR could refactor Ray : not a ray, change name, including iterator in the name (eg RayCollisionIterator ..). In the code, there should be refactoring with the defaulttype::Ray). See #1251 . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1255:9,refactor,refactor,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1255,2,['refactor'],"['refactor', 'refactoring']"
Modifiability,PR is ready for me now. ; Still need to decide if I should refactor SofaOpenCL or not given the fact that it doesn't compile with the current SOFA's master branch --> to be discussed in the next SOFA-dev meeting.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2056960311:59,refactor,refactor,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2056960311,1,['refactor'],['refactor']
Modifiability,PR just got updated.; Several points are below this PR:; - define a new design for managing colors by component; - should the color API allow for new colors; - Should Prefab be refactored in Sofa.Core ? . → wip : PR should keep only the 2-line change,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4536#issuecomment-2022230108:177,refactor,refactored,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4536#issuecomment-2022230108,1,['refactor'],['refactored']
Modifiability,"PSL version. I'm not really sure but I think that with the Template mecanism of PSL (https://github.com/sofa-framework/sofa/tree/master/applications/plugins/PSL#templates) . Maybe it is possible to come up with a solution looking like that:; ```css; Node : {; Import : ""pythonlib"". // The implementation that create a BoxROI and transform the parameters from; // Use friendly to the one used in the component. ; Template : {; name : MyBoxROI; properties : { ; position : ""0 0 0""; orientation : ""0 0 0""; dimmension: ""10 10 10 ""; }; BoxROI : {; // The convertToOrientedBox is implemented in the ""pythonlib"" module.; orienteBox : convertToOrientedBox(position, orientation, dimmension); } ; }; ; /// One instance of the boxroi.; MyBoxROI : {; position : ""1 2 3""; orientation : ""0.5 0.5 0.5""; dimmension : ""3 4 5""; }. /// A second instance of the boxroi.; MyBoxROI : {; position : ""0 2 3""; orientation : ""0.5 0.5 0.5""; dimmension : ""7 4 5""; }. }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357356074:149,plugin,plugins,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357356074,1,['plugin'],['plugins']
Modifiability,"Pack/GL/glew.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL/glut.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL/glxew.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/GL/wglew.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/extlibs/WinDepPack/iconv.h; ....; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SofaOpenglVisual/SofaOpenglVisualConfig.cmake; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/SceneCreator.lib; 1>-- Up-to-date: C:/projects/sofa-build/install/bin/SceneCreator.dll; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/GetAssembledSizeVisitor.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/GetVectorVisitor.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneCreator.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneUtils.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/config.h; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets-release.cmake; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfigVersion.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfig.cmake; 1>CMake Error at applications/plugins/CImgPlugin/cmake_install.cmake:38 (file):; 1> file cannot create directory:; 1> C:/projects/sofa-build/$C:/projects/sofa-build/install/plugins/CImgPlugin/bin.; 1> Maybe need administrative privileges.; 1>Call Stack (most recent call first):; 1> applications/plugins/cmake_install.cmake:37 (include); 1> cmake_install.cmake:88 (include); 1>; 1>; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: The command ""setlocal; 1>C:\Pr",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1117:1482,config,config,1482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1117,1,['config'],['config']
Modifiability,"Parent modules must always interface the same libraries.; e.g. Sofa.Component.dll must always be the same. Thus, if some of its child modules are disabled, parent module will not generate a library. This PR creates and uses a new macro `sofa_add_subdirectory_modules`.; This macro is meant for parent modules to easily add their child modules and sets a variable with all added targets.; If a child module is missing or disabled, a message will be shown (not an error) and the library will not be created. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3225:354,variab,variable,354,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3225,1,['variab'],['variable']
Modifiability,"Pb de maintenabilité si on sort certains plugins sur des dépôts séparés (gestion des branches, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290706010:41,plugin,plugins,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290706010,1,['plugin'],['plugins']
Modifiability,Pb of compilation with Compliant (and probably Flexible as well),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-381521905:47,Flexible,Flexible,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-381521905,1,['Flexible'],['Flexible']
Modifiability,"Playing with [SofaBenchmarks](https://github.com/alxbilger/SofaBenchmark), stumbled on the constructor of sofa::type::vec:. ```; BM_FixedArray_construct<stdarray3f>/8192 14.6 us 13.2 us 74667; BM_FixedArray_construct<sofatypefixedarray3f>/8192 13.0 us 14.2 us 112000; BM_FixedArray_construct<sofa::type::Vec3f>/8192 26.7 us 24.2 us 21333; ```; (trying to construct 8192 std::array<float, 3> vs sofa::fixed_array<float,3> vs sofa::type::vec3f); Unexpectedly, the vec3f is almost twice slower that the other, which is weird as type::vec3f inherits fixed_array<float,3>; By using the constructor of fixed_array (instead of calling set()), we can achieve closer results:. ```; BM_FixedArray_construct<stdarray3f>/8192 14.9 us 12.2 us 64000; BM_FixedArray_construct<sofatypefixedarray3f>/8192 12.7 us 10.6 us 89600; BM_FixedArray_construct<sofa::type::Vec3f>/8192 15.0 us 17.4 us 42165; ```. I did my tests on Windows/MSVC2019 so maybe results are different with different compilers/systems though... ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2439:537,inherit,inherits,537,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2439,1,['inherit'],['inherits']
Modifiability,Please carefully consider impact before moving files around (i.e. discussion on the current plugin / NG PRs),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482,1,['plugin'],['plugin']
Modifiability,"Please create 2 feature branches for these 2 different topics: Bezier High Order elements removal, MSVC Plugin Manager fix.; I just sent you an email ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/14#issuecomment-243443973:104,Plugin,Plugin,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/14#issuecomment-243443973,1,['Plugin'],['Plugin']
Modifiability,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/620:733,refactor,refactoring,733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620,1,['refactor'],['refactoring']
Modifiability,Please someone merge. This is needed by external plugins.; @alxbilger @fredroy @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2958#issuecomment-1134802027:49,plugin,plugins,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2958#issuecomment-1134802027,1,['plugin'],['plugins']
Modifiability,Plugin = to be loaded by PluginManager (via `<RequiredPlugin/>` or plugin_list.conf).; Classic library = does not contain any Component. sofa2ng has been modified accordingly. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/872:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/872,2,['Plugin'],"['Plugin', 'PluginManager']"
Modifiability,Plugin Manager: Fix segfault when removing a plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/6:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/6,2,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"Plugin SofaCoreAsync; https://github.com/SofaDefrost/sofa/blob/pluginSofaCoreAsync/applications/plugins/SofaCoreAsync/Sofa/Core/Async/tests/AsyncComponentTracker_test.cpp. Associate to the component a Data<'state'>. This data state can be used to keep track of component state change and propagate lazy update so that the component that depend on other can be updated appropriately. The general design was attempting to combine both synchonous and asynchronous components in the same scene so that ""normal"" Sofa object can still interact with the one using asynchronous updates. . In the following example a change in python1,2,3 file is reloaded and the ImplicitFeldRenderer & MeshGeneration are updated, each in an asynchronous way. ; ```qml; Node : {; ImplicitField : { name : ""python1"", src : ""python1.py"" }; ImplicitField : { name : ""python2"", src : ""python2.py"" }; ImplicitField : { name : ""python3"", src : ""python3.py"" }; ; ImplicitFieldRenderer : { src : ""@python1"" }; ImplicitFieldRenderer : { src : ""@python2"" }; ImplicitFieldRenderer : { src : ""@python2"" }. TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh1"" }; SurfaceMeshGeneration : { src : ""@python2"", name = ""mesh2"" }; TetrahedralMeshGeneration : { src : ""@python1"", name = ""mesh3"" }; ; MechanicalFEM3D : { src : ""@mesh1"" }; MechanicalFEM2D : { src : ""@mesh2"" }; MechanicalFEM3D : { src : ""@mesh3"" }; }; ```. Note 1: When used in asyncrhonous mode, the current approach does not guarante that a change is propagated immediately. So one change in a component at a given IDLEEvent may be updated in this or an other IDLEEvent. It depend on ""when"" the dependencies checks the validity of their input. . Node 2: To fix that a queue may be used to keep track of what still needs to be done. Looks good on paper but this kind of implementation are often much more complex than their initial drafted idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367274769,3,"['Plugin', 'plugin']","['Plugin', 'pluginSofaCoreAsync', 'plugins']"
Modifiability,"Plugin `image` fails (`Error C2672 : 'std::max': no matching overloaded function found`) when compiling `ImageFilter` with the first template parameter being `long` or `unsigned long`. This happens when `PLUGIN_IMAGE_COMPILE_SET` is set to `full`. The compilation fails only with MSVC. The fix is not tested and may change the accuracy because of an additional conversion to `float`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4484:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4484,1,['Plugin'],['Plugin']
Modifiability,Plugin compilation: 100% out-of-tree,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1285:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285,1,['Plugin'],['Plugin']
Modifiability,"Plugin loading failing when running with normal python, but working with ./runSofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4905:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4905,1,['Plugin'],['Plugin']
Modifiability,Plugin need a fuill pluginization anyway... and cleaning... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1219:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1219,2,"['Plugin', 'plugin']","['Plugin', 'pluginization']"
Modifiability,Plugin not compiling with recent (post 20/12/2018) version of master,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/893:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/893,1,['Plugin'],['Plugin']
Modifiability,Plugin to be externalized in the future?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103578828:0,Plugin,Plugin,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103578828,1,['Plugin'],['Plugin']
Modifiability,"PluginFinder : https://github.com/alxbilger/PluginFinder. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2860:0,Plugin,PluginFinder,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2860,2,['Plugin'],['PluginFinder']
Modifiability,"PluginManager, dynamic libraries and entry points flaw",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4462:0,Plugin,PluginManager,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4462,1,['Plugin'],['PluginManager']
Modifiability,"PluginManager.cpp:403 `if (!FileSystem::isFile(plugin))` can mean 2 things:; - plugin is a path but is invalid (file does not exist or path is badly formed); - plugin is not a path (it's a name). The problem was that we assumed that `!FileSystem::isFile(plugin)` implied that plugin was a name. PluginManager::pluginIsLoaded should now correctly handle paths and names. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1823:0,Plugin,PluginManager,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1823,8,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'pluginIsLoaded']"
Modifiability,PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.Solver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Lagrangian.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.Projective.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Constraint.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.AnimationLoop.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.MechanicalLoad.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Geometry.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Algorithm.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Intersection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Mapper.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Contact.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Setting.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Controller.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/l,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:6330,Plugin,PluginManager,6330,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering2D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering3D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Shader.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GUI.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSceneCreator.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libArticulatedSystemPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofaMatrix.dylib; [INFO] [PluginManager] 68 plugins have been loaded from /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini. ########## SIG 11 - SIGSEGV: segfault ##########; [1] 21189 segmentation fault ./runSofa; `. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:8935,Plugin,PluginManager,8935,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [WARNING] [ObjectFactory] Class already registered: AngularSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: MeshSpringForceField<Vec1d>; [WARNING] [ObjectFactory] Class already registered: MeshSpringForceField<Vec2d>; [WARNING] [ObjectFactory] Class already registered: MeshSpringForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: RestShapeSpringsForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: RestShapeSpringsForceField<Vec1d>; [WARNING] [ObjectFactory] Class already registered: RestShapeSpringsForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: PolynomialRestShapeSpringsForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: SpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: SpringForceField<Vec1d>; [WARNING] [ObjectFactory] Class already registered: SpringForceField<Vec2d>; [WARNING] [ObjectFactory] Class already registered: SpringForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: SpringForceField<Vec6d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec1d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec2d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec3d>; [WARNING] [ObjectFactory] Class already registered: StiffSpringForceField<Vec6d>; [WARNING] [ObjectFactory] Class already registered: PolynomialSpringsForceField<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [WARNING] [ObjectFactory] Class already registered: PenalityContactForceField<Vec3d>; [INFO] [PluginManager] Loaded plugin: /home/,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:11583,Plugin,PluginManager,11583,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Utility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Visual.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSystem.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Iterative.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Ordering.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Direct.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:4136,Plugin,PluginManager,4136,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Qt.dll; [DEPRECATED] [SofaValidation] SofaValidation is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SceneCreator.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/ArticulatedSystemPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaMatrix.dll; [INFO] [PluginManager] 72 plugins have been loaded from C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config/loadedPlugins.ini. [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckCollisionResponse, SceneCheckDeprecatedComponents, SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:11221,Plugin,PluginManager,11221,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,11,"['Plugin', 'config', 'plugin']","['PluginManager', 'config', 'plugin', 'plugins']"
Modifiability,"PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaBoundaryCondition.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralDeformable.dll; [ERROR] [PluginManager] Plugin not found: ""SofaGeneralEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLinearSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaTopologyMapping.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaUserInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaConstraint.dll; [INFO] [PluginManager] Loaded plugin: D:/github-cl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:7184,Plugin,PluginManager,7184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDeformable.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaBoundaryCondition.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralAnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralDeformable.dll; [ERROR] [PluginManager] Plugin not found: ""SofaGeneralEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLinearSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/Re",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:6439,Plugin,PluginManager,6439,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,PluginRepository paths = D:/github-clones/sofa/build/bin;D:/github-clones/sofa/build/plugins;D:/github-clones/sofa/build/bin/RelWithDebInfo; [INFO] [runSofa] DataRepository paths = D:/github-clones/sofa/src/share;D:/github-clones/sofa/src/examples;D:/github-clones/sofa/build;D:/github-clones/sofa/build; [INFO] [runSofa] GuiDataRepository paths = D:/github-clones/sofa/src/applications/projects/runSofa/resources;D:/github-clones/sofa/src/modules/SofaGuiQt/src/sofa/gui/qt/resources;D:/github-clones/sofa/build; [INFO] [runSofa] Loading automatically plugin list in D:\github-clones\sofa\build\bin\RelWithDebInfo/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDeformable.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/Rel,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:5685,Plugin,PluginManager,5685,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Pluginize SofaSparseSolver & SofaPreconditoner,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/663:0,Plugin,Pluginize,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663,1,['Plugin'],['Pluginize']
Modifiability,Plugins: loading & components introspection,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281:0,Plugin,Plugins,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281,1,['Plugin'],['Plugins']
Modifiability,"Preliminary step before removing fixed_array inheritance from Vec. Functions are using fixed_array but a Vec is given.; This works because vec inherits fixed_array. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4269:45,inherit,inheritance,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4269,2,['inherit'],"['inheritance', 'inherits']"
Modifiability,"Preparation for sofang. ComponentChange does not handle the case where a component is still creatable/invokable from a (deprecated) plugin but the ""real"" component has been moved into an other plugin (typically from a current Sofa Module to a planned new SofaNG module); This PR add this case into ComponentChange. The current ""Moved"" class handles the case where a component has been *really* moved from two plugins (i.e not creatable anymore if the original plugin is still used. + some cleanups coming from suggestions from SonarLint. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2565:132,plugin,plugin,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2565,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Prepare outsourcing of the LMConstraint plugin; New plugin is now available at :arrow_right: https://github.com/sofa-framework/LMConstraint. (#1527 , #1442); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2508:40,plugin,plugin,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2508,2,['plugin'],['plugin']
Modifiability,"Pro:; - type and signature consistancy at compile time.; - ease the refactoring as the signal/slots are noww real method; - make explicit the type conversion between different signature. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2943:68,refactor,refactoring,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2943,1,['refactor'],['refactoring']
Modifiability,"Probably because:; [ERROR][PluginManager] Plugin not found: ""SceneCreator_d""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057:27,Plugin,PluginManager,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342440057,2,['Plugin'],"['Plugin', 'PluginManager']"
Modifiability,Problem (test failing) seems to be fixed with the Inherit::parse(),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-861271861:50,Inherit,Inherit,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-861271861,1,['Inherit'],['Inherit']
Modifiability,Problem including SofaCUDA plugin - compilation errors,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4579:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4579,1,['plugin'],['plugin']
Modifiability,Problem of configuration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1486:11,config,configuration,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1486,1,['config'],['configuration']
Modifiability,Problem using SOFA with `SoftRobots` & `STLIB` & `SofaPython3` plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2754:63,plugin,plugins,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2754,1,['plugin'],['plugins']
Modifiability,Problem with Geomagic & SofaPython3 plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3185:36,plugin,plugin,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3185,1,['plugin'],['plugin']
Modifiability,"Problem:; It is common that people write scene in which they used components from specific plugins but forgot the corresponding ; ```xml ; <RequiredPlugin name=''>; ```; because they, in a way or an other, preload the plugin. . This is problematic because, when the environment change (you compile sofa in a different way, your preload different plugin, it is a different person on a different computer,... ) and the preload is not done anymore it makes the component/plugin tracking very hard if it is not a trivial component in a trivial plugin. . To solve this problem, I implemented a SceneCheckerVistitor that scans the scene and detects which components are from a plugin and warn the user if there is no RequiredPlugin in there scene with this component and explaine how his scene should be fixed for the good of all. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/306:91,plugin,plugins,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/306,6,['plugin'],"['plugin', 'plugins']"
Modifiability,"Process:; - remove all SOFA_WITH_FLOAT sections. ; - remove the #ifdef SOFA_WITH_DOUBLE line.; - replace all Vec3dTypes by Vec3Types (and Mass, and other types) with a refactoring tool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/836#issuecomment-441050788:168,refactor,refactoring,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/836#issuecomment-441050788,1,['refactor'],['refactoring']
Modifiability,"Proposal for the 2nd point (autoload a list of plugins from a config file); 1) CMake generates a plugin_list.conf.default file containing all selected Plugins ( names & version ).; E.g; SofaPython 0.1; CImgPlugin 0.1; image 0.2; BeamAdapter 0.1; CGALPlugin 0.1; (version info is optional); I would say that the location of this file should be where all plugins are. ( i.e bin/ ). 2) runSofa application:; instead of the hard-coded line loading SofaPython:; if (exists(plugin_list.conf)); PluginManager::readFromIniFile(plugin_list.conf); // custom; else if (exists(plugin_list.conf.default)); PluginManager::readFromIniFile(plugin_list.conf.default); // default. --> if the user did not create its own custom plugin_list.conf file containing only the plugins he wants to load automatically, then runSofa will load automatically all compiled plugins. (and if the default file is not found then no loading); We do not use the version information for now but could be interesting in the future maybe ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-305784223,8,"['Plugin', 'config', 'plugin']","['PluginManager', 'Plugins', 'config', 'plugins']"
Modifiability,Quick PR to fix the SofaPhysicsApi project; - Remove deprecated code regarding OpenGL tetrahedron. ; - FIX some bad path in cpack installation; - Change some class declaration to allow inheritance. . <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/167:185,inherit,inheritance,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/167,1,['inherit'],['inheritance']
Modifiability,"Quick compilation fix for drawing variables and function calls of RGBAColor types. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2206:34,variab,variables,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2206,1,['variab'],['variables']
Modifiability,"Quick test on what could be a direction to fix issue: https://github.com/sofa-framework/SofaPython3/issues/346. I'm now wonder:; - how to generalize that find more comprehensible names for all that. ; - is there room for small refactoring in TypeInfo related to the exisitng containers. . If some of you have suggestion, it is more than welcome. ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851:227,refactor,refactoring,227,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851,1,['refactor'],['refactoring']
Modifiability,"RROR] [RequiredPlugin(Sofa.Component.ODESolver.Forward)] Plugin not found: ""Sofa.Component.ODESolver.Forward"". Failed to load: [""Sofa.Component.ODESolver.Forward""]; [ERROR] [RequiredPlugin(SofaPython3)] Plugin not found: ""SofaPython3"". Failed to load: [""SofaPython3""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.NonLinear)] Plugin not found: ""Sofa.Component.Mapping.NonLinear"". Failed to load: [""Sofa.Component.Mapping.NonLinear""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Model)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Model"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Model""]; [ERROR] [RequiredPlugin(Sofa.Component.Engine.Select)] Plugin not found: ""Sofa.Component.Engine.Select"". Failed to load: [""Sofa.Component.Engine.Select""]; [ERROR] [RequiredPlugin(Sofa.Component.StateContainer)] Plugin not found: ""Sofa.Component.StateContainer"". Failed to load: [""Sofa.Component.StateContainer""]; [ERROR] [RequiredPlugin(Sofa.Component.Mass)] Plugin not found: ""Sofa.Component.Mass"". Failed to load: [""Sofa.Component.Mass""]; [ERROR] [RequiredPlugin(Sofa.Component.SceneUtility)] Plugin not found: ""Sofa.Component.SceneUtility"". Failed to load: [""Sofa.Component.SceneUtility""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Projective)] Plugin not found: ""Sofa.Component.Constraint.Projective"". Failed to load: [""Sofa.Component.Constraint.Projective""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Direct)] Plugin not found: ""Sofa.Component.LinearSolver.Direct"". Failed to load: [""Sofa.Component.LinearSolver.Direct""]; [ERROR] [RequiredPlugin(SofaGeneralRigid)] Plugin not found: ""SofaGeneralRigid"". Failed to load: [""SofaGeneralRigid""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Algorithm)] Plugin not found: ""Sofa.Component.Collision.Detection.Algorithm"". Failed to load: [""Sofa.Component.Collision.Detection.Algorithm""]; [ERROR] [RequiredPlugin(SofaBoundaryCondition)] Plugin not found: ""SofaBoundaryCondition"". Failed to ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:1870,Plugin,Plugin,1870,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,"R] [RequiredPlugin(Sofa.Component.LinearSolver.Direct)] Plugin not found: ""Sofa.Component.LinearSolver.Direct"". Failed to load: [""Sofa.Component.LinearSolver.Direct""]; [ERROR] [RequiredPlugin(SofaGeneralRigid)] Plugin not found: ""SofaGeneralRigid"". Failed to load: [""SofaGeneralRigid""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Algorithm)] Plugin not found: ""Sofa.Component.Collision.Detection.Algorithm"". Failed to load: [""Sofa.Component.Collision.Detection.Algorithm""]; [ERROR] [RequiredPlugin(SofaBoundaryCondition)] Plugin not found: ""SofaBoundaryCondition"". Failed to load: [""SofaBoundaryCondition""]; [ERROR] [RequiredPlugin(Sofa.Component.Topology.Container.Constant)] Plugin not found: ""Sofa.Component.Topology.Container.Constant"". Failed to load: [""Sofa.Component.Topology.Container.Constant""]; [ERROR] [RequiredPlugin(SofaEngine)] Plugin not found: ""SofaEngine"". Failed to load: [""SofaEngine""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Detection.Intersection)] Plugin not found: ""Sofa.Component.Collision.Detection.Intersection"". Failed to load: [""Sofa.Component.Collision.Detection.Intersection""]; [ERROR] [RequiredPlugin(Sofa.Component.SolidMechanics.Spring)] Plugin not found: ""Sofa.Component.SolidMechanics.Spring"". Failed to load: [""Sofa.Component.SolidMechanics.Spring""]; [ERROR] [RequiredPlugin(ArticulatedSystemPlugin)] Plugin not found: ""ArticulatedSystemPlugin"". Failed to load: [""ArticulatedSystemPlugin""]; [ERROR] [RequiredPlugin(Sofa.Component.Visual)] Plugin not found: ""Sofa.Component.Visual"". Failed to load: [""Sofa.Component.Visual""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Iterative)] Plugin not found: ""Sofa.Component.LinearSolver.Iterative"". Failed to load: [""Sofa.Component.LinearSolver.Iterative""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Response.Contact)] Plugin not found: ""Sofa.Component.Collision.Response.Contact"". Failed to load: [""Sofa.Component.Collision.Response.Contact""]; [ERROR] [RequiredPlugin(Sofa.GL.Compon",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:3284,Plugin,Plugin,3284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,"RayTriangleIntersection is a weird class, used to only compute the intersection of a ray and a triangle (with even a version with TriangleCollisionModel?).; So ;; - I moved the useful function directly in Sofa.Geometry::Triangle (+a version w/o barycoeff ); - replace the usage where RayTriangleIntersection was used; - inline it (no compilation unit anymore for it); - and deprecate it for people still using it ; - write a small unittest as well. I took the liberty to generalize the normal() function in geometry::Triangle, as it would provoke a compilation error if used with something else than Vec3 (and extend the unittest with array type as well). Diff: https://github.com/fredroy/sofa/compare/remove_triplane_intersection_file...move_triangleoctree. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2763:610,extend,extend,610,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2763,1,['extend'],['extend']
Modifiability,"Reading a JPEG file is implemented by ImageQt, which obviously depends on Qt.; It means that Qt is needed to load any JPEG image (actually, also gif, and other exotic formats). 1) I think we should be able to read JPEG files without Qt ; perhaps using libjpeg ?; 2) Moreover, we need to have a Qt Gui to activate ImageQt ; then it could be an idea to move this class to a plugin ? Which will be able to read all image formats the Qt library can read ?; 3) (BUG) JPEG files read by ImageQt seem to be upside-down, if we compare it with the same image converted in the PNG format (I will write a test to confirm that)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51:372,plugin,plugin,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51,1,['plugin'],['plugin']
Modifiability,"Really good cleaning.; Should not break scenes, but could eventually break components in private plugins, but they should be easy to update.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805:97,plugin,plugins,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/206#issuecomment-291868805,1,['plugin'],['plugins']
Modifiability,"Recently pluginized modules do not have the relocatable property set.; Here is the fix 🤫. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1604:9,plugin,pluginized,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1604,1,['plugin'],['pluginized']
Modifiability,Recover a commit in is_sofa_multithreading branch (3da9e50752d6aead487f0b5f8897bfc4249f9404) to allow OdeSolver concurrent execution:. A new data<bool> is added (d_threadsafevisitor) to disable allocation and writing in the mechanical object component used by the OdeSolver ; The same change is applied to all the OdeSolver derived class and it doesn't affect the default behavior and the scenes.; EulerSolver; EulerImplicitSolver; StaticSolver; CentralDifferenceSolver; VariationalSymplecticSolver; NewmarkImplicitSolver. Task Scheduler refactoring;; - improve task stealing between worker threads.; - add worker thread name to make the debugging and profiling easier.; - group and move the initialization tasks in a dedicated file. New component and scene to show off the performance improvement of multithreading execution.; - MeanComputation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/745:538,refactor,refactoring,538,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/745,1,['refactor'],['refactoring']
Modifiability,"Ref: #1521, #1527. ### Description; All the previous PR/commits (#1521 should list all the main ones) allow now the fact that each module of SofaFramework can be its own cmake package/configuration.; - No more dependency checks in the SofaFrameworkConfig.cmake.in, etc; they are now in their own *Config.cmake.in; - No more weird cross-dependencies between headers (no more add_include_dir in SofaHelper!): a change in SofaCore will not trigger a new compilation of SofaHelper for example...; - clearer and more logical use of packages: if you want SofaHelper you do:; ```cmake; find_package(SofaHelper); ....; target_link_libraries(${target} SofaHelper); ```. - SofaFramework is now a ""meta-package"" or collection like SofaBase. Obviously it will stay like that for compatibility reason. ### Note; - The removal of the cross-includes paths in SofaHelper pointed to an error I made in the Sofa.Topo/Sofa.Geo PR #1912 , which is a good demonstration of the cross-include path madness 🤡.; - I successfully compiled SofaPython3 out-of-tree with an install of SOFA so the *Config.cmake.in should be okay. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1990:184,config,configuration,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1990,3,"['Config', 'config']","['Config', 'configuration']"
Modifiability,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/562:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562,3,"['Refactor', 'flexible', 'plugin']","['Refactor', 'flexible', 'plugins']"
Modifiability,Refactor init() to replace the call super pattern by the delegation one,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317,1,['Refactor'],['Refactor']
Modifiability,Refactor of DetectionOutputVector interface and its implementation TDetectionOutputVector. . The goal is to force all components to use the only functions provided by the DetectionOutputVector interface to interact with the DetectionOutput data that stores the contacts. One advantage of accessing the DetectonOutput data through an interface is to make a concurrent modification of contacts easier. The current implementation allows direct access to the DetectionOutput vector by casting the TDetectionOutputVector class to the helper::vector<DetectionOutput> Vector due to a double inheritance. ; This makes the DetectionOutputVector interface useless because easy to bypass. Current implementation of the DetectionOutputVector interface. ```; class TDetectionOutputVector : public DetectionOutputVector : public helper::vector<DetectionOutput>; {; public:; override of DetectionOutputVector pure virtual functions to modify the helper::vector<DetectionOutput>. }; ```. New implementation of of the DetectionOutputVector interface. ```; class TDetectionOutputVector : public DetectionOutputVector; {; public:; override of DetectionOutputVector pure virtual functions to modify the helper::vector<DetectionOutput>. private:; 	helper::vector<DetectionOutput>; }. ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/965:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965,2,"['Refactor', 'inherit']","['Refactor', 'inheritance']"
Modifiability,Refactor opengl rendering code,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678,1,['Refactor'],['Refactor']
Modifiability,Refactor performer API,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4670:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4670,1,['Refactor'],['Refactor']
Modifiability,Refactor regression test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4424:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4424,1,['Refactor'],['Refactor']
Modifiability,Refactor responseParams attribute in CollisionResponse,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3883:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3883,1,['Refactor'],['Refactor']
Modifiability,Refactor the DataTypeInfo system (step2),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1611:0,Refactor,Refactor,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1611,1,['Refactor'],['Refactor']
Modifiability,"Refactoring ObjectFactory without breaking to much SOFA is rather complex. ; To ease in the process I split the ObjectFactory class in three entity.; ; sofa::core::future::ObjectFactory and sofa::core::future::ObjectFactoryInstance are the new versions while sofa::core::ObjectFactory is a compatibility layer exposing the old API for transitionning. . For the moment, 100% of the old API is reproduced and emits deprecation warning. ; As the code change are rather important it is easier to read the source code instead of the diff. . sofa::core::future::ObjectFactory is implementing the factory mecanisme without any static in it. ; sofa::core::future::ObjectFactoryInstance is a single-instance factory accessible through static method. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2712:0,Refactor,Refactoring,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712,1,['Refactor'],['Refactoring']
Modifiability,"Refactoring could be done in NameDecoder to keep only string resolution from the compiler, but for class template, the code could be moved in BaseClass using defaulttype. @damienmarchal will work on it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308480280:0,Refactor,Refactoring,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308480280,1,['Refactor'],['Refactoring']
Modifiability,"Refactoring to avoid confusion is good.; Another PR could refactor Ray : not a ray, change name, including iterator in the name (eg RayCollisionIterator ..). In the code, there should be refactoring with the defaulttype::Ray); Issue created: #1255",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518:0,Refactor,Refactoring,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1251#issuecomment-585124518,3,"['Refactor', 'refactor']","['Refactoring', 'refactor', 'refactoring']"
Modifiability,"Referee: @IPeterlik . Members: @IPeterlik @remibessard @hdeling @damienmarchal @fredroy @epernod Jeremie . Main objective: provide a continuous support for validation of SOFA. Subtasks and estimated duration; - using python, based on Method for Manufactured Solutions (MMS), static linear elasticity with linear FEM in (compression and torsion with < 5% deformation); ex: TensorMassFEMForceField; - TensorMassFEMForceField : addKToMatrix, vector of E; - extend it to beams (BeamAdapter); - implement engine : plugged to compute stress data in all FEM in SOFA. Future; - write article; - contact Stefan Suwelack for integration into CAEML.org. ---. Validation solution:; - analytical; - software comparison (Abaqus); - tests; - experimental setup. cases:; - dynamic vs static; - linear elasticity with linear FEM; - metrics : displacement, stress+strain tensors",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/25:454,extend,extend,454,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/25,1,['extend'],['extend']
Modifiability,"Referee: @faichele. Members: @faichele , @fjourdes , @ChristianDuriez , @thomas-lemaire , @IPeterlik , @courtecuisse , @hdeling . Main objective: bring TaskScheduler within SofaKernel. Subtasks and estimated duration:; - merge the branch _issofa_multithreading_ involving the MultiThreading plugin into master (fixes); - remove dependencies to boost (might face issue in the lock implementation); - create trivial examples describing the API; - add documentation, and examples of Intel; - migration into SofaKernel. Non-requisite:; - no maintenance guarantees for the plugin Multithreading. Future; - nice feature : experiment the definition of a pointer to the Scheduler into ExecParams; - anyone interested can join!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24:291,plugin,plugin,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24,2,['plugin'],['plugin']
Modifiability,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26:280,plugin,plugin,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26,1,['plugin'],['plugin']
Modifiability,"References removed:; - THMPGSpatialHashing, ; - Flexible, ; - Compliant, ; - OptiTrackNatNet, ; - OpenCTMPlugin. In ref to https://github.com/sofa-framework/sofa/issues/1442. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3960:48,Flexible,Flexible,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3960,1,['Flexible'],['Flexible']
Modifiability,Regarding the Optimus plugin issue: Advanced methods for state estimation and parameter identification in SOFA,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4934:22,plugin,plugin,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4934,1,['plugin'],['plugin']
Modifiability,"Regarding this ""_d"" stuff ; - apparently it is possible to set it globally ( see https://cmake.org/cmake/help/v3.4/variable/CMAKE_CONFIG_POSTFIX.html#variable:CMAKE_%3CCONFIG%3E_POSTFIX and https://cmake.org/cmake/help/v3.4/variable/CMAKE_DEBUG_POSTFIX.html ) even though apparently it does not work for executables ( see https://stackoverflow.com/questions/28893450/how-to-get-debug-postfix-in-executable-name) Anyway, this decision should be carefully made, even though my first thought would be that it would be better compared to approches like the one taken with sofa_add_plugin macro. See https://github.com/sofa-framework/sofa/issues/490; - The value of this variable could be used as the default one to set the SOFA_LIBSUFFIX value in the SofaHelper CMakeLists.txt; - @guparan have you taken a look at the suggestion I made regarding PR #502 ? https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347:115,variab,variable,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463#issuecomment-342442347,4,['variab'],['variable']
Modifiability,Release/Sofa.Component.SolidMechanics.FEM.HyperElastic.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.NonUniform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.FEM.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.TensorMass.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.SolidMechanics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Model.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Correction.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.Solver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Lagrangian.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.Projective.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Constraint.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.AnimationLoop.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.MechanicalLoad.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Collision.Geometry.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anacon,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:6335,Plugin,PluginManager,6335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Relocated plugins path is not included in installation RPATH,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395:10,plugin,plugins,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395,1,['plugin'],['plugins']
Modifiability,Removal of Bezier tetrahedron elements and Bezier triangle elements : move to a new plugin SofaHighOrderTopology,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16:84,plugin,plugin,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16,1,['plugin'],['plugin']
Modifiability,"Remove ColladaSceneLoader plugin and its embedded old version of assimp. ; - Move class, doc and examples inside SofaAssimp plugin.; - Merge the CMakeLists and update the findAssimp with a the version provided by Assimp 5.0.; - Ensure scenes of both plugins are working with up to date version of assimp. SofaAssimp plugin still need the pluginization refresh. To be done in another PR. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1360:26,plugin,plugin,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360,5,['plugin'],"['plugin', 'pluginization', 'plugins']"
Modifiability,"Remove a really annoying ""unused variable"" warning. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1325:33,variab,variable,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1325,1,['variab'],['variable']
Modifiability,"Remove all CUDA plugins from default plugin list for the release. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5044:16,plugin,plugins,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5044,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Remove logs/warnings in SceneCreator_test by:; - inheriting from BaseSimulationTest instead of old api: sofa_test; - Remove sceneDump in AddCube method. Also update SofaCarving_test to use the correct header path. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2406:49,inherit,inheriting,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2406,1,['inherit'],['inheriting']
Modifiability,"Remove shadow variable. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4785:14,variab,variable,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4785,1,['variab'],['variable']
Modifiability,"Remove some warning:; - by updating the code ; - by configure in CMakeLists.txt the library (gtest, libQGlViewer, csparse, CImg) as system library. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1343:52,config,configure,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1343,1,['config'],['configure']
Modifiability,Remove the disgusting #pragma GCC in config.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1363:37,config,config,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1363,1,['config'],['config']
Modifiability,"Remove thread specific declaration for ExecParams class. accessing thread local variables is slow and if the thread-local variable is accessed very frequently, the cost may become an issue. ; https://software.intel.com/en-us/blogs/2011/05/02/the-hidden-performance-cost-of-accessing-thread-local-variables. The ExecParams global pointer is declared thread specific but it is often passed in a function call as argument.; A function executed in a second thread can receive as argument the thread local variable of the first thread and it is allowed to use it.; In this situation there is no need of use the thread local variable. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1129:80,variab,variables,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1129,5,['variab'],"['variable', 'variables']"
Modifiability,"Remove tinyXML find package in the common config file because the linkage is private and thus it is not required to find it for links against Sofa.Simulation.Common. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4506:42,config,config,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4506,1,['config'],['config']
Modifiability,"Removed unused variables; Removed MechanicalGetDimensionVisitor which was no longer used; Renamed variables (groupData is not clear). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2195:15,variab,variables,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2195,2,['variab'],['variables']
Modifiability,Removing all highorder classes from the base topological classes of SOFA.; Created a new open repository for those classes at sofa-framework/plugin.HighOrder 👍 ( https://github.com/sofa-framework/plugin.HighOrder.git ). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; - [ ] updated Flexible plugin to use the new plugin. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/220:141,plugin,plugin,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/220,5,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"Reopening of #1274. > unload() function of PluginManager was just removing the entry of the plugin in its map, but this one was effectively still loaded in the process memory. (on Windows, you could still see it using ProcessExplorer); > This PR fixes it (i.e really unloads from memory). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1287:43,Plugin,PluginManager,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1287,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Replace SOFACUDA_ARCH containing arbitrary value with (CMake's) auto arch detection.; If needed, you can disable auto-detection with the desired arch value.; It should (not tested) also generate cuda code for multiple arch as well. Remove also warning when configuring with CMake. (about deprecated macro sofa_create_package). I guess it could break CMake CUDA config for people using the SOFACUDA_ARCH variable. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1336:257,config,configuring,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1336,3,"['config', 'variab']","['config', 'configuring', 'variable']"
Modifiability,"Replace ```<From ...>```; By: ```<Import from=""blabla"" component=""VisualModel"" as=""Toto""/>```. And multiple load with comma separation. ; ""toto tata titi ti ti"" ; "" 0 1 2 3 4"" . =====================; Compatibility with ; SOFA NG:; ```<From plugin=""Sofa.Component.ODESolver"" import=""*""/>``` => OK ? Sofa.Component.ODESolver.Backward; ```<From plugin=""Sofa.Component"" import=""*""/>``` => OK ? . In an xml Sofa scène: Sofa.Component.ODESolver.Backward; In a python sofa scene: Sofa.Component.ODESolver.Backward ; In the c++ namespace: sofa::component::odesolver::Backward; In the c++ include: sofa/component/odesolver/Backward; ...; All that is so nicely consistent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988709045:241,plugin,plugin,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988709045,2,['plugin'],['plugin']
Modifiability,Replacing `#include <math.h>` by `#include <cmath>` produces a `'M_PI': undeclared identifier` error on Windows for `applications/plugins/sofadistancegrid/components/collision/DistanceGridCollisionModel.h` (and only this one).; Any idea how to solve that?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320:130,plugin,plugins,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-469741320,1,['plugin'],['plugins']
Modifiability,"Reported in #3490 ; In the plugin SofaDistanceGrid, in the example ```/applications/plugins/SofaDistanceGrid/examples/DistanceGridCollisionModel.scn```. https://github.com/sofa-framework/sofa/blob/f4627f4edbe10d8f72d02263b736d233306ac7be/applications/plugins/SofaDistanceGrid/examples/DistanceGridCollisionModel.scn#L23. When changing the ```DefaultContactManager``` from ```response=""PenalityContactForceField""``` to ```response=""FrictionContactConstraint""``` the following segfault is happening. ```; ########## SIG 11 - SIGSEGV: segfault ##########; sofa::helper::BackTrace::sig(int); sofa::component::constraint::lagrangian::model::UnilateralInteractionConstraint<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<3u, double>, sofa::type::Vec<3u, double>, double> >::addContact(double, sofa::type::Vec<3u, double>, double, int, int, long, long long); sofa::component::collision::response::contact::FrictionContact<sofa::component::collision::RigidDistanceGridCollisionModel, sofa::component::collision::geometry::PointCollisionModel<sofa::defaulttype::StdVectorTypes<sofa::type::Vec<3u, double>, sofa::type::Vec<3u, double>, double> >, sofa::defaulttype::StdVectorTypes<sofa::type::Vec<3u, double>, sofa::type::Vec<3u, double>, double> >::createResponse(sofa::core::objectmodel::BaseContext*); sofa::component::collision::detection::algorithm::DefaultPipeline::doCollisionResponse(); sofa::simulation::PipelineImpl::computeCollisionResponse(); sofa::simulation::CollisionVisitor::processNodeTopDown(sofa::simulation::Node*); sofa::simulation::graph::DAGNode::executeVisitorTopDown(sofa::simulation::Visitor*, std::__cxx11::list<sofa::simulation::graph::DAGNode*, std::allocator<sofa::simulation::graph::DAGNode*> >&, std::map<sofa::simulation::graph::DAGNode*, sofa::simulation::graph::DAGNode::StatusStruct, std::less<sofa::simulation::graph::DAGNode*>, std::allocator<std::pair<sofa::simulation::graph::DAGNode* const, sofa::simulation::graph::DAGNode::StatusStruct> > >&, sofa::simulation::grap",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3533:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3533,3,['plugin'],"['plugin', 'plugins']"
Modifiability,Reproduce work similar to what has been done for OmniEmulator. This could be used to test the plugin on the CI. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1371:94,plugin,plugin,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1371,1,['plugin'],['plugin']
Modifiability,"Retrospectively, I would prefer the following structure:; ```; SofaCUDA; | - component; | - mapping; | - linear; | - nonlinear; ```. I find that the intermediate directories `sofa/gpu/cuda` are superfluous, and redundant with the name of the plugin. It is also in the prevision of changing the namespaces (which is not done in this PR).; What do you think @hugtalbot @epernod @damienmarchal @fredroy ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1403751883:242,plugin,plugin,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3601#issuecomment-1403751883,1,['plugin'],['plugin']
Modifiability,"Revert ""[Sofa.Core] minor refactoring for Data::read() to move into BaseData the reading code""",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4068:26,refactor,refactoring,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4068,1,['refactor'],['refactoring']
Modifiability,"Revert ""[SofaHelper] Fix unloading with PluginManager""",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1286:40,Plugin,PluginManager,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1286,1,['Plugin'],['PluginManager']
Modifiability,Review and udpate doc : https://github.com/sofa-framework/sofa/wiki/Supported-SOFA-plugins. - InvertibleFVM (TO DEPRECATE); - ManifoldTopologies; - MeshSTEPLoader; - ExternalBehaviorModel; - ManualMapping. Remove SOFA from plugin names:; - SofaCarving; - SofaDistanceGrid; - SofaEulerianFluid; - SofaImplicitField. Rename:; - SofaMatrix; - Caribou,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4556:83,plugin,plugins,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4556,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Revival of #1553 ; could not re-opened it because of force push🕵️‍♀️. Based on #1555 . ## Description:; Move fixed_array types (helper::fixed_array and defaulttype::Vec) and their satellites file (algo...) to the new Sofa.Type module.; No dependency on anything, except the (future) Sofa.Config to avoid weird cyclic deps.; As a compatibility layer for transition, so it should be as least breaking as possible. - sofa::defaulttype::Vec becomes sofa::type::Vec; - sofa::helper::fixed_array becomes sofa::type::stdtype::fixed_array. ## Breaking; - if inclusion of _defaulttype_ and _type_ namespace, the compiler cannot chose which one to chose for the free functions cross and dot() when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace. More info with #1521 . Another PR will remove all defaulttype::Vec (and helper::fixed_array); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1734:288,Config,Config,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1734,1,['Config'],['Config']
Modifiability,"Rewrite draw function in HexahedralFEMForceFieldAndMass so it is not ""ugly""",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3445:0,Rewrite,Rewrite,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3445,1,['Rewrite'],['Rewrite']
Modifiability,Rewrite draw functions (often duplicated from CPU version). Rename CudaVisualModel into CudaOpenGLModel since it uses OpenGL buffers and would not be suited for non-OpenGL contexts. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1246:0,Rewrite,Rewrite,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1246,1,['Rewrite'],['Rewrite']
Modifiability,"S X 14.4.1 (23E224); > * Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); > * State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >; > ; > **Command called**; > ; > ```; > (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; > Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; > [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; > Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; > >>> import Sofa; > ---------------------------------------; > Checking SOFA_ROOT and SOFAPYTHON3_ROOT; > Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; > ---------------------------------------; > Traceback (most recent call last):; > File ""<stdin>"", line 1, in <module>; > File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; > import Sofa.Helper; > ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (no such file), '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (ha",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179:1655,plugin,plugins,1655,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690#issuecomment-2254322179,1,['plugin'],['plugins']
Modifiability,"SAP is usually a method to discriminate pairs of objects that are not in collision. The output is pairs of objects to be further investigated in the narrow phase.; However, in SOFA, the `DirectSAP` component is written as a component doing the broad phase and the narrow phase. Almost all the work is actually done in the narrow phase. That is why, we can consider this component is mainly a narrow phase component.; All the broad phase code has been removed. It is still a broad phase, but the code is located in its base class: `BruteForceBroadPhase`.; The narrow phase code has been extracted and put in a new component: `DirectSAPNarrowPhase`. `DirectSAP` inherits from `DirectSAPNarrowPhase`.; In the narrow phase, the result of the broad phase is used to skip the boxes which have been totally ignored in the broad phase. Initially, the `DirectSAP` component did not perform any discrimination in its broad phase. Now it performs a `BruteForceBroadPhase`. It is not yet clear if it is always a good choice regarding the performances. In the case of the caduceus scene, the performances are slightly better. I guess if the broad phase takes a lot of time (many objects), it is better to avoid it. `DirectSAP` would not be the best choice. I would use a more performant broad phase, or no broad phase, when used with `DirectSAPNarrowPhase`. From now, the user can decide to design its scene with two different ways resulting to the same behavior:; ```; <DirectSAP/>; ```; or; ```; <BruteForceBroadPhase/>; <DirectSAPNarrowPhase/>; ```; In the second option, it will be possible to change the combination of broad phase/narrow phase.; Note: I kept the component `DirectSAP`, but I don't think its name is meaningful. This is the following of the work started in #2010 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/so",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2030:660,inherit,inherits,660,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2030,1,['inherit'],['inherits']
Modifiability,"SOFA has two different ways to load plugins:; - via runSofa; - via the PluginManager through the GUI. Using different GUI, the list of loaded plugins may differ! Topic brought back in #3109 ; This should be centralized and homogenized ; @alxbilger @damienmarchal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3147:36,plugin,plugins,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3147,3,"['Plugin', 'plugin']","['PluginManager', 'plugins']"
Modifiability,SOFA_CUDA plugin: CudaHexahedronFEMForceField.cpp: undefined reference to sofa::core::behavior::ForceField<>,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3726:10,plugin,plugin,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3726,1,['plugin'],['plugin']
Modifiability,STC#4 Coding Sprint: Pluginization,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427:21,Plugin,Pluginization,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427,1,['Plugin'],['Pluginization']
Modifiability,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:315,Config,Config,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737,1,['Config'],['Config']
Modifiability,"Scene checkers were located in the SofaGraphComponent (even if they were not components themselves....); So they needed to be moved out of it.; The first idea was to move them to Sofa.Simulation as they related to the simulation itself (or rather its initialization).; But scene checking could need dependencies on components themselves (in this case, it needs the contact manager from Sofa.Component.Collision.Response.Contact, and APIVersion from Sofa.Component.SceneUtility); So finally a library was created into ~~applications/plugins, even if it is not really a plugin in the sofa-way of thinking (aka a set of components)~~ Sofa/plugins because it is not in Component or framework, but it could be placed in Sofa/ directly (where GUI is as well). As usual, a compat layer has been added to warn devs of the move. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2960:532,plugin,plugins,532,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2960,3,['plugin'],"['plugin', 'plugins']"
Modifiability,Scene loader should warn when loading py/pyscn without SP plugin loaded,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2366:58,plugin,plugin,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2366,1,['plugin'],['plugin']
Modifiability,"SceneChecks were isolated in a project. But we may want that plugins add their own SceneCheck. An example with MultiThreading is provided here. The class `SceneCheck` is now available in Sofa.Simulation.Core. Tools to register a SceneCheck are also available in the module. The newly introduced SceneCheck checks if there are opportunities to use a multi-threaded component. It advices the user with a message looking like:. ```; [SUGGESTION] [SceneCheckMultithreading] This scene is using components implemented sequentially while a parallel implementation is available. Using the parallel implementation may improve the performances. Here is the list of sequen; tial components in your scene and their parallel equivalent:; BVHNarrowPhase -> ParallelBVHNarrowPhase; BruteForceBroadPhase -> ParallelBruteForceBroadPhase; HexahedronFEMForceField[Vec3d] -> ParallelHexahedronFEMForceField[Vec3d]; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3597:61,plugin,plugins,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3597,1,['plugin'],['plugins']
Modifiability,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:280,plugin,plugins,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535,2,['plugin'],['plugins']
Modifiability,"Second and last task about https://github.com/sofa-framework/sofa/issues/2483. Contains #2531. Create a new plugin SofaNewmat with ; - newmat lib itself; - NewmatMatrix and NewmatVector (and their tests); - LULinearSolver (only compatible with NewmatMatrix); ; Add a ""compatibility"" layer (tricky because SofaNewmat is optional; Update ComponentChange; Remove newmat usage in image plugin. Fix #2483 . Change the template of CGLinearSolver in the BeamLinearForceField because I dont see why we would need to run it with newmat matrices. It results with a very slight difference on the DOF positions. [ci-depends-on https://github.com/sofa-framework/Regression/pull/21]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2532:108,plugin,plugin,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2532,2,['plugin'],['plugin']
Modifiability,"See #1950. ; Two variables exist to define quads in a hexahedron, but the order is not the same:; ```; const unsigned int quadsInHexahedronArray[6][4] = {{0,1,2,3}, {4,7,6,5}, {1,0,4,5}, {1,5,6,2}, {2,6,7,3}, {0,3,7,4}};; const unsigned int quadsOrientationInHexahedronArray[6][4] = {{0,3,2,1}, {4,5,6,7}, {0,1,5,4}, {1,2,6,5}, {2,3,7,6}, {3,0,4,7}};; ```; We don't know if there are some consequences to it. Perhaps only one variable could be used. Removing the other would avoid confusion.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2003:17,variab,variables,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2003,2,['variab'],"['variable', 'variables']"
Modifiability,"See #4532 to review readable changes.; In addition, this PR removes the entire `Sofa/Component/Compat` layer.; This PR depends on : . [ci-depends-on https://github.com/SofaDefrost/SoftRobots/pull/265]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/139]; [ci-depends-on https://github.com/sofa-framework/CGALPlugin/pull/14]; [ci-depends-on https://github.com/sofa-framework/Registration/pull/12]; [ci-depends-on https://github.com/sofa-framework/PluginExample/pull/6]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4533:465,Plugin,PluginExample,465,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4533,1,['Plugin'],['PluginExample']
Modifiability,"See doc https://cmake.org/cmake/help/latest/manual/cmake-presets.7.html. It gives 3 different presets similarly to what we are used to on the CI. The idea is the same (3 different config) but it cannot mimic it perfectly. For example, the CI checks if dependencies are available before setting a variable. It is not possible with presets. An example of CMakeUserPresets.json I use: https://gist.github.com/alxbilger/bee1135fbe222943906d0f595699c1a3. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3305:180,config,config,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3305,2,"['config', 'variab']","['config', 'variable']"
Modifiability,See issue #784 : Quadractic complexity in BarycentricMapping ; This PR depends on PR #797: Cleaning and refactoring of BarycentricMapping. In this PR the initialization of BarycentricMapping (for topology container only) is optimized using spatial hashing. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798:104,refactor,refactoring,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798,1,['refactor'],['refactoring']
Modifiability,See the result [here](https://github.com/sofa-framework/sofa/blob/ab67a65a56a7c4d6ec04263de9b829e30b4f5ce1/applications/plugins/SofaMatrix/SofaMatrix.md),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2580#issuecomment-1008937788:120,plugin,plugins,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2580#issuecomment-1008937788,1,['plugin'],['plugins']
Modifiability,"See: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2382/CI_CONFIG=macos_clang,CI_PLUGINS=options,CI_TYPE=release/2/artifact/parent_dir/build/scene-tests/archive/applications/plugins/MultiThreading/examples/ParallelHexahedronFEMForceField.scn/output.txt",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2409:186,plugin,plugins,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2409,1,['plugin'],['plugins']
Modifiability,Seems to be fixed #1948 (just tried with master) but some enhancements could be done for exporting the graph IMO.; Issue itself is closed nonetheless.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1723#issuecomment-821018599:58,enhance,enhancements,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1723#issuecomment-821018599,1,['enhance'],['enhancements']
Modifiability,Segfault happens during SofaHelper_test exit and is somehow related to PluginManager_test. ; I tried to catch it in PluginManager::TearDown() without success.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604355702:116,Plugin,PluginManager,116,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604355702,1,['Plugin'],['PluginManager']
Modifiability,"Several alternatives choices for names:; ```xml; <From plugin=""SofaVisual"" import=""OglModel"" as=""VisualModel""/>; <FromPlugin name=""SofaVisual"" import=""OglModel"" as=""VisualModel""/>. <Plugin name=""SofaVisual"" import=""OglModel"" as=""VisualModel""/>; <Plugin import=""OglModel"" as=""VisualModel"" from=""SofaVisual"" />. <Import from=""SofaVisual"" component=""OglModel"" as=""VisualModel""/> ; <Import from=""SofaVisual"" components=""*""/>. <Import fromPlugin=""SofaVisual"" components=""OglModel OglShader""/>. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988822315:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-988822315,3,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,Several changes in PluginManager:; - Add check to avoid registering the same plugin from different paths; - Change method getPlugin to look in the map of registered plugin using the plugin name instead of using a reconstructed path. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1472:19,Plugin,PluginManager,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1472,4,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Several plugins out-sourced:; - [SixenseHydra](https://github.com/sofa-framework/SixenseHydra); - [Xitact](https://github.com/sofa-framework/Xitact); - [Haption](https://github.com/sofa-framework/Haption) ; - [Sensable](https://github.com/sofa-framework/Sensable); - [SensableEmulation](https://github.com/sofa-framework/SensableEmulation); - [LeapMotion](https://github.com/sofa-framework/LeapMotion); - [Geomagic](https://github.com/sofa-framework/Geomagic). Related to https://github.com/sofa-framework/sofa/issues/1442. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4575:8,plugin,plugins,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4575,1,['plugin'],['plugins']
Modifiability,"Several points here: ; - this PR might be breaking for plugin compilation (including move of files); - this PR changes the way we organize / name the code (which is good!). It would be therefore nice to rediscuss it with you both @guparan and @fredroy to all agree on the organization and merge it, but a question comes:; does this seem realistic to merge it before the release?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1189985975:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1189985975,1,['plugin'],['plugin']
Modifiability,Several warning types:; - uint/int conversion; - bad init order; - missing break; - unused variables. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/873:91,variab,variables,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/873,1,['variab'],['variables']
Modifiability,Shadow variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2431:7,variab,variable,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2431,1,['variab'],['variable']
Modifiability,Shall we keep this as a module in Sofa.Components or as an external repo referenced in applications/plugins,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1048677806:100,plugin,plugins,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1048677806,1,['plugin'],['plugins']
Modifiability,"Simply add an example scene for the THMPGSpatialHashing plugin. No scene were available. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2148:56,plugin,plugin,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2148,1,['plugin'],['plugin']
Modifiability,"Since C++11, it is possible to declare a variable with one copy per thread with the keyword `thread_local`. The consequence is that the code in `thread_specific_ptr.h` could be deprecated as it is not used anywhere else (not in this PR). Bonus: remove a memory leak. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3422:41,variab,variable,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3422,1,['variab'],['variable']
Modifiability,"Since SofaNG, cmake was again slow to configure (especially on Windows); After investigation, the previous sofa_find_package() was nulliified in #3120 , and I dont really see why. And the associated commit message is not informative https://github.com/sofa-framework/sofa/pull/3120/commits/8a3ae2dacc1bdff9be83aee15744a37e21eb0054. Bringing it back bring the config time from ~18s to 4.5s on Windows/MSVC generator on a minimal preset (all framework + comonents+ GL + GUI); (Manjaro/ninja generator go from 4 to 2.5s); So it is quite nice all in all 🥸. Trace: (orange part is time for `find_package()`); Before: ![cmake1](https://user-images.githubusercontent.com/11028016/195506545-32c3d4db-b6b2-4500-a3fb-dce59da50c53.png); After: ![cmake2](https://user-images.githubusercontent.com/11028016/195506607-e6ede1f9-c5fd-497d-bd4f-dd4832da918a.png). Install procedure should not be impacted, as the cmake.in files are not touched. \+ this PR fixes some missing sofa_find_package() here and there. Lets see if the CI confirms if https://github.com/sofa-framework/sofa/pull/3120/commits/8a3ae2dacc1bdff9be83aee15744a37e21eb0054 was only a mistake; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382:38,config,configure,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382,2,['config'],"['config', 'configure']"
Modifiability,"Since state accessors work closely with a mstate, it seems logical that they inherit the same bbox.; Note that the mstate must be visited before the accessor in `UpdateBoundingBoxVisitor`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2780:77,inherit,inherit,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2780,1,['inherit'],['inherit']
Modifiability,"Since the big refactoring from Sofa NG (https://github.com/sofa-framework/sofa/wiki/SOFA-NG:-documentation-on-transition), unit tests fail when the compatibility layer is not compiled, because they rely on the old modules. An example of failure:. ```; Sofa\Component\IO\Mesh\tests\STLExporter_test.cpp(79): error: Failed; A message of type 'Error' was not expected but it was received. ; ====================== Messages =======================; [RequiredPlugin]: ; Message type : Error; Message content: Plugin not found: ""SofaLoader""; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3389:14,refactor,refactoring,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3389,2,"['Plugin', 'refactor']","['Plugin', 'refactoring']"
Modifiability,"Small (and first) Pullrequest to add several methods in plugin SceneCreator:. - to add basic 3D object: Cube, Cylinder, Plane. In rigid or deformable.; - also add an executable sceneCreatorExamples to run simple examples using those methods.; - Minor changes in TriangularFEM and CylindricalGrid to use those components. This PR: ; - [x] succeed on each compilation setup on the CI; - [x] does not generates new warnings or test failure; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] clean stuff; - [x] is now 1 week old and no one send a 'no go' comment. ; - [x] have tests on the introduced features.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133:56,plugin,plugin,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133,1,['plugin'],['plugin']
Modifiability,"Small PR to allow compilation of SofaCUDA plugin with SOFA_NO_OPENGL flag (i.e disabling OpenGL); Remarks:; - The components' draw() functions in SofaCUDA should share their code with their ""normal"" version.; For example, CudaUniformMass with cudarigid3f should call the draw() of UniformMass<Rigid3>; Some work has to be done further in Sofa itself, that's why I just add preprocessor tests (#ifdef SOFA_NO_OPENGL) and did not use the drawtool functions 👅 ; - Obviously, if you compile without OpenGL, you wont be able to share OpenGL buffer in CUDA. In other words it is useless to use CudaVisualModel without SOFA_NO_OPENGL.; (Actually CudaVisualModel should be renamed CudaOglModel). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1242:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1242,1,['plugin'],['plugin']
Modifiability,"So I have tested the branch fjourdes:insimo_freemotion_integration with our plugins. Our tests and examples ran fine.; I have read the very well detailed changelog (thanks for that) and from what I know it looks fine. I didn't review the files changes, because there is too much to look at... but I would agree to merge.; Again, I'm really sorry for the late answer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780:76,plugin,plugins,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-362789780,1,['plugin'],['plugins']
Modifiability,"So I wanted to open a python file in SOFA but the terminal shows this error-; [ERROR] [SofaPython3::SceneLoader] Unable to completely load the scene from file 'filepath'; Python exception:; ModuleNotFoundError: No module named 'splib3'. I am not able to fix this error. I have SofaPython3 and STLIB plugins already added. Can't figure out how to solve. Please help!. Also, I am using windows10 , python v3.7",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2959:299,plugin,plugins,299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2959,1,['plugin'],['plugins']
Modifiability,"So after discussion on gitter, the convention is ; ""each time you use the Template Method design pattern which delegate to its child private implementation then you must use the double _ to indicate it"".; https://isocpp.org/wiki/faq/strange-inheritance#private-virtuals. If it is not private then feel free (which is exactly how is the sofa code base right now).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772598715:241,inherit,inheritance,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772598715,1,['inherit'],['inheritance']
Modifiability,So many things to rewrite in this component 🤪 but this is not really the point of this PR anyway,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1854#issuecomment-784900619:18,rewrite,rewrite,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1854#issuecomment-784900619,1,['rewrite'],['rewrite']
Modifiability,So this PR is merged...but the CI configuration needs to be updated to rename PLUGIN_XXX into MODULE_XXX this is the cause of the failing test on the CI.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860:34,config,configuration,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-410245860,1,['config'],['configuration']
Modifiability,"So, as we discussed during the dev meeting. 2 modifications:; 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward. . @guparan can you confirm this is now ok to go?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358:154,plugin,plugin,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-610868358,3,"['config', 'plugin']","['config', 'plugin']"
Modifiability,Sofa is a drama in term of #include coupling which make:; - compilation time to be larger than what it should; - cost a lot in term of code maintenance. . In the future we should try to progressively improve the situation. ; This PR is a minor step toward this target. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/419:36,coupling,coupling,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/419,1,['coupling'],['coupling']
Modifiability,"Sofa's default CMake settings activates SofaTest, which depends on PLUGIN_SOFAPYTHON, which is not activated by default. This result in an unsuccessful generation of the project. Either SofaPython should be a default SOFA dependency, or Sofa tests using SofaPython should be separated and only activated when SofaPython plugin is too. @bcarrez @matthieu-nesme might be interested; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/239:320,plugin,plugin,320,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/239,1,['plugin'],['plugin']
Modifiability,"Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUIManager] Registered qglviewer as a GUI.; [INFO] [GUIManager] Registered qt as a GUI.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Qt.dll; [DEPRECATED] [SofaValidation] SofaValidation is deprecated. It will be removed at v23.06. For CompareState and CompareTopology, use Sofa.Component.Playback instead.; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/SceneCreator.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/CImgPlugin.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/ana",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:10225,Plugin,PluginManager,10225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Sofa.Component.Topology.Utility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Visual.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Iterative.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Direct.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Preconditioner.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Diffusion.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.Linear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.NonLinear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.MappedMatrix.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.Spring.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.Elastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Co,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:3637,Plugin,PluginManager,3637,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Sofa.GL.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Shader.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GUI.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSceneCreator.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libCImgPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libArticulatedSystemPlugin.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofaMatrix.dylib; [INFO] [PluginManager] 68 plugins have been loaded from /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [INFO] [SofaPluginManager] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /Users/hemingshan/Code/sofa/build/config/loadedPlugins.ini. ########## SIG 11 - SIGSEGV: segfault ##########; [1] 21189 segmentation fault ./runSofa; `. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. < COPY-PASTE HERE THE RESULT OF THE COMMAND ABOVE >. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. < COPY-PASTE YOUR OUTPUT HERE >. ```; <img widt",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:9370,plugin,plugin,9370,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"Sofa.GL.Component.Rendering3D)] Plugin not found: ""Sofa.GL.Component.Rendering3D"". Failed to load: [""Sofa.GL.Component.Rendering3D""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Shader)] Plugin not found: ""Sofa.GL.Component.Shader"". Failed to load: [""Sofa.GL.Component.Shader""]; [ERROR] [RequiredPlugin(Sofa.Component.IO.Mesh)] Plugin not found: ""Sofa.Component.IO.Mesh"". Failed to load: [""Sofa.Component.IO.Mesh""]; [ERROR] [RequiredPlugin(Sofa.Component.Setting)] Plugin not found: ""Sofa.Component.Setting"". Failed to load: [""Sofa.Component.Setting""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Solver)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Solver"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Solver""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Backward)] Plugin not found: ""Sofa.Component.ODESolver.Backward"". Failed to load: [""Sofa.Component.ODESolver.Backward""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Correction)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Correction"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Correction""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Geometry)] Plugin not found: ""Sofa.Component.Collision.Geometry"". Failed to load: [""Sofa.Component.Collision.Geometry""]; [ERROR] [SofaRuntime] ValueError: Object type BackgroundSetting<> was not created; The object is not in the factory.; This component has been MOVED from SofaBaseVisual to Sofa.Component.UserInterface.ConfigurationSetting since SOFA v22.06.; To continue using this component you may need to update your scene by adding. Traceback (most recent call last):; File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py"", line 435, in; env.reset(); File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py"", line 380, in reset; super().reset(); File ""/home/sofa/SOFA/v22.06.00/bin/lapgym/sofa_env/sofa_env/base.py"", line 147, in reset; self._init",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:5270,Plugin,Plugin,5270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,SofaBase/config not found,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1288:9,config,config,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288,1,['config'],['config']
Modifiability,"SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o; FAILED: applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o ; cd /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda && /usr/bin/cmake -E make_directory /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/. && /usr/bin/cmake -D verbose:BOOL=OFF -D build_configuration:STRING=Release -D generated_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o -D generated_cubin_file:STRING=/home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/./SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.cubin.txt -P /home/abernard/Workspace/sofa/build_master/applications/plugins/SofaCUDA/CMakeFiles/SofaCUDA.dir/sofa/gpu/cuda/SofaCUDA_generated_CudaStandardTetrahedralFEMForceField.cu.o.Release.cmake; /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(1251): warning: variable ""threads2"" was declared but never referenced. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(360): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_deriveSPKTensor"" is undefined; detected during instantiation of ""void StandardTetrahedralFEMForceFieldCuda_addForce_kernel(int, real *, real *, const real *, __nv_bool, const real *, float, float) [with real=float]"" ; (1248): here. /home/abernard/Workspace/sofa/src_master/applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaStandardTetrahedralFEMForceField.cu(587): error: identifier ""StandardTetrahedralFEMForceFieldCuda_BoyceAndArruda_ElasticityTensor"" is und",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057:1615,plugin,plugins,1615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484158057,1,['plugin'],['plugins']
Modifiability,SofaDistanceGrid has been pluginized and (seems that) is now well exported at sofa install.; Closing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498:26,plugin,pluginized,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1219#issuecomment-774163498,1,['plugin'],['pluginized']
Modifiability,SofaExporter was missing SofaBase in its exported cmake config.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1614:56,config,config,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1614,1,['config'],['config']
Modifiability,"SofaFramework is storing resources for some tests (especially for test on files).; The path to the folder is set through a define preprocessor macro **FRAMEWORK_TEST_RESOURCES_DIR** on all its modules,; if testing was enabled...; Therefore to _ALL the modules in SOFA (+plugins!)_ 😵 , as everybody needs SofaFramework.; It is does not even make sense as this macro should only be used for the *_test projects anyway.; And the last and not the least, because of that, if you switch **SOFA_BUILD_TESTS** on/off, you have to recompile _all SOFA_ **every time** 🤪. Finally, this PR:; - removes the macro from SofaFramework; - moves all the resources files into Sofa.Testing; - sets the path into a new compile-test constant (defined in Sofa.Testing/config.h) named SOFA_TESTING_RESOURCES_DIR; - add a compatibility constant with the same name as the macro to avoid breaking for people using this macro; not sure if it is really necessary though. ( and I dont know how to deprecated a macro nicely). The license text was missing in some tests as well. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2000:270,plugin,plugins,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2000,2,"['config', 'plugin']","['config', 'plugins']"
Modifiability,SofaGeneral is now fully pluginized! :tada: ; Thanks a lot @fredroy :+1: :+1: :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1529#issuecomment-735659970:25,plugin,pluginized,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1529#issuecomment-735659970,1,['plugin'],['pluginized']
Modifiability,SofaGeneralImplicitOdeSolver/lib/libSofaGeneralImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLinearSolver/lib/libSofaGeneralLinearSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralRigid/lib/libSofaGeneralRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralObjectInteraction/lib/libSofaGeneralObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralSimpleFem/lib/libSofaGeneralSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaUserInteraction/lib/libSofaUserInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaConstraint/lib/libSofaConstraint.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralLoader/lib/libSofaGeneralLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExporter/lib/libSofaExporter.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSparseSolver/lib/libSofaSparseSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/So,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:6664,Plugin,PluginManager,6664,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"SofaGeneralObjectInteraction; Adding plugin SofaGeneralSimpleFem; Adding plugin SofaGeneralTopology; Adding plugin SofaTopologyMapping; Adding plugin SofaUserInteraction; Adding plugin SofaConstraint; Adding plugin SofaGeneralLoader; Adding plugin SofaExporter; Adding plugin SofaSparseSolver; SofaSparseSolver: using built-in metis library; Adding plugin SofaPreconditioner; Adding plugin SofaHaptics; Adding plugin SofaValidation; Adding plugin SofaDenseSolver; Adding plugin SofaNonUniformFem; Adding plugin SofaOpenglVisual; Adding plugin SofaMiscTopology; Adding plugin SofaMiscExtra; Adding plugin SofaMiscForceField; Adding plugin SofaMiscEngine; Adding plugin SofaMiscSolver; Adding plugin SofaMiscFem; Adding plugin SofaMiscMapping; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; CMake Error at /usr/share/cmake-3.15/Modules/FetchContent.cmake:903 (message):; CMake step for cxxopts failed: No such file or directory; Call Stack (most recent call first):; /usr/share/cmake-3.15/Modules/FetchContent.cmake:1006 (__FetchContent_directPopulate); modules/SofaGuiCommon/CMakeLists.txt:18 (FetchContent_Populate). Configuring incomplete, errors occurred!; See also ""/media/maxim/big-500/sofa/build/v21.12/CMakeFiles/CMakeOutput.log"".; See also ""/media/maxim/big-500/sofa/build/v21.12/CMakeFiles/CMakeError.log"".; ```. As I understand there is problem with cxxopts:; ```; if(NOT cxxopts_POPULATED); FetchContent_Populate(cxxopts); ```. ---------------------------------------------. ### Environment; ```; lsb_release -a; No LSB modules are available.; Distributor ID:	Ubuntu; Description:	Ubuntu 18.04.5 LTS; Release:	18.04; Codename:	bionic; ```. ```; gcc-11 --version; gcc-11 (Ubuntu 11.1.0-1ubuntu1~18.04.1) 11.1.0; Copyright (C) 2021 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```. Thanks!; What I'm doing wrong?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3184:3358,Config,Configuring,3358,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3184,1,['Config'],['Configuring']
Modifiability,"SofaMiscCollisionConfig.cmake.in was ill-formed, so projects using it in out-of-tree builds are stuck in the cmake configuration process. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2052:115,config,configuration,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2052,1,['config'],['configuration']
Modifiability,"SofaPython could not compile without having SofaExporter.; To solve that, bindings included in SofaPython are moved into SofaExporter. Bindings should be included into their respective modules/plugins anyway. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1095:193,plugin,plugins,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1095,1,['plugin'],['plugins']
Modifiability,SofaPython found by SofaTest at configure time,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/20:32,config,configure,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/20,1,['config'],['configure']
Modifiability,SofaPython is a dependency of `image` plugin (see https://github.com/sofa-framework/sofa/blob/e47f070596028142cadd7bbbf8f45bac4f9d3215/applications/plugins/image/CMakeLists.txt#L13). The bindings can be found in https://github.com/sofa-framework/sofa/tree/master/applications/plugins/image/python. SofaPython is deprecated and must no longer be used. Instead SofaPython3 must be used. The mentioned code must be updated accordingly.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3862:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3862,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"SofaPython was needed into SofaTest (to enable python test) and SofaExporter for bindings. 1- then CMake had to enable SofaPython then SofaTest then SofaPython/SofaPython_test, which is quite ""bothersome"",and made the main SOFA Cmakefile cluttered.; Now if SofaTest is enabled, SofaPython will enable the use of Python_test (and not the other way around); (NB SofaPython contains a redirection for project including `SofaTest/Python_test.h`). 2- SofaExporter is a Sofa module and so, it is quite weird to have a dependency to a plugin in a module.; Now SofaPython will enable SofaExporter bindings if SofaExporter has been enabled before (and not the other way around). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1875:528,plugin,plugin,528,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1875,1,['plugin'],['plugin']
Modifiability,SofaPython3 plugins bug with Linux Binaries,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4159:12,plugin,plugins,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4159,1,['plugin'],['plugins']
Modifiability,"SofaValidation seems to be a true plugin and not a collection.; This PR does not move it from the `collection` folder. Question:; - Should the module decide by itself what type of module (plugin, collection etc) it is?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3296:34,plugin,plugin,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3296,2,['plugin'],['plugin']
Modifiability,Sofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGraphComponent/lib/libSofaGraphComponent.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/p,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:3628,Plugin,PluginManager,3628,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"Sofa_development/sofa/build_release/install/lib; [INFO] [runSofa] DataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt; [INFO] [SofaPython3] Initializing with python version 3.10.4 (main, Mar 23 2022, 23:05:40) [GCC 11.2.0]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.1m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/home/sergei/Source_code/Sofa_development/SofaPython3/build_release/lib/python3/site-packages' to sys.path; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /home/sergei/Source_code/Sofa_development/sofa/build_release/install; ---------------------------------------; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/lib/libSofaPython3.so; [INFO] [runSofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [WARNING] [ObjectFactory] Class already registered: JointSpringForceField<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: RigidMapping<Rigid2d,Vec2d>; [WARNING] [ObjectFactory] Class already registered: RigidMapping<Rigid3d,Vec3d>; [WARNING] [ObjectFactory] Class already registered: RigidRigidMapping<Rigid3d,Rigid3d>; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [WARNING] [ObjectFactory] Cl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:8952,variab,variable,8952,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,"['Plugin', 'plugin', 'variab']","['PluginManager', 'plugin', 'variable']"
Modifiability,Solution proposed : creation a new plugin SofaPython with compatibility Python 2.7 & Python 3 with new architecture.; Advantages : ; - no disturbance for the users (no refactoring side effects); - the work around Python can progress,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013:35,plugin,plugin,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616#issuecomment-376819013,2,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,"Solve #1331 . For multi configuration projects (e.g Visual Studio), the macro was not checking if the directory was existing, and was copying the lib as the configuration name (which is obviously wrong 🐇 ); The fix creates the directory before copying (no need to check as CMake does not do anything if it already exists). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1347:24,config,configuration,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1347,2,['config'],['configuration']
Modifiability,"Solver from your scene, and if using SVDLinearSolver, please load SofaDenseSolver instead.; [INFO] [runSofa] PluginRepository paths = D:/github-clones/sofa/build/bin;D:/github-clones/sofa/build/plugins;D:/github-clones/sofa/build/bin/RelWithDebInfo; [INFO] [runSofa] DataRepository paths = D:/github-clones/sofa/src/share;D:/github-clones/sofa/src/examples;D:/github-clones/sofa/build;D:/github-clones/sofa/build; [INFO] [runSofa] GuiDataRepository paths = D:/github-clones/sofa/src/applications/projects/runSofa/resources;D:/github-clones/sofa/src/modules/SofaGuiQt/src/sofa/gui/qt/resources;D:/github-clones/sofa/build; [INFO] [runSofa] Loading automatically plugin list in D:\github-clones\sofa\build\bin\RelWithDebInfo/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDeformable.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaImplicitOdeSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGraphComponent.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDeb",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:5580,Plugin,PluginManager,5580,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Solver.Iterative.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Direct.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Preconditioner.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Diffusion.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.Linear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.NonLinear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.MappedMatrix.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.Spring.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.Elastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.FEM.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.TensorMass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SolidMechanics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemings,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:3994,Plugin,PluginManager,3994,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,Solver.dir/MatrixLinearSolver.cpp.o; 23593 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/TableDataWidget.cpp.o; 22632 ms: clangbuild//SofaKernel/SofaBase/SofaBaseLinearSolver/SofaBaseLinearSolver_test/CMakeFiles/SofaBaseLinearSolver_test.dir/Matrix_test.cpp.o; 21033 ms: clangbuild//SofaKernel/SofaCommon/SofaLoader/CMakeFiles/SofaLoader.dir/BaseVTKReader.cpp.o; 19516 ms: clangbuild//SofaMisc/SofaMiscMapping/CMakeFiles/SofaMiscMapping.dir/DistanceMapping.cpp.o; 16971 ms: clangbuild//SofaKernel/SofaBase/SofaBaseMechanics/CMakeFiles/SofaBaseMechanics.dir/DiagonalMass.cpp.o; 16645 ms: clangbuild//modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglAttribute.cpp.o; 15727 ms: clangbuild//SofaKernel/SofaCommon/SofaMeshCollision/CMakeFiles/SofaMeshCollision.dir/BarycentricPenalityContact.cpp.o; 15389 ms: clangbuild//SofaMisc/SofaMiscMapping/CMakeFiles/SofaMiscMapping.dir/BarycentricMappingRigid.cpp.o; 14767 ms: clangbuild//applications/plugins/CImgPlugin/CMakeFiles/CImgPlugin.dir/src/CImgPlugin/ImageCImg.cpp.o; 14552 ms: clangbuild//SofaKernel/SofaFramework/SofaCore/CMakeFiles/SofaCore.dir/src/sofa/core/Mapping.cpp.o; 14068 ms: clangbuild//SofaGeneral/SofaBoundaryCondition/CMakeFiles/SofaBoundaryCondition.dir/ConstantForceField.cpp.o; 13775 ms: clangbuild//SofaKernel/SofaCommon/SofaEngine/CMakeFiles/SofaEngine.dir/BoxROI.cpp.o; 13658 ms: clangbuild//SofaMisc/SofaMiscMapping/CMakeFiles/SofaMiscMapping.dir/SquareDistanceMapping.cpp.o; 13326 ms: clangbuild//SofaMisc/SofaMiscMapping/CMakeFiles/SofaMiscMapping.dir/SubsetMultiMapping.cpp.o; 13272 ms: clangbuild//SofaGeneral/SofaConstraint/CMakeFiles/SofaConstraint.dir/BarycentricDistanceLMConstraintContact.cpp.o; 12651 ms: clangbuild//SofaKernel/SofaFramework/SofaCore/CMakeFiles/SofaCore.dir/src/sofa/core/Multi2Mapping.cpp.o. **** Templates that took longest to instantiate:; 52138 ms: sofa::core::objectmodel::Data<std::__cxx11::list<const sofa::core::topology::TopologyChange,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:4166,plugin,plugins,4166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['plugin'],['plugins']
Modifiability,Solver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.TensorMass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.so; [INFO] [PluginMana,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:5367,Plugin,PluginManager,5367,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"Some `image` plugin scenes fail because the template used is not compiled in the standard set. It needs the full set. Only the standard set is compiled on the CI. Decision to take:; 1) The failing scenes are ignored on the CI; 2) The failing scenes are modified to use a templated available in the standard set; 3) The CI compiled the full set. I am in favor of the third option, but we already talked about it in https://github.com/sofa-framework/ci/pull/15. It seems to take too much time at the compilation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1288716378:13,plugin,plugin,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3404#issuecomment-1288716378,1,['plugin'],['plugin']
Modifiability,"Some cmake instructions became irrelevant as new requirement versions for cmake, gcc ,and clang have been defined.; So this PR merely remove the now-dead code. \+ Sofa.compat deletion from #4760 was not totally finished (add a warning at cmake configure time). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4812:244,config,configure,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4812,1,['config'],['configure']
Modifiability,"Some components want to compute volume in 2 (or even 1) dimensions.; Identified components:; - DiagonalMass; - MeshMatrixMass; - TetrahedronSetGeometryAlgorithms (should even not be templated in 2d...); - HexahedronSetGeometryAlgorithms (should even not be templated in 2d...). For the topology-related ones, this is easy and the template in 2D should logically be removed.; As for the mass, it would require some refactoring. A mass in 1D should not be able to compute a mass on a hexahedron.... More components could be included in this list.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2457:414,refactor,refactoring,414,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2457,1,['refactor'],['refactoring']
Modifiability,"Some flags in SOFA are not inherited with SofaPython3 (eg. [#71](https://github.com/sofa-framework/SofaPython3/pull/71) ) because these flags are not linked to a target. Solution: link those compilation flags to a target in SOFA itself (for example SofaHelper, or a global SOFA target ?)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1661:27,inherit,inherited,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1661,1,['inherit'],['inherited']
Modifiability,"Some global variables with internal linkage were defined multiple times with the same symbol, and the same values. Instead, I propose to merge them into a global variable with external linkage. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1950:12,variab,variables,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1950,2,['variab'],"['variable', 'variables']"
Modifiability,Some news from DEFROST for 17.12; - I'm still working hard one SofaImplicitField & PSL ; - Bruno will make an extra effort to finalize the PR of a SofaPython3 plugin.; - Erwan will do the same for the Communication plugin. ; And Eulalie splitted ou soft-robots plugins in a public and a private part (the pattented one) so we can release it. . And you.. what are your plan for 17.12 ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764:159,plugin,plugin,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/517#issuecomment-348446764,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Some scenes crash at the end (but not related to this PR):; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963:270,plugin,plugins,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1449#issuecomment-676066963,1,['plugin'],['plugins']
Modifiability,"Some scenes crash:; - [testOmniDriverEmu.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=centos_clang-5,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/testOmniDriverEmu.scn/output.txt); - [HexahedronForceFieldTopologyChangeHandling.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1449/CI_CONFIG=windows10_vs-2017,CI_PLUGINS=options,CI_TYPE=release/5/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt). The Quater_test is also failing on CentOS but we think it could be related to the rand() bringing the angle too close to in the gimbal lock ToEulerVector in SOFA. If that's the issue, the fix is described here: http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToEuler/ and should be applied to Quater::toEulerVector (l. 573 in Quater.inl). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1461:230,plugin,plugins,230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1461,1,['plugin'],['plugins']
Modifiability,"Some scenes in LMConstraint were crashing on the CI due to the facts that those scenes were expecting the plugin to be compiled with SofaDistanceGrid (necessary for the response defined as ""distanceLMConstraint"").; As the CI is not compiling the SofaDistanceGrid plugin and the scenes were not telling that they needed it, the scenes are crashing once there is a contact. This PR adds the required plugins lines where it should be needed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1817:106,plugin,plugin,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1817,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Some work on cleaning the components SparseGridTopology and SparseGridRamicficationTopology: . - Remove commented code; - Replace sout/serr by msg macro; - Remove duplicated Data in SparseGridRamicficationTopology which inherite from SparseGridTopology ; - Fix warnings (size_t, unsued variables, ...); - Fix SparseGridTopology.scn and SparseGridRamicficationTopology.scn behavior; - Add regression_test references for both scenes and add them to the list of scene to be tested. This PR replace an old one #706 instead of merging master. This PR is only a aesthetic clean before a more complex PR to clean and factorize methods inside the components as well as removing the fileMesh loaded inside the component and use topology Data buffers. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/855:220,inherit,inherite,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/855,2,"['inherit', 'variab']","['inherite', 'variables']"
Modifiability,"Some work on dynamic topology changes:; - rewrite the TRIANGLESREMOVED case of Tetra2TriangleTopologyMapping, should bring a speedup of xN where N is the number of triangles to remove. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/788:42,rewrite,rewrite,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/788,1,['rewrite'],['rewrite']
Modifiability,"Sorry @alxbilger , I was working on a deeper refactoring of BaseData... and made the PR yesterday as a preliminary step without looking before if it was not done in a pending PR (which is the case of #3265). No problem in having the things dones in your PR. Do I close this one ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3279#issuecomment-1239330973:45,refactor,refactoring,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3279#issuecomment-1239330973,1,['refactor'],['refactoring']
Modifiability,"Sorry @alxbilger, typo in my rewrite of the output. In fact, the error starts with ""$EndNodes"", so no possibility to read the elements.; The `cmd==""$EndNodes\r""`, so the comparison is always wrong. ; @hugtalbot, yes, it works for the other file I have. This shouldn't change anything for files that don't put '\r' at the end of keywords.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3030#issuecomment-1152074953:29,rewrite,rewrite,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3030#issuecomment-1152074953,1,['rewrite'],['rewrite']
Modifiability,"Sorry I should have given more details. The move I suggest is something that was around for quite a while now. I think it was suggested by @damienmarchal first. The legacy conditionally compiled code, mainly in SofaCUDA but it applies everywhere, is a bad practice for the following reasons:; - It is nearly impossible for the user to know what components are included in the conditionally compiled module. It would require a complex documentation to inform the user, which is not done for SofaCUDA.; - Testing becomes more complex. It's challenging to ensure that all possible combinations of conditions are thoroughly tested, increasing the risk of undetected bugs. See https://github.com/sofa-framework/sofa/pull/4227 for example.; - Other plugins (for example SoftRobots) cannot add their own CUDA components into SofaCUDA. So it's not true that all components are in the same plugin. We also have the example of the GPU-based solvers. What I suggest is to keep the cpu-based plugin, and create a new plugin for the gpu-based components. It would be applied to all plugins that are a conditional dependency in SofaCUDA (so not the `Sofa.Component.*` modules), not only `VolumetricRendering`. This PR is an illustration of the move of one particular plugin, but it should be generalized. The goal of the PR is also to approve the move, but also the folder architecture. If we can agree on an architecture inside the SOFA codebase, we can also apply it in external plugins (such as SoftRobots or MOR).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900:743,plugin,plugins,743,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1864019900,7,['plugin'],"['plugin', 'plugins']"
Modifiability,"Sorry for the (big) delay 😥; Usually this problem with libpng means that you compile and link SOFA with the libpng.h. libpng.lib included from the sofa-windows-dependency-pack but your system is using an other libpng.dll in your SYSTEM. . I suppose you have ..../Anaconda3/Library/bin in the PATH environment variable. ; So you have a mismatch between libpng's version (and libpng is bothersome for that).; Make sure you load the good dll when executing runSofa. ; The ""good"" dll is supposed to be copied from sofa-windows-dependency-pack with the binaries of the build directory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284:309,variab,variable,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1364#issuecomment-777639284,1,['variab'],['variable']
Modifiability,"Sorry fred you are right, the PR contains both the pluginization of the SofaOpenglVisual in area module/plugin and the removal of the GLEW all around and updating the code that had dependencies to SofaOpenglVisual. I updated the description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346:51,plugin,pluginization,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499398346,2,['plugin'],"['plugin', 'pluginization']"
Modifiability,"SphereCollisionModel]; ""Sofa.Component.Collision.Response.Contact"", # [DefaultContactManager]; ""Sofa.Component.Constraint.Projective"", # [FixedConstraint]; ""Sofa.Component.LinearSolver.Iterative"", # [CGLinearSolver]; ""Sofa.Component.Mass"", # [UniformMass]; ""Sofa.Component.ODESolver.Backward"", # [EulerImplicitSolver]; ""Sofa.Component.SolidMechanics.Spring"", # [StiffSpringForceField]; ""Sofa.Component.Topology.Container.Dynamic"", # [EdgeSetTopologyContainer, EdgeSetTopologyModifier]; ""Sofa.Component.Visual"", # [VisualStyle]; ""SofaCarving"", # [CarvingManager]; ""Sofa.Component.StateContainer"", # [MechanicalObject; ""Sofa.Component.LinearSolver.Direct"", # [SparseLDLSolver]; ""Sofa.Component.AnimationLoop"", # [FreeMotionAnimationLoop]; ""Sofa.Component.Constraint.Lagrangian.Correction"", # [LinearSolverConstraintCorrection, UncoupledConstraintCorrection]; ""Sofa.Component.Constraint.Lagrangian.Solver"", # [GenericConstraintSolver]; ]. plugin_node = root_node.addChild(""Plugins""). for plugin in plugin_list:; plugin_node.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root_node.addObject(""FreeMotionAnimationLoop""); root_node.addObject(""DefaultVisualManagerLoop""); root_node.addObject(; ""VisualStyle"",; displayFlags=[""showVisual"", ""showForceFields"", ""showCollisionModels"", ""showInteractionForceFields""],; ). root_node.addObject(""DefaultPipeline""); root_node.addObject(""BruteForceBroadPhase""); root_node.addObject(""BVHNarrowPhase""); root_node.addObject(""GenericConstraintSolver""); root_node.addObject(""DefaultContactManager"", response=""FrictionContactConstraint""). root_node.addObject(; ""NewProximityIntersection"",; alarmDistance=1.0,; contactDistance=0.2,; ). root_node.gravity = [0.0, -918, 0.0]. scene_node = root_node.addChild(""scene""). cutting_sphere_node = scene_node.addChild(""cutting_sphere""); cutting_sphere_node.addObject(""CGLinearSolver""); cutting_sphere_node.addObject(""EulerImplicitSolver""); cutting_sphere_node.addObject(""PointSetTopologyContainer""); position = [6.0, 5.0, 0",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3269#issuecomment-1255376528:1628,plugin,plugin,1628,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3269#issuecomment-1255376528,1,['plugin'],['plugin']
Modifiability,"Split the default parameters of the FileRepository constructor into; multiple constructors to avoid ambiguous calls. Add a new constructor that allows the creation of the repository using; multiple paths. The plugin file repository is now initialized using both $SOFA_ROOT/lib; and $SOFA_ROOT/plugins. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1610:209,plugin,plugin,209,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1610,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Static variable was not defined with double precision Cuda types. The CI probably does not compile SofaCUDA with double precision (off by default). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2440:7,variab,variable,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2440,1,['variab'],['variable']
Modifiability,"Status of prefabs could be discussed further:; - should they be located in the SofaPython3 plugin?; - should we create many level of abstractions/prefabs?; - definition of current prefabs, e.g. `ElasticObject` using a `UniformMass`?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206:91,plugin,plugin,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206,1,['plugin'],['plugin']
Modifiability,"Strange error on Mac clang: ; ```; Adding module SofaOpenglVisual; CMake Error at /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1239/mac_clang-3.5_options_release/build/cmake/SofaFrameworkConfig.cmake:76 (find_package):; Could not find a package configuration file provided by ""GTest"" with any of; the following names:. GTestConfig.cmake; gtest-config.cmake. Add the installation prefix of ""GTest"" to CMAKE_PREFIX_PATH or set; ""GTest_DIR"" to a directory containing one of the above files.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709:260,config,configuration,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1239#issuecomment-572047709,2,['config'],"['config', 'configuration']"
Modifiability,"Super great contrib :) The as-clean-as-possible way to implement a controller. From a quick review, everything looks good to me. A few suggestions:; 1- what about adding a python-based layer (inherited class) that would, in its `__init__`, set the Data member (like the name) from the kwargs + call an eventual 'createGraph' function + print a warning if 'onLoaded' exists ;); 2- check that everything is ok with the destruction and the reference counter (maybe it is, I am not yet sure); 3- update the ControllerVariable.py example; 4- mark the SofaPython.script.Controller as deprecated",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410:192,inherit,inherited,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-305540410,1,['inherit'],['inherited']
Modifiability,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:272,refactor,refactored,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901,4,"['refactor', 'variab']","['refactor', 'refactored', 'variables']"
Modifiability,Symbol not found: __ZN13QOpenGLWidget10paintEventEP11QPaintEvent; Referenced from: /Applications/runSofa.app/Contents/MacOS/bin/../../Frameworks/QtCharts.framework/QtCharts; Expected in: /usr/local/lib/QtWidgets.framework/QtWidgets; in /Applications/runSofa.app/Contents/MacOS/bin/../../Frameworks/QtCharts.framework/QtCharts. Binary Images:; 0x1078c4000 - 0x1078e7fff +runSofa (0) <F5377489-827F-342E-9B3B-C78AC8FFB70D> /Applications/runSofa.app/Contents/MacOS/bin/runSofa; 0x1078f7000 - 0x107916fff +libSofaSimulationGraph.20.12.01.dylib (0) <2B9D2482-ED40-3ECB-9B4A-7BB93AFEF219> /Applications/runSofa.app/Contents/MacOS/lib/libSofaSimulationGraph.20.12.01.dylib; 0x107957000 - 0x10796afff +libSofaGuiMain.20.12.01.dylib (0) <B93CBF60-CD3B-39C5-9B98-9DAF891408CC> /Applications/runSofa.app/Contents/MacOS/lib/libSofaGuiMain.20.12.01.dylib; 0x107979000 - 0x1079dcfff +libSofaValidation.20.12.01.dylib (0) <13078F67-B4BC-3C97-88E0-027C5FE362EE> /Applications/runSofa.app/Contents/MacOS/plugins/SofaValidation/lib/libSofaValidation.20.12.01.dylib; 0x107a7e000 - 0x107bf1fff +libSofaGuiQt.20.12.01.dylib (0) <FDAD8B23-63EB-36B8-8FA5-4A4BE5727F8F> /Applications/runSofa.app/Contents/MacOS/lib/libSofaGuiQt.20.12.01.dylib; 0x107ead000 - 0x107eccfff +libSofaGuiCommon.20.12.01.dylib (0) <79318879-EFF8-36D2-8F09-F3AB9C184736> /Applications/runSofa.app/Contents/MacOS/lib/libSofaGuiCommon.20.12.01.dylib; 0x107ef7000 - 0x107efefff +libSofaBase.20.12.01.dylib (0) <1205B822-EBCE-3080-A504-279C805EA8D8> /Applications/runSofa.app/Contents/MacOS/lib/libSofaBase.20.12.01.dylib; 0x107f08000 - 0x107f67fff +libSofaUserInteraction.20.12.01.dylib (0) <BE44029E-7778-3A49-88DE-C2B749FC8B02> /Applications/runSofa.app/Contents/MacOS/plugins/SofaUserInteraction/lib/libSofaUserInteraction.20.12.01.dylib; 0x108050000 - 0x10807bfff +libSofaGraphComponent.20.12.01.dylib (0) <E287C3F6-BA9B-3659-A9EB-38E2A3A80B8A> /Applications/runSofa.app/Contents/MacOS/plugins/SofaGraphComponent/lib/libSofaGraphComponent.20.12.01.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:2104,plugin,plugins,2104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['plugin'],['plugins']
Modifiability,System::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.Mesh.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.IO.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Playback.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SceneUtility.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Constant.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Dynamic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.Grid.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Topology.Container.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:2055,Plugin,PluginManager,2055,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,T and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /home/sergei/Source_code/Sofa_development/sofa/build_release/install; ---------------------------------------; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/libSofaPython3.so; [INFO] [runSofa] Loading automatically plugin list in /home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaSimpleFem/lib/libSofaSimpleFem.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaRigid/lib/libSofaRigid.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaDeformable/lib/libSofaDeformable.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaObjectInteraction/lib/libSofaObjectInteraction.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaMeshCollision/lib/libSofaMeshCollision.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaEngine/lib/libSofaEngine.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaExplicitOdeSolver/lib/libSofaExplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaImplicitOdeSolver/lib/libSofaImplicitOdeSolver.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:3296,Plugin,PluginManager,3296,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,3,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"THIS PR HAS BEEN SPLITTED IN SEVERAL PART... THE FIRST ONE IS: #1605 . In this PR I'm try to avoid the tight coupling that is currently in DataTypeInfo.h. . Let's me explain,; Every Data that we manipulate in sofa can return type informations. ; This can be done in two ways:; - the first solution rely on type_traits with the specialization of the DataTypeInfo class. A DefaultDataTypeInfo is provided as a fallback scenario while fully defined information can be provided by providing a specialization for DataTypeInfo<>. ; - the second solution is a runtime approach were the typeinfo is inherited from AbstractTypeInfo. ; To *ease* the implementation the runtime solution is generated by ""reusing"" the static one. This is done with VirtualTypeInfo<StaticDataTypeInfo>. This VirtualTypeInfo inherits from AbstractTypeInfo but wrap and forward all the method call to the StaticDataTypeInfo passed in the template parameter. . This is actually an interesting design gears provided fast/efficient API and an abstract one with lower performance. Nevertheless there is actually one problem with the existing implementation, the problem is that by default access to the static version (so the one that need the full inclusion of involved data types) to generate the dynamic one in the VirtualTypeInfo::get() method. As this function is needed to implement Data<T>::getAbstractTypeInfo it means that the complete static version is needed everytime and everywhere we manipulate a Data<>. To be sure the code does not fall back to DefaultTypeInfo... most of the specilization are made visible in DataTypeInfo.h where a lot of data types ""vector, rigid, map, vec, quat"". All these includes are just there to insure that in Sofa no-one will never fallback on the default dehavior. But static type info is kind of ""expert"" feature that is only usefull in few rare use cases. So polluting the complete dependency tree (and compilation unit) for a rarely use case is problematic. . So I tried to reverse all to i",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552:109,coupling,coupling,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552,3,"['coupling', 'inherit']","['coupling', 'inherited', 'inherits']"
Modifiability,"TL;DR (dev): Remove direct dependency in SofaConstraint&SofaPrecond on SofaSimpleFEM by implementing a function in TetraFEM.; TL;DR (user): Using PrecomputedConstraintCorrection with `rotations=""true""` now **requires** to have a RotationFinder. PrecomputedConstraintCorrection has a hard dependency on TetrahedronFEMForceField, to get rotations.; (hence calling a a function of TetraFEM); It can also get rotations if it detects a component implemented RotationFinder<T>.; But TetrahedronFEMForceField is already implementing BaseRotationFinder taking a BaseMatrix*.; RotationFinder<T> inherits BaseRotationFinder, so I made TetrahedronFEMForceField implementing RotationFinder<T> instead. (which adds an other method to implement); Finally, PrecomputedConstraintCorrection only needs RotationFinder<T> now. IMO, ; - BaseRotationFinder implemented in TetrahedronFEM & HexahedronFEM only and used in WarpPreconditioner;; - RotationFinder<T> (implemented by nobody in the sofacode base but apparently by one external plugin @pedroperrusi) and used by PrecomputedConstraintCorrection, WarpPreconditioner and PrecomputedWarpPreconditioner;. would really need a refactoring or some re-working.; Those two were defined more or less in the same time, in 2006 (!) in the early days of SOFA. Some cleaning in PrecomputedConstraintCorrection as well; and this PR made me wonder the never-defined preprocessor definition NEW_METHOD_UNBUILT in PrecomputedConstraintCorrection (@ChristianDuriez ?). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it doe",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2250:586,inherit,inherits,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2250,2,"['inherit', 'plugin']","['inherits', 'plugin']"
Modifiability,TODO (to be discussed):. - [ ] Add a CI to https://github.com/sofa-framework/CSparseSolvers; - [ ] Add CSparseSolvers to the list of shipped plugins with the release (https://www.sofa-framework.org/download/),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4994:141,plugin,plugins,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4994,1,['plugin'],['plugins']
Modifiability,TODO: ; 1. rename the repository plugin.SofaPython3 into SofaPython3; 2. report the change in this PR,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1427#issuecomment-652273244:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1427#issuecomment-652273244,1,['plugin'],['plugin']
Modifiability,TODO: save the previous scenes in the new plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1801394698:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1801394698,1,['plugin'],['plugin']
Modifiability,TODO: try to edit the fetched plugin and configure again to see if CMake is not erasing user modifications.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950:30,plugin,plugin,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649#issuecomment-385902950,2,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,Targets are built with debug version of runtime library in debug configuration; under MS Visual Studio. This is enabled with /MDd compiler flag. Missing this; flag for NVCC generated object files results in linker fails due to different; versions of runtime libraries. The problem is resolved by explicitly setting compiler options for debug build; under Windows. The solution is given only for Windows and only for MSVS because; it's the only officially supported by NVidia compiler on this platform. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/300:65,config,configuration,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300,1,['config'],['configuration']
Modifiability,"TaskScheduler was doing several things:; - A base class for task schedulers; - A factory to register and create task schedulers. The factory code is extracted from the TaskScheduler class and moved into its dedicated class and file. I refactored a bit how the factory works:; Before, it was like there could be only one TaskScheduler at a time. Everytime a new TaskScheduler was created, the previous one is destroyed. It prevents the use of multiple TaskScheduler with different type (derived class). Instead, the task schedulers are now stored in a map. ; The only issue is related to the task allocator. The task allocator is used every time a task is created. The task allocator is supposed to depend on the TaskScheduler where the task will be added. But in practice, a Task is created independently from the TaskScheduler. So I kept the old system that calls a static function setting the allocator when the task scheduler is created. Some unit tests are introduced. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480:235,refactor,refactored,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480,1,['refactor'],['refactored']
Modifiability,Tests inheriting from SofaTest create by default several tests which have no meaning. It was the case for example for SofaMiscTopology_test:. SofaMiscTopology_test/AffinePatch_sofa_test ; SofaMiscTopology_test/LinearElasticity_test ; SofaMiscTopology_test/TopologicalChangeProcessor_test. This is not really an issue... but this means we have a bunch of fake tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1935:6,inherit,inheriting,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1935,1,['inherit'],['inheriting']
Modifiability,"Thank Guillaume for the effort you are doing on this hard task. . For curious people here is a small test we did on how things could look like ; on the ""pluginization"" side (the idea is to be closer to python modules): ; https://github.com/SofaDefrost/sofa/blob/addModule/applications/pluginsNG/README.md",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252:153,plugin,pluginization,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-351405252,2,['plugin'],"['pluginization', 'pluginsNG']"
Modifiability,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:972,refactor,refactoring,972,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148,2,"['plugin', 'refactor']","['pluginization', 'refactoring']"
Modifiability,Thank you @damienmarchal for this nice work as always.; I see you removed all the `typedef` but did not re-defined them in plugins. Won't this break user code?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330460694:123,plugin,plugins,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330460694,1,['plugin'],['plugins']
Modifiability,Thank you @fangzhouzisb for raising this again and your investigation.; Unfortunately I didn't had time to work on that issue specifically and I'm not expert of the constraint resolution pipeline. But I'm in a middle of a deadline involving the Geomagic plugin and I also found several wrong behavior that I'm trying to fix. ; I'm going to try your fix and merge all that in one PR. maybe @hugtalbot could you poke someone expert in FreeMotion and constraint pipeline to see if this fix will have side effects?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989:254,plugin,plugin,254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1148#issuecomment-533503989,1,['plugin'],['plugin']
Modifiability,"Thank you @ziqiu-zeng for the PR, I can see I did some mistake in the compat files 😬. > Enable compilation with cuda plugins: SofaAsyncSolvers, SofaCUDALDI, SofaCUDASolvers, SofaCUDADev Please also update the plugins; > . Unfortunately, these plugins are private plugins from the mimesis team so we cannot access/fix/update them 🤔",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102753225:117,plugin,plugins,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2883#issuecomment-1102753225,4,['plugin'],['plugins']
Modifiability,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:484,plugin,plugins,484,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Thank you for this PR, it highlights a more serious bug when adding elements in TopologySubsetData. A PR to fix the TopologySubsetData is coming, then we will update this PR to adapt UniformMass with the good callbacks. Right now the callback on PointRemoved event proposed in this PR will crash as the TopologySubsetData already has an internal mechanism to update its size. So you perform the deletion twice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1097837525:177,adapt,adapt,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2853#issuecomment-1097837525,1,['adapt'],['adapt']
Modifiability,Thank you for this fix.; Starting the builds will be useless here since we do not have a VS-2015_options-debug config.; LGTM though. Anyone to confirm?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/300#issuecomment-307735750:111,config,config,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/300#issuecomment-307735750,1,['config'],['config']
Modifiability,"Thank you for your comment; The interest is to be able to map the forcefields through the mapping in a sparse manner for many solvers of SOFA. I agree that this functionality is not directly available in the API and for now, would be only available in a private plug-in. But this is work in progress and we need more time to have a clean code available. Why does it break the API ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849:262,plug-in,plug-in,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306720849,1,['plug-in'],['plug-in']
Modifiability,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:70,enhance,enhancements,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216,1,['enhance'],['enhancements']
Modifiability,Thank you for your fixes @FabienPean !. Two remarks about consistency:; - `Sofa_test` default template is `SReal`. I would go for `Sofa_tests<>` inheritance. Unless there is a specific reason for inheriting from `Sofa_tests<SReal>` ?; - `#ifndef SOFA_FLOAT` block usually comes before `#ifndef SOFA_DOUBLE` block. I can push these tiny corrections if you're ok 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706:145,inherit,inheritance,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262#issuecomment-303331706,2,['inherit'],"['inheritance', 'inheriting']"
Modifiability,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:369,Config,Config,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,1,['Config'],['Config']
Modifiability,"Thank you for your update @nhnhan92 ; I added two reviews in the code. Regarding the license, we need the SOFA header to be added in order to display the official license of the project. If this is not possible, an alternative would be to create a dedicated plugin which could have its own open-source license. Finally, a last question would be : would it be possible to have a regression test comparing your material with a analytical/manufactured solution?. Thanks again for this nice piece of work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349:258,plugin,plugin,258,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-776748349,1,['plugin'],['plugin']
Modifiability,"Thank you very much for your development. Recently, I had the opportunity to use the plugin you developed, but I found that the latest version of the plugin corresponds to SOFA v21.12, while the latest version of SOFA is v24. So, may I ask if you can update this plugin. Also, since SOFA has developed a compiled version, may I ask how to use this plugin when using the already compiled version of SOFA? We look forward to your prompt reply!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4934:85,plugin,plugin,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4934,4,['plugin'],['plugin']
Modifiability,"Thanks @alxbilger for the explanation and the perfect illustration :+1:; I understand the issue, although I don't know if the ""appropriate use"" of this method (`getValuePtr`) should be left to the user, or if additional safeguards should be put in the code. I did a quick search in the code of SOFA + a few plugins that I'm using, and I found a call to this particular method only in the `DataHelper` component in SofaPython3. I added a quick safeguard in this case, in the [PR](https://github.com/sofa-framework/SofaPython3/pull/318) I'm referring to in the description above. However the modification I suggested doesn't solve the type of problem you are describing here (so it would be left to the user to check data buffer coherence whenever the underlying data is modified...). Apart from that, I saw that the initial code I replaced (`return &data[0]`) is also used in two others `getValuePtr` methods : in `FixedArrayTypeInfo.h` and `TypeInfo_Text.h`. As I didn't find any other call to these methods, I would say this doesn't change much, but maybe the PR could be extended to these as well. I can do the modification if someone can confirm it is a good idea.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329331227:307,plugin,plugins,307,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3505#issuecomment-1329331227,2,"['extend', 'plugin']","['extended', 'plugins']"
Modifiability,"Thanks @bakpaul for reporting the problem.; After a quick check, the file to change is SofaMiscForceFieldConfig.cmake.in.; Its CmakeLists.txt refers to SofaBaseMechanics but its *Config.cmake.in does not. So the discrepancy is there.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2707#issuecomment-1044449622:179,Config,Config,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2707#issuecomment-1044449622,1,['Config'],['Config']
Modifiability,Thanks @bcarrez for taking the time to check :-); @vmagno didn't you fix the plugin to work with latest CGAL? That's what @jnbrunet told us.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/510#issuecomment-343495382:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510#issuecomment-343495382,1,['plugin'],['plugin']
Modifiability,"Thanks @courtecuisse for this PR :+1: . Few changes to do (from sofa-dev meeting):; - [x] Move it in QtGLViewer, this should not be in RealGUI; - [x] Add ON/OFF with command line option or environment variable",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/722#issuecomment-408022677:201,variab,variable,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/722#issuecomment-408022677,1,['variab'],['variable']
Modifiability,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:722,plugin,plugins,722,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Thanks @damienmarchal. Could you detail a bit what has been done here? I see #475 commits, DisplacementTransformEngine files creation and DisplacementMatrixEngine deprecation.; Moreover, `git rename` and `git add` detections are a bit weird: ; modules/SofaMiscEngine/initMiscEngine.h → ...el/SofaFramework/build_option_opengl.h.in; modules/SofaMiscEngine/initMiscEngine.cpp → ...faMiscEngine/DisplacementMatrixEngine.cpp; applications/plugins/SofaMiscEngine/DisplacementMatrixEngine.h detected as created; modules/SofaMiscEngine/DisplacementMatrixEngine.h → ...Engine/DisplacementTransformEngine.h",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337:435,plugin,plugins,435,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/477#issuecomment-338606337,1,['plugin'],['plugins']
Modifiability,"Thanks @fredroy for the PR which address a legitimate concern. The problem adressed by the PR is often seen in SOFA's base classes where a parent class is having virtual function defined to print ""no implemented"" (or to print nothing). In general this pattern can be considered as a good code smell often related to some violation of SOLID's principle (eg: Liskov Substition Principle). The proposed solution of moving functions in a separated object is going in the right direction (as pointed by @alxbilger by segregating the intefaces). But it is unclear to me if the implementation proposed in the PR is enough because:; - having PartialLinearSolver inheriting from BaseObject looks weird for an ""interface"", ; - using dynamic cast to detect the ""features"" in the ConstraintCorrection, ... ; - the implementation in BTD also looks highly suspicious with:; - plenty of ""debug/trace"" mapped to Datas as if the feature was ""not stable"" or only working in some case.; - a boolean to control if we use the PartialLinearSolver part of the API or if we don't... and I wonder if the actually really work for full & partial solving or only for one of the two APIs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937:654,inherit,inheriting,654,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241#issuecomment-1227045937,1,['inherit'],['inheriting']
Modifiability,Thanks @hugtalbot for this PR !. Were there any example scenes in the sofa/examples folder that would need to be updated and maybe move in this plugin?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925:144,plugin,plugin,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659#issuecomment-743116925,1,['plugin'],['plugin']
Modifiability,Thanks @marques-bruno !; Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103588809:97,config,configuration,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103588809,1,['config'],['configuration']
Modifiability,Thanks Eric for the fixes and the additional test. Your answer about GridTopology rise other questions:; - If the component is not supposed to be used without being inherited... shouldn't we remove it from the factory ?; - If a class is not a component does not mean we shouldn't test it. Actually my feeling is that base class (as they are shared) are very good entities to test :) . EDIT: Maybe these questions should be for a new Issue and not to handle in this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540:165,inherit,inherited,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-301445540,1,['inherit'],['inherited']
Modifiability,"Thanks Matthieu !; To keep this PR clean, I edited the commit `[applications/plugins] FIX missing licenses` and rewrote my branch.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-274134737:77,plugin,plugins,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-274134737,1,['plugin'],['plugins']
Modifiability,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:665,variab,variable,665,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910,2,['variab'],['variable']
Modifiability,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:135,plugin,plugin,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641,1,['plugin'],['plugin']
Modifiability,Thanks for pointing that @fredroy. Are compliant and Flexible still compiling ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040573374:53,Flexible,Flexible,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2694#issuecomment-1040573374,1,['Flexible'],['Flexible']
Modifiability,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:238,plugin,plugins,238,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936,2,['plugin'],"['pluginSofaCoreAsync', 'plugins']"
Modifiability,"Thanks for the answer,. Actually we are using c++17 in our plugins since years. . The problem is that not having sofa supporting c+17 means that when we want to make PRs to integrate some features into the sofa master we have to convert all the code to c++11. As it was agreed to allow Sofa to support c++17 a year ago I think it would be nice to have it asap, as it would free the contributors from reverting their codebase to c++11 to make PRs. . So good luck to Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797:59,plugin,plugins,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-593389797,1,['plugin'],['plugins']
Modifiability,"Thanks for the answers, I moved them to the PR description. . ""This work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. "" ; I searched in the issues and PRs if there was ever any debate on that topic so that I could provide a link in the description but I didn't found one. Maybe you are referring to face to face discussions ? If this was the case maybe writing a summary of these debate (pro/cons) would be very informative and helpful for all of us. . ""depends on the meaning of breaking""; In general we are considering the following:; - a PR is non breaking if its merge will be un-noticeable for people that don't care of the added feature. ; - a PR is breaking the scene if, after the PR, *any* scenes that was working before is not working anymore. ; - a PR is breaking the API if *any* plugin compiling with master is not compiling anymore after the PR. . Damien",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159:874,plugin,plugin,874,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402733159,1,['plugin'],['plugin']
Modifiability,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:623,refactor,refactoring,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238,1,['refactor'],['refactoring']
Modifiability,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:67,config,config,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243,1,['config'],['config']
Modifiability,"Thanks for this PR @damienmarchal ; Just a question that may end into a debate: do we continue differentiating ""plugins"" and ""modules""? It induced only misunderstanding during STC#5.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408803173:112,plugin,plugins,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/732#issuecomment-408803173,1,['plugin'],['plugins']
Modifiability,"Thanks for vigilance @hugtalbot. @lamriaimen as you can see in the following report, most of the deprecation warnings are in targets that you probably did not enable. I suggest that you activate in CMake ""internal"" plugins (the ones provided with the sources in `applications/plugins`), and I take care of the external plugins (such as ModelOrderReduction). https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-4771/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/13/FullBuildWarnings-Clang/category.2119183113/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2182125913:215,plugin,plugins,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4771#issuecomment-2182125913,3,['plugin'],['plugins']
Modifiability,Thanks for your commits @matthieu-nesme ; Any idea why Compliant tests are failing?. ```; [----------] 6 tests from Batch/Python_scene_test; [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/0; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Flexible/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaPython.so; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/Example.py; [ OK ] Batch/Python_scene_test.sofa_python_scene_tests/0 (2544 ms); [ RUN ] Batch/Python_scene_test.sofa_python_scene_tests/1; [INFO] [Python_scene_test] running /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/Compliant_test/python/LambdaPropagation.py; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant.so; [INFO] [PluginManager] Loaded plugin: /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libCompliant_gui.so; [DEPRECATED] [Compliant.Vec],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:296,plugin,plugins,296,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,7,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"Thanks for your detailled report. ; This definitely looks like a bug of SOFA related to DAGNode; we don't have centOS on our CI yet, but we will put a Centos7 config on our continuous integration system and look into this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673:159,config,config,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-271823673,1,['config'],['config']
Modifiability,"Thanks for your inputs @fspadoni and @damienmarchal , and sorry for the late response. There are two commits in this PR (two versions of the fix); the first one fixed completely the problem on mac OS X, but may introduce thread race condition as only the constructor of a static variable is thread safe. Since the **messageTypePrefixes** and **messageTypeColors** static arrays are initialized in the ; **formatMessage** method, two threads can collide there. The second one tries to fix that, but isn't working yet (hence the commit name ""temp"").; In this one, the **DefaultStyleMessageFormatter** singleton instantiation doesn't cause a seg fault on mac os x anymore, but the **messageTypeColors** static array fails to instantiate correctly, causing all console messages to be blue. This may be because **Console::BRIGHT_GREEN**, **Console::BRIGHT_YELLOW**, etc. are all, of course, static objects. Since they are initialized in another .cpp, the order of their constructor calls with respect to the **DefaultStyleMessageFormatter** singleton instantiation cannot be predicted (compiler bound). I'll try to find a solution in two weeks (I'll be away for the next 10 days working hard on my sun tan ☀️)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748:279,variab,variable,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-389782748,1,['variab'],['variable']
Modifiability,"Thanks guys for the reviews. Indeed, as @damienmarchal said, I wanted in this PR to remove the need to call parent init() in all BaseObject derived classes. This is more a proposal than a confident solution. . > data fields are conditionally needed when a third one is set to true/false (@damienmarchal). I think this ""true/false implying other data fields"" mechanism is a bad design and for this case no checking solution will be clean. The other data fields should be part of another Component linked to the first one or in an inherited Component. Unfortunately I guess this mechanism is already in a lot of Components... @epernod I understand and agree with your concern that each object should check it's own Datas but I'm not sure it's compatible with the idea of removing the need to call parent init(). I think we have to choose:; 1. removing the need to call parent init() but doing the check outside of the object with a Visitor; 2. doing the check inside the object but keeping the need to call parent init(). I'm open to any proposal combining the pros of 1 and 2.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416561180:529,inherit,inherited,529,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/754#issuecomment-416561180,1,['inherit'],['inherited']
Modifiability,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:455,plugin,plugins,455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663,2,"['plugin', 'refactor']","['plugins', 'refactoring']"
Modifiability,"Thanks, that's a start but not quite refactored. Here is a proposal (not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; bool infiniteLoop = (nbIter == -1);. if (infiniteLoop); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }. sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();. signed int i = 2; // one simulation step is animated above; while(infiniteLoop || i <= nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());. if(infiniteLoop && i % 1000 == 0 || i == nbIter); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfreq)*i)/((double)rt) << "" FPS)."" << msgendl; ; ; if(infiniteLoop); {; msg_info(""BatchGUI"") << ""Press Ctrl + C (linux)/ ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175:37,refactor,refactored,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378645175,1,['refactor'],['refactored']
Modifiability,"That's a very good question....; I think that initially it was used to sort components by categories (Forcefields, masses, collision algorithms, etc.); There was a binding in SofaPython that was returning the categories associated to a component. Also, a class named SofaLibrary is using CategoryLibrary.; After your comment, a quick search in the sources shows me that SofaLibrary is not used anywhere actually:; - SofaLibrary itself is used nowhere. SofaModeler does hold a pointer to a SofaLibrary, but this pointer is never used antwhere in the code... ; - QSofaTreeLibrary inherits SofaLibrary -> not used anywhere in SOFA. So now that I see that, I vote for removing the CategoryLibrary / SofaLibrary / QSofaTreeLibrary from SOFA altogether. What do you say?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503449780:578,inherit,inherits,578,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1085#issuecomment-503449780,1,['inherit'],['inherits']
Modifiability,"That's an interesting explanation @fjourdes and it seems you raise an issue to solve if we need an efficient way to manage points/vertices/whatever in the MechanicalObject.; However as you say, TopologyData is actually NOT used in MechanicalObject. Therefore it is totally safe to comment/remove `#include SofaBaseTopology/TopologyData.inl` . I assume that it was forgotten when people attempted to use the new topology engine system for MechanicalObject (and unfortunately gave up). A PR should be issued with the removal, in order to be sure that everything does not change at all (I checked on my setup and the tests ran smoothly; but it would be better to test with the ""options"" configuration)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091:684,config,configuration,684,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295322091,1,['config'],['configuration']
Modifiability,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:201,plugin,plugins,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637,1,['plugin'],['plugins']
Modifiability,"The CImgPlugin has been implemented. It can read bmp, png, jpeg, etc. using the CImg API.; ( http://cimg.eu ); The idea would be to remove ImageQt indeed (original goal of this issue) but also ImagePNG and ImageBMP which are in the core of Sofa.; So the remaining question is : should the plugin be in the core of Sofa (SofaKernel) ? or we consider the fact to read images as optional and the plugin will be in applications/plugins (or in the future in an other repository)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169:289,plugin,plugin,289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/51#issuecomment-281621169,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"The Config.cmake.in was not consistent with the actual CMakeList.txt. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3576:4,Config,Config,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3576,1,['Config'],['Config']
Modifiability,"The LateSpecialization pattern, introduced in https://github.com/sofa-framework/sofa/commit/1b92a802eb69693af65f2094f02f9a734d333804, was used to avoid code duplication between float and double specialization of Rigids. However, now that there is only one specialization, it makes the code more difficult to read. Therefore, I suggest to go for a standard specialization. Note that the diff may be difficult to read, but this PR only moves code (with adaptation). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126:451,adapt,adaptation,451,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126,1,['adapt'],['adaptation']
Modifiability,"The MutationListener in Sofa is used to notify (A GUI for instance) of the SceneGraph's edition (addition / deletion / move of nodes, objects, or slaves); The MutationListener itself does not perform anything, but once inherited, its methods can be overloaded to perform operations on a ListView widget for instance, as does the GrapListenerQListView, in applications/sofa/gui/qt. The current implementation stores a pointer to every registered listeners in every node in the scene graph. Instead, the implementation proposed in this PR registers the listeners in the root node and child nodes forward the notifications to it. Also, the overloads are currently relying on the call super (the child class reimplements the method, then calls its base class implementation) This approach is [known to be error prone](https://en.wikipedia.org/wiki/Call_super) and can be reimplemented using delegates instead. Finally, this PR also adds extra delegates in the Nodes listeners notifications system and in the MutationListener, called *AFTER* the graph's edition. those are used in SofaQtQuick to be notified that the graph has indeed been updated. . Here are 2 quick UML diagrams showing the 2 architecture's differences. This one is the current implementation in sofa:; ![code_smell](https://user-images.githubusercontent.com/13734391/52288894-5245f000-296d-11e9-83b6-12f6ce1385f9.png). And this one is what this PR does:; ![code_clean](https://user-images.githubusercontent.com/13734391/52288978-730e4580-296d-11e9-9057-451922e971c8.png). Also, if someone could tell me what the master / slave relationship between BaseObjects are, I'd be curious to know if it is still in use in SOFA. It doesn't seem to be used in Listeners.. maybe added for Compliant / Flexible?. __This PR could potentially be breaking for plugins & projects implementing their own MutationListeners__. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] b",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917:219,inherit,inherited,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917,1,['inherit'],['inherited']
Modifiability,"The PLUGIN_SOFASPHFLUID option was not taken into account by the CUDA plugin, so it would try to link against that plugin even if it was not compiled with SOFA. There was also a file that was included twice in CMakeLists.txt. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/523:70,plugin,plugin,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523,2,['plugin'],['plugin']
Modifiability,The PR #1790 highlighted that the DualQuat is only used in Flexible.; MatSym seems as well not really used. It is an open discussion.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1828:59,Flexible,Flexible,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1828,1,['Flexible'],['Flexible']
Modifiability,The PR is deprecated since plugin.SofaPython3.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-536999763:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-536999763,2,['plugin'],['plugin']
Modifiability,"The PR shows there is still a lot of cleaning & refactoring work to do on this component, volunteer welcomed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3249#issuecomment-1246469800:48,refactor,refactoring,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3249#issuecomment-1246469800,1,['refactor'],['refactoring']
Modifiability,The PSL plugin relies on SofaPython which is deprecated. The PSL plugin must also be deprecated.; It includes moving the sources of the plugin into an external repository.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3873:8,plugin,plugin,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3873,3,['plugin'],['plugin']
Modifiability,"The SceneCreator is now based on the plugin manager to load its dependency. ; It seems that when compiling in debug the plugin names are changed. In this PR I added to the PluginManager a way to search for ""debugging"" names when Sofa is compiled in debug. . This should fix the failling tests on options_debug on master reported in #463 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/465:37,plugin,plugin,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/465,3,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,The SofaEulerianFluid plugin does not contains documentation.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/833:22,plugin,plugin,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/833,1,['plugin'],['plugin']
Modifiability,"The SofaPython plugin is now outdated and based on python2. . As python3 already breaks the API, updating the SofaPython plugin for python3 is an opportunity to also refactor the whole binding code. . Stuff I would like to have.; Pythonic way to manipulate data; ```python; c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000); len(c.position); for i in c.position:; print i; c.position += [1,0,0]; c.position[2] += [1,0,0]; c.position[2,0] += 2; c.position[1:10] = [1,0,0] ; ...; ```. Numpy exposure of data; ```python; c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000). ## Read access (copy-less) using toarray(); p = c.position.toarray(); o = numpy.ones((len(c.position), 3))) ; j = p + o. ## Write access (copy-less), the data counter is updated after the 'with' block; with c.position.writeable() as w:; o = numpy.ones((len(c.position), 3))) ; w += o ; w *= 2.0; ```. Wrap around types (copy-less) to typify the data fields on demand; ```python; # syntax 1; c = o.showColor.as(RGBAColor); # syntax 2; c = RGBAColor(o.showColor); c.setFromHSC(1,2,3); c.setFromHSV(1,2,3); ```. Implement your own ForceField in python:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs); ; def init(self):; self.refx = self.position.toarray().copy(). def addForce(self, m, f, x, v):; n = numpy.ones((len(self.position),1)); f = (self.refx-x) * 2 + n; ```; ; To test the binding you need to de-activate SofaPython and activate SofaPython3. ; Then; - runSimu.py to launch a sofa simulation from the command line eg: ; python3 runSimu.py mySimulation.py; - or runSofa. . General guidelines:; - Fix existing API consistency issues; - Improve the performance of the binding by supporting supporting the different python protocols (sequence, buffer+memoryview, copy-less mechanism).; - unified data access and API.; - implementation is currently done with pybind11 and cython.; - modular des",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771,3,"['plugin', 'refactor']","['plugin', 'refactor']"
Modifiability,The `VirtualTypeInfoA` is there to ease the transition from static to dynamic (ie not breaking current code/plugins)? Or is it a long time design?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712786434:108,plugin,plugins,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712786434,1,['plugin'],['plugins']
Modifiability,"The `sofa::type::vector<T>` class has three ambiguous constructors:. ```c++; vector(Size n, const T& value): std::vector<T,Alloc>(n,value) {}; vector(int n, const T& value): std::vector<T,Alloc>(n,value) {}; vector(long n, const T& value): std::vector<T,Alloc>(n,value) {}; ```; effectively making the constructor taking a `sofa::Size` useless: using it will result in an ambiguous call since it can be implicitly converted to both `int` and `long`. This PR remove two of them and keep only the `vector(Size n, const T& value)` one. Steps to reproduce; 1. **main.cpp**; ```c++; #include <sofa/type/vector.h>; #include <iostream>. int main() {; using namespace sofa::type;; vector<double> d_v (sofa::Size(5), 0);; std::cout << d_v << std::endl;; return 0;; }; ```; 2. **Compile**; ```sh; $ gcc -isystem $SOFA_ROOT/include/Sofa.Type -isystem $SOFA_ROOT/include/Sofa.Config -o main.o -c main.cpp; ```; ```sh; main.cpp: In function ‘int main()’:; main.cpp:6:41: error: call of overloaded ‘vector(sofa::Size, int)’ is ambiguous; 6 | vector<double> d_v (sofa::Size(5), 0);; | ^; In file included from /sofa/include/Sofa.Type/sofa/type/vector.h:24,; from main.cpp:1:; /sofa/include/Sofa.Type/sofa/type/vector_T.h:78:5: note: candidate: ‘sofa::type::vector<T, MemoryManager>::vector(long int, const T&) [with T = double; MemoryManager = sofa::type::CPUMemoryManager<double>]’; 78 | vector(long n, const T& value): std::vector<T,Alloc>(n,value) {}; | ^~~~~~; /sofa/include/Sofa.Type/sofa/type/vector_T.h:76:5: note: candidate: ‘sofa::type::vector<T, MemoryManager>::vector(int, const T&) [with T = double; MemoryManager = sofa::type::CPUMemoryManager<double>]’; 76 | vector(int n, const T& value): std::vector<T,Alloc>(n,value) {}; | ^~~~~~; /sofa/include/Sofa.Type/sofa/type/vector_T.h:74:5: note: candidate: ‘sofa::type::vector<T, MemoryManager>::vector(sofa::type::vector<T, MemoryManager>::Size, const T&) [with T = double; MemoryManager = sofa::type::CPUMemoryManager<double>; sofa::type::vector<T, Memory",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2270:864,Config,Config,864,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2270,1,['Config'],['Config']
Modifiability,"The above commit only adds trivial refactoring of a (too big) function to facilitate review, nothing more, so I think it belongs here. I also agree with @matthieu-nesme about the the right way to do it, but this should be another PR to keep concerns separate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/156#issuecomment-278159229:35,refactor,refactoring,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156#issuecomment-278159229,1,['refactor'],['refactoring']
Modifiability,"The abstract class `BaseNonLinearMapping` is introduced. All mappings from the folder, except `RigidMapping`, inherit from `BaseNonLinearMapping`. The class relies on the delegate pattern to simplify the implementation of non-linear mappings. All the affected mappings relied on the same design, so it made sense to factorize common code in a base class. Breaking because I removed some aliases, made some methods final etc. What I would like for a next work is to factorize the 3 methods `buildGeometricStiffnessMatrix`, `applyDJT` and `updateK` (if possible). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5006:110,inherit,inherit,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5006,1,['inherit'],['inherit']
Modifiability,"The added function is used in a few places in plugins I would like to make available in addition to the ROS connector. It is not specifically tied to the multithreaded collision pipeline, but it is potentially useful independent of the relation to the plugins in question, and easy to patch into a core class as it introduces no further dependencies on additional modifications.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144:46,plugin,plugins,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1383#issuecomment-628533144,2,['plugin'],['plugins']
Modifiability,"The blinking test crash comes from Assembly_test.cpp:1051`createCompliantString( root, p0, p1, 2, 2.0, 1.0/stiffness, false, 1.0 );` (in Compliant plugin).; Could someone understanding this code investigate further?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379:147,plugin,plugin,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911#issuecomment-479873379,1,['plugin'],['plugin']
Modifiability,The branch is: https://github.com/SofaDefrost/sofa/tree/SofaPython3; And it also moved the SofaPython plugin to SofaPython27 dirctory (for backward-compatibility),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/23#issuecomment-284981648:102,plugin,plugin,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/23#issuecomment-284981648,1,['plugin'],['plugin']
Modifiability,"The case arises mostly because of running runSofa from a build directory but you set SOFA_ROOT. It will then tried to load plugins from the install afterwards, etc..., leading to stuff like:. ```; [WARNING] [ObjectFactory] Default template for class DynamicSparseGridGeometryAlgorithms already registered (Vec3d), do not register Vec3d as the default; [WARNING] [ObjectFactory] Class already registered: DynamicSparseGridGeometryAlgorithms<Vec2d>; [WARNING] [ObjectFactory] Class already registered: DynamicSparseGridGeometryAlgorithms<Vec3d>; ....; ```. or with a cryptic error message if you try to use the PluginManager from the GUI:; ```; [INFO] [PluginManager] Plugin not found in loaded plugins: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; [ERROR] [SofaPluginManager] plugin should be loaded: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; ```. Now, if you try to load twice the plugins (from differents paths then), it will print:; (one dll is in `build/bin/Release/` and the other one directly in `build/`; ```; [WARNING] [PluginManager] This plugin SofaNonUniformFem has been loaded from a different path, it will certainly lead to bugs or crashes...; You tried to load: ....build/bin/Release/SofaNonUniformFem.dll; Already loaded: ....\build\SofaNonUniformFem.dll; [WARNING] [PluginManager] Plugin SofaNonUniformFem is already loaded from a different path, check you configuration.; ```; The ""double information"" comes from the fact that in the end we consider the plugin as loaded ; the code afterwards will try to load the plugin nevertheless (hence having to detect twice the duplication); In the GUI code for example: https://github.com/sofa-framework/sofa/blob/71691309251177322967f53bc7a024e89c19bcbc/modules/SofaGuiQt/src/sofa/gui/qt/SofaPluginManager.cpp#L120. Obviously it is really not advised to continue to use Sofa if this case occurs but at least the user will know what is going on.; ______________________________________________________. By submitting this pull request, ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2352:123,plugin,plugins,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2352,6,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugin', 'plugins']"
Modifiability,"The case where plugin is smaller than dotExt is not handled by std::equal. See how it works: http://en.cppreference.com/w/cpp/algorithm/equal. An assert is called.; I had the case when dotExt = "".dll"" and plugin = ""PSL"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617,2,['plugin'],['plugin']
Modifiability,"The class `Simulation` has been refactored:. - It no longer inherits from `BaseObject`; - All the non-pure virtual methods have been deprecated. Instead, their equivalent are available as free functions. Indeed, the content did not need to be in a class and `DAGSimulation` did not override them.; - `sofa::simulation::setSimulation` is deprecated. The global variable `Simulation` is set once and for all in the initialization of the `Sofa.Simulation.Graph` module. ⚠️ If `new` is used to provide a new `Simulation`, it results in a memory leak, because `setSimulation` now does nothing. In summary, the type `Simulation` is now only useful to create `Node` instantiations. This feature can be done out of the Simulation class thanks to a refactoring of modules. It will be done later in another PR. Once it is done, the type could be deprecated. In this Pull Request, it is assumed that it is not possible to create another type of Simulation than `DAGSimulation`. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/350]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3889:32,refactor,refactored,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3889,4,"['inherit', 'refactor', 'variab']","['inherits', 'refactored', 'refactoring', 'variable']"
Modifiability,"The classes were used in a plugin which is no longer maintained. See https://www.sofa-framework.org/community/forum/topic/how-to-use-parallelvisitorscheduler/. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3957:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3957,1,['plugin'],['plugin']
Modifiability,"The cmake part of our build process is very slow and is getting slower and slower the more we add plugins/modules and packages.; ; I noticed that commands like include or find_package(XXXXX) imply the search, the loading and the execution of the requested package XXXX each time. . This is very problematic as this scale in an horrible (non linear) way. . So I tried a quick and dirty fix based on inclusion gard, 'à la #ifdef MYFILE_H'. I first checked if the file are really loaded multiple times (and this was the case) and implemented a quick test to stop the loading. . The fix accelerates a lot the cmake time on my machine reducing the generation from 1min20 down to 15 sec. So I'm curious to see if such solution is reliable enough to be used (I consider that if this is not the default design of cmake package there must be a rational behind) and what are the possible drawback. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1464:98,plugin,plugins,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1464,1,['plugin'],['plugins']
Modifiability,"The collision model used in LMConstraint are only compiled if the SofaDistanceGrid plugin is loaded while they shouldn't. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1819:83,plugin,plugin,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1819,1,['plugin'],['plugin']
Modifiability,"The compatibility file SofaGuiQt.h (redirecting to sofa/gui/qt/config.h) had a `#endif` without a `#if`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2044:63,config,config,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2044,1,['config'],['config']
Modifiability,"The compile definition SOFA_LIBSUFFIX is missing when compiling in Debug mode. Consequently, the loading of the SOFA plugins failed when executing ""runSofa_d"" or ""runSofa2_d"", because it tries to load the libs without considering the ""_d"" suffix in the filenames. . Here is a quick patch from me to fix the issue. But maybe it exists a better solution. Note: My CMake version is 3.14.5. ```diff; From 9ea7a808e24ad1311427e4907e179e88cf7c6acf Mon Sep 17 00:00:00 2001; From: Antonin Bernardin <antonin.bernardin@inria.fr>; Date: Fri, 20 Dec 2019 18:36:29 +0100; Subject: [PATCH] Quick fix about missing compile definition SOFA_LIBSUFFIX. ---; SofaKernel/modules/SofaHelper/CMakeLists.txt | 5 ++++-; 1 file changed, 4 insertions(+), 1 deletion(-). diff --git a/SofaKernel/modules/SofaHelper/CMakeLists.txt b/SofaKernel/modules/SofaHelper/CMakeLists.txt; index b0fd0ce828..794b0edb89 100644; --- a/SofaKernel/modules/SofaHelper/CMakeLists.txt; +++ b/SofaKernel/modules/SofaHelper/CMakeLists.txt; @@ -334,7 +334,10 @@ endif(); # since this is configuration specific it is a bit more convenient to put it as a debug compile definition for; # PluginManager.cpp, at the expense of being much less visible compare to having it in the generated; # SofaFramework/config.h; -set_property(SOURCE system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ); +#set_property(SOURCE system/PluginManager.cpp APPEND PROPERTY COMPILE_DEFINITIONS_DEBUG ""SOFA_LIBSUFFIX=_d"" ); +if(${CMAKE_BUILD_TYPE} STREQUAL ""Debug""); + add_compile_definitions(SOFA_LIBSUFFIX=_d); +endif(); set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS ""-DSOFA_BUILD_HELPER""); set_target_properties(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX ""_d""); set_target_properties(${PROJECT_NAME} PROPERTIES VERSION ""${SOFAFRAMEWORK_VERSION}""); -- ; 2.20.1; ```; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1235:117,plugin,plugins,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1235,6,"['Plugin', 'config', 'plugin']","['PluginManager', 'config', 'configuration', 'plugins']"
Modifiability,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:4,config,config,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903,1,['config'],['config']
Modifiability,"The current implementation has flawns among which:; - lack of factorization between node & object rendering in the scenegraph view;; - the use of hardcoded color scheme in simulation:Colors. Here is a small attempt to change some of these aspects without the ambition to fix everything. ; Additionally, I would like to be able to add more colors/rendering scheme for objects that are not part of the base framework and wonder if we need to implement an extension mechanism so that object defines in plugins (eg: sofapython3::BasePrefab) can propose their own icon in the scene graph. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4536:499,plugin,plugins,499,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4536,1,['plugin'],['plugins']
Modifiability,"The current lifecycle mechanism when renaming the symbol of a Data object is depreciating the old data and setting the new data as a parent of the old one : ; `_oldData.setParent(d_newData)`. This is not 100% working, because a setValue on the old data will not be applied on the new one, because a child is only link to the parent by a callback (and not a _feedForward_). This means that a lot of the recent refactoring pr renaming data symbols are breaking. This pr aims at solving this, and is meant to be applied to all the recent pr to solve this issue. ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4814:409,refactor,refactoring,409,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4814,1,['refactor'],['refactoring']
Modifiability,"The design of Intersection/Intersector is really ""special"" in the sense that:; - Intersection class is the BaseObject in the graph doing stuff; - Intersector is container of functions for canIntersect/intersect method between different primitives. And it was made such as one could add more intersect() method for new primitives for an existing ""Intersection"", e.g MinProximityIntersection and MeshMinProximityIntersection, which add triangles, etc methods to MinProximityIntersection. Note that even if it is called ""Intersection"" it is not a ""Intersection"" 🤪; There is kind of mechanism with a IntersectorCreator/IntersectorFactory which does the ""plugin"" automatically.; The problem is that the intersector gets a pointer to its intersection at the load-time (when the dll is loaded).; The intersector needs the intersection to get alarm/contact distance (defined for all Intersection) or custom parameters (useSurfaceNormal for MinProximityIntersection). **Consequence:** if there are multiple simulation (in multiple thread) in the same time, a different thread will get a pointer to an other Intersection while doing its intersect code. In the end, this PR modifies all the intersect/canIntersect functions to get the intersection method (as if they were static functions in reality) and avoid race conditions. The pipeline needs also to be modified. [The first version of this branch was using a IntersectionParameters storing alarm, contact distance and given as const ref, but it could not handle custom parameters]. Still need to be done:; - ~~compat/warnings, etc~~; - all broad/narrow phases to be modified (further PR). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Revie",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4583:650,plugin,plugin,650,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4583,1,['plugin'],['plugin']
Modifiability,The details to know:; - where (I vote for the 'salle du conseil' :)); - when (wednesday 4 ?); - who will attend to the coding sprint ? . My dream list:; - SofaNG (pluginizing the modules); - sofaqtquick (only if there is more than 2 QML expert); - Sofa code cleaning (as usual) :) ; - coding standard conformance; - we want more tests (they are crucial for refactoring) !!!; - remove & unify duplicated code (eg...how many fast marching algorithm do we need ?); - remove the not-needed includes. ; - Writing doc :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349:163,plugin,pluginizing,163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-330845349,2,"['plugin', 'refactor']","['pluginizing', 'refactoring']"
Modifiability,"The directories `screenshots` and `config` are currently created in the `build` directory of SOFA. When installing the software on a machine, those can end up in a read-only directory. . To avoid this problem, this PR changes:. On Linux:; - `screenshots` location to: `~/SOFAData/screenshots/`; - `config` location to: `~/.config/SOFA/config/` . On Windows:; - `screenshots` location to: `~/SOFAData/screenshots/`; - `config` location to: `~/AppData/Local/.config/SOFA/config/` . On MacOS:; - `screenshots` location to: `~/Library/Application Support/SOFAData/screenshots/`; - `config` location to: `~/Library/Application Support/.config/SOFA/config/` . These changes have only been tested on Linux. I'm not familiar with MacOS so I don't know what would be the best location. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5096:35,config,config,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5096,10,['config'],['config']
Modifiability,"The document is not maintained and obsolete. The relevant paragraphs are already in https://www.sofa-framework.org/community/doc/plugins/usual-plugins/multithreading/. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3667:129,plugin,plugins,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3667,2,['plugin'],['plugins']
Modifiability,The error in the tests came from (applications/plugins/LMConstraint/src/LMConstraint/LMConstraintSolver.cpp) in `init`:; ```cpp; listConstraintCorrection[i]->removeConstraintSolver(this);; listConstraintCorrection[i]->addConstraintSolver(this);; ```; The first line removed the element from the list whereas the element was never added to the list (we are in the `init` method). It is added in the second line.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-940746618:47,plugin,plugins,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2364#issuecomment-940746618,1,['plugin'],['plugins']
Modifiability,The error on the CI :. ```; J:\0\src\applications\plugins\SofaCUDA\sofa/gpu/cuda/CudaSphereModel.h(26): error: This header has been DISABLED since v23.12 after being deprecated on v23.06. To fix this error you must include SofaCUDA/component/collision/geometry/CudaSphereModel.h instead. ; J:\0\src\applications\plugins\SofaCUDA\sofa/gpu/cuda/CudaPointModel.h(26): error: This header has been DISABLED since v23.12 after being deprecated on v23.06. To fix this error you must include SofaCUDA/component/collision/geometry/CudaPointModel.h instead. ; ```. has been fixed in the PR suite Lifecycle.; This will should therefore be automatically be fixed when #4058 will be merged,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1662943647:50,plugin,plugins,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4065#issuecomment-1662943647,2,['plugin'],['plugins']
Modifiability,"The example src/applications/plugins/SofaPython/examples/keyboardControl.scn is not working anymore. . To 'fix' the example it is possible replace 'free_position' by 'position' in the keyboardControl.py pythonScriptController:; ```py; ...; 	# key and mouse events; use this to add some user interaction to your scripts ; 	def onKeyPressed(self,k):; 		; 		# free_position is a scalar array : [tx,ty,tz,rx,ry,rz,rw]; 		free_position=self.MechanicalState.free_position. 		# translation speed; 		speed = 1 . 		# UP key : front; 		if ord(k)==19:; 			free_position[0][2]-=speed; 		....; 	; 		self.MechanicalState.free_position=free_position; 		return 0 ; ```. The change of behavior happens with the merge of PR #459 ; @ChristianDuriez, @fjourdes, @EulalieCoevoet is this a regression (and thus we should fix the .cpp) or is this the normal expected behavior (and so we should just update the examples :)) ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/749:29,plugin,plugins,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/749,1,['plugin'],['plugins']
Modifiability,"The examples were about components only available into the SofaEulerianFluid plugin. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2833:77,plugin,plugin,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2833,1,['plugin'],['plugin']
Modifiability,"The extern template instantiations allows to include ` SofaCUDA/config.h` before `ObjectFactor.h`. That is why the module name is defined properly in this PR. The extern template instantiations don't act directly on the module name, just the order of includes. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4714:64,config,config,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4714,1,['config'],['config']
Modifiability,The failing scenes due to the changes in #1927 are:; - applications/plugins/MultiThreading/examples.livers.scn; - applications/plugins/MultiThreading/examples.liversMeanPositions.scn; - applications/plugins/image/examples.loadimage_mt.scn. They are all multithreaded.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756:68,plugin,plugins,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-824621756,3,['plugin'],['plugins']
Modifiability,"The following scene is crashing, he is using sofa 19.06 + STLIB + windows 10. ```python; from stlib.scene import MainHeader, ContactHeader, Node; from stlib.physics.deformable import ElasticMaterialObject. def Finger(parentNode=None, name=""Finger"",; rotation=[0.0, 0.0, 0.0], translation=[0.0, 0.0, 0.0],; fixingBox=[0.0,0.0,0.0], pullPointLocation=[0.0,0.0,0.0]):. finger = Node(parentNode, ""Finger""); eobject = ElasticMaterialObject(finger,; volumeMeshFileName=""data/mesh/quiNexistepas.vtk"",; poissonRatio=0.3,; youngModulus=18000,; totalMass=0.5,; surfaceColor=[0.0, 0.8, 0.7],; surfaceMeshFileName=""data/mesh/quiNexistepas.stl"",; rotation=rotation,; translation=translation); . return finger. ; def createScene(rootNode):; """"""This is my first scene""""""; MainHeader(rootNode, gravity=[0.0, -981.0, 0.0], plugins=[""SoftRobots""]); ContactHeader(rootNode, alarmDistance=10, contactDistance=3, frictionCoef=0.08); ; ; Finger(rootNode); ; . return rootNode; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1469:806,plugin,plugins,806,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1469,1,['plugin'],['plugins']
Modifiability,The following scenes must be fixed because they show warnings or error messages. ```; [INFO] [PluginFinder] Found 6 files with advice:; examples\Benchmark\Performance\MatrixAssembly\MatrixAssembly_direct.scn; examples\Components\linearsolver\preconditioner\FEMBAR_PCG_AsyncSparseLDLSolver.scn; examples\Components\loader\GIDMeshLoader.scn; examples\Components\solver\EulerExplicitSolver\EulerExplicitSolver.scn; examples\Components\solver\EulerExplicitSolver\EulerSymplecticSolver.scn; examples\Components\solver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\Topologi,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:94,Plugin,PluginFinder,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,2,['Plugin'],['PluginFinder']
Modifiability,"The function pluginIsLoaded is not behaving as it name suggest and does not detect plugin that have not been loaded using an absolute file path. . See: ; https://github.com/SofaDefrost/plugin.SofaPython3.deprecated/issues/137. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1615:13,plugin,pluginIsLoaded,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1615,3,['plugin'],"['plugin', 'pluginIsLoaded']"
Modifiability,The getRelativePath function is not used in the CGAL plugin so I doubt this is linked.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/264#issuecomment-300899410:53,plugin,plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/264#issuecomment-300899410,1,['plugin'],['plugin']
Modifiability,"The goal was to avoid type conversions by removing explicit types. Instead I took the rigorous returned types and added static_assert when two types are interacting. Curiously, I found out that the templated code (intersection with Sphere) is not called anywhere. Let's see if a known plugin is using it. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3287:285,plugin,plugin,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3287,1,['plugin'],['plugin']
Modifiability,"The idea is to define component Data's where they are declared, usually in the header file. See https://isocpp.org/wiki/faq/cpp11-language-classes#member-init. Pros:; - All pros described in https://isocpp.org/wiki/faq/cpp11-language-classes#member-init; - Data name, variable name and description are declared and defined at the same place. No more back and forth between the declaration and the constructor definition.; - No duplicates between Doxygen and Data description. Cons:; - A change in the definition leads to a re-compilation of the files including the header; - Does not solve https://github.com/sofa-framework/sofa/issues/274 or https://github.com/sofa-framework/sofa/issues/44. An evolution of this proof of concept will be proposed in another PR. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2613:268,variab,variable,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2613,1,['variab'],['variable']
Modifiability,"The idea is to trigger a callback after every plugin loading to permit SofaPython and SofaPython3 to check if any site-packages directory can be added to sys.path. No more manual PYTHONPATH setting should be needed with this change. To be backported in v20.12 to ease SofaPython3 usage. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1777:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1777,1,['plugin'],['plugin']
Modifiability,"The inheritance link between CollisionResetVisitor and CollisionVisitor and some other had a consequence that ProcessGeometricalData was called multiple times in the FreeMotionAnimationLoop when the free motion and the collision detection where computed in parallel. . Another issue was that we had two time the timers for the substeps of the collision detection in the case of parallel computation : IMO only the AnimationLoop should have timers for global computation made by visitors. Here I remove the one of the Pipeline. ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5042:4,inherit,inheritance,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5042,1,['inherit'],['inheritance']
Modifiability,The inheritance to DataEngine brings Components (inherits from BaseObject) within a component.; Change inheritance for DDGNode to exploit only update mechanisms.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669:4,inherit,inheritance,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1898#issuecomment-805954669,3,['inherit'],"['inheritance', 'inherits']"
Modifiability,The issue is about 'Refactor opengl rendering code' ...the CameraController is something different :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395008849:20,Refactor,Refactor,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-395008849,1,['Refactor'],['Refactor']
Modifiability,"The issue with #1913 was that Sofa.GL was added to plugin_list.conf.default ; This PR aims to clarify things between modules and plugins.; `sofa_add_plugin` will now be the ONLY macro that adds targets to plugin_list.conf.default, which totally makes sense. Also, for the record:; > Plugin = Something that CAN be loaded by the PluginManager, through a RequiredPlugin for example. The entry point of a Plugin is initExternalModule (and that name could be better).; > ; > Module = Something that CANNOT be loaded by the PluginManager. Most of the time, modules are not loaded manually, they are loaded implicitly during dependency resolution. The entry point of a Module is init (and that name could also be better).; > ; > From a CMake point of view, both Plugin and Module can be standalone packages or simple targets added to a bigger package. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1941:129,plugin,plugins,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941,6,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugins']"
Modifiability,"The line defining node gathering all the plugins was immediately closed (slash at the end); consequently, the second `</Node>` was closing the root node itself. (so the loaded scene was containing nothing). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2831:41,plugin,plugins,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2831,1,['plugin'],['plugins']
Modifiability,The macro are not used anymore in our code base and has been commented in the plugin from DEFROST. ; Maybe we could remove it (or find a way to deprecated it for some time)).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1318366581:78,plugin,plugin,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3451#issuecomment-1318366581,1,['plugin'],['plugin']
Modifiability,"The major differences I see with the private plugin SofaAsyncSolvers:. - SofaAsyncSolvers implements a base class for asynchronous solver. It replaces the usual base class `MatrixLinearSolver` using a template specialization on the third template parameter `ThreadManager`. In the usual solvers, `NoThreadManager` is used. In asynchronous solvers, a new `ThreadManager` is introduced: `AsyncThreadManager`. It does not bring anything on its own. The difference between `MatrixLinearSolver<...,...,NoThreadManager>` and `MatrixLinearSolver<...,...,AsyncThreadManager>` is only in the class implementation. This template mechanism means that it is possible to explicitly instantiate any linear solver as an asynchronous solver. In that case, it will use `MatrixLinearSolver<AsyncThreadManager>` as its base class. On the contrary, `AsyncSparseLDLSolver` introduced in this PR is not generic. It derives from `SparseLDLSolver`. It is specific to `SparseLDLSolver`.; - Because of the previous point, in SofaAsyncSolvers, asynchronous solver components are differentiated only by the template name prefix `Async`. For example, in XML, it is declared as `<SparseLDLSolver template=""AsyncCompressedRowSparseMatrixMat3x3d""/>`, compared to the synchronous solver `<SparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`. In this PR, `AsyncSparseLDLSolver` is a different component than `SparseLDLSolver` and must use the usual templates: `<AsyncSparseLDLSolver template=""CompressedRowSparseMatrixMat3x3d""/>`.; - `AsyncSparseLDLSolver` uses `std::async`, while `MatrixLinearSolver<AsyncThreadManager>` uses `boost::thread`, hence a dependency to boost. `std::async` may use a thread pool. In that case, it is guaranteed that threads waiting asynchronous tasks are not busy just waiting. I am not sure it is the case in SofaAsyncSolvers.; - In SofaAsyncSolvers, there are some references to an asynchronous matrix assembly. I don't know for sure that it is really used. Code refers to `ThreadSafeForceFie",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1046728613,1,['plugin'],['plugin']
Modifiability,The merge of the mass and the HexaFEMForceField in the followinf file doesn't seem to be useful because there exist a more classical way to do this and adds a diamond inheritance in the framework. - HexahedronFEMForceFieldAndMass; - HexahedralFEMForceFieldAndMass,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3901:167,inherit,inheritance,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3901,1,['inherit'],['inheritance']
Modifiability,"The module name is used by the PluginManager to identify a plugin. And there seems to have a need that the plugin binary filename matches the module name. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4720:31,Plugin,PluginManager,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4720,3,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,The name of the plugin has been changed.; PR can be merged.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1430#issuecomment-662326926:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1430#issuecomment-662326926,1,['plugin'],['plugin']
Modifiability,The new SceneCreator implementation requires to load plugins to work. ; To do that it calls the PluginManager...the problem is that in debug...the plugins have are not found. https://ci.inria.fr/sofa-ci/job/ubuntu_clang-3.8_options-debug/436/testReport/. Is this because of the _d suffix ? . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/463:53,plugin,plugins,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/463,3,"['Plugin', 'plugin']","['PluginManager', 'plugins']"
Modifiability,The newmat library is really old (discussion here https://github.com/sofa-framework/sofa/pull/2311). This is the last thing inheriting BaseVector/BaseMatrix which is not in Sofa.Algebra (related to https://github.com/sofa-framework/sofa/pull/2311). So the plan is to:; - deprecate LULinearSolver which needs NewMat only (not possible to use with standard Matrix); - deprecate all NewMatMatrix and NewMatVector; - (not related with algebra but) remove all usage of newmat itself here and there.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2483:124,inherit,inheriting,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2483,1,['inherit'],['inheriting']
Modifiability,"The objective is to remove all files related to Bezier High Order elements in the basic distribution of SOFA. Indeed, this content is still imature and will be provided in 2 separate plugins : SofaHighOrderTopology and SofaHighOrderFEM. In this pull request, topology classes in GeneralTopology has been removed and some associated components have been either removed or updated (to erase any link to Bezier High Order elements).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/14:183,plugin,plugins,183,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/14,1,['plugin'],['plugins']
Modifiability,The ones remaining seem to be located in image and registration plugins (examples).; That's it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-972595503:64,plugin,plugins,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1220#issuecomment-972595503,1,['plugin'],['plugins']
Modifiability,The path to the pluginManager.cpp is incomplete in the CMakeLists. Thus prefix was always empty and nod set to _d in debug mode. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1313:16,plugin,pluginManager,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1313,1,['plugin'],['pluginManager']
Modifiability,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:4,plugin,plugin,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827,1,['plugin'],['plugin']
Modifiability,"The plugin should then have its own repository. In this PR or another one, up to you @fredroy; → wait for #2813 then ready",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103700495:4,plugin,plugin,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820#issuecomment-1103700495,1,['plugin'],['plugin']
Modifiability,"The precomputed compliance matrix with `PrecomputedConstraintCorrection` component has a chance to be corrupted at each recomputation. It depends on the collision model used. ### How to reproduce ; I made a small example scene : [BugShowcase.zip](https://github.com/sofa-framework/sofa/files/5961370/PostForum.zip). - Sofa version : 20.12. - Plugins : SofaPython3. This scene uses command line arguments and SofaPython3, so I added ; ```cpp; PythonEnvironment::setArguments(SetDirectory::GetFileName(filename), arguments);; ```; in the `try{}` block of in `SceneLoaderPY3::loadSceneWithArguments` in SceneLoaderPY3.cpp (lines : 90-100). ### The solution ; I do not know, but changing the 3d model can help. Also, one can try to recompute the compliance matrix until it ""works"" and save it and reload it (with `recompute=False`).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1809:342,Plugin,Plugins,342,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1809,1,['Plugin'],['Plugins']
Modifiability,The problem is to have the uninstall function called when we need to reload the files (when the end user application is reloading). . This can be done per PythonScriptController in the 'cleanup' code. But the cost will be repeated each time a PythonScriptController is created/destructed in the scene so I'm not a big fan of it. Neither for the explicit reinit.; ; I don't understand your suggestion. A pure python solution may be to install a kind of hook in python that count the number of PythonScriptController that is created...and count the number of cleanup...and if this cleanup count is zero...it means we need to force a plugin reload. It may work but I'm not sure this is very good because creating PythonScriptController on the fly and deleting them would force module reload. . The last solution I can think abou tis to have the PythonEnvironment inheriting from BaseObject and thus...be part of the scene (automatically added in the root) ... this PythonEnvironment will thus receive a single cleanup event and do the cleaning when it deserve to. ; This solution sound conceptually ok to me if we accept that our scene contains an automatically added object.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340:631,plugin,plugin,631,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285720340,2,"['inherit', 'plugin']","['inheriting', 'plugin']"
Modifiability,"The problem is with external plugins, such as BeamAdapter, Cosserat, or SoftRobots, if they are built at the same time as SOFA, from external directories. In this case, by default, the `.so` are generated in `build/external_directories`.; I noticed that SofaPython3 automatically copies its `.so` in `lib` (or at least I believe it does ?). Another solution would be for each external plugin to do the same, but it's not the default behaviour at the moment. Regardless of what is the 'right' solution (which I'm definitely not the best to comment on), at the moment you have a different behaviour if you want to use one of these external plugins from the GUI, or in batch mode.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2927#issuecomment-1127842861:29,plugin,plugins,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2927#issuecomment-1127842861,3,['plugin'],"['plugin', 'plugins']"
Modifiability,The problem was that a failure to create a component due to template mismatch on a; pluginized object shows the pluginization message instead of template mismatch one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1332:84,plugin,pluginized,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1332,2,['plugin'],"['pluginization', 'pluginized']"
Modifiability,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:121,plugin,plugin,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901,1,['plugin'],['plugin']
Modifiability,"The purpose of this PR is to completely encapsule all OpenGL code into that plugin?; (according to the description :wink: ).; Otherwise there are some stuff from the framework/kernel, especially DrawToolGL (in good ol' opengl 2 :cowboy_hat_face: )",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499395521:76,plugin,plugin,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071#issuecomment-499395521,1,['plugin'],['plugin']
Modifiability,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637:290,variab,variable,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637,3,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"The questions of conditional compilation (plugin selection at cmake), and repository split are distinct, the idea is flying in the air, but nothing concrete, the main issue (I think) is integrating the several repositories in a single continuous integration platform, not a big deal, but it has to be done . thomas . ----- Mail original -----. > De: ""hdeling"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Cc: ""thomas-lemaire"" thomas.lemaire@inria.fr, ""Comment""; > comment@noreply.github.com; > Envoyé: Mercredi 5 Octobre 2016 17:52:58; > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > ; > OK I agree that this allows to compile Flexible without the SOFA-HighOrder.; > ; > Before moving SOFA-HighOrder to the gitHub repo, do any of you know if; > there are plans to move those plugins outside of github ?; > ; > My understanding is that at some point SOFA was going to be cut into; > several pieces that could be optionally compiled.; > ; > Is this still on the radar ?; > ; > Hervé; > ; > Le 05/10/2016 à 15:27, thomas-lemaire a écrit :; > ; > > yet an other option is to conditionnaly compile HighOrderTopology code; > > in Flexible based on whether the HighOrderTopology plugin is existing; > > or not (in cmakelists package_require(HighOrderTopology) if; > > (HighOrderTopology_FOUND) ... ):; > > - each plugin can live in its own repository; > > - no need for a third plugin; > > - should work whether all the plugins are compiled in the same cmake; > > build project or are compiled/installed separately (well; > > HighOrderTopology must be available when compiling Flexible); > > ; > > thomas; > > ; > > ----- Mail original -----; > > ; > > > De: ""Matthieu Nesme"" notifications@github.com; > > > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > > > Envoyé: Mercredi 5 Octobre 2016 13:55:09; > > > Objet: Re: [sofa-framework/sofa] Remove bezier high order (#16); > > > ; > > > Hi Hervé,; > > > ; > > > In general, I think it is a good ide",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225:42,plugin,plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-251917225,3,"['Flexible', 'plugin']","['Flexible', 'plugin', 'plugins']"
Modifiability,"The rational of the PR is sounded and the existing design in sofa that mix the base class with a kind of hardcoded singleton/registry is bad and should be refactored (thank for the PR so). . From my experience the refactoring step in such situation depends if the static part is actually implementing kind of singleton or a kind registry of instances. But in both case the refactoring consists in moving all the static methods and static attributes in a new class with the sole purpose of handle the registry/singleton. . In your PR you are moving the static method and the singleton into TaskSchedulerFactory. ; If found using ""factory"" is confusing as to me a factory's roles (and design pattern) is to map to different construction methods and not holding the created instances. In order to keep the registry separated from the factory part I recommend keeping the two concerns separated in different classes. . To me a clean layout separating implementions and concerns is the following:; ```cpp; class TaskScheduler {}; // The base class for a scheduler; class TaskSchedulerRegistry:: {}; // The class implementing a registry of taskschedulers; class TaskSchedulerFactory:: {}; // The class implementing a factory for taskscheduler; class MainTaskSchedulerRegistry::{}; // The ""static"" class which contains a singleton of a TaskSchedulerRegistry ; // and public static methods to manipulate it (with mutex in each of them) ; class MainTaskSchedulerFactory::{} // The ""static"" class which contains a singleton of a TaskSchedulerFactory; // and pubic static methods to manipulate it. ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905:155,refactor,refactored,155,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324884905,3,['refactor'],"['refactored', 'refactoring']"
Modifiability,"The remaining `else if (typeinfo->ValidInfo())` is now reverted. About the regression test results, we needed a reference (diff base) for each example we wanted to test. We chose to run regression tests on these examples :; ```; applications/plugins/SofaTest/SofaTest_test/regression/gravity.scn; examples/Components/collision/FFDDistanceGridCollisionModel.scn; examples/Components/collision/RuleBasedContactManager.scn; examples/Components/constraint/BilateralInteractionConstraint.scn; examples/Components/constraint/FixedConstraint.scn; examples/Components/constraint/FrictionContact.scn; examples/Components/forcefield/BeamFEMForceField.scn; examples/Components/forcefield/FastTriangularBendingSprings.scn; examples/Components/forcefield/TriangularFEMForceFieldOptim.scn; examples/Components/interactionforcefield/InteractionEllipsoidForceField.scn; examples/Components/topology/Mesh2PointTopologicalMapping.scn; examples/Demos/caduceus.scn; ```; We can't use regression tests without these reference files.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672:242,plugin,plugins,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171#issuecomment-283650672,1,['plugin'],['plugins']
Modifiability,"The removed line prevents referencing this plugin in another, externally built SOFA plugin.; (doing a `find_package(SofaPython)` from the CMakeLists.txt of another plugin, built as a standalone project did not work). I don't know the side-effect of simply removing this line, but I also don't see in which case this could (or should) work anyway: there is no reason to create a target during the import of a package. the targets are created at install, and loaded during the package import, not created, to my understanding. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/888:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/888,3,['plugin'],['plugin']
Modifiability,"The right syntax is the following:. ```C++; const auto visualHaptionDOFSPtr = sofa::core::objectmodel::New<sofa::component::statecontainer::MechanicalObject<sofa::defaulttype::Rigid3dTypes>>();; visualHaptionDOF = visualHaptionDOFSPtr.get();; nodeHaptionVisual->addObject(visualHaptionDOFSPtr);; visualHaptionDOF->name.setValue(""rigidDOF"");; ```. Note that this plugin has not been maintained for a long time. You should expect some changes in order to make it work. Here are some changes I made today to fix the configuration: https://github.com/sofa-framework/sofa/pull/4338. But it does not fix the compilation. If you succeed to make it work, a pull request would be very welcome ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840404388:362,plugin,plugin,362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4336#issuecomment-1840404388,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"The rigid type is registered both in applications/plugins/CollisionOBBCapsule/src/CollisionOBBCapsule/geometry/CapsuleModel.cpp and applications/plugins/CollisionOBBCapsule/src/CollisionOBBCapsule/geometry/RigidCapsuleModel.cpp. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4709:50,plugin,plugins,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4709,2,['plugin'],['plugins']
Modifiability,"The scene checker detects when we use a plugin but forgot the ""required plugin"" tag and tells us how to add it in our scene, but without closing the tag. This PR fixes the bug in the suggestion and corrects some typos in error messages in the same file. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/573:40,plugin,plugin,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/573,2,['plugin'],['plugin']
Modifiability,The scene loader should warn the user when loading a python scene (py/pyscn) without SofaPython3 plugin loaded beforehand,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2366:97,plugin,plugin,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2366,1,['plugin'],['plugin']
Modifiability,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/278:273,refactor,refactoring,273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278,3,['refactor'],"['refactor', 'refactoring']"
Modifiability,"The static variable is constructed as soon as the plugin is loaded. This could be a problem if the plugin initialization failed (SofaCUDA). This PR remove the variable for a static function. The code is called only when used. Note that this PR is temporary, waiting for https://github.com/sofa-framework/sofa/pull/4852 where this variable won't be necessary. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4883:11,variab,variable,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4883,5,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"The successor of sofaVerification is in SofaTest, look at ; plugins/SofaTest/SofaTest_test/Regression_test.h . I like small test scene that also serve the purpose of being didactic examples, it also ensures that examples are up to date since they are being tested . thomas . ----- Mail original -----. > De: ""erik pernod"" notifications@github.com; > À: ""sofa-framework/sofa"" sofa@noreply.github.com; > Envoyé: Mercredi 19 Octobre 2016 16:08:29; > Objet: [sofa-framework/sofa] Creating tests on Topological operations (#43); > ; > Hi,; > ; > several tests were already done for topological modifier, they are tested; > through scenes in examples/Components/Topology/TopologicalModifiers; > ; > They test: add/remove of topological elements; > - Is sofaVerification still used?; > - I can easily rewrite those tests in c++ using the ::Sofa_test api. Is it; > better? what is the politic between doing tests through scene or Sofa_test.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381:60,plugin,plugins,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-255038381,2,"['plugin', 'rewrite']","['plugins', 'rewrite']"
Modifiability,The thread pool is being refactored. Here are 3 pending PR:; - #3480 ; - #3482 ; - #3491,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318424915:25,refactor,refactored,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318424915,1,['refactor'],['refactored']
Modifiability,"The title is self contained : the plugins need a way to test the scenes and/or the regression, it would be great to create an action to automatize it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4265:34,plugin,plugins,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4265,1,['plugin'],['plugins']
Modifiability,"The unit test in this PR relied on `rand()`, which was seeded by `srand(time(nullptr))`. However, it means that every time the test is executed, the generated input values are different. The test is not repeatable. And sometimes, the generated values lead to singularities, which are values not supported by the tested functions.; The changes in this PR made the random generation deterministic and portable, so that the test is repeatable. We also make sure that the generated values don't lead to singularities. For more information about the singularities, see https://github.com/sofa-framework/sofa/pull/4122. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4126:399,portab,portable,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4126,1,['portab'],['portable']
Modifiability,"The use of those two step where not logical because:. 1. It only acted either on object inherited from `BaseConstraintSet` (in `buildConstraintMatrix`); 2. It was using part of the mechanical state code dedicated to Lagrangian based constraints (in `resetConstraint`). Tested the diff with ` AttachConstraint.scn`: nearly no performance change but still working. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4314:88,inherit,inherited,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4314,1,['inherit'],['inherited']
Modifiability,"The usual pattern of component classes is the following:. - A generic method is defined in the base class of the component. Since it is generic, it does not know the type of the `DataTypes` (it's not templated). Instead, it acts on `VecId`.; - In a second base class, inheriting from the first one, the `DataTypes` is known (the class is templated). Therefore, the methods can be defined to work on the right type.; - In this class, the generic method calls the template-specific one. IMO, the template-specific method should not be public. In this PR, they are moved to protected. I think also, that the generic methods can be final, but this is breaking, so I am not sure that it is a good idea to keep the final keyword. The PR starts with the `final` keyword to study the consequence on the CI. Those changes force the user to call only the generic methods. I took the opportunity to add a check on the component state in the generic methods. If the final keyword is used, it would ensure that the component state is called before each call of the public API. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943:268,inherit,inheriting,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943,1,['inherit'],['inheriting']
Modifiability,"The usual way of adding cuda support for cpu-based components was done through the SofaCUDA plugin. Many component of this plugin are compiled only if the cpu-based plugin of those components is found. This allowed to keep all the cuda-based code in the same plugin. What you propose here goes against this usual way of developing cuda based components. This has one important effect, it adds cuda-based codes in base plugins (as you did here, even if it is in sub project). Why doing it for this plugin and not the rest ?. I am not saying that what you propose is wrong, but that only one approach should be applied to the whole plugins either the old one or yours, to ease future developments. It may be interesting to discuss it with the other devs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1862893517:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395#issuecomment-1862893517,7,['plugin'],"['plugin', 'plugins']"
Modifiability,"The warning was:; ``` cmake; CMake Warning at Sofa/framework/Config/cmake/SofaMacrosInstall.cmake:1031 (message):; Deprecated macro. Use 'sofa_add_targets_to_package' instead.; Call Stack (most recent call first):; applications/plugins/image/image_gui/CMakeLists.txt:46 (sofa_install_targets); ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3359:61,Config,Config,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3359,2,"['Config', 'plugin']","['Config', 'plugins']"
Modifiability,"There are a few tests/scenes throwing the new warnings (especially with the image plugin), but this was to be expected I guess.; Strangely, I would have predicted Jenkins/gtest to consider those as ""FAILED"" (and having some additional failures in the summary) but it does not. 🤔",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2113900167:82,plugin,plugin,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4725#issuecomment-2113900167,1,['plugin'],['plugin']
Modifiability,"There are some unresolved externals in MeshGenerationFromImage.inl in the CGAL plugin. ; ```Undefined symbols for architecture x86_64:; ""_initImage()"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""_readImage(char const*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""ImageIO_alloc(unsigned long)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, sofa::defaulttype::Vec<3, float>, float>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; ""CGAL::Image_3::private_read(point_image*)"", referenced from:; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, double>, sofa::defaulttype::Vec<3, double>, double>, sofa::defaulttype::Image<unsigned char> >::update() in MeshGenerationFromImage.cpp.o; cgal::MeshGenerationFromImage<sofa::defaulttype::StdVectorTypes<sofa::defaultty",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/352:79,plugin,plugin,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/352,1,['plugin'],['plugin']
Modifiability,"There are still lots of references to this plugin in the rest of the SOFA code base, including bindings in the `image` and `PSL` plugins. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3855:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3855,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"There are too many changes for me to review this PR ;); But from a quick glance, personally I would have preferred to keep the optional ExecParams* parameter in the Data* APIs even if it is unused now. This would remove frustrations for downstream / plugin codes that could be broken by this change. One option would be to add them back with a [[deprecated]] attribute.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486:250,plugin,plugin,250,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603859486,1,['plugin'],['plugin']
Modifiability,There is a lot of code in the .h. ; Would it be possible to have the same refactoring while keeping the headers clean.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1001672501:74,refactor,refactoring,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2550#issuecomment-1001672501,1,['refactor'],['refactoring']
Modifiability,"There is a lot of commented code sine years. Is just ugly and pointless (as we have versioning system to keep old code) ...so we could spend some time to remove that during the coding spring. I know this is not a very challenging task, but it is like sweep your house...you fell so good when it is done. . (And making easy things is relaxing after hours of complex Sofa-NG refactoring). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/679:373,refactor,refactoring,373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/679,1,['refactor'],['refactoring']
Modifiability,"There is duplicated code in several function of Link.h. ; I factored that. . I also removed an #ifdef MACRO that was standing there for year and no one cares. If we plan/want to refactor this part we should do that with [[deprecated]]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1704:178,refactor,refactor,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1704,1,['refactor'],['refactor']
Modifiability,There is not a lot of contribution to make plugin from the old sofa modules. ; Here is one. . The general idea is that it should decrease compilation time and memory footprint of sofa. . This is my contribution to the issue stated by @hugtalbot in ; https://github.com/sofa-framework/sofa/issues/346. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/396:43,plugin,plugin,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396,1,['plugin'],['plugin']
Modifiability,"There is still a build problem with the ""image"" plugin. See issue #352 .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/351#issuecomment-318653165:48,plugin,plugin,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/351#issuecomment-318653165,1,['plugin'],['plugin']
Modifiability,"There was an unused variable in a frequently included header, and a missing override in another one. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/386:20,variab,variable,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/386,1,['variab'],['variable']
Modifiability,"There's a wierd issue in cmake package config that caused the paths to CImg to be inconsistent (depending on whether the build was triggered from ghprb or manually) on Defrost's CI.; It happens to be CMake's interpretation of the ""PACKAGE_"" prefix in . CImgPlugin/extlibs/CImg/CImgConfig.cmake.in that varied from one build to another.; The prefix is actually useless, since ${CIMG_INCLUDE_DIR} is already a valid and complete path, in build & install configurations. Removing the PACKAGE_ prefix solves the issue.; I flagged this PR as fast-merge since our CI @SofaDefrost does not build anything because of that.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/921:39,config,config,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/921,2,['config'],"['config', 'configurations']"
Modifiability,"These 2 classes were not compiled/used anymore for at least more than 1 year.; So I consider the ""deprecation""/""removal"" process as expired; and remove them from the SOFA codebase.; (and especially to avoid for good the confusion with helper::system::{Plugin/PluginManager}. Removed last files using these mechanism as well (some plugins); those files were not compiled so no consequence at all. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1612:252,Plugin,Plugin,252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1612,3,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugins']"
Modifiability,"These are all fixes required to correctly compile out-of-tree plugins and project. We really need to add out-of-tree CI. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1767:62,plugin,plugins,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1767,1,['plugin'],['plugins']
Modifiability,"These function allows to retrive other base object from the context and are actually duplicating a service that is already provided by BaseContext. To refactor that there was two options.; (1) keep search & searchAll and remove the getContext() (to follow Demeter's rules); (2) remove the search & searchAll and keep getContext() . Given that accessing the context seems an important feature (used for much more) , decided to do solution (2). . NB: There was more line of code in the implementation that the line of of code this functions saves. ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1842:151,refactor,refactor,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1842,1,['refactor'],['refactor']
Modifiability,"These references were not removed in; - #3960 . There should be errors like; `CMake Error: File applications/plugins/Flexible/ExternalProjectConfig.cmake.in does not exist.` occuring. 🤐. Not sure why the CI did not detect this, maybe because of CMake caches not cleaned or something like that. EDIT: seems it depend on some factors, I get ""only"" warning on other configuration; `applications/plugins/Compliant does not exist and will be ignored.`; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3980:109,plugin,plugins,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3980,4,"['Flexible', 'config', 'plugin']","['Flexible', 'configuration', 'plugins']"
Modifiability,"They are moved in an external plugin: https://github.com/sofa-framework/CSparseSolvers. Two components are impacted: `SparseLUSolver` and `SparseCholeskySolver`. The plugin `CSparseSolvers` is now fetchable. > ⚠️ `SparseLUSolver` has an equivalent using Eigen in SOFA (without the need of a plugin): `EigenSparseLU`, and `SparseCholeskySolver` equivalent is `EigenSimplicialLLT`. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/378]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/119]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258:30,plugin,plugin,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258,3,['plugin'],['plugin']
Modifiability,"This ""move"" is originally done to uncouple CGAL plugin and Image. This was done by moving Image class (along with dependencies) from Image plugin (ImageTypes.h) to CImgPlugin (CImgData.h). The point is to reduce compilation time since CImg takes less time to compile than Image.; Now Image and CGAL both depend on CImgPlugin which is lighter.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1104:48,plugin,plugin,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1104,2,['plugin'],['plugin']
Modifiability,"This CMake macro permits to create dependent options for tests that will automatically be hidden and set to OFF if SOFA_BUILD_TESTS is defined and FALSE.; If SOFA_BUILD_TESTS goes back to TRUE, the option is shown again with its old value. This way of adding a tests subdirectory should be propagated to all plugins. See [CMake documentation](https://cmake.org/cmake/help/v3.10/module/CMakeDependentOption.html) for more details. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1164:308,plugin,plugins,308,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1164,1,['plugin'],['plugins']
Modifiability,"This PR adds a ""MOVED"" status to ComponentChange, as it was only handling deprecated, removed and pluginized status. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2169:98,plugin,pluginized,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2169,1,['plugin'],['pluginized']
Modifiability,"This PR adds a CMake find module for the QGLViewer used in SOFA.GUI.Qt.; The behavior here (already in place) is to look for an external package of QGLViewer and if not found, use the embeded code of QGLViewer (which is linked dynamically).; I may have missed something but it seems that QGLViewer does not provide CMake config files (neither from source, or in package managers such as APT, Conda and vcpkg). And as SOFA was not including a CMake module for it, there was no chance for it to be found externally.; Then, this should not break current behavior but just fix the possibility to use an external GLViewer package. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4290:321,config,config,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4290,1,['config'],['config']
Modifiability,"This PR adds a `isFile` function to the FileSystem component. The PluginManager will then use this new function to test whether or not the plugin path is an existent file. @guparan Concerning your question last week (what happens if the name of the plugin is passed without a path), the previous behavior was to check if the file was a valid library file (.so, etc.), and then gather the full path from the search directories. The new behavior will first check that the file is a valid file (which won't be if only the name is passed), and then try to find it in the search directories. This should not break any old behaviors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/621:66,Plugin,PluginManager,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/621,3,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"This PR adds an attribute pathType (m_pathType) in DataFileName and DataFileNameVector to be able to easily identify whether a component holding a DataFileName accepts files, directories or both. This is useful to provide custom fileDialogs in user interfaces such as runSofa2, give more information about the type of values a dataFileName takes, and provide better error messages. To use it: in the ctor of the component, on a DataFileName datafield, call setPathType(<PathType>) (<PathType> being an enum value of either FILE, DIRECTORY or BOTH. Default value is FILE). The PathType of a DataFileName can be queried by calling getPathType(). In addition, checks are made within the updatePath() method of DataFileName, called when the value changes, to guarantee that the value set is consistent with the defined path type. Since the default pathtype is set to FILE, there are only few components that are directly affected by the pull request (AddResourceRepository is one of them (takes only directories), MeshExporters have a DataFileNameVector which can accept both directories and files. Those 2 components had to be modified to behave properly, and I've been able to identify them thanks to the existing unit tests & scene tests that we compile on the CI. There's no guarantee that there isn't any untested component that should be updated too, but the fix is easy (setPathType(WHATEVER) in the ctor of the component). Same goes for pluginized components of course. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1407:1441,plugin,pluginized,1441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407,1,['plugin'],['pluginized']
Modifiability,"This PR adds custom RPATH to handle dependencies to relocatable targets that will be installed in the ""plugins"" directory. 3 cases are handled:; - A non-relocatable library depends on a relocatable library; - A relocatable library depends on a relocatable library; - A relocatable library depends on a non-relocatable library. WARNING: note that this is a hacky fix based on the hacky RELOCATABLE ""feature"". ; TODO: rework the CMake files to replace the relocatable mechanism by something more standard. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1619:103,plugin,plugins,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1619,1,['plugin'],['plugins']
Modifiability,"This PR adds several bindings to the SOFA python's plugin that we recently needed for a project. - GUIManager: set prefix, config and screenshot directories; - RegularGrid: get the position of a given node index; - SparseGrid:; get the cube and node index in the underneath regular grid; get the position of a given node index; get the boundary cells and nodes; find the cube that enclose a given position; get the nodes indices of a given cube; - Simulation: init and unload a simulation node. Export a scene.; - SofaModule: add plugin repositories, create and set the simulation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/990:51,plugin,plugin,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/990,3,"['config', 'plugin']","['config', 'plugin']"
Modifiability,This PR adds some read/write access method for Data which can shorten slightly the syntax ; required when you want to construct a Read(Write)Accessor object for a Data. ; It extends the method implemented in commit 77ca6f2a7c2cf18a39cdad6a4a88f02ed6d9a9dd; for WriteOnlyAccessor to other types of Data Accessor.; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/450:174,extend,extends,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/450,1,['extend'],['extends']
Modifiability,"This PR adds support for Visual Studio 13 in the ci scripts. VS2013 builds (on ci) won't work without this.; As soon as the builds of every non-VS2013 configurations are ok on this branch (see https://www.sofa-framework.org/dash/index.php?branch=origin%2Fci-vs2013 ) , I believe it is save to merge.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/129:151,config,configurations,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/129,1,['config'],['configurations']
Modifiability,"This PR adds the ability to autoload plugins, i.e without the need to add ""RequiredPlugin"" in each scene file.; This is especially useful for ""essential"" plugins such as SofaPython.; For now, only SofaPython is marked as ""Autoloadable"". An other future PR will activate CImgPlugin to add image loading (and remove ImagePNG/ImageBMP from SofaKernel). ""Main"" programs just needs to add the line : ; `sofa::helper::system::PluginManager::getInstance().autoloadPlugins();`. Important Changes:; * autoload API in Plugin ""interface""; * remove hard loading of SofaPython in runSofa; * add a new commandline in runSofa to disable autoloading of plugins (enable by default); * add a test; * (not really related to the PR but could be useful) add an helper function to check if a file is a symbolic link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253:37,plugin,plugins,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253,5,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugins']"
Modifiability,"This PR adds the cmake option ""NINJA_BUILD_POOL_FLEXIBLE"" which limits the number of CPU cores used to build the Flexible target (default value: 1). Can be easily replicated to other projects as needed. ; This is only effective when using Ninja.; This will make possible to optimize the number of build threads without hitting the RAM limit on CI, but also on workstations.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/254:113,Flexible,Flexible,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/254,1,['Flexible'],['Flexible']
Modifiability,"This PR aims at correcting bugs related to the newly externalized tinyxml2 dependency in two ways : ; 1. For Windows, this corrects the FindTinyxml2.cmake to be able to find the lib and install it correctly when using the tinyxml2 lib present in the WinDepPack.; 2. For MacOS, this PR correct the rpath of the plugins linking to tinyxml2 for packaging. After this PR is closed, the installed version of tinyxml2 present on the CI builders will be remoced, and the one in the WinDepPack will be used instead (thanks to this pr: https://github.com/sofa-framework/ci/pull/48 and some manual configuration of the builders). . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4574:310,plugin,plugins,310,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4574,2,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,"This PR aims to handle in a more ""contained"" way the components implemented in different plugins to avoid having everything mixed into the ObjectFactory. . The PR is composed of two aspects. 1) **Registering components by ""plugin.classname"" instead of ""classname"" in the ObjectFactory**. The factory currently access component by their classname only causing collision when two component have the same name/template. To avoid this, the PR add the plugin name as a prefix for the Factory'key. As an exemple, a component created with *<OglModel>* in the past is now referenced as *<SofaOpenglVisual.OglModel>*. Backward compatbility is possible by adding into the factory registration an alias mapping between ; new names and old name;; Eg:; ```; ""OglModel"" => ""SofaOpenglVisual.OglModel""; ```. 2) **Importing plugin and component *à la* python**; A new component called *FromComponent* is added to handle the loading of plugin and the import of object. . Examples of use:; ```; 	 # To make only <OglModel> accessible in the scene; 	<From plugin=""SofaOpenglVisual"" import=""OglModel""/>; 	<OglModel/>. 	# To add ""custom"" name in a scene ; 	<From plugin=""SofaOpenglVisual"" import=""OglModel"" as=""RenderingModel""/>; 	<RenderingModel/>. 	# To be a super lazy man and import everything; 	<From plugin=""SofaOpenglVisual"" import=""*""/>; ```. I didn't implemented multiple object imports so currently it is necessary to do ; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel""/>; <From plugin=""SofaOpenglVisual"" import=""GlslShader""/>; ```; But we could as in python with:; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel, GlslShader""/>; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512:89,plugin,plugins,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"This PR aims to improve the way we search and load plugins. It adds:; - recursive search in PluginManager::findPlugin; - finding plugin dependencies in its directory (Windows only); - (SofaPython) function to easily edit sys.path at any plugin init; - ~~new Data in RequiredPlugin to find out-of-sofa plugins: `searchPath`~~; - new component AddPluginRepository for adding a path to the pool of plugin paths; - ~~**BREAKING**~~: rename AddResourceRepository into AddDataRepository (alias added for backward compat); - new default plugins folder in build/install to allow drag&drop. The last one shall be discussed, I'm not sure it is really needed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/913:51,plugin,plugins,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913,7,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'plugins']"
Modifiability,"This PR change the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::Vec<Type> can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) need to be updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/328:384,plugin,plugin,384,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328,1,['plugin'],['plugin']
Modifiability,"This PR changes the behavior of helper::vector to make it closer to svector; - helper::vector can parse space separated values **and** [,] separated values; - helper::vector now serialize into [,] separated string; - helper::fixed_array (and so helper::Vec<Type>) can also parse space separated values **and** [,] separated values. As a consequence the serialization/deserialization on the python side (SofaPython plugin) is updated accordingly. Now the repr() of a python object is used to serialize it into a string in the Node.createObject() method if it is not a string already. Later on, code can be cleaned-up:; - no more cat/concat/listToStr() calls needed in python code; - no more helper::svector needed in c++ code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330:414,plugin,plugin,414,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330,1,['plugin'],['plugin']
Modifiability,This PR contains a set of small changes on SofaPython that we are using in our projects. . CHANGELOG:; - [SofaHelper] add StringUtils::getStringCopy (because it was duplicated in several place of the plugin); - [SofaPython] add systematically sys.argv in PythonEnvironment; - [SofaPython] add a very general getattr function in Binding_Node (to write node1.node2.node3.obj.data); - [SofaPython] add a getTarget in BaseObject (to return the plugins that contains a component); - [SofaPython] add a getComponentsFromTarget in the Sofa module ; - [SofaPython] add some minor function in Binding_Data; - [SofaPython] add docstring support for the Sofa module; - [SofaPython] change Binding_BaseContext.getObject to return None instead of a broken exception . There is tests for all features. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656:200,plugin,plugin,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"This PR diffs against the sofa-framework::issofa_constrainsolving branch until it has been merged into master. # Objectives; - Adjust FreeMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459:441,plugin,plugin,441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459,1,['plugin'],['plugin']
Modifiability,"This PR disables all freshly pluginized modules by default except for SofaMiscCollision because it contains DefaultCollisionGroupManager. It also disables PSL by default.; Tell me if these default plugins should actually be kept. To continue testing as before (and to keep our scene tests working) I manually enable all these plugins in CI at configuration step. This will fix some failing scene tests due to missing dependency (RequiredPlugin).; Actually, the scenes with missing dependencies due to disabled plugin (plugin library not found in `bin`) should not even be tested. Some scenes like `Fluid2D.scn` and `Fluid3D.scn` could even be moved to an examples folder in `plugins/SofaEulerianFluid`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/575:29,plugin,pluginized,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575,7,"['config', 'plugin']","['configuration', 'plugin', 'pluginized', 'plugins']"
Modifiability,"This PR factorizes the code of PartialFixedConstraint by inheriting for most functions (init, draw) from the FixedConstraint; FIX #440 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/718:57,inherit,inheriting,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/718,1,['inherit'],['inheriting']
Modifiability,This PR fixes errors like `[FileRepository] File icons/back.png NOT FOUND` reported recently. These errors were caused by the fact that SofaGuiQt and runSofa had no idea were to find their resources (if not installed).; Adding and configuring some .ini files will fix that. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/758:231,config,configuring,231,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/758,1,['config'],['configuring']
Modifiability,"This PR fixes errors on the CI. 1- SofaSph; SpatialGridPointModel should be in the same module as SpatialGridContainer (i.e SofaSphFluid). SPH is 100% linked with SpatialGridContainer and SpatialGridPointModel is always used with SPH so it makes much more sense to be in the SPH plugin.; The move is registered in the ComponentChange list. 2- SofaDistanceGrid; One file was present in SofaMiscCollision (namely FrictionContact_DistanceGrid.cpp) but was never enabled because of the dependency order. Moreover, the content of this file is already in SofaDistanceGrid, more precisely in RegisterModelToCollisionFactory.cpp). So this is totally useless. NB: the two scenes using SpatialGridPointModel does not need SofaMiscCollision anymore. Fix #1897. Contains #2169 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2170:279,plugin,plugin,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2170,1,['plugin'],['plugin']
Modifiability,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/156:369,variab,variable,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156,1,['variab'],['variable']
Modifiability,"This PR fixes missing default ""plugins"" (now modules) after https://github.com/sofa-framework/sofa/pull/732. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/753:31,plugin,plugins,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/753,1,['plugin'],['plugins']
Modifiability,"This PR fixes the `init()` of RigidRigidMapping when using `globalToLocalCoords=True` (your positions are initially expressed wrt the global frame) with `repartition` (your child's positions are mapped to the parent's positions using this description). . When we look at the code, we can see that someone already fixed the `init()` but only for one of three cases. ; This PR fixes the two forgotten cases. . **EDIT**. This PR:. RigidMapping:; - adds template <Rigid3,Rigid3> with tests ; - this change required some updates/additions in RigidCoord and RigidDeriv; - cleans variables name (d_, m_), which is **breaking** . RigidRigidMapping:; - sets the component as deprecated (with instruction to fix the scene) ; - fixes `init()` when using `globalToLocalCoords=True` with `repartition` ; - adds tests; - cleans variables name (d_, m_), which is **breaking**; - adds vectors' size checks; - adds component state checks; - removes ""fake"" vectors' size checks: if the sizes mismatch it should be detected during the initialization and the component should be in an invalid state. If the sizes change during execution, it is not enough to just check the size, the component should be in an invalid state because it impacts many other things... . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3680:573,variab,variables,573,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3680,2,['variab'],['variables']
Modifiability,This PR fixes the compilation of CGAL plugin with CGAL version greater than 4.10. It also enables back the CylinderMesh component for which I'm not sure why it was removed in the first place as it seems to work perfectly. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/783:38,plugin,plugin,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/783,1,['plugin'],['plugin']
Modifiability,"This PR gives the ability to exchange images between different threads in the MultiThreading plugin. It would be especially usefull for multithreading a camera grabber component and other components (for instance computer vision algorithms). In more details: ; - It consists in adding, in the DataExchange component, exchanges of image data types (ImageUC, ImageUS, ImageF). It involves a depedency with the image plugin, handled in the CMakeLists through a preprocessor directive (WITH_IMAGE) defined in config.h.in.; - A simple example passing an image loaded from an ImageContainer component (thread 1) to an ImageViewer component (thread 2), to display the image in the GUI, is added.; - An issue with OpenGL in the draw() function in the Kinect component in the image plugin has also been fixed, by using the SOFA_NO_OPENGL directive (in the CMakeLists and in Kinect.h). Indeed, with the lib FREENECT detected, the OpenGL functions in draw() may not be compiled given the OpenGL support of SOFA. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770:93,plugin,plugin,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770,4,"['config', 'plugin']","['config', 'plugin']"
Modifiability,"This PR https://github.com/sofa-framework/sofa/pull/4935 adds a unit test showing that the inertia matrix in rigids is not working properly. After rotation of the rigid, the inertia matrix is not rotated accordingly. . You can try a 'hand-on' example with the following : . ```py; #Required import for python; import Sofa; import SofaRuntime; from Sofa import SofaLinearSolver; import numpy as np. # Function called when the scene graph is being created; def createScene(root):. root.gravity=[0,0,0]. root.addObject('VisualStyle', displayFlags=""showBehaviorModels showForceFields""). root.addObject(""RequiredPlugin"", pluginName=['Sofa.Component.Mass',; 'Sofa.Component.StateContainer',; 'Sofa.Component.Topology.Container.Grid',; 'Sofa.Component.Visual'; ]). root.addObject('DefaultAnimationLoop'); root.addObject('DefaultVisualManagerLoop'). root.addObject('RequiredPlugin', name='Sofa.Component.ODESolver.Backward'); root.addObject('RequiredPlugin', name='Sofa.Component.LinearSolver.Direct'); root.addObject('RequiredPlugin', name='Sofa.Component.Engine.Select'); root.addObject('RequiredPlugin', name='Sofa.Component.Constraint.Projective'); root.addObject('RequiredPlugin', name='Sofa.Component.SolidMechanics.FEM.Elastic'). root.addObject(RotatorController('RotatorController', name='matrixAccessor', root=root)). totalMass = 300; x_side = 0.15; y_side = 0.15; z_side = 0.7; volume = x_side*y_side*z_side; inertiaMatrix = [(y_side**2 + z_side**2)/12, 0.0, 0.0, 0.0, (x_side**2 + z_side**2)/12, 0.0, 0.0, 0.0, (x_side**2 + y_side**2)/12]. print([totalMass, volume, inertiaMatrix[:]]). root.addObject('EulerImplicitSolver', rayleighStiffness=""0.0"", rayleighMass=""0.0""); root.addObject('SparseLDLSolver', applyPermutation=""false"", template=""CompressedRowSparseMatrixd""). aligned = root.addChild(""Aligned""). aligned.addObject('MechanicalObject', template='Rigid3', position=[0, 0, 0, 0, 0, 0, 1], showObject=True,; showObjectScale=0.1); aligned.addObject('UniformMass', name=""mass"", vertexMass=[total",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4936:616,plugin,pluginName,616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4936,1,['plugin'],['pluginName']
Modifiability,"This PR improves the message about missing required plugins for python users. Before it was printing lines to cut and paste in the scene (which is really nice!), but only for xml users. Now I propose to check the scene's extension and adapt the message. Here's an example for python:. ![image](https://user-images.githubusercontent.com/12150715/173034896-f7547d53-6a99-475a-892f-b481709ed0c4.png); . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033:52,plugin,plugins,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033,2,"['adapt', 'plugin']","['adapt', 'plugins']"
Modifiability,This PR include PR #1508 and replace last use of Qwt in QGraphDataWidget by qtCharts; Remove all cmake config of Qwt and remove the internal library. should fix #1496 or make things worst!. ![graph_cg](https://user-images.githubusercontent.com/21199245/94787278-63f5ca00-03d2-11eb-8fca-80bfcd40ba29.JPG); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1512:103,config,config,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1512,1,['config'],['config']
Modifiability,"This PR introduces CMake configurations for SOFA activating and deactivating sub-parts of the project given the SOFA_CONFIGURATION string : CORE/STANDARD/FULL. . The configuration can be forced using `SOFA_FORCE_CONFIGURATION` otherwise the configuration can still be tweaked using CMake option command line. . To apply those configuration I've made two main modification depending on what needed to be activated :; - For options : I've added a CMake macro `sofa_configuration_dependent_option` that allows to specify the scope of the option and force it when needed.; - For plugins : I've modified the sofa_add_subdirectory adding the possibility to specify a `CONFIGURATION` type enabling or disabling the plugin by default depending on the config type and forcing the activation when needed. These configurations have been defined regarding the last STC discussion. . PS: This PR also enables to build Sofa.GUI without Qt. ; PPS: This PR also deactivates the legacy headers by default now; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4766:25,config,configurations,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4766,9,"['CONFIG', 'config', 'plugin']","['CONFIGURATION', 'config', 'configuration', 'configurations', 'plugin', 'plugins']"
Modifiability,"This PR introduces a way to test if concurrent simulations can run in the same time.; For now, the scenes are in XML (basically copy-paste of caduceus.scn and liver.scn). The liver test tests merely the possibility to launch multiple scenes.; The caduceus is more complex and test the whole collision pipeline, and constraint-based contacts (friction, LCP); -> this caduceus does not use MT (in the freeanimationloop) because the TaskScheduler needs a full rewrite to be thread-safe... The liver one is expected to be working but the caduceus is expected to crash (due to the intersections and constraints not being thread-safe for the moment); ""expected"" because MT usually is not really deterministic so results can vary... . The best way to make sure it works would be run the TSAN in the same time (not enabled on the CI). Remark: should the expected test to be failing be disabled by default ? or do we let the test failing ?; (The resolution in future PRs); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4580:457,rewrite,rewrite,457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4580,1,['rewrite'],['rewrite']
Modifiability,"This PR introduces collision layers, a collision filtering algorithm similar to the one used in [Unity's collsion pipeline](https://docs.unity3d.com/Manual/LayerBasedCollision.html). The overall idea is to omit collision detection for models that are in different layers. This way, each layer can be used for different functionality, e.g. cutting simulation.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4219:29,layers,layers,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4219,2,['layers'],['layers']
Modifiability,"This PR is a step-by-step version of the experiment done in https://github.com/sofa-framework/sofa/pull/1552. Currently this PR shouldn't breaking too much, the CI will tells us. Two test are failing...but this is on purpose to keep a track the breaking parts. ; The failure results from the unification of the naming schemes. ; Fixing the tests is easy, just replace the old string with the new one (int->i).; Nevertheless I suggest to fix that when whole refactoring will be over. Compared to #1552 ; - In this PR I'm re-organizing the existing Sofa code without touching its logic. The files in typeinfo/models/* are cut & past from DataTypeInfo.h. The files in typeinfo/TypeInfo_XXX.h are the DataTypeInfo<> specialization that also come from DataTypeInfo.h; - Some breaking changed are introduced to unify the naming scheme. The 'short' naming scheme is following the standard for python.array and was very close to what we already have in Sofa. . - In this PR I don't use at all the TypeInfoRegistry (expect in the test part), this is on purpose so a future PR will be able to emphasize the change on the Sofa code base (in Data.h). ; - In this PR I don't register typeinfo the registry (because it is not used yet), but I added the 'empty' files for that...it is in typeinfo/TypeInfo_xxxxx.cpp ; ; What will be done in a future PR:; - 1. fill the registry with types we are using and replace the use of VirtualTypeInfo<T>::get() in Data.h by TypeInfoRegistry::Get(T).; - 2. remove step by step the static type info and there related #includes files. ; - 3. rename all the method/enum in the static & dynamic system to unify with official naming convention. ; a. static function must start with an UpperCase; b. function returning boolean must start with a verb like IsValidTypeInfo() instead of ValidTypeInfo() ; c. add a getName()/GetName() to replace name().; - 4. replace the enum involved in the static type info system with constexpr. . EDIT: To satisfy popular demand here is more or less",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1605:457,refactor,refactoring,457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605,1,['refactor'],['refactoring']
Modifiability,"This PR is big but should finally clean all licenses in SOFA. Here is what I did:; - Fix the licenseUpdater script; - Fix wrong or missing LGPL headers in modules; - Fix wrong or missing LGPL headers in SofaKernel; **WARNING**: I found a **contaminating paste of GPL code** in LCPcalc.cpp:501 (lcp_lexicolemke function). Since I didn't found any usage of this function in SOFA (including plugins), **I removed it**. ; Please **tell me if this is OK**. Otherwise, we will have to discuss about GPL contamination.; - Fix wrong or missing GPL headers in applications/projects; - ~~Fix wrong or missing LGPL headers in applications/plugins~~ (commits removed); - ~~Fix wrong or missing GPL headers in applications/plugins: OptiTrackNatNet, SofaPML and SofaVRPNClient~~ (commits removed); - ~~Fix wrong license in SofaHAPI/initSofaHAPI:58 (should be LGPL)~~ (commits removed); - Optimize organization of LICENSE files in SOFA. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old. **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139:388,plugin,plugins,388,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139,3,['plugin'],['plugins']
Modifiability,"This PR is certainly the biggest contribution from InSimo merge sprint. ; It will be further discussed during STC#3. ## issofa_multithreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change B",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/215:207,variab,variable,207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215,1,['variab'],['variable']
Modifiability,"This PR is en enhancement of the AdvancedTimer. We have added the possibility to get two different JSON ouputs. The first one represent all informations without deep limitation and the other is easier to use but does not represent all the componants tree of the simulation. You can now use the timer in C++ and in python, change dynamically the output type of each timer separately and use the output of the AdvancedTimer to create graphs and/or compare datas from two different scene timers. You can find an exemple of JSON output here : [JSON_example.txt](https://github.com/sofa-framework/sofa/files/1200444/JSON_example.txt); And an exemple of Light JSON output here : [LJSON_example.txt](https://github.com/sofa-framework/sofa/files/1200439/LJSON_example.txt). This work was done with the help of @untereiner and @chpaulus. A documentation will come at the end of my internship. suggested tag : enhancement; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360:14,enhance,enhancement,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360,2,['enhance'],['enhancement']
Modifiability,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389:157,Plugin,Plugins,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389,5,"['Plugin', 'plugin', 'refactor']","['Plugins', 'plugin', 'plugins', 'refactored']"
Modifiability,"This PR is ready to review. It tries to solve the often called ""**static initialization order fiasco**"" by removing the use of static variables where it can be easily replaced by try catch/enum function or function's local context static variables only. While I was in this part of Sofa, I also tried to uniformize the different message formatter classes as mush as I could.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790:134,variab,variables,134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-396843790,2,['variab'],['variables']
Modifiability,"This PR is the continuation of the refactoring of Link. . Currently there is two static function to check path that are fully implemented in Link.h. The drawback of doing is that this requires:; - more #include are needed because of the full function definition.; - the #includes propagate in all the files that includes Link.h (so nearly everywhere); - as the function are implemented on templated classes this also cause a a lot of code generation (one for each template instance). . The new implementation move the implmentation out of the .h and put that into PathResolver.h. ; Bacward compatibility is implemented and flagged as deprecated. This PR also includes #1714 (to validate that the CheckPath features are still working as they were doing in the past).; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1717:35,refactor,refactoring,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1717,1,['refactor'],['refactoring']
Modifiability,"This PR is the following work on Geomagic started in PR #1366 (which is included in this one). This PR:; - Totally rewrite the GeomagicDriver init. Now, the tool is directly well placed before simulation start and doesn't need 2 or 3 simulation step to be well init.; => fix #996 . - HD (openHaptics) scheduler communication has been cleaned and fired msg_error with HD error code and description in case of problems.; => fix the possibility to handle several devices. - Clean a lot of old code not anymore used. Like the denavit matrix computation as OpenHaptics is doing it internally. ; => As a consequence, 5 or 6 Data have been removed: dh_XX; - Others changes like variable names replaced to use ""device"" or ""haptic"" instead of ""omni"". And add Doxygen documentation. - Add a component GeomagicEmulator to be able to virtually recreate device motion and interaction. See #1371; => This is almost working.. just need to do some inverse kinematics to compute the good tools transform matrix from the set of arm angles. ... I beg for help here. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1378:115,rewrite,rewrite,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1378,2,"['rewrite', 'variab']","['rewrite', 'variable']"
Modifiability,"This PR just reorder the files inside the CMakeLists but it would be a good starting point to discuss:; - how we want to reorder files in the plugin SofaCUDA. For the moment they are all in sofa/gpu/cuda/ in a big mess.; - refresh the CMakeLists for new CUDA support. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2534:142,plugin,plugin,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2534,1,['plugin'],['plugin']
Modifiability,"This PR kind of fixes #316 ; Concerning Multithreading plugin, it still would be better to get rid of Boost dependency as stated by @fjourdes in #316. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/359:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/359,1,['plugin'],['plugin']
Modifiability,"This PR links PythonLibs 2.7 to SofaPython ""the proper way"":. Until now, a target was created within SofaPython, in order to expose PythonLibs' leaders & libraries to linked projects. This led to issues when trying to link an external project to SofaPython, since the targets were not properly installed (see #888). Since there's not reason to create a separated target for PythonLibs anyway, I removed it, and simply linked PythonLibs as you would do for any other lib. It should not cause any issue to plugins using SofaPython, since PythonLibs' headers / lib are exposed publicly through the SofaPython target anyway. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/891:504,plugin,plugins,504,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/891,1,['plugin'],['plugins']
Modifiability,"This PR mainly changes SofaMacros.cmake to permit external (on another repository) projects/plugins to be automatically fetched, updated and added to SOFA. Important: this work will permit to include SofaQtQuick GUI as an external project :wink: . This is a modified version of @fredroy branch [setup_external_plugin](https://github.com/fredroy/sofa/tree/setup_external_plugin). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/649:92,plugin,plugins,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/649,1,['plugin'],['plugins']
Modifiability,"This PR makes it easier & more reliable for plugins / external projects to find paths to the ""examples/"" and the ""share/"" folders in both the build directory and install directory. The current system was filling a file (sofa.ini) for this single purpose, that GUIManager was then parsing to retrieve those paths. if another project (tests for instance) would want to retrieve those paths, they would have to first locate this sofa.ini file (which can be very tricky if not part of the SOFA project tree), parse it and add it to the DataRepository. Now, preprocessor defines holds the paths and you just have to add it to the DataRepository as such:; sofa::helper::system::DataRepository.addFirstPath(SOFA_SHARE_DIR); sofa::helper::system::DataRepository.addFirstPath(SOFA_EXAMPLES_DIR). In both cases, the paths are *absolute* which is great (and what I needed) when building an external project, but generating distributable binaries with absolute paths will not work out well...; I realise this PR is not mergeable until this issue is resolved, but don't know how to change that.; With relative paths, finding the install directory from external projects is impossible, and with absolute paths, redistribution of binaries is not feasible. . Looking fwd to your inputs!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/651:44,plugin,plugins,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/651,1,['plugin'],['plugins']
Modifiability,"This PR provides support for aliasing Eigen sparse matrices (classes derived from `EigenBaseSparseMatrix`) through scipy sparse matrices. The scipy matrix *aliases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411:755,Flexible,Flexible,755,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411,1,['Flexible'],['Flexible']
Modifiability,"This PR removes warnings caused by inconsistent use of the override keyword. While it might not remove all of them (not all plugins have been checked), it allows developers to actually fix the remaining ones rather than ignoring them because it will only generate more warnings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/423:124,plugin,plugins,124,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/423,1,['plugin'],['plugins']
Modifiability,This PR: ; - [ ] successfully compile on each configuration on the CI.; - [x] does not generates new warnings or test failure. ; - [x] does not break existing scenes.; - [x] does not break API compatibility. ; - [x] is now 1 week old.; - [x] has been reviewed and agreed to be transitional.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996:46,config,configuration,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-273725996,1,['config'],['configuration']
Modifiability,"This branch contains the coding-sprint results & associated fixing commits. . There is the commit for the base branch, the coding sprint commit, post-sprint compilation fixes et test fixing. . CHANGELOG:; - deprecating several components (see the list in deprecatingcomponents.cpp); - the SceneCreator is base on a totally new implementation. The most notable difference is that the ; SceneCreator is no more relying on component from sofa core but use the factory to create the objects. ; The API does not change but if the factory is empty (because no plugin is loaded) then the ; components cannot be not created. So If you used SceneCreator in your test you may need to pre-load the plugin or module as done in ""sofa/SofaKernel/modules/SofaImplicitOdeSolver/SofaImplicitOdeSolver_test/loadPlugins.cpp""; - Fix FileMonitor_test that were randomly failing one MacOS; - Fix DataEngine_test that was failing on Vertex2Frame. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/457:554,plugin,plugin,554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/457,2,['plugin'],['plugin']
Modifiability,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/429:943,plugin,plugin,943,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429,3,"['Plugin', 'plugin', 'refactor']","['Pluginizing', 'plugin', 'refactoring']"
Modifiability,"This class is using a common ""ugly"" design pattern often found in Sofa which mix 1) the actual object implementation, 2) is singleton exposure, and 3) a static API. . My suggestion when we see this kind of pattern is to refactor it to separate the different concerns so that the thread safetyness is not mixed with implementation. . Here is a suggested design that does not break the API (to much):; In the .h; ```; /// Tag factory is only the public API forwarding to a totally private implementation. ; class TagFactory; {; public: ; static unsigned int getID(std::string name);; static std::string getName(unsigned int id);; };. In the .cpp; ```cpp; /// Non thread safe class (and there is no reason why it should) because only the singletong should be protected.; class TagFactoryImpl ; {; public:; std::string getId(int id);; void getName(); ; };. TagFactoryImpl::TagFactoryImpl::getInstance(); {; /// ...; }. std::string TagFactory::getName(); {; lock_mutex();; getSingleton()->getName(); }. std::string Tag::Factory::getId(); {; lock_mutex();; getSingleton()->getId() ; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2942#issuecomment-1124715243:220,refactor,refactor,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2942#issuecomment-1124715243,1,['refactor'],['refactor']
Modifiability,This commit fixes compilation error while adding QtGuiInteraction plugin.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48:66,plugin,plugin,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48,1,['plugin'],['plugin']
Modifiability,"This commit fixes compilation of a basic configuration with the additional SOFA_NO_OPENGL flag being set, including compilation of Compliant and SofaPython plugins. Tested for runSofa -gui batch",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/18:41,config,configuration,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/18,2,"['config', 'plugin']","['configuration', 'plugins']"
Modifiability,"This commit fixes issue https://github.com/sofa-framework/sofa/issues/4196#issue-1912081028. ## Issue description:; Upon running ```cmake --install``` on a freshly built Sofa repo, the header files for libQGLViewer are not properly copied to the install/include directory.; First of all the install path is too long and has at least one ${PROJECT_NAME}, i.e. ""QGLViewer"" too much in the path. Also there are header files missing which are relevant for using the provided libQGLViewer in external projects/plugins. This is caused by the now modified ```Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - The last argument for the ```sofa_create_package_with_targets``` macro adds too many ```/${PROJECT_NAME}``` causing the long install path (line 118); - For some reason the ```sofa_create_package_with_targets``` macro does not copy the ```MOC_HEADER_FILES``` (line 21 ff.). ## Solution:; This PR shortens the output path and copies the contents of ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES``` which causes them to be copied to the install/include directory. This does not affect the build but ensures that all headers are copied. This was tested on Windows and two different Linux installations. I am aware that simply re-mentioning the MOC_HEADERS may look redundant, but I could not find a solution to convince the ```sofa_create_package_with_targets``` macro to also consider the MOC_HEADERS for copying. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not g",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4198:505,plugin,plugins,505,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4198,1,['plugin'],['plugins']
Modifiability,"This commit rewrites the static ODE solver, implements two additional convergence criteria, improves the documentation of every step found in the ""solve"" method, and adds useful doxygen documentation of the Newton algorithms executed by the component. Up until this commit, the only convergence criteria of the static ODE solver were absolute force residual norms, and absolute (displacement) increment norm. Using absolute values for convergence criteria means that the value set by the user is dependent on the simulation scale. For example, setting an absolute displacement norm of 1e-5 might seem enough for a liver mesh set in millimetres, but is definitely not adequate for the same liver using this time a mesh scaled in metres. This is a source of user error, and is probably why many FEM software will use relative convergence criteria. The two additional criteria are:. 1. The relative residual norm |R|/|R0| where |R| is the norm of the force vector after the last Newton iteration, and |R0| is the norm of the force vector after the first Newton iteration.; 2. The relative displacement norm |dx|/|U| where |dx| is the norm of the latest solution vector, and |U| is the norm of the sum over all previous solution vectors of the current time step. To remove any confusion between absolute and relative criteria, the convergence data field ""correction_tolerance_threshold"" and ""residual_tolerance_threshold"" were renamed for ""absolute_correction_tolerance_threshold"" and ""absolute_residual_tolerance_threshold"", respectively. Note that to keep a compatibility layer with older scene files, these old data field names are still available, but a deprecated warning is shown to the user, inviting him to update its scene. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/147]. EDIT: Fix #224. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050:12,rewrite,rewrites,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050,1,['rewrite'],['rewrites']
Modifiability,"This does the issue https://github.com/sofa-framework/sofa/issues/4845. . During this refactoring, I've stumbled upon two issues : ; 1. The first refactoring has some errors, where the new type was compatible with the old one, but not the exact one. So I fixed it. Also Sometimes the old data type was changed but only on the old symbol, which is strange and certainly made the compat layer break is used because often the two types where completely unrelated but `setParent` isn't templated so.... ; 2. This compat layer only works for `Data<T>` every types that inherits from it, will only see the original `Data<T>` methods taken into account in the compact layer. This was the case here for `DataFileName` and all `TopologicalData`. . I've decided to adopt two different strategy : ; 1. For `DataFileName` I didn't put my component and still usef the 'setParent' strategy. This is because, a priori, we won't chage a filename data during execution, this is often a given parameter, but we often use methods specific to `DataFileName`. ; 2. For the topological one, usually topological mechanisms are used in very specific classes to handle topological changes. But in a user perspective, it is often used as a classical `Data<vector<Index>>`. So What I did is use `RenamedData` on those, allowing the compat on the `Data<T>` level, but not for the topological methods which are not working anymore on the old symbol (and will create a compilation error if used)... ; ; To make it cleaner we might need to create new `RenamedData` class for all classes inheriting from `Data<T>`. Which is not the purpose of this PR. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will m",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4927:86,refactor,refactoring,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4927,3,"['inherit', 'refactor']","['inherits', 'refactoring']"
Modifiability,"This feature is working in debug mode (just tested in windows, and it allowed me to find a bug when compiling SOFA with VS....).; But as you mentioned it won't work when you will want to load a binary not suffixed with _d and trying to runSofa in debug mode (e.g it could happen that you don't have access to the debug version of a plugin but still want to debug your application). ; Basically PluginManager, if compiled in Debug mode, wants to load ""_d"" suffixed binaries. If we want to achieve that:; - remove the forced suffix ""_d"" when loading in debug mode,; - the config file must have the ""complete"" ""binary name"" and not the target name (or just add the binary name with the target name). What do you people think ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038:332,plugin,plugin,332,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-312619038,3,"['Plugin', 'config', 'plugin']","['PluginManager', 'config', 'plugin']"
Modifiability,"This first PR was initially to answer to the question how to load automatically plugins we deem ""important"" such as SofaPython. ; This PR was quite easy and fast to implement (especially because people agreed on the previous (failed :( ) PR #253 ). And it would lead to an other PR which will remove Image* things in the core of Sofa (and deps and the JPEG bug in ImageQt); Anyway, in a second time, I(?) will think about the introspection system which will be detailed in the proposal page #281",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533:80,plugin,plugins,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-308349533,1,['plugin'],['plugins']
Modifiability,"This fixes a segmentation fault I had with the SofaPython3 where the valid gui name was a python string variable. Since the GUI manager was storing a raw pointer to it, and since the python variable was later destroyed, the GUI manager was seg faulting when accessing the pointer. This PR simply creates a copy of the string instead of storing a raw pointer to it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1108:104,variab,variable,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1108,2,['variab'],['variable']
Modifiability,This fixes the problem of closing runSofa while window like pluginManager or VisitorWindow being open and not killed when main application stop. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1030:60,plugin,pluginManager,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1030,1,['plugin'],['pluginManager']
Modifiability,"This helps to configure which branch to checkout when working with embedded external plugins (also for release generation). This parameter is mandatory for an `EXTERNAL` sub directory, because default value are misleading... . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4448:14,config,configure,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4448,2,"['config', 'plugin']","['configure', 'plugins']"
Modifiability,"This is a (big) attempt to clean the dependencies management in SOFA. ## Better understand SOFA dependencies; Here is a summary: https://docs.google.com/spreadsheets/d/1dxP7Rsyl1oCr0lfTwQESeeZQTt315CIFih5QpJp5OZY/edit?usp=sharing. ## Clean dependency management in CMakeLists; - SofaFramework; - Moved to SofaHelper: Boost, OpenGL, GLEW, GTest, Eigen, JSON, FFMPEG_exec ; - Removed (not needed by any SofaFramework module): TinyXML, ZLIB ; - SofaMisc; - Added to SofaMiscTopology: ZLIB; - Added to SofaMiscFem: Newmat; - SofaGeneral; - Added to SofaDenseSolver: Newmat; - Added to SofaGeneralLoader: ZLIB; - SofaGui; - Moved to SofaGuiQt: Qt + lots of options about QtViewer, QGLViewer, VSync, ...; - Modularized modules (oh yeah); - SofaPreconditioner: removed Newmat, added SofaSparseSolver; - SofaExporter: added ZLIB; - Plugins; - SofaMiscCollision: added SofaDistanceGrid; - SofaImplicitField: added SofaPython; - Registration: removed SofaOpenglVisual; - image: added ZLIB; - Flexible: added SofaPython. ## Rework all YYY_HAVE_XXX variables to reduce their scope. This is important for future global modularization of SOFA. - Variables are now named upon their module. . - Whenever you need to use the YYY_HAVE_XXX of another module, you surely should declare your own MYMODULE_HAVE_XXX instead. - All those new YYY_HAVE_XXX variables are booleans, so they can be used in CMake with `if(YYY_HAVE_XXX)` and in C++ (if correcly propagated via a config.h.in file) with `#if YYY_HAVE_XX` or `if(YYY_HAVE_XXX)`. - Add sofa_find_package and sofa_set_bool macros to auto create YYY_HAVE_XXX variables. - Edit sofa_install_targets to call `configure_file()` on any *.h.in found in target sources (the sources that are given to `add_library()`). :warning: Here is a quick tuto about [how to correctly add and propagate a dependency](https://gist.github.com/guparan/0b0ed00ad60b740f85b794cdff255229). ## Rework #1121 to avoid nested projects. - Use SOFA_NO_OPENGL to build an OpenGL-free version of SofaGu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1137:824,Plugin,Plugins,824,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1137,2,"['Flexible', 'Plugin']","['Flexible', 'Plugins']"
Modifiability,This is a basic fix when compiling sofa with Visual Studio 2015 and using the QWT plugin; last() is replaced by back() for deque. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/935:82,plugin,plugin,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/935,1,['plugin'],['plugin']
Modifiability,"This is a small correction to fix the compilation of the Sensable plugin. Also, any idea why we keep the OmniDriver when there is a NewOmniDriver available?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/22:66,plugin,plugin,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/22,1,['plugin'],['plugin']
Modifiability,This is a subset of PR #1492 which aims at merging changes from old branch collodi.; This one only concerns some change done in Compliant plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1557:138,plugin,plugin,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1557,1,['plugin'],['plugin']
Modifiability,"This is a tentative to refactor `TetrahedronFEMForceField` for better readability. All the FEM methods have been dispatched into dedicated files. The methods are now classes sharing the same interface (polymorphism), called by the component. Advantages:; - `TetrahedronFEMForceField` is smaller; - `TetrahedronFEMForceField` had many similar codes (often identical). This is now avoided as all common code are in the base classes.; - It is easier to read the differences between the different FEM methods.; - We could imagine having a factory of FEM methods for `TetrahedronFEMForceField`. Then, the component could be extended in plugins by adding more methods into the factory. To do:. - [ ] Clean; - [ ] Move some class members from `TetrahedronFEMForceField` to `TetrahedronFEMForceFieldImpl`; - [ ] Restore initial performances; - [ ] Fix broken features such as drawing rotations; - [ ] If everyone agrees, remove the assembled methods. It adds complexity while the resulted matrix is not used.; - [ ] Adapt (if necessary) the derived classes (multithreading, CUDA etc). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2550:23,refactor,refactor,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2550,5,"['Adapt', 'extend', 'plugin', 'polymorphi', 'refactor']","['Adapt', 'extended', 'plugins', 'polymorphism', 'refactor']"
Modifiability,"This is a test to use Callbacks instead of inheriting from ```TopologyHandler```. - Callback have been added inside ```TopologyDat``` a to define specific method when creating/destroying element (call by remove/add). See ```TriangularFEMForceField``` for an example; - Map of Callback has been added inside TopologyHandler to set specific callback depending on the topology event. See ```TriangularBendingSprings``` as an example which handle Edge but also Triangle removing/adding. To discuss if this is better than inheriting from ```TopologyHandler```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2036:43,inherit,inheriting,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2036,2,['inherit'],['inheriting']
Modifiability,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471:90,refactor,refactoring,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471,2,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,"This is a way to explicit the narrowing conversions in SOFA. Instead of using the classic `static_cast`, this function can check if the value changed after the cast. It can happen in case of narrowing conversion, when the target type is smaller than the source type.; Since the check must be performed at run-time (affects the performances), it is enabled only in DEBUG mode. The idea is to use this cast everywhere the compiler warns about possible data loss and it's not possible to avoid a narrow conversion (e.g. by adapting both target and source types). An example is provided in this PR in `MeshGmsh`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2590:520,adapt,adapting,520,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2590,1,['adapt'],['adapting']
Modifiability,This is an attempt to refactor from PR #332 to make it non breaking. . No need for review now this is in WIP. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/596:22,refactor,refactor,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/596,1,['refactor'],['refactor']
Modifiability,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:46,inherit,inheriting,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479,2,['inherit'],"['inheriting', 'inherits']"
Modifiability,"This is connected to the PR #771 about having a python 3.x version of SofaPython, refactor it and rewrite pybind11. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/808:82,refactor,refactor,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/808,2,"['refactor', 'rewrite']","['refactor', 'rewrite']"
Modifiability,"This is more or less done with:; - the isolation of the SofaOpenGlVisual (and Sofa.GL); - anything else than components of SofaOpenGlVisual now use only DrawTool (well... I am sure exceptions exist 😒). A good application of this refactor task is the RHI plugin, which provides an other implementation of DrawTool and RhiModel (instead of OglModel). . Closing for now, if anybody wants to add something, one can re-open it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524:229,refactor,refactor,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-774151524,2,"['plugin', 'refactor']","['plugin', 'refactor']"
Modifiability,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:203,refactor,refactor,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638,1,['refactor'],['refactor']
Modifiability,"This is required by the plugin manager when writing and reading in an ini file. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2948:24,plugin,plugin,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2948,1,['plugin'],['plugin']
Modifiability,"This is the first PR of a long series concerning ISSofa (InSimo) commits merge.; This branch has to be merged first because it is the base branch of all further integrations.; It contains mostly SofaPython commits and also some CI and environment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit te",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171:685,extend,extended,685,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171,1,['extend'],['extended']
Modifiability,"This is the return of PR https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190:614,extend,extended,614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190,1,['extend'],['extended']
Modifiability,"This is the second step of removal of Base* inclusion in Node.h ; This is made possible by all the PR that layed out the fwd stuff and Link refactoring. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1765:140,refactor,refactoring,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1765,1,['refactor'],['refactoring']
Modifiability,"This is the the third step of my LockOut refactoring effort for Sofa. In PR#1283 we have refactored the reflection system. We can now clean the DDGNode to cut the un-needed dependencies. ; DDGNode needed to be part of reflection system because it was storing its inputs and ouputs with Links. It is unclear what the link data structure was needed for and storing the input and output with a more classical data structure (a stable_vector) remove the needs to have DDNode be part of the reflection system...so remove a lot of un-needed code. . Exemple of needed but in face un-needed code that are now removed:; ```cpp; /// This method is needed by DDGNode; const std::string& getName() const override; {; static const std::string emptyName ="""";; return emptyName;; }; /// This method is needed by DDGNode; objectmodel::Base* getOwner() const override { return nullptr; }; /// This method is needed by DDGNode; objectmodel::BaseData* getData() const override { return nullptr; }; ```; ; Some code was added in BaseData. This is because these code was in-herited from DDGNode and are now not provided anymore. The code cannot be removed because BaseData is still used in Links and thus, still required to implement the reflection system...removing that is for an incoming PR. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1372:41,refactor,refactoring,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1372,2,['refactor'],"['refactored', 'refactoring']"
Modifiability,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453:123,plugin,pluginization,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453,1,['plugin'],['pluginization']
Modifiability,"This is to fix SOFA configuration without Qt; Not 100% sure of the change inside the cmake.in. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3423:20,config,configuration,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3423,1,['config'],['configuration']
Modifiability,"This is weird, this should not happen if the plugin was loaded (i.e thanks to ""-l SofaPython3""on the command line); Can you post the entire log when you execute runSofa ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1788253936:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1788253936,1,['plugin'],['plugin']
Modifiability,This issue is following a dev-meeting discussion about putting much more of the sofa components into plugins. . This issue is to continue the discussion and keep a trace.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/128:101,plugin,plugins,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/128,1,['plugin'],['plugins']
Modifiability,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. The image plugin supports the python plugin, but does not require it. However, when linking the image plugin into an external project by using the install path of sofa, the image plugin lists the python plugin as a required dependency. CMake will then return the following error:. ```; CMake Error at CMakeLists.txt:50 (find_package):; Found package configuration file:. /.../sofa/build/install/lib/cmake/image/imageConfig.cmake. but it set image_FOUND to FALSE so package ""image"" is considered to be NOT; FOUND. Reason given by package:. The following imported targets are referenced, but are missing: SofaPython. -- Configuring incomplete, errors occurred!; ```. To reproduce the bug; 1. Compile SOFA with the image plugin activated, but without python plugin; 2. Lauch cmake on an external project and add the image plugin as a dependency; `find_package(image REQUIRED)`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/135:117,plugin,plugin-with-dependancy-to-skeleton-h-does-not-compile,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/135,11,"['Config', 'config', 'plugin']","['Configuring', 'configuration', 'plugin', 'plugin-with-dependancy-to-skeleton-h-does-not-compile']"
Modifiability,"This issue was first discovered by @rosaliepl : https://www.sofa-framework.org/community/forum/topic/error-with-cimg-plugin-with-dependancy-to-skeleton-h-does-not-compile/#post-8397. When installing SOFA's image plugin (ex.: make install), the image plugin installation does not preserve the file's hierarchy which will failed the compilation of any external project that includes the SOFACImg.h file. `/.../sofa/build/install/include/CImg/CImg.h:9341:21: fatal error: plugins/skeleton.h: No such file or directory`. If we look in the installation folder (sofa/build/install), all the required headers are in include/CImg instead of include/CImg/plugins which will then failed the compilation. To reproduce the bug. 1. Compile and install SOFA with the image plugin activated; 2. Create an external project with the image plugin as a requirement, and add the following line in any of the source file: `#include <CImg/SOFACImg.h>`",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/136:117,plugin,plugin-with-dependancy-to-skeleton-h-does-not-compile,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/136,7,['plugin'],"['plugin', 'plugin-with-dependancy-to-skeleton-h-does-not-compile', 'plugins']"
Modifiability,"This line is the origin of our problem: https://github.com/sofa-framework/sofa/blob/9c85b17b55f4cd1a14927090754004aaba51b802/SofaKernel/framework/sofa/helper/system/PluginManager.cpp#L103; This line was creating entries in m_pluginMap because pluginPath is not always a path.; It is not a path when we are reading ""plugin_list.conf.default"" file to auto-load plugins at startup. This PR adds getPlugin method to avoid future operator[] mishandlings. It gets a loaded plugin by paths OR names (even if the map is based on paths). Conclusion: **`operator[]` on maps should be globally avoided for read access**. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/580:165,Plugin,PluginManager,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580,4,"['Plugin', 'plugin']","['PluginManager', 'plugin', 'pluginPath', 'plugins']"
Modifiability,"This may be outdated answer ... but isn't that because SofaNonUniformFEM plugin is missing ? ; I don't know what was its status back in july 2022 but at present time (april 2023) ; SofaNonUniformFEM is now ""Sofa.Component.SolidMechanics.FEM.NonUniform""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110#issuecomment-1499149075:73,plugin,plugin,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110#issuecomment-1499149075,1,['plugin'],['plugin']
Modifiability,This member was an error prone copy of `PluginRepository::vpath`.; PluginManager is now always in sync with PluginRepository. AddPluginRepository component has no effect without this change. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/947:40,Plugin,PluginRepository,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/947,3,['Plugin'],"['PluginManager', 'PluginRepository']"
Modifiability,"This merge is not possible. Hervé, first you have to know your own fork (or a more global fork you could create for asclepios) can be compiled in the sofa continuous integration system. To include your work about high order topology in the sofa-public w/o breaking existing stuff, my suggestion is to create a new plugin in your fork, then to propose it here as a pull request. Once you'll have created the PR, we'll be able to possibly fix the glue with Flexible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969:314,plugin,plugin,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/16#issuecomment-263809969,2,"['Flexible', 'plugin']","['Flexible', 'plugin']"
Modifiability,"This might be used in some CUDA private plugins, could you confirm this to us @ziqiu-zeng @courtecuisse ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1378487718:40,plugin,plugins,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1378487718,1,['plugin'],['plugins']
Modifiability,This one will definitely need multiple checking and maybe local tests with your own plugins / versions of SOFA for obvious security reasons :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981:84,plugin,plugins,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-606568981,1,['plugin'],['plugins']
Modifiability,"This package is needed by plugins when building tests out-of-tree. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2511:26,plugin,plugins,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2511,1,['plugin'],['plugins']
Modifiability,"This part of Sofa.GUI (main codebase):; - is an option in Sofa.GUI (strongly non-recommended in Sofa nowadays); - need X11 libs (so being deprecated with the arrival of Wayland); - almost 99.9% restricted to Linux due to X11; - has replacement (https://github.com/jnbrunet/SofaOffscreenCamera among others); - is not compiling 😂. So IMO it was time to make it a plugin (as in, being in `applications/plugins`); Due to all recent implemented mechanisms, it was quite straight-forward and almost as easy as simply cut-pasting into the new folder. IMO 2, I would even directly put it into an external fetchable plugin. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4928:362,plugin,plugin,362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4928,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185:5,plugin,plugin,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"This plugin has been left unused for a long time now, closing the issue.; Feel free to re-open if need be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2023#issuecomment-1499798319:5,plugin,plugin,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2023#issuecomment-1499798319,1,['plugin'],['plugin']
Modifiability,"This pull request aims at making the gravity clearly appearing in object nodes as a GravityForceField.; Old way to define gravity still works and is not deprecated. Main changes:; - By implementing this, the Mass is not inheriting from ForceField anymore.; - The optional mechanism of a separate gravity and the **Gravity** class are also deprecated.; - Default gravity is now 0 (therefore some scenes might fail and need an update). The GravityForceField can:; - either be manually added by the user in the node; - or the gravity can still be globally defined in the root node which will create the automatic creation of a GravityForceField for each mass in the graph. Fix: #2683. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/305]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/56]; [ci-depends-on https://github.com/sofa-framework/ci/pull/18]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988:220,inherit,inheriting,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988,1,['inherit'],['inheriting']
Modifiability,"This pull request enhances the Operation::createPerformer function to provide more detailed error messages when it fails to create an InteractionPerformer. The function now includes precise diagnostic messages that indicates where the failure occurred, improving the ease of debugging and maintaining the code. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4880:18,enhance,enhances,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4880,1,['enhance'],['enhances']
Modifiability,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222:123,plugin,plugin,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222,2,['plugin'],['plugin']
Modifiability,"This scene using the Mouse interaction (*Edit->MouseManager-> attach with bilateral constraint*) illustrates the bug @alxbilger : . ``` xml; <?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <RequiredPlugin pluginName=""Sofa.Component.Constraint.Projective Sofa.Component.LinearSolver.Iterative Sofa.Component.Mapping.Linear Sofa.Component.Mass Sofa.Component.ODESolver.Backward Sofa.Component.SolidMechanics.FEM.Elastic Sofa.Component.StateContainer Sofa.GL.Component.Rendering3D Sofa.Component.Topology.Container.Dynamic Sofa.Component.IO.Mesh Sofa.Component.Constraint.Lagrangian.Solver Sofa.Component.Constraint.Lagrangian.Correction Sofa.Component.Collision.Response.Contact Sofa.Component.Collision.Geometry Sofa.Component.Collision.Detection.Intersection Sofa.Component.Collision.Detection.Algorithm Sofa.Component.AnimationLoop"" />; <DefaultVisualManagerLoop/>. <FreeMotionAnimationLoop />; <!-- <LCPConstraintSolver tolerance=""0.001"" maxIt=""1000""/> -->; <GenericConstraintSolver tolerance=""0.001"" maxIterations=""1000"" />. <DefaultPipeline name=""CollisionPipeline"" verbose=""0"" />; <BruteForceBroadPhase/>; <BVHNarrowPhase/>; <DefaultContactManager name=""collision response"" response=""FrictionContactConstraint"" />; <DiscreteIntersection/>. <MeshOBJLoader name=""LiverSurface"" filename=""mesh/liver-smooth.obj"" />. <Node name=""Liver"" gravity=""0 -9.81 0"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <CGLinearSolver name=""linear solver"" iterations=""25"" tolerance=""1e-09"" threshold=""1e-09"" />; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" geometryState=""@dofs"" topology=""@topo""/>; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1169794916:232,plugin,pluginName,232,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-1169794916,1,['plugin'],['pluginName']
Modifiability,This should fix CMake errors like `file cannot create directory: C:/softwares/sofa-soft-build/$C:/softwares/sofa-soft-install/plugins/SofaMiscCollision/lib` on Windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1154:126,plugin,plugins,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1154,1,['plugin'],['plugins']
Modifiability,This should fix failing scene tests due to issofa_plugin merge ; Failures were due to wrong `plugin_list.conf` path implying no plugin loading. Added some output to understand better were this list is loaded from (especially in case of failure). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502:128,plugin,plugin,128,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502,1,['plugin'],['plugin']
Modifiability,"This tests may be merged before refactoring otherwise it is harder to keep track of API changes. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1714:32,refactor,refactoring,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1714,1,['refactor'],['refactoring']
Modifiability,"This variable can be confused with another with the same name, also with; internal linkage. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1956:5,variab,variable,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1956,1,['variab'],['variable']
Modifiability,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/490:302,plugin,plugins,302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490,5,"['config', 'plugin', 'variab']","['config', 'plugin', 'plugins', 'variables']"
Modifiability,"This was preliminary introduced in SofaGLFW/SofaImgui, where a new GUI is loaded at run-time; Contrary to the batch/qt/headlessrecorder GUIs which are forcefully linked at compile-time through SofaGui, which could depend (or not) on Qt, etc according to the CMake config,. SOFANG works already made all the different GUIs as independent libraries but ultimately the SofaGui was still present because of the fact that runSofa was still relying on this mechanism. Now :; - Qt/Batch/HeadLessRecorder are loadable plugins and register themselves in the GUIManager, if loaded .; - Batch is still forcefully loaded by runSofa ; otherwise it could be possible to run SOFA without any GUI (I am not against having this possibility tho); - SofaGui is officially deprecated 🎇. Remarks: ; - after this PR, I would really like to move HeadlessRecorder in applications/plugins (either that in the ""official"" SOFA trunk) as it is only supported on Linux, needs X libs dev and I dont even know if people really uses it.; - showing help will only show the help for the runSofa options not the ones introduced by the eventual plugins....; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3550:264,config,config,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3550,4,"['config', 'plugin']","['config', 'plugins']"
Modifiability,"This was preventing us from making compatibility layers in our plugins (i.e targeting master vs v20.12). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1771:49,layers,layers,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1771,2,"['layers', 'plugin']","['layers', 'plugins']"
Modifiability,"This will contain all the macros/configuration headers needed by all Sofa (config.h, etc); For now, those things are contained are in:; - SofaFramework; - SofaHelper; - Sofa (at the root); - maybe somewhere else ?; ; It will solve the issue raised at #1661",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1667:33,config,configuration,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1667,2,['config'],"['config', 'configuration']"
Modifiability,"This will contain all the matters about testing (things in SofaHelper, gtest, tools/gtestmain) and make things clearer.; And it will be also a first step for a refactoring of all about testing (deprecated SofaTest, etc)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1827:160,refactor,refactoring,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1827,1,['refactor'],['refactoring']
Modifiability,"This won't be enough. All bindings made for SofaPython fail when building in C++17.; ```; [1208/2186] Building CXX object modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; FAILED: modules/SofaExporter/CMakeFiles/SofaExporter.dir/src/SofaExporter/bindings/Binding_STLExporter.cpp.o; < ... >; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.cpp:24:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/modules/SofaExporter/src/SofaExporter/bindings/Binding_STLExporter.h:25:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonMacros.h:29:; In file included from /media/jenkins/sofa-ci-dev/workspace/sofa-framework/PR-1284/ubuntu_clang-6_options_release/src/applications/plugins/SofaPython/../SofaPython/PythonCommon.h:27:; In file included from /usr/include/python2.7/Python.h:88:; /usr/include/python2.7/unicodeobject.h:534:5: error: ISO C++17 does not allow 'register' storage class specifier [-Wregister]; register PyObject *obj, /* Object */; ^~~~~~~~~; ```; See https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1284/CI_CONFIG=ubuntu_clang-6,CI_PLUGINS=options,CI_TYPE=release/2/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480:857,plugin,plugins,857,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1284#issuecomment-603846480,2,['plugin'],['plugins']
Modifiability,Those Configurations are also meant to be used by the CI to easily set the type of build. The full build will be the one used for PR and Releases. While plugin will be deactivated by the bash script depending on the installed dependencies on the OS.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645:6,Config,Configurations,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4766#issuecomment-2150330645,2,"['Config', 'plugin']","['Configurations', 'plugin']"
Modifiability,"Those macro are needed if you are trying to enhance the gui from your plugin linking with SofaGuiQt. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2555:44,enhance,enhance,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2555,2,"['enhance', 'plugin']","['enhance', 'plugin']"
Modifiability,"Title says all, forgotten lines and mess with the generated variables (dot and underscore) in SofaFrameworkConfig.cmake.in (and Sofa.GLConfig.in); Fix out-of-tree compilation (tested with Py3) which could not find GLEW::GLEW target. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1911:60,variab,variables,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1911,1,['variab'],['variables']
Modifiability,"To answer directly the question of @epernod , yes 🫠. I think it was designed to mimic https://cmake.org/cmake/help/latest/module/FetchContent.html (kind of), at a time where it did not exist in CMake yet ; as `ExternalProject_Add` https://cmake.org/cmake/help/latest/module/ExternalProject.html have existed since much longer time ago (CMake 3.0 ?). Now that it is been introduced few years from now (2018 I think), I think the `ExternalProject_Add` mechanism should be phased out and replaced by the `FetchContent` one.; It would save the problem of getting the source being pulled into the source dir of SOFA (hence the .gitignore file); **AND** also the problem of plugins' updates, as (normally) the cmake configure step updates the source (except if `FETCHCONTENT_UPDATES_DISCONNECTED` is set)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1886033453:668,plugin,plugins,668,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1886033453,2,"['config', 'plugin']","['configure', 'plugins']"
Modifiability,To be further discussed with @epernod @fredroy ; Question arose from the code: https://github.com/sofa-framework/BeamAdapter/blob/master/src/BeamAdapter/component/mapping/AdaptiveBeamMapping.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3473:171,Adapt,AdaptiveBeamMapping,171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3473,1,['Adapt'],['AdaptiveBeamMapping']
Modifiability,"To be merged **after** https://github.com/sofa-framework/sofa/pull/3928. Close #3001 and implement it again (move of all files made it too complex to pursue). - Deprecation of the DiagonalMass; - Making it as an inherited class from MeshMatrixMass. **TODO (in this PR)**; - [x] add deprecation macros in CPU and GPU codes (`SOFA_DEPRECATED_HEADER`); - [x] ~~Add callback on lumping to warn user~~ (in another PR); - [x] ~~edge implementation to backport in MMM~~ (not meaning ful, see below patch); - [x] rename the *DiagonalMass.scn* example and use MeshMatrixMass; - [x] specific removed-deprecation macros for RigidTypes: specialized class DiagonalMass for Rigid with a `parse()` function warning for user & deprecation for devs; - [x] assess again performances; - direct; - Diagonal-buildMassMatrix = 0.57%; - MeshMM-buildMassMatrix = 0.57%; - iterative; - Diagonal-addMDx = 0.45%; - MeshMM-addMDx = 0.70% -- 0.47% without the if condition for graph plotting; - TORUS Fall scene over 10 000 steps; - DiagonalMass; LEVEL	 START	 NUM	 MIN	 MAX	 MEAN	 DEV	 TOTAL	PERCENT	ID; 9 	 2.54	 1 	 0.01	 0.12	 0.01	 0 	 0.01	 0.19	.........DM-buildMassMatrix; - MeshMatrixMass lumped; LEVEL	 START	 NUM	 MIN	 MAX	 MEAN	 DEV	 TOTAL	PERCENT	ID; 9 	 2.44	 1 	 **0.0**	 **0.04**	 0.01	 0 	 0.01	 **0.18**	.........MMM-buildMassMatrix; - [ ] update all scenes ( `<DiagonalMass` :arrow_right: `<MeshMatrixMass lumping=""1""` ). **TODO (after this PR)**; - deprecate XspLoaders (see #4003). **NOTE** ; Rigid cases previously handled by the DiagonalMass are not anymore, therefore breaking.; Regarding the absence of use of xs3 formats for rigid bodies and the starting project coupling Pinocchio which should bring a more robust description/handling of rigid bodies, I would advocate to :; - deprecated associated components (XspLoader, MeshXspLoader and their impact on RigidMapping, SpringFF, VectorSpringFF) ; - take this opportunity to clean and replace OldTutorials coming with it with new ones. _________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3912:212,inherit,inherited,212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3912,1,['inherit'],['inherited']
Modifiability,"To define regions of an object where materials are different, I thought about using sub-topologies, defined using BoxROI. ```xml; <?xml version=""1.0"" ?>; <Node name=""root"" dt=""0.005"" showBoundingTree=""0"" gravity=""0 -9 0"">. <Node name=""plugins"">; <RequiredPlugin name=""Sofa.Component.AnimationLoop""/> <!-- Needed to use components [FreeMotionAnimationLoop] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Correction""/> <!-- Needed to use components [LinearSolverConstraintCorrection] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Solver""/> <!-- Needed to use components [GenericConstraintSolver] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Projective""/> <!-- Needed to use components [FixedProjectiveConstraint] -->; <RequiredPlugin name=""Sofa.Component.Engine.Select""/> <!-- Needed to use components [BoxROI] -->; <RequiredPlugin name=""Sofa.Component.LinearSolver.Direct""/> <!-- Needed to use components [SparseLDLSolver] -->; <RequiredPlugin name=""Sofa.Component.LinearSystem""/> <!-- Needed to use components [ConstantSparsityPatternSystem] -->; <RequiredPlugin name=""Sofa.Component.Mass""/> <!-- Needed to use components [MeshMatrixMass] -->; <RequiredPlugin name=""Sofa.Component.ODESolver.Backward""/> <!-- Needed to use components [EulerImplicitSolver] -->; <RequiredPlugin name=""Sofa.Component.SolidMechanics.FEM.HyperElastic""/> <!-- Needed to use components [TetrahedronHyperelasticityFEMForceField] -->; <RequiredPlugin name=""Sofa.Component.StateContainer""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Dynamic""/> <!-- Needed to use components [TetrahedronSetGeometryAlgorithms,TetrahedronSetTopologyContainer,TetrahedronSetTopologyModifier] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Grid""/> <!-- Needed to use components [RegularGridTopology] -->; <RequiredPlugin name=""Sofa.Component.Topology.Mapping""/> <!-- Needed to use components [Hexa2TetraTopologicalMapping] -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4706:235,plugin,plugins,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4706,1,['plugin'],['plugins']
Modifiability,"To experiment a new handling of sparse matrices under mappings in our plugin, a few changes are needed in the core of SOFA.; Main changes:; - Add a new function in MechanicalObject (commit 6a6fd98).; - Refactoring of MatrixDerivId: warning holonomicC() is deprecated --> replaced by constraintMatrix (commit 966f9af).; - Change allocation in createMatrix from a fullMatrix to a sparseMatrix.; Linked to #26 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/276:70,plugin,plugin,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276,2,"['Refactor', 'plugin']","['Refactoring', 'plugin']"
Modifiability,To fix the last test I had to be able to detect that some data are child of BaseImage. So I have added inheritance mecanism in the DataTypeInfoWrapper.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330:103,inherit,inheritance,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605#issuecomment-729713330,1,['inherit'],['inheritance']
Modifiability,"To me compiler's specific default configuration shouldn't have consequence in our code base and we shouldn't design software architecture *because* of a specific compiler issue (which is actually not an issue..because it is something that can be change with command arguments). Compiler's options exists to be used and so I see no problem in using them. . Said differently, setting compiler's option in the CMake to have more inlining is much more legitimate ""and the good way"" than putting ""inline"" in front of every declaration. . EDIT: what surprise me is that this seems related to inlining... while I would have bet it would be more related to LTO/GO.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3343#issuecomment-1265270806:34,config,configuration,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3343#issuecomment-1265270806,1,['config'],['configuration']
Modifiability,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:524,plugin,plugin,524,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626,2,['plugin'],['plugin']
Modifiability,"To me there is several aspect in Sofa-NG: ; - one, I would called MiniSofa is about having a single plugin that contains ""selected component"" with the 20/80 rules presented by Stephane. ; - the other, I would called Sofa-HiQu (Sofa- High Quality), is the set of component possibly containing some with nearly similar function but all matching a minimal level of quality. ; - the last one, I would called Sofa-Garbage, that consist in removing components that are really ; unsupported and should not be supported in the core. . Of course Sofa-HiQu should at least contains the MiniSofa components and it should be the same code base :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/227#issuecomment-291093104:100,plugin,plugin,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/227#issuecomment-291093104,1,['plugin'],['plugin']
Modifiability,"To me these have two totally different usages.; ; config.h is containing the different parameters related to the module...and it should be included in every .h of a module because this is where the SOFA_MODULE_API is implemented. Appart from that is the initModule.cpp/initModule.h which contains the defintion/declaration for functions needed to intialize the module. In the past initModule.h was containing the initModule() function...but when it is a real plugin we are using the Plugin API and dlopen for that. If we want to allow people to use the module without using the dynamic library we add into initModule.h the declaration of the ""C"" function that are in initModule.cpp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362:50,config,config,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-461016362,3,"['Plugin', 'config', 'plugin']","['Plugin', 'config', 'plugin']"
Modifiability,"To me, here are the important files to review if you agree with the changes made:; In SofaKernel:; - Vec.h; - VecTypes.h; - Mat.h; - Quat.h; - RigidTypes.h; - TemplateAlias.cpp ; - TemplateAlias.h. In Flexible; - StrainTypes; - DeformationGradientTypes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-448508844:201,Flexible,Flexible,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-448508844,1,['Flexible'],['Flexible']
Modifiability,"To motivate my vote (an external plugin). I think advertising this code is especially a good idea for us at DEFROST, advertising that we can also simulate articulated system, classic robotics you know. And if it has to be an external plugin to appear on the website (sofa-framework.org/applications/plugins right?)... then I vote for it. . Edit: I also have a nice example that I could add to the plugin . ![image](https://user-images.githubusercontent.com/12150715/156259946-1efb9a5a-5078-4f33-bc81-09f9ca4cbf0e.png)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1055913648:33,plugin,plugin,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1055913648,4,['plugin'],"['plugin', 'plugins']"
Modifiability,To prepare for runSofa2 i feel the need to refactor some aspects. . CHANGELOG:; - ADD a Camera object inheriting from BaseCamera so that it become possible to render a scene. The difference with InteractionCamera is that the Camera component is not having any interaction so you can implement your own 'application specific behavior' by using an external Controller (eg: PythonScriptController).; - ADD a link in BaseCamera to a BackgroundSetting so different camera can have different background. ; - the Camera alias is not anymore creating an InteractionCamera but a Camera object; - Update the caduceus example.; - Light object now have a drawSource so that it is possible to draw the source from without having to change the d_drawSource data field.; ; This PR replace #674 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/676:43,refactor,refactor,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/676,2,"['inherit', 'refactor']","['inheriting', 'refactor']"
Modifiability,"To remember, in the core of SOFA the following API is dedicated only to Compliant and Flexible plugins:. - BaseMapping : getJs + updateK + getK; - BarycentricMapping.h : type Eigen sparse matrices defined + instantiation",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1636:86,Flexible,Flexible,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1636,2,"['Flexible', 'plugin']","['Flexible', 'plugins']"
Modifiability,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642:545,variab,variables,545,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642,1,['variab'],['variables']
Modifiability,"To reproduce the bug: start runSofa, open Plugin Manager, add a plugin, remove the plugin, segfault.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/6:42,Plugin,Plugin,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/6,3,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,"Today we have many different way to compile plugins (all ways : through SOFA in files, through SOFA with EXTERNAL_DIRECTORIES, out-of-SOFA).; It is misleading for users, we have still plugins in the core (making SOFA heavy). A proposal: why not going towards a full **out-of-tree compilation for SOFA plugins** (located in _applications/plugins_) ?. It would enforce us to:; - sort used and supported plugins vs. others; - clean dependencies in CMakeLists; - then we would actually have to change the CI so that these plugins are built with a SOFA docker image. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1285:44,plugin,plugins,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1285,5,['plugin'],['plugins']
Modifiability,"Todo en vrac:; - trier les composants à garder; - réorganiser les composants à mettre dans des plugins; - mise à jour des CMakeLists pour compiler en mode ""NG"" (par défaut) ou avec tout; - ""paquets de plugins"" pour ne pas devoir activer un par un tous les plugins. Sur les composants gardés: ; - mettre n place des tests; - faire une passe de cleaning (noms, code, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670:95,plugin,plugins,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/225#issuecomment-290703670,3,['plugin'],['plugins']
Modifiability,"Trying to include the SofaExporter module in an external project (out-of-tree build of a plugin || test) was not functional since include directories were not exposed properly. I took inspiration from CImgPlugin for this PR, which uses CMAKE_CURRENT_SOURCE_DIR to expose the target's include directory.. but I believe this is actually wrong as this corresponds to the path to the sources (`/home/bruno/dev/sofa/modules/SofaExporter/src/` in my case for instance) and not to the installed include directory, (which should be `/home/bruno/dev/sofa/build/install/include/SofaExporter/src/SofaExporter` on my machine). I took a look at other plugins & pluginized modules & they all seem to do this, so Idk if it's a mistake or done on purpose..?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/975:89,plugin,plugin,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/975,3,['plugin'],"['plugin', 'pluginized', 'plugins']"
Modifiability,"Tutorials were not configuring. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3200:19,config,configuring,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3200,1,['config'],['configuring']
Modifiability,"Two change needed by the SofaPython3 plugin. . - In BaseData Some method have two version, one without arguments the other with an ExecParm. In pybind11 we need to differentiate explicitely the two version making the code more complex. As I see no good reason why to keep the two version in Sofa I merged these two into one by using a default param = nullptr. . - I have added a join/split function in the StringUtils class. . - In SimpleAPI I found allowing BaseObjectDescription useful to create object and node. So I added new functions.; _____________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/860:37,plugin,plugin,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/860,1,['plugin'],['plugin']
Modifiability,"Two new menu entry are added in the SceneGraph view to jump to the source file location corresponding to the selected object. This PR is based on #1012 to get the file location. ; By default qtcreator will be used to open the file. ; But this can be changed by editting the config file saved by the QSetting mecanism. . NB: The ""Go To implementation"" really make sense when using STLIB as it allows ; to jump where a prefab is implemented. It would be nice if we could do the same for c++ ; but this is of lesser interest ...because we need to compile sofa to see a change :) . EDIT: small video show how it works ; [![video](http://img.youtube.com/vi/zzOY-Lt0vgM/0.jpg)](http://www.youtube.com/watch?v=zzOY-Lt0vgM); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1013:274,config,config,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1013,1,['config'],['config']
Modifiability,"Two variables with internal linkage were defined with the same symbol, and the same value. Instead, I propose to associate these variable to the classes where they are used. I did not made them global variables because we could imagine having two different values for both classes. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1951:4,variab,variables,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1951,3,['variab'],"['variable', 'variables']"
Modifiability,"Two variables with the same name in the same scope: declaration hides previous local declaration. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2463:4,variab,variables,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2463,1,['variab'],['variables']
Modifiability,"Typo in the name of the variable in an assert, so compiled only in Debug. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2417:24,variab,variable,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2417,1,['variab'],['variable']
Modifiability,"UCE YOUR PROBLEM HERE >; 1. install anaconda and make virtual environment ; 2. install sofa framework ; 3. define the environment variables ; 4. import Sofa in python. **Expected behavior**; < DESCRIBE WHAT YOU THINK SHOULD HAVE HAPPEN INSTEAD >. Success importing Sofa in python without any error. ---------------------------------------------. ### Environment. **Context**. - System: Mac OS X 14.4.1 (23E224) ; - Version of SOFA:[SOFA_v23.06.00_MacOS.zip](https://github.com/sofa-framework/sofa/releases/download/v23.06.00/SOFA_v23.06.00_MacOS.zip); - State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >. **Command called**. ```txt. (sofarl) bemore@BeMores-MacBook-Pro site-packages % python ; Python 3.8.19 (default, Mar 20 2024, 15:27:52) ; [Clang 14.0.6 ] :: Anaconda, Inc. on darwin; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import Sofa; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS; ---------------------------------------; Traceback (most recent call last):; File ""<stdin>"", line 1, in <module>; File ""/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/__init__.py"", line 140, in <module>; import Sofa.Helper; ImportError: dlopen(/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so, 0x0002): tried: '/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV/SOFA_study/SOFA_v23.06.00_MacOS/plugins/SofaPython3/lib/python3/site-packages/Sofa/Helper.cpython-38-darwin.so' (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm64e' or 'arm64')), '/System/Volumes/Preboot/Cryptexes/OS/Users/bemore/Library/CloudStorage/OneDrive-Personal/DEV",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4690:1309,variab,variable,1309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4690,1,['variab'],['variable']
Modifiability,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:25,plugin,plugins,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Uber PR. - some instanciations were still refering to Vec3dTypes (instead of Vec3Types); - confusion between double and SReal; - Vector3 used as Vec<3. SReal> (confusion with Matrix3 for example which is effectively Mat<3,3,SReal>...); - MeshMatrixMass mixing MassType and DataTypes::Real; - Fix some double* cast to a float*...; - Fix a rounding error with float in regulargrid (**realllllllly** old bug); - short demo on godbolt: https://godbolt.org/z/no6hss6jr; ; -> massive use of auto and getAccessor(). This PR should be exactly the same if SOFA_FLOATING_POINT_TYPE is set to double (hopefully); ~The only breaking things are in MeshMatrixMass~. actually it should not be. I have ported the code from the standard set of sofa modules/plugins so plugins/tests are likely to fail (with float); CI is using double so it will only test if there is no regression. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2560:740,plugin,plugins,740,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2560,2,['plugin'],['plugins']
Modifiability,Unable to load plugin when sofa is installed,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1560:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1560,1,['plugin'],['plugin']
Modifiability,"Unfortunately I did not find a better way to ensure full backward compatibility.; I vote for solution 2 (breaking but not too much): tell user to enable all needed MODULE_* variable, then fail.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624686655:173,variab,variable,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1344#issuecomment-624686655,1,['variab'],['variable']
Modifiability,"Unfortunately I won't have much time to dedicate to this in the foreseeable future :-/. I see at least a few options for fixing this:; - split the `SceneCreator` API across plugins so that any plugin can provide facilities for creating a scene with components in this plugin, possibly with a common API in core; - remove anything referencing modules/plugins in`SceneCreator`, and instantiate components only using `createObject` (aka. the easy way out); - deprecate SceneCreator/C++ tests altogether and do python tests only, put the effort on making python tests bullet proof and easy to use (my personal preference). I strongly favour having tests that are as frictionless as possible, otherwise people will just stop writing them. In our fork we are considering using example python scenes as tests, by adding suitable assertions and testing what's needed on the example scene.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589:173,plugin,plugins,173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-331550589,4,['plugin'],"['plugin', 'plugins']"
Modifiability,Unfortunately no. SofaPython3 builds without error on my Ubuntu 18.04; My config:; - SOFA v20.06 binaries unzipped in my home; - pybind11 2.4.3 installed in my system; - python 3.8.3 installed in my system,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967:74,config,config,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1429#issuecomment-656144967,1,['config'],['config']
Modifiability,"Uniform size type to be same type as index_type; + move index_type to sofa namespace (in sofa/config.h); (was located in defaulttype before, does not really make sense). So now : ; - index_type is defined as sofa::index_type; - size_type is defined as sofa::size_type ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1515:94,config,config,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1515,1,['config'],['config']
Modifiability,Union may prevent to use a variable x if you wrote in y which is exactly our case here. Let's use the setParent() on Data.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4046#issuecomment-1698689077:27,variab,variable,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4046#issuecomment-1698689077,1,['variab'],['variable']
Modifiability,"Unless we are packaging the installation files, remove the automatic installation of external system libraries (glew, boost, etc.). This was messing with out-of-tree plugins compilation as the installed; external libraries were hiding the system's ones. Example of CMake warnings from the out-of-tree plugins:. ```cmake; Cannot generate a safe runtime search path for target MyProject; because files in some directories may conflict with libraries in implicit; directories:. runtime library [libGLEW.so.2.1] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_filesystem.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_program_options.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_thread.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_date_time.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_chrono.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_system.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_atomic.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; ```. See https://github.com/sofa-framework/sofa/issues/1153 for more details. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test fai",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1387:166,plugin,plugins,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1387,2,['plugin'],['plugins']
Modifiability,Unused variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1754:7,variab,variable,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1754,1,['variab'],['variable']
Modifiability,"Up-to-date: C:/projects/sofa-build/install/lib/SceneCreator.lib; 1>-- Up-to-date: C:/projects/sofa-build/install/bin/SceneCreator.dll; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/GetAssembledSizeVisitor.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/GetVectorVisitor.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneCreator.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/SceneUtils.h; 1>-- Up-to-date: C:/projects/sofa-build/install/include/SceneCreator/config.h; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorTargets-release.cmake; 1>-- Up-to-date: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfigVersion.cmake; 1>-- Installing: C:/projects/sofa-build/install/lib/cmake/SceneCreator/SceneCreatorConfig.cmake; 1>CMake Error at applications/plugins/CImgPlugin/cmake_install.cmake:38 (file):; 1> file cannot create directory:; 1> C:/projects/sofa-build/$C:/projects/sofa-build/install/plugins/CImgPlugin/bin.; 1> Maybe need administrative privileges.; 1>Call Stack (most recent call first):; 1> applications/plugins/cmake_install.cmake:37 (include); 1> cmake_install.cmake:88 (include); 1>; 1>; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: The command ""setlocal; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: ""C:\Program Files\CMake\bin\cmake.exe"" -DBUILD_TYPE=Release -P cmake_install.cmake; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(133,5): error MSB3073: if %errorlevel% neq 0 goto :cmEnd; 1>C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE\VC\VCTa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1117:1927,plugin,plugins,1927,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1117,1,['plugin'],['plugins']
Modifiability,"Update architecture of plugins examples: doc, PluginExample, Qt template",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1041:23,plugin,plugins,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1041,2,"['Plugin', 'plugin']","['PluginExample', 'plugins']"
Modifiability,Update fetch mechanism for plugins using cmake 3.24,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4604:27,plugin,plugins,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4604,1,['plugin'],['plugins']
Modifiability,Update further to work on the upcoming Optimus plugin:; thanks @guparan for solving the issue !. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1498:47,plugin,plugin,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1498,1,['plugin'],['plugin']
Modifiability,"Update the list of plugins to NOT auto-load when executing runSofa from the release. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3197:19,plugin,plugins,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3197,1,['plugin'],['plugins']
Modifiability,Update:; - Components/forcefield/BeamFEMForceField.scn fixed; - Components/constraint/BilateralInteractionConstraint.scn 100 1e-4; - ERRORBYDOF: 22.9926 ; - Demos/caduceus.scn 100 1e-3; - ERRORBYDOF: 2.68482; - Components/collision/FFDDistanceGridCollisionModel.scn 100 1e-4; - Moved into a plugin.; - Components/constraint/FrictionContact.scn 100 1e-4; - ERRORBYDOF: 1.45887; - Components/collision/RuleBasedContactManager.scn 100 1e-4; - ERRORBYDOF: 0.215011. 6/10 working!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264:291,plugin,plugin,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/828#issuecomment-439006264,1,['plugin'],['plugin']
Modifiability,"Using the 21.06 sources from SOFA on Ubuntu, I faced a compilation issue with the CGAL plugin. It appears that the issue is fixed in #2246. Should it be backported in 21.06 release branch @guparan ?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2480:87,plugin,plugin,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2480,1,['plugin'],['plugin']
Modifiability,"Using the newly released CMake 3.15, the configuring stage fails with:. CMake Error at SofaKernel/SofaFramework/SofaMacros.cmake:686 (message):; Missing parameter TARGETS.; Call Stack (most recent call first):; applications/plugins/SofaMiscCollision/CMakeLists.txt:82 (sofa_generate_package). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105:41,config,configuring,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105,2,"['config', 'plugin']","['configuring', 'plugins']"
Modifiability,"Very basic PR just to let you know that the CGAL plugin is not compatible with latest CGAL.; As is, it compiles with CGAL <= 4.9.1. CI build is unnecessary for this PR.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/510:49,plugin,plugin,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/510,1,['plugin'],['plugin']
Modifiability,Very nice work @fredroy :clap: :clap: :clap:. I have 2 side questions:; - shouldn't this be under applications/projects instead of applications/plugins (I would feel more logical to have it next to runSofa basically) ?; - is it planned to host the repository in sofa-framework organization ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342:144,plugin,plugins,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062#issuecomment-842943342,1,['plugin'],['plugins']
Modifiability,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/507:55,plugin,plugin,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507,1,['plugin'],['plugin']
Modifiability,"Very useful collection of header-only utilities : https://github.com/nothings/stb. This PR uses **stb_image** and **stb_image_write** to read/write jpeg,png,etc. images directly without any reliance on libpng or libjpeg.; Practically, This PR almost depracates the use of CImgPlugin (at least as an image loader). ; The only thing stb (compared to cimg) is that it cannot load is the TIFF format... It allows us to :; - not depend on any external library anymore (libpng, libjpeg); - not need anymore to load the CimgPlugin to get images in a scene (which was a bit weird...). **stb** licence is either MIT or even public domain (!). Some questions about this PR:; - should we fetch stb at cmake configure time ? IMO no because it would mean we really need an Internet connection to compile the core of SOFA; - should we put all the files from the stb repo ? IMO no, the other files wont be used for sure. That's why the stb dir contains only the two files we want for this PR. <img src=""https://user-images.githubusercontent.com/11028016/146752568-e4f392d5-5ecd-4f32-be92-32f48b53f5ab.PNG"" width=""400"" />. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2551:696,config,configure,696,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2551,1,['config'],['configure']
Modifiability,"Very useful variable to have a default `COMPONENT` value for every `install` call :+1:; Also, clean 2 missing `<build-dir>/cmake --> <build-dir>/lib/cmake` for consistency. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2037:12,variab,variable,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2037,1,['variab'],['variable']
Modifiability,"Visitor`:; - `processNodeTopDown_fwd*` and `processNodeBottomUp_bwd*`: in the base class they do nothing. In the derived class, they must execute the corresponding `processNodeTopDown_fwd*_impl` or `processNodeBottomUp_bwd*_impl` function.; - `processNodeTopDown_fwd*_impl` and `processNodeBottomUp_bwd*_impl` which have a content and will execute the goal of the visitor. Those functions are not meant to be overriden by the derived classes. They are provided so derived class can call them when they override `processNodeTopDown_fwd*` or `processNodeBottomUp_bwd*`. ### Example. `MechanicalGetDimensionVisitor` inherits from `BaseMechanicalVisitor` and overrides `fwdMechanicalState`. In order for `fwdMechanicalState` to be executed, it must also override `processNodeTopDown_fwdMechanicalState`. In `processNodeTopDown_fwdMechanicalState`, it just have to call `processNodeTopDown_fwdMechanicalState_impl`. ### Pros. - Avoid unnecessary race conditions; - Does not execute unnecessary boilerplate code; - Benefit from inheritance and avoid runtime checks compared to PR #1962 . ### Cons. - Breaks all classes derived from `BaseMechanicalVisitor`; - Forces the developers of classes derived from `BaseMechanicalVisitor` to derive more functions. This PR is not to merge yet. It is suggested as an alternative to PR #1962 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (o",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1963:2540,inherit,inheritance,2540,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1963,1,['inherit'],['inheritance']
Modifiability,"Visual Studio allows to manager multiple compilation modes for one project. The plugin manager writes a list of loaded plugins in a file `loadedPlugins.ini`. This file stores the absolute paths to the loaded plugins. When switching the compilation mode in VS, this file is still loaded. And it will load plugins which paths point to the previous compilation mode. If you switch from Debug to Release, the file contains the paths to the Debug binaries and the plugin manager will try to load them, whereas the compilation mode is now Release.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2338:80,plugin,plugin,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2338,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"VisualModelImpl inherits from State which allows it to be mapped (with Mappings) .; This State is slightly specialized for Visual thing (contains positions, normals and rest_positions(?) ). It was previously located exclusively in VisualModelImpl.h, this PR renames it and moves it into Sofa.Core.Visual.; Follows the guideline one class -> one (set of) file. Slightly breaking because some includes have been removed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3782:16,inherit,inherits,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3782,1,['inherit'],['inherits']
Modifiability,VisualTransform moved from SofaBaseVisual to SofaGeneralVisual. ChangeLog:; - FIX: compilation LeapMotion plugin (issue since v16.12). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/296:106,plugin,plugin,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/296,1,['plugin'],['plugin']
Modifiability,"Voilà. Maybe @epernod a check on the SofaPhysicsSimulation with the various Fore/Background member variables. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5054:99,variab,variables,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5054,1,['variab'],['variables']
Modifiability,"WARNING: this will break SofaPython3. I'm working on it. Before, when 2 nested packages had `RELOCATABLE ""plugins""`, the 2nd was installed in CMAKE_INSTALL_PREFIX/plugins/FirstPackage/plugins/SecondPackage. Now, the RELOCATABLE argument, if relative, will always be treated as CMAKE_INSTALL_PREFIX/<argument>. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2603:106,plugin,plugins,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2603,3,['plugin'],['plugins']
Modifiability,"WIP PR.; For now, it disables all python scenes in Flexible and Compliant. IMPORTANT: do not merge until https://github.com/sofa-framework/SofaPython3/tree/fix_or_disable_scene_tests is merged into SofaPython3 and ExternalProject tag is reset to master here. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1919:51,Flexible,Flexible,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1919,1,['Flexible'],['Flexible']
Modifiability,Waiting for Sofa.Config... closing for now,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-746011358:17,Config,Config,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1555#issuecomment-746011358,1,['Config'],['Config']
Modifiability,"Waiting for a fix, Multithreading and THMPGSpatialHashing plugins have been disabled in MacOS jobs. Error output for THMPGSpatialHashing:; ```; [214/302] Building CXX object applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o; FAILED: applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DTHMPGSpatialHashing_EXPORTS -I../SofaKernel/SofaBase/../modules -Iinclude -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -isystem /usr/local/include -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_BUILD_THMPGSPATIALHASHING -std=gnu++11 -MD -MT applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -MF applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o.d -o applications/plugins/THMPGSpatialHashing/CMakeFiles/THMPGSpatialHashing.dir/THMPGHashTable.cpp.o -c ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp; In file included from ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.cpp:1:; ../applications/plugins/THMPGSpatialHashing/THMPGHashTable.h:5:10: fatal error: 'boost/unordered/detail/util.hpp' file not found; #include <boost/unordered/detail/util.hpp>; ^; 1 error generated.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904:58,plugin,plugins,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313105904,9,['plugin'],['plugins']
Modifiability,"We can close this. it was not a ""real"" regression. ; A PR is PR is waiting to be merged refactoring this part of the codebase.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/895#issuecomment-465262565:88,refactor,refactoring,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/895#issuecomment-465262565,1,['refactor'],['refactoring']
Modifiability,"We chould have an intermediate level in the inheritance hierarchye or we can have interfaces as well as agregation. . Here is an example with both interface & agregation approache to factor the data logics. It is a bit long because I wanted it to be self compiling. ; ```cpp; #include <iostream>; #include <vector>; class Data; {; public:; std::string name;; std::string value;; };. class BaseObject; {; public:; BaseObject() {; initData(&d_name, ""name"");; }. virtual void init() {}. void initData(Data* d, const std::string& name); {; d->name = name;; m_datas.push_back(d);; }. void dump(); {; std::cout << ""== ("" << d_name.name << "") =="" << std::endl;; for(auto& data : m_datas); std::cout << ""Data: "" << data->name << std::endl;; }. private:; std::vector<Data*> m_datas;; Data d_name;; };. class ForceField : public BaseObject; {; public:; ForceField() {; initData(&d_mstate, ""mstate"");; }; Data d_mstate;; };. //// Data related object...; class TopologicalLink; {; public:; TopologicalLink(BaseObject* self); {; self->initData(&d_topology, ""topology"");; }; Data d_topology;. private:; TopologicalLink(const TopologicalLink&) {};. };. class GroupOfRelatedData; {; public:; GroupOfRelatedData(BaseObject* self); {; self->initData(&d_a, ""a"");; self->initData(&d_b, ""b"");; self->initData(&d_c, ""c"");; }. void parse(); {. }. void init(); {; if(d_a.value == ""well"" and d_c.value == ""not so""); d_b.value = ""ok"";; }. Data d_a;; Data d_b;; Data d_c;; };. ///// Sofa components; class TetrahedronFEMForceField :; public ForceField,; public TopologicalLink; {; public:; TetrahedronFEMForceField() : TopologicalLink(this); {; initData(&d_youngModulus, ""youngModulus"");; }. Data d_youngModulus;; };. class SuperFEM :; public ForceField,; public TopologicalLink; {; public:; SuperFEM() : TopologicalLink(this), dataGroup(this); {; initData(&d_youngModulus, ""youngModulus"");; initData(&d_oldModulus, ""oldModulus"");; }. void init() override; {; dataGroup.init();; }. Data d_youngModulus;; Data d_oldModulus;. Grou",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178:44,inherit,inheritance,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/979#issuecomment-479885178,1,['inherit'],['inheritance']
Modifiability,We compile the plugin but can't run any CUDA simulation.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/665#issuecomment-449041975:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/665#issuecomment-449041975,1,['plugin'],['plugin']
Modifiability,We definitely need to get timing and position regression feedback from (at least a few) scene tests. Already existing tools for position regressions:; - applications/plugins/SofaTest/SofaTest_test/Regression_test; - applications/projects/sofaVerification. TODO:; - [x] Choose one tool to update and reactivate; - [ ] Add execution time measure; - [x] Integrate it in CI,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/801:166,plugin,plugins,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/801,1,['plugin'],['plugins']
Modifiability,"We discussed a lot about it...but we never did a PR on that topic probably fearing the refactoring work and the amount of workload it would generates. . > It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get docum",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:87,refactor,refactoring,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162,1,['refactor'],['refactoring']
Modifiability,"We got this error many times in the past, and I never had the chance to dig into the issue. There was actually two issues:. 1. SOFA was unable to find some GL extensions on Intel drivers with the Qt viewer while they were supposed to be there (they were correctly found when using the qglviewer); 2. When no extensions at all were found by Glew, SOFA tried to convert a null pointer to a std::string, which created a segmentation fault. This PR fixes both of these issues. It first make sure that the pointer returned by Glew isn't null before converting it to a std::string. It also asks Qt to enable deprecated functions, which are used by SOFA. In addition, I've removed the part of the Qt viewer that was forcing the environment variable `MESA_GL_VERSION_OVERRIDE` on Linux. I've also remove the error when this environment variable wasn't set with Intel driver (which was never the case because we were forcing it...) and added a warning instead (Qt viewer works fine on Intel drivers, maybe this was an old bug?). . Will most probably fix https://github.com/sofa-framework/sofa/issues/1567. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1690:733,variab,variable,733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1690,2,['variab'],['variable']
Modifiability,We have a lot of components accessing the topology through links.; We should create a TopologyAccessor and add the inheritance to these components.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2504:115,inherit,inheritance,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2504,1,['inherit'],['inheritance']
Modifiability,"We lost more than a week of work recently, because for years in Sofa during initialization the LC_LANG/LANG variables were forced to the safe and sane ""C"" value, but it was removed during a ""refactoring"" (I can look up the id of the commit if that is useful). Since then, you have to expect bugs like this (particularly in closed-source haptic drivers...). I would prefer that we go back to this strategy, instead of finding and fixing all those bugs (some of which we can't fix anyway). The alternative is to ban all use of `atoi/atof/printf/scanf/iostream/...` :(",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060:108,variab,variables,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/151#issuecomment-281639060,2,"['refactor', 'variab']","['refactoring', 'variables']"
Modifiability,We need to:; - first locating csparse and newmat in SOFA; - move the dependency back into the appropriate plugins. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1309:106,plugin,plugins,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1309,1,['plugin'],['plugins']
Modifiability,"We noticed using the macro SOFA_UNUSED() from the module SofaKernel/framework/sofa/simulation, the inclusion of the header <sofa/simulation/simulationcore.h> was actually not providing access to the macro. Questions:; what is the default pipeline to include config.h ? i.e. inclusion between config.h, namings of headers (config/module/initmodule.h ?); is the SOFA_UNUSED at the right location ?. @damienmarchal any idea ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/904:258,config,config,258,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/904,3,['config'],['config']
Modifiability,We should discuss the missing features in the plugin [SofaGLFW](https://github.com/sofa-framework/SofaGLFW/) using ImGUI. ### Missing features. @alxbilger @fredroy do not hesitate to add more items :point_down: ; - [x] mouse interaction; - [x] screenshot / video saving https://github.com/sofa-framework/SofaGLFW/pull/90; - [x] profiler with tracy https://github.com/sofa-framework/SofaGLFW/pull/89; - [ ] editable data; - [x] plugin manager; - [x] Keyboard event,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4200:46,plugin,plugin,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4200,2,['plugin'],['plugin']
Modifiability,"We should improve our packaging process to ease the creation/build of a plugin linked to a SOFA release. Now: CPack (Windows) + Bundle (MacOS) + install archive (Linux); Problems: Not unified, some libs not included (Qt); Future: One unified method for all platforms.; Ideas: Flatpak, CPack, vcpkg; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/690:72,plugin,plugin,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/690,1,['plugin'],['plugin']
Modifiability,We would like to get an Eigen sparse matrix wrapper (e.g. the one from Caribou plugin).; SOFA already contains such wrappers: EigenMatrix and EigenVector. Existing Eigen wrapper are also available in Caribou: it could be copied in SOFA (sofa.linearalgebra) to have this unique wrapper. Would you mind @jnbrunet ?. **TODO**; - What does the existing wrapper today? and What are the differences? → issue ??,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2474:79,plugin,plugin,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2474,1,['plugin'],['plugin']
Modifiability,Well @untereiner ; the CI is not passing due to an issue of cmake version:. ```; 5.4_options_release/build/external_directories/fetched/CGoGN/CGoGN-prefix/src/CGoGN-stamp/CGoGN-configure; CMake Error at CMakeLists.txt:1 (cmake_minimum_required):; CMake 3.7.2 or higher is required. You are running version 3.5.1; ```; we will investigate this next week,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-427426994:177,config,configure,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-427426994,1,['config'],['configure']
Modifiability,"Well in this case, the bug was a wrongfully warning printed only when Sofa is built in debug. Can we create tests that are that specific?. I could try to do some regex ninja tests on the application output, but it would have to be executed on debugged configurations. Let me know if this is something you would like to see for this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709:252,config,configurations,252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/406#issuecomment-329789709,1,['config'],['configurations']
Modifiability,"Well, . If I had to choose between a new release with no new features and post-poning the release by 15 days I would definitely prefer the release to be post-poned. . The general idea is that plugins that are tagged experimental and does not change the existing behavior should be integrated... :) ; And I would dream to see people making extra effort to have that happen.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245:192,plugin,plugins,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541#issuecomment-353020245,1,['plugin'],['plugins']
Modifiability,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:92,variab,variables,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339,1,['variab'],['variables']
Modifiability,"Well, actually the 3.24 version only provide a fully working mechanism.The mechanism exists in 3.22 (I am currently using the 3.22 and it works) the only downside is that the macro `FetchContent_MakeAvailable` doesn't make it available for every target of the project a it does in the 3.24. That is why for instance I had to add this same mechanism into the `SofaMatrix` plugin. But it works fine anyway because it pull it in the same folder and compile it only once and make it available for both of the projects. . Why 3.22 you might ask ? Well because it is the version shipped in Ubuntu 22.04 LTS, so we will not require a CMake version that is greater than this one...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4586#issuecomment-2003222894:371,plugin,plugin,371,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4586#issuecomment-2003222894,1,['plugin'],['plugin']
Modifiability,"Well, this PR does not change the status of `SofaPython`. It is still a deprecated external plugin and available on GitHub. This PR just remove the possibility to fetch it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3855#issuecomment-1545691436:92,plugin,plugin,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3855#issuecomment-1545691436,1,['plugin'],['plugin']
Modifiability,What happens if you forget the required plugins in the ci-dependent PRs?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2371015362:40,plugin,plugins,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5012#issuecomment-2371015362,1,['plugin'],['plugins']
Modifiability,"When I configure the source sofa/src in cmake, the error is as:; ![Cmake_error](https://user-images.githubusercontent.com/22396672/93750818-b135a700-fc2e-11ea-996d-ac6cf1acb4df.png). CMake Error at CMakeLists.txt:121 (message):; Boost (1.54.0 or higher) is mandatory. Note that Boost autodetection on Windows was removed. Please follow CMake documentation to find Boost on your system. Hint: set BOOST_ROOT to your Boost location. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1494:7,config,configure,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1494,1,['config'],['configure']
Modifiability,"When I try to compile SOFA (on Windows), I observed that apparently some part of the build system (CMake? Or some pre/post-build event) tries to create output folders in the `bin` subfolder of the CMake cache for all the different MSVC build configurations created by Cmake (i.e. Debug, MinSizeRel, Release, RelWithDebInfo), **but instead of creating folders generates some obscure binary files with the same name**. This seems to be ok for the first compilation, where MSVC seems to be faster than the faulty script. E.g. when starting with Debug, I do not see any issues, however after finishing that and trying to compile in Release, MSVC compiler complains that e.g. (same for all other targets). > Error	MSB3191	Unable to create directory ""E:\work\dev\SOFA\sofa\build\bin\Release\"". Cannot create ""E:\work\dev\SOFA\sofa\build\bin\Release"" because a file or directory with the same name already exists.	. until I manually remove this useless extra **""Release"" file** (which was meant to be a folder). ______________________________________________________. Suggested labels: bug (minor)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1331:242,config,configurations,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1331,1,['config'],['configurations']
Modifiability,"When a plugin is loaded, the ObjectFactory is populated of Components from this plugin. However, when this plugin is ""unloaded"", it was still possible to create a component from the plugin. This PR detects that the ObjectFactory tries to instantiate an object that is from an unloaded plugin.; It is particularly useful when the initialization of the plugin fails (SofaCUDA for example). When the initialization fails, the plugin is unloaded.; A unit test is provided. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4722:7,plugin,plugin,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4722,7,['plugin'],['plugin']
Modifiability,"When building runsofa (master version 16/01/18) it crash at runtime. > [INFO] [runSofa] No plugin will be automatically loaded; > - No custom list found at C:\sofaBuild\bin/bin/plugin_list.conf; > - No default list found at C:\sofaBuild\bin/bin/plugin_list.conf.default; > The constructor with a QGLFormat is deprecated, use the regular contructor instead.; > [ERROR] [FileRepository] File icons/back.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [FileRepository] File icons/home.png NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [ERROR] [BaseViewer] Could not create file 'C:/sofa/share/textures/SOFA_logo.bmp'; > Valid extensions: dds; > ; > [ERROR] [Image] Could not load image with extension png. Valid extensions: dds; > [ERROR] [OglModel(VisualBody)] couldn't create an image from file textures/snakeColorMap.png; > [ERROR] [OglModel(VisualBody)] 1 textures couldn't be loaded; > [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\sofaBuild\bin/share/sofa/gui/runSofa/resources/:C:\sofaBuild\bin/share/sofa/gui/qt/resources/; > [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. Switching to the default APIVersion level '17.06'; > [INFO] [SceneChecker] Validating node ''.; > Activate checkers:; > - SceneCheckAPIChange; > - SceneCheckDuplicatedName; > - SceneCheckMissingRequiredPlugin; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable.; > ; > [ERROR] [FileSystem::listDirectory()] C:\sofaBuild\bin/bin: error 3: Le chemin dÆaccÞs spÚcifiÚ est introuvable. Plus, I had many troubles compiling it. I have to uncheck PSL (require SofaPython), but when SofaPython is checked there is many link problems. Finally, I both unchecked them. ______________________________________________________. Suggested labels: <!--- see https://github",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561:91,plugin,plugin,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561,1,['plugin'],['plugin']
Modifiability,"When compiling a project/plugin with c++17, it fails due to std::binder used in Sofa and Eigen. This functionality was depreciated in c++11 and was removed in c++17 (lambda expressions are now the cool way to do this). This PR removes the use of std::binder and, as a side effect, brings us closer to be able to compile Sofa with c++ > 11 if we wish to do some modern c++ someday :-) . Small note: The version of Eigen used in Sofa is a little bit old (2015)... Might be a good idea to add this in the Sofa's to do list. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/908:25,plugin,plugin,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/908,1,['plugin'],['plugin']
Modifiability,"When compiling image, you might now have an issue when updating since DiffusionSolver has been made a separate plugin. This PR provides a warning for the users. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1067:111,plugin,plugin,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1067,1,['plugin'],['plugin']
Modifiability,"When doing `make install`, the RPATH of the libraries is set to ""../lib:$ORIGIN/../lib:$$ORIGIN/../lib"", and does not include the path to its relocated dependencies:. ```; $ ./bin/runSofa; ./runSofa: error while loading shared libraries: libSofaValidation.so.1.0: cannot open shared object file: No such file or directory; ```. ```; $ find . -name libSofaValidation.so.1.0; ./plugins/SofaValidation/lib/libSofaValidation.so.1.0; ```. Same thing happen if we link our project to some of SOFA's core library:; ```; $ lddtree my_plugin.so; my_plugin.so; libSofaMisc.so.20.06.99 => /sofa/build/install/lib/../lib/libSofaMisc.so.20.06.99; libSofaMiscEngine.so.20.06.99 => /sofa/build/install/lib/../lib/../lib/libSofaMiscEngine.so.20.06.99; libSofaNonUniformFem.so.1.0 => not found; ```; and again.; ```; $ find . -name libSofaNonUniformFem.so.1.0; ./plugins/SofaNonUniformFem/lib/libSofaNonUniformFem.so.1.0; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1395:376,plugin,plugins,376,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1395,2,['plugin'],['plugins']
Modifiability,"When doing `make install`, the installation fails for components SofaGuiQt et QGLViewer because the Qt ""plugins"" directory is not found. A more robust way to do it would be to query the path for each needed plugin (as in http://doc.qt.io/qt-5/cmake-manual.html), but I'm not sure which plugins are needed, or if their installation is really necessary (it is not, on my system). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/794:104,plugin,plugins,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/794,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"When fetching plugins such as **SofaPython3** or **BeamAdapter** directly at CMake configure time, the plugin is well added in the list of _applications/plugins/_ but it create also add a .gitignore file (which is not in the plugin repository).; This .gitignore file has in it:; > ```*``` . thus all new file created in the plugin are ignored. Is it a wanted behavior?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409:14,plugin,plugins,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409,6,"['config', 'plugin']","['configure', 'plugin', 'plugins']"
Modifiability,When inheriting from BaseTest this automatically add to the test the adequate message handler so there is no need to add them manually. ; But refactoring these tests is out of the scope of the PR :) ; So it was more a comment for future work ;) . EDIT: Do you know why the windows build is failing ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209:5,inherit,inheriting,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-397590209,2,"['inherit', 'refactor']","['inheriting', 'refactoring']"
Modifiability,When the plugin is activated the file ; XiTrocarInterface.h is missing. I assume this plugin does not compile anymore. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/943:9,plugin,plugin,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/943,2,['plugin'],['plugin']
Modifiability,"When the plugin manager searches for a plugin, it will loop through the prefixes defined inside the PluginRepository, and append it the plugin name. If this file exists, it will be directly returned. Else, it will go recursively through each prefixes trying to find the file, which is inefficient and does not follow symbolic links. Especially since the prefixes contain large directories such as ""/usr/lib"". This PR adds two hard coded path to each prefixes which will help the plugin manager find common plugins usually located in _""$SOFA_ROOT/plugins/PLUGIN_NAME/lib/libPLUGIN_NAME.so""_ **just before** doing the recursive search. This should improve the speed for locating common plugins, and moreover allow some symbolic links to external plugins since the recursive search do not follow these links. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1824:9,plugin,plugin,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1824,9,"['Plugin', 'plugin']","['PluginRepository', 'plugin', 'plugins']"
Modifiability,"When trying to build an external project (in this case, it was the SP3 plugin), cmake isn't able to find zlib. Unless I'm mistaking, SOFA binaries should ship with this library. Collateral damage from the pluginization?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1692:71,plugin,plugin,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1692,2,['plugin'],"['plugin', 'pluginization']"
Modifiability,"While doing #3401 , I noticed that; ```; 11512 ms: std::set<sofa::core::objectmodel::Tag>::insert (688 times, avg 16 ms); ```; insert() from Tagset does not really require to be inlined, so I moved the two inline def into the associated cpp; Then:; ```; 3256 ms: std::set<sofa::core::objectmodel::Tag>::insert (209 times, avg 15 ms); ```; not extraordinary but _ca ne mange pas de pain_. Note that TagSet directly inherits from `std::set<Tag>` which is really not recommended... ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3403:414,inherit,inherits,414,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3403,1,['inherit'],['inherits']
Modifiability,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:6,refactor,refactoring,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172,5,"['plugin', 'refactor']","['plugin', 'plugins', 'refactoring']"
Modifiability,"While there are some pretty nice ideas going on considering the improvement the output of the advanced timer #348, to my knowledge (please correct me if I am wrong!), the component has some shortcomings:; 1. The timing output does not show up when using the batch gui, i.e. when specifying -g batch over the command line. Together with @ggrosshenny, we already took care of this in the work related to #348, a pull request will follow soon.; 2. The advanced timer can not be used at the initialization, i.e. in methods like init and I believe as well the backward init. To resolve the second point, I propose to change the variable computationTimeSampling to an integer (see Main.cpp, line 182). When set at ; - a negative integer c, it does output the timings of the initialization, but at every time step -c; - 0, it only outputs the timings of the initialization; - a positive integer c, it does not output the timings of the initialization and at every time step c. Thus the persons having used the timer before will not have any impact on their potential scripts using the SOFA output.; An implementation already has been started with @ggrosshenny, but it is not clear where an insertion has the less impact and yields the results. @ggrosshenny, could you precise that please?. Has there been any work considering this point?; Do you have any propositions how to address it?. Label propositions: discussion, bug",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/357:623,variab,variable,623,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/357,1,['variab'],['variable']
Modifiability,"While trying to add new options, I encounter the problem of adding new short argument names with consistency. The thing is, right now you have to design your option by using a short name (a char) and a long name (a char*).; But many options already exist. Finding a non used char which is consistent for an option is quite difficult. By reading existents short names, I assume I'm not the first one encountering this issue. Shouldn't it be better to let the user having the ability of using char* instead of char ? ; Of course short name still have to be ""short"" and we can add rules defining the maximum lenght of a short name, 3 for example. By example : ; ` .option(&colorsStatus, ""col"", ""colors"",""use colors on stdout and stderr (yes, no, auto)""); ` From POV, it is more consistent than : ; ` .option(&colorsStatus,'z',""colors"",""use colors on stdout and stderr (yes, no, auto)""); `. Here is an overview of the function : . ```; /** Declare an optional argument; \param ptr pointer to the variable; \param sho short name; \param lon long name; \param help; */; template<class T> inline; ArgumentParser& option( T* ptr, char sho, const char* lon, const char* help ); {; string sn, ln(lon), h(help); sn += sho;. if( sho!=0 && shortName.find(sho) != shortName.end() ); {; msg_fatal(""ArgumentParser"") << ""name "" << sn << "" already used !"";; exit(EXIT_FAILURE);; }; ....; ```. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/512:992,variab,variable,992,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512,1,['variab'],['variable']
Modifiability,"While trying to clear the build from compiler-warnings I found these pieces of code in in the metioned files:. ```C++; unsigned int idx = 0;; for( size_t i=0 ; i<size ; ); for( size_t j=0; j<value && i<size ; ++j, ++i ); rigidIndexPerPoint[i] = idx;; ++idx;; ```; (code is at line 280 in the file); The compiler warning is indicating that the `++idx;` statement is not effected by the outer or inner for-loop. As in this case `rigidIndexPerPoint[i] = idx;` is always assigning ""0"" to the `rigidIndexPerPoint[i]` I would purpose either to change change the mentioned statement to `rigidIndexPerPoint[i] = idx++;` or make `idx` a constant variable.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/435:637,variab,variable,637,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/435,1,['variab'],['variable']
Modifiability,"While trying to understand how forcefields work... I initially noticed that there was a bad handling of cases where `stiffness.size() != indices.size()` in the RestShapeSpringsForceField and tried to improve the overall error management on this component. I ended up doing the following changes:. - Call reinit() in bwdInit; - Using componentState to set the state to invalid when necessary (no stiffness set, out of bounds indices etc & check for component state in addForce / addDForce / addKToMatrix ..); - Improvement of warning messages (IMHO); - refactor code duplication; - remove warnings by changing int -> size_t for BaseMatrix::Index (got carried away here, sorry about that). **### BREAKING because:**. - Change in behavior in specific cases:. 1. empty stiffness vector: **Before:** setting arbitrary stiffness at 100.0 for all indices ; **Now:** msg_error & invalid state. ; 2. stiffness.size() != indices.size(): **Before:** applying stiffness[0] to all indices ; **Now:** ; ```py; if len(stiffness) > len(indices): ; crop(stiffness); else if len(stiffness) == 1:; stiffness.resize(len(indices), stiffness[0]); else if len(stiffness < len(indices):; ```; Generalized to angularStiffness on Rigids. - size_t in methods signature break API compatibility. I wouldn't call this component ""clean"" after those changes though, but it's a start. As stuff still to do to improve, I see:. - Using DataTrackers to call reinit() when necessary; - get rid of bwdInit by using componentState + datatrackers to reinit component; - remove those ugly getContext to retrieve the external mstate used for rest shape, by replacing them with a data or a link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1103:552,refactor,refactor,552,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1103,1,['refactor'],['refactor']
Modifiability,"Who is *we*?; The feature was used ; removing it has already been discussed many times and refused. I think the problem was: our code (e.g. CGSolver) is not numerical robust in single precision so we need to use double precision implementations, but some part of the code is (was) single precision only (e.g. Cuda forcefields). Once again the real point is why using double precision when single float should be enough?; So if you want to save compilation time and have lighter code => instantiate components only on SReal-based types (what it is already done in Flexible for example).; If you really want to make a change => clean every components that need to be robust in single float and compile sofa always in float only!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493:563,Flexible,Flexible,563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340407493,1,['Flexible'],['Flexible']
Modifiability,Why add a diamond inheritance instead of modifying directly the common parent class ODESolver ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4628#issuecomment-2045357439:18,inherit,inheritance,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4628#issuecomment-2045357439,1,['inherit'],['inheritance']
Modifiability,"Why is the minimum cmake version of CSparsePlugin 3.24 -> ci won't work if it stays like that. I've configured it with 3.22 (shipped version of Ubuntu 22.04) and it works fine. (I know not exactly in this PR, but this is the pr that propose the CSparePlugin creation)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1792780550:100,config,configured,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4258#issuecomment-1792780550,1,['config'],['configured']
Modifiability,Why not using the normal git submodule for this one?; It won't be linked to cmake config/build. Just like downloading the source code and its dependencies when you clone the repository.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252:82,config,config,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510056252,1,['config'],['config']
Modifiability,Will require a PR to https://github.com/sofa-framework/ci to fetch/activate it for the right configuration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4573#issuecomment-1987931651:93,config,configuration,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4573#issuecomment-1987931651,1,['config'],['configuration']
Modifiability,Will require a PR to https://github.com/sofa-framework/ci to fetch/activate them for the right configuration,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4575#issuecomment-1987930649:95,config,configuration,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4575#issuecomment-1987930649,1,['config'],['configuration']
Modifiability,"With Boost 1.64, at least on Mac, Multithreading build fails with the following message:; ```FAILED: applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o ; /usr/local/bin/ccache clang++ -Qunused-arguments -Wno-deprecated-declarations -DMultiThreading_EXPORTS -Iinclude -I../applications/plugins/MultiThreading/.. -isystem /usr/local/include -I../SofaKernel/SofaBase/../modules -I../SofaKernel/SofaSimulation/../modules -I../SofaKernel/framework/sofa/core/../.. -I../SofaKernel/framework/sofa/helper/../.. -F/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks -I../SofaKernel/extlibs/eigen-3.2.7 -ISofaKernel/SofaFramework -I../SofaKernel/extlibs/tinyxml -I../SofaKernel/framework/sofa/defaulttype/../.. -I../SofaMisc/../modules -I../SofaKernel/SofaCommon/../modules -isystem=/opt/local/include/Qt -Wall -W -O3 -DNDEBUG -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk -mmacosx-version-min=10.11 -fPIC -DSOFA_MULTITHREADING_PLUGIN -std=gnu++11 -MD -MT applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -MF applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o.d -o applications/plugins/MultiThreading/CMakeFiles/MultiThreading.dir/src/TaskSchedulerBoost.cpp.o -c ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp; ../applications/plugins/MultiThreading/src/TaskSchedulerBoost.cpp:192:18: error: overload resolution selected deleted operator '='; mTaskMutex.v_ = 0L;; ~~~~~~~~~~~~~ ^ ~~; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/atomic:1654:18: note: candidate function has been explicitly deleted; atomic_flag& operator=(const atomic_flag&) = delete;; ^; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316:114,plugin,plugins,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316,2,['plugin'],['plugins']
Modifiability,"With SofaNG now, the mandatory libs are neither plugin nor the deprecated ""module"" notion,. So while trying to configure SOFA for a minimum build (i.e no plugin) and without the compat layer (so no module), I stumbled in this error which was trying to generate the list of plugins/modules. ; There was no check on the list itself (as the empty modules/plugins could never have been empty before). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3069:48,plugin,plugin,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3069,5,"['config', 'plugin']","['configure', 'plugin', 'plugins']"
Modifiability,With the purpose to override it in a child class in a plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1444:54,plugin,plugin,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1444,1,['plugin'],['plugin']
Modifiability,With this PR the resulting plugin_list.conf on ubuntu is the following (I removed the `Sofa.*` for an easy read) : ; ```; SofaValidation 24.06.99; SceneCreator 0.1; CollisionOBBCapsule 1.0; ArticulatedSystemPlugin 1.0; SofaEulerianFluid 1.0; SofaSphFluid 1.0; SofaDistanceGrid 24.06.99; SofaImplicitField 1.0; MultiThreading 0.1; DiffusionSolver 0.1; Registration 0.1; InvertibleFVM 0.1; ManifoldTopologies 0.1; SensableEmulation NO_VERSION; SofaCarving 0.1; SofaAssimp 0.2; SofaMatrix 1.0; BeamAdapter 1.0; STLIB 3.0; SoftRobots 1.0; ShapeMatchingPlugin 24.06.99; CSparseSolvers 1.0; ModelOrderReduction 1.0; Sofa.Metis 24.06.99; SofaSimpleGUI 0.1; VolumetricRendering 24.06.99; ```. And the following are not automatically loaded by the binaries : ; ```; Geomagic ; image ; CImgPlugin ; PluginExample ; SofaCUDA ; CGALPlugin ; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4748#issuecomment-2122519996:789,Plugin,PluginExample,789,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4748#issuecomment-2122519996,1,['Plugin'],['PluginExample']
Modifiability,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/544:99,plugin,plugin,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544,1,['plugin'],['plugin']
Modifiability,"Work on merging BaseContext and BaseNode should first be addressed since the iterator would need to be able to iterate on both, but they have a different inheritance. To be further discussed in a STC!. _Originally posted by @hugtalbot in https://github.com/sofa-framework/sofa/issues/4334#issuecomment-1864102974_",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4397:154,inherit,inheritance,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4397,1,['inherit'],['inheritance']
Modifiability,Would it be the right time to put metis in a separate module in order to link it in a plugin? If you agree with this approach of course.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1048160877:86,plugin,plugin,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2717#issuecomment-1048160877,1,['plugin'],['plugin']
Modifiability,Xitact plugin missing file.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/943:7,plugin,plugin,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/943,1,['plugin'],['plugin']
Modifiability,"Yep, drawText could be enhanced, especially by changing the texture containing the letters.; Or directly generating the bitmaps by using libfreetype (http://learnopengl.com/#!In-Practice/Text-Rendering)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350:23,enhance,enhanced,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350,1,['enhance'],['enhanced']
Modifiability,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:98,plugin,plugins,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797,2,['plugin'],['plugins']
Modifiability,"Yes it will, but not for 'default' configurations, but - - for 'options' one. Those are the same as the one compiled by the PRs. It actually changes nothing but removes regression errors for 'default' configuration (only on the dashboard) because the lib was not found, which is normal because it is not compiled. . This PR comes along with two other ones on Regression and ci to remove the regression files and add the fetching for 'option' configurations.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967722990:35,config,configurations,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967722990,3,['config'],"['configuration', 'configurations']"
Modifiability,"Yes you're right. It can take some time, but if you really have no idea what commit is the guilty one, it is the fastest method. If you go with this process, disable the compilation of useless plugins and tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332413084:193,plugin,plugins,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332413084,1,['plugin'],['plugins']
Modifiability,"Yes, I don't have the exact commit but, after the version 5.1.0, some changes lead to a crash. Before the changes, it works.; It has been fixed later in this commit: https://github.com/KarypisLab/METIS/commit/36262adecaa9720a4417a67124428061c367fd3f. It means the versions in between both commits cannot be used without a crash. Note also that the version number (in the code) has not been updated properly along the history of the repository: https://github.com/KarypisLab/METIS/commit/f5ae915a84d3bbf1508b529af90292dd7085b9ec. It went from 5.1.0 to 5.2.1, whereas there is a 5.1.1 release. Finally, less importantly, in SOFA we need a portable random generator in METIS for reproductible results. It is enabled via a compilation option `METIS-GKLIB_GKRAND`. This is not enabled by default in releases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1905527144:637,portab,portable,637,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4450#issuecomment-1905527144,1,['portab'],['portable']
Modifiability,"Yes, I reported that in the PR related to BaseClass refactoring.; To my understanding Sofa is ""broken by design"" on that aspect. . Broken because the code that create the class object is using template with inner static object to create a singleton. This means that in every .cpp, the templated functions are generated, but, as they have static object in them...they are actually different (which is a kind of ODR violation). This is not a real problem when all the corresponding .cpp are assembled in a single programe because the linker implements a mecanisme to detect ""the duplicated templates instances"" and pick one. But there is no such runtime ""unification"" when working with dynamically loaded shared libraries (plugin) which can cause a lot of troubles. . Changing that means refactoring the whole class introspection system.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891:52,refactor,refactoring,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1087#issuecomment-1050627891,3,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,"Yes, there is a lot of plugins to activate to propagate the change...but given how far it goes I'm sure this is doable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680766526:23,plugin,plugins,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1460#issuecomment-680766526,1,['plugin'],['plugins']
Modifiability,"Yes, this image is supposed to be used for compilation purpose. It doesn't contain sofa itself but all the dependency required to compile sofa and use it. So you can use it to compile sofa yourself or configure your own environment to do so.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1757901544:201,config,configure,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1757901544,1,['config'],['configure']
Modifiability,"Yes, this is part of a big license cleaning task that has to be done. There are indeed some inconsistencies in license headers and copyright files, particularly in plugins. There are even sometimes several license headers on the same file.; About this single copyright.txt file, I think we should remove it. Everything in applications/ is not GPL.; Actually I think we should remove all the copyright.txt files in SOFA and stick to a main LICENCE.txt + license headers in files. That could also apply to each plugin independently.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/117#issuecomment-270693839:164,plugin,plugins,164,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/117#issuecomment-270693839,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Yes. I copied/pasted a path with backslashes in the env variable SOFA_ROOT, and a bad thing happened.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2970#issuecomment-1142230172:56,variab,variable,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2970#issuecomment-1142230172,1,['variab'],['variable']
Modifiability,"You are right I answered too fast. Actually your fix is exactly what is needed.; Could you propagate it to other `if (std::equal(dotExt.rbegin(), dotExt.rend(), plugin.rbegin()))` calls (there are others)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376533098:161,plugin,plugin,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376533098,1,['plugin'],['plugin']
Modifiability,"You are right and it is shitting for the person on whom it falls :); Haa! A stylesheet! But, as usual with sofa, it takes some time to set it up (install astyle, install the QtCreator plugin, add the configuration file). ; I agree with you to make for 17.16 on the whole repository",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573:184,plugin,plugin,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353076573,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,"You don't need the MultiThreading plugin. Since the TaskScheduler is in SofaSimulationCore, I think it's nice to always have the feature, if that's okay. . However... something is off. I guess I did something wrong with the TaskScheduler. Now when I use the feature, 40% of my CPU is used by runSofa without necessarily running the simulation... only one step is enough to make everything go crazy.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-803127159:34,plugin,plugin,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-803127159,1,['plugin'],['plugin']
Modifiability,"You should not have created a SofaGuiConfig.cmake.in in `sofa/gui/qt`. This file already exists and is in `<sofa_root>/SofaGui`. See my answer to your 2nd question below. > @guparan here it is... Not 100% sure of what I did.; > Is it:; > `if(SOFAGUIQT_HAVE_NODEEDITOR)` or `if (SOFAGUIQT_ENABLE_NODEGRAPH)` ?. It's `if(SOFAGUIQT_HAVE_NODEEDITOR)` . > just another question, in your tuto why is there ZLIB dependency SofaGeneral/SofaGeneralConfig.cmake.in and not in SofaGeneralLoader/SofaGeneralLoaderConfig.cmake.in ?. Because, from CMake point of view, SofaGeneral is a package and SofaGeneralLoader is not (it's only a target). ; A CMake package is something that can be loaded with `find_package` and that defines targets (most of the time those targets are libraries to link with `target_link_libraries`).; The XXXConfig.cmake.in file defines what the XXX package must do when someone calls `find_package(XXX)`. Typically, it will `find_package` the packages needed by it's own targets. Otherwise, at configure step, CMake will see that a target's dependency cannot be found for this package. See #1198 as example. In SOFA, the packages are: ; - the 8 main packages: SofaFramework, SofaSimulation, SofaBase, SofaCommon, SofaGeneral, SofaAdvanced, SofaMisc, SofaGui.; - the plugins; - the ""pluginized"" modules (targets that have become packages)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310:1006,config,configure,1006,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1187#issuecomment-546897310,3,"['config', 'plugin']","['configure', 'pluginized', 'plugins']"
Modifiability,"You should use instead the mechanism inside sofa_find_package() instead of adding a new macro definition. You can see SofaGeneralEngine as an (easy) example.; CmakeLists.txt:; ```cmake; sofa_find_package(Sofa.GL QUIET); ```; which will create the cmake variable SOFAGENERALENGINE_HAVE_SOFA_GL (${MODULENAME}_HAVE_${PACKAGENAME}). and in the config.h.in in the plugin, you can add:; ```c++; #define SOFAGENERALENGINE_HAVE_SOFA_GL @SOFAGENERALENGINE_HAVE_SOFA_GL@; ```; where @SOFAGENERALENGINE_HAVE_SOFA_GL@ will be either 0 or 1 (if the package were found in the cmake or not); And then in your code, you can do:; ```c++; #if SOFAGENERALENGINE_HAVE_SOFA_GL; // do stuff with Sofa.GL; #endif // SOFAGENERALENGINE_HAVE_SOFA_GL; ```. In this case, you have a nicely define macro in the code and not defined with the complation commands (which add_definitions does with -**DHAVE_WHATEVER**)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-847614032:253,variab,variable,253,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-847614032,3,"['config', 'plugin', 'variab']","['config', 'plugin', 'variable']"
Modifiability,"You weren't there this morning @marques-bruno but if your proposal is both :. - specifying in a descriptive way the type of numerical integration method; - the inheritance issue. and I think it does. We should go for it. I did not know the OptionsGroup class.; If not, we keep and merge Hervé's work. Hugo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361:160,inherit,inheritance,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-595246361,1,['inherit'],['inheritance']
Modifiability,"[ Follow-up of #253 ]. To sum up the ideas:; - create a manifest file @ plugin post-build; - create a configuration system where applications can find the list of plugins to load automatically at startup; - inform the user that if you want to use `<ComponentAFromPluginXXX>`, you need to add the line `<RequiredPlugin pluginName=""PluginXXX"" >`. (Everything started from:; - hard loading of SofaPython in runSofa; - in the future we want to remove ImageBMP/ImagePNG/ImageQt and use ImageCImg from the plugin CimgPlugin, and avoid to always add the RequiredPlugin line in each scene.). The Manifest file will be useful when the components in the Sofa trunk will be dispatched in several plugins (planned in the far future)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281:72,plugin,plugin,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281,7,"['Plugin', 'config', 'plugin']","['PluginXXX', 'configuration', 'plugin', 'pluginName', 'plugins']"
Modifiability,[All] Add GIT_REF option for external plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4448:38,plugin,plugins,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4448,1,['plugin'],['plugins']
Modifiability,[All] Changed default plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4322:22,plugin,plugins,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4322,1,['plugin'],['plugins']
Modifiability,[All] Display reference name when pulling external plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4507:51,plugin,plugins,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4507,1,['plugin'],['plugins']
Modifiability,[All] Fix SOFA_LIBSUFFIX used in Debug by PluginManager,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1313:42,Plugin,PluginManager,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1313,1,['Plugin'],['PluginManager']
Modifiability,[All] Introduce cmake unified configurations,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4766:30,config,configurations,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4766,1,['config'],['configurations']
Modifiability,[All] Plugins finding and loading,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/913:6,Plugin,Plugins,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/913,1,['Plugin'],['Plugins']
Modifiability,[All] Plugins: Deprecate entrypoint getModuleComponentList(),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4795:6,Plugin,Plugins,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4795,1,['Plugin'],['Plugins']
Modifiability,[All] Refactor BaseClass & ClassInfo,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1836:6,Refactor,Refactor,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1836,1,['Refactor'],['Refactor']
Modifiability,[All] Refactor DataTypeInfo system.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1605:6,Refactor,Refactor,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605,1,['Refactor'],['Refactor']
Modifiability,[All] Refactor MatrixLinearSolver (step 1),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2238:6,Refactor,Refactor,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2238,1,['Refactor'],['Refactor']
Modifiability,[All] Refactor the DataTypeinfo: v2,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1632:6,Refactor,Refactor,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1632,1,['Refactor'],['Refactor']
Modifiability,"[Anouncement] PSL plugin to write elegant, dynamic & savable SOFA scenes.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/390:18,plugin,plugin,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390,1,['plugin'],['plugin']
Modifiability,"[BeamAdapter](https://github.com/sofa-framework/beamadapter/) shall now be fetchable from SOFA CMake configuration. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890:101,config,configuration,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890,1,['config'],['configuration']
Modifiability,[Bug] Configure won't run,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752:6,Config,Configure,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752,1,['Config'],['Configure']
Modifiability,[CGALPlugin] Clean and pluginization,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308:23,plugin,pluginization,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308,1,['plugin'],['pluginization']
Modifiability,[CGal plugin][CImgPlugin] Image data moved from Image/ to CImgPlugin/,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1104:6,plugin,plugin,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1104,1,['plugin'],['plugin']
Modifiability,"[CImgPlugin, Flexible, image, CImg] Refactor CImg & CImgPlugin",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/562:13,Flexible,Flexible,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562,2,"['Flexible', 'Refactor']","['Flexible', 'Refactor']"
Modifiability,[CImgPlugin] Add plugin to load images with CImg,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185:17,plugin,plugin,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185,1,['plugin'],['plugin']
Modifiability,[CImgPlugin] FIX CMakeLists install fail since pluginization,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/609:47,plugin,pluginization,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/609,1,['plugin'],['pluginization']
Modifiability,[CImgPlugin] Less scary config warnings,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/607:24,config,config,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/607,1,['config'],['config']
Modifiability,[CImgPlugin] Minimize plugin dependencies,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2318:22,plugin,plugin,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2318,1,['plugin'],['plugin']
Modifiability,[CMakeLists.txt] Add macro to handle out-of-tree plugins in way similar to plugins/,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/530:49,plugin,plugins,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/530,2,['plugin'],['plugins']
Modifiability,[CMake] FIX build/install plugins directory,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/959:26,plugin,plugins,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/959,1,['plugin'],['plugins']
Modifiability,[CMake] FIX out-of-tree configure,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2891:24,config,configure,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2891,1,['config'],['configure']
Modifiability,[CMake] Fix Cmake configure step with SOFA_WITH_DEPRECATED_COMPONENTS,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1452:18,config,configure,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1452,1,['config'],['configure']
Modifiability,[CMake] Fix install config files,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3031:20,config,config,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3031,1,['config'],['config']
Modifiability,[CMake] Fix relocatable plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1059:24,plugin,plugins,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1059,1,['plugin'],['plugins']
Modifiability,[CMake] Speed-up Configuration (again),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3382:17,Config,Configuration,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3382,1,['Config'],['Configuration']
Modifiability,[CMake] Speedup configure step,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1837:16,config,configure,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837,1,['config'],['configure']
Modifiability,[CMake] Update all cmake_minimum_required in plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4886:45,plugin,plugins,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4886,1,['plugin'],['plugins']
Modifiability,[CMake] Use cmake_dependent_option for plugin tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1164:39,plugin,plugin,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1164,1,['plugin'],['plugin']
Modifiability,[CMake][tests] installing gtest headers for separate plugin builds,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/395:53,plugin,plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395,1,['plugin'],['plugin']
Modifiability,[Camera] Refactoring,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/674:9,Refactor,Refactoring,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/674,1,['Refactor'],['Refactoring']
Modifiability,[Carving plugin] Small fix at init.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1110:9,plugin,plugin,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1110,1,['plugin'],['plugin']
Modifiability,[Cgal plugin] Fix windows cmake dll path and add a scene example,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/958:6,plugin,plugin,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/958,1,['plugin'],['plugin']
Modifiability,[ColladaSceneLoader][SofaAssimp] Move ColladaSceneLoader plugin content into SofaAssimp plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1360:57,plugin,plugin,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360,2,['plugin'],['plugin']
Modifiability,[CollisionOBBCapsule] Fix generation of configuration file for installation,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3576:40,config,configuration,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3576,1,['config'],['configuration']
Modifiability,[Collision] Refactor the DetectionOutputVector interface and its impementation TDetectionOutputVector,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/965:12,Refactor,Refactor,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965,1,['Refactor'],['Refactor']
Modifiability,[Component.Engine.Select] Refactoring of ROI classes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4839:26,Refactor,Refactoring,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4839,1,['Refactor'],['Refactoring']
Modifiability,[Component] Unused variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2721:19,variab,variable,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2721,1,['variab'],['variable']
Modifiability,[Components.Engine.Transform] remove shadow variable in ROIValueMapper,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2987:44,variab,variable,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987,1,['variab'],['variable']
Modifiability,[Components] rename shadow variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3606:27,variab,variable,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3606,2,['variab'],['variable']
Modifiability,[Config] Add CMake option for memory sanitizer,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4847:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4847,1,['Config'],['Config']
Modifiability,[Config] Add TSAN option,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4534:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4534,1,['Config'],['Config']
Modifiability,[Config] Add cxxopts cmake find module,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4538:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4538,1,['Config'],['Config']
Modifiability,[Config] Add target generation to macro,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4135:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4135,1,['Config'],['Config']
Modifiability,[Config] Allow fast math mode for gcc/clang,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3922:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3922,1,['Config'],['Config']
Modifiability,[Config] CMake: Dont check for IPO at every configure step,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4191:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4191,2,"['Config', 'config']","['Config', 'configure']"
Modifiability,[Config] CMake: fix warning about upper/lowercase for Difflib,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4486:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4486,1,['Config'],['Config']
Modifiability,[Config] CMake: support interface-type target for install macro,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4356:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4356,1,['Config'],['Config']
Modifiability,[Config] Change type of CMake message when adding a module,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3381:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3381,1,['Config'],['Config']
Modifiability,[Config] Disable SOFA_EXTERN_TEMPLATE,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3678:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3678,1,['Config'],['Config']
Modifiability,[Config] Fix Findmetis module when using config mode,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4570:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4570,2,"['Config', 'config']","['Config', 'config']"
Modifiability,[Config] Fix QGLViewer find module on windows,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4611:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4611,1,['Config'],['Config']
Modifiability,[Config] Fix cross-compilation for embedded external libs,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3870:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3870,1,['Config'],['Config']
Modifiability,[Config] Fix findcxxopt when version is not specified,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4564:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4564,1,['Config'],['Config']
Modifiability,[Config] Integrate Tracy profiler,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4182:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4182,1,['Config'],['Config']
Modifiability,[Config] Option to enable interprocedural optimization,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3345:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3345,1,['Config'],['Config']
Modifiability,[Config] Option to set the number of MSVC processes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3313:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3313,1,['Config'],['Config']
Modifiability,[Config] POC: enable assertions even in release mode,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4496:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4496,1,['Config'],['Config']
Modifiability,[Config] Remove deprecated macros,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3265:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3265,1,['Config'],['Config']
Modifiability,[Config] Remove suspicious Eigen macro preventing vectorization,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3780:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3780,1,['Config'],['Config']
Modifiability,[Config] Remove unused SOFA_WITH_THREADING option,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3565:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3565,1,['Config'],['Config']
Modifiability,[Config] Remove unused option SOFA_WITH_DEPRECATED_COMPONENTS,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3172:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3172,1,['Config'],['Config']
Modifiability,[Config] Upgrade to C++20,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5056:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5056,1,['Config'],['Config']
Modifiability,[Config] Use cmake-generator-expression to set cxx and c flags,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4990:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4990,1,['Config'],['Config']
Modifiability,[Config][CMake] Fix include directories,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3023:1,Config,Config,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3023,1,['Config'],['Config']
Modifiability,[Constraint] Change print variable names to be consistent with doc,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3816:26,variab,variable,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3816,1,['variab'],['variable']
Modifiability,"[Core,Helper] Prevent to create objects from unloaded plugins",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4722:54,plugin,plugins,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4722,1,['plugin'],['plugins']
Modifiability,"[Core,Simulation] Inherit and link gravity from parent context if not set",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4910:18,Inherit,Inherit,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4910,1,['Inherit'],['Inherit']
Modifiability,[Core] Add filtering for unloaded plugins in ObjectFactory::getAllEntries,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4885:34,plugin,plugins,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4885,1,['plugin'],['plugins']
Modifiability,[Core] Factorize two variables with the same meaning (constraint id),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4786:21,variab,variables,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4786,1,['variab'],['variables']
Modifiability,[Core] Refactor VMultiOpEntry,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4333:7,Refactor,Refactor,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4333,1,['Refactor'],['Refactor']
Modifiability,[Core] remove shadow variables,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3224:21,variab,variables,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3224,1,['variab'],['variables']
Modifiability,[ERROR] [PluginManager] Plugin loading failed (/home/dou/Downloads/SOFA_robosoft2022_python-3.9_Linux/plugins/SofaPython3/lib/libSofaPython3.so): libpython3.9.so.1.0: cannot open shared object file: No such file or directory,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3192:9,Plugin,PluginManager,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3192,3,"['Plugin', 'plugin']","['Plugin', 'PluginManager', 'plugins']"
Modifiability,"[ERROR] [WireRestShape(catheterRestShape)] EdgeSetController has no binding EdgeSetTopologyModifier.; import sys; import Sofa. def createScene(rootNode):. rootNode.addObject('RequiredPlugin', pluginName='BeamAdapter SofaMeshCollision SofaBoundaryCondition SofaConstraint SofaMiscCollision SofaDeformable SofaGeneralLinearSolver SofaImplicitOdeSolver'); rootNode.addObject('VisualStyle', displayFlags='hideVisualModels hideBehaviorModels showCollisionModels hideMappings showInteractionForceFields'). rootNode.addObject('FreeMotionAnimationLoop'); rootNode.addObject('DefaultVisualManagerLoop'). rootNode.addObject('LCPConstraintSolver', mu='0.1', tolerance='1e-10', maxIt='1000', build_lcp='false'); rootNode.addObject('DefaultPipeline', draw='0', depth='6', verbose='1'); rootNode.addObject('BruteForceBroadPhase', name='N2'); rootNode.addObject('BVHNarrowPhase'); rootNode.addObject('LocalMinDistance', contactDistance='1', alarmDistance='5', name='localmindistance', angleCone='0.02'); rootNode.addObject('DefaultContactManager', name='Response', response='FrictionContact'). topoLines_cath = rootNode.addChild('EdgeTopology'); topoLines_cath.addObject('WireRestShape',name='catheterRestShape',; straightLength=600.0, length=1000.0,; numEdges=200, youngModulus=12000,; spireDiameter=1000, numEdgesCollis=[50, 10],; printLog=True, template='Rigid3d', spireHeight=0.0,; densityOfBeams=[30, 10], youngModulusExtremity=12000); topoLines_cath.addObject('EdgeSetTopologyContainer', name='meshLinesCath'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms', name='GeomAlgo', template='Rigid3d'); topoLines_cath.addObject('MechanicalObject', template='Rigid3d', name='dofTopo'). CatheterMechanics = rootNode.addChild('CatheterModel'); CatheterMechanics.addObject('EulerImplicitSolver', rayleighStiffness=0.2, rayleighMass=0.1, printLog='false'); CatheterMechanics.addObject('BTDLinearSolver',verification=False, subpartSolve=False, verbose=False); CatheterMechanics.addObject('RegularGridTopology', name=",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463:192,plugin,pluginName,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463,1,['plugin'],['pluginName']
Modifiability,"[ERROR]&nbsp; &nbsp;[SofaPython3::SceneLoader] Unable to completely load the scene from file 'D:/DefrostSofaBundle_win64_python3.8_v22.06.00-beta4/DefrostSofaBundle_win64_python3.8_v22.06.00-beta4/plugins/BeamAdapter/examples/python3/Cochlear-Implant-Insertion/cathter.py'.; Python exception:; &nbsp; ValueError: Object type Edge2QuadTopologicalMapping<&gt; was not created; The object is in the factory but cannot be created.; Requested template : None; Used template&nbsp; &nbsp; &nbsp; : None; Reason(s)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : Data attribute 'input' does not point to a valid mesh topology and none can be found in the parent node context. Thank you for your help. I found the following errors after following your reply. How to solve this problem?. 方得始终; ***@***.***. &nbsp;. ------------------&nbsp;原始邮件&nbsp;------------------; 发件人: ""sofa-framework/sofa"" ***@***.***&gt;;; 发送时间:&nbsp;2022年11月8日(星期二) 晚上7:11; ***@***.***&gt;;; ***@***.******@***.***&gt;;; 主题:&nbsp;Re: [sofa-framework/sofa] [ERROR] [WireRestShape(catheterRestShape)] EdgeSetController has no binding EdgeSetTopologyModifier. (Issue #3463). ; Hi,; ; you need to add a EdgeSetTopologyModifier in your first object:; topoLines_cath.addObject('EdgeSetTopologyModifier', name='meshLinesModif'); ; Hope it helps.; ; —; Reply to this email directly, view it on GitHub, or unsubscribe.; You are receiving this because you authored the thread.Message ID: ***@***.***&gt;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1307081793:197,plugin,plugins,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3463#issuecomment-1307081793,1,['plugin'],['plugins']
Modifiability,"[Engine.Select] Clean, extend and test MeshSubsetEngine",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4958:23,extend,extend,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4958,1,['extend'],['extend']
Modifiability,[FEM.Elastic] Hexa FEM inherits from BaseLinearElasticityFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4832:23,inherit,inherits,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4832,1,['inherit'],['inherits']
Modifiability,[FEM.Elastic] Minor refactor of buildStiffnessMatrix in TetrahedronFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3983:20,refactor,refactor,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3983,1,['refactor'],['refactor']
Modifiability,[FEM.Elastic] Minor refactoring and optimization in draw,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3564:20,refactor,refactoring,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3564,1,['refactor'],['refactoring']
Modifiability,[FEM.Elastic] Some FEM inherits from BaseLinearElasticityFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4852:23,inherit,inherits,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4852,1,['inherit'],['inherits']
Modifiability,[FEM.Elastic] remove static variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4883:28,variab,variable,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4883,1,['variab'],['variable']
Modifiability,[FEM.Linear] FIX & Minor refactor of buildStiffnessMatrix in TriangleFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3989:25,refactor,refactor,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3989,1,['refactor'],['refactor']
Modifiability,[Flexible] Add engines for strain smoothing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/77:1,Flexible,Flexible,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/77,1,['Flexible'],['Flexible']
Modifiability,[Flexible] FIX deps to pluginized modules,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1590:1,Flexible,Flexible,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1590,2,"['Flexible', 'plugin']","['Flexible', 'pluginized']"
Modifiability,"[Flexible] add engines and examples for strain smoothing, and minor cleaning",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/76:1,Flexible,Flexible,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/76,1,['Flexible'],['Flexible']
Modifiability,"[Flexible] add engines and examples to smooth strains, for faster convergence + minor cleaning on quadrature engines",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/75:1,Flexible,Flexible,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/75,1,['Flexible'],['Flexible']
Modifiability,[GKlib] Portable random number generation,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3072:8,Portab,Portable,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3072,1,['Portab'],['Portable']
Modifiability,[GUI.Common] FIX unused variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3158:24,variab,variable,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3158,1,['variab'],['variable']
Modifiability,[GUI.Qt] Refactor a bit the way runSofa is implementing the scenegraph colors,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4536:9,Refactor,Refactor,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4536,1,['Refactor'],['Refactor']
Modifiability,[GUI.qt] Set link to tinyxml2 to PRIVATE and fix config file,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4558:49,config,config,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4558,1,['config'],['config']
Modifiability,[GUI] GUI libraries as plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3550:23,plugin,plugins,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3550,1,['plugin'],['plugins']
Modifiability,[Geomagic Plugin] Move all code related to device model display in a dedicated class.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1366:10,Plugin,Plugin,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1366,1,['Plugin'],['Plugin']
Modifiability,[Geomagic plugin] Fix scenes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/858:10,plugin,plugin,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/858,1,['plugin'],['plugin']
Modifiability,[Geomagic] FIX compilation error in Geomagic plugin with removal of SOFA_FLOAT/DOUBLE,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/898:45,plugin,plugin,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/898,1,['plugin'],['plugin']
Modifiability,[Geomagic] Fix Geomagic plugin compilation,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2033:24,plugin,plugin,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2033,1,['plugin'],['plugin']
Modifiability,[Geomagic] Fix dll export and some enhancements,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/786:35,enhance,enhancements,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/786,1,['enhance'],['enhancements']
Modifiability,[Geomagic] Reorder plugin files for better modularization,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1208:19,plugin,plugin,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1208,1,['plugin'],['plugin']
Modifiability,[Geometry] Make global variables constexpr,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3233:23,variab,variables,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3233,1,['variab'],['variables']
Modifiability,[Haption] Partially fix the plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4338:28,plugin,plugin,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4338,1,['plugin'],['plugin']
Modifiability,[HeadlessRecorder] Handle errors in target config,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/608:43,config,config,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/608,1,['config'],['config']
Modifiability,[Helper] Deduce plugin name from path based on known extension,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2961:16,plugin,plugin,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2961,1,['plugin'],['plugin']
Modifiability,[Helper] Make clearer from where plugins are loaded,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3109:33,plugin,plugins,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109,1,['plugin'],['plugins']
Modifiability,[Helper] PluginManager Fix test in debug,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4491:9,Plugin,PluginManager,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4491,1,['Plugin'],['PluginManager']
Modifiability,[Helper] PluginManager: Check symbol (real) location and avoid calling wrong entrypoint (Mac/Linux),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4466:9,Plugin,PluginManager,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4466,1,['Plugin'],['PluginManager']
Modifiability,[Helper] PluginManager: testing loading a plugin with a dependency on an other plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4464:9,Plugin,PluginManager,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4464,3,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[Helper] Portable thread local storage duration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3422:9,Portab,Portable,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3422,1,['Portab'],['Portable']
Modifiability,[Helper] Retrieve the current user local configuration directory,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4875:41,config,configuration,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4875,1,['config'],['configuration']
Modifiability,[How-to] Profile CMake configuration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1838:23,config,configuration,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1838,1,['config'],['configuration']
Modifiability,[INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.Intersection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Detection.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Mapper.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.Contact.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.Response.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Collision.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Setting.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Controller.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Analyze.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Generate.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Select.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.Transform.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Engine.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Haptics.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering2D.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.GL.Component.Rendering3D.dylib; [INFO] [PluginManager] ,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:7292,Plugin,PluginManager,7292,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Constant.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Dynamic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Grid.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Utility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Visual.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Iterative.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Direct.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Preconditioner.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Diffusion.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.Linear.dylib; ,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:2714,Plugin,PluginManager,2714,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Constant.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Dynamic.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.Grid.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Container.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Mapping.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.Utility.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Topology.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Visual.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Iterative.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Direct.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.Preconditioner.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.LinearSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mass.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Diffusion.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.Linear.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Mapping.NonLinea,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:2824,Plugin,PluginManager,2824,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Controller.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Analyze.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Generate.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Select.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Transform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Batch.dll; [INFO] [GUI,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:9434,Plugin,PluginManager,9434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Setting.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Controller.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Analyze.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Generate.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Select.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.Transform.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.Haptics.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering2D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Rendering3D.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Engine.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.Shader.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GL.Component.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.GUI.Component.dll; [IN,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:9303,Plugin,PluginManager,9303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[ImagePNG] FIX: Library linking in debug configuration under MSVS,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/297:41,config,configuration,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/297,2,['config'],['configuration']
Modifiability,[Image] remove shadow variables,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2936:22,variab,variables,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2936,1,['variab'],['variables']
Modifiability,[InvertibleFVM] Externalize the plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1443:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1443,1,['plugin'],['plugin']
Modifiability,[LMConstraint] Move LMConstraint components in a new plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1659:53,plugin,plugin,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1659,1,['plugin'],['plugin']
Modifiability,[LMConstraint] Remove LMConstraint folder as it is an external plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2828:63,plugin,plugin,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2828,1,['plugin'],['plugin']
Modifiability,[LinearAlgebra] Refactor sparse matrix product,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4547:16,Refactor,Refactor,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4547,1,['Refactor'],['Refactor']
Modifiability,[LinearSolver.Iterative] CMake: Fix package configuration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3840:44,config,configuration,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3840,1,['config'],['configuration']
Modifiability,[LinearSystem] Refactor matrix assembly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777:15,Refactor,Refactor,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777,1,['Refactor'],['Refactor']
Modifiability,[Mass] Deprecate and make DiagonalMass inherit from MeshMatrixMass,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3912:39,inherit,inherit,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3912,1,['inherit'],['inherit']
Modifiability,[Modeler] rename shadow variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3546:24,variab,variable,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3546,1,['variab'],['variable']
Modifiability,[Modules] shadow variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2079:17,variab,variable,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2079,3,['variab'],['variable']
Modifiability,[MultiThreading] Add Image plugin Data types in DataExchange component,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770:27,plugin,plugin,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770,1,['plugin'],['plugin']
Modifiability,[MultiThreading] New components and Task scheduler classes refactoring,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/745:59,refactor,refactoring,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/745,1,['refactor'],['refactoring']
Modifiability,[Multithreading] Move TaskScheduler files from MultiThreading plugin to SofaKernel. TaskScheduler Tests included,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/805:62,plugin,plugin,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/805,1,['plugin'],['plugin']
Modifiability,[NG][Sofa.Helper] Differentiate classic library from plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/872:53,plugin,plugins,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/872,1,['plugin'],['plugins']
Modifiability,[OpenCL] Update OpenCLProgram.cpp remove unused variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4973:48,variab,variable,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4973,1,['variab'],['variable']
Modifiability,[OpenCTM plugin] Fix compilation and clean before moving out,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1359:9,plugin,plugin,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1359,1,['plugin'],['plugin']
Modifiability,"[Plugin list](https://github.com/sofa-framework/sofa/wiki/Supported-SOFA-plugins) is now completed.; Plugins with their own repo:; - [SofaMatrix](https://github.com/sofa-framework/SofaMatrix); - [SofaCarving](https://github.com/sofa-framework/SofaCarving); - [image](https://github.com/sofa-framework/image); - [CImgPlugin](https://github.com/sofa-framework/CImgPlugin); - [DiffusionSolver](https://github.com/sofa-framework/DiffusionSolver); - [ArticulatedSystemPlugin](https://github.com/sofa-framework/ArticulatedSystemPlugin); - [BulletCollisionDetection](https://github.com/sofa-framework/BulletCollisionDetection); - [SofaAssimp](https://github.com/sofa-framework/SofaAssimp); - [SofaHAPI](https://github.com/sofa-framework/SofaHAPI); - [PersistentContact](https://github.com/sofa-framework/PersistentContact); - [SofaNewMat](https://github.com/sofa-framework/SofaNewMat); - [SofaPardisoSolver](https://github.com/sofa-framework/SofaPardisoSolver); - [SofaSimpleGui](https://github.com/sofa-framework/SofaSimpleGui); - [VolumetricRendering](https://github.com/sofa-framework/VolumetricRendering); - [SofaEulerianFluid](https://github.com/sofa-framework/SofaEulerianFluid); - [SofaImplicitField](https://github.com/sofa-framework/SofaImplicitField). Related to #1442 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4589:1,Plugin,Plugin,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4589,3,"['Plugin', 'plugin']","['Plugin', 'Plugins', 'plugins']"
Modifiability,[Plugin loading] Add external_directories/ in reference repositories to search for plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2927:1,Plugin,Plugin,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2927,2,"['Plugin', 'plugin']","['Plugin', 'plugins']"
Modifiability,[PluginExample] Move the plugin to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2519:1,Plugin,PluginExample,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2519,2,"['Plugin', 'plugin']","['PluginExample', 'plugin']"
Modifiability,[PluginExample] Update example + add comments,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1053:1,Plugin,PluginExample,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1053,1,['Plugin'],['PluginExample']
Modifiability,"[PluginManager] 72 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [GUIManager] lastUsedGUI.ini not found; using default GUI.; [WARNING] [Qt] Detected locale ""C"" with character encoding ""ANSI_X3.4-1968"", which is not UTF-8.; Qt depends on a UTF-8 locale, and has switched to ""C.UTF-8"" instead.; If this causes problems, reconfigure your locale. See the locale(1) manual; for more information.; [WARNING] [Qt] Could not find the Qt platform plugin ""wayland"" in """". (process:29694): Gtk-WARNING **: 22:14:09.328: Locale not supported by C library.; 	Using the fallback 'C' locale.; Gtk-Message: 22:14:09.408: Failed to load module ""canberra-gtk-module""; Gtk-Message: 22:14:09.409: Failed to load module ""canberra-gtk-module""; [INFO] [SofaPluginManager] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [INFO] [PluginManager] 0 plugins have been loaded from /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config/loadedPlugins.ini; [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching FBConfig for QSurfaceFormat(version 3.2, options QFlags<QSurfaceFormat::FormatOption>(DeprecatedFunctions), depthBufferSize -1, redBufferSize 1, greenBufferSize 1, blueBufferSize 1, alphaBufferSize -1, stencilBufferSize -1, samples -1, swapBehavior QSurfaceFormat::SingleBuffer, swapInterval 0, colorSpace QColorSpace(), profile QSurfaceFormat::CompatibilityProfile); [WARNING] [Qt] qglx_findConfig: Failed to finding matching",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:12565,Plugin,PluginManager,12565,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugins']"
Modifiability,[PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.Preconditioner.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.LinearSolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mass.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Diffusion.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.Linear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.NonLinear.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.MappedMatrix.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.Mapping.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.StateContainer.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.Spring.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.Elastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.HyperElastic.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.NonUniform.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.SolidMechanics.FEM.so; [INFO] [PluginManager] Loaded plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:5100,Plugin,PluginManager,5100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,"[PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaTopologyMapping.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaUserInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaConstraint.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaGeneralLoader.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDenseSolver.dll; [ERROR] [PluginManager] Plugin not found: ""SofaNonUniformFem""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscTopology.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscExtra.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscForceField.dll; [ERROR] [PluginManager] Plugin not found: ""SofaMiscEngine""; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscSolver.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMiscMapping.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDe",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:8823,Plugin,PluginManager,8823,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[PluginManager] Switching compilation mode in VS causes wrong plugins to be loaded,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2338:1,Plugin,PluginManager,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2338,2,"['Plugin', 'plugin']","['PluginManager', 'plugins']"
Modifiability,[Plugin] Add Cosserat as a fetchable plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4859:1,Plugin,Plugin,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4859,2,"['Plugin', 'plugin']","['Plugin', 'plugin']"
Modifiability,[Plugin] Update PluginExample,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1356:1,Plugin,Plugin,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1356,2,['Plugin'],"['Plugin', 'PluginExample']"
Modifiability,[Plugins] Add SofaGLFW GUI,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Create ArticulatedSystem plugin (originally from SofaGeneralRigid),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684,2,"['Plugin', 'plugin']","['Plugins', 'plugin']"
Modifiability,[Plugins] Cyclic dependency between SofaDistanceGrid and SofaMiscCollision,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1897:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1897,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Disable pluginized modules by default,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/575:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/575,2,"['Plugin', 'plugin']","['Plugins', 'pluginized']"
Modifiability,[Plugins] Fix Cmake configuration w/o compat,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3209:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3209,2,"['Plugin', 'config']","['Plugins', 'configuration']"
Modifiability,[Plugins] Gather external plugins configs in a same folder (proposal),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4505:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4505,3,"['Plugin', 'config', 'plugin']","['Plugins', 'configs', 'plugins']"
Modifiability,[Plugins] Move CGALPlugin to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2500:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2500,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Move Flexible/Compliant/RigidScale to external repositories,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1873:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1873,2,"['Flexible', 'Plugin']","['Flexible', 'Plugins']"
Modifiability,[Plugins] Move ManifoldTopologies to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2623:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2623,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Move MeshSTEPLoader to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4504:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4504,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Move Newmat matters into the new SofaNewmat plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2532:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2532,2,"['Plugin', 'plugin']","['Plugins', 'plugin']"
Modifiability,[Plugins] Move OpenCTMPlugin to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2564:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2564,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Move OptitrackNatNet to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2548:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2548,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Move SofaCUDA to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2502:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2502,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Move SofaPython to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2224:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2224,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Move THMPGSpatialHashing to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2609:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2609,1,['Plugin'],['Plugins']
Modifiability,[Plugins] Sofa Fetch plugin create .gitignore file ignoring all new files,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409:1,Plugin,Plugins,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409,2,"['Plugin', 'plugin']","['Plugins', 'plugin']"
Modifiability,"[QT] Could not load the Qt platform plugin ""xcb"" in """" even though it was found.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486:36,plugin,plugin,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486,1,['plugin'],['plugin']
Modifiability,[Registration] Move the plugin to an external repository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2552:24,plugin,plugin,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2552,1,['plugin'],['plugin']
Modifiability,"[RequiredPlugin(ArticulatedSystemPlugin)] Plugin not found: ""ArticulatedSystemPlugin"". Failed to load: [""ArticulatedSystemPlugin""]; [ERROR] [RequiredPlugin(Sofa.Component.Visual)] Plugin not found: ""Sofa.Component.Visual"". Failed to load: [""Sofa.Component.Visual""]; [ERROR] [RequiredPlugin(Sofa.Component.LinearSolver.Iterative)] Plugin not found: ""Sofa.Component.LinearSolver.Iterative"". Failed to load: [""Sofa.Component.LinearSolver.Iterative""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Response.Contact)] Plugin not found: ""Sofa.Component.Collision.Response.Contact"". Failed to load: [""Sofa.Component.Collision.Response.Contact""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Rendering3D)] Plugin not found: ""Sofa.GL.Component.Rendering3D"". Failed to load: [""Sofa.GL.Component.Rendering3D""]; [ERROR] [RequiredPlugin(Sofa.GL.Component.Shader)] Plugin not found: ""Sofa.GL.Component.Shader"". Failed to load: [""Sofa.GL.Component.Shader""]; [ERROR] [RequiredPlugin(Sofa.Component.IO.Mesh)] Plugin not found: ""Sofa.Component.IO.Mesh"". Failed to load: [""Sofa.Component.IO.Mesh""]; [ERROR] [RequiredPlugin(Sofa.Component.Setting)] Plugin not found: ""Sofa.Component.Setting"". Failed to load: [""Sofa.Component.Setting""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Solver)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Solver"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Solver""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Backward)] Plugin not found: ""Sofa.Component.ODESolver.Backward"". Failed to load: [""Sofa.Component.ODESolver.Backward""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Correction)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Correction"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Correction""]; [ERROR] [RequiredPlugin(Sofa.Component.Collision.Geometry)] Plugin not found: ""Sofa.Component.Collision.Geometry"". Failed to load: [""Sofa.Component.Collision.Geometry""]; [ERROR] [SofaRuntime] ValueError",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4857:4601,Plugin,Plugin,4601,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4857,2,['Plugin'],['Plugin']
Modifiability,[SceneChecking] MissingRequiredPlugins: Adapts messages for xml and python users,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033:40,Adapt,Adapts,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033,1,['Adapt'],['Adapts']
Modifiability,[SceneCreator] Pluginizing...,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1109:15,Plugin,Pluginizing,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1109,1,['Plugin'],['Pluginizing']
Modifiability,[Sensable] Fix the compilation of the Sensable plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1019:47,plugin,plugin,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019,1,['plugin'],['plugin']
Modifiability,[Simulation.Core] Fix import of required plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3322:41,plugin,plugins,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3322,1,['plugin'],['plugins']
Modifiability,[Simulation.Core] Refactor DefaultAnimationLoop + multithreading,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959:18,Refactor,Refactor,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959,1,['Refactor'],['Refactor']
Modifiability,[Simulation] SceneCheck can be added in plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3597:40,plugin,plugins,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3597,1,['plugin'],['plugins']
Modifiability,[Simulation] Suggest required plugin in the syntax of the scene loader,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3799:30,plugin,plugin,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3799,1,['plugin'],['plugin']
Modifiability,[Sofa.Component.ODESolver] Rewrite tests without SceneCreator,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2733:27,Rewrite,Rewrite,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2733,1,['Rewrite'],['Rewrite']
Modifiability,"[Sofa.Config] CMake: Remove ""both"" as a choice for SOFA_FLOATING_POINT_TYPE parameter",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3436:6,Config,Config,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3436,1,['Config'],['Config']
Modifiability,[Sofa.Config] FIX nested relocatable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2603:6,Config,Config,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2603,1,['Config'],['Config']
Modifiability,[Sofa.Config] Rename ide folder for libraries,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3214:6,Config,Config,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3214,1,['Config'],['Config']
Modifiability,[Sofa.Config][MSVC] Change SIMD cmake option and flags,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652:6,Config,Config,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652,1,['Config'],['Config']
Modifiability,[Sofa.Core] Fix diamond inheritance in PairInteractionConstraint,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2488:24,inherit,inheritance,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2488,1,['inherit'],['inheritance']
Modifiability,[Sofa.Core] Refactor BaseObject::canCreate & BaseObject::create,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3309:12,Refactor,Refactor,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3309,1,['Refactor'],['Refactor']
Modifiability,[Sofa.Core] minor refactoring for Data::read() to move into BaseData the reading code,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3278:18,refactor,refactoring,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3278,1,['refactor'],['refactoring']
Modifiability,[Sofa.Core][SofaBaseTopology] Refactor TopologyContainer,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2387:30,Refactor,Refactor,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2387,1,['Refactor'],['Refactor']
Modifiability,[Sofa.DefaultType] Fix declaration of global variables,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2317:45,variab,variables,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2317,1,['variab'],['variables']
Modifiability,[Sofa.GL] Fix cmake config file for out-of-tree when trying to find glew on Windows,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3098:20,config,config,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3098,1,['config'],['config']
Modifiability,[Sofa.GL] Relocate the module (again) + clarify module vs plugin definitions,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1941:58,plugin,plugin,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941,1,['plugin'],['plugin']
Modifiability,[Sofa.GL] static variable belongs to the class,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1951:17,variab,variable,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1951,1,['variab'],['variable']
Modifiability,"[Sofa.GUI, Plugins] Pluginize HeadlessRecorder",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4928:11,Plugin,Plugins,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4928,2,['Plugin'],"['Pluginize', 'Plugins']"
Modifiability,[Sofa.GUI] Clean CMake variables,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2974:23,variab,variables,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2974,1,['variab'],['variables']
Modifiability,[Sofa.Helper] PluginManager: Add optional way to check if a plugin is init at the load stage,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2425:14,Plugin,PluginManager,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2425,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[Sofa.Helper] PluginManager: check if a plugin is already loaded with a different path,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2352:14,Plugin,PluginManager,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2352,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[Sofa.Testing] Add SimpleApi in Config.cmake.in,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4542:32,Config,Config,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4542,1,['Config'],['Config']
Modifiability,[SofaAssimp] fix shadow variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2844:24,variab,variable,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2844,1,['variab'],['variable']
Modifiability,[SofaAssimp] loader plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603:20,plugin,plugin,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603,1,['plugin'],['plugin']
Modifiability,[SofaAssump] Fix shadow variable in SceneColladaLoader,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4785:24,variab,variable,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4785,1,['variab'],['variable']
Modifiability,[SofaBaseCollision] REFACTOR BruteForceDetection,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1999:20,REFACTOR,REFACTOR,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1999,1,['REFACTOR'],['REFACTOR']
Modifiability,[SofaBaseMechanics] Refactor mechanicalobject,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1489:20,Refactor,Refactor,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1489,1,['Refactor'],['Refactor']
Modifiability,[SofaBaseTopology] Single definition of global variables,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1950:47,variab,variables,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1950,1,['variab'],['variables']
Modifiability,[SofaBoundaryCondition] Refactor FixedPlaneConstraint (breaking),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/803:24,Refactor,Refactor,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/803,1,['Refactor'],['Refactor']
Modifiability,[SofaCUDA] FIX Configuration/compilation issue with CUDA plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/523:15,Config,Configuration,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/523,2,"['Config', 'plugin']","['Configuration', 'plugin']"
Modifiability,[SofaCUDA] Fix CMake to compile plugin without legacy headers option,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3077:32,plugin,plugin,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3077,1,['plugin'],['plugin']
Modifiability,[SofaCUDA] Fix plugin compilation if Sofa.GUI.Qt is not used,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4312:15,plugin,plugin,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4312,1,['plugin'],['plugin']
Modifiability,[SofaCUDA] Fix static variable definition for double-precision,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2440:22,variab,variable,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2440,1,['variab'],['variable']
Modifiability,[SofaCUDA] Fix: Headers of the SofaCUDA plugin are now installed in the include folder,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/383:40,plugin,plugin,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/383,1,['plugin'],['plugin']
Modifiability,[SofaCUDA] SofaCUDANvccFlags loading fails for in-tree plugins,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2021:55,plugin,plugins,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2021,1,['plugin'],['plugins']
Modifiability,[SofaCarving] Modify the CMake config file to allow other plugins link to Sofa Carving,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/781:31,config,config,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/781,2,"['config', 'plugin']","['config', 'plugins']"
Modifiability,[SofaCarving] Refresh and enhancement,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/712:26,enhance,enhancement,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712,1,['enhance'],['enhancement']
Modifiability,[SofaCarving] plugin enhancement,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/787:14,plugin,plugin,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/787,2,"['enhance', 'plugin']","['enhancement', 'plugin']"
Modifiability,[SofaCommon] Pluginize SofaDeformable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1600:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1600,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaEngine,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1603:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1603,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaExplicitOdeSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1606:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1606,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaImplicitOdeSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1607:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1607,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaLoader,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1608:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1608,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaMeshCollision,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1602:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1602,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaObjectInteraction,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1601:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1601,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaRigid,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1599:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1599,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize SofaSimpleFem,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1598:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1598,1,['Plugin'],['Pluginize']
Modifiability,[SofaCommon] Pluginize all modules,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1597:13,Plugin,Pluginize,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1597,1,['Plugin'],['Pluginize']
Modifiability,[SofaCore] Make inheritance virtual,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2594:16,inherit,inheritance,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2594,1,['inherit'],['inheritance']
Modifiability,[SofaCore] Reorganize ObjectFactory so it becomes possible to refactor it in a smooth way,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2712:62,refactor,refactor,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712,1,['refactor'],['refactor']
Modifiability,[SofaCore] Virtual inheritance of BaseObject,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2799:19,inherit,inheritance,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2799,1,['inherit'],['inheritance']
Modifiability,[SofaDefaultType] Extend TypeInfo to handle containers that are not flat array.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851:18,Extend,Extend,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851,1,['Extend'],['Extend']
Modifiability,[SofaDistanceGrid] plugin dll not exported at sofa install,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1219:19,plugin,plugin,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1219,1,['plugin'],['plugin']
Modifiability,[SofaDistanceGrid] remove shadow variable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4455:33,variab,variable,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4455,1,['variab'],['variable']
Modifiability,[SofaEulerianFluid] Fix: rename shadow variable in Fluid2D,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3561:39,variab,variable,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3561,1,['variab'],['variable']
Modifiability,[SofaEulerianFluid] Fix: rename shadow variable in Fluid3D,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3557:39,variab,variable,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3557,1,['variab'],['variable']
Modifiability,[SofaEulerianFluid] Move examples into plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2833:39,plugin,plugin,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2833,1,['plugin'],['plugin']
Modifiability,[SofaEulerianFluid] Pluginizing the module,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/396:20,Plugin,Pluginizing,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/396,1,['Plugin'],['Pluginizing']
Modifiability,[SofaExporter] FIX allow to extend VTKExporter in a plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/309:28,extend,extend,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/309,2,"['extend', 'plugin']","['extend', 'plugin']"
Modifiability,[SofaFramework/CMake] Create configuration type dir before copying lib,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1347:29,config,configuration,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1347,1,['config'],['configuration']
Modifiability,[SofaFramework] Create Sofa.Config module,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1674:28,Config,Config,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1674,1,['Config'],['Config']
Modifiability,"[SofaFramework] Fix config files for Sofa.GL, for out-of-tree",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1911:20,config,config,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1911,1,['config'],['config']
Modifiability,[SofaFramework] Fix plugin list configuration,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/645:20,plugin,plugin,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/645,2,"['config', 'plugin']","['configuration', 'plugin']"
Modifiability,[SofaGUICommon] Fix configuration file for install with cxxopts,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2279:20,config,configuration,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2279,1,['config'],['configuration']
Modifiability,[SofaGeneralEngine] Extend features of NearestPointROI,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2595:20,Extend,Extend,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2595,1,['Extend'],['Extend']
Modifiability,[SofaGeneral] Pluginize SofaBoundaryCondition,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1556:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1556,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaConstraint,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1592:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1592,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralAnimationLoop,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1563:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1563,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralDeformable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1564:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1564,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralEngine,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1565:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1565,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralExplicitOdeSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1566:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1566,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralImplicitOdeSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1572:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1572,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralLinearSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1575:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1575,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralLoader,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1595:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1595,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralMeshCollision,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1540:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1540,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralObjectInteraction,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1580:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1580,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralRigid,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1579:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1579,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralSimpleFem,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1582:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1582,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralTopology,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1583:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1583,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGeneralVisual,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1530:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1530,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaGraphComponent,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1531:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1531,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaTopologyMapping,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1586:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1586,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize SofaUserInteraction,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1588:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1588,1,['Plugin'],['Pluginize']
Modifiability,[SofaGeneral] Pluginize all modules,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1529:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1529,1,['Plugin'],['Pluginize']
Modifiability,[SofaGraphComponent] Refactor the SceneChecker and add a new SceneChecker to test dumplicated names.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/392:21,Refactor,Refactor,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392,1,['Refactor'],['Refactor']
Modifiability,[SofaGuiQt] Fix compilation when QtGuiInteraction plugin enabled,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48:50,plugin,plugin,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48,1,['plugin'],['plugin']
Modifiability,[SofaGui] Restore and update CMake variables and modules,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3011:35,variab,variables,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3011,1,['variab'],['variables']
Modifiability,[SofaHaptics] Pluginize,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/486:14,Plugin,Pluginize,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/486,1,['Plugin'],['Pluginize']
Modifiability,[SofaHelper SofaGraphComponent] issofa_plugin: Plugin management,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:47,Plugin,Plugin,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,1,['Plugin'],['Plugin']
Modifiability,[SofaHelper] Add two search paths for every prefixes of the plugin manager,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1824:60,plugin,plugin,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1824,1,['plugin'],['plugin']
Modifiability,"[SofaHelper] FIX ""name vs path"" issue in PluginManager + FIX PluginManager_test",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1823:41,Plugin,PluginManager,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1823,1,['Plugin'],['PluginManager']
Modifiability,"[SofaHelper] FIX ""name vs path"" issue in PluginManager + FIX PluginManager_test (2)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1825:41,Plugin,PluginManager,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1825,1,['Plugin'],['PluginManager']
Modifiability,[SofaHelper] FIX PluginManager readFromIniFile plugin loading,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/580:17,Plugin,PluginManager,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/580,2,"['Plugin', 'plugin']","['PluginManager', 'plugin']"
Modifiability,[SofaHelper] Fix CMake config with SOFA_NO_OPENGL and dependency package (Windows),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1650:23,config,config,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1650,1,['config'],['config']
Modifiability,[SofaHelper] Fix unloading with PluginManager,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274:32,Plugin,PluginManager,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274,2,['Plugin'],['PluginManager']
